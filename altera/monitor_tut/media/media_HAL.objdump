
C:/Users/Jashwanth/Desktop/4th_sem/altera/monitor_tut/media/media_HAL.elf:     file format elf32-littlenios2
C:/Users/Jashwanth/Desktop/4th_sem/altera/monitor_tut/media/media_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000056ac memsz 0x000056ac flags r-x
    LOAD off    0x000066cc vaddr 0x000056cc paddr 0x000073a8 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00009084 vaddr 0x00009084 paddr 0x00009084 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005294  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d0  000053fc  000053fc  000063fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  000056cc  000073a8  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00009084  00009084  00009084  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000083a8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  000083d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000128a  00000000  00000000  00008cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000182d3  00000000  00000000  00009f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000574c  00000000  00000000  00022225  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d29c  00000000  00000000  00027971  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000110c  00000000  00000000  00034c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000291a  00000000  00000000  00035d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005512  00000000  00000000  00038636  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003db48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0003db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00040a03  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00040a06  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00040a09  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00040a0a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00040a0b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00040a0f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00040a13  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00040a17  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00040a20  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00040a29  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00040a32  2**0
                  CONTENTS, READONLY
 28 .jdi          00004996  00000000  00000000  00040a3d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000abe93  00000000  00000000  000453d3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
000053fc l    d  .rodata	00000000 .rodata
000056cc l    d  .rwdata	00000000 .rwdata
00009084 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_HAL.c
000055da l     O .rodata	00000010 C.9.1992
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000056cc l     O .rwdata	00001060 JTAG_UART
0000672c l     O .rwdata	00000030 AV_Config
0000675c l     O .rwdata	00000030 Audio
0000678c l     O .rwdata	0000002c Expansion_JP1
000067b8 l     O .rwdata	0000002c Expansion_JP2
000067e4 l     O .rwdata	0000002c Green_LEDs
00006810 l     O .rwdata	0000002c HEX3_HEX0
0000683c l     O .rwdata	0000002c Pushbuttons
00006868 l     O .rwdata	0000002c Red_LEDs
00006894 l     O .rwdata	0000002c Slider_Switches
000068c0 l     O .rwdata	00000038 PS2_Port
000068f8 l     O .rwdata	0000002c Serial_Port
00006924 l     O .rwdata	00000048 VGA_Char_Buffer
0000696c l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000f0c l     F .text	00000054 altera_avalon_jtag_uart_timeout
00000fd8 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000014a8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000279c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000028a4 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00006b68 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003498 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000387c l     F .text	00000058 std
00003988 l     F .text	00000008 __fp_lock
00003990 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000073a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004ea4 g     F .text	00000070 _isatty_r
00000948 g     F .text	00000050 alt_main
00001e20 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
000090d4 g     O .bss	00000100 alt_irq
00001858 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00004f14 g     F .text	00000078 _lseek_r
000073a8 g       *ABS*	00000000 __flash_rwdata_start
000091d4 g       *ABS*	00000000 __alt_heap_start
00004ae0 g     F .text	00000068 __sseek
000038e4 g     F .text	000000a4 __sinit
00003210 g     F .text	00000130 __swbuf_r
00001a60 g     F .text	00000088 alt_up_char_buffer_string
00001518 g     F .text	0000000c read_CE_bit
000039e4 g     F .text	00000068 __sfmoreglue
000051b8 g     F .text	00000004 __malloc_unlock
000015e8 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00001904 g     F .text	00000080 alt_up_rs232_read_fd
00001ae8 g     F .text	00000058 alt_up_char_buffer_draw
000039d4 g     F .text	00000010 _cleanup
00002514 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
00002608 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004e30 g     F .text	00000074 _fstat_r
0000909c g     O .bss	00000004 errno
00009088 g     O .bss	00000004 alt_argv
0000f370 g       *ABS*	00000000 _gp
000025e0 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
000069e8 g     O .rwdata	00000180 alt_fd_list
00002814 g     F .text	00000070 alt_find_dev
000007e4 g     F .text	000000a0 memcpy
00001b40 g     F .text	00000028 alt_up_char_buffer_clear
000039c8 g     F .text	0000000c _cleanup_r
00002908 g     F .text	00000098 alt_io_redirect
000018b8 g     F .text	0000004c alt_up_rs232_read_data
000025d0 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00001180 g     F .text	00000168 altera_avalon_jtag_uart_read
00005098 g     F .text	00000084 isatty
00001fb4 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00002e0c g     F .text	0000003c alt_icache_flush
000090a0 g     O .bss	00000004 __malloc_top_pad
00004a68 g     F .text	00000070 _sbrk_r
00001bd8 g     F .text	0000005c helper_plot_pixel
00004f8c g     F .text	00000078 _read_r
00007380 g     O .rwdata	00000004 alt_max_fd
0000188c g     F .text	0000000c alt_up_rs232_check_parity
00004d0c g     F .text	00000110 _fclose_r
00001524 g     F .text	00000008 read_num_bytes_available
00003848 g     F .text	00000034 fflush
000090a4 g     O .bss	00000004 __malloc_max_sbrked_mem
000029a0 g     F .text	000000bc alt_irq_register
00001504 g     F .text	0000000c read_RI_bit
0000243c g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
0000511c g     F .text	00000098 lseek
00007398 g     O .rwdata	00000004 _global_impure_ptr
000091d4 g       *ABS*	00000000 __bss_end
000021f8 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00002c30 g     F .text	000000ac alt_tick
00001538 g     F .text	00000008 read_data_byte
000039b0 g     F .text	00000018 __fp_lock_all
00002bfc g     F .text	00000034 alt_alarm_stop
00001510 g     F .text	00000008 read_RE_bit
00009090 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
000069c0 g     O .rwdata	00000028 alt_dev_null
000014e4 g     F .text	00000020 alt_up_parallel_port_open_dev
000016ec g     F .text	00000040 alt_up_ps2_write_data_byte
00002798 g     F .text	00000004 alt_dcache_flush_all
00002128 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
000073a8 g       *ABS*	00000000 __ram_rwdata_end
00007378 g     O .rwdata	00000008 alt_dev_list
00005304 g     F .text	000000f4 write
00002ff8 g     F .text	000000e8 _putc_r
00001c34 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
000056cc g       *ABS*	00000000 __ram_rodata_end
00005018 g     F .text	00000080 fstat
000019ac g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000091d4 g       *ABS*	00000000 end
0000172c g     F .text	00000070 alt_up_ps2_write_fd
00001b88 g     F .text	00000050 alt_up_char_buffer_init
00000f60 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
000001f0 g     F .text	000000c0 HEX_PS2
00001464 g     F .text	00000044 alt_avalon_timer_sc_init
000012e8 g     F .text	0000017c altera_avalon_jtag_uart_write
000038d4 g     F .text	00000004 __sfp_lock_acquire
00003c68 g     F .text	00000314 _free_r
00000998 g     F .text	000001dc alt_printf
0000349c g     F .text	000001b0 __call_exitprocs
000073a0 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00009094 g     O .bss	00000004 _alt_tick_rate
00009098 g     O .bss	00000004 _alt_nticks
000051bc g     F .text	000000f8 read
00000bbc g     F .text	00000280 alt_sys_init
00001560 g     F .text	00000030 alt_up_ps2_clear_fifo
00001984 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
000001a4 g     F .text	0000004c VGA_box
00000ed4 g     F .text	00000038 altera_avalon_jtag_uart_close
000056cc g       *ABS*	00000000 __ram_rwdata_start
000053fc g       *ABS*	00000000 __ram_rodata_start
000090ac g     O .bss	00000028 __malloc_current_mallinfo
00000eac g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00002da0 g     F .text	0000006c alt_get_fd
00004c9c g     F .text	00000070 _close_r
00002e80 g     F .text	00000074 memcmp
00000e5c g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000091d4 g       *ABS*	00000000 __alt_stack_base
00000e3c g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
0000335c g     F .text	0000013c __swsetup_r
00003a4c g     F .text	000000f0 __sfp
00006f68 g     O .rwdata	00000408 __malloc_av_
000038e0 g     F .text	00000004 __sinit_lock_release
00004bc4 g     F .text	00000060 __sread
00001a1c g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00002ce4 g     F .text	000000bc alt_find_file
000027a4 g     F .text	00000070 alt_dev_llist_insert
000051b4 g     F .text	00000004 __malloc_lock
000052b4 g     F .text	00000050 sbrk
0000364c g     F .text	000001fc _fflush_r
00009084 g       *ABS*	00000000 __bss_start
000049d0 g     F .text	00000098 memset
000002b0 g     F .text	00000534 main
0000908c g     O .bss	00000004 alt_envp
000090a8 g     O .bss	00000004 __malloc_max_total_mem
000024f0 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001b68 g     F .text	00000020 alt_up_char_buffer_open_dev
00000e84 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00003340 g     F .text	0000001c __swbuf
00004ad8 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00004e1c g     F .text	00000014 fclose
00001590 g     F .text	00000058 alt_up_ps2_read_data_byte
00004290 g     F .text	00000740 _malloc_r
00007384 g     O .rwdata	00000004 alt_errno
00004044 g     F .text	000000b8 _fwalk
00001540 g     F .text	00000020 alt_up_ps2_open_dev
00002ef4 g     F .text	00000104 putc
00003b3c g     F .text	0000012c _malloc_trim_r
00001874 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
000030e0 g     F .text	000000bc strcmp
000053fc g       *ABS*	00000000 __flash_rodata_start
00001898 g     F .text	00000020 alt_up_rs232_open_dev
00000b9c g     F .text	00000020 alt_irq_init
00002bd8 g     F .text	00000024 alt_release_fd
0000152c g     F .text	0000000c read_data_valid
0000179c g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00004c24 g     F .text	00000078 _write_r
00007394 g     O .rwdata	00000004 _impure_ptr
00009084 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00003998 g     F .text	00000018 __fp_unlock_all
00007370 g     O .rwdata	00000008 alt_fs_list
00001a38 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001994 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000073a8 g       *ABS*	00000000 _edata
000091d4 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
0000110c g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00004b48 g     F .text	0000007c __swrite
0000739c g     O .rwdata	00000004 __malloc_trim_threshold
00002cdc g     F .text	00000008 altera_nios2_qsys_irq_init
00002e48 g     F .text	00000038 exit
00003f7c g     F .text	000000c8 _fwalk_reent
000017d0 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000038d8 g     F .text	00000004 __sfp_lock_release
00005004 g     F .text	00000014 _exit
00002628 g     F .text	00000094 alt_alarm_start
000040fc g     F .text	00000194 __smakebuf_r
00001690 g     F .text	0000005c alt_up_ps2_wait_for_ack
0000319c g     F .text	00000074 strlen
00002a5c g     F .text	0000017c open
00000b74 g     F .text	00000028 alt_putchar
00002884 g     F .text	00000020 alt_icache_flush_all
00007388 g     O .rwdata	00000004 alt_priority_mask
00001668 g     F .text	00000028 alt_up_ps2_read_fd
0000738c g     O .rwdata	00000008 alt_alarm_list
00001a50 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
000026bc g     F .text	000000dc close
00000884 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
000038dc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00808014 	movui	r2,512
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	84243504 	addi	r16,r16,-28460
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6bcdc14 	ori	gp,gp,62320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a42114 	ori	r2,r2,36996

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e47514 	ori	r3,r3,37332

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00008840 	call	884 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00009480 	call	948 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor 
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     1a4:	dac0000b 	ldhu	r11,0(sp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1a8:	39401016 	blt	r7,r5,1ec <VGA_box+0x48>
     1ac:	03000044 	movi	r12,1
     1b0:	00000c06 	br	1e4 <VGA_box+0x40>
     1b4:	2007883a 	mov	r3,r4
     1b8:	2810927a 	slli	r8,r5,9
     1bc:	02820034 	movhi	r10,2048
     1c0:	02400044 	movi	r9,1
	{
		col = x1;
		while (col <= x2)
		{
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     1c4:	40c5883a 	add	r2,r8,r3
     1c8:	1085883a 	add	r2,r2,r2
     1cc:	1285883a 	add	r2,r2,r10
     1d0:	12c0000d 	sth	r11,0(r2)
			++col;
     1d4:	1a47883a 	add	r3,r3,r9

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     1d8:	30fffa0e 	bge	r6,r3,1c4 <VGA_box+0x20>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1dc:	2b0b883a 	add	r5,r5,r12
     1e0:	39400216 	blt	r7,r5,1ec <VGA_box+0x48>
	{
		col = x1;
		while (col <= x2)
     1e4:	313ff30e 	bge	r6,r4,1b4 <VGA_box+0x10>
     1e8:	003ffc06 	br	1dc <VGA_box+0x38>
     1ec:	f800283a 	ret

000001f0 <HEX_PS2>:

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2)
{
     1f0:	defff704 	addi	sp,sp,-36
     1f4:	dfc00815 	stw	ra,32(sp)
     1f8:	dc800715 	stw	r18,28(sp)
     1fc:	dc400615 	stw	r17,24(sp)
     200:	dc000515 	stw	r16,20(sp)
     204:	2021883a 	mov	r16,r4
     208:	2823883a 	mov	r17,r5
	volatile int * HEX3_HEX0_ptr = (int *) 0x10000020;

	// SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in 
	// a single 7-seg display in the DE1 Media Computer, for the hex digits 0 - F */
	char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
     20c:	04800404 	movi	r18,16
     210:	d809883a 	mov	r4,sp
     214:	01400034 	movhi	r5,0
     218:	29557684 	addi	r5,r5,21978
     21c:	900d883a 	mov	r6,r18
     220:	00007e40 	call	7e4 <memcpy>
	char	hex_segs[] = { 0, 0, 0, 0};
	int shift_buffer, nibble;
	char code;
	int i;

	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
     224:	84003fcc 	andi	r16,r16,255
     228:	8020923a 	slli	r16,r16,8
     22c:	8c403fcc 	andi	r17,r17,255
     230:	8460b03a 	or	r16,r16,r17
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     234:	00c003c4 	movi	r3,15
     238:	80c4703a 	and	r2,r16,r3
     23c:	d885883a 	add	r2,sp,r2
     240:	10800003 	ldbu	r2,0(r2)
     244:	d8800405 	stb	r2,16(sp)
		shift_buffer = shift_buffer >> 4;
     248:	8005d13a 	srai	r2,r16,4
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     24c:	10c4703a 	and	r2,r2,r3
     250:	d885883a 	add	r2,sp,r2
     254:	10800003 	ldbu	r2,0(r2)
     258:	d8800445 	stb	r2,17(sp)
		shift_buffer = shift_buffer >> 4;
     25c:	8005d23a 	srai	r2,r16,8
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     260:	10c4703a 	and	r2,r2,r3
     264:	d885883a 	add	r2,sp,r2
     268:	10800003 	ldbu	r2,0(r2)
     26c:	d8800485 	stb	r2,18(sp)
     270:	8021d33a 	srai	r16,r16,12
     274:	80e0703a 	and	r16,r16,r3
     278:	dc05883a 	add	r2,sp,r16
     27c:	10800003 	ldbu	r2,0(r2)
     280:	d88004c5 	stb	r2,19(sp)
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
     284:	dc85883a 	add	r2,sp,r18
     288:	10c00017 	ldw	r3,0(r2)
     28c:	00840034 	movhi	r2,4096
     290:	10800804 	addi	r2,r2,32
     294:	10c00015 	stw	r3,0(r2)
}  
     298:	dfc00817 	ldw	ra,32(sp)
     29c:	dc800717 	ldw	r18,28(sp)
     2a0:	dc400617 	ldw	r17,24(sp)
     2a4:	dc000517 	ldw	r16,20(sp)
     2a8:	dec00904 	addi	sp,sp,36
     2ac:	f800283a 	ret

000002b0 <main>:
 * 	   the box
 * 	4. Displays the last two bytes of data received from the PS/2 port 
 * 	   on the HEX displays on the DE1 board
********************************************************************************/
int main(void)
{
     2b0:	deff2c04 	addi	sp,sp,-848
     2b4:	dfc0d315 	stw	ra,844(sp)
     2b8:	df00d215 	stw	fp,840(sp)
     2bc:	ddc0d115 	stw	r23,836(sp)
     2c0:	dd80d015 	stw	r22,832(sp)
     2c4:	dd40cf15 	stw	r21,828(sp)
     2c8:	dd00ce15 	stw	r20,824(sp)
     2cc:	dcc0cd15 	stw	r19,820(sp)
     2d0:	dc80cc15 	stw	r18,816(sp)
     2d4:	dc40cb15 	stw	r17,812(sp)
     2d8:	dc00ca15 	stw	r16,808(sp)
	alt_up_parallel_port_dev *green_LEDs_dev;
	alt_up_parallel_port_dev *KEY_dev;
	alt_up_ps2_dev * PS2_dev;
	alt_up_char_buffer_dev * char_buffer_dev;
    alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     2dc:	01000034 	movhi	r4,0
     2e0:	2114ff04 	addi	r4,r4,21500
     2e4:	00026080 	call	2608 <alt_up_pixel_buffer_dma_open_dev>
     2e8:	1021883a 	mov	r16,r2
	if ( pixel_buffer_dev == NULL)
     2ec:	1000041e 	bne	r2,zero,300 <main+0x50>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     2f0:	01000034 	movhi	r4,0
     2f4:	21150504 	addi	r4,r4,21524
     2f8:	00009980 	call	998 <alt_printf>
     2fc:	00000306 	br	30c <main+0x5c>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     300:	01000034 	movhi	r4,0
     304:	21151104 	addi	r4,r4,21572
     308:	00009980 	call	998 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     30c:	8009883a 	mov	r4,r16
     310:	000b883a 	mov	r5,zero
     314:	000243c0 	call	243c <alt_up_pixel_buffer_dma_clear_screen>
     318:	d8800044 	addi	r2,sp,1
     31c:	00c01404 	movi	r3,80
     320:	d900b444 	addi	r4,sp,721
	char text_top_row[40] = "Altera DE1\0";
	char text_bottom_row[40] = "Media Computer\0";
	char display_vga[10][80];
	int count = 0,i = 0,init=0;
	for(init=0;init<9;init++)
	 display_vga[init][0] = '\0';
     324:	10000005 	stb	zero,0(r2)
     328:	10c5883a 	add	r2,r2,r3
	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE1\0";
	char text_bottom_row[40] = "Media Computer\0";
	char display_vga[10][80];
	int count = 0,i = 0,init=0;
	for(init=0;init<9;init++)
     32c:	113ffd1e 	bne	r2,r4,324 <main+0x74>
	 display_vga[init][0] = '\0';
    char key;
	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     330:	01000034 	movhi	r4,0
     334:	21151c04 	addi	r4,r4,21616
     338:	0001b680 	call	1b68 <alt_up_char_buffer_open_dev>
     33c:	1027883a 	mov	r19,r2
	if ( char_buffer_dev == NULL)
     340:	1000041e 	bne	r2,zero,354 <main+0xa4>
	{
		alt_printf ("Error: could not open character buffer device\n");
     344:	01000034 	movhi	r4,0
     348:	21152204 	addi	r4,r4,21640
     34c:	00009980 	call	998 <alt_printf>
     350:	00011706 	br	7b0 <main+0x500>
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     354:	01000034 	movhi	r4,0
     358:	21152e04 	addi	r4,r4,21688
     35c:	00009980 	call	998 <alt_printf>
//	alt_up_char_buffer_string (char_buffer_dev, text_top_row, 35, 29);
//	alt_up_char_buffer_string (char_buffer_dev, text_bottom_row, 35, 30);
//	VGA_box (34*4, 28*4, 50*4, 32*4, 0x187F);
    
	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     360:	01000034 	movhi	r4,0
     364:	21153604 	addi	r4,r4,21720
     368:	00015400 	call	1540 <alt_up_ps2_open_dev>
     36c:	102b883a 	mov	r21,r2
	if ( PS2_dev == NULL)
     370:	1000041e 	bne	r2,zero,384 <main+0xd4>
	{
		alt_printf ("Error: could not open PS2 device\n");
     374:	01000034 	movhi	r4,0
     378:	21153a04 	addi	r4,r4,21736
     37c:	00009980 	call	998 <alt_printf>
     380:	00010b06 	br	7b0 <main+0x500>
		return -1;
	}
	else
		alt_printf ("Opened PS2 device\n");
     384:	01000034 	movhi	r4,0
     388:	21154304 	addi	r4,r4,21772
     38c:	00009980 	call	998 <alt_printf>

	// open the pushbutton KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     390:	01000034 	movhi	r4,0
     394:	21154804 	addi	r4,r4,21792
     398:	00014e40 	call	14e4 <alt_up_parallel_port_open_dev>
	if ( KEY_dev == NULL)
     39c:	1000041e 	bne	r2,zero,3b0 <main+0x100>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     3a0:	01000034 	movhi	r4,0
     3a4:	21154d04 	addi	r4,r4,21812
     3a8:	00009980 	call	998 <alt_printf>
     3ac:	00010006 	br	7b0 <main+0x500>
		return -1;
	}
	else
		alt_printf ("Opened pushbutton KEY device\n");
     3b0:	01000034 	movhi	r4,0
     3b4:	21155904 	addi	r4,r4,21860
     3b8:	00009980 	call	998 <alt_printf>

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     3bc:	01000034 	movhi	r4,0
     3c0:	21156104 	addi	r4,r4,21892
     3c4:	00014e40 	call	14e4 <alt_up_parallel_port_open_dev>
	if (green_LEDs_dev == NULL)
     3c8:	1000041e 	bne	r2,zero,3dc <main+0x12c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     3cc:	01000034 	movhi	r4,0
     3d0:	21156504 	addi	r4,r4,21908
     3d4:	00009980 	call	998 <alt_printf>
     3d8:	0000f506 	br	7b0 <main+0x500>
		return -1;
	}
	else
		alt_printf ("Opened green LEDs device\n");
     3dc:	01000034 	movhi	r4,0
     3e0:	21157004 	addi	r4,r4,21952
     3e4:	00009980 	call	998 <alt_printf>

	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     3e8:	a809883a 	mov	r4,r21
     3ec:	01403fc4 	movi	r5,255
     3f0:	00016ec0 	call	16ec <alt_up_ps2_write_data_byte>
     3f4:	0021883a 	mov	r16,zero
     3f8:	d800c915 	stw	zero,804(sp)
     3fc:	0039883a 	mov	fp,zero
     400:	00000206 	br	40c <main+0x15c>
     404:	8029883a 	mov	r20,r16
     408:	a021883a 	mov	r16,r20
	{
	 //      int success =  decode_scancode(PS2_dev,&decode_mode,&buf,&key);       
	//	   if(success==0)
	//	   {
			/* check for PS/2 data--display on HEX displays */
  		if (alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
     40c:	a809883a 	mov	r4,r21
     410:	d80b883a 	mov	r5,sp
     414:	00015900 	call	1590 <alt_up_ps2_read_data_byte>
     418:	103ffa1e 	bne	r2,zero,404 <main+0x154>
		{
		   
	//		 shift the next data byte into the display 
			byte1 = byte2;
			byte2 = PS2_data;
     41c:	dd000003 	ldbu	r20,0(sp)
			HEX_PS2 (byte1, byte2);
     420:	81003fcc 	andi	r4,r16,255
     424:	2100201c 	xori	r4,r4,128
     428:	213fe004 	addi	r4,r4,-128
     42c:	a1403fcc 	andi	r5,r20,255
     430:	2940201c 	xori	r5,r5,128
     434:	297fe004 	addi	r5,r5,-128
     438:	00001f00 	call	1f0 <HEX_PS2>
			if(byte1==240 || byte1==byte2)
     43c:	81003fcc 	andi	r4,r16,255
     440:	00803c04 	movi	r2,240
     444:	20800226 	beq	r4,r2,450 <main+0x1a0>
     448:	a0803fcc 	andi	r2,r20,255
     44c:	20bfee1e 	bne	r4,r2,408 <main+0x158>
			{
			  switch(byte2)
     450:	a0bffac4 	addi	r2,r20,-21
     454:	10c03fcc 	andi	r3,r2,255
     458:	00800e04 	movi	r2,56
     45c:	10c04236 	bltu	r2,r3,568 <main+0x2b8>
     460:	18c5883a 	add	r2,r3,r3
     464:	1085883a 	add	r2,r2,r2
     468:	00c00034 	movhi	r3,0
     46c:	18c11f04 	addi	r3,r3,1148
     470:	10c5883a 	add	r2,r2,r3
     474:	10800017 	ldw	r2,0(r2)
     478:	1000683a 	jmp	r2
     47c:	000005f0 	cmpltui	zero,zero,23
     480:	00000648 	cmpgei	zero,zero,25
     484:	00000568 	cmpgeui	zero,zero,21
     488:	00000568 	cmpgeui	zero,zero,21
     48c:	00000568 	cmpgeui	zero,zero,21
     490:	00000638 	rdprs	zero,zero,24
     494:	00000600 	call	60 <__flash_exceptions_start+0x40>
     498:	00000570 	cmpltui	zero,zero,21
     49c:	00000620 	cmpeqi	zero,zero,24
     4a0:	00000650 	cmplti	zero,zero,25
     4a4:	00000568 	cmpgeui	zero,zero,21
     4a8:	00000568 	cmpgeui	zero,zero,21
     4ac:	00000580 	call	58 <__flash_exceptions_start+0x38>
     4b0:	00000628 	cmpgeui	zero,zero,24
     4b4:	00000588 	cmpgei	zero,zero,22
     4b8:	00000590 	cmplti	zero,zero,22
     4bc:	00000660 	cmpeqi	zero,zero,25
     4c0:	00000658 	cmpnei	zero,zero,25
     4c4:	00000568 	cmpgeui	zero,zero,21
     4c8:	00000568 	cmpgeui	zero,zero,21
     4cc:	00000568 	cmpgeui	zero,zero,21
     4d0:	00000618 	cmpnei	zero,zero,24
     4d4:	00000598 	cmpnei	zero,zero,22
     4d8:	00000608 	cmpgei	zero,zero,24
     4dc:	000005f8 	rdprs	zero,zero,23
     4e0:	00000668 	cmpgeui	zero,zero,25
     4e4:	00000568 	cmpgeui	zero,zero,21
     4e8:	00000568 	cmpgeui	zero,zero,21
     4ec:	000005d8 	cmpnei	zero,zero,23
     4f0:	00000578 	rdprs	zero,zero,21
     4f4:	000005a8 	cmpgeui	zero,zero,22
     4f8:	000005a0 	cmpeqi	zero,zero,22
     4fc:	00000630 	cmpltui	zero,zero,24
     500:	00000670 	cmpltui	zero,zero,25
     504:	00000568 	cmpgeui	zero,zero,21
     508:	00000568 	cmpgeui	zero,zero,21
     50c:	00000568 	cmpgeui	zero,zero,21
     510:	000005d0 	cmplti	zero,zero,23
     514:	000005b8 	rdprs	zero,zero,22
     518:	00000610 	cmplti	zero,zero,24
     51c:	00000678 	rdprs	zero,zero,25
     520:	00000680 	call	68 <__flash_exceptions_start+0x48>
     524:	00000568 	cmpgeui	zero,zero,21
     528:	00000568 	cmpgeui	zero,zero,21
     52c:	00000568 	cmpgeui	zero,zero,21
     530:	000005c0 	call	5c <__flash_exceptions_start+0x3c>
     534:	000005b0 	cmpltui	zero,zero,22
     538:	000005e0 	cmpeqi	zero,zero,23
     53c:	00000640 	call	64 <__flash_exceptions_start+0x44>
     540:	00000560 	cmpeqi	zero,zero,21
     544:	00000568 	cmpgeui	zero,zero,21
     548:	00000568 	cmpgeui	zero,zero,21
     54c:	00000568 	cmpgeui	zero,zero,21
     550:	00000568 	cmpgeui	zero,zero,21
     554:	000005c8 	cmpgei	zero,zero,23
     558:	00000568 	cmpgeui	zero,zero,21
     55c:	000005e8 	cmpgeui	zero,zero,23
     560:	01800e44 	movi	r6,57
     564:	00004706 	br	684 <main+0x3d4>
     568:	01800804 	movi	r6,32
     56c:	00004506 	br	684 <main+0x3d4>
     570:	01801044 	movi	r6,65
     574:	00004306 	br	684 <main+0x3d4>
			  {
			   case 28:
			    key = 'A';
				break;
     578:	01801084 	movi	r6,66
     57c:	00004106 	br	684 <main+0x3d4>
			   case 50:
			    key = 'B';
				break;
     580:	018010c4 	movi	r6,67
     584:	00003f06 	br	684 <main+0x3d4>
			   case 33:
			    key = 'C';
				break;
     588:	01801104 	movi	r6,68
     58c:	00003d06 	br	684 <main+0x3d4>
			   case 35:
			    key = 'D';
				break;
     590:	01801144 	movi	r6,69
     594:	00003b06 	br	684 <main+0x3d4>
			   case 36:
			    key = 'E';
				break;
     598:	01801184 	movi	r6,70
     59c:	00003906 	br	684 <main+0x3d4>
			   case 43:
			    key = 'F';
				break;
     5a0:	018011c4 	movi	r6,71
     5a4:	00003706 	br	684 <main+0x3d4>
			   case 52:
			    key = 'G';
				break;
     5a8:	01801204 	movi	r6,72
     5ac:	00003506 	br	684 <main+0x3d4>
			   case 51:
			    key = 'H';
				break;
     5b0:	01801244 	movi	r6,73
     5b4:	00003306 	br	684 <main+0x3d4>
			   case 67:
			    key = 'I';
				break;
     5b8:	01801284 	movi	r6,74
     5bc:	00003106 	br	684 <main+0x3d4>
			   case 59:
			    key = 'J';
				break;
     5c0:	018012c4 	movi	r6,75
     5c4:	00002f06 	br	684 <main+0x3d4>
			   case 66:
			    key = 'K';
				break;
     5c8:	01801304 	movi	r6,76
     5cc:	00002d06 	br	684 <main+0x3d4>
			   case 75:
			    key = 'L';
				break;
     5d0:	01801344 	movi	r6,77
     5d4:	00002b06 	br	684 <main+0x3d4>
			   case 58:
			    key = 'M';
				 break;
     5d8:	01801384 	movi	r6,78
     5dc:	00002906 	br	684 <main+0x3d4>
               case 49:
                key = 'N';
                break;
     5e0:	018013c4 	movi	r6,79
     5e4:	00002706 	br	684 <main+0x3d4>
			   case 68:
			    key = 'O';
				break;
     5e8:	01801404 	movi	r6,80
     5ec:	00002506 	br	684 <main+0x3d4>
               case 77:
                key = 'P';
                break;
     5f0:	01801444 	movi	r6,81
     5f4:	00002306 	br	684 <main+0x3d4>
               case 21:
                key = 'Q';
                break;
     5f8:	01801484 	movi	r6,82
     5fc:	00002106 	br	684 <main+0x3d4>
               case 45:
                key = 'R';
                break;
     600:	018014c4 	movi	r6,83
     604:	00001f06 	br	684 <main+0x3d4>
               case 27:
                key = 'S';
                break;
     608:	01801504 	movi	r6,84
     60c:	00001d06 	br	684 <main+0x3d4>
               case 44:
                key = 'T';
                break;
     610:	01801544 	movi	r6,85
     614:	00001b06 	br	684 <main+0x3d4>
               case 60:
                key = 'U';
                break;
     618:	01801584 	movi	r6,86
     61c:	00001906 	br	684 <main+0x3d4>
               case 42:
                key = 'V';
                break;
     620:	018015c4 	movi	r6,87
     624:	00001706 	br	684 <main+0x3d4>
               case 29:
                key = 'W';
                break;
     628:	01801604 	movi	r6,88
     62c:	00001506 	br	684 <main+0x3d4>
               case 34:
                key = 'X';
				break;
     630:	01801644 	movi	r6,89
     634:	00001306 	br	684 <main+0x3d4>
               case 53:
                key = 'Y';
			    break;
     638:	01801684 	movi	r6,90
     63c:	00001106 	br	684 <main+0x3d4>
			   case 26:
			    key = 'Z';
				break;
     640:	01800c04 	movi	r6,48
     644:	00000f06 	br	684 <main+0x3d4>
			   case 41:
			    key = ' ';
				break;
			   case 69:
			    key = '0';
				break;
     648:	01800c44 	movi	r6,49
     64c:	00000d06 	br	684 <main+0x3d4>
			   case 22:
			    key = '1';
				break;
     650:	01800c84 	movi	r6,50
     654:	00000b06 	br	684 <main+0x3d4>
			   case 30:
			    key = '2';
				break;
     658:	01800cc4 	movi	r6,51
     65c:	00000906 	br	684 <main+0x3d4>
			   case 38:
			    key = '3';
				break;
     660:	01800d04 	movi	r6,52
     664:	00000706 	br	684 <main+0x3d4>
			   case 37:
			    key = '4';
				break;
     668:	01800d44 	movi	r6,53
     66c:	00000506 	br	684 <main+0x3d4>
			   case 46:
			    key = '5';
				break;
     670:	01800d84 	movi	r6,54
     674:	00000306 	br	684 <main+0x3d4>
			   case 54:
			    key = '6';
				break;
     678:	01800dc4 	movi	r6,55
     67c:	00000106 	br	684 <main+0x3d4>
			   case 61:
			    key = '7';
				break;
     680:	01800e04 	movi	r6,56
				break;
			   default:
			    key = ' ';
			 }
		     display_vga[i][count]   = key;
		     display_vga[i][count+1] = '\0';
     684:	d880c917 	ldw	r2,804(sp)
     688:	11400044 	addi	r5,r2,1
//		    alt_up_char_buffer_string(char_buffer_dev,display_vga, 0, 0); 
             count = count+1;
			 if(count > 70)
     68c:	00801184 	movi	r2,70
     690:	11400316 	blt	r2,r5,6a0 <main+0x3f0>
     694:	282d883a 	mov	r22,r5
     698:	e02f883a 	mov	r23,fp
     69c:	00000206 	br	6a8 <main+0x3f8>
			 {
			  count = 0;
			  i++;
     6a0:	e5c00044 	addi	r23,fp,1
     6a4:	002d883a 	mov	r22,zero
			 } 
		//	alt_up_char_buffer_string(char_buffer_dev,display_vga, 0, 0);
		  /*  if(i>=0) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[0], 4, 0);
     6a8:	01000044 	movi	r4,1
     6ac:	d923883a 	add	r17,sp,r4
			    key = '9';
				break;
			   default:
			    key = ' ';
			 }
		     display_vga[i][count]   = key;
     6b0:	04801404 	movi	r18,80
     6b4:	e487383a 	mul	r3,fp,r18
     6b8:	1ec7883a 	add	r3,r3,sp
     6bc:	d9c0c917 	ldw	r7,804(sp)
     6c0:	19c5883a 	add	r2,r3,r7
     6c4:	1105883a 	add	r2,r2,r4
     6c8:	11800005 	stb	r6,0(r2)
		     display_vga[i][count+1] = '\0';
     6cc:	1947883a 	add	r3,r3,r5
     6d0:	1907883a 	add	r3,r3,r4
     6d4:	18000005 	stb	zero,0(r3)
			 {
			  count = 0;
			  i++;
			 } 
		//	alt_up_char_buffer_string(char_buffer_dev,display_vga, 0, 0);
		  /*  if(i>=0) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[0], 4, 0);
     6d8:	04000104 	movi	r16,4
     6dc:	9809883a 	mov	r4,r19
     6e0:	880b883a 	mov	r5,r17
     6e4:	800d883a 	mov	r6,r16
     6e8:	000f883a 	mov	r7,zero
     6ec:	0001a600 	call	1a60 <alt_up_char_buffer_string>
          /*  if(i>=1) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[1], 4, 2);
     6f0:	9809883a 	mov	r4,r19
     6f4:	8c8b883a 	add	r5,r17,r18
     6f8:	800d883a 	mov	r6,r16
     6fc:	01c00084 	movi	r7,2
     700:	0001a600 	call	1a60 <alt_up_char_buffer_string>
          /*  if(i>=2)*/  alt_up_char_buffer_string (char_buffer_dev,display_vga[2], 4, 4);
     704:	9809883a 	mov	r4,r19
     708:	89402804 	addi	r5,r17,160
     70c:	800d883a 	mov	r6,r16
     710:	800f883a 	mov	r7,r16
     714:	0001a600 	call	1a60 <alt_up_char_buffer_string>
          /*  if(i>=3) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[3], 4, 6);
     718:	9809883a 	mov	r4,r19
     71c:	89403c04 	addi	r5,r17,240
     720:	800d883a 	mov	r6,r16
     724:	01c00184 	movi	r7,6
     728:	0001a600 	call	1a60 <alt_up_char_buffer_string>
          /*  if(i>=4) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[4], 4, 8);
     72c:	9809883a 	mov	r4,r19
     730:	89405004 	addi	r5,r17,320
     734:	800d883a 	mov	r6,r16
     738:	01c00204 	movi	r7,8
     73c:	0001a600 	call	1a60 <alt_up_char_buffer_string>
                          alt_up_char_buffer_string (char_buffer_dev,display_vga[5], 4, 10);
     740:	9809883a 	mov	r4,r19
     744:	89406404 	addi	r5,r17,400
     748:	800d883a 	mov	r6,r16
     74c:	01c00284 	movi	r7,10
     750:	0001a600 	call	1a60 <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[6], 4, 12);
     754:	9809883a 	mov	r4,r19
     758:	89407804 	addi	r5,r17,480
     75c:	800d883a 	mov	r6,r16
     760:	01c00304 	movi	r7,12
     764:	0001a600 	call	1a60 <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[7], 4, 14);
     768:	9809883a 	mov	r4,r19
     76c:	89408c04 	addi	r5,r17,560
     770:	800d883a 	mov	r6,r16
     774:	01c00384 	movi	r7,14
     778:	0001a600 	call	1a60 <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[8], 4, 16);
     77c:	9809883a 	mov	r4,r19
     780:	8940a004 	addi	r5,r17,640
     784:	800d883a 	mov	r6,r16
     788:	01c00404 	movi	r7,16
     78c:	0001a600 	call	1a60 <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[9], 4, 18);
     790:	9809883a 	mov	r4,r19
     794:	8940b404 	addi	r5,r17,720
     798:	800d883a 	mov	r6,r16
     79c:	01c00484 	movi	r7,18
     7a0:	0001a600 	call	1a60 <alt_up_char_buffer_string>
     7a4:	dd80c915 	stw	r22,804(sp)
     7a8:	b839883a 	mov	fp,r23
     7ac:	003f1606 	br	408 <main+0x158>
				// mouse inserted; initialize sending of data
				(void) alt_up_ps2_write_data_byte (PS2_dev, 0xF4); 
		}  
	  }	   
	}
}
     7b0:	00bfffc4 	movi	r2,-1
     7b4:	dfc0d317 	ldw	ra,844(sp)
     7b8:	df00d217 	ldw	fp,840(sp)
     7bc:	ddc0d117 	ldw	r23,836(sp)
     7c0:	dd80d017 	ldw	r22,832(sp)
     7c4:	dd40cf17 	ldw	r21,828(sp)
     7c8:	dd00ce17 	ldw	r20,824(sp)
     7cc:	dcc0cd17 	ldw	r19,820(sp)
     7d0:	dc80cc17 	ldw	r18,816(sp)
     7d4:	dc40cb17 	ldw	r17,812(sp)
     7d8:	dc00ca17 	ldw	r16,808(sp)
     7dc:	dec0d404 	addi	sp,sp,848
     7e0:	f800283a 	ret

000007e4 <memcpy>:
     7e4:	01c003c4 	movi	r7,15
     7e8:	2007883a 	mov	r3,r4
     7ec:	3980032e 	bgeu	r7,r6,7fc <memcpy+0x18>
     7f0:	2904b03a 	or	r2,r5,r4
     7f4:	108000cc 	andi	r2,r2,3
     7f8:	10000926 	beq	r2,zero,820 <memcpy+0x3c>
     7fc:	30000626 	beq	r6,zero,818 <memcpy+0x34>
     800:	30cd883a 	add	r6,r6,r3
     804:	28800003 	ldbu	r2,0(r5)
     808:	29400044 	addi	r5,r5,1
     80c:	18800005 	stb	r2,0(r3)
     810:	18c00044 	addi	r3,r3,1
     814:	30fffb1e 	bne	r6,r3,804 <memcpy+0x20>
     818:	2005883a 	mov	r2,r4
     81c:	f800283a 	ret
     820:	3811883a 	mov	r8,r7
     824:	200f883a 	mov	r7,r4
     828:	28c00017 	ldw	r3,0(r5)
     82c:	31bffc04 	addi	r6,r6,-16
     830:	38c00015 	stw	r3,0(r7)
     834:	28800117 	ldw	r2,4(r5)
     838:	38800115 	stw	r2,4(r7)
     83c:	28c00217 	ldw	r3,8(r5)
     840:	38c00215 	stw	r3,8(r7)
     844:	28800317 	ldw	r2,12(r5)
     848:	29400404 	addi	r5,r5,16
     84c:	38800315 	stw	r2,12(r7)
     850:	39c00404 	addi	r7,r7,16
     854:	41bff436 	bltu	r8,r6,828 <memcpy+0x44>
     858:	008000c4 	movi	r2,3
     85c:	1180072e 	bgeu	r2,r6,87c <memcpy+0x98>
     860:	1007883a 	mov	r3,r2
     864:	28800017 	ldw	r2,0(r5)
     868:	31bfff04 	addi	r6,r6,-4
     86c:	29400104 	addi	r5,r5,4
     870:	38800015 	stw	r2,0(r7)
     874:	39c00104 	addi	r7,r7,4
     878:	19bffa36 	bltu	r3,r6,864 <memcpy+0x80>
     87c:	3807883a 	mov	r3,r7
     880:	003fde06 	br	7fc <memcpy+0x18>

00000884 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     884:	deffff04 	addi	sp,sp,-4
     888:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     88c:	01000034 	movhi	r4,0
     890:	211cea04 	addi	r4,r4,29608
     894:	00c00034 	movhi	r3,0
     898:	18d5b304 	addi	r3,r3,22220

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     89c:	20c00926 	beq	r4,r3,8c4 <alt_load+0x40>
     8a0:	01800034 	movhi	r6,0
     8a4:	319cea04 	addi	r6,r6,29608
  {
    while( to != end )
     8a8:	19800626 	beq	r3,r6,8c4 <alt_load+0x40>
     8ac:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     8b0:	20800017 	ldw	r2,0(r4)
     8b4:	18800015 	stw	r2,0(r3)
     8b8:	1947883a 	add	r3,r3,r5
     8bc:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     8c0:	30fffb1e 	bne	r6,r3,8b0 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     8c4:	01000034 	movhi	r4,0
     8c8:	21000804 	addi	r4,r4,32
     8cc:	00c00034 	movhi	r3,0
     8d0:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     8d4:	20c00926 	beq	r4,r3,8fc <alt_load+0x78>
     8d8:	01800034 	movhi	r6,0
     8dc:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     8e0:	19800626 	beq	r3,r6,8fc <alt_load+0x78>
     8e4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     8e8:	20800017 	ldw	r2,0(r4)
     8ec:	18800015 	stw	r2,0(r3)
     8f0:	1947883a 	add	r3,r3,r5
     8f4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     8f8:	30fffb1e 	bne	r6,r3,8e8 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     8fc:	01000034 	movhi	r4,0
     900:	2114ff04 	addi	r4,r4,21500
     904:	00c00034 	movhi	r3,0
     908:	18d4ff04 	addi	r3,r3,21500

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     90c:	20c00926 	beq	r4,r3,934 <alt_load+0xb0>
     910:	01800034 	movhi	r6,0
     914:	3195b304 	addi	r6,r6,22220
  {
    while( to != end )
     918:	19800626 	beq	r3,r6,934 <alt_load+0xb0>
     91c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     920:	20800017 	ldw	r2,0(r4)
     924:	18800015 	stw	r2,0(r3)
     928:	1947883a 	add	r3,r3,r5
     92c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     930:	30fffb1e 	bne	r6,r3,920 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     934:	00027980 	call	2798 <alt_dcache_flush_all>
  alt_icache_flush_all();
     938:	00028840 	call	2884 <alt_icache_flush_all>
}
     93c:	dfc00017 	ldw	ra,0(sp)
     940:	dec00104 	addi	sp,sp,4
     944:	f800283a 	ret

00000948 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     948:	defffe04 	addi	sp,sp,-8
     94c:	dfc00115 	stw	ra,4(sp)
     950:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     954:	0009883a 	mov	r4,zero
     958:	0000b9c0 	call	b9c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     95c:	0000bbc0 	call	bbc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     960:	01800034 	movhi	r6,0
     964:	31957b04 	addi	r6,r6,21996
     968:	3009883a 	mov	r4,r6
     96c:	300b883a 	mov	r5,r6
     970:	00029080 	call	2908 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     974:	d1274517 	ldw	r4,-25324(gp)
     978:	d1674617 	ldw	r5,-25320(gp)
     97c:	d1a74717 	ldw	r6,-25316(gp)
     980:	00002b00 	call	2b0 <main>
     984:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     988:	01000044 	movi	r4,1
     98c:	00026bc0 	call	26bc <close>
  exit (result);
     990:	8009883a 	mov	r4,r16
     994:	0002e480 	call	2e48 <exit>

00000998 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     998:	defff804 	addi	sp,sp,-32
     99c:	dfc00415 	stw	ra,16(sp)
     9a0:	dc800315 	stw	r18,12(sp)
     9a4:	dc400215 	stw	r17,8(sp)
     9a8:	dc000115 	stw	r16,4(sp)
     9ac:	d9400515 	stw	r5,20(sp)
     9b0:	d9800615 	stw	r6,24(sp)
     9b4:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     9b8:	d8800504 	addi	r2,sp,20
     9bc:	d8800015 	stw	r2,0(sp)
     9c0:	2023883a 	mov	r17,r4
     9c4:	00005d06 	br	b3c <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     9c8:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     9cc:	21003fcc 	andi	r4,r4,255
     9d0:	2100201c 	xori	r4,r4,128
     9d4:	213fe004 	addi	r4,r4,-128
     9d8:	00800944 	movi	r2,37
     9dc:	20800226 	beq	r4,r2,9e8 <alt_printf+0x50>
        {
            alt_putchar(c);
     9e0:	0000b740 	call	b74 <alt_putchar>
     9e4:	00005506 	br	b3c <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     9e8:	89400003 	ldbu	r5,0(r17)
     9ec:	8c400044 	addi	r17,r17,1
     9f0:	29003fcc 	andi	r4,r5,255
     9f4:	2100201c 	xori	r4,r4,128
     9f8:	213fe004 	addi	r4,r4,-128
     9fc:	20005726 	beq	r4,zero,b5c <alt_printf+0x1c4>
            {
                if (c == '%')
     a00:	00800944 	movi	r2,37
     a04:	2080021e 	bne	r4,r2,a10 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     a08:	0000b740 	call	b74 <alt_putchar>
     a0c:	00004b06 	br	b3c <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     a10:	28c03fcc 	andi	r3,r5,255
     a14:	18c0201c 	xori	r3,r3,128
     a18:	18ffe004 	addi	r3,r3,-128
     a1c:	008018c4 	movi	r2,99
     a20:	1880061e 	bne	r3,r2,a3c <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     a24:	d8c00017 	ldw	r3,0(sp)
     a28:	18800104 	addi	r2,r3,4
     a2c:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     a30:	19000017 	ldw	r4,0(r3)
     a34:	0000b740 	call	b74 <alt_putchar>
     a38:	00004006 	br	b3c <alt_printf+0x1a4>
                }
                else if (c == 'x')
     a3c:	28c03fcc 	andi	r3,r5,255
     a40:	18c0201c 	xori	r3,r3,128
     a44:	18ffe004 	addi	r3,r3,-128
     a48:	00801e04 	movi	r2,120
     a4c:	1880231e 	bne	r3,r2,adc <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     a50:	d8c00017 	ldw	r3,0(sp)
     a54:	18800104 	addi	r2,r3,4
     a58:	d8800015 	stw	r2,0(sp)
     a5c:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     a60:	90000326 	beq	r18,zero,a70 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     a64:	90bc002c 	andhi	r2,r18,61440
     a68:	10000426 	beq	r2,zero,a7c <alt_printf+0xe4>
     a6c:	00003906 	br	b54 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     a70:	01000c04 	movi	r4,48
     a74:	0000b740 	call	b74 <alt_putchar>
     a78:	00003006 	br	b3c <alt_printf+0x1a4>
                        continue;
     a7c:	04000704 	movi	r16,28
     a80:	013fff04 	movi	r4,-4
     a84:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     a88:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     a8c:	1c04983a 	sll	r2,r3,r16
     a90:	9084703a 	and	r2,r18,r2
     a94:	103ffc26 	beq	r2,zero,a88 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     a98:	80002816 	blt	r16,zero,b3c <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     a9c:	008003c4 	movi	r2,15
     aa0:	1404983a 	sll	r2,r2,r16
     aa4:	9084703a 	and	r2,r18,r2
     aa8:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     aac:	00800244 	movi	r2,9
     ab0:	10c00236 	bltu	r2,r3,abc <alt_printf+0x124>
                            c = '0' + digit;
     ab4:	19000c04 	addi	r4,r3,48
     ab8:	00000106 	br	ac0 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     abc:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     ac0:	21003fcc 	andi	r4,r4,255
     ac4:	2100201c 	xori	r4,r4,128
     ac8:	213fe004 	addi	r4,r4,-128
     acc:	0000b740 	call	b74 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     ad0:	843fff04 	addi	r16,r16,-4
     ad4:	80001916 	blt	r16,zero,b3c <alt_printf+0x1a4>
     ad8:	003ff006 	br	a9c <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     adc:	28c03fcc 	andi	r3,r5,255
     ae0:	18c0201c 	xori	r3,r3,128
     ae4:	18ffe004 	addi	r3,r3,-128
     ae8:	00801cc4 	movi	r2,115
     aec:	1880131e 	bne	r3,r2,b3c <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     af0:	d8800017 	ldw	r2,0(sp)
     af4:	10c00104 	addi	r3,r2,4
     af8:	d8c00015 	stw	r3,0(sp)
     afc:	14000017 	ldw	r16,0(r2)

                    while(*s)
     b00:	81000003 	ldbu	r4,0(r16)
     b04:	20803fcc 	andi	r2,r4,255
     b08:	1080201c 	xori	r2,r2,128
     b0c:	10bfe004 	addi	r2,r2,-128
     b10:	10000a26 	beq	r2,zero,b3c <alt_printf+0x1a4>
                      alt_putchar(*s++);
     b14:	84000044 	addi	r16,r16,1
     b18:	21003fcc 	andi	r4,r4,255
     b1c:	2100201c 	xori	r4,r4,128
     b20:	213fe004 	addi	r4,r4,-128
     b24:	0000b740 	call	b74 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     b28:	81000003 	ldbu	r4,0(r16)
     b2c:	20803fcc 	andi	r2,r4,255
     b30:	1080201c 	xori	r2,r2,128
     b34:	10bfe004 	addi	r2,r2,-128
     b38:	103ff61e 	bne	r2,zero,b14 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     b3c:	89000003 	ldbu	r4,0(r17)
     b40:	20803fcc 	andi	r2,r4,255
     b44:	1080201c 	xori	r2,r2,128
     b48:	10bfe004 	addi	r2,r2,-128
     b4c:	103f9e1e 	bne	r2,zero,9c8 <alt_printf+0x30>
     b50:	00000206 	br	b5c <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     b54:	04000704 	movi	r16,28
     b58:	003fd006 	br	a9c <alt_printf+0x104>
     b5c:	dfc00417 	ldw	ra,16(sp)
     b60:	dc800317 	ldw	r18,12(sp)
     b64:	dc400217 	ldw	r17,8(sp)
     b68:	dc000117 	ldw	r16,4(sp)
     b6c:	dec00804 	addi	sp,sp,32
     b70:	f800283a 	ret

00000b74 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     b74:	deffff04 	addi	sp,sp,-4
     b78:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     b7c:	00800034 	movhi	r2,0
     b80:	109ce504 	addi	r2,r2,29588
     b84:	10800017 	ldw	r2,0(r2)
     b88:	11400217 	ldw	r5,8(r2)
     b8c:	0002ef40 	call	2ef4 <putc>
#endif
}
     b90:	dfc00017 	ldw	ra,0(sp)
     b94:	dec00104 	addi	sp,sp,4
     b98:	f800283a 	ret

00000b9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     b9c:	deffff04 	addi	sp,sp,-4
     ba0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     ba4:	0002cdc0 	call	2cdc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     ba8:	00800044 	movi	r2,1
     bac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     bb0:	dfc00017 	ldw	ra,0(sp)
     bb4:	dec00104 	addi	sp,sp,4
     bb8:	f800283a 	ret

00000bbc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     bbc:	defffd04 	addi	sp,sp,-12
     bc0:	dfc00215 	stw	ra,8(sp)
     bc4:	dc400115 	stw	r17,4(sp)
     bc8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     bcc:	04000204 	movi	r16,8
     bd0:	01040034 	movhi	r4,4096
     bd4:	21080004 	addi	r4,r4,8192
     bd8:	000b883a 	mov	r5,zero
     bdc:	000d883a 	mov	r6,zero
     be0:	800f883a 	mov	r7,r16
     be4:	00014640 	call	1464 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     be8:	04400034 	movhi	r17,0
     bec:	8c55bd04 	addi	r17,r17,22260
     bf0:	8809883a 	mov	r4,r17
     bf4:	000b883a 	mov	r5,zero
     bf8:	800d883a 	mov	r6,r16
     bfc:	0000f600 	call	f60 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     c00:	04000034 	movhi	r16,0
     c04:	841cde04 	addi	r16,r16,29560
     c08:	893ff604 	addi	r4,r17,-40
     c0c:	800b883a 	mov	r5,r16
     c10:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c14:	01000034 	movhi	r4,0
     c18:	2119cb04 	addi	r4,r4,26412
     c1c:	800b883a 	mov	r5,r16
     c20:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c24:	01000034 	movhi	r4,0
     c28:	2119d704 	addi	r4,r4,26460
     c2c:	800b883a 	mov	r5,r16
     c30:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c34:	01000034 	movhi	r4,0
     c38:	2119e304 	addi	r4,r4,26508
     c3c:	800b883a 	mov	r5,r16
     c40:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c44:	01000034 	movhi	r4,0
     c48:	2119ee04 	addi	r4,r4,26552
     c4c:	800b883a 	mov	r5,r16
     c50:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c54:	01000034 	movhi	r4,0
     c58:	2119f904 	addi	r4,r4,26596
     c5c:	800b883a 	mov	r5,r16
     c60:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c64:	01000034 	movhi	r4,0
     c68:	211a0404 	addi	r4,r4,26640
     c6c:	800b883a 	mov	r5,r16
     c70:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c74:	01000034 	movhi	r4,0
     c78:	211a0f04 	addi	r4,r4,26684
     c7c:	800b883a 	mov	r5,r16
     c80:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c84:	01000034 	movhi	r4,0
     c88:	211a1a04 	addi	r4,r4,26728
     c8c:	800b883a 	mov	r5,r16
     c90:	00027a40 	call	27a4 <alt_dev_llist_insert>
     c94:	01000034 	movhi	r4,0
     c98:	211a2504 	addi	r4,r4,26772
     c9c:	800b883a 	mov	r5,r16
     ca0:	00027a40 	call	27a4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     ca4:	04400034 	movhi	r17,0
     ca8:	8c5a3004 	addi	r17,r17,26816
     cac:	8809883a 	mov	r4,r17
     cb0:	00017d00 	call	17d0 <alt_up_ps2_init>
     cb4:	8809883a 	mov	r4,r17
     cb8:	800b883a 	mov	r5,r16
     cbc:	00027a40 	call	27a4 <alt_dev_llist_insert>
     cc0:	01000034 	movhi	r4,0
     cc4:	211a3e04 	addi	r4,r4,26872
     cc8:	800b883a 	mov	r5,r16
     ccc:	00027a40 	call	27a4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     cd0:	01000034 	movhi	r4,0
     cd4:	211a4904 	addi	r4,r4,26916
     cd8:	20800a17 	ldw	r2,40(r4)
     cdc:	10800104 	addi	r2,r2,4
     ce0:	10c0000b 	ldhu	r3,0(r2)
     ce4:	20c00c15 	stw	r3,48(r4)
     ce8:	10800017 	ldw	r2,0(r2)
     cec:	100ad43a 	srli	r5,r2,16
     cf0:	21400d15 	stw	r5,52(r4)
     cf4:	00801004 	movi	r2,64
     cf8:	10c00436 	bltu	r2,r3,d0c <alt_sys_init+0x150>
     cfc:	00800fc4 	movi	r2,63
     d00:	20800f15 	stw	r2,60(r4)
     d04:	00800184 	movi	r2,6
     d08:	20801015 	stw	r2,64(r4)
     d0c:	00800804 	movi	r2,32
     d10:	11400436 	bltu	r2,r5,d24 <alt_sys_init+0x168>
     d14:	00c007c4 	movi	r3,31
     d18:	00800034 	movhi	r2,0
     d1c:	109a4904 	addi	r2,r2,26916
     d20:	10c01115 	stw	r3,68(r2)
     d24:	04000034 	movhi	r16,0
     d28:	841a4904 	addi	r16,r16,26916
     d2c:	8009883a 	mov	r4,r16
     d30:	0001b880 	call	1b88 <alt_up_char_buffer_init>
     d34:	8009883a 	mov	r4,r16
     d38:	01400034 	movhi	r5,0
     d3c:	295cde04 	addi	r5,r5,29560
     d40:	00027a40 	call	27a4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     d44:	01800034 	movhi	r6,0
     d48:	319a5b04 	addi	r6,r6,26988
     d4c:	30c00a17 	ldw	r3,40(r6)
     d50:	18800017 	ldw	r2,0(r3)
     d54:	30800b15 	stw	r2,44(r6)
     d58:	18800117 	ldw	r2,4(r3)
     d5c:	30800c15 	stw	r2,48(r6)
     d60:	19000204 	addi	r4,r3,8
     d64:	2080000b 	ldhu	r2,0(r4)
     d68:	30800f15 	stw	r2,60(r6)
     d6c:	20800017 	ldw	r2,0(r4)
     d70:	1004d43a 	srli	r2,r2,16
     d74:	30801015 	stw	r2,64(r6)
     d78:	18c00304 	addi	r3,r3,12
     d7c:	18800017 	ldw	r2,0(r3)
     d80:	1005d07a 	srai	r2,r2,1
     d84:	01000044 	movi	r4,1
     d88:	1104703a 	and	r2,r2,r4
     d8c:	30800d15 	stw	r2,52(r6)
     d90:	18800017 	ldw	r2,0(r3)
     d94:	1005d13a 	srai	r2,r2,4
     d98:	114003cc 	andi	r5,r2,15
     d9c:	31400e15 	stw	r5,56(r6)
     da0:	1a000017 	ldw	r8,0(r3)
     da4:	400ed43a 	srli	r7,r8,16
     da8:	2900021e 	bne	r5,r4,db4 <alt_sys_init+0x1f8>
     dac:	30001115 	stw	zero,68(r6)
     db0:	00000b06 	br	de0 <alt_sys_init+0x224>
     db4:	00800084 	movi	r2,2
     db8:	2880051e 	bne	r5,r2,dd0 <alt_sys_init+0x214>
     dbc:	00c00044 	movi	r3,1
     dc0:	00800034 	movhi	r2,0
     dc4:	109a5b04 	addi	r2,r2,26988
     dc8:	10c01115 	stw	r3,68(r2)
     dcc:	00000406 	br	de0 <alt_sys_init+0x224>
     dd0:	00c00084 	movi	r3,2
     dd4:	00800034 	movhi	r2,0
     dd8:	109a5b04 	addi	r2,r2,26988
     ddc:	10c01115 	stw	r3,68(r2)
     de0:	01000034 	movhi	r4,0
     de4:	211a5b04 	addi	r4,r4,26988
     de8:	38c03fcc 	andi	r3,r7,255
     dec:	01800804 	movi	r6,32
     df0:	30c5c83a 	sub	r2,r6,r3
     df4:	017fffc4 	movi	r5,-1
     df8:	2884d83a 	srl	r2,r5,r2
     dfc:	20801215 	stw	r2,72(r4)
     e00:	20801117 	ldw	r2,68(r4)
     e04:	1887883a 	add	r3,r3,r2
     e08:	20c01315 	stw	r3,76(r4)
     e0c:	4004d63a 	srli	r2,r8,24
     e10:	308dc83a 	sub	r6,r6,r2
     e14:	298ad83a 	srl	r5,r5,r6
     e18:	21401415 	stw	r5,80(r4)
     e1c:	01400034 	movhi	r5,0
     e20:	295cde04 	addi	r5,r5,29560
     e24:	00027a40 	call	27a4 <alt_dev_llist_insert>
}
     e28:	dfc00217 	ldw	ra,8(sp)
     e2c:	dc400117 	ldw	r17,4(sp)
     e30:	dc000017 	ldw	r16,0(sp)
     e34:	dec00304 	addi	sp,sp,12
     e38:	f800283a 	ret

00000e3c <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     e3c:	deffff04 	addi	sp,sp,-4
     e40:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     e44:	21000017 	ldw	r4,0(r4)
     e48:	21000a04 	addi	r4,r4,40
     e4c:	000110c0 	call	110c <altera_avalon_jtag_uart_ioctl>
}
     e50:	dfc00017 	ldw	ra,0(sp)
     e54:	dec00104 	addi	sp,sp,4
     e58:	f800283a 	ret

00000e5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     e5c:	deffff04 	addi	sp,sp,-4
     e60:	dfc00015 	stw	ra,0(sp)
     e64:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     e68:	21000017 	ldw	r4,0(r4)
     e6c:	21000a04 	addi	r4,r4,40
     e70:	11400217 	ldw	r5,8(r2)
     e74:	0000ed40 	call	ed4 <altera_avalon_jtag_uart_close>
}
     e78:	dfc00017 	ldw	ra,0(sp)
     e7c:	dec00104 	addi	sp,sp,4
     e80:	f800283a 	ret

00000e84 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     e84:	deffff04 	addi	sp,sp,-4
     e88:	dfc00015 	stw	ra,0(sp)
     e8c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     e90:	21000017 	ldw	r4,0(r4)
     e94:	21000a04 	addi	r4,r4,40
     e98:	11c00217 	ldw	r7,8(r2)
     e9c:	00012e80 	call	12e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     ea0:	dfc00017 	ldw	ra,0(sp)
     ea4:	dec00104 	addi	sp,sp,4
     ea8:	f800283a 	ret

00000eac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     eac:	deffff04 	addi	sp,sp,-4
     eb0:	dfc00015 	stw	ra,0(sp)
     eb4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     eb8:	21000017 	ldw	r4,0(r4)
     ebc:	21000a04 	addi	r4,r4,40
     ec0:	11c00217 	ldw	r7,8(r2)
     ec4:	00011800 	call	1180 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     ec8:	dfc00017 	ldw	ra,0(sp)
     ecc:	dec00104 	addi	sp,sp,4
     ed0:	f800283a 	ret

00000ed4 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ed4:	21800c17 	ldw	r6,48(r4)
     ed8:	2950000c 	andi	r5,r5,16384
     edc:	280b003a 	cmpeq	r5,r5,zero
     ee0:	00000306 	br	ef0 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     ee4:	2800021e 	bne	r5,zero,ef0 <altera_avalon_jtag_uart_close+0x1c>
     ee8:	00bffd44 	movi	r2,-11
     eec:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ef0:	20800d17 	ldw	r2,52(r4)
     ef4:	11800326 	beq	r2,r6,f04 <altera_avalon_jtag_uart_close+0x30>
     ef8:	20c00917 	ldw	r3,36(r4)
     efc:	20800117 	ldw	r2,4(r4)
     f00:	18bff836 	bltu	r3,r2,ee4 <altera_avalon_jtag_uart_close+0x10>
     f04:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     f08:	f800283a 	ret

00000f0c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     f0c:	20800017 	ldw	r2,0(r4)
     f10:	10c00104 	addi	r3,r2,4
     f14:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     f18:	01410004 	movi	r5,1024
     f1c:	1144703a 	and	r2,r2,r5
     f20:	10000526 	beq	r2,zero,f38 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     f24:	20800817 	ldw	r2,32(r4)
     f28:	1144b03a 	or	r2,r2,r5
     f2c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     f30:	20000915 	stw	zero,36(r4)
     f34:	00000606 	br	f50 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     f38:	20c00917 	ldw	r3,36(r4)
     f3c:	00a00034 	movhi	r2,32768
     f40:	10bfff04 	addi	r2,r2,-4
     f44:	10c00236 	bltu	r2,r3,f50 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     f48:	18800044 	addi	r2,r3,1
     f4c:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     f50:	00800074 	movhi	r2,1
     f54:	10a42504 	addi	r2,r2,-28524
     f58:	10800017 	ldw	r2,0(r2)
     f5c:	f800283a 	ret

00000f60 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     f60:	defffe04 	addi	sp,sp,-8
     f64:	dfc00115 	stw	ra,4(sp)
     f68:	dc000015 	stw	r16,0(sp)
     f6c:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     f70:	00c00044 	movi	r3,1
     f74:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     f78:	20800017 	ldw	r2,0(r4)
     f7c:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     f80:	3009883a 	mov	r4,r6
     f84:	800b883a 	mov	r5,r16
     f88:	01800034 	movhi	r6,0
     f8c:	3183f604 	addi	r6,r6,4056
     f90:	00029a00 	call	29a0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     f94:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     f98:	81000204 	addi	r4,r16,8
     f9c:	00800074 	movhi	r2,1
     fa0:	10a42504 	addi	r2,r2,-28524
     fa4:	11400017 	ldw	r5,0(r2)
     fa8:	01800034 	movhi	r6,0
     fac:	3183c304 	addi	r6,r6,3852
     fb0:	800f883a 	mov	r7,r16
     fb4:	00026280 	call	2628 <alt_alarm_start>
     fb8:	1000030e 	bge	r2,zero,fc8 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     fbc:	00a00034 	movhi	r2,32768
     fc0:	10bfffc4 	addi	r2,r2,-1
     fc4:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     fc8:	dfc00117 	ldw	ra,4(sp)
     fcc:	dc000017 	ldw	r16,0(sp)
     fd0:	dec00204 	addi	sp,sp,8
     fd4:	f800283a 	ret

00000fd8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     fd8:	22000017 	ldw	r8,0(r4)
     fdc:	03800104 	movi	r14,4
     fe0:	4399883a 	add	r12,r8,r14
     fe4:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     fe8:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     fec:	5880c00c 	andi	r2,r11,768
     ff0:	10004526 	beq	r2,zero,1108 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     ff4:	5880400c 	andi	r2,r11,256
     ff8:	10002126 	beq	r2,zero,1080 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ffc:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    1000:	10800044 	addi	r2,r2,1
    1004:	1081ffcc 	andi	r2,r2,2047
    1008:	20c00b17 	ldw	r3,44(r4)
    100c:	10c01626 	beq	r2,r3,1068 <altera_avalon_jtag_uart_irq+0x90>
    1010:	02a00014 	movui	r10,32768
    1014:	02400e04 	movi	r9,56
    1018:	01c00044 	movi	r7,1
    101c:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1020:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1024:	2a84703a 	and	r2,r5,r10
    1028:	10000d26 	beq	r2,zero,1060 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    102c:	20800a17 	ldw	r2,40(r4)
    1030:	1105883a 	add	r2,r2,r4
    1034:	1245883a 	add	r2,r2,r9
    1038:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    103c:	20800a17 	ldw	r2,40(r4)
    1040:	11c5883a 	add	r2,r2,r7
    1044:	1184703a 	and	r2,r2,r6
    1048:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    104c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    1050:	11c5883a 	add	r2,r2,r7
    1054:	1184703a 	and	r2,r2,r6
    1058:	20c00b17 	ldw	r3,44(r4)
    105c:	10fff01e 	bne	r2,r3,1020 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1060:	2b44703a 	and	r2,r5,r13
    1064:	10000626 	beq	r2,zero,1080 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1068:	20800817 	ldw	r2,32(r4)
    106c:	00ffff84 	movi	r3,-2
    1070:	10c4703a 	and	r2,r2,r3
    1074:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1078:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    107c:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1080:	5880800c 	andi	r2,r11,512
    1084:	103fd826 	beq	r2,zero,fe8 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1088:	5b44703a 	and	r2,r11,r13
    108c:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    1090:	283fd526 	beq	r5,zero,fe8 <altera_avalon_jtag_uart_irq+0x10>
    1094:	20c00d17 	ldw	r3,52(r4)
    1098:	20800c17 	ldw	r2,48(r4)
    109c:	18801126 	beq	r3,r2,10e4 <altera_avalon_jtag_uart_irq+0x10c>
    10a0:	02420e04 	movi	r9,2104
    10a4:	01800044 	movi	r6,1
    10a8:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    10ac:	20800d17 	ldw	r2,52(r4)
    10b0:	1105883a 	add	r2,r2,r4
    10b4:	1245883a 	add	r2,r2,r9
    10b8:	10800007 	ldb	r2,0(r2)
    10bc:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10c0:	20800d17 	ldw	r2,52(r4)
    10c4:	1185883a 	add	r2,r2,r6
    10c8:	11c4703a 	and	r2,r2,r7
    10cc:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    10d0:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    10d4:	283fc426 	beq	r5,zero,fe8 <altera_avalon_jtag_uart_irq+0x10>
    10d8:	20c00d17 	ldw	r3,52(r4)
    10dc:	20800c17 	ldw	r2,48(r4)
    10e0:	18bff21e 	bne	r3,r2,10ac <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    10e4:	20c00817 	ldw	r3,32(r4)
    10e8:	00bfff44 	movi	r2,-3
    10ec:	1886703a 	and	r3,r3,r2
    10f0:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10f4:	20800017 	ldw	r2,0(r4)
    10f8:	1385883a 	add	r2,r2,r14
    10fc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1100:	60800037 	ldwio	r2,0(r12)
    1104:	003fb806 	br	fe8 <altera_avalon_jtag_uart_irq+0x10>
    1108:	f800283a 	ret

0000110c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    110c:	009a8044 	movi	r2,27137
    1110:	28800326 	beq	r5,r2,1120 <altera_avalon_jtag_uart_ioctl+0x14>
    1114:	009a8084 	movi	r2,27138
    1118:	2880171e 	bne	r5,r2,1178 <altera_avalon_jtag_uart_ioctl+0x6c>
    111c:	00000d06 	br	1154 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1120:	20c00117 	ldw	r3,4(r4)
    1124:	00a00034 	movhi	r2,32768
    1128:	10bfffc4 	addi	r2,r2,-1
    112c:	18801226 	beq	r3,r2,1178 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1130:	31800017 	ldw	r6,0(r6)
    1134:	30ffff84 	addi	r3,r6,-2
    1138:	10bfff44 	addi	r2,r2,-3
    113c:	10c0022e 	bgeu	r2,r3,1148 <altera_avalon_jtag_uart_ioctl+0x3c>
    1140:	01a00034 	movhi	r6,32768
    1144:	31bfff84 	addi	r6,r6,-2
    1148:	21800115 	stw	r6,4(r4)
    114c:	0005883a 	mov	r2,zero
    1150:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1154:	20c00117 	ldw	r3,4(r4)
    1158:	00a00034 	movhi	r2,32768
    115c:	10bfffc4 	addi	r2,r2,-1
    1160:	18800526 	beq	r3,r2,1178 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1164:	20800917 	ldw	r2,36(r4)
    1168:	10c5803a 	cmpltu	r2,r2,r3
    116c:	30800015 	stw	r2,0(r6)
    1170:	0005883a 	mov	r2,zero
    1174:	f800283a 	ret
    1178:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    117c:	f800283a 	ret

00001180 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1180:	defff604 	addi	sp,sp,-40
    1184:	dfc00915 	stw	ra,36(sp)
    1188:	df000815 	stw	fp,32(sp)
    118c:	ddc00715 	stw	r23,28(sp)
    1190:	dd800615 	stw	r22,24(sp)
    1194:	dd400515 	stw	r21,20(sp)
    1198:	dd000415 	stw	r20,16(sp)
    119c:	dcc00315 	stw	r19,12(sp)
    11a0:	dc800215 	stw	r18,8(sp)
    11a4:	dc400115 	stw	r17,4(sp)
    11a8:	dc000015 	stw	r16,0(sp)
    11ac:	2025883a 	mov	r18,r4
    11b0:	282f883a 	mov	r23,r5
    11b4:	3027883a 	mov	r19,r6
    11b8:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    11bc:	0180220e 	bge	zero,r6,1248 <altera_avalon_jtag_uart_read+0xc8>
    11c0:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    11c4:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    11c8:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    11cc:	b4400236 	bltu	r22,r17,11d8 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    11d0:	b461c83a 	sub	r16,r22,r17
    11d4:	00000206 	br	11e0 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    11d8:	00820004 	movi	r2,2048
    11dc:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    11e0:	80000d26 	beq	r16,zero,1218 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    11e4:	9829883a 	mov	r20,r19
    11e8:	9c001d36 	bltu	r19,r16,1260 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    11ec:	91400e04 	addi	r5,r18,56
    11f0:	a809883a 	mov	r4,r21
    11f4:	2c4b883a 	add	r5,r5,r17
    11f8:	800d883a 	mov	r6,r16
    11fc:	00007e40 	call	7e4 <memcpy>
      ptr   += n;
    1200:	ac2b883a 	add	r21,r21,r16
      space -= n;
    1204:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1208:	8445883a 	add	r2,r16,r17
    120c:	1081ffcc 	andi	r2,r2,2047
    1210:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    1214:	04ffeb16 	blt	zero,r19,11c4 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    1218:	adc01c1e 	bne	r21,r23,128c <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    121c:	e090000c 	andi	r2,fp,16384
    1220:	10000d1e 	bne	r2,zero,1258 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1224:	90800a17 	ldw	r2,40(r18)
    1228:	b080031e 	bne	r22,r2,1238 <altera_avalon_jtag_uart_read+0xb8>
    122c:	90c00917 	ldw	r3,36(r18)
    1230:	90800117 	ldw	r2,4(r18)
    1234:	18bffb36 	bltu	r3,r2,1224 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1238:	90800a17 	ldw	r2,40(r18)
    123c:	b0800426 	beq	r22,r2,1250 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1240:	04c0030e 	bge	zero,r19,1250 <altera_avalon_jtag_uart_read+0xd0>
    1244:	003fde06 	br	11c0 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    1248:	3890000c 	andi	r2,r7,16384
    124c:	1000021e 	bne	r2,zero,1258 <altera_avalon_jtag_uart_read+0xd8>
    1250:	00bffec4 	movi	r2,-5
    1254:	00001806 	br	12b8 <altera_avalon_jtag_uart_read+0x138>
    1258:	00bffd44 	movi	r2,-11
    125c:	00001606 	br	12b8 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    1260:	91400e04 	addi	r5,r18,56
    1264:	a809883a 	mov	r4,r21
    1268:	894b883a 	add	r5,r17,r5
    126c:	980d883a 	mov	r6,r19
    1270:	00007e40 	call	7e4 <memcpy>
      ptr   += n;
    1274:	aceb883a 	add	r21,r21,r19
      space -= n;
    1278:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    127c:	a445883a 	add	r2,r20,r17
    1280:	1081ffcc 	andi	r2,r2,2047
    1284:	90800b15 	stw	r2,44(r18)
    1288:	003fe306 	br	1218 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    128c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1290:	00bfff84 	movi	r2,-2
    1294:	2084703a 	and	r2,r4,r2
    1298:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    129c:	90800817 	ldw	r2,32(r18)
    12a0:	10800054 	ori	r2,r2,1
    12a4:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    12a8:	90c00017 	ldw	r3,0(r18)
    12ac:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12b0:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    12b4:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    12b8:	dfc00917 	ldw	ra,36(sp)
    12bc:	df000817 	ldw	fp,32(sp)
    12c0:	ddc00717 	ldw	r23,28(sp)
    12c4:	dd800617 	ldw	r22,24(sp)
    12c8:	dd400517 	ldw	r21,20(sp)
    12cc:	dd000417 	ldw	r20,16(sp)
    12d0:	dcc00317 	ldw	r19,12(sp)
    12d4:	dc800217 	ldw	r18,8(sp)
    12d8:	dc400117 	ldw	r17,4(sp)
    12dc:	dc000017 	ldw	r16,0(sp)
    12e0:	dec00a04 	addi	sp,sp,40
    12e4:	f800283a 	ret

000012e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    12e8:	defff804 	addi	sp,sp,-32
    12ec:	dfc00715 	stw	ra,28(sp)
    12f0:	dd800615 	stw	r22,24(sp)
    12f4:	dd400515 	stw	r21,20(sp)
    12f8:	dd000415 	stw	r20,16(sp)
    12fc:	dcc00315 	stw	r19,12(sp)
    1300:	dc800215 	stw	r18,8(sp)
    1304:	dc400115 	stw	r17,4(sp)
    1308:	dc000015 	stw	r16,0(sp)
    130c:	2021883a 	mov	r16,r4
    1310:	282d883a 	mov	r22,r5
    1314:	3011883a 	mov	r8,r6
    1318:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    131c:	01800616 	blt	zero,r6,1338 <altera_avalon_jtag_uart_write+0x50>
    1320:	2829883a 	mov	r20,r5
    1324:	00002106 	br	13ac <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    1328:	a585c83a 	sub	r2,r20,r22
    132c:	00004306 	br	143c <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    1330:	00bffd44 	movi	r2,-11
    1334:	00004106 	br	143c <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1338:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    133c:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    1340:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    1344:	9140032e 	bgeu	r18,r5,1354 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1348:	2c85c83a 	sub	r2,r5,r18
    134c:	11bfffc4 	addi	r6,r2,-1
    1350:	00000606 	br	136c <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    1354:	28000326 	beq	r5,zero,1364 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1358:	00820004 	movi	r2,2048
    135c:	148dc83a 	sub	r6,r2,r18
    1360:	00000206 	br	136c <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1364:	0081ffc4 	movi	r2,2047
    1368:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    136c:	30002626 	beq	r6,zero,1408 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    1370:	4027883a 	mov	r19,r8
    1374:	3023883a 	mov	r17,r6
    1378:	4180012e 	bgeu	r8,r6,1380 <altera_avalon_jtag_uart_write+0x98>
    137c:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    1380:	81020e04 	addi	r4,r16,2104
    1384:	2489883a 	add	r4,r4,r18
    1388:	a00b883a 	mov	r5,r20
    138c:	880d883a 	mov	r6,r17
    1390:	00007e40 	call	7e4 <memcpy>
      ptr   += n;
    1394:	a469883a 	add	r20,r20,r17
      count -= n;
    1398:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    139c:	9445883a 	add	r2,r18,r17
    13a0:	1081ffcc 	andi	r2,r2,2047
    13a4:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    13a8:	023fe416 	blt	zero,r8,133c <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    13ac:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13b0:	00bfff84 	movi	r2,-2
    13b4:	2084703a 	and	r2,r4,r2
    13b8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    13bc:	80800817 	ldw	r2,32(r16)
    13c0:	10800094 	ori	r2,r2,2
    13c4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    13c8:	80c00017 	ldw	r3,0(r16)
    13cc:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    13d0:	2001703a 	wrctl	status,r4
    13d4:	00000706 	br	13f4 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    13d8:	80800d17 	ldw	r2,52(r16)
    13dc:	1140031e 	bne	r2,r5,13ec <altera_avalon_jtag_uart_write+0x104>
    13e0:	80c00917 	ldw	r3,36(r16)
    13e4:	80800117 	ldw	r2,4(r16)
    13e8:	18bffb36 	bltu	r3,r2,13d8 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    13ec:	80800d17 	ldw	r2,52(r16)
    13f0:	117fed1e 	bne	r2,r5,13a8 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    13f4:	b53fcc1e 	bne	r22,r20,1328 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    13f8:	a890000c 	andi	r2,r21,16384
    13fc:	103fcc1e 	bne	r2,zero,1330 <altera_avalon_jtag_uart_write+0x48>
    1400:	00bffec4 	movi	r2,-5
    1404:	00000d06 	br	143c <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1408:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    140c:	00bfff84 	movi	r2,-2
    1410:	2084703a 	and	r2,r4,r2
    1414:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1418:	80800817 	ldw	r2,32(r16)
    141c:	10800094 	ori	r2,r2,2
    1420:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1424:	80c00017 	ldw	r3,0(r16)
    1428:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    142c:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    1430:	a890000c 	andi	r2,r21,16384
    1434:	103fe826 	beq	r2,zero,13d8 <altera_avalon_jtag_uart_write+0xf0>
    1438:	003fee06 	br	13f4 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    143c:	dfc00717 	ldw	ra,28(sp)
    1440:	dd800617 	ldw	r22,24(sp)
    1444:	dd400517 	ldw	r21,20(sp)
    1448:	dd000417 	ldw	r20,16(sp)
    144c:	dcc00317 	ldw	r19,12(sp)
    1450:	dc800217 	ldw	r18,8(sp)
    1454:	dc400117 	ldw	r17,4(sp)
    1458:	dc000017 	ldw	r16,0(sp)
    145c:	dec00804 	addi	sp,sp,32
    1460:	f800283a 	ret

00001464 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1464:	deffff04 	addi	sp,sp,-4
    1468:	dfc00015 	stw	ra,0(sp)
    146c:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1470:	00c00074 	movhi	r3,1
    1474:	18e42504 	addi	r3,r3,-28524
    1478:	18800017 	ldw	r2,0(r3)
    147c:	1000011e 	bne	r2,zero,1484 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    1480:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1484:	008001c4 	movi	r2,7
    1488:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    148c:	3009883a 	mov	r4,r6
    1490:	01800034 	movhi	r6,0
    1494:	31852a04 	addi	r6,r6,5288
    1498:	00029a00 	call	29a0 <alt_irq_register>
#endif  
}
    149c:	dfc00017 	ldw	ra,0(sp)
    14a0:	dec00104 	addi	sp,sp,4
    14a4:	f800283a 	ret

000014a8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    14a8:	defffe04 	addi	sp,sp,-8
    14ac:	dfc00115 	stw	ra,4(sp)
    14b0:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    14b4:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    14b8:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14bc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14c0:	00bfff84 	movi	r2,-2
    14c4:	8084703a 	and	r2,r16,r2
    14c8:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    14cc:	0002c300 	call	2c30 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14d0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    14d4:	dfc00117 	ldw	ra,4(sp)
    14d8:	dc000017 	ldw	r16,0(sp)
    14dc:	dec00204 	addi	sp,sp,8
    14e0:	f800283a 	ret

000014e4 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    14e4:	deffff04 	addi	sp,sp,-4
    14e8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    14ec:	01400034 	movhi	r5,0
    14f0:	295cde04 	addi	r5,r5,29560
    14f4:	00028140 	call	2814 <alt_find_dev>

  return dev;
}
    14f8:	dfc00017 	ldw	ra,0(sp)
    14fc:	dec00104 	addi	sp,sp,4
    1500:	f800283a 	ret

00001504 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    1504:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    1508:	1004c03a 	cmpne	r2,r2,zero
    150c:	f800283a 	ret

00001510 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    1510:	2080004c 	andi	r2,r4,1
    1514:	f800283a 	ret

00001518 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1518:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    151c:	1004c03a 	cmpne	r2,r2,zero
    1520:	f800283a 	ret

00001524 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    1524:	2004d43a 	srli	r2,r4,16
    1528:	f800283a 	ret

0000152c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    152c:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    1530:	1004c03a 	cmpne	r2,r2,zero
    1534:	f800283a 	ret

00001538 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    1538:	20803fcc 	andi	r2,r4,255
    153c:	f800283a 	ret

00001540 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1540:	deffff04 	addi	sp,sp,-4
    1544:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1548:	01400034 	movhi	r5,0
    154c:	295cde04 	addi	r5,r5,29560
    1550:	00028140 	call	2814 <alt_find_dev>

  return dev;
}
    1554:	dfc00017 	ldw	ra,0(sp)
    1558:	dec00104 	addi	sp,sp,4
    155c:	f800283a 	ret

00001560 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1560:	defffe04 	addi	sp,sp,-8
    1564:	dfc00115 	stw	ra,4(sp)
    1568:	dc000015 	stw	r16,0(sp)
    156c:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1570:	81000037 	ldwio	r4,0(r16)
    1574:	00015240 	call	1524 <read_num_bytes_available>
    1578:	10bfffcc 	andi	r2,r2,65535
    157c:	103ffc1e 	bne	r2,zero,1570 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    1580:	dfc00117 	ldw	ra,4(sp)
    1584:	dc000017 	ldw	r16,0(sp)
    1588:	dec00204 	addi	sp,sp,8
    158c:	f800283a 	ret

00001590 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1590:	defffd04 	addi	sp,sp,-12
    1594:	dfc00215 	stw	ra,8(sp)
    1598:	dc400115 	stw	r17,4(sp)
    159c:	dc000015 	stw	r16,0(sp)
    15a0:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    15a4:	20800a17 	ldw	r2,40(r4)
    15a8:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    15ac:	8009883a 	mov	r4,r16
    15b0:	000152c0 	call	152c <read_data_valid>
    15b4:	10803fcc 	andi	r2,r2,255
    15b8:	1000021e 	bne	r2,zero,15c4 <alt_up_ps2_read_data_byte+0x34>
    15bc:	00bfffc4 	movi	r2,-1
    15c0:	00000406 	br	15d4 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    15c4:	8009883a 	mov	r4,r16
    15c8:	00015380 	call	1538 <read_data_byte>
    15cc:	88800005 	stb	r2,0(r17)
    15d0:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    15d4:	dfc00217 	ldw	ra,8(sp)
    15d8:	dc400117 	ldw	r17,4(sp)
    15dc:	dc000017 	ldw	r16,0(sp)
    15e0:	dec00304 	addi	sp,sp,12
    15e4:	f800283a 	ret

000015e8 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    15e8:	defffb04 	addi	sp,sp,-20
    15ec:	dfc00415 	stw	ra,16(sp)
    15f0:	dcc00315 	stw	r19,12(sp)
    15f4:	dc800215 	stw	r18,8(sp)
    15f8:	dc400115 	stw	r17,4(sp)
    15fc:	dc000015 	stw	r16,0(sp)
    1600:	2025883a 	mov	r18,r4
    1604:	2827883a 	mov	r19,r5
    1608:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    160c:	90800a17 	ldw	r2,40(r18)
    1610:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    1614:	8009883a 	mov	r4,r16
    1618:	000152c0 	call	152c <read_data_valid>
    161c:	10803fcc 	andi	r2,r2,255
    1620:	10000526 	beq	r2,zero,1638 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    1624:	8009883a 	mov	r4,r16
    1628:	00015380 	call	1538 <read_data_byte>
    162c:	98800005 	stb	r2,0(r19)
    1630:	0005883a 	mov	r2,zero
    1634:	00000506 	br	164c <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    1638:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    163c:	90800c17 	ldw	r2,48(r18)
    1640:	103ff226 	beq	r2,zero,160c <alt_up_ps2_read_data_byte_timeout+0x24>
    1644:	147ff12e 	bgeu	r2,r17,160c <alt_up_ps2_read_data_byte_timeout+0x24>
    1648:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    164c:	dfc00417 	ldw	ra,16(sp)
    1650:	dcc00317 	ldw	r19,12(sp)
    1654:	dc800217 	ldw	r18,8(sp)
    1658:	dc400117 	ldw	r17,4(sp)
    165c:	dc000017 	ldw	r16,0(sp)
    1660:	dec00504 	addi	sp,sp,20
    1664:	f800283a 	ret

00001668 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1668:	deffff04 	addi	sp,sp,-4
    166c:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1670:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1674:	0180010e 	bge	zero,r6,167c <alt_up_ps2_read_fd+0x14>
    1678:	003fff06 	br	1678 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    167c:	00015e80 	call	15e8 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1680:	1005003a 	cmpeq	r2,r2,zero
    1684:	dfc00017 	ldw	ra,0(sp)
    1688:	dec00104 	addi	sp,sp,4
    168c:	f800283a 	ret

00001690 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1690:	defffc04 	addi	sp,sp,-16
    1694:	dfc00315 	stw	ra,12(sp)
    1698:	dc400215 	stw	r17,8(sp)
    169c:	dc000115 	stw	r16,4(sp)
    16a0:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    16a4:	d8000005 	stb	zero,0(sp)
    16a8:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    16ac:	8009883a 	mov	r4,r16
    16b0:	d80b883a 	mov	r5,sp
    16b4:	00015e80 	call	15e8 <alt_up_ps2_read_data_byte_timeout>
    16b8:	1007883a 	mov	r3,r2
		if ( status == 0)
    16bc:	10803fcc 	andi	r2,r2,255
    16c0:	1000041e 	bne	r2,zero,16d4 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    16c4:	d8800003 	ldbu	r2,0(sp)
    16c8:	147ff81e 	bne	r2,r17,16ac <alt_up_ps2_wait_for_ack+0x1c>
    16cc:	0005883a 	mov	r2,zero
    16d0:	00000106 	br	16d8 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    16d4:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    16d8:	dfc00317 	ldw	ra,12(sp)
    16dc:	dc400217 	ldw	r17,8(sp)
    16e0:	dc000117 	ldw	r16,4(sp)
    16e4:	dec00404 	addi	sp,sp,16
    16e8:	f800283a 	ret

000016ec <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    16ec:	deffff04 	addi	sp,sp,-4
    16f0:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    16f4:	20800a17 	ldw	r2,40(r4)
    16f8:	29403fcc 	andi	r5,r5,255
    16fc:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1700:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    1704:	11000137 	ldwio	r4,4(r2)
    1708:	00015180 	call	1518 <read_CE_bit>
    170c:	10803fcc 	andi	r2,r2,255
    1710:	10000226 	beq	r2,zero,171c <alt_up_ps2_write_data_byte+0x30>
    1714:	00bffec4 	movi	r2,-5
    1718:	00000106 	br	1720 <alt_up_ps2_write_data_byte+0x34>
    171c:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1720:	dfc00017 	ldw	ra,0(sp)
    1724:	dec00104 	addi	sp,sp,4
    1728:	f800283a 	ret

0000172c <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    172c:	defffb04 	addi	sp,sp,-20
    1730:	dfc00415 	stw	ra,16(sp)
    1734:	dcc00315 	stw	r19,12(sp)
    1738:	dc800215 	stw	r18,8(sp)
    173c:	dc400115 	stw	r17,4(sp)
    1740:	dc000015 	stw	r16,0(sp)
    1744:	2827883a 	mov	r19,r5
    1748:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    174c:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1750:	01800216 	blt	zero,r6,175c <alt_up_ps2_write_fd+0x30>
    1754:	0021883a 	mov	r16,zero
    1758:	00000806 	br	177c <alt_up_ps2_write_fd+0x50>
    175c:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1760:	9c05883a 	add	r2,r19,r16
    1764:	8809883a 	mov	r4,r17
    1768:	11400003 	ldbu	r5,0(r2)
    176c:	00016ec0 	call	16ec <alt_up_ps2_write_data_byte>
		if (status!=0)
    1770:	1000021e 	bne	r2,zero,177c <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    1774:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1778:	943ff91e 	bne	r18,r16,1760 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    177c:	8005883a 	mov	r2,r16
    1780:	dfc00417 	ldw	ra,16(sp)
    1784:	dcc00317 	ldw	r19,12(sp)
    1788:	dc800217 	ldw	r18,8(sp)
    178c:	dc400117 	ldw	r17,4(sp)
    1790:	dc000017 	ldw	r16,0(sp)
    1794:	dec00504 	addi	sp,sp,20
    1798:	f800283a 	ret

0000179c <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    179c:	defffe04 	addi	sp,sp,-8
    17a0:	dfc00115 	stw	ra,4(sp)
    17a4:	dc000015 	stw	r16,0(sp)
    17a8:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    17ac:	29403fcc 	andi	r5,r5,255
    17b0:	00016ec0 	call	16ec <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    17b4:	1000021e 	bne	r2,zero,17c0 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    17b8:	8009883a 	mov	r4,r16
    17bc:	00016900 	call	1690 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    17c0:	dfc00117 	ldw	ra,4(sp)
    17c4:	dc000017 	ldw	r16,0(sp)
    17c8:	dec00204 	addi	sp,sp,8
    17cc:	f800283a 	ret

000017d0 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    17d0:	defffd04 	addi	sp,sp,-12
    17d4:	dfc00215 	stw	ra,8(sp)
    17d8:	dc000115 	stw	r16,4(sp)
    17dc:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    17e0:	01403fc4 	movi	r5,255
    17e4:	000179c0 	call	179c <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    17e8:	1000171e 	bne	r2,zero,1848 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    17ec:	8009883a 	mov	r4,r16
    17f0:	d80b883a 	mov	r5,sp
    17f4:	00015e80 	call	15e8 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    17f8:	1000131e 	bne	r2,zero,1848 <alt_up_ps2_init+0x78>
    17fc:	d8c00003 	ldbu	r3,0(sp)
    1800:	00802a84 	movi	r2,170
    1804:	1880101e 	bne	r3,r2,1848 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1808:	8009883a 	mov	r4,r16
    180c:	d80b883a 	mov	r5,sp
    1810:	00015e80 	call	15e8 <alt_up_ps2_read_data_byte_timeout>
    1814:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1818:	00bfe304 	movi	r2,-116
    181c:	1880031e 	bne	r3,r2,182c <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1820:	00800044 	movi	r2,1
    1824:	80800d15 	stw	r2,52(r16)
    1828:	00000706 	br	1848 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    182c:	1800061e 	bne	r3,zero,1848 <alt_up_ps2_init+0x78>
    1830:	d8800003 	ldbu	r2,0(sp)
    1834:	1000041e 	bne	r2,zero,1848 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1838:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    183c:	8009883a 	mov	r4,r16
    1840:	01403d04 	movi	r5,244
    1844:	00016ec0 	call	16ec <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1848:	dfc00217 	ldw	ra,8(sp)
    184c:	dc000117 	ldw	r16,4(sp)
    1850:	dec00304 	addi	sp,sp,12
    1854:	f800283a 	ret

00001858 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1858:	20800a17 	ldw	r2,40(r4)
    185c:	10800104 	addi	r2,r2,4
    1860:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1864:	013fff84 	movi	r4,-2
    1868:	1906703a 	and	r3,r3,r4
    186c:	10c00035 	stwio	r3,0(r2)
}
    1870:	f800283a 	ret

00001874 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1874:	20c00a17 	ldw	r3,40(r4)
    1878:	18c00104 	addi	r3,r3,4
    187c:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1880:	10800054 	ori	r2,r2,1
    1884:	18800035 	stwio	r2,0(r3)
}
    1888:	f800283a 	ret

0000188c <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    188c:	200495ba 	slli	r2,r4,22
}
    1890:	1005d7fa 	srai	r2,r2,31
    1894:	f800283a 	ret

00001898 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1898:	deffff04 	addi	sp,sp,-4
    189c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    18a0:	01400034 	movhi	r5,0
    18a4:	295cde04 	addi	r5,r5,29560
    18a8:	00028140 	call	2814 <alt_find_dev>

  return dev;
}
    18ac:	dfc00017 	ldw	ra,0(sp)
    18b0:	dec00104 	addi	sp,sp,4
    18b4:	f800283a 	ret

000018b8 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    18b8:	defffd04 	addi	sp,sp,-12
    18bc:	dfc00215 	stw	ra,8(sp)
    18c0:	dc400115 	stw	r17,4(sp)
    18c4:	dc000015 	stw	r16,0(sp)
    18c8:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    18cc:	20800a17 	ldw	r2,40(r4)
    18d0:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    18d4:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    18d8:	8009883a 	mov	r4,r16
    18dc:	000188c0 	call	188c <alt_up_rs232_check_parity>
    18e0:	88800005 	stb	r2,0(r17)
    18e4:	8420000c 	andi	r16,r16,32768
    18e8:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    18ec:	80bfffc4 	addi	r2,r16,-1
    18f0:	dfc00217 	ldw	ra,8(sp)
    18f4:	dc400117 	ldw	r17,4(sp)
    18f8:	dc000017 	ldw	r16,0(sp)
    18fc:	dec00304 	addi	sp,sp,12
    1900:	f800283a 	ret

00001904 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1904:	defff904 	addi	sp,sp,-28
    1908:	dfc00615 	stw	ra,24(sp)
    190c:	dd000515 	stw	r20,20(sp)
    1910:	dcc00415 	stw	r19,16(sp)
    1914:	dc800315 	stw	r18,12(sp)
    1918:	dc400215 	stw	r17,8(sp)
    191c:	dc000115 	stw	r16,4(sp)
    1920:	2821883a 	mov	r16,r5
    1924:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1928:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    192c:	3000021e 	bne	r6,zero,1938 <alt_up_rs232_read_fd+0x34>
    1930:	0025883a 	mov	r18,zero
    1934:	00000a06 	br	1960 <alt_up_rs232_read_fd+0x5c>
    1938:	0025883a 	mov	r18,zero
    193c:	04400044 	movi	r17,1
    1940:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1944:	8461883a 	add	r16,r16,r17
    1948:	9809883a 	mov	r4,r19
    194c:	d80d883a 	mov	r6,sp
    1950:	00018b80 	call	18b8 <alt_up_rs232_read_data>
    1954:	1000021e 	bne	r2,zero,1960 <alt_up_rs232_read_fd+0x5c>
			count++;
    1958:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    195c:	a4bff81e 	bne	r20,r18,1940 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1960:	9005883a 	mov	r2,r18
    1964:	dfc00617 	ldw	ra,24(sp)
    1968:	dd000517 	ldw	r20,20(sp)
    196c:	dcc00417 	ldw	r19,16(sp)
    1970:	dc800317 	ldw	r18,12(sp)
    1974:	dc400217 	ldw	r17,8(sp)
    1978:	dc000117 	ldw	r16,4(sp)
    197c:	dec00704 	addi	sp,sp,28
    1980:	f800283a 	ret

00001984 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1984:	20800a17 	ldw	r2,40(r4)
    1988:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    198c:	1004d43a 	srli	r2,r2,16
    1990:	f800283a 	ret

00001994 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1994:	20800a17 	ldw	r2,40(r4)
    1998:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    199c:	29403fcc 	andi	r5,r5,255
    19a0:	11400035 	stwio	r5,0(r2)
	return 0;
}
    19a4:	0005883a 	mov	r2,zero
    19a8:	f800283a 	ret

000019ac <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    19ac:	defffb04 	addi	sp,sp,-20
    19b0:	dfc00415 	stw	ra,16(sp)
    19b4:	dcc00315 	stw	r19,12(sp)
    19b8:	dc800215 	stw	r18,8(sp)
    19bc:	dc400115 	stw	r17,4(sp)
    19c0:	dc000015 	stw	r16,0(sp)
    19c4:	2827883a 	mov	r19,r5
    19c8:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    19cc:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    19d0:	3000021e 	bne	r6,zero,19dc <alt_up_rs232_write_fd+0x30>
    19d4:	0021883a 	mov	r16,zero
    19d8:	00000806 	br	19fc <alt_up_rs232_write_fd+0x50>
    19dc:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    19e0:	84c5883a 	add	r2,r16,r19
    19e4:	8809883a 	mov	r4,r17
    19e8:	11400003 	ldbu	r5,0(r2)
    19ec:	00019940 	call	1994 <alt_up_rs232_write_data>
    19f0:	1000021e 	bne	r2,zero,19fc <alt_up_rs232_write_fd+0x50>
		{
			count++;
    19f4:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    19f8:	943ff91e 	bne	r18,r16,19e0 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    19fc:	8005883a 	mov	r2,r16
    1a00:	dfc00417 	ldw	ra,16(sp)
    1a04:	dcc00317 	ldw	r19,12(sp)
    1a08:	dc800217 	ldw	r18,8(sp)
    1a0c:	dc400117 	ldw	r17,4(sp)
    1a10:	dc000017 	ldw	r16,0(sp)
    1a14:	dec00504 	addi	sp,sp,20
    1a18:	f800283a 	ret

00001a1c <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1a1c:	20800a17 	ldw	r2,40(r4)
    1a20:	10800104 	addi	r2,r2,4
    1a24:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1a28:	013fff84 	movi	r4,-2
    1a2c:	1906703a 	and	r3,r3,r4
    1a30:	10c00035 	stwio	r3,0(r2)
}
    1a34:	f800283a 	ret

00001a38 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1a38:	20c00a17 	ldw	r3,40(r4)
    1a3c:	18c00104 	addi	r3,r3,4
    1a40:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1a44:	10800054 	ori	r2,r2,1
    1a48:	18800035 	stwio	r2,0(r3)
}
    1a4c:	f800283a 	ret

00001a50 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1a50:	20800a17 	ldw	r2,40(r4)
    1a54:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1a58:	10bfffcc 	andi	r2,r2,65535
    1a5c:	f800283a 	ret

00001a60 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1a60:	20800c17 	ldw	r2,48(r4)
    1a64:	30801c2e 	bgeu	r6,r2,1ad8 <alt_up_char_buffer_string+0x78>
    1a68:	20800d17 	ldw	r2,52(r4)
    1a6c:	38801a2e 	bgeu	r7,r2,1ad8 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1a70:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    1a74:	28c00003 	ldbu	r3,0(r5)
    1a78:	18803fcc 	andi	r2,r3,255
    1a7c:	1080201c 	xori	r2,r2,128
    1a80:	10bfe004 	addi	r2,r2,-128
    1a84:	10001626 	beq	r2,zero,1ae0 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1a88:	3a04983a 	sll	r2,r7,r8
    1a8c:	308f883a 	add	r7,r6,r2
    1a90:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1a94:	20800b17 	ldw	r2,44(r4)
    1a98:	3885883a 	add	r2,r7,r2
    1a9c:	18c03fcc 	andi	r3,r3,255
    1aa0:	18c0201c 	xori	r3,r3,128
    1aa4:	18ffe004 	addi	r3,r3,-128
    1aa8:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    1aac:	320d883a 	add	r6,r6,r8
    1ab0:	20800c17 	ldw	r2,48(r4)
    1ab4:	3080082e 	bgeu	r6,r2,1ad8 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    1ab8:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1abc:	28c00003 	ldbu	r3,0(r5)
    1ac0:	18803fcc 	andi	r2,r3,255
    1ac4:	1080201c 	xori	r2,r2,128
    1ac8:	10bfe004 	addi	r2,r2,-128
    1acc:	10000426 	beq	r2,zero,1ae0 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1ad0:	3a0f883a 	add	r7,r7,r8
    1ad4:	003fef06 	br	1a94 <alt_up_char_buffer_string+0x34>
    1ad8:	00bfffc4 	movi	r2,-1
    1adc:	f800283a 	ret
    1ae0:	0005883a 	mov	r2,zero
	}
	return 0;
}
    1ae4:	f800283a 	ret

00001ae8 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1ae8:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1aec:	20800c17 	ldw	r2,48(r4)
    1af0:	3080112e 	bgeu	r6,r2,1b38 <alt_up_char_buffer_draw+0x50>
    1af4:	20800d17 	ldw	r2,52(r4)
    1af8:	38800f2e 	bgeu	r7,r2,1b38 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1afc:	20c00f17 	ldw	r3,60(r4)
    1b00:	30c6703a 	and	r3,r6,r3
    1b04:	20800e17 	ldw	r2,56(r4)
    1b08:	1886983a 	sll	r3,r3,r2
    1b0c:	20801117 	ldw	r2,68(r4)
    1b10:	3884703a 	and	r2,r7,r2
    1b14:	21001017 	ldw	r4,64(r4)
    1b18:	1104983a 	sll	r2,r2,r4
    1b1c:	1886b03a 	or	r3,r3,r2
    1b20:	40800b17 	ldw	r2,44(r8)
    1b24:	1887883a 	add	r3,r3,r2
    1b28:	28803fcc 	andi	r2,r5,255
    1b2c:	18800025 	stbio	r2,0(r3)
    1b30:	0005883a 	mov	r2,zero
    1b34:	f800283a 	ret

	return 0;
    1b38:	00bfffc4 	movi	r2,-1
}
    1b3c:	f800283a 	ret

00001b40 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1b40:	20c00a17 	ldw	r3,40(r4)
    1b44:	00800044 	movi	r2,1
    1b48:	188000a5 	stbio	r2,2(r3)
    1b4c:	20800a17 	ldw	r2,40(r4)
    1b50:	10c00084 	addi	r3,r2,2
    1b54:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1b58:	18800023 	ldbuio	r2,0(r3)
    1b5c:	1104703a 	and	r2,r2,r4
    1b60:	103ffd1e 	bne	r2,zero,1b58 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    1b64:	f800283a 	ret

00001b68 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1b68:	deffff04 	addi	sp,sp,-4
    1b6c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1b70:	01400034 	movhi	r5,0
    1b74:	295cde04 	addi	r5,r5,29560
    1b78:	00028140 	call	2814 <alt_find_dev>

  return dev;
}
    1b7c:	dfc00017 	ldw	ra,0(sp)
    1b80:	dec00104 	addi	sp,sp,4
    1b84:	f800283a 	ret

00001b88 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1b88:	defffe04 	addi	sp,sp,-8
    1b8c:	dfc00115 	stw	ra,4(sp)
    1b90:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1b94:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1b98:	80800007 	ldb	r2,0(r16)
    1b9c:	10000a26 	beq	r2,zero,1bc8 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1ba0:	8009883a 	mov	r4,r16
    1ba4:	01400034 	movhi	r5,0
    1ba8:	2955a804 	addi	r5,r5,22176
    1bac:	00030e00 	call	30e0 <strcmp>
    1bb0:	1000021e 	bne	r2,zero,1bbc <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    1bb4:	80000005 	stb	zero,0(r16)
    1bb8:	00000306 	br	1bc8 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1bbc:	84000044 	addi	r16,r16,1
    1bc0:	80800007 	ldb	r2,0(r16)
    1bc4:	103ff61e 	bne	r2,zero,1ba0 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    1bc8:	dfc00117 	ldw	ra,4(sp)
    1bcc:	dc000017 	ldw	r16,0(sp)
    1bd0:	dec00204 	addi	sp,sp,8
    1bd4:	f800283a 	ret

00001bd8 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    1bd8:	da000017 	ldw	r8,0(sp)
    1bdc:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    1be0:	1800051e 	bne	r3,zero,1bf8 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    1be4:	29c5383a 	mul	r2,r5,r7
    1be8:	3085883a 	add	r2,r6,r2
    1bec:	1105883a 	add	r2,r2,r4
    1bf0:	12000025 	stbio	r8,0(r2)
    1bf4:	f800283a 	ret
	else if (mode == 1)
    1bf8:	00800044 	movi	r2,1
    1bfc:	1880061e 	bne	r3,r2,1c18 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    1c00:	29c5383a 	mul	r2,r5,r7
    1c04:	3085883a 	add	r2,r6,r2
    1c08:	1085883a 	add	r2,r2,r2
    1c0c:	1105883a 	add	r2,r2,r4
    1c10:	1200002d 	sthio	r8,0(r2)
    1c14:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    1c18:	29c5383a 	mul	r2,r5,r7
    1c1c:	1185883a 	add	r2,r2,r6
    1c20:	1085883a 	add	r2,r2,r2
    1c24:	1085883a 	add	r2,r2,r2
    1c28:	1105883a 	add	r2,r2,r4
    1c2c:	12000035 	stwio	r8,0(r2)
    1c30:	f800283a 	ret

00001c34 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    1c34:	defff304 	addi	sp,sp,-52
    1c38:	dfc00c15 	stw	ra,48(sp)
    1c3c:	df000b15 	stw	fp,44(sp)
    1c40:	ddc00a15 	stw	r23,40(sp)
    1c44:	dd800915 	stw	r22,36(sp)
    1c48:	dd400815 	stw	r21,32(sp)
    1c4c:	dd000715 	stw	r20,28(sp)
    1c50:	dcc00615 	stw	r19,24(sp)
    1c54:	dc800515 	stw	r18,20(sp)
    1c58:	dc400415 	stw	r17,16(sp)
    1c5c:	dc000315 	stw	r16,12(sp)
    1c60:	3011883a 	mov	r8,r6
    1c64:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    1c68:	4987c83a 	sub	r3,r9,r6
    1c6c:	1800010e 	bge	r3,zero,1c74 <alt_up_pixel_buffer_dma_draw_line+0x40>
    1c70:	00c7c83a 	sub	r3,zero,r3
    1c74:	3945c83a 	sub	r2,r7,r5
    1c78:	1000010e 	bge	r2,zero,1c80 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    1c7c:	0085c83a 	sub	r2,zero,r2
    1c80:	10c4803a 	cmplt	r2,r2,r3
    1c84:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    1c88:	20c00e17 	ldw	r3,56(r4)
    1c8c:	00800044 	movi	r2,1
    1c90:	1880021e 	bne	r3,r2,1c9c <alt_up_pixel_buffer_dma_draw_line+0x68>
    1c94:	d8000215 	stw	zero,8(sp)
    1c98:	00000306 	br	1ca8 <alt_up_pixel_buffer_dma_draw_line+0x74>
    1c9c:	18c00098 	cmpnei	r3,r3,2
    1ca0:	18c00044 	addi	r3,r3,1
    1ca4:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    1ca8:	20800d17 	ldw	r2,52(r4)
    1cac:	1000061e 	bne	r2,zero,1cc8 <alt_up_pixel_buffer_dma_draw_line+0x94>
    1cb0:	20801317 	ldw	r2,76(r4)
    1cb4:	d8c00217 	ldw	r3,8(sp)
    1cb8:	10c5c83a 	sub	r2,r2,r3
    1cbc:	00c00044 	movi	r3,1
    1cc0:	18ae983a 	sll	r23,r3,r2
    1cc4:	00000106 	br	1ccc <alt_up_pixel_buffer_dma_draw_line+0x98>
    1cc8:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    1ccc:	d8c00f17 	ldw	r3,60(sp)
    1cd0:	00800044 	movi	r2,1
    1cd4:	1880021e 	bne	r3,r2,1ce0 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    1cd8:	25800c17 	ldw	r22,48(r4)
    1cdc:	00000106 	br	1ce4 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    1ce0:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    1ce4:	50000326 	beq	r10,zero,1cf4 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    1ce8:	400d883a 	mov	r6,r8
    1cec:	4827883a 	mov	r19,r9
    1cf0:	00000406 	br	1d04 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    1cf4:	280d883a 	mov	r6,r5
    1cf8:	400b883a 	mov	r5,r8
    1cfc:	3827883a 	mov	r19,r7
    1d00:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    1d04:	9980060e 	bge	r19,r6,1d20 <alt_up_pixel_buffer_dma_draw_line+0xec>
    1d08:	9805883a 	mov	r2,r19
    1d0c:	3027883a 	mov	r19,r6
    1d10:	100d883a 	mov	r6,r2
    1d14:	3805883a 	mov	r2,r7
    1d18:	280f883a 	mov	r7,r5
    1d1c:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    1d20:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    1d24:	3969c83a 	sub	r20,r7,r5
    1d28:	a000010e 	bge	r20,zero,1d30 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    1d2c:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    1d30:	a804d7fa 	srli	r2,r21,31
    1d34:	1545883a 	add	r2,r2,r21
    1d38:	1005d07a 	srai	r2,r2,1
    1d3c:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    1d40:	29c0020e 	bge	r5,r7,1d4c <alt_up_pixel_buffer_dma_draw_line+0x118>
    1d44:	07000044 	movi	fp,1
    1d48:	00000106 	br	1d50 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    1d4c:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    1d50:	50000226 	beq	r10,zero,1d5c <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    1d54:	9980030e 	bge	r19,r6,1d64 <alt_up_pixel_buffer_dma_draw_line+0x130>
    1d58:	00002506 	br	1df0 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1d5c:	9980130e 	bge	r19,r6,1dac <alt_up_pixel_buffer_dma_draw_line+0x178>
    1d60:	00002306 	br	1df0 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1d64:	3021883a 	mov	r16,r6
    1d68:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    1d6c:	d8800e17 	ldw	r2,56(sp)
    1d70:	d8800015 	stw	r2,0(sp)
    1d74:	d8c00217 	ldw	r3,8(sp)
    1d78:	d8c00115 	stw	r3,4(sp)
    1d7c:	b009883a 	mov	r4,r22
    1d80:	b80b883a 	mov	r5,r23
    1d84:	900d883a 	mov	r6,r18
    1d88:	800f883a 	mov	r7,r16
    1d8c:	0001bd80 	call	1bd8 <helper_plot_pixel>
			error = error + deltay;
    1d90:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1d94:	0440020e 	bge	zero,r17,1da0 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    1d98:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1d9c:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    1da0:	84000044 	addi	r16,r16,1
    1da4:	9c001216 	blt	r19,r16,1df0 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1da8:	003ff006 	br	1d6c <alt_up_pixel_buffer_dma_draw_line+0x138>
    1dac:	3021883a 	mov	r16,r6
    1db0:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    1db4:	d8800e17 	ldw	r2,56(sp)
    1db8:	d8800015 	stw	r2,0(sp)
    1dbc:	d8c00217 	ldw	r3,8(sp)
    1dc0:	d8c00115 	stw	r3,4(sp)
    1dc4:	b009883a 	mov	r4,r22
    1dc8:	b80b883a 	mov	r5,r23
    1dcc:	800d883a 	mov	r6,r16
    1dd0:	900f883a 	mov	r7,r18
    1dd4:	0001bd80 	call	1bd8 <helper_plot_pixel>
			error = error + deltay;
    1dd8:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1ddc:	0440020e 	bge	zero,r17,1de8 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    1de0:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1de4:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1de8:	84000044 	addi	r16,r16,1
    1dec:	9c3ff10e 	bge	r19,r16,1db4 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    1df0:	dfc00c17 	ldw	ra,48(sp)
    1df4:	df000b17 	ldw	fp,44(sp)
    1df8:	ddc00a17 	ldw	r23,40(sp)
    1dfc:	dd800917 	ldw	r22,36(sp)
    1e00:	dd400817 	ldw	r21,32(sp)
    1e04:	dd000717 	ldw	r20,28(sp)
    1e08:	dcc00617 	ldw	r19,24(sp)
    1e0c:	dc800517 	ldw	r18,20(sp)
    1e10:	dc400417 	ldw	r17,16(sp)
    1e14:	dc000317 	ldw	r16,12(sp)
    1e18:	dec00d04 	addi	sp,sp,52
    1e1c:	f800283a 	ret

00001e20 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1e20:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1e24:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    1e28:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    1e2c:	3980022e 	bgeu	r7,r6,1e38 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    1e30:	3011883a 	mov	r8,r6
    1e34:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    1e38:	2a405d2e 	bgeu	r5,r9,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1e3c:	30805c2e 	bgeu	r6,r2,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    1e40:	40800136 	bltu	r8,r2,1e48 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    1e44:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1e48:	d8c00117 	ldw	r3,4(sp)
    1e4c:	00800044 	movi	r2,1
    1e50:	1880021e 	bne	r3,r2,1e5c <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1e54:	20c00c17 	ldw	r3,48(r4)
    1e58:	00000106 	br	1e60 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1e5c:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    1e60:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1e64:	20800d17 	ldw	r2,52(r4)
    1e68:	1000281e 	bne	r2,zero,1f0c <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    1e6c:	22801317 	ldw	r10,76(r4)
    1e70:	3284983a 	sll	r2,r6,r10
    1e74:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1e78:	21000e17 	ldw	r4,56(r4)
    1e7c:	00800044 	movi	r2,1
    1e80:	2080091e 	bne	r4,r2,1ea8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    1e84:	41804a36 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1e88:	1013883a 	mov	r9,r2
    1e8c:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1e90:	1945883a 	add	r2,r3,r5
    1e94:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1e98:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1e9c:	324d883a 	add	r6,r6,r9
    1ea0:	41804336 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1ea4:	003ffa06 	br	1e90 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1ea8:	00800084 	movi	r2,2
    1eac:	2080021e 	bne	r4,r2,1eb8 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    1eb0:	4180032e 	bgeu	r8,r6,1ec0 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    1eb4:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1eb8:	41800a2e 	bgeu	r8,r6,1ee4 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    1ebc:	f800283a 	ret
    1ec0:	294b883a 	add	r5,r5,r5
    1ec4:	02400044 	movi	r9,1
    1ec8:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1ecc:	28c5883a 	add	r2,r5,r3
    1ed0:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1ed4:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1ed8:	324d883a 	add	r6,r6,r9
    1edc:	41803436 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1ee0:	003ffa06 	br	1ecc <alt_up_pixel_buffer_dma_draw_vline+0xac>
    1ee4:	2945883a 	add	r2,r5,r5
    1ee8:	108b883a 	add	r5,r2,r2
    1eec:	02400044 	movi	r9,1
    1ef0:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1ef4:	28c5883a 	add	r2,r5,r3
    1ef8:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1efc:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1f00:	324d883a 	add	r6,r6,r9
    1f04:	41802a36 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1f08:	003ffa06 	br	1ef4 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1f0c:	21000e17 	ldw	r4,56(r4)
    1f10:	00800044 	movi	r2,1
    1f14:	20800b1e 	bne	r4,r2,1f44 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f18:	41802536 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1f1c:	4809883a 	mov	r4,r9
    1f20:	3245383a 	mul	r2,r6,r9
    1f24:	1885883a 	add	r2,r3,r2
    1f28:	1145883a 	add	r2,r2,r5
    1f2c:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1f30:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f34:	30cd883a 	add	r6,r6,r3
    1f38:	1105883a 	add	r2,r2,r4
    1f3c:	41801c36 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1f40:	003ffb06 	br	1f30 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1f44:	00800084 	movi	r2,2
    1f48:	20800c1e 	bne	r4,r2,1f7c <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f4c:	41801836 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    1f50:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    1f54:	3105383a 	mul	r2,r6,r4
    1f58:	1887883a 	add	r3,r3,r2
    1f5c:	294b883a 	add	r5,r5,r5
    1f60:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1f64:	28c5883a 	add	r2,r5,r3
    1f68:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    1f6c:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f70:	324d883a 	add	r6,r6,r9
    1f74:	41800e36 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1f78:	003ffa06 	br	1f64 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f7c:	41800c36 	bltu	r8,r6,1fb0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    1f80:	4a45883a 	add	r2,r9,r9
    1f84:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    1f88:	3105383a 	mul	r2,r6,r4
    1f8c:	1887883a 	add	r3,r3,r2
    1f90:	2945883a 	add	r2,r5,r5
    1f94:	108b883a 	add	r5,r2,r2
    1f98:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1f9c:	28c5883a 	add	r2,r5,r3
    1fa0:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    1fa4:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1fa8:	324d883a 	add	r6,r6,r9
    1fac:	41bffb2e 	bgeu	r8,r6,1f9c <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    1fb0:	f800283a 	ret

00001fb4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1fb4:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1fb8:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    1fbc:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    1fc0:	3140022e 	bgeu	r6,r5,1fcc <alt_up_pixel_buffer_dma_draw_hline+0x18>
    1fc4:	2813883a 	mov	r9,r5
    1fc8:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    1fcc:	2a00552e 	bgeu	r5,r8,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1fd0:	3880542e 	bgeu	r7,r2,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    1fd4:	4a000136 	bltu	r9,r8,1fdc <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    1fd8:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1fdc:	d8c00117 	ldw	r3,4(sp)
    1fe0:	00800044 	movi	r2,1
    1fe4:	1880021e 	bne	r3,r2,1ff0 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1fe8:	21800c17 	ldw	r6,48(r4)
    1fec:	00000106 	br	1ff4 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1ff0:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    1ff4:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1ff8:	20800d17 	ldw	r2,52(r4)
    1ffc:	1000231e 	bne	r2,zero,208c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    2000:	20801317 	ldw	r2,76(r4)
    2004:	3884983a 	sll	r2,r7,r2
    2008:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    200c:	21000e17 	ldw	r4,56(r4)
    2010:	00800044 	movi	r2,1
    2014:	2080081e 	bne	r4,r2,2038 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    2018:	49404236 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    201c:	3945883a 	add	r2,r7,r5
    2020:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    2024:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2028:	290b883a 	add	r5,r5,r4
    202c:	1105883a 	add	r2,r2,r4
    2030:	49403c36 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2034:	003ffb06 	br	2024 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2038:	00800084 	movi	r2,2
    203c:	2080021e 	bne	r4,r2,2048 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    2040:	4940032e 	bgeu	r9,r5,2050 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    2044:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2048:	4940082e 	bgeu	r9,r5,206c <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    204c:	f800283a 	ret
    2050:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    2054:	2945883a 	add	r2,r5,r5
    2058:	11c5883a 	add	r2,r2,r7
    205c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2060:	290b883a 	add	r5,r5,r4
    2064:	49402f36 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2068:	003ffa06 	br	2054 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    206c:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    2070:	2945883a 	add	r2,r5,r5
    2074:	1085883a 	add	r2,r2,r2
    2078:	11c5883a 	add	r2,r2,r7
    207c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2080:	290b883a 	add	r5,r5,r4
    2084:	49402736 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2088:	003ff906 	br	2070 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    208c:	21000e17 	ldw	r4,56(r4)
    2090:	00800044 	movi	r2,1
    2094:	20800a1e 	bne	r4,r2,20c0 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    2098:	41c5383a 	mul	r2,r8,r7
    209c:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    20a0:	49402036 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    20a4:	1145883a 	add	r2,r2,r5
    20a8:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    20ac:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    20b0:	290b883a 	add	r5,r5,r4
    20b4:	1105883a 	add	r2,r2,r4
    20b8:	49401a36 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    20bc:	003ffb06 	br	20ac <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    20c0:	00800084 	movi	r2,2
    20c4:	20800b1e 	bne	r4,r2,20f4 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    20c8:	4205883a 	add	r2,r8,r8
    20cc:	3885383a 	mul	r2,r7,r2
    20d0:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    20d4:	49401336 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    20d8:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    20dc:	2945883a 	add	r2,r5,r5
    20e0:	11c5883a 	add	r2,r2,r7
    20e4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    20e8:	290b883a 	add	r5,r5,r4
    20ec:	49400d36 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    20f0:	003ffa06 	br	20dc <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    20f4:	4205883a 	add	r2,r8,r8
    20f8:	1085883a 	add	r2,r2,r2
    20fc:	3885383a 	mul	r2,r7,r2
    2100:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    2104:	49400736 	bltu	r9,r5,2124 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2108:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    210c:	2945883a 	add	r2,r5,r5
    2110:	1085883a 	add	r2,r2,r2
    2114:	11c5883a 	add	r2,r2,r7
    2118:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    211c:	290b883a 	add	r5,r5,r4
    2120:	497ffa2e 	bgeu	r9,r5,210c <alt_up_pixel_buffer_dma_draw_hline+0x158>
    2124:	f800283a 	ret

00002128 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    2128:	defff604 	addi	sp,sp,-40
    212c:	dfc00915 	stw	ra,36(sp)
    2130:	dd800815 	stw	r22,32(sp)
    2134:	dd400715 	stw	r21,28(sp)
    2138:	dd000615 	stw	r20,24(sp)
    213c:	dcc00515 	stw	r19,20(sp)
    2140:	dc800415 	stw	r18,16(sp)
    2144:	dc400315 	stw	r17,12(sp)
    2148:	dc000215 	stw	r16,8(sp)
    214c:	2029883a 	mov	r20,r4
    2150:	282d883a 	mov	r22,r5
    2154:	302b883a 	mov	r21,r6
    2158:	3825883a 	mov	r18,r7
    215c:	dcc00a17 	ldw	r19,40(sp)
    2160:	dc000b17 	ldw	r16,44(sp)
    2164:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    2168:	dc000015 	stw	r16,0(sp)
    216c:	dc400115 	stw	r17,4(sp)
    2170:	380d883a 	mov	r6,r7
    2174:	a80f883a 	mov	r7,r21
    2178:	0001fb40 	call	1fb4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    217c:	dc000015 	stw	r16,0(sp)
    2180:	dc400115 	stw	r17,4(sp)
    2184:	a009883a 	mov	r4,r20
    2188:	b00b883a 	mov	r5,r22
    218c:	900d883a 	mov	r6,r18
    2190:	980f883a 	mov	r7,r19
    2194:	0001fb40 	call	1fb4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    2198:	dc000015 	stw	r16,0(sp)
    219c:	dc400115 	stw	r17,4(sp)
    21a0:	a009883a 	mov	r4,r20
    21a4:	b00b883a 	mov	r5,r22
    21a8:	a80d883a 	mov	r6,r21
    21ac:	980f883a 	mov	r7,r19
    21b0:	0001e200 	call	1e20 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    21b4:	dc000015 	stw	r16,0(sp)
    21b8:	dc400115 	stw	r17,4(sp)
    21bc:	a009883a 	mov	r4,r20
    21c0:	900b883a 	mov	r5,r18
    21c4:	a80d883a 	mov	r6,r21
    21c8:	980f883a 	mov	r7,r19
    21cc:	0001e200 	call	1e20 <alt_up_pixel_buffer_dma_draw_vline>
}
    21d0:	dfc00917 	ldw	ra,36(sp)
    21d4:	dd800817 	ldw	r22,32(sp)
    21d8:	dd400717 	ldw	r21,28(sp)
    21dc:	dd000617 	ldw	r20,24(sp)
    21e0:	dcc00517 	ldw	r19,20(sp)
    21e4:	dc800417 	ldw	r18,16(sp)
    21e8:	dc400317 	ldw	r17,12(sp)
    21ec:	dc000217 	ldw	r16,8(sp)
    21f0:	dec00a04 	addi	sp,sp,40
    21f4:	f800283a 	ret

000021f8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    21f8:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    21fc:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    2200:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    2204:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    2208:	3940022e 	bgeu	r7,r5,2214 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    220c:	2811883a 	mov	r8,r5
    2210:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    2214:	5980032e 	bgeu	r11,r6,2224 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    2218:	5805883a 	mov	r2,r11
    221c:	3017883a 	mov	r11,r6
    2220:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    2224:	2a80842e 	bgeu	r5,r10,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2228:	30c0832e 	bgeu	r6,r3,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    222c:	42800136 	bltu	r8,r10,2234 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    2230:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2234:	58c00136 	bltu	r11,r3,223c <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    2238:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    223c:	d8c00217 	ldw	r3,8(sp)
    2240:	00800044 	movi	r2,1
    2244:	1880021e 	bne	r3,r2,2250 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    2248:	20c00c17 	ldw	r3,48(r4)
    224c:	00000106 	br	2254 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    2250:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2254:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2258:	20800d17 	ldw	r2,52(r4)
    225c:	1000391e 	bne	r2,zero,2344 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2260:	22801317 	ldw	r10,76(r4)
    2264:	3284983a 	sll	r2,r6,r10
    2268:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    226c:	21000e17 	ldw	r4,56(r4)
    2270:	00800044 	movi	r2,1
    2274:	2080101e 	bne	r4,r2,22b8 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    2278:	59806f36 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
    227c:	00000a06 	br	22a8 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2280:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2284:	00800044 	movi	r2,1
    2288:	1887883a 	add	r3,r3,r2
    228c:	2089883a 	add	r4,r4,r2
    2290:	40fffb2e 	bgeu	r8,r3,2280 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2294:	00800044 	movi	r2,1
    2298:	308d883a 	add	r6,r6,r2
    229c:	59806636 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    22a0:	1284983a 	sll	r2,r2,r10
    22a4:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    22a8:	417ffa36 	bltu	r8,r5,2294 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    22ac:	29c9883a 	add	r4,r5,r7
    22b0:	2807883a 	mov	r3,r5
    22b4:	003ff206 	br	2280 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    22b8:	00800084 	movi	r2,2
    22bc:	2080021e 	bne	r4,r2,22c8 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    22c0:	59805d36 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
    22c4:	00000e06 	br	2300 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    22c8:	59805b36 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
    22cc:	00001b06 	br	233c <alt_up_pixel_buffer_dma_draw_box+0x144>
    22d0:	2807883a 	mov	r3,r5
    22d4:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    22d8:	18c5883a 	add	r2,r3,r3
    22dc:	11c5883a 	add	r2,r2,r7
    22e0:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    22e4:	1907883a 	add	r3,r3,r4
    22e8:	40fffb2e 	bgeu	r8,r3,22d8 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    22ec:	00800044 	movi	r2,1
    22f0:	308d883a 	add	r6,r6,r2
    22f4:	59805036 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    22f8:	1284983a 	sll	r2,r2,r10
    22fc:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2300:	417ff32e 	bgeu	r8,r5,22d0 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    2304:	003ff906 	br	22ec <alt_up_pixel_buffer_dma_draw_box+0xf4>
    2308:	2807883a 	mov	r3,r5
    230c:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    2310:	18c5883a 	add	r2,r3,r3
    2314:	1085883a 	add	r2,r2,r2
    2318:	11c5883a 	add	r2,r2,r7
    231c:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2320:	1907883a 	add	r3,r3,r4
    2324:	40fffa2e 	bgeu	r8,r3,2310 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2328:	00800044 	movi	r2,1
    232c:	308d883a 	add	r6,r6,r2
    2330:	59804136 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    2334:	1284983a 	sll	r2,r2,r10
    2338:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    233c:	417ff22e 	bgeu	r8,r5,2308 <alt_up_pixel_buffer_dma_draw_box+0x110>
    2340:	003ff906 	br	2328 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2344:	21000e17 	ldw	r4,56(r4)
    2348:	00800044 	movi	r2,1
    234c:	2080121e 	bne	r4,r2,2398 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2350:	59803936 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2354:	5019883a 	mov	r12,r10
    2358:	3285383a 	mul	r2,r6,r10
    235c:	1885883a 	add	r2,r3,r2
    2360:	114f883a 	add	r7,r2,r5
    2364:	00000806 	br	2388 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2368:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    236c:	00800044 	movi	r2,1
    2370:	1887883a 	add	r3,r3,r2
    2374:	2089883a 	add	r4,r4,r2
    2378:	40fffb2e 	bgeu	r8,r3,2368 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    237c:	31800044 	addi	r6,r6,1
    2380:	3b0f883a 	add	r7,r7,r12
    2384:	59802c36 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    2388:	417ffc36 	bltu	r8,r5,237c <alt_up_pixel_buffer_dma_draw_box+0x184>
    238c:	3809883a 	mov	r4,r7
    2390:	2807883a 	mov	r3,r5
    2394:	003ff406 	br	2368 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2398:	00800084 	movi	r2,2
    239c:	2080121e 	bne	r4,r2,23e8 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    23a0:	59802536 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    23a4:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    23a8:	3285383a 	mul	r2,r6,r10
    23ac:	1889883a 	add	r4,r3,r2
    23b0:	03000044 	movi	r12,1
    23b4:	00000a06 	br	23e0 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    23b8:	2807883a 	mov	r3,r5
    23bc:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    23c0:	18c5883a 	add	r2,r3,r3
    23c4:	1105883a 	add	r2,r2,r4
    23c8:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    23cc:	19c7883a 	add	r3,r3,r7
    23d0:	40fffb2e 	bgeu	r8,r3,23c0 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    23d4:	330d883a 	add	r6,r6,r12
    23d8:	59801736 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    23dc:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    23e0:	417ff52e 	bgeu	r8,r5,23b8 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    23e4:	003ffb06 	br	23d4 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    23e8:	59801336 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    23ec:	5285883a 	add	r2,r10,r10
    23f0:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    23f4:	3285383a 	mul	r2,r6,r10
    23f8:	1889883a 	add	r4,r3,r2
    23fc:	03000044 	movi	r12,1
    2400:	00000b06 	br	2430 <alt_up_pixel_buffer_dma_draw_box+0x238>
    2404:	2807883a 	mov	r3,r5
    2408:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    240c:	18c5883a 	add	r2,r3,r3
    2410:	1085883a 	add	r2,r2,r2
    2414:	1105883a 	add	r2,r2,r4
    2418:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    241c:	19c7883a 	add	r3,r3,r7
    2420:	40fffa2e 	bgeu	r8,r3,240c <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2424:	330d883a 	add	r6,r6,r12
    2428:	59800336 	bltu	r11,r6,2438 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    242c:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2430:	417ff42e 	bgeu	r8,r5,2404 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    2434:	003ffb06 	br	2424 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    2438:	f800283a 	ret

0000243c <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    243c:	00800044 	movi	r2,1
    2440:	2880021e 	bne	r5,r2,244c <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    2444:	21c00c17 	ldw	r7,48(r4)
    2448:	00000106 	br	2450 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    244c:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    2450:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2454:	20c00e17 	ldw	r3,56(r4)
    2458:	00800084 	movi	r2,2
    245c:	1880021e 	bne	r3,r2,2468 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2460:	294d883a 	add	r6,r5,r5
    2464:	00000206 	br	2470 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    2468:	2945883a 	add	r2,r5,r5
    246c:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    2470:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2474:	20800d17 	ldw	r2,52(r4)
    2478:	1000121e 	bne	r2,zero,24c4 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    247c:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    2480:	48001a26 	beq	r9,zero,24ec <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2484:	0011883a 	mov	r8,zero
    2488:	3014c03a 	cmpne	r10,r6,zero
    248c:	00000b06 	br	24bc <alt_up_pixel_buffer_dma_clear_screen+0x80>
    2490:	0007883a 	mov	r3,zero
    2494:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    2498:	19c5883a 	add	r2,r3,r7
    249c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    24a0:	1947883a 	add	r3,r3,r5
    24a4:	19bffc36 	bltu	r3,r6,2498 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    24a8:	00800044 	movi	r2,1
    24ac:	4091883a 	add	r8,r8,r2
    24b0:	4a000e26 	beq	r9,r8,24ec <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    24b4:	1104983a 	sll	r2,r2,r4
    24b8:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    24bc:	503ff41e 	bne	r10,zero,2490 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    24c0:	003ff906 	br	24a8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    24c4:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    24c8:	20000826 	beq	r4,zero,24ec <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    24cc:	0007883a 	mov	r3,zero
    24d0:	0005883a 	mov	r2,zero
    24d4:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    24d8:	3885883a 	add	r2,r7,r2
    24dc:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    24e0:	1945883a 	add	r2,r3,r5
    24e4:	1007883a 	mov	r3,r2
    24e8:	113ffb36 	bltu	r2,r4,24d8 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    24ec:	f800283a 	ret

000024f0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    24f0:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    24f4:	20c00a17 	ldw	r3,40(r4)
    24f8:	00800044 	movi	r2,1
    24fc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    2500:	20800b17 	ldw	r2,44(r4)
    2504:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    2508:	21400b15 	stw	r5,44(r4)
	return 0;
}
    250c:	0005883a 	mov	r2,zero
    2510:	f800283a 	ret

00002514 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    2514:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    2518:	22400f17 	ldw	r9,60(r4)
    251c:	32402a2e 	bgeu	r6,r9,25c8 <alt_up_pixel_buffer_dma_draw+0xb4>
    2520:	20801017 	ldw	r2,64(r4)
    2524:	3880282e 	bgeu	r7,r2,25c8 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2528:	20800d17 	ldw	r2,52(r4)
    252c:	10000a1e 	bne	r2,zero,2558 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    2530:	21001217 	ldw	r4,72(r4)
    2534:	3108703a 	and	r4,r6,r4
    2538:	40801117 	ldw	r2,68(r8)
    253c:	2088983a 	sll	r4,r4,r2
    2540:	40801417 	ldw	r2,80(r8)
    2544:	3884703a 	and	r2,r7,r2
    2548:	40c01317 	ldw	r3,76(r8)
    254c:	10c4983a 	sll	r2,r2,r3
    2550:	2086b03a 	or	r3,r4,r2
    2554:	00000806 	br	2578 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    2558:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    255c:	40c01217 	ldw	r3,72(r8)
    2560:	30c6703a 	and	r3,r6,r3
    2564:	40801417 	ldw	r2,80(r8)
    2568:	3884703a 	and	r2,r7,r2
    256c:	4885383a 	mul	r2,r9,r2
    2570:	10c5883a 	add	r2,r2,r3
    2574:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2578:	42400e17 	ldw	r9,56(r8)
    257c:	00800044 	movi	r2,1
    2580:	4880051e 	bne	r9,r2,2598 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2584:	40800c17 	ldw	r2,48(r8)
    2588:	1885883a 	add	r2,r3,r2
    258c:	11400025 	stbio	r5,0(r2)
    2590:	0005883a 	mov	r2,zero
    2594:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2598:	00800084 	movi	r2,2
    259c:	4880051e 	bne	r9,r2,25b4 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    25a0:	40800c17 	ldw	r2,48(r8)
    25a4:	1885883a 	add	r2,r3,r2
    25a8:	1140002d 	sthio	r5,0(r2)
    25ac:	0005883a 	mov	r2,zero
    25b0:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    25b4:	40800c17 	ldw	r2,48(r8)
    25b8:	1885883a 	add	r2,r3,r2
    25bc:	11400035 	stwio	r5,0(r2)
    25c0:	0005883a 	mov	r2,zero
    25c4:	f800283a 	ret
    25c8:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    25cc:	f800283a 	ret

000025d0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    25d0:	20800a17 	ldw	r2,40(r4)
    25d4:	10800337 	ldwio	r2,12(r2)
}
    25d8:	1080004c 	andi	r2,r2,1
    25dc:	f800283a 	ret

000025e0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    25e0:	00c00104 	movi	r3,4
    25e4:	20800a17 	ldw	r2,40(r4)
    25e8:	10c5883a 	add	r2,r2,r3
    25ec:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    25f0:	20800a17 	ldw	r2,40(r4)
    25f4:	10c5883a 	add	r2,r2,r3
    25f8:	10800037 	ldwio	r2,0(r2)
    25fc:	20800c15 	stw	r2,48(r4)
	return 0;
}
    2600:	0005883a 	mov	r2,zero
    2604:	f800283a 	ret

00002608 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    2608:	deffff04 	addi	sp,sp,-4
    260c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    2610:	01400034 	movhi	r5,0
    2614:	295cde04 	addi	r5,r5,29560
    2618:	00028140 	call	2814 <alt_find_dev>

  return dev;
}
    261c:	dfc00017 	ldw	ra,0(sp)
    2620:	dec00104 	addi	sp,sp,4
    2624:	f800283a 	ret

00002628 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2628:	00800074 	movhi	r2,1
    262c:	10a42504 	addi	r2,r2,-28524
    2630:	10800017 	ldw	r2,0(r2)
    2634:	1000021e 	bne	r2,zero,2640 <alt_alarm_start+0x18>
    2638:	00bfde84 	movi	r2,-134
    263c:	f800283a 	ret
  {
    if (alarm)
    2640:	2000021e 	bne	r4,zero,264c <alt_alarm_start+0x24>
    2644:	00bffa84 	movi	r2,-22
    2648:	f800283a 	ret
    {
      alarm->callback = callback;
    264c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2650:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2654:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2658:	00bfff84 	movi	r2,-2
    265c:	3884703a 	and	r2,r7,r2
    2660:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2664:	00800074 	movhi	r2,1
    2668:	10a42604 	addi	r2,r2,-28520
    266c:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2670:	01800044 	movi	r6,1
    2674:	1985883a 	add	r2,r3,r6
    2678:	2885883a 	add	r2,r5,r2
    267c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2680:	10c0022e 	bgeu	r2,r3,268c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    2684:	21800405 	stb	r6,16(r4)
    2688:	00000106 	br	2690 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    268c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2690:	00800034 	movhi	r2,0
    2694:	109ce304 	addi	r2,r2,29580
    2698:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    269c:	10c00017 	ldw	r3,0(r2)
    26a0:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    26a4:	10c00017 	ldw	r3,0(r2)
    26a8:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    26ac:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26b0:	3801703a 	wrctl	status,r7
    26b4:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    26b8:	f800283a 	ret

000026bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    26bc:	defffd04 	addi	sp,sp,-12
    26c0:	dfc00215 	stw	ra,8(sp)
    26c4:	dc400115 	stw	r17,4(sp)
    26c8:	dc000015 	stw	r16,0(sp)
    26cc:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    26d0:	20001c16 	blt	r4,zero,2744 <close+0x88>
    26d4:	20c00324 	muli	r3,r4,12
    26d8:	00800034 	movhi	r2,0
    26dc:	109a7a04 	addi	r2,r2,27112
    26e0:	1889883a 	add	r4,r3,r2

  if (fd)
    26e4:	20001726 	beq	r4,zero,2744 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    26e8:	20800017 	ldw	r2,0(r4)
    26ec:	10800417 	ldw	r2,16(r2)
    26f0:	10002126 	beq	r2,zero,2778 <close+0xbc>
    26f4:	103ee83a 	callr	r2
    26f8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    26fc:	8009883a 	mov	r4,r16
    2700:	0002bd80 	call	2bd8 <alt_release_fd>
    if (rval < 0)
    2704:	88000216 	blt	r17,zero,2710 <close+0x54>
    2708:	0005883a 	mov	r2,zero
    270c:	00001d06 	br	2784 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2710:	00800034 	movhi	r2,0
    2714:	109ce104 	addi	r2,r2,29572
    2718:	10800017 	ldw	r2,0(r2)
    271c:	1000031e 	bne	r2,zero,272c <close+0x70>
    2720:	00c00074 	movhi	r3,1
    2724:	18e42704 	addi	r3,r3,-28516
    2728:	00000206 	br	2734 <close+0x78>
    272c:	103ee83a 	callr	r2
    2730:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    2734:	0445c83a 	sub	r2,zero,r17
    2738:	18800015 	stw	r2,0(r3)
    273c:	00bfffc4 	movi	r2,-1
    2740:	00001006 	br	2784 <close+0xc8>
    2744:	00800034 	movhi	r2,0
    2748:	109ce104 	addi	r2,r2,29572
    274c:	10800017 	ldw	r2,0(r2)
    2750:	1000031e 	bne	r2,zero,2760 <close+0xa4>
    2754:	00c00074 	movhi	r3,1
    2758:	18e42704 	addi	r3,r3,-28516
    275c:	00000206 	br	2768 <close+0xac>
    2760:	103ee83a 	callr	r2
    2764:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2768:	00801444 	movi	r2,81
    276c:	18800015 	stw	r2,0(r3)
    2770:	00bfffc4 	movi	r2,-1
    2774:	00000306 	br	2784 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2778:	8009883a 	mov	r4,r16
    277c:	0002bd80 	call	2bd8 <alt_release_fd>
    2780:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    2784:	dfc00217 	ldw	ra,8(sp)
    2788:	dc400117 	ldw	r17,4(sp)
    278c:	dc000017 	ldw	r16,0(sp)
    2790:	dec00304 	addi	sp,sp,12
    2794:	f800283a 	ret

00002798 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2798:	f800283a 	ret

0000279c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    279c:	3005883a 	mov	r2,r6
    27a0:	f800283a 	ret

000027a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    27a4:	deffff04 	addi	sp,sp,-4
    27a8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    27ac:	20000226 	beq	r4,zero,27b8 <alt_dev_llist_insert+0x14>
    27b0:	20800217 	ldw	r2,8(r4)
    27b4:	10000d1e 	bne	r2,zero,27ec <alt_dev_llist_insert+0x48>
    27b8:	00800034 	movhi	r2,0
    27bc:	109ce104 	addi	r2,r2,29572
    27c0:	10800017 	ldw	r2,0(r2)
    27c4:	1000031e 	bne	r2,zero,27d4 <alt_dev_llist_insert+0x30>
    27c8:	00c00074 	movhi	r3,1
    27cc:	18e42704 	addi	r3,r3,-28516
    27d0:	00000206 	br	27dc <alt_dev_llist_insert+0x38>
    27d4:	103ee83a 	callr	r2
    27d8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    27dc:	00800584 	movi	r2,22
    27e0:	18800015 	stw	r2,0(r3)
    27e4:	00bffa84 	movi	r2,-22
    27e8:	00000706 	br	2808 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    27ec:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    27f0:	28800017 	ldw	r2,0(r5)
    27f4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    27f8:	28800017 	ldw	r2,0(r5)
    27fc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2800:	29000015 	stw	r4,0(r5)
    2804:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2808:	dfc00017 	ldw	ra,0(sp)
    280c:	dec00104 	addi	sp,sp,4
    2810:	f800283a 	ret

00002814 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2814:	defffb04 	addi	sp,sp,-20
    2818:	dfc00415 	stw	ra,16(sp)
    281c:	dcc00315 	stw	r19,12(sp)
    2820:	dc800215 	stw	r18,8(sp)
    2824:	dc400115 	stw	r17,4(sp)
    2828:	dc000015 	stw	r16,0(sp)
    282c:	2027883a 	mov	r19,r4
    2830:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    2834:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2838:	000319c0 	call	319c <strlen>
    283c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2840:	8c000726 	beq	r17,r16,2860 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2844:	89000217 	ldw	r4,8(r17)
    2848:	980b883a 	mov	r5,r19
    284c:	900d883a 	mov	r6,r18
    2850:	0002e800 	call	2e80 <memcmp>
    2854:	10000326 	beq	r2,zero,2864 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2858:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    285c:	847ff91e 	bne	r16,r17,2844 <alt_find_dev+0x30>
    2860:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    2864:	8805883a 	mov	r2,r17
    2868:	dfc00417 	ldw	ra,16(sp)
    286c:	dcc00317 	ldw	r19,12(sp)
    2870:	dc800217 	ldw	r18,8(sp)
    2874:	dc400117 	ldw	r17,4(sp)
    2878:	dc000017 	ldw	r16,0(sp)
    287c:	dec00504 	addi	sp,sp,20
    2880:	f800283a 	ret

00002884 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2884:	deffff04 	addi	sp,sp,-4
    2888:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    288c:	0009883a 	mov	r4,zero
    2890:	01408004 	movi	r5,512
    2894:	0002e0c0 	call	2e0c <alt_icache_flush>
#endif
}
    2898:	dfc00017 	ldw	ra,0(sp)
    289c:	dec00104 	addi	sp,sp,4
    28a0:	f800283a 	ret

000028a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    28a4:	defffe04 	addi	sp,sp,-8
    28a8:	dfc00115 	stw	ra,4(sp)
    28ac:	dc000015 	stw	r16,0(sp)
    28b0:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    28b4:	2809883a 	mov	r4,r5
    28b8:	300b883a 	mov	r5,r6
    28bc:	380d883a 	mov	r6,r7
    28c0:	0002a5c0 	call	2a5c <open>
    28c4:	1009883a 	mov	r4,r2

  if (old >= 0)
    28c8:	10000b16 	blt	r2,zero,28f8 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    28cc:	10c00324 	muli	r3,r2,12
    28d0:	00800034 	movhi	r2,0
    28d4:	109a7a04 	addi	r2,r2,27112
    28d8:	1887883a 	add	r3,r3,r2
    28dc:	18800017 	ldw	r2,0(r3)
    28e0:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    28e4:	18800117 	ldw	r2,4(r3)
    28e8:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    28ec:	18800217 	ldw	r2,8(r3)
    28f0:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    28f4:	0002bd80 	call	2bd8 <alt_release_fd>
  }
} 
    28f8:	dfc00117 	ldw	ra,4(sp)
    28fc:	dc000017 	ldw	r16,0(sp)
    2900:	dec00204 	addi	sp,sp,8
    2904:	f800283a 	ret

00002908 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2908:	defffa04 	addi	sp,sp,-24
    290c:	dfc00515 	stw	ra,20(sp)
    2910:	dd000415 	stw	r20,16(sp)
    2914:	dcc00315 	stw	r19,12(sp)
    2918:	dc800215 	stw	r18,8(sp)
    291c:	dc400115 	stw	r17,4(sp)
    2920:	dc000015 	stw	r16,0(sp)
    2924:	2005883a 	mov	r2,r4
    2928:	2827883a 	mov	r19,r5
    292c:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2930:	04000034 	movhi	r16,0
    2934:	841a7d04 	addi	r16,r16,27124
    2938:	04800044 	movi	r18,1
    293c:	04407fc4 	movi	r17,511
    2940:	8009883a 	mov	r4,r16
    2944:	100b883a 	mov	r5,r2
    2948:	900d883a 	mov	r6,r18
    294c:	880f883a 	mov	r7,r17
    2950:	00028a40 	call	28a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2954:	843ffd04 	addi	r16,r16,-12
    2958:	8009883a 	mov	r4,r16
    295c:	980b883a 	mov	r5,r19
    2960:	000d883a 	mov	r6,zero
    2964:	880f883a 	mov	r7,r17
    2968:	00028a40 	call	28a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    296c:	81000604 	addi	r4,r16,24
    2970:	a00b883a 	mov	r5,r20
    2974:	900d883a 	mov	r6,r18
    2978:	880f883a 	mov	r7,r17
    297c:	00028a40 	call	28a4 <alt_open_fd>
}  
    2980:	dfc00517 	ldw	ra,20(sp)
    2984:	dd000417 	ldw	r20,16(sp)
    2988:	dcc00317 	ldw	r19,12(sp)
    298c:	dc800217 	ldw	r18,8(sp)
    2990:	dc400117 	ldw	r17,4(sp)
    2994:	dc000017 	ldw	r16,0(sp)
    2998:	dec00604 	addi	sp,sp,24
    299c:	f800283a 	ret

000029a0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    29a0:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    29a4:	008007c4 	movi	r2,31
    29a8:	1100022e 	bgeu	r2,r4,29b4 <alt_irq_register+0x14>
    29ac:	00bffa84 	movi	r2,-22
    29b0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    29b4:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    29b8:	013fff84 	movi	r4,-2
    29bc:	4104703a 	and	r2,r8,r4
    29c0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    29c4:	380490fa 	slli	r2,r7,3
    29c8:	00c00074 	movhi	r3,1
    29cc:	18e43504 	addi	r3,r3,-28460
    29d0:	10c5883a 	add	r2,r2,r3
    29d4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    29d8:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    29dc:	30000e26 	beq	r6,zero,2a18 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    29e0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    29e4:	2904703a 	and	r2,r5,r4
    29e8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    29ec:	00c00074 	movhi	r3,1
    29f0:	18e42404 	addi	r3,r3,-28528
    29f4:	19000017 	ldw	r4,0(r3)
    29f8:	00800044 	movi	r2,1
    29fc:	11c4983a 	sll	r2,r2,r7
    2a00:	1104b03a 	or	r2,r2,r4
    2a04:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2a08:	18800017 	ldw	r2,0(r3)
    2a0c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2a10:	2801703a 	wrctl	status,r5
    2a14:	00000e06 	br	2a50 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a18:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a1c:	00bfff84 	movi	r2,-2
    2a20:	2884703a 	and	r2,r5,r2
    2a24:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2a28:	00c00074 	movhi	r3,1
    2a2c:	18e42404 	addi	r3,r3,-28528
    2a30:	19000017 	ldw	r4,0(r3)
    2a34:	00bfff84 	movi	r2,-2
    2a38:	11c4183a 	rol	r2,r2,r7
    2a3c:	1104703a 	and	r2,r2,r4
    2a40:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2a44:	18800017 	ldw	r2,0(r3)
    2a48:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2a4c:	2801703a 	wrctl	status,r5
    2a50:	4001703a 	wrctl	status,r8
    2a54:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2a58:	f800283a 	ret

00002a5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2a5c:	defff904 	addi	sp,sp,-28
    2a60:	dfc00615 	stw	ra,24(sp)
    2a64:	dd400515 	stw	r21,20(sp)
    2a68:	dd000415 	stw	r20,16(sp)
    2a6c:	dcc00315 	stw	r19,12(sp)
    2a70:	dc800215 	stw	r18,8(sp)
    2a74:	dc400115 	stw	r17,4(sp)
    2a78:	dc000015 	stw	r16,0(sp)
    2a7c:	2029883a 	mov	r20,r4
    2a80:	2827883a 	mov	r19,r5
    2a84:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2a88:	01400034 	movhi	r5,0
    2a8c:	295cde04 	addi	r5,r5,29560
    2a90:	00028140 	call	2814 <alt_find_dev>
    2a94:	1021883a 	mov	r16,r2
    2a98:	10000226 	beq	r2,zero,2aa4 <open+0x48>
    2a9c:	0025883a 	mov	r18,zero
    2aa0:	00000a06 	br	2acc <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2aa4:	a009883a 	mov	r4,r20
    2aa8:	0002ce40 	call	2ce4 <alt_find_file>
    2aac:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2ab0:	1000051e 	bne	r2,zero,2ac8 <open+0x6c>
    2ab4:	047fffc4 	movi	r17,-1
    2ab8:	043ffb44 	movi	r16,-19
    2abc:	00002b06 	br	2b6c <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2ac0:	043ffcc4 	movi	r16,-13
    2ac4:	00002906 	br	2b6c <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2ac8:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    2acc:	8009883a 	mov	r4,r16
    2ad0:	0002da00 	call	2da0 <alt_get_fd>
    2ad4:	1023883a 	mov	r17,r2
    2ad8:	10003316 	blt	r2,zero,2ba8 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    2adc:	10800324 	muli	r2,r2,12
    2ae0:	02000034 	movhi	r8,0
    2ae4:	421a7a04 	addi	r8,r8,27112
    2ae8:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2aec:	00900034 	movhi	r2,16384
    2af0:	10bfffc4 	addi	r2,r2,-1
    2af4:	9886703a 	and	r3,r19,r2
    2af8:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2afc:	9004c03a 	cmpne	r2,r18,zero
    2b00:	1000121e 	bne	r2,zero,2b4c <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2b04:	18900034 	orhi	r2,r3,16384
    2b08:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2b0c:	00800034 	movhi	r2,0
    2b10:	109ce004 	addi	r2,r2,29568
    2b14:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2b18:	21800017 	ldw	r6,0(r4)
    2b1c:	000b883a 	mov	r5,zero
    2b20:	4007883a 	mov	r3,r8
    2b24:	02400044 	movi	r9,1
    2b28:	02000304 	movi	r8,12
    2b2c:	18800017 	ldw	r2,0(r3)
    2b30:	1180031e 	bne	r2,r6,2b40 <open+0xe4>
    2b34:	18800217 	ldw	r2,8(r3)
    2b38:	1000010e 	bge	r2,zero,2b40 <open+0xe4>
    2b3c:	193fe01e 	bne	r3,r4,2ac0 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2b40:	2a4b883a 	add	r5,r5,r9
    2b44:	1a07883a 	add	r3,r3,r8
    2b48:	397ff82e 	bgeu	r7,r5,2b2c <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2b4c:	80800317 	ldw	r2,12(r16)
    2b50:	10001726 	beq	r2,zero,2bb0 <open+0x154>
    2b54:	a00b883a 	mov	r5,r20
    2b58:	980d883a 	mov	r6,r19
    2b5c:	a80f883a 	mov	r7,r21
    2b60:	103ee83a 	callr	r2
    2b64:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2b68:	1000110e 	bge	r2,zero,2bb0 <open+0x154>
  {
    alt_release_fd (index);  
    2b6c:	8809883a 	mov	r4,r17
    2b70:	0002bd80 	call	2bd8 <alt_release_fd>
    2b74:	00800034 	movhi	r2,0
    2b78:	109ce104 	addi	r2,r2,29572
    2b7c:	10800017 	ldw	r2,0(r2)
    2b80:	1000031e 	bne	r2,zero,2b90 <open+0x134>
    2b84:	00c00074 	movhi	r3,1
    2b88:	18e42704 	addi	r3,r3,-28516
    2b8c:	00000206 	br	2b98 <open+0x13c>
    2b90:	103ee83a 	callr	r2
    2b94:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    2b98:	0405c83a 	sub	r2,zero,r16
    2b9c:	18800015 	stw	r2,0(r3)
    2ba0:	047fffc4 	movi	r17,-1
    2ba4:	00000206 	br	2bb0 <open+0x154>
    2ba8:	1021883a 	mov	r16,r2
    2bac:	003fef06 	br	2b6c <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    2bb0:	8805883a 	mov	r2,r17
    2bb4:	dfc00617 	ldw	ra,24(sp)
    2bb8:	dd400517 	ldw	r21,20(sp)
    2bbc:	dd000417 	ldw	r20,16(sp)
    2bc0:	dcc00317 	ldw	r19,12(sp)
    2bc4:	dc800217 	ldw	r18,8(sp)
    2bc8:	dc400117 	ldw	r17,4(sp)
    2bcc:	dc000017 	ldw	r16,0(sp)
    2bd0:	dec00704 	addi	sp,sp,28
    2bd4:	f800283a 	ret

00002bd8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    2bd8:	00800084 	movi	r2,2
    2bdc:	1100060e 	bge	r2,r4,2bf8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    2be0:	20800324 	muli	r2,r4,12
    2be4:	00c00034 	movhi	r3,0
    2be8:	18da7a04 	addi	r3,r3,27112
    2bec:	10c5883a 	add	r2,r2,r3
    2bf0:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    2bf4:	10000015 	stw	zero,0(r2)
    2bf8:	f800283a 	ret

00002bfc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2bfc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c00:	00bfff84 	movi	r2,-2
    2c04:	2884703a 	and	r2,r5,r2
    2c08:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2c0c:	20c00017 	ldw	r3,0(r4)
    2c10:	20800117 	ldw	r2,4(r4)
    2c14:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2c18:	20800117 	ldw	r2,4(r4)
    2c1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2c20:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    2c24:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c28:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    2c2c:	f800283a 	ret

00002c30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2c30:	defffd04 	addi	sp,sp,-12
    2c34:	dfc00215 	stw	ra,8(sp)
    2c38:	dc400115 	stw	r17,4(sp)
    2c3c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2c40:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2c44:	d0a74a17 	ldw	r2,-25304(gp)
    2c48:	10800044 	addi	r2,r2,1
    2c4c:	d0a74a15 	stw	r2,-25304(gp)
    2c50:	00001b06 	br	2cc0 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    2c54:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2c58:	80800403 	ldbu	r2,16(r16)
    2c5c:	10000326 	beq	r2,zero,2c6c <alt_tick+0x3c>
    2c60:	d0a74a17 	ldw	r2,-25304(gp)
    2c64:	1000011e 	bne	r2,zero,2c6c <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    2c68:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2c6c:	d0e74a17 	ldw	r3,-25304(gp)
    2c70:	80800217 	ldw	r2,8(r16)
    2c74:	18801136 	bltu	r3,r2,2cbc <alt_tick+0x8c>
    2c78:	80800403 	ldbu	r2,16(r16)
    2c7c:	10000f1e 	bne	r2,zero,2cbc <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    2c80:	80800317 	ldw	r2,12(r16)
    2c84:	81000517 	ldw	r4,20(r16)
    2c88:	103ee83a 	callr	r2
    2c8c:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2c90:	1000031e 	bne	r2,zero,2ca0 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    2c94:	8009883a 	mov	r4,r16
    2c98:	0002bfc0 	call	2bfc <alt_alarm_stop>
    2c9c:	00000706 	br	2cbc <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    2ca0:	80800217 	ldw	r2,8(r16)
    2ca4:	1885883a 	add	r2,r3,r2
    2ca8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2cac:	d0e74a17 	ldw	r3,-25304(gp)
    2cb0:	10c0022e 	bgeu	r2,r3,2cbc <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    2cb4:	00800044 	movi	r2,1
    2cb8:	80800405 	stb	r2,16(r16)
    2cbc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2cc0:	d0a00704 	addi	r2,gp,-32740
    2cc4:	80bfe31e 	bne	r16,r2,2c54 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2cc8:	dfc00217 	ldw	ra,8(sp)
    2ccc:	dc400117 	ldw	r17,4(sp)
    2cd0:	dc000017 	ldw	r16,0(sp)
    2cd4:	dec00304 	addi	sp,sp,12
    2cd8:	f800283a 	ret

00002cdc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2cdc:	000170fa 	wrctl	ienable,zero
}
    2ce0:	f800283a 	ret

00002ce4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2ce4:	defff904 	addi	sp,sp,-28
    2ce8:	dfc00615 	stw	ra,24(sp)
    2cec:	dd400515 	stw	r21,20(sp)
    2cf0:	dd000415 	stw	r20,16(sp)
    2cf4:	dcc00315 	stw	r19,12(sp)
    2cf8:	dc800215 	stw	r18,8(sp)
    2cfc:	dc400115 	stw	r17,4(sp)
    2d00:	dc000015 	stw	r16,0(sp)
    2d04:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2d08:	00800034 	movhi	r2,0
    2d0c:	109cdc04 	addi	r2,r2,29552
    2d10:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2d14:	102b883a 	mov	r21,r2
    2d18:	88801626 	beq	r17,r2,2d74 <alt_find_file+0x90>
    2d1c:	053fffc4 	movi	r20,-1
    2d20:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    2d24:	8c000217 	ldw	r16,8(r17)
    2d28:	8009883a 	mov	r4,r16
    2d2c:	000319c0 	call	319c <strlen>
    2d30:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    2d34:	8085883a 	add	r2,r16,r2
    2d38:	1505883a 	add	r2,r2,r20
    2d3c:	10800007 	ldb	r2,0(r2)
    2d40:	14c0011e 	bne	r2,r19,2d48 <alt_find_file+0x64>
    {
      len -= 1;
    2d44:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2d48:	1c85883a 	add	r2,r3,r18
    2d4c:	10800007 	ldb	r2,0(r2)
    2d50:	14c00126 	beq	r2,r19,2d58 <alt_find_file+0x74>
    2d54:	1000051e 	bne	r2,zero,2d6c <alt_find_file+0x88>
    2d58:	8009883a 	mov	r4,r16
    2d5c:	900b883a 	mov	r5,r18
    2d60:	180d883a 	mov	r6,r3
    2d64:	0002e800 	call	2e80 <memcmp>
    2d68:	10000326 	beq	r2,zero,2d78 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2d6c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2d70:	8d7fec1e 	bne	r17,r21,2d24 <alt_find_file+0x40>
    2d74:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    2d78:	8805883a 	mov	r2,r17
    2d7c:	dfc00617 	ldw	ra,24(sp)
    2d80:	dd400517 	ldw	r21,20(sp)
    2d84:	dd000417 	ldw	r20,16(sp)
    2d88:	dcc00317 	ldw	r19,12(sp)
    2d8c:	dc800217 	ldw	r18,8(sp)
    2d90:	dc400117 	ldw	r17,4(sp)
    2d94:	dc000017 	ldw	r16,0(sp)
    2d98:	dec00704 	addi	sp,sp,28
    2d9c:	f800283a 	ret

00002da0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2da0:	000b883a 	mov	r5,zero
    2da4:	00c00034 	movhi	r3,0
    2da8:	18da7a04 	addi	r3,r3,27112
    2dac:	02000304 	movi	r8,12
    2db0:	02400034 	movhi	r9,0
    2db4:	4a5ce004 	addi	r9,r9,29568
    2db8:	01c00044 	movi	r7,1
    2dbc:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    2dc0:	18800017 	ldw	r2,0(r3)
    2dc4:	10000c1e 	bne	r2,zero,2df8 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    2dc8:	2a05383a 	mul	r2,r5,r8
    2dcc:	00c00034 	movhi	r3,0
    2dd0:	18da7a04 	addi	r3,r3,27112
    2dd4:	10c5883a 	add	r2,r2,r3
    2dd8:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    2ddc:	48800017 	ldw	r2,0(r9)
    2de0:	11400216 	blt	r2,r5,2dec <alt_get_fd+0x4c>
    2de4:	2805883a 	mov	r2,r5
    2de8:	f800283a 	ret
      {
        alt_max_fd = i;
    2dec:	49400015 	stw	r5,0(r9)
    2df0:	2805883a 	mov	r2,r5
    2df4:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2df8:	29cb883a 	add	r5,r5,r7
    2dfc:	1a07883a 	add	r3,r3,r8
    2e00:	29bfef1e 	bne	r5,r6,2dc0 <alt_get_fd+0x20>
    2e04:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    2e08:	f800283a 	ret

00002e0c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    2e0c:	2007883a 	mov	r3,r4
    2e10:	00808004 	movi	r2,512
    2e14:	1140012e 	bgeu	r2,r5,2e1c <alt_icache_flush+0x10>
    2e18:	100b883a 	mov	r5,r2
    2e1c:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2e20:	1940042e 	bgeu	r3,r5,2e34 <alt_icache_flush+0x28>
    2e24:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2e28:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2e2c:	1887883a 	add	r3,r3,r2
    2e30:	197ffd36 	bltu	r3,r5,2e28 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2e34:	208007cc 	andi	r2,r4,31
    2e38:	10000126 	beq	r2,zero,2e40 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2e3c:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2e40:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2e44:	f800283a 	ret

00002e48 <exit>:
    2e48:	defffe04 	addi	sp,sp,-8
    2e4c:	000b883a 	mov	r5,zero
    2e50:	dc000015 	stw	r16,0(sp)
    2e54:	dfc00115 	stw	ra,4(sp)
    2e58:	2021883a 	mov	r16,r4
    2e5c:	000349c0 	call	349c <__call_exitprocs>
    2e60:	00800034 	movhi	r2,0
    2e64:	109ce604 	addi	r2,r2,29592
    2e68:	11000017 	ldw	r4,0(r2)
    2e6c:	20800f17 	ldw	r2,60(r4)
    2e70:	10000126 	beq	r2,zero,2e78 <exit+0x30>
    2e74:	103ee83a 	callr	r2
    2e78:	8009883a 	mov	r4,r16
    2e7c:	00050040 	call	5004 <_exit>

00002e80 <memcmp>:
    2e80:	00c000c4 	movi	r3,3
    2e84:	1980032e 	bgeu	r3,r6,2e94 <memcmp+0x14>
    2e88:	2144b03a 	or	r2,r4,r5
    2e8c:	10c4703a 	and	r2,r2,r3
    2e90:	10000f26 	beq	r2,zero,2ed0 <memcmp+0x50>
    2e94:	31ffffc4 	addi	r7,r6,-1
    2e98:	3000061e 	bne	r6,zero,2eb4 <memcmp+0x34>
    2e9c:	00000a06 	br	2ec8 <memcmp+0x48>
    2ea0:	39ffffc4 	addi	r7,r7,-1
    2ea4:	00bfffc4 	movi	r2,-1
    2ea8:	21000044 	addi	r4,r4,1
    2eac:	29400044 	addi	r5,r5,1
    2eb0:	38800526 	beq	r7,r2,2ec8 <memcmp+0x48>
    2eb4:	20c00003 	ldbu	r3,0(r4)
    2eb8:	28800003 	ldbu	r2,0(r5)
    2ebc:	18bff826 	beq	r3,r2,2ea0 <memcmp+0x20>
    2ec0:	1885c83a 	sub	r2,r3,r2
    2ec4:	f800283a 	ret
    2ec8:	0005883a 	mov	r2,zero
    2ecc:	f800283a 	ret
    2ed0:	180f883a 	mov	r7,r3
    2ed4:	20c00017 	ldw	r3,0(r4)
    2ed8:	28800017 	ldw	r2,0(r5)
    2edc:	18bfed1e 	bne	r3,r2,2e94 <memcmp+0x14>
    2ee0:	31bfff04 	addi	r6,r6,-4
    2ee4:	21000104 	addi	r4,r4,4
    2ee8:	29400104 	addi	r5,r5,4
    2eec:	39bff936 	bltu	r7,r6,2ed4 <memcmp+0x54>
    2ef0:	003fe806 	br	2e94 <memcmp+0x14>

00002ef4 <putc>:
    2ef4:	defffc04 	addi	sp,sp,-16
    2ef8:	dc800215 	stw	r18,8(sp)
    2efc:	04800034 	movhi	r18,0
    2f00:	949ce504 	addi	r18,r18,29588
    2f04:	90c00017 	ldw	r3,0(r18)
    2f08:	dc400115 	stw	r17,4(sp)
    2f0c:	dc000015 	stw	r16,0(sp)
    2f10:	dfc00315 	stw	ra,12(sp)
    2f14:	2023883a 	mov	r17,r4
    2f18:	2821883a 	mov	r16,r5
    2f1c:	18000226 	beq	r3,zero,2f28 <putc+0x34>
    2f20:	18800e17 	ldw	r2,56(r3)
    2f24:	10001126 	beq	r2,zero,2f6c <putc+0x78>
    2f28:	80800217 	ldw	r2,8(r16)
    2f2c:	10ffffc4 	addi	r3,r2,-1
    2f30:	80c00215 	stw	r3,8(r16)
    2f34:	18001316 	blt	r3,zero,2f84 <putc+0x90>
    2f38:	80800017 	ldw	r2,0(r16)
    2f3c:	14400005 	stb	r17,0(r2)
    2f40:	80c00017 	ldw	r3,0(r16)
    2f44:	18800044 	addi	r2,r3,1
    2f48:	18c00003 	ldbu	r3,0(r3)
    2f4c:	80800015 	stw	r2,0(r16)
    2f50:	1805883a 	mov	r2,r3
    2f54:	dfc00317 	ldw	ra,12(sp)
    2f58:	dc800217 	ldw	r18,8(sp)
    2f5c:	dc400117 	ldw	r17,4(sp)
    2f60:	dc000017 	ldw	r16,0(sp)
    2f64:	dec00404 	addi	sp,sp,16
    2f68:	f800283a 	ret
    2f6c:	1809883a 	mov	r4,r3
    2f70:	00038e40 	call	38e4 <__sinit>
    2f74:	80800217 	ldw	r2,8(r16)
    2f78:	10ffffc4 	addi	r3,r2,-1
    2f7c:	80c00215 	stw	r3,8(r16)
    2f80:	183fed0e 	bge	r3,zero,2f38 <putc+0x44>
    2f84:	80800617 	ldw	r2,24(r16)
    2f88:	18800f16 	blt	r3,r2,2fc8 <putc+0xd4>
    2f8c:	80800017 	ldw	r2,0(r16)
    2f90:	14400005 	stb	r17,0(r2)
    2f94:	81000017 	ldw	r4,0(r16)
    2f98:	00800284 	movi	r2,10
    2f9c:	20c00003 	ldbu	r3,0(r4)
    2fa0:	18801226 	beq	r3,r2,2fec <putc+0xf8>
    2fa4:	20800044 	addi	r2,r4,1
    2fa8:	80800015 	stw	r2,0(r16)
    2fac:	1805883a 	mov	r2,r3
    2fb0:	dfc00317 	ldw	ra,12(sp)
    2fb4:	dc800217 	ldw	r18,8(sp)
    2fb8:	dc400117 	ldw	r17,4(sp)
    2fbc:	dc000017 	ldw	r16,0(sp)
    2fc0:	dec00404 	addi	sp,sp,16
    2fc4:	f800283a 	ret
    2fc8:	91000017 	ldw	r4,0(r18)
    2fcc:	880b883a 	mov	r5,r17
    2fd0:	800d883a 	mov	r6,r16
    2fd4:	dfc00317 	ldw	ra,12(sp)
    2fd8:	dc800217 	ldw	r18,8(sp)
    2fdc:	dc400117 	ldw	r17,4(sp)
    2fe0:	dc000017 	ldw	r16,0(sp)
    2fe4:	dec00404 	addi	sp,sp,16
    2fe8:	00032101 	jmpi	3210 <__swbuf_r>
    2fec:	91000017 	ldw	r4,0(r18)
    2ff0:	180b883a 	mov	r5,r3
    2ff4:	003ff606 	br	2fd0 <putc+0xdc>

00002ff8 <_putc_r>:
    2ff8:	defffc04 	addi	sp,sp,-16
    2ffc:	dc400215 	stw	r17,8(sp)
    3000:	dc000115 	stw	r16,4(sp)
    3004:	dfc00315 	stw	ra,12(sp)
    3008:	2021883a 	mov	r16,r4
    300c:	2823883a 	mov	r17,r5
    3010:	20000226 	beq	r4,zero,301c <_putc_r+0x24>
    3014:	20800e17 	ldw	r2,56(r4)
    3018:	10001026 	beq	r2,zero,305c <_putc_r+0x64>
    301c:	30800217 	ldw	r2,8(r6)
    3020:	10ffffc4 	addi	r3,r2,-1
    3024:	30c00215 	stw	r3,8(r6)
    3028:	18001316 	blt	r3,zero,3078 <_putc_r+0x80>
    302c:	30800017 	ldw	r2,0(r6)
    3030:	14400005 	stb	r17,0(r2)
    3034:	30c00017 	ldw	r3,0(r6)
    3038:	18800044 	addi	r2,r3,1
    303c:	18c00003 	ldbu	r3,0(r3)
    3040:	30800015 	stw	r2,0(r6)
    3044:	1805883a 	mov	r2,r3
    3048:	dfc00317 	ldw	ra,12(sp)
    304c:	dc400217 	ldw	r17,8(sp)
    3050:	dc000117 	ldw	r16,4(sp)
    3054:	dec00404 	addi	sp,sp,16
    3058:	f800283a 	ret
    305c:	d9800015 	stw	r6,0(sp)
    3060:	00038e40 	call	38e4 <__sinit>
    3064:	d9800017 	ldw	r6,0(sp)
    3068:	30800217 	ldw	r2,8(r6)
    306c:	10ffffc4 	addi	r3,r2,-1
    3070:	30c00215 	stw	r3,8(r6)
    3074:	183fed0e 	bge	r3,zero,302c <_putc_r+0x34>
    3078:	30800617 	ldw	r2,24(r6)
    307c:	18800e16 	blt	r3,r2,30b8 <_putc_r+0xc0>
    3080:	30800017 	ldw	r2,0(r6)
    3084:	14400005 	stb	r17,0(r2)
    3088:	31000017 	ldw	r4,0(r6)
    308c:	00800284 	movi	r2,10
    3090:	20c00003 	ldbu	r3,0(r4)
    3094:	18800f26 	beq	r3,r2,30d4 <_putc_r+0xdc>
    3098:	20800044 	addi	r2,r4,1
    309c:	30800015 	stw	r2,0(r6)
    30a0:	1805883a 	mov	r2,r3
    30a4:	dfc00317 	ldw	ra,12(sp)
    30a8:	dc400217 	ldw	r17,8(sp)
    30ac:	dc000117 	ldw	r16,4(sp)
    30b0:	dec00404 	addi	sp,sp,16
    30b4:	f800283a 	ret
    30b8:	8009883a 	mov	r4,r16
    30bc:	880b883a 	mov	r5,r17
    30c0:	dfc00317 	ldw	ra,12(sp)
    30c4:	dc400217 	ldw	r17,8(sp)
    30c8:	dc000117 	ldw	r16,4(sp)
    30cc:	dec00404 	addi	sp,sp,16
    30d0:	00032101 	jmpi	3210 <__swbuf_r>
    30d4:	8009883a 	mov	r4,r16
    30d8:	180b883a 	mov	r5,r3
    30dc:	003ff806 	br	30c0 <_putc_r+0xc8>

000030e0 <strcmp>:
    30e0:	2144b03a 	or	r2,r4,r5
    30e4:	108000cc 	andi	r2,r2,3
    30e8:	10001d1e 	bne	r2,zero,3160 <strcmp+0x80>
    30ec:	200f883a 	mov	r7,r4
    30f0:	28800017 	ldw	r2,0(r5)
    30f4:	21000017 	ldw	r4,0(r4)
    30f8:	280d883a 	mov	r6,r5
    30fc:	2080161e 	bne	r4,r2,3158 <strcmp+0x78>
    3100:	023fbff4 	movhi	r8,65279
    3104:	423fbfc4 	addi	r8,r8,-257
    3108:	2207883a 	add	r3,r4,r8
    310c:	01602074 	movhi	r5,32897
    3110:	29602004 	addi	r5,r5,-32640
    3114:	1946703a 	and	r3,r3,r5
    3118:	0104303a 	nor	r2,zero,r4
    311c:	10c4703a 	and	r2,r2,r3
    3120:	10001c1e 	bne	r2,zero,3194 <strcmp+0xb4>
    3124:	4013883a 	mov	r9,r8
    3128:	2811883a 	mov	r8,r5
    312c:	00000106 	br	3134 <strcmp+0x54>
    3130:	1800181e 	bne	r3,zero,3194 <strcmp+0xb4>
    3134:	39c00104 	addi	r7,r7,4
    3138:	39000017 	ldw	r4,0(r7)
    313c:	31800104 	addi	r6,r6,4
    3140:	31400017 	ldw	r5,0(r6)
    3144:	2245883a 	add	r2,r4,r9
    3148:	1204703a 	and	r2,r2,r8
    314c:	0106303a 	nor	r3,zero,r4
    3150:	1886703a 	and	r3,r3,r2
    3154:	217ff626 	beq	r4,r5,3130 <strcmp+0x50>
    3158:	3809883a 	mov	r4,r7
    315c:	300b883a 	mov	r5,r6
    3160:	20c00007 	ldb	r3,0(r4)
    3164:	1800051e 	bne	r3,zero,317c <strcmp+0x9c>
    3168:	00000606 	br	3184 <strcmp+0xa4>
    316c:	21000044 	addi	r4,r4,1
    3170:	20c00007 	ldb	r3,0(r4)
    3174:	29400044 	addi	r5,r5,1
    3178:	18000226 	beq	r3,zero,3184 <strcmp+0xa4>
    317c:	28800007 	ldb	r2,0(r5)
    3180:	18bffa26 	beq	r3,r2,316c <strcmp+0x8c>
    3184:	20c00003 	ldbu	r3,0(r4)
    3188:	28800003 	ldbu	r2,0(r5)
    318c:	1885c83a 	sub	r2,r3,r2
    3190:	f800283a 	ret
    3194:	0005883a 	mov	r2,zero
    3198:	f800283a 	ret

0000319c <strlen>:
    319c:	208000cc 	andi	r2,r4,3
    31a0:	2011883a 	mov	r8,r4
    31a4:	1000161e 	bne	r2,zero,3200 <strlen+0x64>
    31a8:	20c00017 	ldw	r3,0(r4)
    31ac:	017fbff4 	movhi	r5,65279
    31b0:	297fbfc4 	addi	r5,r5,-257
    31b4:	01e02074 	movhi	r7,32897
    31b8:	39e02004 	addi	r7,r7,-32640
    31bc:	1945883a 	add	r2,r3,r5
    31c0:	11c4703a 	and	r2,r2,r7
    31c4:	00c6303a 	nor	r3,zero,r3
    31c8:	1886703a 	and	r3,r3,r2
    31cc:	18000c1e 	bne	r3,zero,3200 <strlen+0x64>
    31d0:	280d883a 	mov	r6,r5
    31d4:	380b883a 	mov	r5,r7
    31d8:	21000104 	addi	r4,r4,4
    31dc:	20800017 	ldw	r2,0(r4)
    31e0:	1187883a 	add	r3,r2,r6
    31e4:	1946703a 	and	r3,r3,r5
    31e8:	0084303a 	nor	r2,zero,r2
    31ec:	10c4703a 	and	r2,r2,r3
    31f0:	103ff926 	beq	r2,zero,31d8 <strlen+0x3c>
    31f4:	20800007 	ldb	r2,0(r4)
    31f8:	10000326 	beq	r2,zero,3208 <strlen+0x6c>
    31fc:	21000044 	addi	r4,r4,1
    3200:	20800007 	ldb	r2,0(r4)
    3204:	103ffd1e 	bne	r2,zero,31fc <strlen+0x60>
    3208:	2205c83a 	sub	r2,r4,r8
    320c:	f800283a 	ret

00003210 <__swbuf_r>:
    3210:	defffc04 	addi	sp,sp,-16
    3214:	dc400215 	stw	r17,8(sp)
    3218:	dc000115 	stw	r16,4(sp)
    321c:	dfc00315 	stw	ra,12(sp)
    3220:	2023883a 	mov	r17,r4
    3224:	2821883a 	mov	r16,r5
    3228:	20000226 	beq	r4,zero,3234 <__swbuf_r+0x24>
    322c:	20800e17 	ldw	r2,56(r4)
    3230:	10002f26 	beq	r2,zero,32f0 <__swbuf_r+0xe0>
    3234:	3080030b 	ldhu	r2,12(r6)
    3238:	30c00617 	ldw	r3,24(r6)
    323c:	1080020c 	andi	r2,r2,8
    3240:	30c00215 	stw	r3,8(r6)
    3244:	10002226 	beq	r2,zero,32d0 <__swbuf_r+0xc0>
    3248:	30c00417 	ldw	r3,16(r6)
    324c:	18002026 	beq	r3,zero,32d0 <__swbuf_r+0xc0>
    3250:	31000017 	ldw	r4,0(r6)
    3254:	30800517 	ldw	r2,20(r6)
    3258:	20c7c83a 	sub	r3,r4,r3
    325c:	18802f0e 	bge	r3,r2,331c <__swbuf_r+0x10c>
    3260:	19400044 	addi	r5,r3,1
    3264:	30800217 	ldw	r2,8(r6)
    3268:	84003fcc 	andi	r16,r16,255
    326c:	20c00044 	addi	r3,r4,1
    3270:	10bfffc4 	addi	r2,r2,-1
    3274:	30800215 	stw	r2,8(r6)
    3278:	24000005 	stb	r16,0(r4)
    327c:	30800517 	ldw	r2,20(r6)
    3280:	30c00015 	stw	r3,0(r6)
    3284:	11400c26 	beq	r2,r5,32b8 <__swbuf_r+0xa8>
    3288:	3080030b 	ldhu	r2,12(r6)
    328c:	1080004c 	andi	r2,r2,1
    3290:	1005003a 	cmpeq	r2,r2,zero
    3294:	10000626 	beq	r2,zero,32b0 <__swbuf_r+0xa0>
    3298:	8005883a 	mov	r2,r16
    329c:	dfc00317 	ldw	ra,12(sp)
    32a0:	dc400217 	ldw	r17,8(sp)
    32a4:	dc000117 	ldw	r16,4(sp)
    32a8:	dec00404 	addi	sp,sp,16
    32ac:	f800283a 	ret
    32b0:	00800284 	movi	r2,10
    32b4:	80bff81e 	bne	r16,r2,3298 <__swbuf_r+0x88>
    32b8:	8809883a 	mov	r4,r17
    32bc:	300b883a 	mov	r5,r6
    32c0:	000364c0 	call	364c <_fflush_r>
    32c4:	103ff426 	beq	r2,zero,3298 <__swbuf_r+0x88>
    32c8:	043fffc4 	movi	r16,-1
    32cc:	003ff206 	br	3298 <__swbuf_r+0x88>
    32d0:	300b883a 	mov	r5,r6
    32d4:	8809883a 	mov	r4,r17
    32d8:	d9800015 	stw	r6,0(sp)
    32dc:	000335c0 	call	335c <__swsetup_r>
    32e0:	d9800017 	ldw	r6,0(sp)
    32e4:	1000061e 	bne	r2,zero,3300 <__swbuf_r+0xf0>
    32e8:	30c00417 	ldw	r3,16(r6)
    32ec:	003fd806 	br	3250 <__swbuf_r+0x40>
    32f0:	d9800015 	stw	r6,0(sp)
    32f4:	00038e40 	call	38e4 <__sinit>
    32f8:	d9800017 	ldw	r6,0(sp)
    32fc:	003fcd06 	br	3234 <__swbuf_r+0x24>
    3300:	3080030b 	ldhu	r2,12(r6)
    3304:	00c00244 	movi	r3,9
    3308:	043fffc4 	movi	r16,-1
    330c:	10801014 	ori	r2,r2,64
    3310:	3080030d 	sth	r2,12(r6)
    3314:	88c00015 	stw	r3,0(r17)
    3318:	003fdf06 	br	3298 <__swbuf_r+0x88>
    331c:	300b883a 	mov	r5,r6
    3320:	8809883a 	mov	r4,r17
    3324:	d9800015 	stw	r6,0(sp)
    3328:	000364c0 	call	364c <_fflush_r>
    332c:	d9800017 	ldw	r6,0(sp)
    3330:	103fe51e 	bne	r2,zero,32c8 <__swbuf_r+0xb8>
    3334:	31000017 	ldw	r4,0(r6)
    3338:	01400044 	movi	r5,1
    333c:	003fc906 	br	3264 <__swbuf_r+0x54>

00003340 <__swbuf>:
    3340:	01800034 	movhi	r6,0
    3344:	319ce504 	addi	r6,r6,29588
    3348:	2007883a 	mov	r3,r4
    334c:	31000017 	ldw	r4,0(r6)
    3350:	280d883a 	mov	r6,r5
    3354:	180b883a 	mov	r5,r3
    3358:	00032101 	jmpi	3210 <__swbuf_r>

0000335c <__swsetup_r>:
    335c:	00800034 	movhi	r2,0
    3360:	109ce504 	addi	r2,r2,29588
    3364:	10c00017 	ldw	r3,0(r2)
    3368:	defffd04 	addi	sp,sp,-12
    336c:	dc400115 	stw	r17,4(sp)
    3370:	dc000015 	stw	r16,0(sp)
    3374:	dfc00215 	stw	ra,8(sp)
    3378:	2023883a 	mov	r17,r4
    337c:	2821883a 	mov	r16,r5
    3380:	18000226 	beq	r3,zero,338c <__swsetup_r+0x30>
    3384:	18800e17 	ldw	r2,56(r3)
    3388:	10001f26 	beq	r2,zero,3408 <__swsetup_r+0xac>
    338c:	8100030b 	ldhu	r4,12(r16)
    3390:	2080020c 	andi	r2,r4,8
    3394:	10002826 	beq	r2,zero,3438 <__swsetup_r+0xdc>
    3398:	81400417 	ldw	r5,16(r16)
    339c:	28001d26 	beq	r5,zero,3414 <__swsetup_r+0xb8>
    33a0:	2080004c 	andi	r2,r4,1
    33a4:	1005003a 	cmpeq	r2,r2,zero
    33a8:	10000b26 	beq	r2,zero,33d8 <__swsetup_r+0x7c>
    33ac:	2080008c 	andi	r2,r4,2
    33b0:	10001226 	beq	r2,zero,33fc <__swsetup_r+0xa0>
    33b4:	0005883a 	mov	r2,zero
    33b8:	80800215 	stw	r2,8(r16)
    33bc:	28000b26 	beq	r5,zero,33ec <__swsetup_r+0x90>
    33c0:	0005883a 	mov	r2,zero
    33c4:	dfc00217 	ldw	ra,8(sp)
    33c8:	dc400117 	ldw	r17,4(sp)
    33cc:	dc000017 	ldw	r16,0(sp)
    33d0:	dec00304 	addi	sp,sp,12
    33d4:	f800283a 	ret
    33d8:	80800517 	ldw	r2,20(r16)
    33dc:	80000215 	stw	zero,8(r16)
    33e0:	0085c83a 	sub	r2,zero,r2
    33e4:	80800615 	stw	r2,24(r16)
    33e8:	283ff51e 	bne	r5,zero,33c0 <__swsetup_r+0x64>
    33ec:	2080200c 	andi	r2,r4,128
    33f0:	103ff326 	beq	r2,zero,33c0 <__swsetup_r+0x64>
    33f4:	00bfffc4 	movi	r2,-1
    33f8:	003ff206 	br	33c4 <__swsetup_r+0x68>
    33fc:	80800517 	ldw	r2,20(r16)
    3400:	80800215 	stw	r2,8(r16)
    3404:	003fed06 	br	33bc <__swsetup_r+0x60>
    3408:	1809883a 	mov	r4,r3
    340c:	00038e40 	call	38e4 <__sinit>
    3410:	003fde06 	br	338c <__swsetup_r+0x30>
    3414:	20c0a00c 	andi	r3,r4,640
    3418:	00808004 	movi	r2,512
    341c:	18bfe026 	beq	r3,r2,33a0 <__swsetup_r+0x44>
    3420:	8809883a 	mov	r4,r17
    3424:	800b883a 	mov	r5,r16
    3428:	00040fc0 	call	40fc <__smakebuf_r>
    342c:	8100030b 	ldhu	r4,12(r16)
    3430:	81400417 	ldw	r5,16(r16)
    3434:	003fda06 	br	33a0 <__swsetup_r+0x44>
    3438:	2080040c 	andi	r2,r4,16
    343c:	103fed26 	beq	r2,zero,33f4 <__swsetup_r+0x98>
    3440:	2080010c 	andi	r2,r4,4
    3444:	10001226 	beq	r2,zero,3490 <__swsetup_r+0x134>
    3448:	81400c17 	ldw	r5,48(r16)
    344c:	28000526 	beq	r5,zero,3464 <__swsetup_r+0x108>
    3450:	80801004 	addi	r2,r16,64
    3454:	28800226 	beq	r5,r2,3460 <__swsetup_r+0x104>
    3458:	8809883a 	mov	r4,r17
    345c:	0003c680 	call	3c68 <_free_r>
    3460:	80000c15 	stw	zero,48(r16)
    3464:	8080030b 	ldhu	r2,12(r16)
    3468:	81400417 	ldw	r5,16(r16)
    346c:	80000115 	stw	zero,4(r16)
    3470:	10bff6cc 	andi	r2,r2,65499
    3474:	8080030d 	sth	r2,12(r16)
    3478:	81400015 	stw	r5,0(r16)
    347c:	8080030b 	ldhu	r2,12(r16)
    3480:	10800214 	ori	r2,r2,8
    3484:	113fffcc 	andi	r4,r2,65535
    3488:	8080030d 	sth	r2,12(r16)
    348c:	003fc306 	br	339c <__swsetup_r+0x40>
    3490:	81400417 	ldw	r5,16(r16)
    3494:	003ff906 	br	347c <__swsetup_r+0x120>

00003498 <register_fini>:
    3498:	f800283a 	ret

0000349c <__call_exitprocs>:
    349c:	00800034 	movhi	r2,0
    34a0:	109ce604 	addi	r2,r2,29592
    34a4:	10800017 	ldw	r2,0(r2)
    34a8:	defff304 	addi	sp,sp,-52
    34ac:	df000b15 	stw	fp,44(sp)
    34b0:	d8800115 	stw	r2,4(sp)
    34b4:	00800034 	movhi	r2,0
    34b8:	10800004 	addi	r2,r2,0
    34bc:	1005003a 	cmpeq	r2,r2,zero
    34c0:	d8800215 	stw	r2,8(sp)
    34c4:	d8800117 	ldw	r2,4(sp)
    34c8:	dd400815 	stw	r21,32(sp)
    34cc:	dd000715 	stw	r20,28(sp)
    34d0:	10805204 	addi	r2,r2,328
    34d4:	dfc00c15 	stw	ra,48(sp)
    34d8:	ddc00a15 	stw	r23,40(sp)
    34dc:	dd800915 	stw	r22,36(sp)
    34e0:	dcc00615 	stw	r19,24(sp)
    34e4:	dc800515 	stw	r18,20(sp)
    34e8:	dc400415 	stw	r17,16(sp)
    34ec:	dc000315 	stw	r16,12(sp)
    34f0:	282b883a 	mov	r21,r5
    34f4:	2039883a 	mov	fp,r4
    34f8:	d8800015 	stw	r2,0(sp)
    34fc:	2829003a 	cmpeq	r20,r5,zero
    3500:	d8800117 	ldw	r2,4(sp)
    3504:	14405217 	ldw	r17,328(r2)
    3508:	88001026 	beq	r17,zero,354c <__call_exitprocs+0xb0>
    350c:	ddc00017 	ldw	r23,0(sp)
    3510:	88800117 	ldw	r2,4(r17)
    3514:	8c802204 	addi	r18,r17,136
    3518:	143fffc4 	addi	r16,r2,-1
    351c:	80000916 	blt	r16,zero,3544 <__call_exitprocs+0xa8>
    3520:	05bfffc4 	movi	r22,-1
    3524:	a000151e 	bne	r20,zero,357c <__call_exitprocs+0xe0>
    3528:	8409883a 	add	r4,r16,r16
    352c:	2105883a 	add	r2,r4,r4
    3530:	1485883a 	add	r2,r2,r18
    3534:	10c02017 	ldw	r3,128(r2)
    3538:	a8c01126 	beq	r21,r3,3580 <__call_exitprocs+0xe4>
    353c:	843fffc4 	addi	r16,r16,-1
    3540:	85bff81e 	bne	r16,r22,3524 <__call_exitprocs+0x88>
    3544:	d8800217 	ldw	r2,8(sp)
    3548:	10003126 	beq	r2,zero,3610 <__call_exitprocs+0x174>
    354c:	dfc00c17 	ldw	ra,48(sp)
    3550:	df000b17 	ldw	fp,44(sp)
    3554:	ddc00a17 	ldw	r23,40(sp)
    3558:	dd800917 	ldw	r22,36(sp)
    355c:	dd400817 	ldw	r21,32(sp)
    3560:	dd000717 	ldw	r20,28(sp)
    3564:	dcc00617 	ldw	r19,24(sp)
    3568:	dc800517 	ldw	r18,20(sp)
    356c:	dc400417 	ldw	r17,16(sp)
    3570:	dc000317 	ldw	r16,12(sp)
    3574:	dec00d04 	addi	sp,sp,52
    3578:	f800283a 	ret
    357c:	8409883a 	add	r4,r16,r16
    3580:	88c00117 	ldw	r3,4(r17)
    3584:	2105883a 	add	r2,r4,r4
    3588:	1445883a 	add	r2,r2,r17
    358c:	18ffffc4 	addi	r3,r3,-1
    3590:	11800217 	ldw	r6,8(r2)
    3594:	1c001526 	beq	r3,r16,35ec <__call_exitprocs+0x150>
    3598:	10000215 	stw	zero,8(r2)
    359c:	303fe726 	beq	r6,zero,353c <__call_exitprocs+0xa0>
    35a0:	00c00044 	movi	r3,1
    35a4:	1c06983a 	sll	r3,r3,r16
    35a8:	90804017 	ldw	r2,256(r18)
    35ac:	8cc00117 	ldw	r19,4(r17)
    35b0:	1884703a 	and	r2,r3,r2
    35b4:	10001426 	beq	r2,zero,3608 <__call_exitprocs+0x16c>
    35b8:	90804117 	ldw	r2,260(r18)
    35bc:	1884703a 	and	r2,r3,r2
    35c0:	10000c1e 	bne	r2,zero,35f4 <__call_exitprocs+0x158>
    35c4:	2105883a 	add	r2,r4,r4
    35c8:	1485883a 	add	r2,r2,r18
    35cc:	11400017 	ldw	r5,0(r2)
    35d0:	e009883a 	mov	r4,fp
    35d4:	303ee83a 	callr	r6
    35d8:	88800117 	ldw	r2,4(r17)
    35dc:	98bfc81e 	bne	r19,r2,3500 <__call_exitprocs+0x64>
    35e0:	b8800017 	ldw	r2,0(r23)
    35e4:	147fd526 	beq	r2,r17,353c <__call_exitprocs+0xa0>
    35e8:	003fc506 	br	3500 <__call_exitprocs+0x64>
    35ec:	8c000115 	stw	r16,4(r17)
    35f0:	003fea06 	br	359c <__call_exitprocs+0x100>
    35f4:	2105883a 	add	r2,r4,r4
    35f8:	1485883a 	add	r2,r2,r18
    35fc:	11000017 	ldw	r4,0(r2)
    3600:	303ee83a 	callr	r6
    3604:	003ff406 	br	35d8 <__call_exitprocs+0x13c>
    3608:	303ee83a 	callr	r6
    360c:	003ff206 	br	35d8 <__call_exitprocs+0x13c>
    3610:	88800117 	ldw	r2,4(r17)
    3614:	1000081e 	bne	r2,zero,3638 <__call_exitprocs+0x19c>
    3618:	89000017 	ldw	r4,0(r17)
    361c:	20000726 	beq	r4,zero,363c <__call_exitprocs+0x1a0>
    3620:	b9000015 	stw	r4,0(r23)
    3624:	8809883a 	mov	r4,r17
    3628:	00000000 	call	0 <__alt_mem_SDRAM>
    362c:	bc400017 	ldw	r17,0(r23)
    3630:	883fb71e 	bne	r17,zero,3510 <__call_exitprocs+0x74>
    3634:	003fc506 	br	354c <__call_exitprocs+0xb0>
    3638:	89000017 	ldw	r4,0(r17)
    363c:	882f883a 	mov	r23,r17
    3640:	2023883a 	mov	r17,r4
    3644:	883fb21e 	bne	r17,zero,3510 <__call_exitprocs+0x74>
    3648:	003fc006 	br	354c <__call_exitprocs+0xb0>

0000364c <_fflush_r>:
    364c:	defffb04 	addi	sp,sp,-20
    3650:	dcc00315 	stw	r19,12(sp)
    3654:	dc800215 	stw	r18,8(sp)
    3658:	dfc00415 	stw	ra,16(sp)
    365c:	dc400115 	stw	r17,4(sp)
    3660:	dc000015 	stw	r16,0(sp)
    3664:	2027883a 	mov	r19,r4
    3668:	2825883a 	mov	r18,r5
    366c:	20000226 	beq	r4,zero,3678 <_fflush_r+0x2c>
    3670:	20800e17 	ldw	r2,56(r4)
    3674:	10005626 	beq	r2,zero,37d0 <_fflush_r+0x184>
    3678:	9100030b 	ldhu	r4,12(r18)
    367c:	20ffffcc 	andi	r3,r4,65535
    3680:	18e0001c 	xori	r3,r3,32768
    3684:	18e00004 	addi	r3,r3,-32768
    3688:	1880020c 	andi	r2,r3,8
    368c:	1000261e 	bne	r2,zero,3728 <_fflush_r+0xdc>
    3690:	90c00117 	ldw	r3,4(r18)
    3694:	20820014 	ori	r2,r4,2048
    3698:	9080030d 	sth	r2,12(r18)
    369c:	1009883a 	mov	r4,r2
    36a0:	00c0400e 	bge	zero,r3,37a4 <_fflush_r+0x158>
    36a4:	92000a17 	ldw	r8,40(r18)
    36a8:	40004026 	beq	r8,zero,37ac <_fflush_r+0x160>
    36ac:	2084000c 	andi	r2,r4,4096
    36b0:	10005326 	beq	r2,zero,3800 <_fflush_r+0x1b4>
    36b4:	94001417 	ldw	r16,80(r18)
    36b8:	9080030b 	ldhu	r2,12(r18)
    36bc:	1080010c 	andi	r2,r2,4
    36c0:	1000481e 	bne	r2,zero,37e4 <_fflush_r+0x198>
    36c4:	91400717 	ldw	r5,28(r18)
    36c8:	9809883a 	mov	r4,r19
    36cc:	800d883a 	mov	r6,r16
    36d0:	000f883a 	mov	r7,zero
    36d4:	403ee83a 	callr	r8
    36d8:	8080261e 	bne	r16,r2,3774 <_fflush_r+0x128>
    36dc:	9080030b 	ldhu	r2,12(r18)
    36e0:	91000417 	ldw	r4,16(r18)
    36e4:	90000115 	stw	zero,4(r18)
    36e8:	10bdffcc 	andi	r2,r2,63487
    36ec:	10ffffcc 	andi	r3,r2,65535
    36f0:	18c4000c 	andi	r3,r3,4096
    36f4:	9080030d 	sth	r2,12(r18)
    36f8:	91000015 	stw	r4,0(r18)
    36fc:	18002b26 	beq	r3,zero,37ac <_fflush_r+0x160>
    3700:	0007883a 	mov	r3,zero
    3704:	1805883a 	mov	r2,r3
    3708:	94001415 	stw	r16,80(r18)
    370c:	dfc00417 	ldw	ra,16(sp)
    3710:	dcc00317 	ldw	r19,12(sp)
    3714:	dc800217 	ldw	r18,8(sp)
    3718:	dc400117 	ldw	r17,4(sp)
    371c:	dc000017 	ldw	r16,0(sp)
    3720:	dec00504 	addi	sp,sp,20
    3724:	f800283a 	ret
    3728:	94400417 	ldw	r17,16(r18)
    372c:	88001f26 	beq	r17,zero,37ac <_fflush_r+0x160>
    3730:	90800017 	ldw	r2,0(r18)
    3734:	18c000cc 	andi	r3,r3,3
    3738:	94400015 	stw	r17,0(r18)
    373c:	1461c83a 	sub	r16,r2,r17
    3740:	18002526 	beq	r3,zero,37d8 <_fflush_r+0x18c>
    3744:	0005883a 	mov	r2,zero
    3748:	90800215 	stw	r2,8(r18)
    374c:	0400170e 	bge	zero,r16,37ac <_fflush_r+0x160>
    3750:	90c00917 	ldw	r3,36(r18)
    3754:	91400717 	ldw	r5,28(r18)
    3758:	880d883a 	mov	r6,r17
    375c:	800f883a 	mov	r7,r16
    3760:	9809883a 	mov	r4,r19
    3764:	183ee83a 	callr	r3
    3768:	88a3883a 	add	r17,r17,r2
    376c:	80a1c83a 	sub	r16,r16,r2
    3770:	00bff616 	blt	zero,r2,374c <_fflush_r+0x100>
    3774:	9080030b 	ldhu	r2,12(r18)
    3778:	00ffffc4 	movi	r3,-1
    377c:	10801014 	ori	r2,r2,64
    3780:	9080030d 	sth	r2,12(r18)
    3784:	1805883a 	mov	r2,r3
    3788:	dfc00417 	ldw	ra,16(sp)
    378c:	dcc00317 	ldw	r19,12(sp)
    3790:	dc800217 	ldw	r18,8(sp)
    3794:	dc400117 	ldw	r17,4(sp)
    3798:	dc000017 	ldw	r16,0(sp)
    379c:	dec00504 	addi	sp,sp,20
    37a0:	f800283a 	ret
    37a4:	90800f17 	ldw	r2,60(r18)
    37a8:	00bfbe16 	blt	zero,r2,36a4 <_fflush_r+0x58>
    37ac:	0007883a 	mov	r3,zero
    37b0:	1805883a 	mov	r2,r3
    37b4:	dfc00417 	ldw	ra,16(sp)
    37b8:	dcc00317 	ldw	r19,12(sp)
    37bc:	dc800217 	ldw	r18,8(sp)
    37c0:	dc400117 	ldw	r17,4(sp)
    37c4:	dc000017 	ldw	r16,0(sp)
    37c8:	dec00504 	addi	sp,sp,20
    37cc:	f800283a 	ret
    37d0:	00038e40 	call	38e4 <__sinit>
    37d4:	003fa806 	br	3678 <_fflush_r+0x2c>
    37d8:	90800517 	ldw	r2,20(r18)
    37dc:	90800215 	stw	r2,8(r18)
    37e0:	003fda06 	br	374c <_fflush_r+0x100>
    37e4:	90800117 	ldw	r2,4(r18)
    37e8:	90c00c17 	ldw	r3,48(r18)
    37ec:	80a1c83a 	sub	r16,r16,r2
    37f0:	183fb426 	beq	r3,zero,36c4 <_fflush_r+0x78>
    37f4:	90800f17 	ldw	r2,60(r18)
    37f8:	80a1c83a 	sub	r16,r16,r2
    37fc:	003fb106 	br	36c4 <_fflush_r+0x78>
    3800:	91400717 	ldw	r5,28(r18)
    3804:	9809883a 	mov	r4,r19
    3808:	000d883a 	mov	r6,zero
    380c:	01c00044 	movi	r7,1
    3810:	403ee83a 	callr	r8
    3814:	1021883a 	mov	r16,r2
    3818:	00bfffc4 	movi	r2,-1
    381c:	80800226 	beq	r16,r2,3828 <_fflush_r+0x1dc>
    3820:	92000a17 	ldw	r8,40(r18)
    3824:	003fa406 	br	36b8 <_fflush_r+0x6c>
    3828:	98c00017 	ldw	r3,0(r19)
    382c:	00800744 	movi	r2,29
    3830:	18bfde26 	beq	r3,r2,37ac <_fflush_r+0x160>
    3834:	9080030b 	ldhu	r2,12(r18)
    3838:	8007883a 	mov	r3,r16
    383c:	10801014 	ori	r2,r2,64
    3840:	9080030d 	sth	r2,12(r18)
    3844:	003fcf06 	br	3784 <_fflush_r+0x138>

00003848 <fflush>:
    3848:	01400034 	movhi	r5,0
    384c:	294d9304 	addi	r5,r5,13900
    3850:	2007883a 	mov	r3,r4
    3854:	20000526 	beq	r4,zero,386c <fflush+0x24>
    3858:	00800034 	movhi	r2,0
    385c:	109ce504 	addi	r2,r2,29588
    3860:	11000017 	ldw	r4,0(r2)
    3864:	180b883a 	mov	r5,r3
    3868:	000364c1 	jmpi	364c <_fflush_r>
    386c:	00800034 	movhi	r2,0
    3870:	109ce604 	addi	r2,r2,29592
    3874:	11000017 	ldw	r4,0(r2)
    3878:	0003f7c1 	jmpi	3f7c <_fwalk_reent>

0000387c <std>:
    387c:	00800034 	movhi	r2,0
    3880:	1092b604 	addi	r2,r2,19160
    3884:	20800b15 	stw	r2,44(r4)
    3888:	00800034 	movhi	r2,0
    388c:	1092f104 	addi	r2,r2,19396
    3890:	20800815 	stw	r2,32(r4)
    3894:	00c00034 	movhi	r3,0
    3898:	18d2d204 	addi	r3,r3,19272
    389c:	00800034 	movhi	r2,0
    38a0:	1092b804 	addi	r2,r2,19168
    38a4:	2140030d 	sth	r5,12(r4)
    38a8:	2180038d 	sth	r6,14(r4)
    38ac:	20c00915 	stw	r3,36(r4)
    38b0:	20800a15 	stw	r2,40(r4)
    38b4:	20000015 	stw	zero,0(r4)
    38b8:	20000115 	stw	zero,4(r4)
    38bc:	20000215 	stw	zero,8(r4)
    38c0:	20000415 	stw	zero,16(r4)
    38c4:	20000515 	stw	zero,20(r4)
    38c8:	20000615 	stw	zero,24(r4)
    38cc:	21000715 	stw	r4,28(r4)
    38d0:	f800283a 	ret

000038d4 <__sfp_lock_acquire>:
    38d4:	f800283a 	ret

000038d8 <__sfp_lock_release>:
    38d8:	f800283a 	ret

000038dc <__sinit_lock_acquire>:
    38dc:	f800283a 	ret

000038e0 <__sinit_lock_release>:
    38e0:	f800283a 	ret

000038e4 <__sinit>:
    38e4:	20800e17 	ldw	r2,56(r4)
    38e8:	defffd04 	addi	sp,sp,-12
    38ec:	dc400115 	stw	r17,4(sp)
    38f0:	dc000015 	stw	r16,0(sp)
    38f4:	dfc00215 	stw	ra,8(sp)
    38f8:	04400044 	movi	r17,1
    38fc:	01400104 	movi	r5,4
    3900:	000d883a 	mov	r6,zero
    3904:	2021883a 	mov	r16,r4
    3908:	2200bb04 	addi	r8,r4,748
    390c:	200f883a 	mov	r7,r4
    3910:	10000526 	beq	r2,zero,3928 <__sinit+0x44>
    3914:	dfc00217 	ldw	ra,8(sp)
    3918:	dc400117 	ldw	r17,4(sp)
    391c:	dc000017 	ldw	r16,0(sp)
    3920:	dec00304 	addi	sp,sp,12
    3924:	f800283a 	ret
    3928:	21000117 	ldw	r4,4(r4)
    392c:	00800034 	movhi	r2,0
    3930:	108e7204 	addi	r2,r2,14792
    3934:	00c000c4 	movi	r3,3
    3938:	80800f15 	stw	r2,60(r16)
    393c:	80c0b915 	stw	r3,740(r16)
    3940:	8200ba15 	stw	r8,744(r16)
    3944:	84400e15 	stw	r17,56(r16)
    3948:	8000b815 	stw	zero,736(r16)
    394c:	000387c0 	call	387c <std>
    3950:	81000217 	ldw	r4,8(r16)
    3954:	880d883a 	mov	r6,r17
    3958:	800f883a 	mov	r7,r16
    395c:	01400284 	movi	r5,10
    3960:	000387c0 	call	387c <std>
    3964:	81000317 	ldw	r4,12(r16)
    3968:	800f883a 	mov	r7,r16
    396c:	01400484 	movi	r5,18
    3970:	01800084 	movi	r6,2
    3974:	dfc00217 	ldw	ra,8(sp)
    3978:	dc400117 	ldw	r17,4(sp)
    397c:	dc000017 	ldw	r16,0(sp)
    3980:	dec00304 	addi	sp,sp,12
    3984:	000387c1 	jmpi	387c <std>

00003988 <__fp_lock>:
    3988:	0005883a 	mov	r2,zero
    398c:	f800283a 	ret

00003990 <__fp_unlock>:
    3990:	0005883a 	mov	r2,zero
    3994:	f800283a 	ret

00003998 <__fp_unlock_all>:
    3998:	00800034 	movhi	r2,0
    399c:	109ce504 	addi	r2,r2,29588
    39a0:	11000017 	ldw	r4,0(r2)
    39a4:	01400034 	movhi	r5,0
    39a8:	294e6404 	addi	r5,r5,14736
    39ac:	00040441 	jmpi	4044 <_fwalk>

000039b0 <__fp_lock_all>:
    39b0:	00800034 	movhi	r2,0
    39b4:	109ce504 	addi	r2,r2,29588
    39b8:	11000017 	ldw	r4,0(r2)
    39bc:	01400034 	movhi	r5,0
    39c0:	294e6204 	addi	r5,r5,14728
    39c4:	00040441 	jmpi	4044 <_fwalk>

000039c8 <_cleanup_r>:
    39c8:	01400034 	movhi	r5,0
    39cc:	29538704 	addi	r5,r5,19996
    39d0:	00040441 	jmpi	4044 <_fwalk>

000039d4 <_cleanup>:
    39d4:	00800034 	movhi	r2,0
    39d8:	109ce604 	addi	r2,r2,29592
    39dc:	11000017 	ldw	r4,0(r2)
    39e0:	00039c81 	jmpi	39c8 <_cleanup_r>

000039e4 <__sfmoreglue>:
    39e4:	defffc04 	addi	sp,sp,-16
    39e8:	dc400115 	stw	r17,4(sp)
    39ec:	2c401724 	muli	r17,r5,92
    39f0:	dc800215 	stw	r18,8(sp)
    39f4:	2825883a 	mov	r18,r5
    39f8:	89400304 	addi	r5,r17,12
    39fc:	dc000015 	stw	r16,0(sp)
    3a00:	dfc00315 	stw	ra,12(sp)
    3a04:	00042900 	call	4290 <_malloc_r>
    3a08:	0021883a 	mov	r16,zero
    3a0c:	880d883a 	mov	r6,r17
    3a10:	000b883a 	mov	r5,zero
    3a14:	10000626 	beq	r2,zero,3a30 <__sfmoreglue+0x4c>
    3a18:	11000304 	addi	r4,r2,12
    3a1c:	14800115 	stw	r18,4(r2)
    3a20:	10000015 	stw	zero,0(r2)
    3a24:	11000215 	stw	r4,8(r2)
    3a28:	1021883a 	mov	r16,r2
    3a2c:	00049d00 	call	49d0 <memset>
    3a30:	8005883a 	mov	r2,r16
    3a34:	dfc00317 	ldw	ra,12(sp)
    3a38:	dc800217 	ldw	r18,8(sp)
    3a3c:	dc400117 	ldw	r17,4(sp)
    3a40:	dc000017 	ldw	r16,0(sp)
    3a44:	dec00404 	addi	sp,sp,16
    3a48:	f800283a 	ret

00003a4c <__sfp>:
    3a4c:	defffd04 	addi	sp,sp,-12
    3a50:	00800034 	movhi	r2,0
    3a54:	109ce604 	addi	r2,r2,29592
    3a58:	dc000015 	stw	r16,0(sp)
    3a5c:	14000017 	ldw	r16,0(r2)
    3a60:	dc400115 	stw	r17,4(sp)
    3a64:	dfc00215 	stw	ra,8(sp)
    3a68:	80800e17 	ldw	r2,56(r16)
    3a6c:	2023883a 	mov	r17,r4
    3a70:	10002626 	beq	r2,zero,3b0c <__sfp+0xc0>
    3a74:	8400b804 	addi	r16,r16,736
    3a78:	80800117 	ldw	r2,4(r16)
    3a7c:	81000217 	ldw	r4,8(r16)
    3a80:	10ffffc4 	addi	r3,r2,-1
    3a84:	18000916 	blt	r3,zero,3aac <__sfp+0x60>
    3a88:	2080030f 	ldh	r2,12(r4)
    3a8c:	10000b26 	beq	r2,zero,3abc <__sfp+0x70>
    3a90:	017fffc4 	movi	r5,-1
    3a94:	00000206 	br	3aa0 <__sfp+0x54>
    3a98:	2080030f 	ldh	r2,12(r4)
    3a9c:	10000726 	beq	r2,zero,3abc <__sfp+0x70>
    3aa0:	18ffffc4 	addi	r3,r3,-1
    3aa4:	21001704 	addi	r4,r4,92
    3aa8:	197ffb1e 	bne	r3,r5,3a98 <__sfp+0x4c>
    3aac:	80800017 	ldw	r2,0(r16)
    3ab0:	10001926 	beq	r2,zero,3b18 <__sfp+0xcc>
    3ab4:	1021883a 	mov	r16,r2
    3ab8:	003fef06 	br	3a78 <__sfp+0x2c>
    3abc:	00bfffc4 	movi	r2,-1
    3ac0:	00c00044 	movi	r3,1
    3ac4:	2080038d 	sth	r2,14(r4)
    3ac8:	20c0030d 	sth	r3,12(r4)
    3acc:	20000015 	stw	zero,0(r4)
    3ad0:	20000215 	stw	zero,8(r4)
    3ad4:	20000115 	stw	zero,4(r4)
    3ad8:	20000415 	stw	zero,16(r4)
    3adc:	20000515 	stw	zero,20(r4)
    3ae0:	20000615 	stw	zero,24(r4)
    3ae4:	20000c15 	stw	zero,48(r4)
    3ae8:	20000d15 	stw	zero,52(r4)
    3aec:	20001115 	stw	zero,68(r4)
    3af0:	20001215 	stw	zero,72(r4)
    3af4:	2005883a 	mov	r2,r4
    3af8:	dfc00217 	ldw	ra,8(sp)
    3afc:	dc400117 	ldw	r17,4(sp)
    3b00:	dc000017 	ldw	r16,0(sp)
    3b04:	dec00304 	addi	sp,sp,12
    3b08:	f800283a 	ret
    3b0c:	8009883a 	mov	r4,r16
    3b10:	00038e40 	call	38e4 <__sinit>
    3b14:	003fd706 	br	3a74 <__sfp+0x28>
    3b18:	8809883a 	mov	r4,r17
    3b1c:	01400104 	movi	r5,4
    3b20:	00039e40 	call	39e4 <__sfmoreglue>
    3b24:	80800015 	stw	r2,0(r16)
    3b28:	103fe21e 	bne	r2,zero,3ab4 <__sfp+0x68>
    3b2c:	00800304 	movi	r2,12
    3b30:	0009883a 	mov	r4,zero
    3b34:	88800015 	stw	r2,0(r17)
    3b38:	003fee06 	br	3af4 <__sfp+0xa8>

00003b3c <_malloc_trim_r>:
    3b3c:	defffb04 	addi	sp,sp,-20
    3b40:	dcc00315 	stw	r19,12(sp)
    3b44:	04c00034 	movhi	r19,0
    3b48:	9cdbda04 	addi	r19,r19,28520
    3b4c:	dc800215 	stw	r18,8(sp)
    3b50:	dc400115 	stw	r17,4(sp)
    3b54:	dc000015 	stw	r16,0(sp)
    3b58:	2823883a 	mov	r17,r5
    3b5c:	2025883a 	mov	r18,r4
    3b60:	dfc00415 	stw	ra,16(sp)
    3b64:	00051b40 	call	51b4 <__malloc_lock>
    3b68:	98800217 	ldw	r2,8(r19)
    3b6c:	9009883a 	mov	r4,r18
    3b70:	000b883a 	mov	r5,zero
    3b74:	10c00117 	ldw	r3,4(r2)
    3b78:	00bfff04 	movi	r2,-4
    3b7c:	18a0703a 	and	r16,r3,r2
    3b80:	8463c83a 	sub	r17,r16,r17
    3b84:	8c43fbc4 	addi	r17,r17,4079
    3b88:	8822d33a 	srli	r17,r17,12
    3b8c:	0083ffc4 	movi	r2,4095
    3b90:	8c7fffc4 	addi	r17,r17,-1
    3b94:	8822933a 	slli	r17,r17,12
    3b98:	1440060e 	bge	r2,r17,3bb4 <_malloc_trim_r+0x78>
    3b9c:	0004a680 	call	4a68 <_sbrk_r>
    3ba0:	98c00217 	ldw	r3,8(r19)
    3ba4:	9009883a 	mov	r4,r18
    3ba8:	044bc83a 	sub	r5,zero,r17
    3bac:	80c7883a 	add	r3,r16,r3
    3bb0:	10c00926 	beq	r2,r3,3bd8 <_malloc_trim_r+0x9c>
    3bb4:	00051b80 	call	51b8 <__malloc_unlock>
    3bb8:	0005883a 	mov	r2,zero
    3bbc:	dfc00417 	ldw	ra,16(sp)
    3bc0:	dcc00317 	ldw	r19,12(sp)
    3bc4:	dc800217 	ldw	r18,8(sp)
    3bc8:	dc400117 	ldw	r17,4(sp)
    3bcc:	dc000017 	ldw	r16,0(sp)
    3bd0:	dec00504 	addi	sp,sp,20
    3bd4:	f800283a 	ret
    3bd8:	9009883a 	mov	r4,r18
    3bdc:	0004a680 	call	4a68 <_sbrk_r>
    3be0:	844dc83a 	sub	r6,r16,r17
    3be4:	00ffffc4 	movi	r3,-1
    3be8:	9009883a 	mov	r4,r18
    3bec:	000b883a 	mov	r5,zero
    3bf0:	01c00074 	movhi	r7,1
    3bf4:	39e42b04 	addi	r7,r7,-28500
    3bf8:	31800054 	ori	r6,r6,1
    3bfc:	10c00926 	beq	r2,r3,3c24 <_malloc_trim_r+0xe8>
    3c00:	38800017 	ldw	r2,0(r7)
    3c04:	98c00217 	ldw	r3,8(r19)
    3c08:	9009883a 	mov	r4,r18
    3c0c:	1445c83a 	sub	r2,r2,r17
    3c10:	38800015 	stw	r2,0(r7)
    3c14:	19800115 	stw	r6,4(r3)
    3c18:	00051b80 	call	51b8 <__malloc_unlock>
    3c1c:	00800044 	movi	r2,1
    3c20:	003fe606 	br	3bbc <_malloc_trim_r+0x80>
    3c24:	0004a680 	call	4a68 <_sbrk_r>
    3c28:	99800217 	ldw	r6,8(r19)
    3c2c:	100f883a 	mov	r7,r2
    3c30:	9009883a 	mov	r4,r18
    3c34:	1187c83a 	sub	r3,r2,r6
    3c38:	008003c4 	movi	r2,15
    3c3c:	19400054 	ori	r5,r3,1
    3c40:	10ffdc0e 	bge	r2,r3,3bb4 <_malloc_trim_r+0x78>
    3c44:	00800034 	movhi	r2,0
    3c48:	109ce804 	addi	r2,r2,29600
    3c4c:	10c00017 	ldw	r3,0(r2)
    3c50:	00800074 	movhi	r2,1
    3c54:	10a42b04 	addi	r2,r2,-28500
    3c58:	31400115 	stw	r5,4(r6)
    3c5c:	38c7c83a 	sub	r3,r7,r3
    3c60:	10c00015 	stw	r3,0(r2)
    3c64:	003fd306 	br	3bb4 <_malloc_trim_r+0x78>

00003c68 <_free_r>:
    3c68:	defffd04 	addi	sp,sp,-12
    3c6c:	dc400115 	stw	r17,4(sp)
    3c70:	dc000015 	stw	r16,0(sp)
    3c74:	dfc00215 	stw	ra,8(sp)
    3c78:	2821883a 	mov	r16,r5
    3c7c:	2023883a 	mov	r17,r4
    3c80:	28005a26 	beq	r5,zero,3dec <_free_r+0x184>
    3c84:	00051b40 	call	51b4 <__malloc_lock>
    3c88:	823ffe04 	addi	r8,r16,-8
    3c8c:	41400117 	ldw	r5,4(r8)
    3c90:	00bfff84 	movi	r2,-2
    3c94:	02800034 	movhi	r10,0
    3c98:	529bda04 	addi	r10,r10,28520
    3c9c:	288e703a 	and	r7,r5,r2
    3ca0:	41cd883a 	add	r6,r8,r7
    3ca4:	30c00117 	ldw	r3,4(r6)
    3ca8:	51000217 	ldw	r4,8(r10)
    3cac:	00bfff04 	movi	r2,-4
    3cb0:	1892703a 	and	r9,r3,r2
    3cb4:	5017883a 	mov	r11,r10
    3cb8:	31006726 	beq	r6,r4,3e58 <_free_r+0x1f0>
    3cbc:	2880004c 	andi	r2,r5,1
    3cc0:	1005003a 	cmpeq	r2,r2,zero
    3cc4:	32400115 	stw	r9,4(r6)
    3cc8:	10001a1e 	bne	r2,zero,3d34 <_free_r+0xcc>
    3ccc:	000b883a 	mov	r5,zero
    3cd0:	3247883a 	add	r3,r6,r9
    3cd4:	18800117 	ldw	r2,4(r3)
    3cd8:	1080004c 	andi	r2,r2,1
    3cdc:	1000231e 	bne	r2,zero,3d6c <_free_r+0x104>
    3ce0:	280ac03a 	cmpne	r5,r5,zero
    3ce4:	3a4f883a 	add	r7,r7,r9
    3ce8:	2800451e 	bne	r5,zero,3e00 <_free_r+0x198>
    3cec:	31000217 	ldw	r4,8(r6)
    3cf0:	00800034 	movhi	r2,0
    3cf4:	109bdc04 	addi	r2,r2,28528
    3cf8:	20807b26 	beq	r4,r2,3ee8 <_free_r+0x280>
    3cfc:	30800317 	ldw	r2,12(r6)
    3d00:	3a07883a 	add	r3,r7,r8
    3d04:	19c00015 	stw	r7,0(r3)
    3d08:	11000215 	stw	r4,8(r2)
    3d0c:	20800315 	stw	r2,12(r4)
    3d10:	38800054 	ori	r2,r7,1
    3d14:	40800115 	stw	r2,4(r8)
    3d18:	28001a26 	beq	r5,zero,3d84 <_free_r+0x11c>
    3d1c:	8809883a 	mov	r4,r17
    3d20:	dfc00217 	ldw	ra,8(sp)
    3d24:	dc400117 	ldw	r17,4(sp)
    3d28:	dc000017 	ldw	r16,0(sp)
    3d2c:	dec00304 	addi	sp,sp,12
    3d30:	00051b81 	jmpi	51b8 <__malloc_unlock>
    3d34:	80bffe17 	ldw	r2,-8(r16)
    3d38:	50c00204 	addi	r3,r10,8
    3d3c:	4091c83a 	sub	r8,r8,r2
    3d40:	41000217 	ldw	r4,8(r8)
    3d44:	388f883a 	add	r7,r7,r2
    3d48:	20c06126 	beq	r4,r3,3ed0 <_free_r+0x268>
    3d4c:	40800317 	ldw	r2,12(r8)
    3d50:	3247883a 	add	r3,r6,r9
    3d54:	000b883a 	mov	r5,zero
    3d58:	11000215 	stw	r4,8(r2)
    3d5c:	20800315 	stw	r2,12(r4)
    3d60:	18800117 	ldw	r2,4(r3)
    3d64:	1080004c 	andi	r2,r2,1
    3d68:	103fdd26 	beq	r2,zero,3ce0 <_free_r+0x78>
    3d6c:	38800054 	ori	r2,r7,1
    3d70:	3a07883a 	add	r3,r7,r8
    3d74:	280ac03a 	cmpne	r5,r5,zero
    3d78:	40800115 	stw	r2,4(r8)
    3d7c:	19c00015 	stw	r7,0(r3)
    3d80:	283fe61e 	bne	r5,zero,3d1c <_free_r+0xb4>
    3d84:	00807fc4 	movi	r2,511
    3d88:	11c01f2e 	bgeu	r2,r7,3e08 <_free_r+0x1a0>
    3d8c:	3806d27a 	srli	r3,r7,9
    3d90:	1800481e 	bne	r3,zero,3eb4 <_free_r+0x24c>
    3d94:	3804d0fa 	srli	r2,r7,3
    3d98:	100690fa 	slli	r3,r2,3
    3d9c:	1acd883a 	add	r6,r3,r11
    3da0:	31400217 	ldw	r5,8(r6)
    3da4:	31405926 	beq	r6,r5,3f0c <_free_r+0x2a4>
    3da8:	28800117 	ldw	r2,4(r5)
    3dac:	00ffff04 	movi	r3,-4
    3db0:	10c4703a 	and	r2,r2,r3
    3db4:	3880022e 	bgeu	r7,r2,3dc0 <_free_r+0x158>
    3db8:	29400217 	ldw	r5,8(r5)
    3dbc:	317ffa1e 	bne	r6,r5,3da8 <_free_r+0x140>
    3dc0:	29800317 	ldw	r6,12(r5)
    3dc4:	41800315 	stw	r6,12(r8)
    3dc8:	41400215 	stw	r5,8(r8)
    3dcc:	8809883a 	mov	r4,r17
    3dd0:	2a000315 	stw	r8,12(r5)
    3dd4:	32000215 	stw	r8,8(r6)
    3dd8:	dfc00217 	ldw	ra,8(sp)
    3ddc:	dc400117 	ldw	r17,4(sp)
    3de0:	dc000017 	ldw	r16,0(sp)
    3de4:	dec00304 	addi	sp,sp,12
    3de8:	00051b81 	jmpi	51b8 <__malloc_unlock>
    3dec:	dfc00217 	ldw	ra,8(sp)
    3df0:	dc400117 	ldw	r17,4(sp)
    3df4:	dc000017 	ldw	r16,0(sp)
    3df8:	dec00304 	addi	sp,sp,12
    3dfc:	f800283a 	ret
    3e00:	31000217 	ldw	r4,8(r6)
    3e04:	003fbd06 	br	3cfc <_free_r+0x94>
    3e08:	3806d0fa 	srli	r3,r7,3
    3e0c:	00800044 	movi	r2,1
    3e10:	51400117 	ldw	r5,4(r10)
    3e14:	180890fa 	slli	r4,r3,3
    3e18:	1807d0ba 	srai	r3,r3,2
    3e1c:	22c9883a 	add	r4,r4,r11
    3e20:	21800217 	ldw	r6,8(r4)
    3e24:	10c4983a 	sll	r2,r2,r3
    3e28:	41000315 	stw	r4,12(r8)
    3e2c:	41800215 	stw	r6,8(r8)
    3e30:	288ab03a 	or	r5,r5,r2
    3e34:	22000215 	stw	r8,8(r4)
    3e38:	8809883a 	mov	r4,r17
    3e3c:	51400115 	stw	r5,4(r10)
    3e40:	32000315 	stw	r8,12(r6)
    3e44:	dfc00217 	ldw	ra,8(sp)
    3e48:	dc400117 	ldw	r17,4(sp)
    3e4c:	dc000017 	ldw	r16,0(sp)
    3e50:	dec00304 	addi	sp,sp,12
    3e54:	00051b81 	jmpi	51b8 <__malloc_unlock>
    3e58:	2880004c 	andi	r2,r5,1
    3e5c:	3a4d883a 	add	r6,r7,r9
    3e60:	1000071e 	bne	r2,zero,3e80 <_free_r+0x218>
    3e64:	80bffe17 	ldw	r2,-8(r16)
    3e68:	4091c83a 	sub	r8,r8,r2
    3e6c:	41000317 	ldw	r4,12(r8)
    3e70:	40c00217 	ldw	r3,8(r8)
    3e74:	308d883a 	add	r6,r6,r2
    3e78:	20c00215 	stw	r3,8(r4)
    3e7c:	19000315 	stw	r4,12(r3)
    3e80:	00800034 	movhi	r2,0
    3e84:	109ce704 	addi	r2,r2,29596
    3e88:	11000017 	ldw	r4,0(r2)
    3e8c:	30c00054 	ori	r3,r6,1
    3e90:	52000215 	stw	r8,8(r10)
    3e94:	40c00115 	stw	r3,4(r8)
    3e98:	313fa036 	bltu	r6,r4,3d1c <_free_r+0xb4>
    3e9c:	00800074 	movhi	r2,1
    3ea0:	10a42804 	addi	r2,r2,-28512
    3ea4:	11400017 	ldw	r5,0(r2)
    3ea8:	8809883a 	mov	r4,r17
    3eac:	0003b3c0 	call	3b3c <_malloc_trim_r>
    3eb0:	003f9a06 	br	3d1c <_free_r+0xb4>
    3eb4:	00800104 	movi	r2,4
    3eb8:	10c0072e 	bgeu	r2,r3,3ed8 <_free_r+0x270>
    3ebc:	00800504 	movi	r2,20
    3ec0:	10c01936 	bltu	r2,r3,3f28 <_free_r+0x2c0>
    3ec4:	188016c4 	addi	r2,r3,91
    3ec8:	100690fa 	slli	r3,r2,3
    3ecc:	003fb306 	br	3d9c <_free_r+0x134>
    3ed0:	01400044 	movi	r5,1
    3ed4:	003f7e06 	br	3cd0 <_free_r+0x68>
    3ed8:	3804d1ba 	srli	r2,r7,6
    3edc:	10800e04 	addi	r2,r2,56
    3ee0:	100690fa 	slli	r3,r2,3
    3ee4:	003fad06 	br	3d9c <_free_r+0x134>
    3ee8:	22000315 	stw	r8,12(r4)
    3eec:	22000215 	stw	r8,8(r4)
    3ef0:	3a05883a 	add	r2,r7,r8
    3ef4:	38c00054 	ori	r3,r7,1
    3ef8:	11c00015 	stw	r7,0(r2)
    3efc:	41000215 	stw	r4,8(r8)
    3f00:	40c00115 	stw	r3,4(r8)
    3f04:	41000315 	stw	r4,12(r8)
    3f08:	003f8406 	br	3d1c <_free_r+0xb4>
    3f0c:	1005d0ba 	srai	r2,r2,2
    3f10:	00c00044 	movi	r3,1
    3f14:	51000117 	ldw	r4,4(r10)
    3f18:	1886983a 	sll	r3,r3,r2
    3f1c:	20c8b03a 	or	r4,r4,r3
    3f20:	51000115 	stw	r4,4(r10)
    3f24:	003fa706 	br	3dc4 <_free_r+0x15c>
    3f28:	00801504 	movi	r2,84
    3f2c:	10c00436 	bltu	r2,r3,3f40 <_free_r+0x2d8>
    3f30:	3804d33a 	srli	r2,r7,12
    3f34:	10801b84 	addi	r2,r2,110
    3f38:	100690fa 	slli	r3,r2,3
    3f3c:	003f9706 	br	3d9c <_free_r+0x134>
    3f40:	00805504 	movi	r2,340
    3f44:	10c00436 	bltu	r2,r3,3f58 <_free_r+0x2f0>
    3f48:	3804d3fa 	srli	r2,r7,15
    3f4c:	10801dc4 	addi	r2,r2,119
    3f50:	100690fa 	slli	r3,r2,3
    3f54:	003f9106 	br	3d9c <_free_r+0x134>
    3f58:	00815504 	movi	r2,1364
    3f5c:	10c0032e 	bgeu	r2,r3,3f6c <_free_r+0x304>
    3f60:	00801f84 	movi	r2,126
    3f64:	00c0fc04 	movi	r3,1008
    3f68:	003f8c06 	br	3d9c <_free_r+0x134>
    3f6c:	3804d4ba 	srli	r2,r7,18
    3f70:	10801f04 	addi	r2,r2,124
    3f74:	100690fa 	slli	r3,r2,3
    3f78:	003f8806 	br	3d9c <_free_r+0x134>

00003f7c <_fwalk_reent>:
    3f7c:	defff704 	addi	sp,sp,-36
    3f80:	dcc00315 	stw	r19,12(sp)
    3f84:	24c0b804 	addi	r19,r4,736
    3f88:	dd800615 	stw	r22,24(sp)
    3f8c:	dd400515 	stw	r21,20(sp)
    3f90:	dfc00815 	stw	ra,32(sp)
    3f94:	ddc00715 	stw	r23,28(sp)
    3f98:	dd000415 	stw	r20,16(sp)
    3f9c:	dc800215 	stw	r18,8(sp)
    3fa0:	dc400115 	stw	r17,4(sp)
    3fa4:	dc000015 	stw	r16,0(sp)
    3fa8:	202b883a 	mov	r21,r4
    3fac:	282d883a 	mov	r22,r5
    3fb0:	00038d40 	call	38d4 <__sfp_lock_acquire>
    3fb4:	98002126 	beq	r19,zero,403c <_fwalk_reent+0xc0>
    3fb8:	002f883a 	mov	r23,zero
    3fbc:	9c800117 	ldw	r18,4(r19)
    3fc0:	9c000217 	ldw	r16,8(r19)
    3fc4:	90bfffc4 	addi	r2,r18,-1
    3fc8:	10000d16 	blt	r2,zero,4000 <_fwalk_reent+0x84>
    3fcc:	0023883a 	mov	r17,zero
    3fd0:	053fffc4 	movi	r20,-1
    3fd4:	8080030f 	ldh	r2,12(r16)
    3fd8:	8c400044 	addi	r17,r17,1
    3fdc:	10000626 	beq	r2,zero,3ff8 <_fwalk_reent+0x7c>
    3fe0:	8080038f 	ldh	r2,14(r16)
    3fe4:	800b883a 	mov	r5,r16
    3fe8:	a809883a 	mov	r4,r21
    3fec:	15000226 	beq	r2,r20,3ff8 <_fwalk_reent+0x7c>
    3ff0:	b03ee83a 	callr	r22
    3ff4:	b8aeb03a 	or	r23,r23,r2
    3ff8:	84001704 	addi	r16,r16,92
    3ffc:	947ff51e 	bne	r18,r17,3fd4 <_fwalk_reent+0x58>
    4000:	9cc00017 	ldw	r19,0(r19)
    4004:	983fed1e 	bne	r19,zero,3fbc <_fwalk_reent+0x40>
    4008:	00038d80 	call	38d8 <__sfp_lock_release>
    400c:	b805883a 	mov	r2,r23
    4010:	dfc00817 	ldw	ra,32(sp)
    4014:	ddc00717 	ldw	r23,28(sp)
    4018:	dd800617 	ldw	r22,24(sp)
    401c:	dd400517 	ldw	r21,20(sp)
    4020:	dd000417 	ldw	r20,16(sp)
    4024:	dcc00317 	ldw	r19,12(sp)
    4028:	dc800217 	ldw	r18,8(sp)
    402c:	dc400117 	ldw	r17,4(sp)
    4030:	dc000017 	ldw	r16,0(sp)
    4034:	dec00904 	addi	sp,sp,36
    4038:	f800283a 	ret
    403c:	002f883a 	mov	r23,zero
    4040:	003ff106 	br	4008 <_fwalk_reent+0x8c>

00004044 <_fwalk>:
    4044:	defff804 	addi	sp,sp,-32
    4048:	dcc00315 	stw	r19,12(sp)
    404c:	24c0b804 	addi	r19,r4,736
    4050:	dd400515 	stw	r21,20(sp)
    4054:	dfc00715 	stw	ra,28(sp)
    4058:	dd800615 	stw	r22,24(sp)
    405c:	dd000415 	stw	r20,16(sp)
    4060:	dc800215 	stw	r18,8(sp)
    4064:	dc400115 	stw	r17,4(sp)
    4068:	dc000015 	stw	r16,0(sp)
    406c:	282b883a 	mov	r21,r5
    4070:	00038d40 	call	38d4 <__sfp_lock_acquire>
    4074:	98001f26 	beq	r19,zero,40f4 <_fwalk+0xb0>
    4078:	002d883a 	mov	r22,zero
    407c:	9c800117 	ldw	r18,4(r19)
    4080:	9c000217 	ldw	r16,8(r19)
    4084:	90bfffc4 	addi	r2,r18,-1
    4088:	10000c16 	blt	r2,zero,40bc <_fwalk+0x78>
    408c:	0023883a 	mov	r17,zero
    4090:	053fffc4 	movi	r20,-1
    4094:	8080030f 	ldh	r2,12(r16)
    4098:	8c400044 	addi	r17,r17,1
    409c:	10000526 	beq	r2,zero,40b4 <_fwalk+0x70>
    40a0:	8080038f 	ldh	r2,14(r16)
    40a4:	8009883a 	mov	r4,r16
    40a8:	15000226 	beq	r2,r20,40b4 <_fwalk+0x70>
    40ac:	a83ee83a 	callr	r21
    40b0:	b0acb03a 	or	r22,r22,r2
    40b4:	84001704 	addi	r16,r16,92
    40b8:	947ff61e 	bne	r18,r17,4094 <_fwalk+0x50>
    40bc:	9cc00017 	ldw	r19,0(r19)
    40c0:	983fee1e 	bne	r19,zero,407c <_fwalk+0x38>
    40c4:	00038d80 	call	38d8 <__sfp_lock_release>
    40c8:	b005883a 	mov	r2,r22
    40cc:	dfc00717 	ldw	ra,28(sp)
    40d0:	dd800617 	ldw	r22,24(sp)
    40d4:	dd400517 	ldw	r21,20(sp)
    40d8:	dd000417 	ldw	r20,16(sp)
    40dc:	dcc00317 	ldw	r19,12(sp)
    40e0:	dc800217 	ldw	r18,8(sp)
    40e4:	dc400117 	ldw	r17,4(sp)
    40e8:	dc000017 	ldw	r16,0(sp)
    40ec:	dec00804 	addi	sp,sp,32
    40f0:	f800283a 	ret
    40f4:	002d883a 	mov	r22,zero
    40f8:	003ff206 	br	40c4 <_fwalk+0x80>

000040fc <__smakebuf_r>:
    40fc:	2880030b 	ldhu	r2,12(r5)
    4100:	deffed04 	addi	sp,sp,-76
    4104:	dc401015 	stw	r17,64(sp)
    4108:	1080008c 	andi	r2,r2,2
    410c:	dc000f15 	stw	r16,60(sp)
    4110:	dfc01215 	stw	ra,72(sp)
    4114:	dc801115 	stw	r18,68(sp)
    4118:	2821883a 	mov	r16,r5
    411c:	2023883a 	mov	r17,r4
    4120:	10000b26 	beq	r2,zero,4150 <__smakebuf_r+0x54>
    4124:	28c010c4 	addi	r3,r5,67
    4128:	00800044 	movi	r2,1
    412c:	28800515 	stw	r2,20(r5)
    4130:	28c00415 	stw	r3,16(r5)
    4134:	28c00015 	stw	r3,0(r5)
    4138:	dfc01217 	ldw	ra,72(sp)
    413c:	dc801117 	ldw	r18,68(sp)
    4140:	dc401017 	ldw	r17,64(sp)
    4144:	dc000f17 	ldw	r16,60(sp)
    4148:	dec01304 	addi	sp,sp,76
    414c:	f800283a 	ret
    4150:	2940038f 	ldh	r5,14(r5)
    4154:	28002116 	blt	r5,zero,41dc <__smakebuf_r+0xe0>
    4158:	d80d883a 	mov	r6,sp
    415c:	0004e300 	call	4e30 <_fstat_r>
    4160:	10001e16 	blt	r2,zero,41dc <__smakebuf_r+0xe0>
    4164:	d8800117 	ldw	r2,4(sp)
    4168:	00e00014 	movui	r3,32768
    416c:	113c000c 	andi	r4,r2,61440
    4170:	20c03126 	beq	r4,r3,4238 <__smakebuf_r+0x13c>
    4174:	8080030b 	ldhu	r2,12(r16)
    4178:	00c80004 	movi	r3,8192
    417c:	10820014 	ori	r2,r2,2048
    4180:	8080030d 	sth	r2,12(r16)
    4184:	20c01e26 	beq	r4,r3,4200 <__smakebuf_r+0x104>
    4188:	04810004 	movi	r18,1024
    418c:	8809883a 	mov	r4,r17
    4190:	900b883a 	mov	r5,r18
    4194:	00042900 	call	4290 <_malloc_r>
    4198:	1009883a 	mov	r4,r2
    419c:	10003126 	beq	r2,zero,4264 <__smakebuf_r+0x168>
    41a0:	80c0030b 	ldhu	r3,12(r16)
    41a4:	00800034 	movhi	r2,0
    41a8:	108e7204 	addi	r2,r2,14792
    41ac:	88800f15 	stw	r2,60(r17)
    41b0:	18c02014 	ori	r3,r3,128
    41b4:	84800515 	stw	r18,20(r16)
    41b8:	80c0030d 	sth	r3,12(r16)
    41bc:	81000415 	stw	r4,16(r16)
    41c0:	81000015 	stw	r4,0(r16)
    41c4:	dfc01217 	ldw	ra,72(sp)
    41c8:	dc801117 	ldw	r18,68(sp)
    41cc:	dc401017 	ldw	r17,64(sp)
    41d0:	dc000f17 	ldw	r16,60(sp)
    41d4:	dec01304 	addi	sp,sp,76
    41d8:	f800283a 	ret
    41dc:	80c0030b 	ldhu	r3,12(r16)
    41e0:	1880200c 	andi	r2,r3,128
    41e4:	10000426 	beq	r2,zero,41f8 <__smakebuf_r+0xfc>
    41e8:	04801004 	movi	r18,64
    41ec:	18820014 	ori	r2,r3,2048
    41f0:	8080030d 	sth	r2,12(r16)
    41f4:	003fe506 	br	418c <__smakebuf_r+0x90>
    41f8:	04810004 	movi	r18,1024
    41fc:	003ffb06 	br	41ec <__smakebuf_r+0xf0>
    4200:	8140038f 	ldh	r5,14(r16)
    4204:	8809883a 	mov	r4,r17
    4208:	0004ea40 	call	4ea4 <_isatty_r>
    420c:	103fde26 	beq	r2,zero,4188 <__smakebuf_r+0x8c>
    4210:	8080030b 	ldhu	r2,12(r16)
    4214:	80c010c4 	addi	r3,r16,67
    4218:	04810004 	movi	r18,1024
    421c:	10800054 	ori	r2,r2,1
    4220:	8080030d 	sth	r2,12(r16)
    4224:	00800044 	movi	r2,1
    4228:	80c00415 	stw	r3,16(r16)
    422c:	80800515 	stw	r2,20(r16)
    4230:	80c00015 	stw	r3,0(r16)
    4234:	003fd506 	br	418c <__smakebuf_r+0x90>
    4238:	80c00a17 	ldw	r3,40(r16)
    423c:	00800034 	movhi	r2,0
    4240:	1092b804 	addi	r2,r2,19168
    4244:	18bfcb1e 	bne	r3,r2,4174 <__smakebuf_r+0x78>
    4248:	8080030b 	ldhu	r2,12(r16)
    424c:	00c10004 	movi	r3,1024
    4250:	1825883a 	mov	r18,r3
    4254:	10c4b03a 	or	r2,r2,r3
    4258:	8080030d 	sth	r2,12(r16)
    425c:	80c01315 	stw	r3,76(r16)
    4260:	003fca06 	br	418c <__smakebuf_r+0x90>
    4264:	8100030b 	ldhu	r4,12(r16)
    4268:	2080800c 	andi	r2,r4,512
    426c:	103fb21e 	bne	r2,zero,4138 <__smakebuf_r+0x3c>
    4270:	80c010c4 	addi	r3,r16,67
    4274:	21000094 	ori	r4,r4,2
    4278:	00800044 	movi	r2,1
    427c:	80800515 	stw	r2,20(r16)
    4280:	8100030d 	sth	r4,12(r16)
    4284:	80c00415 	stw	r3,16(r16)
    4288:	80c00015 	stw	r3,0(r16)
    428c:	003faa06 	br	4138 <__smakebuf_r+0x3c>

00004290 <_malloc_r>:
    4290:	defff604 	addi	sp,sp,-40
    4294:	28c002c4 	addi	r3,r5,11
    4298:	00800584 	movi	r2,22
    429c:	dc800215 	stw	r18,8(sp)
    42a0:	dfc00915 	stw	ra,36(sp)
    42a4:	df000815 	stw	fp,32(sp)
    42a8:	ddc00715 	stw	r23,28(sp)
    42ac:	dd800615 	stw	r22,24(sp)
    42b0:	dd400515 	stw	r21,20(sp)
    42b4:	dd000415 	stw	r20,16(sp)
    42b8:	dcc00315 	stw	r19,12(sp)
    42bc:	dc400115 	stw	r17,4(sp)
    42c0:	dc000015 	stw	r16,0(sp)
    42c4:	2025883a 	mov	r18,r4
    42c8:	10c01236 	bltu	r2,r3,4314 <_malloc_r+0x84>
    42cc:	04400404 	movi	r17,16
    42d0:	8940142e 	bgeu	r17,r5,4324 <_malloc_r+0x94>
    42d4:	00800304 	movi	r2,12
    42d8:	0007883a 	mov	r3,zero
    42dc:	90800015 	stw	r2,0(r18)
    42e0:	1805883a 	mov	r2,r3
    42e4:	dfc00917 	ldw	ra,36(sp)
    42e8:	df000817 	ldw	fp,32(sp)
    42ec:	ddc00717 	ldw	r23,28(sp)
    42f0:	dd800617 	ldw	r22,24(sp)
    42f4:	dd400517 	ldw	r21,20(sp)
    42f8:	dd000417 	ldw	r20,16(sp)
    42fc:	dcc00317 	ldw	r19,12(sp)
    4300:	dc800217 	ldw	r18,8(sp)
    4304:	dc400117 	ldw	r17,4(sp)
    4308:	dc000017 	ldw	r16,0(sp)
    430c:	dec00a04 	addi	sp,sp,40
    4310:	f800283a 	ret
    4314:	00bffe04 	movi	r2,-8
    4318:	18a2703a 	and	r17,r3,r2
    431c:	883fed16 	blt	r17,zero,42d4 <_malloc_r+0x44>
    4320:	897fec36 	bltu	r17,r5,42d4 <_malloc_r+0x44>
    4324:	9009883a 	mov	r4,r18
    4328:	00051b40 	call	51b4 <__malloc_lock>
    432c:	00807dc4 	movi	r2,503
    4330:	14402b2e 	bgeu	r2,r17,43e0 <_malloc_r+0x150>
    4334:	8806d27a 	srli	r3,r17,9
    4338:	18003f1e 	bne	r3,zero,4438 <_malloc_r+0x1a8>
    433c:	880cd0fa 	srli	r6,r17,3
    4340:	300490fa 	slli	r2,r6,3
    4344:	02c00034 	movhi	r11,0
    4348:	5adbda04 	addi	r11,r11,28520
    434c:	12cb883a 	add	r5,r2,r11
    4350:	2c000317 	ldw	r16,12(r5)
    4354:	580f883a 	mov	r7,r11
    4358:	2c00041e 	bne	r5,r16,436c <_malloc_r+0xdc>
    435c:	00000a06 	br	4388 <_malloc_r+0xf8>
    4360:	1800860e 	bge	r3,zero,457c <_malloc_r+0x2ec>
    4364:	84000317 	ldw	r16,12(r16)
    4368:	2c000726 	beq	r5,r16,4388 <_malloc_r+0xf8>
    436c:	80800117 	ldw	r2,4(r16)
    4370:	00ffff04 	movi	r3,-4
    4374:	10c8703a 	and	r4,r2,r3
    4378:	2447c83a 	sub	r3,r4,r17
    437c:	008003c4 	movi	r2,15
    4380:	10fff70e 	bge	r2,r3,4360 <_malloc_r+0xd0>
    4384:	31bfffc4 	addi	r6,r6,-1
    4388:	32400044 	addi	r9,r6,1
    438c:	02800034 	movhi	r10,0
    4390:	529bdc04 	addi	r10,r10,28528
    4394:	54000217 	ldw	r16,8(r10)
    4398:	8280a026 	beq	r16,r10,461c <_malloc_r+0x38c>
    439c:	80800117 	ldw	r2,4(r16)
    43a0:	00ffff04 	movi	r3,-4
    43a4:	10ca703a 	and	r5,r2,r3
    43a8:	2c4dc83a 	sub	r6,r5,r17
    43ac:	008003c4 	movi	r2,15
    43b0:	11808316 	blt	r2,r6,45c0 <_malloc_r+0x330>
    43b4:	52800315 	stw	r10,12(r10)
    43b8:	52800215 	stw	r10,8(r10)
    43bc:	30002916 	blt	r6,zero,4464 <_malloc_r+0x1d4>
    43c0:	8147883a 	add	r3,r16,r5
    43c4:	18800117 	ldw	r2,4(r3)
    43c8:	9009883a 	mov	r4,r18
    43cc:	10800054 	ori	r2,r2,1
    43d0:	18800115 	stw	r2,4(r3)
    43d4:	00051b80 	call	51b8 <__malloc_unlock>
    43d8:	80c00204 	addi	r3,r16,8
    43dc:	003fc006 	br	42e0 <_malloc_r+0x50>
    43e0:	02c00034 	movhi	r11,0
    43e4:	5adbda04 	addi	r11,r11,28520
    43e8:	8ac5883a 	add	r2,r17,r11
    43ec:	14000317 	ldw	r16,12(r2)
    43f0:	580f883a 	mov	r7,r11
    43f4:	8806d0fa 	srli	r3,r17,3
    43f8:	14006c26 	beq	r2,r16,45ac <_malloc_r+0x31c>
    43fc:	80c00117 	ldw	r3,4(r16)
    4400:	00bfff04 	movi	r2,-4
    4404:	81800317 	ldw	r6,12(r16)
    4408:	1886703a 	and	r3,r3,r2
    440c:	80c7883a 	add	r3,r16,r3
    4410:	18800117 	ldw	r2,4(r3)
    4414:	81400217 	ldw	r5,8(r16)
    4418:	9009883a 	mov	r4,r18
    441c:	10800054 	ori	r2,r2,1
    4420:	18800115 	stw	r2,4(r3)
    4424:	31400215 	stw	r5,8(r6)
    4428:	29800315 	stw	r6,12(r5)
    442c:	00051b80 	call	51b8 <__malloc_unlock>
    4430:	80c00204 	addi	r3,r16,8
    4434:	003faa06 	br	42e0 <_malloc_r+0x50>
    4438:	00800104 	movi	r2,4
    443c:	10c0052e 	bgeu	r2,r3,4454 <_malloc_r+0x1c4>
    4440:	00800504 	movi	r2,20
    4444:	10c07836 	bltu	r2,r3,4628 <_malloc_r+0x398>
    4448:	198016c4 	addi	r6,r3,91
    444c:	300490fa 	slli	r2,r6,3
    4450:	003fbc06 	br	4344 <_malloc_r+0xb4>
    4454:	8804d1ba 	srli	r2,r17,6
    4458:	11800e04 	addi	r6,r2,56
    445c:	300490fa 	slli	r2,r6,3
    4460:	003fb806 	br	4344 <_malloc_r+0xb4>
    4464:	00807fc4 	movi	r2,511
    4468:	1140bb36 	bltu	r2,r5,4758 <_malloc_r+0x4c8>
    446c:	2806d0fa 	srli	r3,r5,3
    4470:	573ffe04 	addi	fp,r10,-8
    4474:	00800044 	movi	r2,1
    4478:	180890fa 	slli	r4,r3,3
    447c:	1807d0ba 	srai	r3,r3,2
    4480:	e1c00117 	ldw	r7,4(fp)
    4484:	5909883a 	add	r4,r11,r4
    4488:	21400217 	ldw	r5,8(r4)
    448c:	10c4983a 	sll	r2,r2,r3
    4490:	81000315 	stw	r4,12(r16)
    4494:	81400215 	stw	r5,8(r16)
    4498:	388eb03a 	or	r7,r7,r2
    449c:	2c000315 	stw	r16,12(r5)
    44a0:	24000215 	stw	r16,8(r4)
    44a4:	e1c00115 	stw	r7,4(fp)
    44a8:	4807883a 	mov	r3,r9
    44ac:	4800cd16 	blt	r9,zero,47e4 <_malloc_r+0x554>
    44b0:	1807d0ba 	srai	r3,r3,2
    44b4:	00800044 	movi	r2,1
    44b8:	10c8983a 	sll	r4,r2,r3
    44bc:	39004436 	bltu	r7,r4,45d0 <_malloc_r+0x340>
    44c0:	21c4703a 	and	r2,r4,r7
    44c4:	10000a1e 	bne	r2,zero,44f0 <_malloc_r+0x260>
    44c8:	2109883a 	add	r4,r4,r4
    44cc:	00bfff04 	movi	r2,-4
    44d0:	4884703a 	and	r2,r9,r2
    44d4:	3906703a 	and	r3,r7,r4
    44d8:	12400104 	addi	r9,r2,4
    44dc:	1800041e 	bne	r3,zero,44f0 <_malloc_r+0x260>
    44e0:	2109883a 	add	r4,r4,r4
    44e4:	3904703a 	and	r2,r7,r4
    44e8:	4a400104 	addi	r9,r9,4
    44ec:	103ffc26 	beq	r2,zero,44e0 <_malloc_r+0x250>
    44f0:	480490fa 	slli	r2,r9,3
    44f4:	4819883a 	mov	r12,r9
    44f8:	023fff04 	movi	r8,-4
    44fc:	589b883a 	add	r13,r11,r2
    4500:	6807883a 	mov	r3,r13
    4504:	014003c4 	movi	r5,15
    4508:	1c000317 	ldw	r16,12(r3)
    450c:	1c00041e 	bne	r3,r16,4520 <_malloc_r+0x290>
    4510:	0000a706 	br	47b0 <_malloc_r+0x520>
    4514:	3000ab0e 	bge	r6,zero,47c4 <_malloc_r+0x534>
    4518:	84000317 	ldw	r16,12(r16)
    451c:	1c00a426 	beq	r3,r16,47b0 <_malloc_r+0x520>
    4520:	80800117 	ldw	r2,4(r16)
    4524:	1204703a 	and	r2,r2,r8
    4528:	144dc83a 	sub	r6,r2,r17
    452c:	29bff90e 	bge	r5,r6,4514 <_malloc_r+0x284>
    4530:	81000317 	ldw	r4,12(r16)
    4534:	80c00217 	ldw	r3,8(r16)
    4538:	89400054 	ori	r5,r17,1
    453c:	8445883a 	add	r2,r16,r17
    4540:	20c00215 	stw	r3,8(r4)
    4544:	19000315 	stw	r4,12(r3)
    4548:	81400115 	stw	r5,4(r16)
    454c:	1187883a 	add	r3,r2,r6
    4550:	31000054 	ori	r4,r6,1
    4554:	50800315 	stw	r2,12(r10)
    4558:	50800215 	stw	r2,8(r10)
    455c:	19800015 	stw	r6,0(r3)
    4560:	11000115 	stw	r4,4(r2)
    4564:	12800215 	stw	r10,8(r2)
    4568:	12800315 	stw	r10,12(r2)
    456c:	9009883a 	mov	r4,r18
    4570:	00051b80 	call	51b8 <__malloc_unlock>
    4574:	80c00204 	addi	r3,r16,8
    4578:	003f5906 	br	42e0 <_malloc_r+0x50>
    457c:	8109883a 	add	r4,r16,r4
    4580:	20800117 	ldw	r2,4(r4)
    4584:	80c00217 	ldw	r3,8(r16)
    4588:	81400317 	ldw	r5,12(r16)
    458c:	10800054 	ori	r2,r2,1
    4590:	20800115 	stw	r2,4(r4)
    4594:	28c00215 	stw	r3,8(r5)
    4598:	19400315 	stw	r5,12(r3)
    459c:	9009883a 	mov	r4,r18
    45a0:	00051b80 	call	51b8 <__malloc_unlock>
    45a4:	80c00204 	addi	r3,r16,8
    45a8:	003f4d06 	br	42e0 <_malloc_r+0x50>
    45ac:	80800204 	addi	r2,r16,8
    45b0:	14000317 	ldw	r16,12(r2)
    45b4:	143f911e 	bne	r2,r16,43fc <_malloc_r+0x16c>
    45b8:	1a400084 	addi	r9,r3,2
    45bc:	003f7306 	br	438c <_malloc_r+0xfc>
    45c0:	88c00054 	ori	r3,r17,1
    45c4:	8445883a 	add	r2,r16,r17
    45c8:	80c00115 	stw	r3,4(r16)
    45cc:	003fdf06 	br	454c <_malloc_r+0x2bc>
    45d0:	e4000217 	ldw	r16,8(fp)
    45d4:	00bfff04 	movi	r2,-4
    45d8:	80c00117 	ldw	r3,4(r16)
    45dc:	802d883a 	mov	r22,r16
    45e0:	18aa703a 	and	r21,r3,r2
    45e4:	ac401636 	bltu	r21,r17,4640 <_malloc_r+0x3b0>
    45e8:	ac49c83a 	sub	r4,r21,r17
    45ec:	008003c4 	movi	r2,15
    45f0:	1100130e 	bge	r2,r4,4640 <_malloc_r+0x3b0>
    45f4:	88800054 	ori	r2,r17,1
    45f8:	8447883a 	add	r3,r16,r17
    45fc:	80800115 	stw	r2,4(r16)
    4600:	20800054 	ori	r2,r4,1
    4604:	18800115 	stw	r2,4(r3)
    4608:	e0c00215 	stw	r3,8(fp)
    460c:	9009883a 	mov	r4,r18
    4610:	00051b80 	call	51b8 <__malloc_unlock>
    4614:	80c00204 	addi	r3,r16,8
    4618:	003f3106 	br	42e0 <_malloc_r+0x50>
    461c:	39c00117 	ldw	r7,4(r7)
    4620:	573ffe04 	addi	fp,r10,-8
    4624:	003fa006 	br	44a8 <_malloc_r+0x218>
    4628:	00801504 	movi	r2,84
    462c:	10c06736 	bltu	r2,r3,47cc <_malloc_r+0x53c>
    4630:	8804d33a 	srli	r2,r17,12
    4634:	11801b84 	addi	r6,r2,110
    4638:	300490fa 	slli	r2,r6,3
    463c:	003f4106 	br	4344 <_malloc_r+0xb4>
    4640:	d0a74c17 	ldw	r2,-25296(gp)
    4644:	d0e00c17 	ldw	r3,-32720(gp)
    4648:	053fffc4 	movi	r20,-1
    464c:	10800404 	addi	r2,r2,16
    4650:	88a7883a 	add	r19,r17,r2
    4654:	1d000326 	beq	r3,r20,4664 <_malloc_r+0x3d4>
    4658:	98c3ffc4 	addi	r3,r19,4095
    465c:	00bc0004 	movi	r2,-4096
    4660:	18a6703a 	and	r19,r3,r2
    4664:	9009883a 	mov	r4,r18
    4668:	980b883a 	mov	r5,r19
    466c:	0004a680 	call	4a68 <_sbrk_r>
    4670:	1009883a 	mov	r4,r2
    4674:	15000426 	beq	r2,r20,4688 <_malloc_r+0x3f8>
    4678:	854b883a 	add	r5,r16,r21
    467c:	1029883a 	mov	r20,r2
    4680:	11405a2e 	bgeu	r2,r5,47ec <_malloc_r+0x55c>
    4684:	87000c26 	beq	r16,fp,46b8 <_malloc_r+0x428>
    4688:	e4000217 	ldw	r16,8(fp)
    468c:	80c00117 	ldw	r3,4(r16)
    4690:	00bfff04 	movi	r2,-4
    4694:	1884703a 	and	r2,r3,r2
    4698:	14400336 	bltu	r2,r17,46a8 <_malloc_r+0x418>
    469c:	1449c83a 	sub	r4,r2,r17
    46a0:	008003c4 	movi	r2,15
    46a4:	113fd316 	blt	r2,r4,45f4 <_malloc_r+0x364>
    46a8:	9009883a 	mov	r4,r18
    46ac:	00051b80 	call	51b8 <__malloc_unlock>
    46b0:	0007883a 	mov	r3,zero
    46b4:	003f0a06 	br	42e0 <_malloc_r+0x50>
    46b8:	05c00074 	movhi	r23,1
    46bc:	bde42b04 	addi	r23,r23,-28500
    46c0:	b8800017 	ldw	r2,0(r23)
    46c4:	988d883a 	add	r6,r19,r2
    46c8:	b9800015 	stw	r6,0(r23)
    46cc:	d0e00c17 	ldw	r3,-32720(gp)
    46d0:	00bfffc4 	movi	r2,-1
    46d4:	18808e26 	beq	r3,r2,4910 <_malloc_r+0x680>
    46d8:	2145c83a 	sub	r2,r4,r5
    46dc:	3085883a 	add	r2,r6,r2
    46e0:	b8800015 	stw	r2,0(r23)
    46e4:	20c001cc 	andi	r3,r4,7
    46e8:	18005f1e 	bne	r3,zero,4868 <_malloc_r+0x5d8>
    46ec:	000b883a 	mov	r5,zero
    46f0:	a4c5883a 	add	r2,r20,r19
    46f4:	1083ffcc 	andi	r2,r2,4095
    46f8:	00c40004 	movi	r3,4096
    46fc:	1887c83a 	sub	r3,r3,r2
    4700:	28e7883a 	add	r19,r5,r3
    4704:	9009883a 	mov	r4,r18
    4708:	980b883a 	mov	r5,r19
    470c:	0004a680 	call	4a68 <_sbrk_r>
    4710:	1007883a 	mov	r3,r2
    4714:	00bfffc4 	movi	r2,-1
    4718:	18807a26 	beq	r3,r2,4904 <_malloc_r+0x674>
    471c:	1d05c83a 	sub	r2,r3,r20
    4720:	9885883a 	add	r2,r19,r2
    4724:	10c00054 	ori	r3,r2,1
    4728:	b8800017 	ldw	r2,0(r23)
    472c:	a021883a 	mov	r16,r20
    4730:	a0c00115 	stw	r3,4(r20)
    4734:	9885883a 	add	r2,r19,r2
    4738:	b8800015 	stw	r2,0(r23)
    473c:	e5000215 	stw	r20,8(fp)
    4740:	b7003626 	beq	r22,fp,481c <_malloc_r+0x58c>
    4744:	018003c4 	movi	r6,15
    4748:	35404b36 	bltu	r6,r21,4878 <_malloc_r+0x5e8>
    474c:	00800044 	movi	r2,1
    4750:	a0800115 	stw	r2,4(r20)
    4754:	003fcd06 	br	468c <_malloc_r+0x3fc>
    4758:	2808d27a 	srli	r4,r5,9
    475c:	2000371e 	bne	r4,zero,483c <_malloc_r+0x5ac>
    4760:	2808d0fa 	srli	r4,r5,3
    4764:	200690fa 	slli	r3,r4,3
    4768:	1ad1883a 	add	r8,r3,r11
    476c:	41800217 	ldw	r6,8(r8)
    4770:	41805b26 	beq	r8,r6,48e0 <_malloc_r+0x650>
    4774:	30800117 	ldw	r2,4(r6)
    4778:	00ffff04 	movi	r3,-4
    477c:	10c4703a 	and	r2,r2,r3
    4780:	2880022e 	bgeu	r5,r2,478c <_malloc_r+0x4fc>
    4784:	31800217 	ldw	r6,8(r6)
    4788:	41bffa1e 	bne	r8,r6,4774 <_malloc_r+0x4e4>
    478c:	32000317 	ldw	r8,12(r6)
    4790:	39c00117 	ldw	r7,4(r7)
    4794:	82000315 	stw	r8,12(r16)
    4798:	81800215 	stw	r6,8(r16)
    479c:	07000034 	movhi	fp,0
    47a0:	e71bda04 	addi	fp,fp,28520
    47a4:	34000315 	stw	r16,12(r6)
    47a8:	44000215 	stw	r16,8(r8)
    47ac:	003f3e06 	br	44a8 <_malloc_r+0x218>
    47b0:	63000044 	addi	r12,r12,1
    47b4:	608000cc 	andi	r2,r12,3
    47b8:	10005d26 	beq	r2,zero,4930 <_malloc_r+0x6a0>
    47bc:	18c00204 	addi	r3,r3,8
    47c0:	003f5106 	br	4508 <_malloc_r+0x278>
    47c4:	8089883a 	add	r4,r16,r2
    47c8:	003f6d06 	br	4580 <_malloc_r+0x2f0>
    47cc:	00805504 	movi	r2,340
    47d0:	10c02036 	bltu	r2,r3,4854 <_malloc_r+0x5c4>
    47d4:	8804d3fa 	srli	r2,r17,15
    47d8:	11801dc4 	addi	r6,r2,119
    47dc:	300490fa 	slli	r2,r6,3
    47e0:	003ed806 	br	4344 <_malloc_r+0xb4>
    47e4:	48c000c4 	addi	r3,r9,3
    47e8:	003f3106 	br	44b0 <_malloc_r+0x220>
    47ec:	05c00074 	movhi	r23,1
    47f0:	bde42b04 	addi	r23,r23,-28500
    47f4:	b8800017 	ldw	r2,0(r23)
    47f8:	988d883a 	add	r6,r19,r2
    47fc:	b9800015 	stw	r6,0(r23)
    4800:	293fb21e 	bne	r5,r4,46cc <_malloc_r+0x43c>
    4804:	2083ffcc 	andi	r2,r4,4095
    4808:	103fb01e 	bne	r2,zero,46cc <_malloc_r+0x43c>
    480c:	e4000217 	ldw	r16,8(fp)
    4810:	9d45883a 	add	r2,r19,r21
    4814:	10800054 	ori	r2,r2,1
    4818:	80800115 	stw	r2,4(r16)
    481c:	b8c00017 	ldw	r3,0(r23)
    4820:	d0a74d17 	ldw	r2,-25292(gp)
    4824:	10c0012e 	bgeu	r2,r3,482c <_malloc_r+0x59c>
    4828:	d0e74d15 	stw	r3,-25292(gp)
    482c:	d0a74e17 	ldw	r2,-25288(gp)
    4830:	10ff962e 	bgeu	r2,r3,468c <_malloc_r+0x3fc>
    4834:	d0e74e15 	stw	r3,-25288(gp)
    4838:	003f9406 	br	468c <_malloc_r+0x3fc>
    483c:	00800104 	movi	r2,4
    4840:	11001e36 	bltu	r2,r4,48bc <_malloc_r+0x62c>
    4844:	2804d1ba 	srli	r2,r5,6
    4848:	11000e04 	addi	r4,r2,56
    484c:	200690fa 	slli	r3,r4,3
    4850:	003fc506 	br	4768 <_malloc_r+0x4d8>
    4854:	00815504 	movi	r2,1364
    4858:	10c01d2e 	bgeu	r2,r3,48d0 <_malloc_r+0x640>
    485c:	01801f84 	movi	r6,126
    4860:	0080fc04 	movi	r2,1008
    4864:	003eb706 	br	4344 <_malloc_r+0xb4>
    4868:	00800204 	movi	r2,8
    486c:	10cbc83a 	sub	r5,r2,r3
    4870:	2169883a 	add	r20,r4,r5
    4874:	003f9e06 	br	46f0 <_malloc_r+0x460>
    4878:	00bffe04 	movi	r2,-8
    487c:	a93ffd04 	addi	r4,r21,-12
    4880:	2088703a 	and	r4,r4,r2
    4884:	b10b883a 	add	r5,r22,r4
    4888:	00c00144 	movi	r3,5
    488c:	28c00215 	stw	r3,8(r5)
    4890:	28c00115 	stw	r3,4(r5)
    4894:	b0800117 	ldw	r2,4(r22)
    4898:	1080004c 	andi	r2,r2,1
    489c:	2084b03a 	or	r2,r4,r2
    48a0:	b0800115 	stw	r2,4(r22)
    48a4:	313fdd2e 	bgeu	r6,r4,481c <_malloc_r+0x58c>
    48a8:	b1400204 	addi	r5,r22,8
    48ac:	9009883a 	mov	r4,r18
    48b0:	0003c680 	call	3c68 <_free_r>
    48b4:	e4000217 	ldw	r16,8(fp)
    48b8:	003fd806 	br	481c <_malloc_r+0x58c>
    48bc:	00800504 	movi	r2,20
    48c0:	11001536 	bltu	r2,r4,4918 <_malloc_r+0x688>
    48c4:	210016c4 	addi	r4,r4,91
    48c8:	200690fa 	slli	r3,r4,3
    48cc:	003fa606 	br	4768 <_malloc_r+0x4d8>
    48d0:	8804d4ba 	srli	r2,r17,18
    48d4:	11801f04 	addi	r6,r2,124
    48d8:	300490fa 	slli	r2,r6,3
    48dc:	003e9906 	br	4344 <_malloc_r+0xb4>
    48e0:	2009d0ba 	srai	r4,r4,2
    48e4:	01400034 	movhi	r5,0
    48e8:	295bda04 	addi	r5,r5,28520
    48ec:	00c00044 	movi	r3,1
    48f0:	28800117 	ldw	r2,4(r5)
    48f4:	1906983a 	sll	r3,r3,r4
    48f8:	10c4b03a 	or	r2,r2,r3
    48fc:	28800115 	stw	r2,4(r5)
    4900:	003fa306 	br	4790 <_malloc_r+0x500>
    4904:	0027883a 	mov	r19,zero
    4908:	00c00044 	movi	r3,1
    490c:	003f8606 	br	4728 <_malloc_r+0x498>
    4910:	d1200c15 	stw	r4,-32720(gp)
    4914:	003f7306 	br	46e4 <_malloc_r+0x454>
    4918:	00801504 	movi	r2,84
    491c:	11001936 	bltu	r2,r4,4984 <_malloc_r+0x6f4>
    4920:	2804d33a 	srli	r2,r5,12
    4924:	11001b84 	addi	r4,r2,110
    4928:	200690fa 	slli	r3,r4,3
    492c:	003f8e06 	br	4768 <_malloc_r+0x4d8>
    4930:	480b883a 	mov	r5,r9
    4934:	6807883a 	mov	r3,r13
    4938:	288000cc 	andi	r2,r5,3
    493c:	18fffe04 	addi	r3,r3,-8
    4940:	297fffc4 	addi	r5,r5,-1
    4944:	10001526 	beq	r2,zero,499c <_malloc_r+0x70c>
    4948:	18800217 	ldw	r2,8(r3)
    494c:	10fffa26 	beq	r2,r3,4938 <_malloc_r+0x6a8>
    4950:	2109883a 	add	r4,r4,r4
    4954:	393f1e36 	bltu	r7,r4,45d0 <_malloc_r+0x340>
    4958:	203f1d26 	beq	r4,zero,45d0 <_malloc_r+0x340>
    495c:	21c4703a 	and	r2,r4,r7
    4960:	10000226 	beq	r2,zero,496c <_malloc_r+0x6dc>
    4964:	6013883a 	mov	r9,r12
    4968:	003ee106 	br	44f0 <_malloc_r+0x260>
    496c:	2109883a 	add	r4,r4,r4
    4970:	3904703a 	and	r2,r7,r4
    4974:	63000104 	addi	r12,r12,4
    4978:	103ffc26 	beq	r2,zero,496c <_malloc_r+0x6dc>
    497c:	6013883a 	mov	r9,r12
    4980:	003edb06 	br	44f0 <_malloc_r+0x260>
    4984:	00805504 	movi	r2,340
    4988:	11000836 	bltu	r2,r4,49ac <_malloc_r+0x71c>
    498c:	2804d3fa 	srli	r2,r5,15
    4990:	11001dc4 	addi	r4,r2,119
    4994:	200690fa 	slli	r3,r4,3
    4998:	003f7306 	br	4768 <_malloc_r+0x4d8>
    499c:	0104303a 	nor	r2,zero,r4
    49a0:	388e703a 	and	r7,r7,r2
    49a4:	e1c00115 	stw	r7,4(fp)
    49a8:	003fe906 	br	4950 <_malloc_r+0x6c0>
    49ac:	00815504 	movi	r2,1364
    49b0:	1100032e 	bgeu	r2,r4,49c0 <_malloc_r+0x730>
    49b4:	01001f84 	movi	r4,126
    49b8:	00c0fc04 	movi	r3,1008
    49bc:	003f6a06 	br	4768 <_malloc_r+0x4d8>
    49c0:	2804d4ba 	srli	r2,r5,18
    49c4:	11001f04 	addi	r4,r2,124
    49c8:	200690fa 	slli	r3,r4,3
    49cc:	003f6606 	br	4768 <_malloc_r+0x4d8>

000049d0 <memset>:
    49d0:	008000c4 	movi	r2,3
    49d4:	29403fcc 	andi	r5,r5,255
    49d8:	2007883a 	mov	r3,r4
    49dc:	1180022e 	bgeu	r2,r6,49e8 <memset+0x18>
    49e0:	2084703a 	and	r2,r4,r2
    49e4:	10000826 	beq	r2,zero,4a08 <memset+0x38>
    49e8:	30000526 	beq	r6,zero,4a00 <memset+0x30>
    49ec:	2805883a 	mov	r2,r5
    49f0:	30cd883a 	add	r6,r6,r3
    49f4:	18800005 	stb	r2,0(r3)
    49f8:	18c00044 	addi	r3,r3,1
    49fc:	19bffd1e 	bne	r3,r6,49f4 <memset+0x24>
    4a00:	2005883a 	mov	r2,r4
    4a04:	f800283a 	ret
    4a08:	2804923a 	slli	r2,r5,8
    4a0c:	020003c4 	movi	r8,15
    4a10:	200f883a 	mov	r7,r4
    4a14:	2884b03a 	or	r2,r5,r2
    4a18:	1006943a 	slli	r3,r2,16
    4a1c:	10c6b03a 	or	r3,r2,r3
    4a20:	41800a2e 	bgeu	r8,r6,4a4c <memset+0x7c>
    4a24:	4005883a 	mov	r2,r8
    4a28:	31bffc04 	addi	r6,r6,-16
    4a2c:	38c00015 	stw	r3,0(r7)
    4a30:	38c00115 	stw	r3,4(r7)
    4a34:	38c00215 	stw	r3,8(r7)
    4a38:	38c00315 	stw	r3,12(r7)
    4a3c:	39c00404 	addi	r7,r7,16
    4a40:	11bff936 	bltu	r2,r6,4a28 <memset+0x58>
    4a44:	008000c4 	movi	r2,3
    4a48:	1180052e 	bgeu	r2,r6,4a60 <memset+0x90>
    4a4c:	31bfff04 	addi	r6,r6,-4
    4a50:	008000c4 	movi	r2,3
    4a54:	38c00015 	stw	r3,0(r7)
    4a58:	39c00104 	addi	r7,r7,4
    4a5c:	11bffb36 	bltu	r2,r6,4a4c <memset+0x7c>
    4a60:	3807883a 	mov	r3,r7
    4a64:	003fe006 	br	49e8 <memset+0x18>

00004a68 <_sbrk_r>:
    4a68:	defffd04 	addi	sp,sp,-12
    4a6c:	dc000015 	stw	r16,0(sp)
    4a70:	04000074 	movhi	r16,1
    4a74:	84242704 	addi	r16,r16,-28516
    4a78:	dc400115 	stw	r17,4(sp)
    4a7c:	80000015 	stw	zero,0(r16)
    4a80:	2023883a 	mov	r17,r4
    4a84:	2809883a 	mov	r4,r5
    4a88:	dfc00215 	stw	ra,8(sp)
    4a8c:	00052b40 	call	52b4 <sbrk>
    4a90:	1007883a 	mov	r3,r2
    4a94:	00bfffc4 	movi	r2,-1
    4a98:	18800626 	beq	r3,r2,4ab4 <_sbrk_r+0x4c>
    4a9c:	1805883a 	mov	r2,r3
    4aa0:	dfc00217 	ldw	ra,8(sp)
    4aa4:	dc400117 	ldw	r17,4(sp)
    4aa8:	dc000017 	ldw	r16,0(sp)
    4aac:	dec00304 	addi	sp,sp,12
    4ab0:	f800283a 	ret
    4ab4:	80800017 	ldw	r2,0(r16)
    4ab8:	103ff826 	beq	r2,zero,4a9c <_sbrk_r+0x34>
    4abc:	88800015 	stw	r2,0(r17)
    4ac0:	1805883a 	mov	r2,r3
    4ac4:	dfc00217 	ldw	ra,8(sp)
    4ac8:	dc400117 	ldw	r17,4(sp)
    4acc:	dc000017 	ldw	r16,0(sp)
    4ad0:	dec00304 	addi	sp,sp,12
    4ad4:	f800283a 	ret

00004ad8 <__sclose>:
    4ad8:	2940038f 	ldh	r5,14(r5)
    4adc:	0004c9c1 	jmpi	4c9c <_close_r>

00004ae0 <__sseek>:
    4ae0:	defffe04 	addi	sp,sp,-8
    4ae4:	dc000015 	stw	r16,0(sp)
    4ae8:	2821883a 	mov	r16,r5
    4aec:	2940038f 	ldh	r5,14(r5)
    4af0:	dfc00115 	stw	ra,4(sp)
    4af4:	0004f140 	call	4f14 <_lseek_r>
    4af8:	1007883a 	mov	r3,r2
    4afc:	00bfffc4 	movi	r2,-1
    4b00:	18800926 	beq	r3,r2,4b28 <__sseek+0x48>
    4b04:	8080030b 	ldhu	r2,12(r16)
    4b08:	80c01415 	stw	r3,80(r16)
    4b0c:	10840014 	ori	r2,r2,4096
    4b10:	8080030d 	sth	r2,12(r16)
    4b14:	1805883a 	mov	r2,r3
    4b18:	dfc00117 	ldw	ra,4(sp)
    4b1c:	dc000017 	ldw	r16,0(sp)
    4b20:	dec00204 	addi	sp,sp,8
    4b24:	f800283a 	ret
    4b28:	8080030b 	ldhu	r2,12(r16)
    4b2c:	10bbffcc 	andi	r2,r2,61439
    4b30:	8080030d 	sth	r2,12(r16)
    4b34:	1805883a 	mov	r2,r3
    4b38:	dfc00117 	ldw	ra,4(sp)
    4b3c:	dc000017 	ldw	r16,0(sp)
    4b40:	dec00204 	addi	sp,sp,8
    4b44:	f800283a 	ret

00004b48 <__swrite>:
    4b48:	2880030b 	ldhu	r2,12(r5)
    4b4c:	defffb04 	addi	sp,sp,-20
    4b50:	dcc00315 	stw	r19,12(sp)
    4b54:	1080400c 	andi	r2,r2,256
    4b58:	dc800215 	stw	r18,8(sp)
    4b5c:	dc400115 	stw	r17,4(sp)
    4b60:	dc000015 	stw	r16,0(sp)
    4b64:	3027883a 	mov	r19,r6
    4b68:	3825883a 	mov	r18,r7
    4b6c:	dfc00415 	stw	ra,16(sp)
    4b70:	2821883a 	mov	r16,r5
    4b74:	000d883a 	mov	r6,zero
    4b78:	01c00084 	movi	r7,2
    4b7c:	2023883a 	mov	r17,r4
    4b80:	10000226 	beq	r2,zero,4b8c <__swrite+0x44>
    4b84:	2940038f 	ldh	r5,14(r5)
    4b88:	0004f140 	call	4f14 <_lseek_r>
    4b8c:	8080030b 	ldhu	r2,12(r16)
    4b90:	8140038f 	ldh	r5,14(r16)
    4b94:	8809883a 	mov	r4,r17
    4b98:	10bbffcc 	andi	r2,r2,61439
    4b9c:	980d883a 	mov	r6,r19
    4ba0:	900f883a 	mov	r7,r18
    4ba4:	8080030d 	sth	r2,12(r16)
    4ba8:	dfc00417 	ldw	ra,16(sp)
    4bac:	dcc00317 	ldw	r19,12(sp)
    4bb0:	dc800217 	ldw	r18,8(sp)
    4bb4:	dc400117 	ldw	r17,4(sp)
    4bb8:	dc000017 	ldw	r16,0(sp)
    4bbc:	dec00504 	addi	sp,sp,20
    4bc0:	0004c241 	jmpi	4c24 <_write_r>

00004bc4 <__sread>:
    4bc4:	defffe04 	addi	sp,sp,-8
    4bc8:	dc000015 	stw	r16,0(sp)
    4bcc:	2821883a 	mov	r16,r5
    4bd0:	2940038f 	ldh	r5,14(r5)
    4bd4:	dfc00115 	stw	ra,4(sp)
    4bd8:	0004f8c0 	call	4f8c <_read_r>
    4bdc:	1007883a 	mov	r3,r2
    4be0:	10000816 	blt	r2,zero,4c04 <__sread+0x40>
    4be4:	80801417 	ldw	r2,80(r16)
    4be8:	10c5883a 	add	r2,r2,r3
    4bec:	80801415 	stw	r2,80(r16)
    4bf0:	1805883a 	mov	r2,r3
    4bf4:	dfc00117 	ldw	ra,4(sp)
    4bf8:	dc000017 	ldw	r16,0(sp)
    4bfc:	dec00204 	addi	sp,sp,8
    4c00:	f800283a 	ret
    4c04:	8080030b 	ldhu	r2,12(r16)
    4c08:	10bbffcc 	andi	r2,r2,61439
    4c0c:	8080030d 	sth	r2,12(r16)
    4c10:	1805883a 	mov	r2,r3
    4c14:	dfc00117 	ldw	ra,4(sp)
    4c18:	dc000017 	ldw	r16,0(sp)
    4c1c:	dec00204 	addi	sp,sp,8
    4c20:	f800283a 	ret

00004c24 <_write_r>:
    4c24:	defffd04 	addi	sp,sp,-12
    4c28:	dc000015 	stw	r16,0(sp)
    4c2c:	04000074 	movhi	r16,1
    4c30:	84242704 	addi	r16,r16,-28516
    4c34:	dc400115 	stw	r17,4(sp)
    4c38:	80000015 	stw	zero,0(r16)
    4c3c:	2023883a 	mov	r17,r4
    4c40:	2809883a 	mov	r4,r5
    4c44:	300b883a 	mov	r5,r6
    4c48:	380d883a 	mov	r6,r7
    4c4c:	dfc00215 	stw	ra,8(sp)
    4c50:	00053040 	call	5304 <write>
    4c54:	1007883a 	mov	r3,r2
    4c58:	00bfffc4 	movi	r2,-1
    4c5c:	18800626 	beq	r3,r2,4c78 <_write_r+0x54>
    4c60:	1805883a 	mov	r2,r3
    4c64:	dfc00217 	ldw	ra,8(sp)
    4c68:	dc400117 	ldw	r17,4(sp)
    4c6c:	dc000017 	ldw	r16,0(sp)
    4c70:	dec00304 	addi	sp,sp,12
    4c74:	f800283a 	ret
    4c78:	80800017 	ldw	r2,0(r16)
    4c7c:	103ff826 	beq	r2,zero,4c60 <_write_r+0x3c>
    4c80:	88800015 	stw	r2,0(r17)
    4c84:	1805883a 	mov	r2,r3
    4c88:	dfc00217 	ldw	ra,8(sp)
    4c8c:	dc400117 	ldw	r17,4(sp)
    4c90:	dc000017 	ldw	r16,0(sp)
    4c94:	dec00304 	addi	sp,sp,12
    4c98:	f800283a 	ret

00004c9c <_close_r>:
    4c9c:	defffd04 	addi	sp,sp,-12
    4ca0:	dc000015 	stw	r16,0(sp)
    4ca4:	04000074 	movhi	r16,1
    4ca8:	84242704 	addi	r16,r16,-28516
    4cac:	dc400115 	stw	r17,4(sp)
    4cb0:	80000015 	stw	zero,0(r16)
    4cb4:	2023883a 	mov	r17,r4
    4cb8:	2809883a 	mov	r4,r5
    4cbc:	dfc00215 	stw	ra,8(sp)
    4cc0:	00026bc0 	call	26bc <close>
    4cc4:	1007883a 	mov	r3,r2
    4cc8:	00bfffc4 	movi	r2,-1
    4ccc:	18800626 	beq	r3,r2,4ce8 <_close_r+0x4c>
    4cd0:	1805883a 	mov	r2,r3
    4cd4:	dfc00217 	ldw	ra,8(sp)
    4cd8:	dc400117 	ldw	r17,4(sp)
    4cdc:	dc000017 	ldw	r16,0(sp)
    4ce0:	dec00304 	addi	sp,sp,12
    4ce4:	f800283a 	ret
    4ce8:	80800017 	ldw	r2,0(r16)
    4cec:	103ff826 	beq	r2,zero,4cd0 <_close_r+0x34>
    4cf0:	88800015 	stw	r2,0(r17)
    4cf4:	1805883a 	mov	r2,r3
    4cf8:	dfc00217 	ldw	ra,8(sp)
    4cfc:	dc400117 	ldw	r17,4(sp)
    4d00:	dc000017 	ldw	r16,0(sp)
    4d04:	dec00304 	addi	sp,sp,12
    4d08:	f800283a 	ret

00004d0c <_fclose_r>:
    4d0c:	defffc04 	addi	sp,sp,-16
    4d10:	dc400115 	stw	r17,4(sp)
    4d14:	dc000015 	stw	r16,0(sp)
    4d18:	dfc00315 	stw	ra,12(sp)
    4d1c:	dc800215 	stw	r18,8(sp)
    4d20:	2821883a 	mov	r16,r5
    4d24:	2023883a 	mov	r17,r4
    4d28:	28002926 	beq	r5,zero,4dd0 <_fclose_r+0xc4>
    4d2c:	00038d40 	call	38d4 <__sfp_lock_acquire>
    4d30:	88000226 	beq	r17,zero,4d3c <_fclose_r+0x30>
    4d34:	88800e17 	ldw	r2,56(r17)
    4d38:	10002d26 	beq	r2,zero,4df0 <_fclose_r+0xe4>
    4d3c:	8080030f 	ldh	r2,12(r16)
    4d40:	10002226 	beq	r2,zero,4dcc <_fclose_r+0xc0>
    4d44:	8809883a 	mov	r4,r17
    4d48:	800b883a 	mov	r5,r16
    4d4c:	000364c0 	call	364c <_fflush_r>
    4d50:	1025883a 	mov	r18,r2
    4d54:	80800b17 	ldw	r2,44(r16)
    4d58:	10000426 	beq	r2,zero,4d6c <_fclose_r+0x60>
    4d5c:	81400717 	ldw	r5,28(r16)
    4d60:	8809883a 	mov	r4,r17
    4d64:	103ee83a 	callr	r2
    4d68:	10002a16 	blt	r2,zero,4e14 <_fclose_r+0x108>
    4d6c:	8080030b 	ldhu	r2,12(r16)
    4d70:	1080200c 	andi	r2,r2,128
    4d74:	1000231e 	bne	r2,zero,4e04 <_fclose_r+0xf8>
    4d78:	81400c17 	ldw	r5,48(r16)
    4d7c:	28000526 	beq	r5,zero,4d94 <_fclose_r+0x88>
    4d80:	80801004 	addi	r2,r16,64
    4d84:	28800226 	beq	r5,r2,4d90 <_fclose_r+0x84>
    4d88:	8809883a 	mov	r4,r17
    4d8c:	0003c680 	call	3c68 <_free_r>
    4d90:	80000c15 	stw	zero,48(r16)
    4d94:	81401117 	ldw	r5,68(r16)
    4d98:	28000326 	beq	r5,zero,4da8 <_fclose_r+0x9c>
    4d9c:	8809883a 	mov	r4,r17
    4da0:	0003c680 	call	3c68 <_free_r>
    4da4:	80001115 	stw	zero,68(r16)
    4da8:	8000030d 	sth	zero,12(r16)
    4dac:	00038d80 	call	38d8 <__sfp_lock_release>
    4db0:	9005883a 	mov	r2,r18
    4db4:	dfc00317 	ldw	ra,12(sp)
    4db8:	dc800217 	ldw	r18,8(sp)
    4dbc:	dc400117 	ldw	r17,4(sp)
    4dc0:	dc000017 	ldw	r16,0(sp)
    4dc4:	dec00404 	addi	sp,sp,16
    4dc8:	f800283a 	ret
    4dcc:	00038d80 	call	38d8 <__sfp_lock_release>
    4dd0:	0025883a 	mov	r18,zero
    4dd4:	9005883a 	mov	r2,r18
    4dd8:	dfc00317 	ldw	ra,12(sp)
    4ddc:	dc800217 	ldw	r18,8(sp)
    4de0:	dc400117 	ldw	r17,4(sp)
    4de4:	dc000017 	ldw	r16,0(sp)
    4de8:	dec00404 	addi	sp,sp,16
    4dec:	f800283a 	ret
    4df0:	8809883a 	mov	r4,r17
    4df4:	00038e40 	call	38e4 <__sinit>
    4df8:	8080030f 	ldh	r2,12(r16)
    4dfc:	103fd11e 	bne	r2,zero,4d44 <_fclose_r+0x38>
    4e00:	003ff206 	br	4dcc <_fclose_r+0xc0>
    4e04:	81400417 	ldw	r5,16(r16)
    4e08:	8809883a 	mov	r4,r17
    4e0c:	0003c680 	call	3c68 <_free_r>
    4e10:	003fd906 	br	4d78 <_fclose_r+0x6c>
    4e14:	04bfffc4 	movi	r18,-1
    4e18:	003fd406 	br	4d6c <_fclose_r+0x60>

00004e1c <fclose>:
    4e1c:	00800034 	movhi	r2,0
    4e20:	109ce504 	addi	r2,r2,29588
    4e24:	200b883a 	mov	r5,r4
    4e28:	11000017 	ldw	r4,0(r2)
    4e2c:	0004d0c1 	jmpi	4d0c <_fclose_r>

00004e30 <_fstat_r>:
    4e30:	defffd04 	addi	sp,sp,-12
    4e34:	dc000015 	stw	r16,0(sp)
    4e38:	04000074 	movhi	r16,1
    4e3c:	84242704 	addi	r16,r16,-28516
    4e40:	dc400115 	stw	r17,4(sp)
    4e44:	80000015 	stw	zero,0(r16)
    4e48:	2023883a 	mov	r17,r4
    4e4c:	2809883a 	mov	r4,r5
    4e50:	300b883a 	mov	r5,r6
    4e54:	dfc00215 	stw	ra,8(sp)
    4e58:	00050180 	call	5018 <fstat>
    4e5c:	1007883a 	mov	r3,r2
    4e60:	00bfffc4 	movi	r2,-1
    4e64:	18800626 	beq	r3,r2,4e80 <_fstat_r+0x50>
    4e68:	1805883a 	mov	r2,r3
    4e6c:	dfc00217 	ldw	ra,8(sp)
    4e70:	dc400117 	ldw	r17,4(sp)
    4e74:	dc000017 	ldw	r16,0(sp)
    4e78:	dec00304 	addi	sp,sp,12
    4e7c:	f800283a 	ret
    4e80:	80800017 	ldw	r2,0(r16)
    4e84:	103ff826 	beq	r2,zero,4e68 <_fstat_r+0x38>
    4e88:	88800015 	stw	r2,0(r17)
    4e8c:	1805883a 	mov	r2,r3
    4e90:	dfc00217 	ldw	ra,8(sp)
    4e94:	dc400117 	ldw	r17,4(sp)
    4e98:	dc000017 	ldw	r16,0(sp)
    4e9c:	dec00304 	addi	sp,sp,12
    4ea0:	f800283a 	ret

00004ea4 <_isatty_r>:
    4ea4:	defffd04 	addi	sp,sp,-12
    4ea8:	dc000015 	stw	r16,0(sp)
    4eac:	04000074 	movhi	r16,1
    4eb0:	84242704 	addi	r16,r16,-28516
    4eb4:	dc400115 	stw	r17,4(sp)
    4eb8:	80000015 	stw	zero,0(r16)
    4ebc:	2023883a 	mov	r17,r4
    4ec0:	2809883a 	mov	r4,r5
    4ec4:	dfc00215 	stw	ra,8(sp)
    4ec8:	00050980 	call	5098 <isatty>
    4ecc:	1007883a 	mov	r3,r2
    4ed0:	00bfffc4 	movi	r2,-1
    4ed4:	18800626 	beq	r3,r2,4ef0 <_isatty_r+0x4c>
    4ed8:	1805883a 	mov	r2,r3
    4edc:	dfc00217 	ldw	ra,8(sp)
    4ee0:	dc400117 	ldw	r17,4(sp)
    4ee4:	dc000017 	ldw	r16,0(sp)
    4ee8:	dec00304 	addi	sp,sp,12
    4eec:	f800283a 	ret
    4ef0:	80800017 	ldw	r2,0(r16)
    4ef4:	103ff826 	beq	r2,zero,4ed8 <_isatty_r+0x34>
    4ef8:	88800015 	stw	r2,0(r17)
    4efc:	1805883a 	mov	r2,r3
    4f00:	dfc00217 	ldw	ra,8(sp)
    4f04:	dc400117 	ldw	r17,4(sp)
    4f08:	dc000017 	ldw	r16,0(sp)
    4f0c:	dec00304 	addi	sp,sp,12
    4f10:	f800283a 	ret

00004f14 <_lseek_r>:
    4f14:	defffd04 	addi	sp,sp,-12
    4f18:	dc000015 	stw	r16,0(sp)
    4f1c:	04000074 	movhi	r16,1
    4f20:	84242704 	addi	r16,r16,-28516
    4f24:	dc400115 	stw	r17,4(sp)
    4f28:	80000015 	stw	zero,0(r16)
    4f2c:	2023883a 	mov	r17,r4
    4f30:	2809883a 	mov	r4,r5
    4f34:	300b883a 	mov	r5,r6
    4f38:	380d883a 	mov	r6,r7
    4f3c:	dfc00215 	stw	ra,8(sp)
    4f40:	000511c0 	call	511c <lseek>
    4f44:	1007883a 	mov	r3,r2
    4f48:	00bfffc4 	movi	r2,-1
    4f4c:	18800626 	beq	r3,r2,4f68 <_lseek_r+0x54>
    4f50:	1805883a 	mov	r2,r3
    4f54:	dfc00217 	ldw	ra,8(sp)
    4f58:	dc400117 	ldw	r17,4(sp)
    4f5c:	dc000017 	ldw	r16,0(sp)
    4f60:	dec00304 	addi	sp,sp,12
    4f64:	f800283a 	ret
    4f68:	80800017 	ldw	r2,0(r16)
    4f6c:	103ff826 	beq	r2,zero,4f50 <_lseek_r+0x3c>
    4f70:	88800015 	stw	r2,0(r17)
    4f74:	1805883a 	mov	r2,r3
    4f78:	dfc00217 	ldw	ra,8(sp)
    4f7c:	dc400117 	ldw	r17,4(sp)
    4f80:	dc000017 	ldw	r16,0(sp)
    4f84:	dec00304 	addi	sp,sp,12
    4f88:	f800283a 	ret

00004f8c <_read_r>:
    4f8c:	defffd04 	addi	sp,sp,-12
    4f90:	dc000015 	stw	r16,0(sp)
    4f94:	04000074 	movhi	r16,1
    4f98:	84242704 	addi	r16,r16,-28516
    4f9c:	dc400115 	stw	r17,4(sp)
    4fa0:	80000015 	stw	zero,0(r16)
    4fa4:	2023883a 	mov	r17,r4
    4fa8:	2809883a 	mov	r4,r5
    4fac:	300b883a 	mov	r5,r6
    4fb0:	380d883a 	mov	r6,r7
    4fb4:	dfc00215 	stw	ra,8(sp)
    4fb8:	00051bc0 	call	51bc <read>
    4fbc:	1007883a 	mov	r3,r2
    4fc0:	00bfffc4 	movi	r2,-1
    4fc4:	18800626 	beq	r3,r2,4fe0 <_read_r+0x54>
    4fc8:	1805883a 	mov	r2,r3
    4fcc:	dfc00217 	ldw	ra,8(sp)
    4fd0:	dc400117 	ldw	r17,4(sp)
    4fd4:	dc000017 	ldw	r16,0(sp)
    4fd8:	dec00304 	addi	sp,sp,12
    4fdc:	f800283a 	ret
    4fe0:	80800017 	ldw	r2,0(r16)
    4fe4:	103ff826 	beq	r2,zero,4fc8 <_read_r+0x3c>
    4fe8:	88800015 	stw	r2,0(r17)
    4fec:	1805883a 	mov	r2,r3
    4ff0:	dfc00217 	ldw	ra,8(sp)
    4ff4:	dc400117 	ldw	r17,4(sp)
    4ff8:	dc000017 	ldw	r16,0(sp)
    4ffc:	dec00304 	addi	sp,sp,12
    5000:	f800283a 	ret

00005004 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5004:	20000226 	beq	r4,zero,5010 <_exit+0xc>
    ALT_SIM_FAIL();
    5008:	002af070 	cmpltui	zero,zero,43969
    500c:	00000106 	br	5014 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    5010:	002af0b0 	cmpltui	zero,zero,43970
    5014:	003fff06 	br	5014 <_exit+0x10>

00005018 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5018:	deffff04 	addi	sp,sp,-4
    501c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5020:	20000e16 	blt	r4,zero,505c <fstat+0x44>
    5024:	20c00324 	muli	r3,r4,12
    5028:	00800034 	movhi	r2,0
    502c:	109a7a04 	addi	r2,r2,27112
    5030:	1889883a 	add	r4,r3,r2
  
  if (fd)
    5034:	20000926 	beq	r4,zero,505c <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    5038:	20800017 	ldw	r2,0(r4)
    503c:	10800817 	ldw	r2,32(r2)
    5040:	10000226 	beq	r2,zero,504c <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    5044:	103ee83a 	callr	r2
    5048:	00001006 	br	508c <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    504c:	00880004 	movi	r2,8192
    5050:	28800115 	stw	r2,4(r5)
    5054:	0005883a 	mov	r2,zero
    5058:	00000c06 	br	508c <fstat+0x74>
    505c:	00800034 	movhi	r2,0
    5060:	109ce104 	addi	r2,r2,29572
    5064:	10800017 	ldw	r2,0(r2)
    5068:	1000031e 	bne	r2,zero,5078 <fstat+0x60>
    506c:	00c00074 	movhi	r3,1
    5070:	18e42704 	addi	r3,r3,-28516
    5074:	00000206 	br	5080 <fstat+0x68>
    5078:	103ee83a 	callr	r2
    507c:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5080:	00801444 	movi	r2,81
    5084:	18800015 	stw	r2,0(r3)
    5088:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    508c:	dfc00017 	ldw	ra,0(sp)
    5090:	dec00104 	addi	sp,sp,4
    5094:	f800283a 	ret

00005098 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5098:	defff004 	addi	sp,sp,-64
    509c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    50a0:	20000f16 	blt	r4,zero,50e0 <isatty+0x48>
    50a4:	20c00324 	muli	r3,r4,12
    50a8:	00800034 	movhi	r2,0
    50ac:	109a7a04 	addi	r2,r2,27112
    50b0:	1885883a 	add	r2,r3,r2
  
  if (fd)
    50b4:	10000a26 	beq	r2,zero,50e0 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    50b8:	10800017 	ldw	r2,0(r2)
    50bc:	10800817 	ldw	r2,32(r2)
    50c0:	1000021e 	bne	r2,zero,50cc <isatty+0x34>
    50c4:	00800044 	movi	r2,1
    50c8:	00001106 	br	5110 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    50cc:	d80b883a 	mov	r5,sp
    50d0:	00050180 	call	5018 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    50d4:	d8800117 	ldw	r2,4(sp)
    50d8:	10880020 	cmpeqi	r2,r2,8192
    50dc:	00000c06 	br	5110 <isatty+0x78>
    50e0:	00800034 	movhi	r2,0
    50e4:	109ce104 	addi	r2,r2,29572
    50e8:	10800017 	ldw	r2,0(r2)
    50ec:	1000031e 	bne	r2,zero,50fc <isatty+0x64>
    50f0:	00c00074 	movhi	r3,1
    50f4:	18e42704 	addi	r3,r3,-28516
    50f8:	00000206 	br	5104 <isatty+0x6c>
    50fc:	103ee83a 	callr	r2
    5100:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5104:	00801444 	movi	r2,81
    5108:	18800015 	stw	r2,0(r3)
    510c:	0005883a 	mov	r2,zero
    return 0;
  }
}
    5110:	dfc00f17 	ldw	ra,60(sp)
    5114:	dec01004 	addi	sp,sp,64
    5118:	f800283a 	ret

0000511c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    511c:	defffe04 	addi	sp,sp,-8
    5120:	dfc00115 	stw	ra,4(sp)
    5124:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5128:	2000020e 	bge	r4,zero,5134 <lseek+0x18>
    512c:	043febc4 	movi	r16,-81
    5130:	00000d06 	br	5168 <lseek+0x4c>
    5134:	20c00324 	muli	r3,r4,12
    5138:	00800034 	movhi	r2,0
    513c:	109a7a04 	addi	r2,r2,27112
    5140:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    5144:	20001526 	beq	r4,zero,519c <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5148:	20800017 	ldw	r2,0(r4)
    514c:	10800717 	ldw	r2,28(r2)
    5150:	1000021e 	bne	r2,zero,515c <lseek+0x40>
    5154:	043fde84 	movi	r16,-134
    5158:	00000306 	br	5168 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    515c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    5160:	1000100e 	bge	r2,zero,51a4 <lseek+0x88>
    5164:	1021883a 	mov	r16,r2
    5168:	00800034 	movhi	r2,0
    516c:	109ce104 	addi	r2,r2,29572
    5170:	10800017 	ldw	r2,0(r2)
    5174:	1000031e 	bne	r2,zero,5184 <lseek+0x68>
    5178:	00c00074 	movhi	r3,1
    517c:	18e42704 	addi	r3,r3,-28516
    5180:	00000206 	br	518c <lseek+0x70>
    5184:	103ee83a 	callr	r2
    5188:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    518c:	0405c83a 	sub	r2,zero,r16
    5190:	18800015 	stw	r2,0(r3)
    5194:	00bfffc4 	movi	r2,-1
    5198:	00000206 	br	51a4 <lseek+0x88>
    519c:	043febc4 	movi	r16,-81
    51a0:	003ff106 	br	5168 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    51a4:	dfc00117 	ldw	ra,4(sp)
    51a8:	dc000017 	ldw	r16,0(sp)
    51ac:	dec00204 	addi	sp,sp,8
    51b0:	f800283a 	ret

000051b4 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    51b4:	f800283a 	ret

000051b8 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    51b8:	f800283a 	ret

000051bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    51bc:	defffe04 	addi	sp,sp,-8
    51c0:	dfc00115 	stw	ra,4(sp)
    51c4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    51c8:	20002916 	blt	r4,zero,5270 <read+0xb4>
    51cc:	20c00324 	muli	r3,r4,12
    51d0:	00800034 	movhi	r2,0
    51d4:	109a7a04 	addi	r2,r2,27112
    51d8:	1889883a 	add	r4,r3,r2
  
  if (fd)
    51dc:	20002426 	beq	r4,zero,5270 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    51e0:	20800217 	ldw	r2,8(r4)
    51e4:	108000cc 	andi	r2,r2,3
    51e8:	00c00044 	movi	r3,1
    51ec:	10c01326 	beq	r2,r3,523c <read+0x80>
    51f0:	20800017 	ldw	r2,0(r4)
    51f4:	10800517 	ldw	r2,20(r2)
    51f8:	10001026 	beq	r2,zero,523c <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    51fc:	103ee83a 	callr	r2
    5200:	1021883a 	mov	r16,r2
    5204:	1000260e 	bge	r2,zero,52a0 <read+0xe4>
    5208:	00800034 	movhi	r2,0
    520c:	109ce104 	addi	r2,r2,29572
    5210:	10800017 	ldw	r2,0(r2)
    5214:	1000031e 	bne	r2,zero,5224 <read+0x68>
    5218:	00c00074 	movhi	r3,1
    521c:	18e42704 	addi	r3,r3,-28516
    5220:	00000206 	br	522c <read+0x70>
    5224:	103ee83a 	callr	r2
    5228:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    522c:	0405c83a 	sub	r2,zero,r16
    5230:	18800015 	stw	r2,0(r3)
    5234:	043fffc4 	movi	r16,-1
    5238:	00001906 	br	52a0 <read+0xe4>
    523c:	00800034 	movhi	r2,0
    5240:	109ce104 	addi	r2,r2,29572
    5244:	10800017 	ldw	r2,0(r2)
    5248:	1000031e 	bne	r2,zero,5258 <read+0x9c>
    524c:	00c00074 	movhi	r3,1
    5250:	18e42704 	addi	r3,r3,-28516
    5254:	00000206 	br	5260 <read+0xa4>
    5258:	103ee83a 	callr	r2
    525c:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    5260:	00800344 	movi	r2,13
    5264:	18800015 	stw	r2,0(r3)
    5268:	043fffc4 	movi	r16,-1
    526c:	00000c06 	br	52a0 <read+0xe4>
    5270:	00800034 	movhi	r2,0
    5274:	109ce104 	addi	r2,r2,29572
    5278:	10800017 	ldw	r2,0(r2)
    527c:	1000031e 	bne	r2,zero,528c <read+0xd0>
    5280:	00c00074 	movhi	r3,1
    5284:	18e42704 	addi	r3,r3,-28516
    5288:	00000206 	br	5294 <read+0xd8>
    528c:	103ee83a 	callr	r2
    5290:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5294:	00801444 	movi	r2,81
    5298:	18800015 	stw	r2,0(r3)
    529c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    52a0:	8005883a 	mov	r2,r16
    52a4:	dfc00117 	ldw	ra,4(sp)
    52a8:	dc000017 	ldw	r16,0(sp)
    52ac:	dec00204 	addi	sp,sp,8
    52b0:	f800283a 	ret

000052b4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    52b4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    52b8:	00bfff84 	movi	r2,-2
    52bc:	2884703a 	and	r2,r5,r2
    52c0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    52c4:	d0a00d17 	ldw	r2,-32716(gp)
    52c8:	108000c4 	addi	r2,r2,3
    52cc:	00ffff04 	movi	r3,-4
    52d0:	10c6703a 	and	r3,r2,r3
    52d4:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    52d8:	1909883a 	add	r4,r3,r4
    52dc:	00802034 	movhi	r2,128
    52e0:	10800004 	addi	r2,r2,0
    52e4:	1100032e 	bgeu	r2,r4,52f4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    52e8:	2801703a 	wrctl	status,r5
    52ec:	00ffffc4 	movi	r3,-1
    52f0:	00000206 	br	52fc <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    52f4:	d1200d15 	stw	r4,-32716(gp)
    52f8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    52fc:	1805883a 	mov	r2,r3
    5300:	f800283a 	ret

00005304 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5304:	defffe04 	addi	sp,sp,-8
    5308:	dfc00115 	stw	ra,4(sp)
    530c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5310:	20002816 	blt	r4,zero,53b4 <write+0xb0>
    5314:	20c00324 	muli	r3,r4,12
    5318:	00800034 	movhi	r2,0
    531c:	109a7a04 	addi	r2,r2,27112
    5320:	1889883a 	add	r4,r3,r2
  
  if (fd)
    5324:	20002326 	beq	r4,zero,53b4 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5328:	20800217 	ldw	r2,8(r4)
    532c:	108000cc 	andi	r2,r2,3
    5330:	10001326 	beq	r2,zero,5380 <write+0x7c>
    5334:	20800017 	ldw	r2,0(r4)
    5338:	10800617 	ldw	r2,24(r2)
    533c:	10001026 	beq	r2,zero,5380 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5340:	103ee83a 	callr	r2
    5344:	1021883a 	mov	r16,r2
    5348:	1000260e 	bge	r2,zero,53e4 <write+0xe0>
    534c:	00800034 	movhi	r2,0
    5350:	109ce104 	addi	r2,r2,29572
    5354:	10800017 	ldw	r2,0(r2)
    5358:	1000031e 	bne	r2,zero,5368 <write+0x64>
    535c:	00c00074 	movhi	r3,1
    5360:	18e42704 	addi	r3,r3,-28516
    5364:	00000206 	br	5370 <write+0x6c>
    5368:	103ee83a 	callr	r2
    536c:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    5370:	0405c83a 	sub	r2,zero,r16
    5374:	18800015 	stw	r2,0(r3)
    5378:	043fffc4 	movi	r16,-1
    537c:	00001906 	br	53e4 <write+0xe0>
    5380:	00800034 	movhi	r2,0
    5384:	109ce104 	addi	r2,r2,29572
    5388:	10800017 	ldw	r2,0(r2)
    538c:	1000031e 	bne	r2,zero,539c <write+0x98>
    5390:	00c00074 	movhi	r3,1
    5394:	18e42704 	addi	r3,r3,-28516
    5398:	00000206 	br	53a4 <write+0xa0>
    539c:	103ee83a 	callr	r2
    53a0:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    53a4:	00800344 	movi	r2,13
    53a8:	18800015 	stw	r2,0(r3)
    53ac:	043fffc4 	movi	r16,-1
    53b0:	00000c06 	br	53e4 <write+0xe0>
    53b4:	00800034 	movhi	r2,0
    53b8:	109ce104 	addi	r2,r2,29572
    53bc:	10800017 	ldw	r2,0(r2)
    53c0:	1000031e 	bne	r2,zero,53d0 <write+0xcc>
    53c4:	00c00074 	movhi	r3,1
    53c8:	18e42704 	addi	r3,r3,-28516
    53cc:	00000206 	br	53d8 <write+0xd4>
    53d0:	103ee83a 	callr	r2
    53d4:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    53d8:	00801444 	movi	r2,81
    53dc:	18800015 	stw	r2,0(r3)
    53e0:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    53e4:	8005883a 	mov	r2,r16
    53e8:	dfc00117 	ldw	ra,4(sp)
    53ec:	dc000017 	ldw	r16,0(sp)
    53f0:	dec00204 	addi	sp,sp,8
    53f4:	f800283a 	ret
    53f8:	00003498 	cmpnei	zero,zero,210
