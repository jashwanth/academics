
C:/Users/Jashwanth/Desktop/4th_sem/altera/monitor_tut/hal_tut/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/Users/Jashwanth/Desktop/4th_sem/altera/monitor_tut/hal_tut/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000530c memsz 0x0000530c flags r-x
    LOAD off    0x0000632c vaddr 0x0000532c paddr 0x00007008 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00008ce4 vaddr 0x00008ce4 paddr 0x00008ce4 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004f84  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000240  000050ec  000050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  0000532c  00007008  0000632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00008ce4  00008ce4  00008ce4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00008030  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000124d  00000000  00000000  00008908  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017ce9  00000000  00000000  00009b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000055c1  00000000  00000000  0002183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ccae  00000000  00000000  00026dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000010d0  00000000  00000000  00033ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027eb  00000000  00000000  00034b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000051c0  00000000  00000000  0003736b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003c52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0003c550  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003f367  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003f36a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003f36d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003f36e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003f36f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003f373  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003f377  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003f37b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003f384  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003f38d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0003f396  2**0
                  CONTENTS, READONLY
 28 .jdi          00004996  00000000  00000000  0003f3a1  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000abe93  00000000  00000000  00043d37  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
000050ec l    d  .rodata	00000000 .rodata
0000532c l    d  .rwdata	00000000 .rwdata
00008ce4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000532c l     O .rwdata	00001060 JTAG_UART
0000638c l     O .rwdata	00000030 AV_Config
000063bc l     O .rwdata	00000030 Audio
000063ec l     O .rwdata	0000002c Expansion_JP1
00006418 l     O .rwdata	0000002c Expansion_JP2
00006444 l     O .rwdata	0000002c Green_LEDs
00006470 l     O .rwdata	0000002c HEX3_HEX0
0000649c l     O .rwdata	0000002c Pushbuttons
000064c8 l     O .rwdata	0000002c Red_LEDs
000064f4 l     O .rwdata	0000002c Slider_Switches
00006520 l     O .rwdata	00000038 PS2_Port
00006558 l     O .rwdata	0000002c Serial_Port
00006584 l     O .rwdata	00000048 VGA_Char_Buffer
000065cc l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000c14 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00000ce0 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000011b0 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002484 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000258c l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000067c8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003220 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003604 l     F .text	00000058 std
00003710 l     F .text	00000008 __fp_lock
00003718 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007004 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004b94 g     F .text	00000070 _isatty_r
00000650 g     F .text	00000050 alt_main
00001b08 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
00008d34 g     O .bss	00000100 alt_irq
00001540 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00004c04 g     F .text	00000078 _lseek_r
00007008 g       *ABS*	00000000 __flash_rwdata_start
00008e34 g       *ABS*	00000000 __alt_heap_start
000047d0 g     F .text	00000068 __sseek
0000366c g     F .text	000000a4 __sinit
00002f98 g     F .text	00000130 __swbuf_r
00001748 g     F .text	00000088 alt_up_char_buffer_string
00001200 g     F .text	0000000c read_CE_bit
0000376c g     F .text	00000068 __sfmoreglue
00004ea8 g     F .text	00000004 __malloc_unlock
000012d0 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
000015ec g     F .text	00000080 alt_up_rs232_read_fd
000017d0 g     F .text	00000058 alt_up_char_buffer_draw
0000375c g     F .text	00000010 _cleanup
000021fc g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
000022f0 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004b20 g     F .text	00000074 _fstat_r
00008cfc g     O .bss	00000004 errno
00008ce8 g     O .bss	00000004 alt_argv
0000efd0 g       *ABS*	00000000 _gp
000022c8 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00006648 g     O .rwdata	00000180 alt_fd_list
000024fc g     F .text	00000070 alt_find_dev
00002bdc g     F .text	000000a0 memcpy
00001828 g     F .text	00000028 alt_up_char_buffer_clear
00003750 g     F .text	0000000c _cleanup_r
000025f0 g     F .text	00000098 alt_io_redirect
000015a0 g     F .text	0000004c alt_up_rs232_read_data
000022b8 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00000e88 g     F .text	00000168 altera_avalon_jtag_uart_read
00004d88 g     F .text	00000084 isatty
00001c9c g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00002af4 g     F .text	0000003c alt_icache_flush
00008d00 g     O .bss	00000004 __malloc_top_pad
00004758 g     F .text	00000070 _sbrk_r
000018c0 g     F .text	0000005c helper_plot_pixel
00004c7c g     F .text	00000078 _read_r
00006fe0 g     O .rwdata	00000004 alt_max_fd
00001574 g     F .text	0000000c alt_up_rs232_check_parity
000049fc g     F .text	00000110 _fclose_r
0000120c g     F .text	00000008 read_num_bytes_available
000035d0 g     F .text	00000034 fflush
00008d04 g     O .bss	00000004 __malloc_max_sbrked_mem
00002688 g     F .text	000000bc alt_irq_register
000011ec g     F .text	0000000c read_RI_bit
00002124 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
00004e0c g     F .text	00000098 lseek
00006ff8 g     O .rwdata	00000004 _global_impure_ptr
00008e34 g       *ABS*	00000000 __bss_end
00001ee0 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00002918 g     F .text	000000ac alt_tick
00001220 g     F .text	00000008 read_data_byte
00003738 g     F .text	00000018 __fp_lock_all
000028e4 g     F .text	00000034 alt_alarm_stop
000011f8 g     F .text	00000008 read_RE_bit
00008cf0 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00006620 g     O .rwdata	00000028 alt_dev_null
000013d4 g     F .text	00000040 alt_up_ps2_write_data_byte
00002480 g     F .text	00000004 alt_dcache_flush_all
00001e10 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
00007008 g       *ABS*	00000000 __ram_rwdata_end
00006fd8 g     O .rwdata	00000008 alt_dev_list
00004ff4 g     F .text	000000f4 write
00002d80 g     F .text	000000e8 _putc_r
0000191c g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
0000532c g       *ABS*	00000000 __ram_rodata_end
00004d08 g     F .text	00000080 fstat
00001694 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00008e34 g       *ABS*	00000000 end
00001414 g     F .text	00000070 alt_up_ps2_write_fd
00001870 g     F .text	00000050 alt_up_char_buffer_init
00000c68 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000116c g     F .text	00000044 alt_avalon_timer_sc_init
00000ff0 g     F .text	0000017c altera_avalon_jtag_uart_write
0000365c g     F .text	00000004 __sfp_lock_acquire
000039f0 g     F .text	00000314 _free_r
000006a0 g     F .text	000001dc alt_printf
00003224 g     F .text	000001b0 __call_exitprocs
00007000 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00008cf4 g     O .bss	00000004 _alt_tick_rate
00008cf8 g     O .bss	00000004 _alt_nticks
00004eac g     F .text	000000f8 read
000008c4 g     F .text	00000280 alt_sys_init
000001a4 g     F .text	000001f4 draw_big_A
00001248 g     F .text	00000030 alt_up_ps2_clear_fifo
0000166c g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00000bdc g     F .text	00000038 altera_avalon_jtag_uart_close
0000532c g       *ABS*	00000000 __ram_rwdata_start
000050ec g       *ABS*	00000000 __ram_rodata_start
00008d0c g     O .bss	00000028 __malloc_current_mallinfo
00000bb4 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00002a88 g     F .text	0000006c alt_get_fd
0000498c g     F .text	00000070 _close_r
00002b68 g     F .text	00000074 memcmp
00000b64 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00008e34 g       *ABS*	00000000 __alt_stack_base
00000b44 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000030e4 g     F .text	0000013c __swsetup_r
000037d4 g     F .text	000000f0 __sfp
00006bc8 g     O .rwdata	00000408 __malloc_av_
00003668 g     F .text	00000004 __sinit_lock_release
000048b4 g     F .text	00000060 __sread
00001704 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
000029cc g     F .text	000000bc alt_find_file
0000248c g     F .text	00000070 alt_dev_llist_insert
00004ea4 g     F .text	00000004 __malloc_lock
00004fa4 g     F .text	00000050 sbrk
000033d4 g     F .text	000001fc _fflush_r
00008ce4 g       *ABS*	00000000 __bss_start
000004f4 g     F .text	00000098 memset
00000398 g     F .text	0000015c main
00008cec g     O .bss	00000004 alt_envp
00008d08 g     O .bss	00000004 __malloc_max_total_mem
000021d8 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001850 g     F .text	00000020 alt_up_char_buffer_open_dev
00000b8c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000030c8 g     F .text	0000001c __swbuf
000047c8 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00004b0c g     F .text	00000014 fclose
00001278 g     F .text	00000058 alt_up_ps2_read_data_byte
00004018 g     F .text	00000740 _malloc_r
00006fe4 g     O .rwdata	00000004 alt_errno
00003dcc g     F .text	000000b8 _fwalk
00001228 g     F .text	00000020 alt_up_ps2_open_dev
00002c7c g     F .text	00000104 putc
000038c4 g     F .text	0000012c _malloc_trim_r
0000155c g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00002e68 g     F .text	000000bc strcmp
000050ec g       *ABS*	00000000 __flash_rodata_start
00001580 g     F .text	00000020 alt_up_rs232_open_dev
000008a4 g     F .text	00000020 alt_irq_init
000028c0 g     F .text	00000024 alt_release_fd
00001214 g     F .text	0000000c read_data_valid
00001484 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00004914 g     F .text	00000078 _write_r
00006ff4 g     O .rwdata	00000004 _impure_ptr
00008ce4 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00003720 g     F .text	00000018 __fp_unlock_all
00006fd0 g     O .rwdata	00000008 alt_fs_list
00001720 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0000167c g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007008 g       *ABS*	00000000 _edata
00008e34 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000e14 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00004838 g     F .text	0000007c __swrite
00006ffc g     O .rwdata	00000004 __malloc_trim_threshold
000029c4 g     F .text	00000008 altera_nios2_qsys_irq_init
00002b30 g     F .text	00000038 exit
00003d04 g     F .text	000000c8 _fwalk_reent
000014b8 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003660 g     F .text	00000004 __sfp_lock_release
00004cf4 g     F .text	00000014 _exit
00002310 g     F .text	00000094 alt_alarm_start
00003e84 g     F .text	00000194 __smakebuf_r
00001378 g     F .text	0000005c alt_up_ps2_wait_for_ack
00002f24 g     F .text	00000074 strlen
00002744 g     F .text	0000017c open
0000087c g     F .text	00000028 alt_putchar
0000256c g     F .text	00000020 alt_icache_flush_all
00006fe8 g     O .rwdata	00000004 alt_priority_mask
00001350 g     F .text	00000028 alt_up_ps2_read_fd
00006fec g     O .rwdata	00000008 alt_alarm_list
00001738 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
000023a4 g     F .text	000000dc close
0000058c g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
00003664 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00808014 	movui	r2,512
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	84234d04 	addi	r16,r16,-29388
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6bbf414 	ori	gp,gp,61392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a33914 	ori	r2,r2,36068

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e38d14 	ori	r3,r3,36404

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	000058c0 	call	58c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00006500 	call	650 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <draw_big_A>:
  
}

/* draws a big letter A on the screen */
void draw_big_A(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev )
{
     1a4:	defff404 	addi	sp,sp,-48
     1a8:	dfc00b15 	stw	ra,44(sp)
     1ac:	ddc00a15 	stw	r23,40(sp)
     1b0:	dd800915 	stw	r22,36(sp)
     1b4:	dd400815 	stw	r21,32(sp)
     1b8:	dd000715 	stw	r20,28(sp)
     1bc:	dcc00615 	stw	r19,24(sp)
     1c0:	dc800515 	stw	r18,20(sp)
     1c4:	dc400415 	stw	r17,16(sp)
     1c8:	dc000315 	stw	r16,12(sp)
     1cc:	2027883a 	mov	r19,r4
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 10, 88, 44, 10, 0xffff, 0);
     1d0:	05c00284 	movi	r23,10
     1d4:	04801604 	movi	r18,88
     1d8:	04000b04 	movi	r16,44
     1dc:	ddc00015 	stw	r23,0(sp)
     1e0:	047fffd4 	movui	r17,65535
     1e4:	dc400115 	stw	r17,4(sp)
     1e8:	d8000215 	stw	zero,8(sp)
     1ec:	b80b883a 	mov	r5,r23
     1f0:	900d883a 	mov	r6,r18
     1f4:	800f883a 	mov	r7,r16
     1f8:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 44, 10, 72, 10, 0xffff, 0);
     1fc:	05001204 	movi	r20,72
     200:	ddc00015 	stw	r23,0(sp)
     204:	dc400115 	stw	r17,4(sp)
     208:	d8000215 	stw	zero,8(sp)
     20c:	9809883a 	mov	r4,r19
     210:	800b883a 	mov	r5,r16
     214:	b80d883a 	mov	r6,r23
     218:	a00f883a 	mov	r7,r20
     21c:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 72, 10, 106, 88, 0xffff, 0);
     220:	04001a84 	movi	r16,106
     224:	dc800015 	stw	r18,0(sp)
     228:	dc400115 	stw	r17,4(sp)
     22c:	d8000215 	stw	zero,8(sp)
     230:	9809883a 	mov	r4,r19
     234:	a00b883a 	mov	r5,r20
     238:	b80d883a 	mov	r6,r23
     23c:	800f883a 	mov	r7,r16
     240:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 106, 88, 81, 88, 0xffff, 0);
     244:	05001444 	movi	r20,81
     248:	dc800015 	stw	r18,0(sp)
     24c:	dc400115 	stw	r17,4(sp)
     250:	d8000215 	stw	zero,8(sp)
     254:	9809883a 	mov	r4,r19
     258:	800b883a 	mov	r5,r16
     25c:	900d883a 	mov	r6,r18
     260:	a00f883a 	mov	r7,r20
     264:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 81, 88, 75, 77, 0xffff, 0);
     268:	058012c4 	movi	r22,75
     26c:	04001344 	movi	r16,77
     270:	dc000015 	stw	r16,0(sp)
     274:	dc400115 	stw	r17,4(sp)
     278:	d8000215 	stw	zero,8(sp)
     27c:	9809883a 	mov	r4,r19
     280:	a00b883a 	mov	r5,r20
     284:	900d883a 	mov	r6,r18
     288:	b00f883a 	mov	r7,r22
     28c:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 75, 77, 41, 77, 0xffff, 0);
     290:	05400a44 	movi	r21,41
     294:	dc000015 	stw	r16,0(sp)
     298:	dc400115 	stw	r17,4(sp)
     29c:	d8000215 	stw	zero,8(sp)
     2a0:	9809883a 	mov	r4,r19
     2a4:	b00b883a 	mov	r5,r22
     2a8:	800d883a 	mov	r6,r16
     2ac:	a80f883a 	mov	r7,r21
     2b0:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 41, 77, 35, 88, 0xffff, 0);
     2b4:	050008c4 	movi	r20,35
     2b8:	dc800015 	stw	r18,0(sp)
     2bc:	dc400115 	stw	r17,4(sp)
     2c0:	d8000215 	stw	zero,8(sp)
     2c4:	9809883a 	mov	r4,r19
     2c8:	a80b883a 	mov	r5,r21
     2cc:	800d883a 	mov	r6,r16
     2d0:	a00f883a 	mov	r7,r20
     2d4:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 35, 88, 10, 88, 0xffff, 0);
     2d8:	dc800015 	stw	r18,0(sp)
     2dc:	dc400115 	stw	r17,4(sp)
     2e0:	d8000215 	stw	zero,8(sp)
     2e4:	9809883a 	mov	r4,r19
     2e8:	a00b883a 	mov	r5,r20
     2ec:	900d883a 	mov	r6,r18
     2f0:	b80f883a 	mov	r7,r23
     2f4:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 47, 60, 58, 32, 0xffff, 0);
     2f8:	05800bc4 	movi	r22,47
     2fc:	04000f04 	movi	r16,60
     300:	05000e84 	movi	r20,58
     304:	05400804 	movi	r21,32
     308:	dd400015 	stw	r21,0(sp)
     30c:	dc400115 	stw	r17,4(sp)
     310:	d8000215 	stw	zero,8(sp)
     314:	9809883a 	mov	r4,r19
     318:	b00b883a 	mov	r5,r22
     31c:	800d883a 	mov	r6,r16
     320:	a00f883a 	mov	r7,r20
     324:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 58, 32, 69, 60, 0xffff, 0);
     328:	04801144 	movi	r18,69
     32c:	dc000015 	stw	r16,0(sp)
     330:	dc400115 	stw	r17,4(sp)
     334:	d8000215 	stw	zero,8(sp)
     338:	9809883a 	mov	r4,r19
     33c:	a00b883a 	mov	r5,r20
     340:	a80d883a 	mov	r6,r21
     344:	900f883a 	mov	r7,r18
     348:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 69, 60, 47, 60, 0xffff, 0);
     34c:	dc000015 	stw	r16,0(sp)
     350:	dc400115 	stw	r17,4(sp)
     354:	d8000215 	stw	zero,8(sp)
     358:	9809883a 	mov	r4,r19
     35c:	900b883a 	mov	r5,r18
     360:	800d883a 	mov	r6,r16
     364:	b00f883a 	mov	r7,r22
     368:	000191c0 	call	191c <alt_up_pixel_buffer_dma_draw_line>
}
     36c:	dfc00b17 	ldw	ra,44(sp)
     370:	ddc00a17 	ldw	r23,40(sp)
     374:	dd800917 	ldw	r22,36(sp)
     378:	dd400817 	ldw	r21,32(sp)
     37c:	dd000717 	ldw	r20,28(sp)
     380:	dcc00617 	ldw	r19,24(sp)
     384:	dc800517 	ldw	r18,20(sp)
     388:	dc400417 	ldw	r17,16(sp)
     38c:	dc000317 	ldw	r16,12(sp)
     390:	dec00c04 	addi	sp,sp,48
     394:	f800283a 	ret

00000398 <main>:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void)
{
     398:	deffe504 	addi	sp,sp,-108
     39c:	dfc01a15 	stw	ra,104(sp)
     3a0:	dc801915 	stw	r18,100(sp)
     3a4:	dc401815 	stw	r17,96(sp)
     3a8:	dc001715 	stw	r16,92(sp)

	/* used for drawing coordinates */
	int x1, y1, x2, y2, deltax_1, deltax_2, deltay_1, deltay_2, delay = 0;

	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Jashwanth \0";
     3ac:	00c00034 	movhi	r3,0
     3b0:	18d47204 	addi	r3,r3,20936
     3b4:	18800017 	ldw	r2,0(r3)
     3b8:	d8800315 	stw	r2,12(sp)
     3bc:	18800117 	ldw	r2,4(r3)
     3c0:	d8800415 	stw	r2,16(sp)
     3c4:	18800217 	ldw	r2,8(r3)
     3c8:	d8800515 	stw	r2,20(sp)
     3cc:	d8000615 	stw	zero,24(sp)
     3d0:	d8000715 	stw	zero,28(sp)
     3d4:	d8000815 	stw	zero,32(sp)
     3d8:	d8000915 	stw	zero,36(sp)
     3dc:	d8000a15 	stw	zero,40(sp)
     3e0:	d8000b15 	stw	zero,44(sp)
     3e4:	d8000c15 	stw	zero,48(sp)
	char text_bottom_row[40] = "Lokesh \0";
     3e8:	00c00034 	movhi	r3,0
     3ec:	18d47c04 	addi	r3,r3,20976
     3f0:	18800017 	ldw	r2,0(r3)
     3f4:	d8800d15 	stw	r2,52(sp)
     3f8:	18800117 	ldw	r2,4(r3)
     3fc:	d8800e15 	stw	r2,56(sp)
     400:	18800203 	ldbu	r2,8(r3)
     404:	d8800f05 	stb	r2,60(sp)
     408:	d9000f44 	addi	r4,sp,61
     40c:	000b883a 	mov	r5,zero
     410:	018007c4 	movi	r6,31
     414:	00004f40 	call	4f4 <memset>

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     418:	01000034 	movhi	r4,0
     41c:	21143b04 	addi	r4,r4,20716
     420:	00022f00 	call	22f0 <alt_up_pixel_buffer_dma_open_dev>
     424:	1025883a 	mov	r18,r2
	if ( pixel_buffer_dev == NULL)
     428:	1000041e 	bne	r2,zero,43c <main+0xa4>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     42c:	01000034 	movhi	r4,0
     430:	21144104 	addi	r4,r4,20740
     434:	00006a00 	call	6a0 <alt_printf>
     438:	00000306 	br	448 <main+0xb0>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     43c:	01000034 	movhi	r4,0
     440:	21144d04 	addi	r4,r4,20788
     444:	00006a00 	call	6a0 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     448:	9009883a 	mov	r4,r18
     44c:	000b883a 	mov	r5,zero
     450:	00021240 	call	2124 <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     454:	01000034 	movhi	r4,0
     458:	21145804 	addi	r4,r4,20832
     45c:	00018500 	call	1850 <alt_up_char_buffer_open_dev>
     460:	1023883a 	mov	r17,r2
	if (char_buffer_dev == NULL)
     464:	10001926 	beq	r2,zero,4cc <main+0x134>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     468:	01000034 	movhi	r4,0
     46c:	21146a04 	addi	r4,r4,20904
     470:	00006a00 	call	6a0 <alt_printf>
	alt_up_char_buffer_string (char_buffer_dev, text_top_row, 35, 29);
     474:	040008c4 	movi	r16,35
     478:	8809883a 	mov	r4,r17
     47c:	d9400304 	addi	r5,sp,12
     480:	800d883a 	mov	r6,r16
     484:	01c00744 	movi	r7,29
     488:	00017480 	call	1748 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_bottom_row, 35, 30);
     48c:	8809883a 	mov	r4,r17
     490:	d9400d04 	addi	r5,sp,52
     494:	800d883a 	mov	r6,r16
     498:	01c00784 	movi	r7,30
     49c:	00017480 	call	1748 <alt_up_char_buffer_string>

	/* now draw a background box for the text */
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0x187F, 0);
     4a0:	00802004 	movi	r2,128
     4a4:	d8800015 	stw	r2,0(sp)
     4a8:	00861fc4 	movi	r2,6271
     4ac:	d8800115 	stw	r2,4(sp)
     4b0:	d8000215 	stw	zero,8(sp)
     4b4:	9009883a 	mov	r4,r18
     4b8:	01402204 	movi	r5,136
     4bc:	01801c04 	movi	r6,112
     4c0:	01c03204 	movi	r7,200
     4c4:	0001ee00 	call	1ee0 <alt_up_pixel_buffer_dma_draw_box>
     4c8:	00000406 	br	4dc <main+0x144>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     4cc:	01000034 	movhi	r4,0
     4d0:	21145e04 	addi	r4,r4,20856
     4d4:	00006a00 	call	6a0 <alt_printf>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);  */

	/* set the direction in which the box will move */
	deltax_1 = deltax_2 = deltay_1 = deltay_2 = 1;
  
}
     4d8:	00bfffc4 	movi	r2,-1
     4dc:	dfc01a17 	ldw	ra,104(sp)
     4e0:	dc801917 	ldw	r18,100(sp)
     4e4:	dc401817 	ldw	r17,96(sp)
     4e8:	dc001717 	ldw	r16,92(sp)
     4ec:	dec01b04 	addi	sp,sp,108
     4f0:	f800283a 	ret

000004f4 <memset>:
     4f4:	008000c4 	movi	r2,3
     4f8:	29403fcc 	andi	r5,r5,255
     4fc:	2007883a 	mov	r3,r4
     500:	1180022e 	bgeu	r2,r6,50c <memset+0x18>
     504:	2084703a 	and	r2,r4,r2
     508:	10000826 	beq	r2,zero,52c <memset+0x38>
     50c:	30000526 	beq	r6,zero,524 <memset+0x30>
     510:	2805883a 	mov	r2,r5
     514:	30cd883a 	add	r6,r6,r3
     518:	18800005 	stb	r2,0(r3)
     51c:	18c00044 	addi	r3,r3,1
     520:	19bffd1e 	bne	r3,r6,518 <memset+0x24>
     524:	2005883a 	mov	r2,r4
     528:	f800283a 	ret
     52c:	2804923a 	slli	r2,r5,8
     530:	020003c4 	movi	r8,15
     534:	200f883a 	mov	r7,r4
     538:	2884b03a 	or	r2,r5,r2
     53c:	1006943a 	slli	r3,r2,16
     540:	10c6b03a 	or	r3,r2,r3
     544:	41800a2e 	bgeu	r8,r6,570 <memset+0x7c>
     548:	4005883a 	mov	r2,r8
     54c:	31bffc04 	addi	r6,r6,-16
     550:	38c00015 	stw	r3,0(r7)
     554:	38c00115 	stw	r3,4(r7)
     558:	38c00215 	stw	r3,8(r7)
     55c:	38c00315 	stw	r3,12(r7)
     560:	39c00404 	addi	r7,r7,16
     564:	11bff936 	bltu	r2,r6,54c <memset+0x58>
     568:	008000c4 	movi	r2,3
     56c:	1180052e 	bgeu	r2,r6,584 <memset+0x90>
     570:	31bfff04 	addi	r6,r6,-4
     574:	008000c4 	movi	r2,3
     578:	38c00015 	stw	r3,0(r7)
     57c:	39c00104 	addi	r7,r7,4
     580:	11bffb36 	bltu	r2,r6,570 <memset+0x7c>
     584:	3807883a 	mov	r3,r7
     588:	003fe006 	br	50c <memset+0x18>

0000058c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     58c:	deffff04 	addi	sp,sp,-4
     590:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     594:	01000034 	movhi	r4,0
     598:	211c0204 	addi	r4,r4,28680
     59c:	00c00034 	movhi	r3,0
     5a0:	18d4cb04 	addi	r3,r3,21292

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     5a4:	20c00926 	beq	r4,r3,5cc <alt_load+0x40>
     5a8:	01800034 	movhi	r6,0
     5ac:	319c0204 	addi	r6,r6,28680
  {
    while( to != end )
     5b0:	19800626 	beq	r3,r6,5cc <alt_load+0x40>
     5b4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     5b8:	20800017 	ldw	r2,0(r4)
     5bc:	18800015 	stw	r2,0(r3)
     5c0:	1947883a 	add	r3,r3,r5
     5c4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     5c8:	30fffb1e 	bne	r6,r3,5b8 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     5cc:	01000034 	movhi	r4,0
     5d0:	21000804 	addi	r4,r4,32
     5d4:	00c00034 	movhi	r3,0
     5d8:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     5dc:	20c00926 	beq	r4,r3,604 <alt_load+0x78>
     5e0:	01800034 	movhi	r6,0
     5e4:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     5e8:	19800626 	beq	r3,r6,604 <alt_load+0x78>
     5ec:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     5f0:	20800017 	ldw	r2,0(r4)
     5f4:	18800015 	stw	r2,0(r3)
     5f8:	1947883a 	add	r3,r3,r5
     5fc:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     600:	30fffb1e 	bne	r6,r3,5f0 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     604:	01000034 	movhi	r4,0
     608:	21143b04 	addi	r4,r4,20716
     60c:	00c00034 	movhi	r3,0
     610:	18d43b04 	addi	r3,r3,20716

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     614:	20c00926 	beq	r4,r3,63c <alt_load+0xb0>
     618:	01800034 	movhi	r6,0
     61c:	3194cb04 	addi	r6,r6,21292
  {
    while( to != end )
     620:	19800626 	beq	r3,r6,63c <alt_load+0xb0>
     624:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     628:	20800017 	ldw	r2,0(r4)
     62c:	18800015 	stw	r2,0(r3)
     630:	1947883a 	add	r3,r3,r5
     634:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     638:	30fffb1e 	bne	r6,r3,628 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     63c:	00024800 	call	2480 <alt_dcache_flush_all>
  alt_icache_flush_all();
     640:	000256c0 	call	256c <alt_icache_flush_all>
}
     644:	dfc00017 	ldw	ra,0(sp)
     648:	dec00104 	addi	sp,sp,4
     64c:	f800283a 	ret

00000650 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     650:	defffe04 	addi	sp,sp,-8
     654:	dfc00115 	stw	ra,4(sp)
     658:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     65c:	0009883a 	mov	r4,zero
     660:	00008a40 	call	8a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     664:	00008c40 	call	8c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     668:	01800034 	movhi	r6,0
     66c:	31948604 	addi	r6,r6,21016
     670:	3009883a 	mov	r4,r6
     674:	300b883a 	mov	r5,r6
     678:	00025f00 	call	25f0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     67c:	d1274517 	ldw	r4,-25324(gp)
     680:	d1674617 	ldw	r5,-25320(gp)
     684:	d1a74717 	ldw	r6,-25316(gp)
     688:	00003980 	call	398 <main>
     68c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     690:	01000044 	movi	r4,1
     694:	00023a40 	call	23a4 <close>
  exit (result);
     698:	8009883a 	mov	r4,r16
     69c:	0002b300 	call	2b30 <exit>

000006a0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     6a0:	defff804 	addi	sp,sp,-32
     6a4:	dfc00415 	stw	ra,16(sp)
     6a8:	dc800315 	stw	r18,12(sp)
     6ac:	dc400215 	stw	r17,8(sp)
     6b0:	dc000115 	stw	r16,4(sp)
     6b4:	d9400515 	stw	r5,20(sp)
     6b8:	d9800615 	stw	r6,24(sp)
     6bc:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     6c0:	d8800504 	addi	r2,sp,20
     6c4:	d8800015 	stw	r2,0(sp)
     6c8:	2023883a 	mov	r17,r4
     6cc:	00005d06 	br	844 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     6d0:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     6d4:	21003fcc 	andi	r4,r4,255
     6d8:	2100201c 	xori	r4,r4,128
     6dc:	213fe004 	addi	r4,r4,-128
     6e0:	00800944 	movi	r2,37
     6e4:	20800226 	beq	r4,r2,6f0 <alt_printf+0x50>
        {
            alt_putchar(c);
     6e8:	000087c0 	call	87c <alt_putchar>
     6ec:	00005506 	br	844 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     6f0:	89400003 	ldbu	r5,0(r17)
     6f4:	8c400044 	addi	r17,r17,1
     6f8:	29003fcc 	andi	r4,r5,255
     6fc:	2100201c 	xori	r4,r4,128
     700:	213fe004 	addi	r4,r4,-128
     704:	20005726 	beq	r4,zero,864 <alt_printf+0x1c4>
            {
                if (c == '%')
     708:	00800944 	movi	r2,37
     70c:	2080021e 	bne	r4,r2,718 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     710:	000087c0 	call	87c <alt_putchar>
     714:	00004b06 	br	844 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     718:	28c03fcc 	andi	r3,r5,255
     71c:	18c0201c 	xori	r3,r3,128
     720:	18ffe004 	addi	r3,r3,-128
     724:	008018c4 	movi	r2,99
     728:	1880061e 	bne	r3,r2,744 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     72c:	d8c00017 	ldw	r3,0(sp)
     730:	18800104 	addi	r2,r3,4
     734:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     738:	19000017 	ldw	r4,0(r3)
     73c:	000087c0 	call	87c <alt_putchar>
     740:	00004006 	br	844 <alt_printf+0x1a4>
                }
                else if (c == 'x')
     744:	28c03fcc 	andi	r3,r5,255
     748:	18c0201c 	xori	r3,r3,128
     74c:	18ffe004 	addi	r3,r3,-128
     750:	00801e04 	movi	r2,120
     754:	1880231e 	bne	r3,r2,7e4 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     758:	d8c00017 	ldw	r3,0(sp)
     75c:	18800104 	addi	r2,r3,4
     760:	d8800015 	stw	r2,0(sp)
     764:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     768:	90000326 	beq	r18,zero,778 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     76c:	90bc002c 	andhi	r2,r18,61440
     770:	10000426 	beq	r2,zero,784 <alt_printf+0xe4>
     774:	00003906 	br	85c <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     778:	01000c04 	movi	r4,48
     77c:	000087c0 	call	87c <alt_putchar>
     780:	00003006 	br	844 <alt_printf+0x1a4>
                        continue;
     784:	04000704 	movi	r16,28
     788:	013fff04 	movi	r4,-4
     78c:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     790:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     794:	1c04983a 	sll	r2,r3,r16
     798:	9084703a 	and	r2,r18,r2
     79c:	103ffc26 	beq	r2,zero,790 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     7a0:	80002816 	blt	r16,zero,844 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     7a4:	008003c4 	movi	r2,15
     7a8:	1404983a 	sll	r2,r2,r16
     7ac:	9084703a 	and	r2,r18,r2
     7b0:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     7b4:	00800244 	movi	r2,9
     7b8:	10c00236 	bltu	r2,r3,7c4 <alt_printf+0x124>
                            c = '0' + digit;
     7bc:	19000c04 	addi	r4,r3,48
     7c0:	00000106 	br	7c8 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     7c4:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     7c8:	21003fcc 	andi	r4,r4,255
     7cc:	2100201c 	xori	r4,r4,128
     7d0:	213fe004 	addi	r4,r4,-128
     7d4:	000087c0 	call	87c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     7d8:	843fff04 	addi	r16,r16,-4
     7dc:	80001916 	blt	r16,zero,844 <alt_printf+0x1a4>
     7e0:	003ff006 	br	7a4 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     7e4:	28c03fcc 	andi	r3,r5,255
     7e8:	18c0201c 	xori	r3,r3,128
     7ec:	18ffe004 	addi	r3,r3,-128
     7f0:	00801cc4 	movi	r2,115
     7f4:	1880131e 	bne	r3,r2,844 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     7f8:	d8800017 	ldw	r2,0(sp)
     7fc:	10c00104 	addi	r3,r2,4
     800:	d8c00015 	stw	r3,0(sp)
     804:	14000017 	ldw	r16,0(r2)

                    while(*s)
     808:	81000003 	ldbu	r4,0(r16)
     80c:	20803fcc 	andi	r2,r4,255
     810:	1080201c 	xori	r2,r2,128
     814:	10bfe004 	addi	r2,r2,-128
     818:	10000a26 	beq	r2,zero,844 <alt_printf+0x1a4>
                      alt_putchar(*s++);
     81c:	84000044 	addi	r16,r16,1
     820:	21003fcc 	andi	r4,r4,255
     824:	2100201c 	xori	r4,r4,128
     828:	213fe004 	addi	r4,r4,-128
     82c:	000087c0 	call	87c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     830:	81000003 	ldbu	r4,0(r16)
     834:	20803fcc 	andi	r2,r4,255
     838:	1080201c 	xori	r2,r2,128
     83c:	10bfe004 	addi	r2,r2,-128
     840:	103ff61e 	bne	r2,zero,81c <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     844:	89000003 	ldbu	r4,0(r17)
     848:	20803fcc 	andi	r2,r4,255
     84c:	1080201c 	xori	r2,r2,128
     850:	10bfe004 	addi	r2,r2,-128
     854:	103f9e1e 	bne	r2,zero,6d0 <alt_printf+0x30>
     858:	00000206 	br	864 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     85c:	04000704 	movi	r16,28
     860:	003fd006 	br	7a4 <alt_printf+0x104>
     864:	dfc00417 	ldw	ra,16(sp)
     868:	dc800317 	ldw	r18,12(sp)
     86c:	dc400217 	ldw	r17,8(sp)
     870:	dc000117 	ldw	r16,4(sp)
     874:	dec00804 	addi	sp,sp,32
     878:	f800283a 	ret

0000087c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     87c:	deffff04 	addi	sp,sp,-4
     880:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     884:	00800034 	movhi	r2,0
     888:	109bfd04 	addi	r2,r2,28660
     88c:	10800017 	ldw	r2,0(r2)
     890:	11400217 	ldw	r5,8(r2)
     894:	0002c7c0 	call	2c7c <putc>
#endif
}
     898:	dfc00017 	ldw	ra,0(sp)
     89c:	dec00104 	addi	sp,sp,4
     8a0:	f800283a 	ret

000008a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     8a4:	deffff04 	addi	sp,sp,-4
     8a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     8ac:	00029c40 	call	29c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     8b0:	00800044 	movi	r2,1
     8b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     8b8:	dfc00017 	ldw	ra,0(sp)
     8bc:	dec00104 	addi	sp,sp,4
     8c0:	f800283a 	ret

000008c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     8c4:	defffd04 	addi	sp,sp,-12
     8c8:	dfc00215 	stw	ra,8(sp)
     8cc:	dc400115 	stw	r17,4(sp)
     8d0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     8d4:	04000204 	movi	r16,8
     8d8:	01040034 	movhi	r4,4096
     8dc:	21080004 	addi	r4,r4,8192
     8e0:	000b883a 	mov	r5,zero
     8e4:	000d883a 	mov	r6,zero
     8e8:	800f883a 	mov	r7,r16
     8ec:	000116c0 	call	116c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     8f0:	04400034 	movhi	r17,0
     8f4:	8c54d504 	addi	r17,r17,21332
     8f8:	8809883a 	mov	r4,r17
     8fc:	000b883a 	mov	r5,zero
     900:	800d883a 	mov	r6,r16
     904:	0000c680 	call	c68 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     908:	04000034 	movhi	r16,0
     90c:	841bf604 	addi	r16,r16,28632
     910:	893ff604 	addi	r4,r17,-40
     914:	800b883a 	mov	r5,r16
     918:	000248c0 	call	248c <alt_dev_llist_insert>
     91c:	01000034 	movhi	r4,0
     920:	2118e304 	addi	r4,r4,25484
     924:	800b883a 	mov	r5,r16
     928:	000248c0 	call	248c <alt_dev_llist_insert>
     92c:	01000034 	movhi	r4,0
     930:	2118ef04 	addi	r4,r4,25532
     934:	800b883a 	mov	r5,r16
     938:	000248c0 	call	248c <alt_dev_llist_insert>
     93c:	01000034 	movhi	r4,0
     940:	2118fb04 	addi	r4,r4,25580
     944:	800b883a 	mov	r5,r16
     948:	000248c0 	call	248c <alt_dev_llist_insert>
     94c:	01000034 	movhi	r4,0
     950:	21190604 	addi	r4,r4,25624
     954:	800b883a 	mov	r5,r16
     958:	000248c0 	call	248c <alt_dev_llist_insert>
     95c:	01000034 	movhi	r4,0
     960:	21191104 	addi	r4,r4,25668
     964:	800b883a 	mov	r5,r16
     968:	000248c0 	call	248c <alt_dev_llist_insert>
     96c:	01000034 	movhi	r4,0
     970:	21191c04 	addi	r4,r4,25712
     974:	800b883a 	mov	r5,r16
     978:	000248c0 	call	248c <alt_dev_llist_insert>
     97c:	01000034 	movhi	r4,0
     980:	21192704 	addi	r4,r4,25756
     984:	800b883a 	mov	r5,r16
     988:	000248c0 	call	248c <alt_dev_llist_insert>
     98c:	01000034 	movhi	r4,0
     990:	21193204 	addi	r4,r4,25800
     994:	800b883a 	mov	r5,r16
     998:	000248c0 	call	248c <alt_dev_llist_insert>
     99c:	01000034 	movhi	r4,0
     9a0:	21193d04 	addi	r4,r4,25844
     9a4:	800b883a 	mov	r5,r16
     9a8:	000248c0 	call	248c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     9ac:	04400034 	movhi	r17,0
     9b0:	8c594804 	addi	r17,r17,25888
     9b4:	8809883a 	mov	r4,r17
     9b8:	00014b80 	call	14b8 <alt_up_ps2_init>
     9bc:	8809883a 	mov	r4,r17
     9c0:	800b883a 	mov	r5,r16
     9c4:	000248c0 	call	248c <alt_dev_llist_insert>
     9c8:	01000034 	movhi	r4,0
     9cc:	21195604 	addi	r4,r4,25944
     9d0:	800b883a 	mov	r5,r16
     9d4:	000248c0 	call	248c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     9d8:	01000034 	movhi	r4,0
     9dc:	21196104 	addi	r4,r4,25988
     9e0:	20800a17 	ldw	r2,40(r4)
     9e4:	10800104 	addi	r2,r2,4
     9e8:	10c0000b 	ldhu	r3,0(r2)
     9ec:	20c00c15 	stw	r3,48(r4)
     9f0:	10800017 	ldw	r2,0(r2)
     9f4:	100ad43a 	srli	r5,r2,16
     9f8:	21400d15 	stw	r5,52(r4)
     9fc:	00801004 	movi	r2,64
     a00:	10c00436 	bltu	r2,r3,a14 <alt_sys_init+0x150>
     a04:	00800fc4 	movi	r2,63
     a08:	20800f15 	stw	r2,60(r4)
     a0c:	00800184 	movi	r2,6
     a10:	20801015 	stw	r2,64(r4)
     a14:	00800804 	movi	r2,32
     a18:	11400436 	bltu	r2,r5,a2c <alt_sys_init+0x168>
     a1c:	00c007c4 	movi	r3,31
     a20:	00800034 	movhi	r2,0
     a24:	10996104 	addi	r2,r2,25988
     a28:	10c01115 	stw	r3,68(r2)
     a2c:	04000034 	movhi	r16,0
     a30:	84196104 	addi	r16,r16,25988
     a34:	8009883a 	mov	r4,r16
     a38:	00018700 	call	1870 <alt_up_char_buffer_init>
     a3c:	8009883a 	mov	r4,r16
     a40:	01400034 	movhi	r5,0
     a44:	295bf604 	addi	r5,r5,28632
     a48:	000248c0 	call	248c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     a4c:	01800034 	movhi	r6,0
     a50:	31997304 	addi	r6,r6,26060
     a54:	30c00a17 	ldw	r3,40(r6)
     a58:	18800017 	ldw	r2,0(r3)
     a5c:	30800b15 	stw	r2,44(r6)
     a60:	18800117 	ldw	r2,4(r3)
     a64:	30800c15 	stw	r2,48(r6)
     a68:	19000204 	addi	r4,r3,8
     a6c:	2080000b 	ldhu	r2,0(r4)
     a70:	30800f15 	stw	r2,60(r6)
     a74:	20800017 	ldw	r2,0(r4)
     a78:	1004d43a 	srli	r2,r2,16
     a7c:	30801015 	stw	r2,64(r6)
     a80:	18c00304 	addi	r3,r3,12
     a84:	18800017 	ldw	r2,0(r3)
     a88:	1005d07a 	srai	r2,r2,1
     a8c:	01000044 	movi	r4,1
     a90:	1104703a 	and	r2,r2,r4
     a94:	30800d15 	stw	r2,52(r6)
     a98:	18800017 	ldw	r2,0(r3)
     a9c:	1005d13a 	srai	r2,r2,4
     aa0:	114003cc 	andi	r5,r2,15
     aa4:	31400e15 	stw	r5,56(r6)
     aa8:	1a000017 	ldw	r8,0(r3)
     aac:	400ed43a 	srli	r7,r8,16
     ab0:	2900021e 	bne	r5,r4,abc <alt_sys_init+0x1f8>
     ab4:	30001115 	stw	zero,68(r6)
     ab8:	00000b06 	br	ae8 <alt_sys_init+0x224>
     abc:	00800084 	movi	r2,2
     ac0:	2880051e 	bne	r5,r2,ad8 <alt_sys_init+0x214>
     ac4:	00c00044 	movi	r3,1
     ac8:	00800034 	movhi	r2,0
     acc:	10997304 	addi	r2,r2,26060
     ad0:	10c01115 	stw	r3,68(r2)
     ad4:	00000406 	br	ae8 <alt_sys_init+0x224>
     ad8:	00c00084 	movi	r3,2
     adc:	00800034 	movhi	r2,0
     ae0:	10997304 	addi	r2,r2,26060
     ae4:	10c01115 	stw	r3,68(r2)
     ae8:	01000034 	movhi	r4,0
     aec:	21197304 	addi	r4,r4,26060
     af0:	38c03fcc 	andi	r3,r7,255
     af4:	01800804 	movi	r6,32
     af8:	30c5c83a 	sub	r2,r6,r3
     afc:	017fffc4 	movi	r5,-1
     b00:	2884d83a 	srl	r2,r5,r2
     b04:	20801215 	stw	r2,72(r4)
     b08:	20801117 	ldw	r2,68(r4)
     b0c:	1887883a 	add	r3,r3,r2
     b10:	20c01315 	stw	r3,76(r4)
     b14:	4004d63a 	srli	r2,r8,24
     b18:	308dc83a 	sub	r6,r6,r2
     b1c:	298ad83a 	srl	r5,r5,r6
     b20:	21401415 	stw	r5,80(r4)
     b24:	01400034 	movhi	r5,0
     b28:	295bf604 	addi	r5,r5,28632
     b2c:	000248c0 	call	248c <alt_dev_llist_insert>
}
     b30:	dfc00217 	ldw	ra,8(sp)
     b34:	dc400117 	ldw	r17,4(sp)
     b38:	dc000017 	ldw	r16,0(sp)
     b3c:	dec00304 	addi	sp,sp,12
     b40:	f800283a 	ret

00000b44 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     b44:	deffff04 	addi	sp,sp,-4
     b48:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     b4c:	21000017 	ldw	r4,0(r4)
     b50:	21000a04 	addi	r4,r4,40
     b54:	0000e140 	call	e14 <altera_avalon_jtag_uart_ioctl>
}
     b58:	dfc00017 	ldw	ra,0(sp)
     b5c:	dec00104 	addi	sp,sp,4
     b60:	f800283a 	ret

00000b64 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     b64:	deffff04 	addi	sp,sp,-4
     b68:	dfc00015 	stw	ra,0(sp)
     b6c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     b70:	21000017 	ldw	r4,0(r4)
     b74:	21000a04 	addi	r4,r4,40
     b78:	11400217 	ldw	r5,8(r2)
     b7c:	0000bdc0 	call	bdc <altera_avalon_jtag_uart_close>
}
     b80:	dfc00017 	ldw	ra,0(sp)
     b84:	dec00104 	addi	sp,sp,4
     b88:	f800283a 	ret

00000b8c <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     b8c:	deffff04 	addi	sp,sp,-4
     b90:	dfc00015 	stw	ra,0(sp)
     b94:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     b98:	21000017 	ldw	r4,0(r4)
     b9c:	21000a04 	addi	r4,r4,40
     ba0:	11c00217 	ldw	r7,8(r2)
     ba4:	0000ff00 	call	ff0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     ba8:	dfc00017 	ldw	ra,0(sp)
     bac:	dec00104 	addi	sp,sp,4
     bb0:	f800283a 	ret

00000bb4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     bb4:	deffff04 	addi	sp,sp,-4
     bb8:	dfc00015 	stw	ra,0(sp)
     bbc:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     bc0:	21000017 	ldw	r4,0(r4)
     bc4:	21000a04 	addi	r4,r4,40
     bc8:	11c00217 	ldw	r7,8(r2)
     bcc:	0000e880 	call	e88 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     bd0:	dfc00017 	ldw	ra,0(sp)
     bd4:	dec00104 	addi	sp,sp,4
     bd8:	f800283a 	ret

00000bdc <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     bdc:	21800c17 	ldw	r6,48(r4)
     be0:	2950000c 	andi	r5,r5,16384
     be4:	280b003a 	cmpeq	r5,r5,zero
     be8:	00000306 	br	bf8 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     bec:	2800021e 	bne	r5,zero,bf8 <altera_avalon_jtag_uart_close+0x1c>
     bf0:	00bffd44 	movi	r2,-11
     bf4:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     bf8:	20800d17 	ldw	r2,52(r4)
     bfc:	11800326 	beq	r2,r6,c0c <altera_avalon_jtag_uart_close+0x30>
     c00:	20c00917 	ldw	r3,36(r4)
     c04:	20800117 	ldw	r2,4(r4)
     c08:	18bff836 	bltu	r3,r2,bec <altera_avalon_jtag_uart_close+0x10>
     c0c:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     c10:	f800283a 	ret

00000c14 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     c14:	20800017 	ldw	r2,0(r4)
     c18:	10c00104 	addi	r3,r2,4
     c1c:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     c20:	01410004 	movi	r5,1024
     c24:	1144703a 	and	r2,r2,r5
     c28:	10000526 	beq	r2,zero,c40 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     c2c:	20800817 	ldw	r2,32(r4)
     c30:	1144b03a 	or	r2,r2,r5
     c34:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     c38:	20000915 	stw	zero,36(r4)
     c3c:	00000606 	br	c58 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     c40:	20c00917 	ldw	r3,36(r4)
     c44:	00a00034 	movhi	r2,32768
     c48:	10bfff04 	addi	r2,r2,-4
     c4c:	10c00236 	bltu	r2,r3,c58 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     c50:	18800044 	addi	r2,r3,1
     c54:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     c58:	00800074 	movhi	r2,1
     c5c:	10a33d04 	addi	r2,r2,-29452
     c60:	10800017 	ldw	r2,0(r2)
     c64:	f800283a 	ret

00000c68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     c68:	defffe04 	addi	sp,sp,-8
     c6c:	dfc00115 	stw	ra,4(sp)
     c70:	dc000015 	stw	r16,0(sp)
     c74:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     c78:	00c00044 	movi	r3,1
     c7c:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     c80:	20800017 	ldw	r2,0(r4)
     c84:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     c88:	3009883a 	mov	r4,r6
     c8c:	800b883a 	mov	r5,r16
     c90:	01800034 	movhi	r6,0
     c94:	31833804 	addi	r6,r6,3296
     c98:	00026880 	call	2688 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     c9c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     ca0:	81000204 	addi	r4,r16,8
     ca4:	00800074 	movhi	r2,1
     ca8:	10a33d04 	addi	r2,r2,-29452
     cac:	11400017 	ldw	r5,0(r2)
     cb0:	01800034 	movhi	r6,0
     cb4:	31830504 	addi	r6,r6,3092
     cb8:	800f883a 	mov	r7,r16
     cbc:	00023100 	call	2310 <alt_alarm_start>
     cc0:	1000030e 	bge	r2,zero,cd0 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     cc4:	00a00034 	movhi	r2,32768
     cc8:	10bfffc4 	addi	r2,r2,-1
     ccc:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     cd0:	dfc00117 	ldw	ra,4(sp)
     cd4:	dc000017 	ldw	r16,0(sp)
     cd8:	dec00204 	addi	sp,sp,8
     cdc:	f800283a 	ret

00000ce0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     ce0:	22000017 	ldw	r8,0(r4)
     ce4:	03800104 	movi	r14,4
     ce8:	4399883a 	add	r12,r8,r14
     cec:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     cf0:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     cf4:	5880c00c 	andi	r2,r11,768
     cf8:	10004526 	beq	r2,zero,e10 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     cfc:	5880400c 	andi	r2,r11,256
     d00:	10002126 	beq	r2,zero,d88 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     d04:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     d08:	10800044 	addi	r2,r2,1
     d0c:	1081ffcc 	andi	r2,r2,2047
     d10:	20c00b17 	ldw	r3,44(r4)
     d14:	10c01626 	beq	r2,r3,d70 <altera_avalon_jtag_uart_irq+0x90>
     d18:	02a00014 	movui	r10,32768
     d1c:	02400e04 	movi	r9,56
     d20:	01c00044 	movi	r7,1
     d24:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     d28:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     d2c:	2a84703a 	and	r2,r5,r10
     d30:	10000d26 	beq	r2,zero,d68 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     d34:	20800a17 	ldw	r2,40(r4)
     d38:	1105883a 	add	r2,r2,r4
     d3c:	1245883a 	add	r2,r2,r9
     d40:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     d44:	20800a17 	ldw	r2,40(r4)
     d48:	11c5883a 	add	r2,r2,r7
     d4c:	1184703a 	and	r2,r2,r6
     d50:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     d54:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     d58:	11c5883a 	add	r2,r2,r7
     d5c:	1184703a 	and	r2,r2,r6
     d60:	20c00b17 	ldw	r3,44(r4)
     d64:	10fff01e 	bne	r2,r3,d28 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     d68:	2b44703a 	and	r2,r5,r13
     d6c:	10000626 	beq	r2,zero,d88 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     d70:	20800817 	ldw	r2,32(r4)
     d74:	00ffff84 	movi	r3,-2
     d78:	10c4703a 	and	r2,r2,r3
     d7c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     d80:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     d84:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     d88:	5880800c 	andi	r2,r11,512
     d8c:	103fd826 	beq	r2,zero,cf0 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     d90:	5b44703a 	and	r2,r11,r13
     d94:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
     d98:	283fd526 	beq	r5,zero,cf0 <altera_avalon_jtag_uart_irq+0x10>
     d9c:	20c00d17 	ldw	r3,52(r4)
     da0:	20800c17 	ldw	r2,48(r4)
     da4:	18801126 	beq	r3,r2,dec <altera_avalon_jtag_uart_irq+0x10c>
     da8:	02420e04 	movi	r9,2104
     dac:	01800044 	movi	r6,1
     db0:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     db4:	20800d17 	ldw	r2,52(r4)
     db8:	1105883a 	add	r2,r2,r4
     dbc:	1245883a 	add	r2,r2,r9
     dc0:	10800007 	ldb	r2,0(r2)
     dc4:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     dc8:	20800d17 	ldw	r2,52(r4)
     dcc:	1185883a 	add	r2,r2,r6
     dd0:	11c4703a 	and	r2,r2,r7
     dd4:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     dd8:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     ddc:	283fc426 	beq	r5,zero,cf0 <altera_avalon_jtag_uart_irq+0x10>
     de0:	20c00d17 	ldw	r3,52(r4)
     de4:	20800c17 	ldw	r2,48(r4)
     de8:	18bff21e 	bne	r3,r2,db4 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     dec:	20c00817 	ldw	r3,32(r4)
     df0:	00bfff44 	movi	r2,-3
     df4:	1886703a 	and	r3,r3,r2
     df8:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     dfc:	20800017 	ldw	r2,0(r4)
     e00:	1385883a 	add	r2,r2,r14
     e04:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     e08:	60800037 	ldwio	r2,0(r12)
     e0c:	003fb806 	br	cf0 <altera_avalon_jtag_uart_irq+0x10>
     e10:	f800283a 	ret

00000e14 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     e14:	009a8044 	movi	r2,27137
     e18:	28800326 	beq	r5,r2,e28 <altera_avalon_jtag_uart_ioctl+0x14>
     e1c:	009a8084 	movi	r2,27138
     e20:	2880171e 	bne	r5,r2,e80 <altera_avalon_jtag_uart_ioctl+0x6c>
     e24:	00000d06 	br	e5c <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     e28:	20c00117 	ldw	r3,4(r4)
     e2c:	00a00034 	movhi	r2,32768
     e30:	10bfffc4 	addi	r2,r2,-1
     e34:	18801226 	beq	r3,r2,e80 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     e38:	31800017 	ldw	r6,0(r6)
     e3c:	30ffff84 	addi	r3,r6,-2
     e40:	10bfff44 	addi	r2,r2,-3
     e44:	10c0022e 	bgeu	r2,r3,e50 <altera_avalon_jtag_uart_ioctl+0x3c>
     e48:	01a00034 	movhi	r6,32768
     e4c:	31bfff84 	addi	r6,r6,-2
     e50:	21800115 	stw	r6,4(r4)
     e54:	0005883a 	mov	r2,zero
     e58:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     e5c:	20c00117 	ldw	r3,4(r4)
     e60:	00a00034 	movhi	r2,32768
     e64:	10bfffc4 	addi	r2,r2,-1
     e68:	18800526 	beq	r3,r2,e80 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     e6c:	20800917 	ldw	r2,36(r4)
     e70:	10c5803a 	cmpltu	r2,r2,r3
     e74:	30800015 	stw	r2,0(r6)
     e78:	0005883a 	mov	r2,zero
     e7c:	f800283a 	ret
     e80:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     e84:	f800283a 	ret

00000e88 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     e88:	defff604 	addi	sp,sp,-40
     e8c:	dfc00915 	stw	ra,36(sp)
     e90:	df000815 	stw	fp,32(sp)
     e94:	ddc00715 	stw	r23,28(sp)
     e98:	dd800615 	stw	r22,24(sp)
     e9c:	dd400515 	stw	r21,20(sp)
     ea0:	dd000415 	stw	r20,16(sp)
     ea4:	dcc00315 	stw	r19,12(sp)
     ea8:	dc800215 	stw	r18,8(sp)
     eac:	dc400115 	stw	r17,4(sp)
     eb0:	dc000015 	stw	r16,0(sp)
     eb4:	2025883a 	mov	r18,r4
     eb8:	282f883a 	mov	r23,r5
     ebc:	3027883a 	mov	r19,r6
     ec0:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     ec4:	0180220e 	bge	zero,r6,f50 <altera_avalon_jtag_uart_read+0xc8>
     ec8:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     ecc:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
     ed0:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
     ed4:	b4400236 	bltu	r22,r17,ee0 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
     ed8:	b461c83a 	sub	r16,r22,r17
     edc:	00000206 	br	ee8 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     ee0:	00820004 	movi	r2,2048
     ee4:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
     ee8:	80000d26 	beq	r16,zero,f20 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
     eec:	9829883a 	mov	r20,r19
     ef0:	9c001d36 	bltu	r19,r16,f68 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     ef4:	91400e04 	addi	r5,r18,56
     ef8:	a809883a 	mov	r4,r21
     efc:	2c4b883a 	add	r5,r5,r17
     f00:	800d883a 	mov	r6,r16
     f04:	0002bdc0 	call	2bdc <memcpy>
      ptr   += n;
     f08:	ac2b883a 	add	r21,r21,r16
      space -= n;
     f0c:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f10:	8445883a 	add	r2,r16,r17
     f14:	1081ffcc 	andi	r2,r2,2047
     f18:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
     f1c:	04ffeb16 	blt	zero,r19,ecc <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
     f20:	adc01c1e 	bne	r21,r23,f94 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     f24:	e090000c 	andi	r2,fp,16384
     f28:	10000d1e 	bne	r2,zero,f60 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     f2c:	90800a17 	ldw	r2,40(r18)
     f30:	b080031e 	bne	r22,r2,f40 <altera_avalon_jtag_uart_read+0xb8>
     f34:	90c00917 	ldw	r3,36(r18)
     f38:	90800117 	ldw	r2,4(r18)
     f3c:	18bffb36 	bltu	r3,r2,f2c <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     f40:	90800a17 	ldw	r2,40(r18)
     f44:	b0800426 	beq	r22,r2,f58 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     f48:	04c0030e 	bge	zero,r19,f58 <altera_avalon_jtag_uart_read+0xd0>
     f4c:	003fde06 	br	ec8 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
     f50:	3890000c 	andi	r2,r7,16384
     f54:	1000021e 	bne	r2,zero,f60 <altera_avalon_jtag_uart_read+0xd8>
     f58:	00bffec4 	movi	r2,-5
     f5c:	00001806 	br	fc0 <altera_avalon_jtag_uart_read+0x138>
     f60:	00bffd44 	movi	r2,-11
     f64:	00001606 	br	fc0 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     f68:	91400e04 	addi	r5,r18,56
     f6c:	a809883a 	mov	r4,r21
     f70:	894b883a 	add	r5,r17,r5
     f74:	980d883a 	mov	r6,r19
     f78:	0002bdc0 	call	2bdc <memcpy>
      ptr   += n;
     f7c:	aceb883a 	add	r21,r21,r19
      space -= n;
     f80:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f84:	a445883a 	add	r2,r20,r17
     f88:	1081ffcc 	andi	r2,r2,2047
     f8c:	90800b15 	stw	r2,44(r18)
     f90:	003fe306 	br	f20 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     f94:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f98:	00bfff84 	movi	r2,-2
     f9c:	2084703a 	and	r2,r4,r2
     fa0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     fa4:	90800817 	ldw	r2,32(r18)
     fa8:	10800054 	ori	r2,r2,1
     fac:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     fb0:	90c00017 	ldw	r3,0(r18)
     fb4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     fb8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
     fbc:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
     fc0:	dfc00917 	ldw	ra,36(sp)
     fc4:	df000817 	ldw	fp,32(sp)
     fc8:	ddc00717 	ldw	r23,28(sp)
     fcc:	dd800617 	ldw	r22,24(sp)
     fd0:	dd400517 	ldw	r21,20(sp)
     fd4:	dd000417 	ldw	r20,16(sp)
     fd8:	dcc00317 	ldw	r19,12(sp)
     fdc:	dc800217 	ldw	r18,8(sp)
     fe0:	dc400117 	ldw	r17,4(sp)
     fe4:	dc000017 	ldw	r16,0(sp)
     fe8:	dec00a04 	addi	sp,sp,40
     fec:	f800283a 	ret

00000ff0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     ff0:	defff804 	addi	sp,sp,-32
     ff4:	dfc00715 	stw	ra,28(sp)
     ff8:	dd800615 	stw	r22,24(sp)
     ffc:	dd400515 	stw	r21,20(sp)
    1000:	dd000415 	stw	r20,16(sp)
    1004:	dcc00315 	stw	r19,12(sp)
    1008:	dc800215 	stw	r18,8(sp)
    100c:	dc400115 	stw	r17,4(sp)
    1010:	dc000015 	stw	r16,0(sp)
    1014:	2021883a 	mov	r16,r4
    1018:	282d883a 	mov	r22,r5
    101c:	3011883a 	mov	r8,r6
    1020:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1024:	01800616 	blt	zero,r6,1040 <altera_avalon_jtag_uart_write+0x50>
    1028:	2829883a 	mov	r20,r5
    102c:	00002106 	br	10b4 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    1030:	a585c83a 	sub	r2,r20,r22
    1034:	00004306 	br	1144 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    1038:	00bffd44 	movi	r2,-11
    103c:	00004106 	br	1144 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1040:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1044:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    1048:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    104c:	9140032e 	bgeu	r18,r5,105c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1050:	2c85c83a 	sub	r2,r5,r18
    1054:	11bfffc4 	addi	r6,r2,-1
    1058:	00000606 	br	1074 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    105c:	28000326 	beq	r5,zero,106c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1060:	00820004 	movi	r2,2048
    1064:	148dc83a 	sub	r6,r2,r18
    1068:	00000206 	br	1074 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    106c:	0081ffc4 	movi	r2,2047
    1070:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    1074:	30002626 	beq	r6,zero,1110 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    1078:	4027883a 	mov	r19,r8
    107c:	3023883a 	mov	r17,r6
    1080:	4180012e 	bgeu	r8,r6,1088 <altera_avalon_jtag_uart_write+0x98>
    1084:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    1088:	81020e04 	addi	r4,r16,2104
    108c:	2489883a 	add	r4,r4,r18
    1090:	a00b883a 	mov	r5,r20
    1094:	880d883a 	mov	r6,r17
    1098:	0002bdc0 	call	2bdc <memcpy>
      ptr   += n;
    109c:	a469883a 	add	r20,r20,r17
      count -= n;
    10a0:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10a4:	9445883a 	add	r2,r18,r17
    10a8:	1081ffcc 	andi	r2,r2,2047
    10ac:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    10b0:	023fe416 	blt	zero,r8,1044 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    10b4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    10b8:	00bfff84 	movi	r2,-2
    10bc:	2084703a 	and	r2,r4,r2
    10c0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    10c4:	80800817 	ldw	r2,32(r16)
    10c8:	10800094 	ori	r2,r2,2
    10cc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10d0:	80c00017 	ldw	r3,0(r16)
    10d4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10d8:	2001703a 	wrctl	status,r4
    10dc:	00000706 	br	10fc <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    10e0:	80800d17 	ldw	r2,52(r16)
    10e4:	1140031e 	bne	r2,r5,10f4 <altera_avalon_jtag_uart_write+0x104>
    10e8:	80c00917 	ldw	r3,36(r16)
    10ec:	80800117 	ldw	r2,4(r16)
    10f0:	18bffb36 	bltu	r3,r2,10e0 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    10f4:	80800d17 	ldw	r2,52(r16)
    10f8:	117fed1e 	bne	r2,r5,10b0 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    10fc:	b53fcc1e 	bne	r22,r20,1030 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    1100:	a890000c 	andi	r2,r21,16384
    1104:	103fcc1e 	bne	r2,zero,1038 <altera_avalon_jtag_uart_write+0x48>
    1108:	00bffec4 	movi	r2,-5
    110c:	00000d06 	br	1144 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1110:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1114:	00bfff84 	movi	r2,-2
    1118:	2084703a 	and	r2,r4,r2
    111c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1120:	80800817 	ldw	r2,32(r16)
    1124:	10800094 	ori	r2,r2,2
    1128:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    112c:	80c00017 	ldw	r3,0(r16)
    1130:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1134:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    1138:	a890000c 	andi	r2,r21,16384
    113c:	103fe826 	beq	r2,zero,10e0 <altera_avalon_jtag_uart_write+0xf0>
    1140:	003fee06 	br	10fc <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    1144:	dfc00717 	ldw	ra,28(sp)
    1148:	dd800617 	ldw	r22,24(sp)
    114c:	dd400517 	ldw	r21,20(sp)
    1150:	dd000417 	ldw	r20,16(sp)
    1154:	dcc00317 	ldw	r19,12(sp)
    1158:	dc800217 	ldw	r18,8(sp)
    115c:	dc400117 	ldw	r17,4(sp)
    1160:	dc000017 	ldw	r16,0(sp)
    1164:	dec00804 	addi	sp,sp,32
    1168:	f800283a 	ret

0000116c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    116c:	deffff04 	addi	sp,sp,-4
    1170:	dfc00015 	stw	ra,0(sp)
    1174:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1178:	00c00074 	movhi	r3,1
    117c:	18e33d04 	addi	r3,r3,-29452
    1180:	18800017 	ldw	r2,0(r3)
    1184:	1000011e 	bne	r2,zero,118c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    1188:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    118c:	008001c4 	movi	r2,7
    1190:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1194:	3009883a 	mov	r4,r6
    1198:	01800034 	movhi	r6,0
    119c:	31846c04 	addi	r6,r6,4528
    11a0:	00026880 	call	2688 <alt_irq_register>
#endif  
}
    11a4:	dfc00017 	ldw	ra,0(sp)
    11a8:	dec00104 	addi	sp,sp,4
    11ac:	f800283a 	ret

000011b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    11b0:	defffe04 	addi	sp,sp,-8
    11b4:	dfc00115 	stw	ra,4(sp)
    11b8:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    11bc:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    11c0:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    11c4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11c8:	00bfff84 	movi	r2,-2
    11cc:	8084703a 	and	r2,r16,r2
    11d0:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    11d4:	00029180 	call	2918 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11d8:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    11dc:	dfc00117 	ldw	ra,4(sp)
    11e0:	dc000017 	ldw	r16,0(sp)
    11e4:	dec00204 	addi	sp,sp,8
    11e8:	f800283a 	ret

000011ec <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    11ec:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    11f0:	1004c03a 	cmpne	r2,r2,zero
    11f4:	f800283a 	ret

000011f8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    11f8:	2080004c 	andi	r2,r4,1
    11fc:	f800283a 	ret

00001200 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1200:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    1204:	1004c03a 	cmpne	r2,r2,zero
    1208:	f800283a 	ret

0000120c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    120c:	2004d43a 	srli	r2,r4,16
    1210:	f800283a 	ret

00001214 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    1214:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    1218:	1004c03a 	cmpne	r2,r2,zero
    121c:	f800283a 	ret

00001220 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    1220:	20803fcc 	andi	r2,r4,255
    1224:	f800283a 	ret

00001228 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1228:	deffff04 	addi	sp,sp,-4
    122c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1230:	01400034 	movhi	r5,0
    1234:	295bf604 	addi	r5,r5,28632
    1238:	00024fc0 	call	24fc <alt_find_dev>

  return dev;
}
    123c:	dfc00017 	ldw	ra,0(sp)
    1240:	dec00104 	addi	sp,sp,4
    1244:	f800283a 	ret

00001248 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1248:	defffe04 	addi	sp,sp,-8
    124c:	dfc00115 	stw	ra,4(sp)
    1250:	dc000015 	stw	r16,0(sp)
    1254:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1258:	81000037 	ldwio	r4,0(r16)
    125c:	000120c0 	call	120c <read_num_bytes_available>
    1260:	10bfffcc 	andi	r2,r2,65535
    1264:	103ffc1e 	bne	r2,zero,1258 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    1268:	dfc00117 	ldw	ra,4(sp)
    126c:	dc000017 	ldw	r16,0(sp)
    1270:	dec00204 	addi	sp,sp,8
    1274:	f800283a 	ret

00001278 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1278:	defffd04 	addi	sp,sp,-12
    127c:	dfc00215 	stw	ra,8(sp)
    1280:	dc400115 	stw	r17,4(sp)
    1284:	dc000015 	stw	r16,0(sp)
    1288:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    128c:	20800a17 	ldw	r2,40(r4)
    1290:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    1294:	8009883a 	mov	r4,r16
    1298:	00012140 	call	1214 <read_data_valid>
    129c:	10803fcc 	andi	r2,r2,255
    12a0:	1000021e 	bne	r2,zero,12ac <alt_up_ps2_read_data_byte+0x34>
    12a4:	00bfffc4 	movi	r2,-1
    12a8:	00000406 	br	12bc <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    12ac:	8009883a 	mov	r4,r16
    12b0:	00012200 	call	1220 <read_data_byte>
    12b4:	88800005 	stb	r2,0(r17)
    12b8:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    12bc:	dfc00217 	ldw	ra,8(sp)
    12c0:	dc400117 	ldw	r17,4(sp)
    12c4:	dc000017 	ldw	r16,0(sp)
    12c8:	dec00304 	addi	sp,sp,12
    12cc:	f800283a 	ret

000012d0 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    12d0:	defffb04 	addi	sp,sp,-20
    12d4:	dfc00415 	stw	ra,16(sp)
    12d8:	dcc00315 	stw	r19,12(sp)
    12dc:	dc800215 	stw	r18,8(sp)
    12e0:	dc400115 	stw	r17,4(sp)
    12e4:	dc000015 	stw	r16,0(sp)
    12e8:	2025883a 	mov	r18,r4
    12ec:	2827883a 	mov	r19,r5
    12f0:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    12f4:	90800a17 	ldw	r2,40(r18)
    12f8:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    12fc:	8009883a 	mov	r4,r16
    1300:	00012140 	call	1214 <read_data_valid>
    1304:	10803fcc 	andi	r2,r2,255
    1308:	10000526 	beq	r2,zero,1320 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    130c:	8009883a 	mov	r4,r16
    1310:	00012200 	call	1220 <read_data_byte>
    1314:	98800005 	stb	r2,0(r19)
    1318:	0005883a 	mov	r2,zero
    131c:	00000506 	br	1334 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    1320:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    1324:	90800c17 	ldw	r2,48(r18)
    1328:	103ff226 	beq	r2,zero,12f4 <alt_up_ps2_read_data_byte_timeout+0x24>
    132c:	147ff12e 	bgeu	r2,r17,12f4 <alt_up_ps2_read_data_byte_timeout+0x24>
    1330:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    1334:	dfc00417 	ldw	ra,16(sp)
    1338:	dcc00317 	ldw	r19,12(sp)
    133c:	dc800217 	ldw	r18,8(sp)
    1340:	dc400117 	ldw	r17,4(sp)
    1344:	dc000017 	ldw	r16,0(sp)
    1348:	dec00504 	addi	sp,sp,20
    134c:	f800283a 	ret

00001350 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1350:	deffff04 	addi	sp,sp,-4
    1354:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1358:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    135c:	0180010e 	bge	zero,r6,1364 <alt_up_ps2_read_fd+0x14>
    1360:	003fff06 	br	1360 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    1364:	00012d00 	call	12d0 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1368:	1005003a 	cmpeq	r2,r2,zero
    136c:	dfc00017 	ldw	ra,0(sp)
    1370:	dec00104 	addi	sp,sp,4
    1374:	f800283a 	ret

00001378 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1378:	defffc04 	addi	sp,sp,-16
    137c:	dfc00315 	stw	ra,12(sp)
    1380:	dc400215 	stw	r17,8(sp)
    1384:	dc000115 	stw	r16,4(sp)
    1388:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    138c:	d8000005 	stb	zero,0(sp)
    1390:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    1394:	8009883a 	mov	r4,r16
    1398:	d80b883a 	mov	r5,sp
    139c:	00012d00 	call	12d0 <alt_up_ps2_read_data_byte_timeout>
    13a0:	1007883a 	mov	r3,r2
		if ( status == 0)
    13a4:	10803fcc 	andi	r2,r2,255
    13a8:	1000041e 	bne	r2,zero,13bc <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    13ac:	d8800003 	ldbu	r2,0(sp)
    13b0:	147ff81e 	bne	r2,r17,1394 <alt_up_ps2_wait_for_ack+0x1c>
    13b4:	0005883a 	mov	r2,zero
    13b8:	00000106 	br	13c0 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    13bc:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    13c0:	dfc00317 	ldw	ra,12(sp)
    13c4:	dc400217 	ldw	r17,8(sp)
    13c8:	dc000117 	ldw	r16,4(sp)
    13cc:	dec00404 	addi	sp,sp,16
    13d0:	f800283a 	ret

000013d4 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    13d4:	deffff04 	addi	sp,sp,-4
    13d8:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    13dc:	20800a17 	ldw	r2,40(r4)
    13e0:	29403fcc 	andi	r5,r5,255
    13e4:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    13e8:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    13ec:	11000137 	ldwio	r4,4(r2)
    13f0:	00012000 	call	1200 <read_CE_bit>
    13f4:	10803fcc 	andi	r2,r2,255
    13f8:	10000226 	beq	r2,zero,1404 <alt_up_ps2_write_data_byte+0x30>
    13fc:	00bffec4 	movi	r2,-5
    1400:	00000106 	br	1408 <alt_up_ps2_write_data_byte+0x34>
    1404:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1408:	dfc00017 	ldw	ra,0(sp)
    140c:	dec00104 	addi	sp,sp,4
    1410:	f800283a 	ret

00001414 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1414:	defffb04 	addi	sp,sp,-20
    1418:	dfc00415 	stw	ra,16(sp)
    141c:	dcc00315 	stw	r19,12(sp)
    1420:	dc800215 	stw	r18,8(sp)
    1424:	dc400115 	stw	r17,4(sp)
    1428:	dc000015 	stw	r16,0(sp)
    142c:	2827883a 	mov	r19,r5
    1430:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1434:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1438:	01800216 	blt	zero,r6,1444 <alt_up_ps2_write_fd+0x30>
    143c:	0021883a 	mov	r16,zero
    1440:	00000806 	br	1464 <alt_up_ps2_write_fd+0x50>
    1444:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1448:	9c05883a 	add	r2,r19,r16
    144c:	8809883a 	mov	r4,r17
    1450:	11400003 	ldbu	r5,0(r2)
    1454:	00013d40 	call	13d4 <alt_up_ps2_write_data_byte>
		if (status!=0)
    1458:	1000021e 	bne	r2,zero,1464 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    145c:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1460:	943ff91e 	bne	r18,r16,1448 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    1464:	8005883a 	mov	r2,r16
    1468:	dfc00417 	ldw	ra,16(sp)
    146c:	dcc00317 	ldw	r19,12(sp)
    1470:	dc800217 	ldw	r18,8(sp)
    1474:	dc400117 	ldw	r17,4(sp)
    1478:	dc000017 	ldw	r16,0(sp)
    147c:	dec00504 	addi	sp,sp,20
    1480:	f800283a 	ret

00001484 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1484:	defffe04 	addi	sp,sp,-8
    1488:	dfc00115 	stw	ra,4(sp)
    148c:	dc000015 	stw	r16,0(sp)
    1490:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1494:	29403fcc 	andi	r5,r5,255
    1498:	00013d40 	call	13d4 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    149c:	1000021e 	bne	r2,zero,14a8 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    14a0:	8009883a 	mov	r4,r16
    14a4:	00013780 	call	1378 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    14a8:	dfc00117 	ldw	ra,4(sp)
    14ac:	dc000017 	ldw	r16,0(sp)
    14b0:	dec00204 	addi	sp,sp,8
    14b4:	f800283a 	ret

000014b8 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    14b8:	defffd04 	addi	sp,sp,-12
    14bc:	dfc00215 	stw	ra,8(sp)
    14c0:	dc000115 	stw	r16,4(sp)
    14c4:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    14c8:	01403fc4 	movi	r5,255
    14cc:	00014840 	call	1484 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    14d0:	1000171e 	bne	r2,zero,1530 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    14d4:	8009883a 	mov	r4,r16
    14d8:	d80b883a 	mov	r5,sp
    14dc:	00012d00 	call	12d0 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    14e0:	1000131e 	bne	r2,zero,1530 <alt_up_ps2_init+0x78>
    14e4:	d8c00003 	ldbu	r3,0(sp)
    14e8:	00802a84 	movi	r2,170
    14ec:	1880101e 	bne	r3,r2,1530 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    14f0:	8009883a 	mov	r4,r16
    14f4:	d80b883a 	mov	r5,sp
    14f8:	00012d00 	call	12d0 <alt_up_ps2_read_data_byte_timeout>
    14fc:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1500:	00bfe304 	movi	r2,-116
    1504:	1880031e 	bne	r3,r2,1514 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1508:	00800044 	movi	r2,1
    150c:	80800d15 	stw	r2,52(r16)
    1510:	00000706 	br	1530 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    1514:	1800061e 	bne	r3,zero,1530 <alt_up_ps2_init+0x78>
    1518:	d8800003 	ldbu	r2,0(sp)
    151c:	1000041e 	bne	r2,zero,1530 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1520:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1524:	8009883a 	mov	r4,r16
    1528:	01403d04 	movi	r5,244
    152c:	00013d40 	call	13d4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1530:	dfc00217 	ldw	ra,8(sp)
    1534:	dc000117 	ldw	r16,4(sp)
    1538:	dec00304 	addi	sp,sp,12
    153c:	f800283a 	ret

00001540 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1540:	20800a17 	ldw	r2,40(r4)
    1544:	10800104 	addi	r2,r2,4
    1548:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    154c:	013fff84 	movi	r4,-2
    1550:	1906703a 	and	r3,r3,r4
    1554:	10c00035 	stwio	r3,0(r2)
}
    1558:	f800283a 	ret

0000155c <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    155c:	20c00a17 	ldw	r3,40(r4)
    1560:	18c00104 	addi	r3,r3,4
    1564:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1568:	10800054 	ori	r2,r2,1
    156c:	18800035 	stwio	r2,0(r3)
}
    1570:	f800283a 	ret

00001574 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    1574:	200495ba 	slli	r2,r4,22
}
    1578:	1005d7fa 	srai	r2,r2,31
    157c:	f800283a 	ret

00001580 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1580:	deffff04 	addi	sp,sp,-4
    1584:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1588:	01400034 	movhi	r5,0
    158c:	295bf604 	addi	r5,r5,28632
    1590:	00024fc0 	call	24fc <alt_find_dev>

  return dev;
}
    1594:	dfc00017 	ldw	ra,0(sp)
    1598:	dec00104 	addi	sp,sp,4
    159c:	f800283a 	ret

000015a0 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    15a0:	defffd04 	addi	sp,sp,-12
    15a4:	dfc00215 	stw	ra,8(sp)
    15a8:	dc400115 	stw	r17,4(sp)
    15ac:	dc000015 	stw	r16,0(sp)
    15b0:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    15b4:	20800a17 	ldw	r2,40(r4)
    15b8:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    15bc:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    15c0:	8009883a 	mov	r4,r16
    15c4:	00015740 	call	1574 <alt_up_rs232_check_parity>
    15c8:	88800005 	stb	r2,0(r17)
    15cc:	8420000c 	andi	r16,r16,32768
    15d0:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    15d4:	80bfffc4 	addi	r2,r16,-1
    15d8:	dfc00217 	ldw	ra,8(sp)
    15dc:	dc400117 	ldw	r17,4(sp)
    15e0:	dc000017 	ldw	r16,0(sp)
    15e4:	dec00304 	addi	sp,sp,12
    15e8:	f800283a 	ret

000015ec <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    15ec:	defff904 	addi	sp,sp,-28
    15f0:	dfc00615 	stw	ra,24(sp)
    15f4:	dd000515 	stw	r20,20(sp)
    15f8:	dcc00415 	stw	r19,16(sp)
    15fc:	dc800315 	stw	r18,12(sp)
    1600:	dc400215 	stw	r17,8(sp)
    1604:	dc000115 	stw	r16,4(sp)
    1608:	2821883a 	mov	r16,r5
    160c:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1610:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1614:	3000021e 	bne	r6,zero,1620 <alt_up_rs232_read_fd+0x34>
    1618:	0025883a 	mov	r18,zero
    161c:	00000a06 	br	1648 <alt_up_rs232_read_fd+0x5c>
    1620:	0025883a 	mov	r18,zero
    1624:	04400044 	movi	r17,1
    1628:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    162c:	8461883a 	add	r16,r16,r17
    1630:	9809883a 	mov	r4,r19
    1634:	d80d883a 	mov	r6,sp
    1638:	00015a00 	call	15a0 <alt_up_rs232_read_data>
    163c:	1000021e 	bne	r2,zero,1648 <alt_up_rs232_read_fd+0x5c>
			count++;
    1640:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1644:	a4bff81e 	bne	r20,r18,1628 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1648:	9005883a 	mov	r2,r18
    164c:	dfc00617 	ldw	ra,24(sp)
    1650:	dd000517 	ldw	r20,20(sp)
    1654:	dcc00417 	ldw	r19,16(sp)
    1658:	dc800317 	ldw	r18,12(sp)
    165c:	dc400217 	ldw	r17,8(sp)
    1660:	dc000117 	ldw	r16,4(sp)
    1664:	dec00704 	addi	sp,sp,28
    1668:	f800283a 	ret

0000166c <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    166c:	20800a17 	ldw	r2,40(r4)
    1670:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1674:	1004d43a 	srli	r2,r2,16
    1678:	f800283a 	ret

0000167c <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    167c:	20800a17 	ldw	r2,40(r4)
    1680:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1684:	29403fcc 	andi	r5,r5,255
    1688:	11400035 	stwio	r5,0(r2)
	return 0;
}
    168c:	0005883a 	mov	r2,zero
    1690:	f800283a 	ret

00001694 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1694:	defffb04 	addi	sp,sp,-20
    1698:	dfc00415 	stw	ra,16(sp)
    169c:	dcc00315 	stw	r19,12(sp)
    16a0:	dc800215 	stw	r18,8(sp)
    16a4:	dc400115 	stw	r17,4(sp)
    16a8:	dc000015 	stw	r16,0(sp)
    16ac:	2827883a 	mov	r19,r5
    16b0:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    16b4:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    16b8:	3000021e 	bne	r6,zero,16c4 <alt_up_rs232_write_fd+0x30>
    16bc:	0021883a 	mov	r16,zero
    16c0:	00000806 	br	16e4 <alt_up_rs232_write_fd+0x50>
    16c4:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    16c8:	84c5883a 	add	r2,r16,r19
    16cc:	8809883a 	mov	r4,r17
    16d0:	11400003 	ldbu	r5,0(r2)
    16d4:	000167c0 	call	167c <alt_up_rs232_write_data>
    16d8:	1000021e 	bne	r2,zero,16e4 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    16dc:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    16e0:	943ff91e 	bne	r18,r16,16c8 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    16e4:	8005883a 	mov	r2,r16
    16e8:	dfc00417 	ldw	ra,16(sp)
    16ec:	dcc00317 	ldw	r19,12(sp)
    16f0:	dc800217 	ldw	r18,8(sp)
    16f4:	dc400117 	ldw	r17,4(sp)
    16f8:	dc000017 	ldw	r16,0(sp)
    16fc:	dec00504 	addi	sp,sp,20
    1700:	f800283a 	ret

00001704 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1704:	20800a17 	ldw	r2,40(r4)
    1708:	10800104 	addi	r2,r2,4
    170c:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1710:	013fff84 	movi	r4,-2
    1714:	1906703a 	and	r3,r3,r4
    1718:	10c00035 	stwio	r3,0(r2)
}
    171c:	f800283a 	ret

00001720 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1720:	20c00a17 	ldw	r3,40(r4)
    1724:	18c00104 	addi	r3,r3,4
    1728:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    172c:	10800054 	ori	r2,r2,1
    1730:	18800035 	stwio	r2,0(r3)
}
    1734:	f800283a 	ret

00001738 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1738:	20800a17 	ldw	r2,40(r4)
    173c:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1740:	10bfffcc 	andi	r2,r2,65535
    1744:	f800283a 	ret

00001748 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1748:	20800c17 	ldw	r2,48(r4)
    174c:	30801c2e 	bgeu	r6,r2,17c0 <alt_up_char_buffer_string+0x78>
    1750:	20800d17 	ldw	r2,52(r4)
    1754:	38801a2e 	bgeu	r7,r2,17c0 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1758:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    175c:	28c00003 	ldbu	r3,0(r5)
    1760:	18803fcc 	andi	r2,r3,255
    1764:	1080201c 	xori	r2,r2,128
    1768:	10bfe004 	addi	r2,r2,-128
    176c:	10001626 	beq	r2,zero,17c8 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1770:	3a04983a 	sll	r2,r7,r8
    1774:	308f883a 	add	r7,r6,r2
    1778:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    177c:	20800b17 	ldw	r2,44(r4)
    1780:	3885883a 	add	r2,r7,r2
    1784:	18c03fcc 	andi	r3,r3,255
    1788:	18c0201c 	xori	r3,r3,128
    178c:	18ffe004 	addi	r3,r3,-128
    1790:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    1794:	320d883a 	add	r6,r6,r8
    1798:	20800c17 	ldw	r2,48(r4)
    179c:	3080082e 	bgeu	r6,r2,17c0 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    17a0:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    17a4:	28c00003 	ldbu	r3,0(r5)
    17a8:	18803fcc 	andi	r2,r3,255
    17ac:	1080201c 	xori	r2,r2,128
    17b0:	10bfe004 	addi	r2,r2,-128
    17b4:	10000426 	beq	r2,zero,17c8 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    17b8:	3a0f883a 	add	r7,r7,r8
    17bc:	003fef06 	br	177c <alt_up_char_buffer_string+0x34>
    17c0:	00bfffc4 	movi	r2,-1
    17c4:	f800283a 	ret
    17c8:	0005883a 	mov	r2,zero
	}
	return 0;
}
    17cc:	f800283a 	ret

000017d0 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    17d0:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    17d4:	20800c17 	ldw	r2,48(r4)
    17d8:	3080112e 	bgeu	r6,r2,1820 <alt_up_char_buffer_draw+0x50>
    17dc:	20800d17 	ldw	r2,52(r4)
    17e0:	38800f2e 	bgeu	r7,r2,1820 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    17e4:	20c00f17 	ldw	r3,60(r4)
    17e8:	30c6703a 	and	r3,r6,r3
    17ec:	20800e17 	ldw	r2,56(r4)
    17f0:	1886983a 	sll	r3,r3,r2
    17f4:	20801117 	ldw	r2,68(r4)
    17f8:	3884703a 	and	r2,r7,r2
    17fc:	21001017 	ldw	r4,64(r4)
    1800:	1104983a 	sll	r2,r2,r4
    1804:	1886b03a 	or	r3,r3,r2
    1808:	40800b17 	ldw	r2,44(r8)
    180c:	1887883a 	add	r3,r3,r2
    1810:	28803fcc 	andi	r2,r5,255
    1814:	18800025 	stbio	r2,0(r3)
    1818:	0005883a 	mov	r2,zero
    181c:	f800283a 	ret

	return 0;
    1820:	00bfffc4 	movi	r2,-1
}
    1824:	f800283a 	ret

00001828 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1828:	20c00a17 	ldw	r3,40(r4)
    182c:	00800044 	movi	r2,1
    1830:	188000a5 	stbio	r2,2(r3)
    1834:	20800a17 	ldw	r2,40(r4)
    1838:	10c00084 	addi	r3,r2,2
    183c:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1840:	18800023 	ldbuio	r2,0(r3)
    1844:	1104703a 	and	r2,r2,r4
    1848:	103ffd1e 	bne	r2,zero,1840 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    184c:	f800283a 	ret

00001850 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1850:	deffff04 	addi	sp,sp,-4
    1854:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1858:	01400034 	movhi	r5,0
    185c:	295bf604 	addi	r5,r5,28632
    1860:	00024fc0 	call	24fc <alt_find_dev>

  return dev;
}
    1864:	dfc00017 	ldw	ra,0(sp)
    1868:	dec00104 	addi	sp,sp,4
    186c:	f800283a 	ret

00001870 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1870:	defffe04 	addi	sp,sp,-8
    1874:	dfc00115 	stw	ra,4(sp)
    1878:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    187c:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1880:	80800007 	ldb	r2,0(r16)
    1884:	10000a26 	beq	r2,zero,18b0 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1888:	8009883a 	mov	r4,r16
    188c:	01400034 	movhi	r5,0
    1890:	2954c004 	addi	r5,r5,21248
    1894:	0002e680 	call	2e68 <strcmp>
    1898:	1000021e 	bne	r2,zero,18a4 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    189c:	80000005 	stb	zero,0(r16)
    18a0:	00000306 	br	18b0 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    18a4:	84000044 	addi	r16,r16,1
    18a8:	80800007 	ldb	r2,0(r16)
    18ac:	103ff61e 	bne	r2,zero,1888 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    18b0:	dfc00117 	ldw	ra,4(sp)
    18b4:	dc000017 	ldw	r16,0(sp)
    18b8:	dec00204 	addi	sp,sp,8
    18bc:	f800283a 	ret

000018c0 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    18c0:	da000017 	ldw	r8,0(sp)
    18c4:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    18c8:	1800051e 	bne	r3,zero,18e0 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    18cc:	29c5383a 	mul	r2,r5,r7
    18d0:	3085883a 	add	r2,r6,r2
    18d4:	1105883a 	add	r2,r2,r4
    18d8:	12000025 	stbio	r8,0(r2)
    18dc:	f800283a 	ret
	else if (mode == 1)
    18e0:	00800044 	movi	r2,1
    18e4:	1880061e 	bne	r3,r2,1900 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    18e8:	29c5383a 	mul	r2,r5,r7
    18ec:	3085883a 	add	r2,r6,r2
    18f0:	1085883a 	add	r2,r2,r2
    18f4:	1105883a 	add	r2,r2,r4
    18f8:	1200002d 	sthio	r8,0(r2)
    18fc:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    1900:	29c5383a 	mul	r2,r5,r7
    1904:	1185883a 	add	r2,r2,r6
    1908:	1085883a 	add	r2,r2,r2
    190c:	1085883a 	add	r2,r2,r2
    1910:	1105883a 	add	r2,r2,r4
    1914:	12000035 	stwio	r8,0(r2)
    1918:	f800283a 	ret

0000191c <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    191c:	defff304 	addi	sp,sp,-52
    1920:	dfc00c15 	stw	ra,48(sp)
    1924:	df000b15 	stw	fp,44(sp)
    1928:	ddc00a15 	stw	r23,40(sp)
    192c:	dd800915 	stw	r22,36(sp)
    1930:	dd400815 	stw	r21,32(sp)
    1934:	dd000715 	stw	r20,28(sp)
    1938:	dcc00615 	stw	r19,24(sp)
    193c:	dc800515 	stw	r18,20(sp)
    1940:	dc400415 	stw	r17,16(sp)
    1944:	dc000315 	stw	r16,12(sp)
    1948:	3011883a 	mov	r8,r6
    194c:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    1950:	4987c83a 	sub	r3,r9,r6
    1954:	1800010e 	bge	r3,zero,195c <alt_up_pixel_buffer_dma_draw_line+0x40>
    1958:	00c7c83a 	sub	r3,zero,r3
    195c:	3945c83a 	sub	r2,r7,r5
    1960:	1000010e 	bge	r2,zero,1968 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    1964:	0085c83a 	sub	r2,zero,r2
    1968:	10c4803a 	cmplt	r2,r2,r3
    196c:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    1970:	20c00e17 	ldw	r3,56(r4)
    1974:	00800044 	movi	r2,1
    1978:	1880021e 	bne	r3,r2,1984 <alt_up_pixel_buffer_dma_draw_line+0x68>
    197c:	d8000215 	stw	zero,8(sp)
    1980:	00000306 	br	1990 <alt_up_pixel_buffer_dma_draw_line+0x74>
    1984:	18c00098 	cmpnei	r3,r3,2
    1988:	18c00044 	addi	r3,r3,1
    198c:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    1990:	20800d17 	ldw	r2,52(r4)
    1994:	1000061e 	bne	r2,zero,19b0 <alt_up_pixel_buffer_dma_draw_line+0x94>
    1998:	20801317 	ldw	r2,76(r4)
    199c:	d8c00217 	ldw	r3,8(sp)
    19a0:	10c5c83a 	sub	r2,r2,r3
    19a4:	00c00044 	movi	r3,1
    19a8:	18ae983a 	sll	r23,r3,r2
    19ac:	00000106 	br	19b4 <alt_up_pixel_buffer_dma_draw_line+0x98>
    19b0:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    19b4:	d8c00f17 	ldw	r3,60(sp)
    19b8:	00800044 	movi	r2,1
    19bc:	1880021e 	bne	r3,r2,19c8 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    19c0:	25800c17 	ldw	r22,48(r4)
    19c4:	00000106 	br	19cc <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    19c8:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    19cc:	50000326 	beq	r10,zero,19dc <alt_up_pixel_buffer_dma_draw_line+0xc0>
    19d0:	400d883a 	mov	r6,r8
    19d4:	4827883a 	mov	r19,r9
    19d8:	00000406 	br	19ec <alt_up_pixel_buffer_dma_draw_line+0xd0>
    19dc:	280d883a 	mov	r6,r5
    19e0:	400b883a 	mov	r5,r8
    19e4:	3827883a 	mov	r19,r7
    19e8:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    19ec:	9980060e 	bge	r19,r6,1a08 <alt_up_pixel_buffer_dma_draw_line+0xec>
    19f0:	9805883a 	mov	r2,r19
    19f4:	3027883a 	mov	r19,r6
    19f8:	100d883a 	mov	r6,r2
    19fc:	3805883a 	mov	r2,r7
    1a00:	280f883a 	mov	r7,r5
    1a04:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    1a08:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    1a0c:	3969c83a 	sub	r20,r7,r5
    1a10:	a000010e 	bge	r20,zero,1a18 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    1a14:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    1a18:	a804d7fa 	srli	r2,r21,31
    1a1c:	1545883a 	add	r2,r2,r21
    1a20:	1005d07a 	srai	r2,r2,1
    1a24:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    1a28:	29c0020e 	bge	r5,r7,1a34 <alt_up_pixel_buffer_dma_draw_line+0x118>
    1a2c:	07000044 	movi	fp,1
    1a30:	00000106 	br	1a38 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    1a34:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    1a38:	50000226 	beq	r10,zero,1a44 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    1a3c:	9980030e 	bge	r19,r6,1a4c <alt_up_pixel_buffer_dma_draw_line+0x130>
    1a40:	00002506 	br	1ad8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1a44:	9980130e 	bge	r19,r6,1a94 <alt_up_pixel_buffer_dma_draw_line+0x178>
    1a48:	00002306 	br	1ad8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1a4c:	3021883a 	mov	r16,r6
    1a50:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    1a54:	d8800e17 	ldw	r2,56(sp)
    1a58:	d8800015 	stw	r2,0(sp)
    1a5c:	d8c00217 	ldw	r3,8(sp)
    1a60:	d8c00115 	stw	r3,4(sp)
    1a64:	b009883a 	mov	r4,r22
    1a68:	b80b883a 	mov	r5,r23
    1a6c:	900d883a 	mov	r6,r18
    1a70:	800f883a 	mov	r7,r16
    1a74:	00018c00 	call	18c0 <helper_plot_pixel>
			error = error + deltay;
    1a78:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1a7c:	0440020e 	bge	zero,r17,1a88 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    1a80:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1a84:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    1a88:	84000044 	addi	r16,r16,1
    1a8c:	9c001216 	blt	r19,r16,1ad8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1a90:	003ff006 	br	1a54 <alt_up_pixel_buffer_dma_draw_line+0x138>
    1a94:	3021883a 	mov	r16,r6
    1a98:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    1a9c:	d8800e17 	ldw	r2,56(sp)
    1aa0:	d8800015 	stw	r2,0(sp)
    1aa4:	d8c00217 	ldw	r3,8(sp)
    1aa8:	d8c00115 	stw	r3,4(sp)
    1aac:	b009883a 	mov	r4,r22
    1ab0:	b80b883a 	mov	r5,r23
    1ab4:	800d883a 	mov	r6,r16
    1ab8:	900f883a 	mov	r7,r18
    1abc:	00018c00 	call	18c0 <helper_plot_pixel>
			error = error + deltay;
    1ac0:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1ac4:	0440020e 	bge	zero,r17,1ad0 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    1ac8:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1acc:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1ad0:	84000044 	addi	r16,r16,1
    1ad4:	9c3ff10e 	bge	r19,r16,1a9c <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    1ad8:	dfc00c17 	ldw	ra,48(sp)
    1adc:	df000b17 	ldw	fp,44(sp)
    1ae0:	ddc00a17 	ldw	r23,40(sp)
    1ae4:	dd800917 	ldw	r22,36(sp)
    1ae8:	dd400817 	ldw	r21,32(sp)
    1aec:	dd000717 	ldw	r20,28(sp)
    1af0:	dcc00617 	ldw	r19,24(sp)
    1af4:	dc800517 	ldw	r18,20(sp)
    1af8:	dc400417 	ldw	r17,16(sp)
    1afc:	dc000317 	ldw	r16,12(sp)
    1b00:	dec00d04 	addi	sp,sp,52
    1b04:	f800283a 	ret

00001b08 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1b08:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1b0c:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    1b10:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    1b14:	3980022e 	bgeu	r7,r6,1b20 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    1b18:	3011883a 	mov	r8,r6
    1b1c:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    1b20:	2a405d2e 	bgeu	r5,r9,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1b24:	30805c2e 	bgeu	r6,r2,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    1b28:	40800136 	bltu	r8,r2,1b30 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    1b2c:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1b30:	d8c00117 	ldw	r3,4(sp)
    1b34:	00800044 	movi	r2,1
    1b38:	1880021e 	bne	r3,r2,1b44 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1b3c:	20c00c17 	ldw	r3,48(r4)
    1b40:	00000106 	br	1b48 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1b44:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    1b48:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1b4c:	20800d17 	ldw	r2,52(r4)
    1b50:	1000281e 	bne	r2,zero,1bf4 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    1b54:	22801317 	ldw	r10,76(r4)
    1b58:	3284983a 	sll	r2,r6,r10
    1b5c:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1b60:	21000e17 	ldw	r4,56(r4)
    1b64:	00800044 	movi	r2,1
    1b68:	2080091e 	bne	r4,r2,1b90 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    1b6c:	41804a36 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1b70:	1013883a 	mov	r9,r2
    1b74:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1b78:	1945883a 	add	r2,r3,r5
    1b7c:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1b80:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1b84:	324d883a 	add	r6,r6,r9
    1b88:	41804336 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1b8c:	003ffa06 	br	1b78 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1b90:	00800084 	movi	r2,2
    1b94:	2080021e 	bne	r4,r2,1ba0 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    1b98:	4180032e 	bgeu	r8,r6,1ba8 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    1b9c:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1ba0:	41800a2e 	bgeu	r8,r6,1bcc <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    1ba4:	f800283a 	ret
    1ba8:	294b883a 	add	r5,r5,r5
    1bac:	02400044 	movi	r9,1
    1bb0:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1bb4:	28c5883a 	add	r2,r5,r3
    1bb8:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1bbc:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1bc0:	324d883a 	add	r6,r6,r9
    1bc4:	41803436 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1bc8:	003ffa06 	br	1bb4 <alt_up_pixel_buffer_dma_draw_vline+0xac>
    1bcc:	2945883a 	add	r2,r5,r5
    1bd0:	108b883a 	add	r5,r2,r2
    1bd4:	02400044 	movi	r9,1
    1bd8:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1bdc:	28c5883a 	add	r2,r5,r3
    1be0:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1be4:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1be8:	324d883a 	add	r6,r6,r9
    1bec:	41802a36 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1bf0:	003ffa06 	br	1bdc <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1bf4:	21000e17 	ldw	r4,56(r4)
    1bf8:	00800044 	movi	r2,1
    1bfc:	20800b1e 	bne	r4,r2,1c2c <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1c00:	41802536 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1c04:	4809883a 	mov	r4,r9
    1c08:	3245383a 	mul	r2,r6,r9
    1c0c:	1885883a 	add	r2,r3,r2
    1c10:	1145883a 	add	r2,r2,r5
    1c14:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1c18:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1c1c:	30cd883a 	add	r6,r6,r3
    1c20:	1105883a 	add	r2,r2,r4
    1c24:	41801c36 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1c28:	003ffb06 	br	1c18 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1c2c:	00800084 	movi	r2,2
    1c30:	20800c1e 	bne	r4,r2,1c64 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1c34:	41801836 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    1c38:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    1c3c:	3105383a 	mul	r2,r6,r4
    1c40:	1887883a 	add	r3,r3,r2
    1c44:	294b883a 	add	r5,r5,r5
    1c48:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1c4c:	28c5883a 	add	r2,r5,r3
    1c50:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    1c54:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1c58:	324d883a 	add	r6,r6,r9
    1c5c:	41800e36 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1c60:	003ffa06 	br	1c4c <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1c64:	41800c36 	bltu	r8,r6,1c98 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    1c68:	4a45883a 	add	r2,r9,r9
    1c6c:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    1c70:	3105383a 	mul	r2,r6,r4
    1c74:	1887883a 	add	r3,r3,r2
    1c78:	2945883a 	add	r2,r5,r5
    1c7c:	108b883a 	add	r5,r2,r2
    1c80:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1c84:	28c5883a 	add	r2,r5,r3
    1c88:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    1c8c:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1c90:	324d883a 	add	r6,r6,r9
    1c94:	41bffb2e 	bgeu	r8,r6,1c84 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    1c98:	f800283a 	ret

00001c9c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1c9c:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1ca0:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    1ca4:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    1ca8:	3140022e 	bgeu	r6,r5,1cb4 <alt_up_pixel_buffer_dma_draw_hline+0x18>
    1cac:	2813883a 	mov	r9,r5
    1cb0:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    1cb4:	2a00552e 	bgeu	r5,r8,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1cb8:	3880542e 	bgeu	r7,r2,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    1cbc:	4a000136 	bltu	r9,r8,1cc4 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    1cc0:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1cc4:	d8c00117 	ldw	r3,4(sp)
    1cc8:	00800044 	movi	r2,1
    1ccc:	1880021e 	bne	r3,r2,1cd8 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1cd0:	21800c17 	ldw	r6,48(r4)
    1cd4:	00000106 	br	1cdc <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1cd8:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    1cdc:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1ce0:	20800d17 	ldw	r2,52(r4)
    1ce4:	1000231e 	bne	r2,zero,1d74 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    1ce8:	20801317 	ldw	r2,76(r4)
    1cec:	3884983a 	sll	r2,r7,r2
    1cf0:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1cf4:	21000e17 	ldw	r4,56(r4)
    1cf8:	00800044 	movi	r2,1
    1cfc:	2080081e 	bne	r4,r2,1d20 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    1d00:	49404236 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1d04:	3945883a 	add	r2,r7,r5
    1d08:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    1d0c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    1d10:	290b883a 	add	r5,r5,r4
    1d14:	1105883a 	add	r2,r2,r4
    1d18:	49403c36 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1d1c:	003ffb06 	br	1d0c <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1d20:	00800084 	movi	r2,2
    1d24:	2080021e 	bne	r4,r2,1d30 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    1d28:	4940032e 	bgeu	r9,r5,1d38 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    1d2c:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    1d30:	4940082e 	bgeu	r9,r5,1d54 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    1d34:	f800283a 	ret
    1d38:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    1d3c:	2945883a 	add	r2,r5,r5
    1d40:	11c5883a 	add	r2,r2,r7
    1d44:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    1d48:	290b883a 	add	r5,r5,r4
    1d4c:	49402f36 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1d50:	003ffa06 	br	1d3c <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    1d54:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    1d58:	2945883a 	add	r2,r5,r5
    1d5c:	1085883a 	add	r2,r2,r2
    1d60:	11c5883a 	add	r2,r2,r7
    1d64:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    1d68:	290b883a 	add	r5,r5,r4
    1d6c:	49402736 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1d70:	003ff906 	br	1d58 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1d74:	21000e17 	ldw	r4,56(r4)
    1d78:	00800044 	movi	r2,1
    1d7c:	20800a1e 	bne	r4,r2,1da8 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    1d80:	41c5383a 	mul	r2,r8,r7
    1d84:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    1d88:	49402036 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1d8c:	1145883a 	add	r2,r2,r5
    1d90:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    1d94:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1d98:	290b883a 	add	r5,r5,r4
    1d9c:	1105883a 	add	r2,r2,r4
    1da0:	49401a36 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1da4:	003ffb06 	br	1d94 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1da8:	00800084 	movi	r2,2
    1dac:	20800b1e 	bne	r4,r2,1ddc <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    1db0:	4205883a 	add	r2,r8,r8
    1db4:	3885383a 	mul	r2,r7,r2
    1db8:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    1dbc:	49401336 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1dc0:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    1dc4:	2945883a 	add	r2,r5,r5
    1dc8:	11c5883a 	add	r2,r2,r7
    1dcc:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1dd0:	290b883a 	add	r5,r5,r4
    1dd4:	49400d36 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1dd8:	003ffa06 	br	1dc4 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    1ddc:	4205883a 	add	r2,r8,r8
    1de0:	1085883a 	add	r2,r2,r2
    1de4:	3885383a 	mul	r2,r7,r2
    1de8:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    1dec:	49400736 	bltu	r9,r5,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1df0:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    1df4:	2945883a 	add	r2,r5,r5
    1df8:	1085883a 	add	r2,r2,r2
    1dfc:	11c5883a 	add	r2,r2,r7
    1e00:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1e04:	290b883a 	add	r5,r5,r4
    1e08:	497ffa2e 	bgeu	r9,r5,1df4 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    1e0c:	f800283a 	ret

00001e10 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    1e10:	defff604 	addi	sp,sp,-40
    1e14:	dfc00915 	stw	ra,36(sp)
    1e18:	dd800815 	stw	r22,32(sp)
    1e1c:	dd400715 	stw	r21,28(sp)
    1e20:	dd000615 	stw	r20,24(sp)
    1e24:	dcc00515 	stw	r19,20(sp)
    1e28:	dc800415 	stw	r18,16(sp)
    1e2c:	dc400315 	stw	r17,12(sp)
    1e30:	dc000215 	stw	r16,8(sp)
    1e34:	2029883a 	mov	r20,r4
    1e38:	282d883a 	mov	r22,r5
    1e3c:	302b883a 	mov	r21,r6
    1e40:	3825883a 	mov	r18,r7
    1e44:	dcc00a17 	ldw	r19,40(sp)
    1e48:	dc000b17 	ldw	r16,44(sp)
    1e4c:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    1e50:	dc000015 	stw	r16,0(sp)
    1e54:	dc400115 	stw	r17,4(sp)
    1e58:	380d883a 	mov	r6,r7
    1e5c:	a80f883a 	mov	r7,r21
    1e60:	0001c9c0 	call	1c9c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    1e64:	dc000015 	stw	r16,0(sp)
    1e68:	dc400115 	stw	r17,4(sp)
    1e6c:	a009883a 	mov	r4,r20
    1e70:	b00b883a 	mov	r5,r22
    1e74:	900d883a 	mov	r6,r18
    1e78:	980f883a 	mov	r7,r19
    1e7c:	0001c9c0 	call	1c9c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    1e80:	dc000015 	stw	r16,0(sp)
    1e84:	dc400115 	stw	r17,4(sp)
    1e88:	a009883a 	mov	r4,r20
    1e8c:	b00b883a 	mov	r5,r22
    1e90:	a80d883a 	mov	r6,r21
    1e94:	980f883a 	mov	r7,r19
    1e98:	0001b080 	call	1b08 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    1e9c:	dc000015 	stw	r16,0(sp)
    1ea0:	dc400115 	stw	r17,4(sp)
    1ea4:	a009883a 	mov	r4,r20
    1ea8:	900b883a 	mov	r5,r18
    1eac:	a80d883a 	mov	r6,r21
    1eb0:	980f883a 	mov	r7,r19
    1eb4:	0001b080 	call	1b08 <alt_up_pixel_buffer_dma_draw_vline>
}
    1eb8:	dfc00917 	ldw	ra,36(sp)
    1ebc:	dd800817 	ldw	r22,32(sp)
    1ec0:	dd400717 	ldw	r21,28(sp)
    1ec4:	dd000617 	ldw	r20,24(sp)
    1ec8:	dcc00517 	ldw	r19,20(sp)
    1ecc:	dc800417 	ldw	r18,16(sp)
    1ed0:	dc400317 	ldw	r17,12(sp)
    1ed4:	dc000217 	ldw	r16,8(sp)
    1ed8:	dec00a04 	addi	sp,sp,40
    1edc:	f800283a 	ret

00001ee0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1ee0:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1ee4:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    1ee8:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    1eec:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    1ef0:	3940022e 	bgeu	r7,r5,1efc <alt_up_pixel_buffer_dma_draw_box+0x1c>
    1ef4:	2811883a 	mov	r8,r5
    1ef8:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    1efc:	5980032e 	bgeu	r11,r6,1f0c <alt_up_pixel_buffer_dma_draw_box+0x2c>
    1f00:	5805883a 	mov	r2,r11
    1f04:	3017883a 	mov	r11,r6
    1f08:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    1f0c:	2a80842e 	bgeu	r5,r10,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1f10:	30c0832e 	bgeu	r6,r3,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    1f14:	42800136 	bltu	r8,r10,1f1c <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    1f18:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    1f1c:	58c00136 	bltu	r11,r3,1f24 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    1f20:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1f24:	d8c00217 	ldw	r3,8(sp)
    1f28:	00800044 	movi	r2,1
    1f2c:	1880021e 	bne	r3,r2,1f38 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    1f30:	20c00c17 	ldw	r3,48(r4)
    1f34:	00000106 	br	1f3c <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    1f38:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    1f3c:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1f40:	20800d17 	ldw	r2,52(r4)
    1f44:	1000391e 	bne	r2,zero,202c <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    1f48:	22801317 	ldw	r10,76(r4)
    1f4c:	3284983a 	sll	r2,r6,r10
    1f50:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1f54:	21000e17 	ldw	r4,56(r4)
    1f58:	00800044 	movi	r2,1
    1f5c:	2080101e 	bne	r4,r2,1fa0 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    1f60:	59806f36 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1f64:	00000a06 	br	1f90 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    1f68:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1f6c:	00800044 	movi	r2,1
    1f70:	1887883a 	add	r3,r3,r2
    1f74:	2089883a 	add	r4,r4,r2
    1f78:	40fffb2e 	bgeu	r8,r3,1f68 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1f7c:	00800044 	movi	r2,1
    1f80:	308d883a 	add	r6,r6,r2
    1f84:	59806636 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    1f88:	1284983a 	sll	r2,r2,r10
    1f8c:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1f90:	417ffa36 	bltu	r8,r5,1f7c <alt_up_pixel_buffer_dma_draw_box+0x9c>
    1f94:	29c9883a 	add	r4,r5,r7
    1f98:	2807883a 	mov	r3,r5
    1f9c:	003ff206 	br	1f68 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1fa0:	00800084 	movi	r2,2
    1fa4:	2080021e 	bne	r4,r2,1fb0 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    1fa8:	59805d36 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1fac:	00000e06 	br	1fe8 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1fb0:	59805b36 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1fb4:	00001b06 	br	2024 <alt_up_pixel_buffer_dma_draw_box+0x144>
    1fb8:	2807883a 	mov	r3,r5
    1fbc:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    1fc0:	18c5883a 	add	r2,r3,r3
    1fc4:	11c5883a 	add	r2,r2,r7
    1fc8:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1fcc:	1907883a 	add	r3,r3,r4
    1fd0:	40fffb2e 	bgeu	r8,r3,1fc0 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1fd4:	00800044 	movi	r2,1
    1fd8:	308d883a 	add	r6,r6,r2
    1fdc:	59805036 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    1fe0:	1284983a 	sll	r2,r2,r10
    1fe4:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1fe8:	417ff32e 	bgeu	r8,r5,1fb8 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    1fec:	003ff906 	br	1fd4 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    1ff0:	2807883a 	mov	r3,r5
    1ff4:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    1ff8:	18c5883a 	add	r2,r3,r3
    1ffc:	1085883a 	add	r2,r2,r2
    2000:	11c5883a 	add	r2,r2,r7
    2004:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2008:	1907883a 	add	r3,r3,r4
    200c:	40fffa2e 	bgeu	r8,r3,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2010:	00800044 	movi	r2,1
    2014:	308d883a 	add	r6,r6,r2
    2018:	59804136 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    201c:	1284983a 	sll	r2,r2,r10
    2020:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2024:	417ff22e 	bgeu	r8,r5,1ff0 <alt_up_pixel_buffer_dma_draw_box+0x110>
    2028:	003ff906 	br	2010 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    202c:	21000e17 	ldw	r4,56(r4)
    2030:	00800044 	movi	r2,1
    2034:	2080121e 	bne	r4,r2,2080 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2038:	59803936 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
    203c:	5019883a 	mov	r12,r10
    2040:	3285383a 	mul	r2,r6,r10
    2044:	1885883a 	add	r2,r3,r2
    2048:	114f883a 	add	r7,r2,r5
    204c:	00000806 	br	2070 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2050:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2054:	00800044 	movi	r2,1
    2058:	1887883a 	add	r3,r3,r2
    205c:	2089883a 	add	r4,r4,r2
    2060:	40fffb2e 	bgeu	r8,r3,2050 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2064:	31800044 	addi	r6,r6,1
    2068:	3b0f883a 	add	r7,r7,r12
    206c:	59802c36 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    2070:	417ffc36 	bltu	r8,r5,2064 <alt_up_pixel_buffer_dma_draw_box+0x184>
    2074:	3809883a 	mov	r4,r7
    2078:	2807883a 	mov	r3,r5
    207c:	003ff406 	br	2050 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2080:	00800084 	movi	r2,2
    2084:	2080121e 	bne	r4,r2,20d0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2088:	59802536 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    208c:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    2090:	3285383a 	mul	r2,r6,r10
    2094:	1889883a 	add	r4,r3,r2
    2098:	03000044 	movi	r12,1
    209c:	00000a06 	br	20c8 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    20a0:	2807883a 	mov	r3,r5
    20a4:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    20a8:	18c5883a 	add	r2,r3,r3
    20ac:	1105883a 	add	r2,r2,r4
    20b0:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    20b4:	19c7883a 	add	r3,r3,r7
    20b8:	40fffb2e 	bgeu	r8,r3,20a8 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    20bc:	330d883a 	add	r6,r6,r12
    20c0:	59801736 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    20c4:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    20c8:	417ff52e 	bgeu	r8,r5,20a0 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    20cc:	003ffb06 	br	20bc <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    20d0:	59801336 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    20d4:	5285883a 	add	r2,r10,r10
    20d8:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    20dc:	3285383a 	mul	r2,r6,r10
    20e0:	1889883a 	add	r4,r3,r2
    20e4:	03000044 	movi	r12,1
    20e8:	00000b06 	br	2118 <alt_up_pixel_buffer_dma_draw_box+0x238>
    20ec:	2807883a 	mov	r3,r5
    20f0:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    20f4:	18c5883a 	add	r2,r3,r3
    20f8:	1085883a 	add	r2,r2,r2
    20fc:	1105883a 	add	r2,r2,r4
    2100:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2104:	19c7883a 	add	r3,r3,r7
    2108:	40fffa2e 	bgeu	r8,r3,20f4 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    210c:	330d883a 	add	r6,r6,r12
    2110:	59800336 	bltu	r11,r6,2120 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    2114:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2118:	417ff42e 	bgeu	r8,r5,20ec <alt_up_pixel_buffer_dma_draw_box+0x20c>
    211c:	003ffb06 	br	210c <alt_up_pixel_buffer_dma_draw_box+0x22c>
    2120:	f800283a 	ret

00002124 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2124:	00800044 	movi	r2,1
    2128:	2880021e 	bne	r5,r2,2134 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    212c:	21c00c17 	ldw	r7,48(r4)
    2130:	00000106 	br	2138 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    2134:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    2138:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    213c:	20c00e17 	ldw	r3,56(r4)
    2140:	00800084 	movi	r2,2
    2144:	1880021e 	bne	r3,r2,2150 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2148:	294d883a 	add	r6,r5,r5
    214c:	00000206 	br	2158 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    2150:	2945883a 	add	r2,r5,r5
    2154:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    2158:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    215c:	20800d17 	ldw	r2,52(r4)
    2160:	1000121e 	bne	r2,zero,21ac <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    2164:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    2168:	48001a26 	beq	r9,zero,21d4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    216c:	0011883a 	mov	r8,zero
    2170:	3014c03a 	cmpne	r10,r6,zero
    2174:	00000b06 	br	21a4 <alt_up_pixel_buffer_dma_clear_screen+0x80>
    2178:	0007883a 	mov	r3,zero
    217c:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    2180:	19c5883a 	add	r2,r3,r7
    2184:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    2188:	1947883a 	add	r3,r3,r5
    218c:	19bffc36 	bltu	r3,r6,2180 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    2190:	00800044 	movi	r2,1
    2194:	4091883a 	add	r8,r8,r2
    2198:	4a000e26 	beq	r9,r8,21d4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    219c:	1104983a 	sll	r2,r2,r4
    21a0:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    21a4:	503ff41e 	bne	r10,zero,2178 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    21a8:	003ff906 	br	2190 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    21ac:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    21b0:	20000826 	beq	r4,zero,21d4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    21b4:	0007883a 	mov	r3,zero
    21b8:	0005883a 	mov	r2,zero
    21bc:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    21c0:	3885883a 	add	r2,r7,r2
    21c4:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    21c8:	1945883a 	add	r2,r3,r5
    21cc:	1007883a 	mov	r3,r2
    21d0:	113ffb36 	bltu	r2,r4,21c0 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    21d4:	f800283a 	ret

000021d8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    21d8:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    21dc:	20c00a17 	ldw	r3,40(r4)
    21e0:	00800044 	movi	r2,1
    21e4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    21e8:	20800b17 	ldw	r2,44(r4)
    21ec:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    21f0:	21400b15 	stw	r5,44(r4)
	return 0;
}
    21f4:	0005883a 	mov	r2,zero
    21f8:	f800283a 	ret

000021fc <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    21fc:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    2200:	22400f17 	ldw	r9,60(r4)
    2204:	32402a2e 	bgeu	r6,r9,22b0 <alt_up_pixel_buffer_dma_draw+0xb4>
    2208:	20801017 	ldw	r2,64(r4)
    220c:	3880282e 	bgeu	r7,r2,22b0 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2210:	20800d17 	ldw	r2,52(r4)
    2214:	10000a1e 	bne	r2,zero,2240 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    2218:	21001217 	ldw	r4,72(r4)
    221c:	3108703a 	and	r4,r6,r4
    2220:	40801117 	ldw	r2,68(r8)
    2224:	2088983a 	sll	r4,r4,r2
    2228:	40801417 	ldw	r2,80(r8)
    222c:	3884703a 	and	r2,r7,r2
    2230:	40c01317 	ldw	r3,76(r8)
    2234:	10c4983a 	sll	r2,r2,r3
    2238:	2086b03a 	or	r3,r4,r2
    223c:	00000806 	br	2260 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    2240:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    2244:	40c01217 	ldw	r3,72(r8)
    2248:	30c6703a 	and	r3,r6,r3
    224c:	40801417 	ldw	r2,80(r8)
    2250:	3884703a 	and	r2,r7,r2
    2254:	4885383a 	mul	r2,r9,r2
    2258:	10c5883a 	add	r2,r2,r3
    225c:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2260:	42400e17 	ldw	r9,56(r8)
    2264:	00800044 	movi	r2,1
    2268:	4880051e 	bne	r9,r2,2280 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    226c:	40800c17 	ldw	r2,48(r8)
    2270:	1885883a 	add	r2,r3,r2
    2274:	11400025 	stbio	r5,0(r2)
    2278:	0005883a 	mov	r2,zero
    227c:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2280:	00800084 	movi	r2,2
    2284:	4880051e 	bne	r9,r2,229c <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2288:	40800c17 	ldw	r2,48(r8)
    228c:	1885883a 	add	r2,r3,r2
    2290:	1140002d 	sthio	r5,0(r2)
    2294:	0005883a 	mov	r2,zero
    2298:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    229c:	40800c17 	ldw	r2,48(r8)
    22a0:	1885883a 	add	r2,r3,r2
    22a4:	11400035 	stwio	r5,0(r2)
    22a8:	0005883a 	mov	r2,zero
    22ac:	f800283a 	ret
    22b0:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    22b4:	f800283a 	ret

000022b8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    22b8:	20800a17 	ldw	r2,40(r4)
    22bc:	10800337 	ldwio	r2,12(r2)
}
    22c0:	1080004c 	andi	r2,r2,1
    22c4:	f800283a 	ret

000022c8 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    22c8:	00c00104 	movi	r3,4
    22cc:	20800a17 	ldw	r2,40(r4)
    22d0:	10c5883a 	add	r2,r2,r3
    22d4:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    22d8:	20800a17 	ldw	r2,40(r4)
    22dc:	10c5883a 	add	r2,r2,r3
    22e0:	10800037 	ldwio	r2,0(r2)
    22e4:	20800c15 	stw	r2,48(r4)
	return 0;
}
    22e8:	0005883a 	mov	r2,zero
    22ec:	f800283a 	ret

000022f0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    22f0:	deffff04 	addi	sp,sp,-4
    22f4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    22f8:	01400034 	movhi	r5,0
    22fc:	295bf604 	addi	r5,r5,28632
    2300:	00024fc0 	call	24fc <alt_find_dev>

  return dev;
}
    2304:	dfc00017 	ldw	ra,0(sp)
    2308:	dec00104 	addi	sp,sp,4
    230c:	f800283a 	ret

00002310 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2310:	00800074 	movhi	r2,1
    2314:	10a33d04 	addi	r2,r2,-29452
    2318:	10800017 	ldw	r2,0(r2)
    231c:	1000021e 	bne	r2,zero,2328 <alt_alarm_start+0x18>
    2320:	00bfde84 	movi	r2,-134
    2324:	f800283a 	ret
  {
    if (alarm)
    2328:	2000021e 	bne	r4,zero,2334 <alt_alarm_start+0x24>
    232c:	00bffa84 	movi	r2,-22
    2330:	f800283a 	ret
    {
      alarm->callback = callback;
    2334:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2338:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    233c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2340:	00bfff84 	movi	r2,-2
    2344:	3884703a 	and	r2,r7,r2
    2348:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    234c:	00800074 	movhi	r2,1
    2350:	10a33e04 	addi	r2,r2,-29448
    2354:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2358:	01800044 	movi	r6,1
    235c:	1985883a 	add	r2,r3,r6
    2360:	2885883a 	add	r2,r5,r2
    2364:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2368:	10c0022e 	bgeu	r2,r3,2374 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    236c:	21800405 	stb	r6,16(r4)
    2370:	00000106 	br	2378 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    2374:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2378:	00800034 	movhi	r2,0
    237c:	109bfb04 	addi	r2,r2,28652
    2380:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    2384:	10c00017 	ldw	r3,0(r2)
    2388:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    238c:	10c00017 	ldw	r3,0(r2)
    2390:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    2394:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2398:	3801703a 	wrctl	status,r7
    239c:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    23a0:	f800283a 	ret

000023a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    23a4:	defffd04 	addi	sp,sp,-12
    23a8:	dfc00215 	stw	ra,8(sp)
    23ac:	dc400115 	stw	r17,4(sp)
    23b0:	dc000015 	stw	r16,0(sp)
    23b4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    23b8:	20001c16 	blt	r4,zero,242c <close+0x88>
    23bc:	20c00324 	muli	r3,r4,12
    23c0:	00800034 	movhi	r2,0
    23c4:	10999204 	addi	r2,r2,26184
    23c8:	1889883a 	add	r4,r3,r2

  if (fd)
    23cc:	20001726 	beq	r4,zero,242c <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    23d0:	20800017 	ldw	r2,0(r4)
    23d4:	10800417 	ldw	r2,16(r2)
    23d8:	10002126 	beq	r2,zero,2460 <close+0xbc>
    23dc:	103ee83a 	callr	r2
    23e0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    23e4:	8009883a 	mov	r4,r16
    23e8:	00028c00 	call	28c0 <alt_release_fd>
    if (rval < 0)
    23ec:	88000216 	blt	r17,zero,23f8 <close+0x54>
    23f0:	0005883a 	mov	r2,zero
    23f4:	00001d06 	br	246c <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    23f8:	00800034 	movhi	r2,0
    23fc:	109bf904 	addi	r2,r2,28644
    2400:	10800017 	ldw	r2,0(r2)
    2404:	1000031e 	bne	r2,zero,2414 <close+0x70>
    2408:	00c00074 	movhi	r3,1
    240c:	18e33f04 	addi	r3,r3,-29444
    2410:	00000206 	br	241c <close+0x78>
    2414:	103ee83a 	callr	r2
    2418:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    241c:	0445c83a 	sub	r2,zero,r17
    2420:	18800015 	stw	r2,0(r3)
    2424:	00bfffc4 	movi	r2,-1
    2428:	00001006 	br	246c <close+0xc8>
    242c:	00800034 	movhi	r2,0
    2430:	109bf904 	addi	r2,r2,28644
    2434:	10800017 	ldw	r2,0(r2)
    2438:	1000031e 	bne	r2,zero,2448 <close+0xa4>
    243c:	00c00074 	movhi	r3,1
    2440:	18e33f04 	addi	r3,r3,-29444
    2444:	00000206 	br	2450 <close+0xac>
    2448:	103ee83a 	callr	r2
    244c:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2450:	00801444 	movi	r2,81
    2454:	18800015 	stw	r2,0(r3)
    2458:	00bfffc4 	movi	r2,-1
    245c:	00000306 	br	246c <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2460:	8009883a 	mov	r4,r16
    2464:	00028c00 	call	28c0 <alt_release_fd>
    2468:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    246c:	dfc00217 	ldw	ra,8(sp)
    2470:	dc400117 	ldw	r17,4(sp)
    2474:	dc000017 	ldw	r16,0(sp)
    2478:	dec00304 	addi	sp,sp,12
    247c:	f800283a 	ret

00002480 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2480:	f800283a 	ret

00002484 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    2484:	3005883a 	mov	r2,r6
    2488:	f800283a 	ret

0000248c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    248c:	deffff04 	addi	sp,sp,-4
    2490:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2494:	20000226 	beq	r4,zero,24a0 <alt_dev_llist_insert+0x14>
    2498:	20800217 	ldw	r2,8(r4)
    249c:	10000d1e 	bne	r2,zero,24d4 <alt_dev_llist_insert+0x48>
    24a0:	00800034 	movhi	r2,0
    24a4:	109bf904 	addi	r2,r2,28644
    24a8:	10800017 	ldw	r2,0(r2)
    24ac:	1000031e 	bne	r2,zero,24bc <alt_dev_llist_insert+0x30>
    24b0:	00c00074 	movhi	r3,1
    24b4:	18e33f04 	addi	r3,r3,-29444
    24b8:	00000206 	br	24c4 <alt_dev_llist_insert+0x38>
    24bc:	103ee83a 	callr	r2
    24c0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    24c4:	00800584 	movi	r2,22
    24c8:	18800015 	stw	r2,0(r3)
    24cc:	00bffa84 	movi	r2,-22
    24d0:	00000706 	br	24f0 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    24d4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    24d8:	28800017 	ldw	r2,0(r5)
    24dc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    24e0:	28800017 	ldw	r2,0(r5)
    24e4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    24e8:	29000015 	stw	r4,0(r5)
    24ec:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    24f0:	dfc00017 	ldw	ra,0(sp)
    24f4:	dec00104 	addi	sp,sp,4
    24f8:	f800283a 	ret

000024fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    24fc:	defffb04 	addi	sp,sp,-20
    2500:	dfc00415 	stw	ra,16(sp)
    2504:	dcc00315 	stw	r19,12(sp)
    2508:	dc800215 	stw	r18,8(sp)
    250c:	dc400115 	stw	r17,4(sp)
    2510:	dc000015 	stw	r16,0(sp)
    2514:	2027883a 	mov	r19,r4
    2518:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    251c:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2520:	0002f240 	call	2f24 <strlen>
    2524:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2528:	8c000726 	beq	r17,r16,2548 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    252c:	89000217 	ldw	r4,8(r17)
    2530:	980b883a 	mov	r5,r19
    2534:	900d883a 	mov	r6,r18
    2538:	0002b680 	call	2b68 <memcmp>
    253c:	10000326 	beq	r2,zero,254c <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2540:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2544:	847ff91e 	bne	r16,r17,252c <alt_find_dev+0x30>
    2548:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    254c:	8805883a 	mov	r2,r17
    2550:	dfc00417 	ldw	ra,16(sp)
    2554:	dcc00317 	ldw	r19,12(sp)
    2558:	dc800217 	ldw	r18,8(sp)
    255c:	dc400117 	ldw	r17,4(sp)
    2560:	dc000017 	ldw	r16,0(sp)
    2564:	dec00504 	addi	sp,sp,20
    2568:	f800283a 	ret

0000256c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    256c:	deffff04 	addi	sp,sp,-4
    2570:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2574:	0009883a 	mov	r4,zero
    2578:	01408004 	movi	r5,512
    257c:	0002af40 	call	2af4 <alt_icache_flush>
#endif
}
    2580:	dfc00017 	ldw	ra,0(sp)
    2584:	dec00104 	addi	sp,sp,4
    2588:	f800283a 	ret

0000258c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    258c:	defffe04 	addi	sp,sp,-8
    2590:	dfc00115 	stw	ra,4(sp)
    2594:	dc000015 	stw	r16,0(sp)
    2598:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    259c:	2809883a 	mov	r4,r5
    25a0:	300b883a 	mov	r5,r6
    25a4:	380d883a 	mov	r6,r7
    25a8:	00027440 	call	2744 <open>
    25ac:	1009883a 	mov	r4,r2

  if (old >= 0)
    25b0:	10000b16 	blt	r2,zero,25e0 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    25b4:	10c00324 	muli	r3,r2,12
    25b8:	00800034 	movhi	r2,0
    25bc:	10999204 	addi	r2,r2,26184
    25c0:	1887883a 	add	r3,r3,r2
    25c4:	18800017 	ldw	r2,0(r3)
    25c8:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    25cc:	18800117 	ldw	r2,4(r3)
    25d0:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    25d4:	18800217 	ldw	r2,8(r3)
    25d8:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    25dc:	00028c00 	call	28c0 <alt_release_fd>
  }
} 
    25e0:	dfc00117 	ldw	ra,4(sp)
    25e4:	dc000017 	ldw	r16,0(sp)
    25e8:	dec00204 	addi	sp,sp,8
    25ec:	f800283a 	ret

000025f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    25f0:	defffa04 	addi	sp,sp,-24
    25f4:	dfc00515 	stw	ra,20(sp)
    25f8:	dd000415 	stw	r20,16(sp)
    25fc:	dcc00315 	stw	r19,12(sp)
    2600:	dc800215 	stw	r18,8(sp)
    2604:	dc400115 	stw	r17,4(sp)
    2608:	dc000015 	stw	r16,0(sp)
    260c:	2005883a 	mov	r2,r4
    2610:	2827883a 	mov	r19,r5
    2614:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2618:	04000034 	movhi	r16,0
    261c:	84199504 	addi	r16,r16,26196
    2620:	04800044 	movi	r18,1
    2624:	04407fc4 	movi	r17,511
    2628:	8009883a 	mov	r4,r16
    262c:	100b883a 	mov	r5,r2
    2630:	900d883a 	mov	r6,r18
    2634:	880f883a 	mov	r7,r17
    2638:	000258c0 	call	258c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    263c:	843ffd04 	addi	r16,r16,-12
    2640:	8009883a 	mov	r4,r16
    2644:	980b883a 	mov	r5,r19
    2648:	000d883a 	mov	r6,zero
    264c:	880f883a 	mov	r7,r17
    2650:	000258c0 	call	258c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2654:	81000604 	addi	r4,r16,24
    2658:	a00b883a 	mov	r5,r20
    265c:	900d883a 	mov	r6,r18
    2660:	880f883a 	mov	r7,r17
    2664:	000258c0 	call	258c <alt_open_fd>
}  
    2668:	dfc00517 	ldw	ra,20(sp)
    266c:	dd000417 	ldw	r20,16(sp)
    2670:	dcc00317 	ldw	r19,12(sp)
    2674:	dc800217 	ldw	r18,8(sp)
    2678:	dc400117 	ldw	r17,4(sp)
    267c:	dc000017 	ldw	r16,0(sp)
    2680:	dec00604 	addi	sp,sp,24
    2684:	f800283a 	ret

00002688 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2688:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    268c:	008007c4 	movi	r2,31
    2690:	1100022e 	bgeu	r2,r4,269c <alt_irq_register+0x14>
    2694:	00bffa84 	movi	r2,-22
    2698:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    269c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26a0:	013fff84 	movi	r4,-2
    26a4:	4104703a 	and	r2,r8,r4
    26a8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    26ac:	380490fa 	slli	r2,r7,3
    26b0:	00c00074 	movhi	r3,1
    26b4:	18e34d04 	addi	r3,r3,-29388
    26b8:	10c5883a 	add	r2,r2,r3
    26bc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    26c0:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    26c4:	30000e26 	beq	r6,zero,2700 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26c8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26cc:	2904703a 	and	r2,r5,r4
    26d0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    26d4:	00c00074 	movhi	r3,1
    26d8:	18e33c04 	addi	r3,r3,-29456
    26dc:	19000017 	ldw	r4,0(r3)
    26e0:	00800044 	movi	r2,1
    26e4:	11c4983a 	sll	r2,r2,r7
    26e8:	1104b03a 	or	r2,r2,r4
    26ec:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    26f0:	18800017 	ldw	r2,0(r3)
    26f4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26f8:	2801703a 	wrctl	status,r5
    26fc:	00000e06 	br	2738 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2700:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2704:	00bfff84 	movi	r2,-2
    2708:	2884703a 	and	r2,r5,r2
    270c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2710:	00c00074 	movhi	r3,1
    2714:	18e33c04 	addi	r3,r3,-29456
    2718:	19000017 	ldw	r4,0(r3)
    271c:	00bfff84 	movi	r2,-2
    2720:	11c4183a 	rol	r2,r2,r7
    2724:	1104703a 	and	r2,r2,r4
    2728:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    272c:	18800017 	ldw	r2,0(r3)
    2730:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2734:	2801703a 	wrctl	status,r5
    2738:	4001703a 	wrctl	status,r8
    273c:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2740:	f800283a 	ret

00002744 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2744:	defff904 	addi	sp,sp,-28
    2748:	dfc00615 	stw	ra,24(sp)
    274c:	dd400515 	stw	r21,20(sp)
    2750:	dd000415 	stw	r20,16(sp)
    2754:	dcc00315 	stw	r19,12(sp)
    2758:	dc800215 	stw	r18,8(sp)
    275c:	dc400115 	stw	r17,4(sp)
    2760:	dc000015 	stw	r16,0(sp)
    2764:	2029883a 	mov	r20,r4
    2768:	2827883a 	mov	r19,r5
    276c:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2770:	01400034 	movhi	r5,0
    2774:	295bf604 	addi	r5,r5,28632
    2778:	00024fc0 	call	24fc <alt_find_dev>
    277c:	1021883a 	mov	r16,r2
    2780:	10000226 	beq	r2,zero,278c <open+0x48>
    2784:	0025883a 	mov	r18,zero
    2788:	00000a06 	br	27b4 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    278c:	a009883a 	mov	r4,r20
    2790:	00029cc0 	call	29cc <alt_find_file>
    2794:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2798:	1000051e 	bne	r2,zero,27b0 <open+0x6c>
    279c:	047fffc4 	movi	r17,-1
    27a0:	043ffb44 	movi	r16,-19
    27a4:	00002b06 	br	2854 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    27a8:	043ffcc4 	movi	r16,-13
    27ac:	00002906 	br	2854 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    27b0:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    27b4:	8009883a 	mov	r4,r16
    27b8:	0002a880 	call	2a88 <alt_get_fd>
    27bc:	1023883a 	mov	r17,r2
    27c0:	10003316 	blt	r2,zero,2890 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    27c4:	10800324 	muli	r2,r2,12
    27c8:	02000034 	movhi	r8,0
    27cc:	42199204 	addi	r8,r8,26184
    27d0:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    27d4:	00900034 	movhi	r2,16384
    27d8:	10bfffc4 	addi	r2,r2,-1
    27dc:	9886703a 	and	r3,r19,r2
    27e0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    27e4:	9004c03a 	cmpne	r2,r18,zero
    27e8:	1000121e 	bne	r2,zero,2834 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    27ec:	18900034 	orhi	r2,r3,16384
    27f0:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    27f4:	00800034 	movhi	r2,0
    27f8:	109bf804 	addi	r2,r2,28640
    27fc:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2800:	21800017 	ldw	r6,0(r4)
    2804:	000b883a 	mov	r5,zero
    2808:	4007883a 	mov	r3,r8
    280c:	02400044 	movi	r9,1
    2810:	02000304 	movi	r8,12
    2814:	18800017 	ldw	r2,0(r3)
    2818:	1180031e 	bne	r2,r6,2828 <open+0xe4>
    281c:	18800217 	ldw	r2,8(r3)
    2820:	1000010e 	bge	r2,zero,2828 <open+0xe4>
    2824:	193fe01e 	bne	r3,r4,27a8 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2828:	2a4b883a 	add	r5,r5,r9
    282c:	1a07883a 	add	r3,r3,r8
    2830:	397ff82e 	bgeu	r7,r5,2814 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2834:	80800317 	ldw	r2,12(r16)
    2838:	10001726 	beq	r2,zero,2898 <open+0x154>
    283c:	a00b883a 	mov	r5,r20
    2840:	980d883a 	mov	r6,r19
    2844:	a80f883a 	mov	r7,r21
    2848:	103ee83a 	callr	r2
    284c:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2850:	1000110e 	bge	r2,zero,2898 <open+0x154>
  {
    alt_release_fd (index);  
    2854:	8809883a 	mov	r4,r17
    2858:	00028c00 	call	28c0 <alt_release_fd>
    285c:	00800034 	movhi	r2,0
    2860:	109bf904 	addi	r2,r2,28644
    2864:	10800017 	ldw	r2,0(r2)
    2868:	1000031e 	bne	r2,zero,2878 <open+0x134>
    286c:	00c00074 	movhi	r3,1
    2870:	18e33f04 	addi	r3,r3,-29444
    2874:	00000206 	br	2880 <open+0x13c>
    2878:	103ee83a 	callr	r2
    287c:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    2880:	0405c83a 	sub	r2,zero,r16
    2884:	18800015 	stw	r2,0(r3)
    2888:	047fffc4 	movi	r17,-1
    288c:	00000206 	br	2898 <open+0x154>
    2890:	1021883a 	mov	r16,r2
    2894:	003fef06 	br	2854 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    2898:	8805883a 	mov	r2,r17
    289c:	dfc00617 	ldw	ra,24(sp)
    28a0:	dd400517 	ldw	r21,20(sp)
    28a4:	dd000417 	ldw	r20,16(sp)
    28a8:	dcc00317 	ldw	r19,12(sp)
    28ac:	dc800217 	ldw	r18,8(sp)
    28b0:	dc400117 	ldw	r17,4(sp)
    28b4:	dc000017 	ldw	r16,0(sp)
    28b8:	dec00704 	addi	sp,sp,28
    28bc:	f800283a 	ret

000028c0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    28c0:	00800084 	movi	r2,2
    28c4:	1100060e 	bge	r2,r4,28e0 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    28c8:	20800324 	muli	r2,r4,12
    28cc:	00c00034 	movhi	r3,0
    28d0:	18d99204 	addi	r3,r3,26184
    28d4:	10c5883a 	add	r2,r2,r3
    28d8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    28dc:	10000015 	stw	zero,0(r2)
    28e0:	f800283a 	ret

000028e4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28e4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28e8:	00bfff84 	movi	r2,-2
    28ec:	2884703a 	and	r2,r5,r2
    28f0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    28f4:	20c00017 	ldw	r3,0(r4)
    28f8:	20800117 	ldw	r2,4(r4)
    28fc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2900:	20800117 	ldw	r2,4(r4)
    2904:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2908:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    290c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2910:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    2914:	f800283a 	ret

00002918 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2918:	defffd04 	addi	sp,sp,-12
    291c:	dfc00215 	stw	ra,8(sp)
    2920:	dc400115 	stw	r17,4(sp)
    2924:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2928:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    292c:	d0a74a17 	ldw	r2,-25304(gp)
    2930:	10800044 	addi	r2,r2,1
    2934:	d0a74a15 	stw	r2,-25304(gp)
    2938:	00001b06 	br	29a8 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    293c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2940:	80800403 	ldbu	r2,16(r16)
    2944:	10000326 	beq	r2,zero,2954 <alt_tick+0x3c>
    2948:	d0a74a17 	ldw	r2,-25304(gp)
    294c:	1000011e 	bne	r2,zero,2954 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    2950:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2954:	d0e74a17 	ldw	r3,-25304(gp)
    2958:	80800217 	ldw	r2,8(r16)
    295c:	18801136 	bltu	r3,r2,29a4 <alt_tick+0x8c>
    2960:	80800403 	ldbu	r2,16(r16)
    2964:	10000f1e 	bne	r2,zero,29a4 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    2968:	80800317 	ldw	r2,12(r16)
    296c:	81000517 	ldw	r4,20(r16)
    2970:	103ee83a 	callr	r2
    2974:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2978:	1000031e 	bne	r2,zero,2988 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    297c:	8009883a 	mov	r4,r16
    2980:	00028e40 	call	28e4 <alt_alarm_stop>
    2984:	00000706 	br	29a4 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    2988:	80800217 	ldw	r2,8(r16)
    298c:	1885883a 	add	r2,r3,r2
    2990:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2994:	d0e74a17 	ldw	r3,-25304(gp)
    2998:	10c0022e 	bgeu	r2,r3,29a4 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    299c:	00800044 	movi	r2,1
    29a0:	80800405 	stb	r2,16(r16)
    29a4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    29a8:	d0a00704 	addi	r2,gp,-32740
    29ac:	80bfe31e 	bne	r16,r2,293c <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    29b0:	dfc00217 	ldw	ra,8(sp)
    29b4:	dc400117 	ldw	r17,4(sp)
    29b8:	dc000017 	ldw	r16,0(sp)
    29bc:	dec00304 	addi	sp,sp,12
    29c0:	f800283a 	ret

000029c4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    29c4:	000170fa 	wrctl	ienable,zero
}
    29c8:	f800283a 	ret

000029cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    29cc:	defff904 	addi	sp,sp,-28
    29d0:	dfc00615 	stw	ra,24(sp)
    29d4:	dd400515 	stw	r21,20(sp)
    29d8:	dd000415 	stw	r20,16(sp)
    29dc:	dcc00315 	stw	r19,12(sp)
    29e0:	dc800215 	stw	r18,8(sp)
    29e4:	dc400115 	stw	r17,4(sp)
    29e8:	dc000015 	stw	r16,0(sp)
    29ec:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    29f0:	00800034 	movhi	r2,0
    29f4:	109bf404 	addi	r2,r2,28624
    29f8:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    29fc:	102b883a 	mov	r21,r2
    2a00:	88801626 	beq	r17,r2,2a5c <alt_find_file+0x90>
    2a04:	053fffc4 	movi	r20,-1
    2a08:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    2a0c:	8c000217 	ldw	r16,8(r17)
    2a10:	8009883a 	mov	r4,r16
    2a14:	0002f240 	call	2f24 <strlen>
    2a18:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    2a1c:	8085883a 	add	r2,r16,r2
    2a20:	1505883a 	add	r2,r2,r20
    2a24:	10800007 	ldb	r2,0(r2)
    2a28:	14c0011e 	bne	r2,r19,2a30 <alt_find_file+0x64>
    {
      len -= 1;
    2a2c:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2a30:	1c85883a 	add	r2,r3,r18
    2a34:	10800007 	ldb	r2,0(r2)
    2a38:	14c00126 	beq	r2,r19,2a40 <alt_find_file+0x74>
    2a3c:	1000051e 	bne	r2,zero,2a54 <alt_find_file+0x88>
    2a40:	8009883a 	mov	r4,r16
    2a44:	900b883a 	mov	r5,r18
    2a48:	180d883a 	mov	r6,r3
    2a4c:	0002b680 	call	2b68 <memcmp>
    2a50:	10000326 	beq	r2,zero,2a60 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2a54:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2a58:	8d7fec1e 	bne	r17,r21,2a0c <alt_find_file+0x40>
    2a5c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    2a60:	8805883a 	mov	r2,r17
    2a64:	dfc00617 	ldw	ra,24(sp)
    2a68:	dd400517 	ldw	r21,20(sp)
    2a6c:	dd000417 	ldw	r20,16(sp)
    2a70:	dcc00317 	ldw	r19,12(sp)
    2a74:	dc800217 	ldw	r18,8(sp)
    2a78:	dc400117 	ldw	r17,4(sp)
    2a7c:	dc000017 	ldw	r16,0(sp)
    2a80:	dec00704 	addi	sp,sp,28
    2a84:	f800283a 	ret

00002a88 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2a88:	000b883a 	mov	r5,zero
    2a8c:	00c00034 	movhi	r3,0
    2a90:	18d99204 	addi	r3,r3,26184
    2a94:	02000304 	movi	r8,12
    2a98:	02400034 	movhi	r9,0
    2a9c:	4a5bf804 	addi	r9,r9,28640
    2aa0:	01c00044 	movi	r7,1
    2aa4:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    2aa8:	18800017 	ldw	r2,0(r3)
    2aac:	10000c1e 	bne	r2,zero,2ae0 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    2ab0:	2a05383a 	mul	r2,r5,r8
    2ab4:	00c00034 	movhi	r3,0
    2ab8:	18d99204 	addi	r3,r3,26184
    2abc:	10c5883a 	add	r2,r2,r3
    2ac0:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    2ac4:	48800017 	ldw	r2,0(r9)
    2ac8:	11400216 	blt	r2,r5,2ad4 <alt_get_fd+0x4c>
    2acc:	2805883a 	mov	r2,r5
    2ad0:	f800283a 	ret
      {
        alt_max_fd = i;
    2ad4:	49400015 	stw	r5,0(r9)
    2ad8:	2805883a 	mov	r2,r5
    2adc:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2ae0:	29cb883a 	add	r5,r5,r7
    2ae4:	1a07883a 	add	r3,r3,r8
    2ae8:	29bfef1e 	bne	r5,r6,2aa8 <alt_get_fd+0x20>
    2aec:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    2af0:	f800283a 	ret

00002af4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    2af4:	2007883a 	mov	r3,r4
    2af8:	00808004 	movi	r2,512
    2afc:	1140012e 	bgeu	r2,r5,2b04 <alt_icache_flush+0x10>
    2b00:	100b883a 	mov	r5,r2
    2b04:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2b08:	1940042e 	bgeu	r3,r5,2b1c <alt_icache_flush+0x28>
    2b0c:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2b10:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2b14:	1887883a 	add	r3,r3,r2
    2b18:	197ffd36 	bltu	r3,r5,2b10 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2b1c:	208007cc 	andi	r2,r4,31
    2b20:	10000126 	beq	r2,zero,2b28 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2b24:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2b28:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2b2c:	f800283a 	ret

00002b30 <exit>:
    2b30:	defffe04 	addi	sp,sp,-8
    2b34:	000b883a 	mov	r5,zero
    2b38:	dc000015 	stw	r16,0(sp)
    2b3c:	dfc00115 	stw	ra,4(sp)
    2b40:	2021883a 	mov	r16,r4
    2b44:	00032240 	call	3224 <__call_exitprocs>
    2b48:	00800034 	movhi	r2,0
    2b4c:	109bfe04 	addi	r2,r2,28664
    2b50:	11000017 	ldw	r4,0(r2)
    2b54:	20800f17 	ldw	r2,60(r4)
    2b58:	10000126 	beq	r2,zero,2b60 <exit+0x30>
    2b5c:	103ee83a 	callr	r2
    2b60:	8009883a 	mov	r4,r16
    2b64:	0004cf40 	call	4cf4 <_exit>

00002b68 <memcmp>:
    2b68:	00c000c4 	movi	r3,3
    2b6c:	1980032e 	bgeu	r3,r6,2b7c <memcmp+0x14>
    2b70:	2144b03a 	or	r2,r4,r5
    2b74:	10c4703a 	and	r2,r2,r3
    2b78:	10000f26 	beq	r2,zero,2bb8 <memcmp+0x50>
    2b7c:	31ffffc4 	addi	r7,r6,-1
    2b80:	3000061e 	bne	r6,zero,2b9c <memcmp+0x34>
    2b84:	00000a06 	br	2bb0 <memcmp+0x48>
    2b88:	39ffffc4 	addi	r7,r7,-1
    2b8c:	00bfffc4 	movi	r2,-1
    2b90:	21000044 	addi	r4,r4,1
    2b94:	29400044 	addi	r5,r5,1
    2b98:	38800526 	beq	r7,r2,2bb0 <memcmp+0x48>
    2b9c:	20c00003 	ldbu	r3,0(r4)
    2ba0:	28800003 	ldbu	r2,0(r5)
    2ba4:	18bff826 	beq	r3,r2,2b88 <memcmp+0x20>
    2ba8:	1885c83a 	sub	r2,r3,r2
    2bac:	f800283a 	ret
    2bb0:	0005883a 	mov	r2,zero
    2bb4:	f800283a 	ret
    2bb8:	180f883a 	mov	r7,r3
    2bbc:	20c00017 	ldw	r3,0(r4)
    2bc0:	28800017 	ldw	r2,0(r5)
    2bc4:	18bfed1e 	bne	r3,r2,2b7c <memcmp+0x14>
    2bc8:	31bfff04 	addi	r6,r6,-4
    2bcc:	21000104 	addi	r4,r4,4
    2bd0:	29400104 	addi	r5,r5,4
    2bd4:	39bff936 	bltu	r7,r6,2bbc <memcmp+0x54>
    2bd8:	003fe806 	br	2b7c <memcmp+0x14>

00002bdc <memcpy>:
    2bdc:	01c003c4 	movi	r7,15
    2be0:	2007883a 	mov	r3,r4
    2be4:	3980032e 	bgeu	r7,r6,2bf4 <memcpy+0x18>
    2be8:	2904b03a 	or	r2,r5,r4
    2bec:	108000cc 	andi	r2,r2,3
    2bf0:	10000926 	beq	r2,zero,2c18 <memcpy+0x3c>
    2bf4:	30000626 	beq	r6,zero,2c10 <memcpy+0x34>
    2bf8:	30cd883a 	add	r6,r6,r3
    2bfc:	28800003 	ldbu	r2,0(r5)
    2c00:	29400044 	addi	r5,r5,1
    2c04:	18800005 	stb	r2,0(r3)
    2c08:	18c00044 	addi	r3,r3,1
    2c0c:	30fffb1e 	bne	r6,r3,2bfc <memcpy+0x20>
    2c10:	2005883a 	mov	r2,r4
    2c14:	f800283a 	ret
    2c18:	3811883a 	mov	r8,r7
    2c1c:	200f883a 	mov	r7,r4
    2c20:	28c00017 	ldw	r3,0(r5)
    2c24:	31bffc04 	addi	r6,r6,-16
    2c28:	38c00015 	stw	r3,0(r7)
    2c2c:	28800117 	ldw	r2,4(r5)
    2c30:	38800115 	stw	r2,4(r7)
    2c34:	28c00217 	ldw	r3,8(r5)
    2c38:	38c00215 	stw	r3,8(r7)
    2c3c:	28800317 	ldw	r2,12(r5)
    2c40:	29400404 	addi	r5,r5,16
    2c44:	38800315 	stw	r2,12(r7)
    2c48:	39c00404 	addi	r7,r7,16
    2c4c:	41bff436 	bltu	r8,r6,2c20 <memcpy+0x44>
    2c50:	008000c4 	movi	r2,3
    2c54:	1180072e 	bgeu	r2,r6,2c74 <memcpy+0x98>
    2c58:	1007883a 	mov	r3,r2
    2c5c:	28800017 	ldw	r2,0(r5)
    2c60:	31bfff04 	addi	r6,r6,-4
    2c64:	29400104 	addi	r5,r5,4
    2c68:	38800015 	stw	r2,0(r7)
    2c6c:	39c00104 	addi	r7,r7,4
    2c70:	19bffa36 	bltu	r3,r6,2c5c <memcpy+0x80>
    2c74:	3807883a 	mov	r3,r7
    2c78:	003fde06 	br	2bf4 <memcpy+0x18>

00002c7c <putc>:
    2c7c:	defffc04 	addi	sp,sp,-16
    2c80:	dc800215 	stw	r18,8(sp)
    2c84:	04800034 	movhi	r18,0
    2c88:	949bfd04 	addi	r18,r18,28660
    2c8c:	90c00017 	ldw	r3,0(r18)
    2c90:	dc400115 	stw	r17,4(sp)
    2c94:	dc000015 	stw	r16,0(sp)
    2c98:	dfc00315 	stw	ra,12(sp)
    2c9c:	2023883a 	mov	r17,r4
    2ca0:	2821883a 	mov	r16,r5
    2ca4:	18000226 	beq	r3,zero,2cb0 <putc+0x34>
    2ca8:	18800e17 	ldw	r2,56(r3)
    2cac:	10001126 	beq	r2,zero,2cf4 <putc+0x78>
    2cb0:	80800217 	ldw	r2,8(r16)
    2cb4:	10ffffc4 	addi	r3,r2,-1
    2cb8:	80c00215 	stw	r3,8(r16)
    2cbc:	18001316 	blt	r3,zero,2d0c <putc+0x90>
    2cc0:	80800017 	ldw	r2,0(r16)
    2cc4:	14400005 	stb	r17,0(r2)
    2cc8:	80c00017 	ldw	r3,0(r16)
    2ccc:	18800044 	addi	r2,r3,1
    2cd0:	18c00003 	ldbu	r3,0(r3)
    2cd4:	80800015 	stw	r2,0(r16)
    2cd8:	1805883a 	mov	r2,r3
    2cdc:	dfc00317 	ldw	ra,12(sp)
    2ce0:	dc800217 	ldw	r18,8(sp)
    2ce4:	dc400117 	ldw	r17,4(sp)
    2ce8:	dc000017 	ldw	r16,0(sp)
    2cec:	dec00404 	addi	sp,sp,16
    2cf0:	f800283a 	ret
    2cf4:	1809883a 	mov	r4,r3
    2cf8:	000366c0 	call	366c <__sinit>
    2cfc:	80800217 	ldw	r2,8(r16)
    2d00:	10ffffc4 	addi	r3,r2,-1
    2d04:	80c00215 	stw	r3,8(r16)
    2d08:	183fed0e 	bge	r3,zero,2cc0 <putc+0x44>
    2d0c:	80800617 	ldw	r2,24(r16)
    2d10:	18800f16 	blt	r3,r2,2d50 <putc+0xd4>
    2d14:	80800017 	ldw	r2,0(r16)
    2d18:	14400005 	stb	r17,0(r2)
    2d1c:	81000017 	ldw	r4,0(r16)
    2d20:	00800284 	movi	r2,10
    2d24:	20c00003 	ldbu	r3,0(r4)
    2d28:	18801226 	beq	r3,r2,2d74 <putc+0xf8>
    2d2c:	20800044 	addi	r2,r4,1
    2d30:	80800015 	stw	r2,0(r16)
    2d34:	1805883a 	mov	r2,r3
    2d38:	dfc00317 	ldw	ra,12(sp)
    2d3c:	dc800217 	ldw	r18,8(sp)
    2d40:	dc400117 	ldw	r17,4(sp)
    2d44:	dc000017 	ldw	r16,0(sp)
    2d48:	dec00404 	addi	sp,sp,16
    2d4c:	f800283a 	ret
    2d50:	91000017 	ldw	r4,0(r18)
    2d54:	880b883a 	mov	r5,r17
    2d58:	800d883a 	mov	r6,r16
    2d5c:	dfc00317 	ldw	ra,12(sp)
    2d60:	dc800217 	ldw	r18,8(sp)
    2d64:	dc400117 	ldw	r17,4(sp)
    2d68:	dc000017 	ldw	r16,0(sp)
    2d6c:	dec00404 	addi	sp,sp,16
    2d70:	0002f981 	jmpi	2f98 <__swbuf_r>
    2d74:	91000017 	ldw	r4,0(r18)
    2d78:	180b883a 	mov	r5,r3
    2d7c:	003ff606 	br	2d58 <putc+0xdc>

00002d80 <_putc_r>:
    2d80:	defffc04 	addi	sp,sp,-16
    2d84:	dc400215 	stw	r17,8(sp)
    2d88:	dc000115 	stw	r16,4(sp)
    2d8c:	dfc00315 	stw	ra,12(sp)
    2d90:	2021883a 	mov	r16,r4
    2d94:	2823883a 	mov	r17,r5
    2d98:	20000226 	beq	r4,zero,2da4 <_putc_r+0x24>
    2d9c:	20800e17 	ldw	r2,56(r4)
    2da0:	10001026 	beq	r2,zero,2de4 <_putc_r+0x64>
    2da4:	30800217 	ldw	r2,8(r6)
    2da8:	10ffffc4 	addi	r3,r2,-1
    2dac:	30c00215 	stw	r3,8(r6)
    2db0:	18001316 	blt	r3,zero,2e00 <_putc_r+0x80>
    2db4:	30800017 	ldw	r2,0(r6)
    2db8:	14400005 	stb	r17,0(r2)
    2dbc:	30c00017 	ldw	r3,0(r6)
    2dc0:	18800044 	addi	r2,r3,1
    2dc4:	18c00003 	ldbu	r3,0(r3)
    2dc8:	30800015 	stw	r2,0(r6)
    2dcc:	1805883a 	mov	r2,r3
    2dd0:	dfc00317 	ldw	ra,12(sp)
    2dd4:	dc400217 	ldw	r17,8(sp)
    2dd8:	dc000117 	ldw	r16,4(sp)
    2ddc:	dec00404 	addi	sp,sp,16
    2de0:	f800283a 	ret
    2de4:	d9800015 	stw	r6,0(sp)
    2de8:	000366c0 	call	366c <__sinit>
    2dec:	d9800017 	ldw	r6,0(sp)
    2df0:	30800217 	ldw	r2,8(r6)
    2df4:	10ffffc4 	addi	r3,r2,-1
    2df8:	30c00215 	stw	r3,8(r6)
    2dfc:	183fed0e 	bge	r3,zero,2db4 <_putc_r+0x34>
    2e00:	30800617 	ldw	r2,24(r6)
    2e04:	18800e16 	blt	r3,r2,2e40 <_putc_r+0xc0>
    2e08:	30800017 	ldw	r2,0(r6)
    2e0c:	14400005 	stb	r17,0(r2)
    2e10:	31000017 	ldw	r4,0(r6)
    2e14:	00800284 	movi	r2,10
    2e18:	20c00003 	ldbu	r3,0(r4)
    2e1c:	18800f26 	beq	r3,r2,2e5c <_putc_r+0xdc>
    2e20:	20800044 	addi	r2,r4,1
    2e24:	30800015 	stw	r2,0(r6)
    2e28:	1805883a 	mov	r2,r3
    2e2c:	dfc00317 	ldw	ra,12(sp)
    2e30:	dc400217 	ldw	r17,8(sp)
    2e34:	dc000117 	ldw	r16,4(sp)
    2e38:	dec00404 	addi	sp,sp,16
    2e3c:	f800283a 	ret
    2e40:	8009883a 	mov	r4,r16
    2e44:	880b883a 	mov	r5,r17
    2e48:	dfc00317 	ldw	ra,12(sp)
    2e4c:	dc400217 	ldw	r17,8(sp)
    2e50:	dc000117 	ldw	r16,4(sp)
    2e54:	dec00404 	addi	sp,sp,16
    2e58:	0002f981 	jmpi	2f98 <__swbuf_r>
    2e5c:	8009883a 	mov	r4,r16
    2e60:	180b883a 	mov	r5,r3
    2e64:	003ff806 	br	2e48 <_putc_r+0xc8>

00002e68 <strcmp>:
    2e68:	2144b03a 	or	r2,r4,r5
    2e6c:	108000cc 	andi	r2,r2,3
    2e70:	10001d1e 	bne	r2,zero,2ee8 <strcmp+0x80>
    2e74:	200f883a 	mov	r7,r4
    2e78:	28800017 	ldw	r2,0(r5)
    2e7c:	21000017 	ldw	r4,0(r4)
    2e80:	280d883a 	mov	r6,r5
    2e84:	2080161e 	bne	r4,r2,2ee0 <strcmp+0x78>
    2e88:	023fbff4 	movhi	r8,65279
    2e8c:	423fbfc4 	addi	r8,r8,-257
    2e90:	2207883a 	add	r3,r4,r8
    2e94:	01602074 	movhi	r5,32897
    2e98:	29602004 	addi	r5,r5,-32640
    2e9c:	1946703a 	and	r3,r3,r5
    2ea0:	0104303a 	nor	r2,zero,r4
    2ea4:	10c4703a 	and	r2,r2,r3
    2ea8:	10001c1e 	bne	r2,zero,2f1c <strcmp+0xb4>
    2eac:	4013883a 	mov	r9,r8
    2eb0:	2811883a 	mov	r8,r5
    2eb4:	00000106 	br	2ebc <strcmp+0x54>
    2eb8:	1800181e 	bne	r3,zero,2f1c <strcmp+0xb4>
    2ebc:	39c00104 	addi	r7,r7,4
    2ec0:	39000017 	ldw	r4,0(r7)
    2ec4:	31800104 	addi	r6,r6,4
    2ec8:	31400017 	ldw	r5,0(r6)
    2ecc:	2245883a 	add	r2,r4,r9
    2ed0:	1204703a 	and	r2,r2,r8
    2ed4:	0106303a 	nor	r3,zero,r4
    2ed8:	1886703a 	and	r3,r3,r2
    2edc:	217ff626 	beq	r4,r5,2eb8 <strcmp+0x50>
    2ee0:	3809883a 	mov	r4,r7
    2ee4:	300b883a 	mov	r5,r6
    2ee8:	20c00007 	ldb	r3,0(r4)
    2eec:	1800051e 	bne	r3,zero,2f04 <strcmp+0x9c>
    2ef0:	00000606 	br	2f0c <strcmp+0xa4>
    2ef4:	21000044 	addi	r4,r4,1
    2ef8:	20c00007 	ldb	r3,0(r4)
    2efc:	29400044 	addi	r5,r5,1
    2f00:	18000226 	beq	r3,zero,2f0c <strcmp+0xa4>
    2f04:	28800007 	ldb	r2,0(r5)
    2f08:	18bffa26 	beq	r3,r2,2ef4 <strcmp+0x8c>
    2f0c:	20c00003 	ldbu	r3,0(r4)
    2f10:	28800003 	ldbu	r2,0(r5)
    2f14:	1885c83a 	sub	r2,r3,r2
    2f18:	f800283a 	ret
    2f1c:	0005883a 	mov	r2,zero
    2f20:	f800283a 	ret

00002f24 <strlen>:
    2f24:	208000cc 	andi	r2,r4,3
    2f28:	2011883a 	mov	r8,r4
    2f2c:	1000161e 	bne	r2,zero,2f88 <strlen+0x64>
    2f30:	20c00017 	ldw	r3,0(r4)
    2f34:	017fbff4 	movhi	r5,65279
    2f38:	297fbfc4 	addi	r5,r5,-257
    2f3c:	01e02074 	movhi	r7,32897
    2f40:	39e02004 	addi	r7,r7,-32640
    2f44:	1945883a 	add	r2,r3,r5
    2f48:	11c4703a 	and	r2,r2,r7
    2f4c:	00c6303a 	nor	r3,zero,r3
    2f50:	1886703a 	and	r3,r3,r2
    2f54:	18000c1e 	bne	r3,zero,2f88 <strlen+0x64>
    2f58:	280d883a 	mov	r6,r5
    2f5c:	380b883a 	mov	r5,r7
    2f60:	21000104 	addi	r4,r4,4
    2f64:	20800017 	ldw	r2,0(r4)
    2f68:	1187883a 	add	r3,r2,r6
    2f6c:	1946703a 	and	r3,r3,r5
    2f70:	0084303a 	nor	r2,zero,r2
    2f74:	10c4703a 	and	r2,r2,r3
    2f78:	103ff926 	beq	r2,zero,2f60 <strlen+0x3c>
    2f7c:	20800007 	ldb	r2,0(r4)
    2f80:	10000326 	beq	r2,zero,2f90 <strlen+0x6c>
    2f84:	21000044 	addi	r4,r4,1
    2f88:	20800007 	ldb	r2,0(r4)
    2f8c:	103ffd1e 	bne	r2,zero,2f84 <strlen+0x60>
    2f90:	2205c83a 	sub	r2,r4,r8
    2f94:	f800283a 	ret

00002f98 <__swbuf_r>:
    2f98:	defffc04 	addi	sp,sp,-16
    2f9c:	dc400215 	stw	r17,8(sp)
    2fa0:	dc000115 	stw	r16,4(sp)
    2fa4:	dfc00315 	stw	ra,12(sp)
    2fa8:	2023883a 	mov	r17,r4
    2fac:	2821883a 	mov	r16,r5
    2fb0:	20000226 	beq	r4,zero,2fbc <__swbuf_r+0x24>
    2fb4:	20800e17 	ldw	r2,56(r4)
    2fb8:	10002f26 	beq	r2,zero,3078 <__swbuf_r+0xe0>
    2fbc:	3080030b 	ldhu	r2,12(r6)
    2fc0:	30c00617 	ldw	r3,24(r6)
    2fc4:	1080020c 	andi	r2,r2,8
    2fc8:	30c00215 	stw	r3,8(r6)
    2fcc:	10002226 	beq	r2,zero,3058 <__swbuf_r+0xc0>
    2fd0:	30c00417 	ldw	r3,16(r6)
    2fd4:	18002026 	beq	r3,zero,3058 <__swbuf_r+0xc0>
    2fd8:	31000017 	ldw	r4,0(r6)
    2fdc:	30800517 	ldw	r2,20(r6)
    2fe0:	20c7c83a 	sub	r3,r4,r3
    2fe4:	18802f0e 	bge	r3,r2,30a4 <__swbuf_r+0x10c>
    2fe8:	19400044 	addi	r5,r3,1
    2fec:	30800217 	ldw	r2,8(r6)
    2ff0:	84003fcc 	andi	r16,r16,255
    2ff4:	20c00044 	addi	r3,r4,1
    2ff8:	10bfffc4 	addi	r2,r2,-1
    2ffc:	30800215 	stw	r2,8(r6)
    3000:	24000005 	stb	r16,0(r4)
    3004:	30800517 	ldw	r2,20(r6)
    3008:	30c00015 	stw	r3,0(r6)
    300c:	11400c26 	beq	r2,r5,3040 <__swbuf_r+0xa8>
    3010:	3080030b 	ldhu	r2,12(r6)
    3014:	1080004c 	andi	r2,r2,1
    3018:	1005003a 	cmpeq	r2,r2,zero
    301c:	10000626 	beq	r2,zero,3038 <__swbuf_r+0xa0>
    3020:	8005883a 	mov	r2,r16
    3024:	dfc00317 	ldw	ra,12(sp)
    3028:	dc400217 	ldw	r17,8(sp)
    302c:	dc000117 	ldw	r16,4(sp)
    3030:	dec00404 	addi	sp,sp,16
    3034:	f800283a 	ret
    3038:	00800284 	movi	r2,10
    303c:	80bff81e 	bne	r16,r2,3020 <__swbuf_r+0x88>
    3040:	8809883a 	mov	r4,r17
    3044:	300b883a 	mov	r5,r6
    3048:	00033d40 	call	33d4 <_fflush_r>
    304c:	103ff426 	beq	r2,zero,3020 <__swbuf_r+0x88>
    3050:	043fffc4 	movi	r16,-1
    3054:	003ff206 	br	3020 <__swbuf_r+0x88>
    3058:	300b883a 	mov	r5,r6
    305c:	8809883a 	mov	r4,r17
    3060:	d9800015 	stw	r6,0(sp)
    3064:	00030e40 	call	30e4 <__swsetup_r>
    3068:	d9800017 	ldw	r6,0(sp)
    306c:	1000061e 	bne	r2,zero,3088 <__swbuf_r+0xf0>
    3070:	30c00417 	ldw	r3,16(r6)
    3074:	003fd806 	br	2fd8 <__swbuf_r+0x40>
    3078:	d9800015 	stw	r6,0(sp)
    307c:	000366c0 	call	366c <__sinit>
    3080:	d9800017 	ldw	r6,0(sp)
    3084:	003fcd06 	br	2fbc <__swbuf_r+0x24>
    3088:	3080030b 	ldhu	r2,12(r6)
    308c:	00c00244 	movi	r3,9
    3090:	043fffc4 	movi	r16,-1
    3094:	10801014 	ori	r2,r2,64
    3098:	3080030d 	sth	r2,12(r6)
    309c:	88c00015 	stw	r3,0(r17)
    30a0:	003fdf06 	br	3020 <__swbuf_r+0x88>
    30a4:	300b883a 	mov	r5,r6
    30a8:	8809883a 	mov	r4,r17
    30ac:	d9800015 	stw	r6,0(sp)
    30b0:	00033d40 	call	33d4 <_fflush_r>
    30b4:	d9800017 	ldw	r6,0(sp)
    30b8:	103fe51e 	bne	r2,zero,3050 <__swbuf_r+0xb8>
    30bc:	31000017 	ldw	r4,0(r6)
    30c0:	01400044 	movi	r5,1
    30c4:	003fc906 	br	2fec <__swbuf_r+0x54>

000030c8 <__swbuf>:
    30c8:	01800034 	movhi	r6,0
    30cc:	319bfd04 	addi	r6,r6,28660
    30d0:	2007883a 	mov	r3,r4
    30d4:	31000017 	ldw	r4,0(r6)
    30d8:	280d883a 	mov	r6,r5
    30dc:	180b883a 	mov	r5,r3
    30e0:	0002f981 	jmpi	2f98 <__swbuf_r>

000030e4 <__swsetup_r>:
    30e4:	00800034 	movhi	r2,0
    30e8:	109bfd04 	addi	r2,r2,28660
    30ec:	10c00017 	ldw	r3,0(r2)
    30f0:	defffd04 	addi	sp,sp,-12
    30f4:	dc400115 	stw	r17,4(sp)
    30f8:	dc000015 	stw	r16,0(sp)
    30fc:	dfc00215 	stw	ra,8(sp)
    3100:	2023883a 	mov	r17,r4
    3104:	2821883a 	mov	r16,r5
    3108:	18000226 	beq	r3,zero,3114 <__swsetup_r+0x30>
    310c:	18800e17 	ldw	r2,56(r3)
    3110:	10001f26 	beq	r2,zero,3190 <__swsetup_r+0xac>
    3114:	8100030b 	ldhu	r4,12(r16)
    3118:	2080020c 	andi	r2,r4,8
    311c:	10002826 	beq	r2,zero,31c0 <__swsetup_r+0xdc>
    3120:	81400417 	ldw	r5,16(r16)
    3124:	28001d26 	beq	r5,zero,319c <__swsetup_r+0xb8>
    3128:	2080004c 	andi	r2,r4,1
    312c:	1005003a 	cmpeq	r2,r2,zero
    3130:	10000b26 	beq	r2,zero,3160 <__swsetup_r+0x7c>
    3134:	2080008c 	andi	r2,r4,2
    3138:	10001226 	beq	r2,zero,3184 <__swsetup_r+0xa0>
    313c:	0005883a 	mov	r2,zero
    3140:	80800215 	stw	r2,8(r16)
    3144:	28000b26 	beq	r5,zero,3174 <__swsetup_r+0x90>
    3148:	0005883a 	mov	r2,zero
    314c:	dfc00217 	ldw	ra,8(sp)
    3150:	dc400117 	ldw	r17,4(sp)
    3154:	dc000017 	ldw	r16,0(sp)
    3158:	dec00304 	addi	sp,sp,12
    315c:	f800283a 	ret
    3160:	80800517 	ldw	r2,20(r16)
    3164:	80000215 	stw	zero,8(r16)
    3168:	0085c83a 	sub	r2,zero,r2
    316c:	80800615 	stw	r2,24(r16)
    3170:	283ff51e 	bne	r5,zero,3148 <__swsetup_r+0x64>
    3174:	2080200c 	andi	r2,r4,128
    3178:	103ff326 	beq	r2,zero,3148 <__swsetup_r+0x64>
    317c:	00bfffc4 	movi	r2,-1
    3180:	003ff206 	br	314c <__swsetup_r+0x68>
    3184:	80800517 	ldw	r2,20(r16)
    3188:	80800215 	stw	r2,8(r16)
    318c:	003fed06 	br	3144 <__swsetup_r+0x60>
    3190:	1809883a 	mov	r4,r3
    3194:	000366c0 	call	366c <__sinit>
    3198:	003fde06 	br	3114 <__swsetup_r+0x30>
    319c:	20c0a00c 	andi	r3,r4,640
    31a0:	00808004 	movi	r2,512
    31a4:	18bfe026 	beq	r3,r2,3128 <__swsetup_r+0x44>
    31a8:	8809883a 	mov	r4,r17
    31ac:	800b883a 	mov	r5,r16
    31b0:	0003e840 	call	3e84 <__smakebuf_r>
    31b4:	8100030b 	ldhu	r4,12(r16)
    31b8:	81400417 	ldw	r5,16(r16)
    31bc:	003fda06 	br	3128 <__swsetup_r+0x44>
    31c0:	2080040c 	andi	r2,r4,16
    31c4:	103fed26 	beq	r2,zero,317c <__swsetup_r+0x98>
    31c8:	2080010c 	andi	r2,r4,4
    31cc:	10001226 	beq	r2,zero,3218 <__swsetup_r+0x134>
    31d0:	81400c17 	ldw	r5,48(r16)
    31d4:	28000526 	beq	r5,zero,31ec <__swsetup_r+0x108>
    31d8:	80801004 	addi	r2,r16,64
    31dc:	28800226 	beq	r5,r2,31e8 <__swsetup_r+0x104>
    31e0:	8809883a 	mov	r4,r17
    31e4:	00039f00 	call	39f0 <_free_r>
    31e8:	80000c15 	stw	zero,48(r16)
    31ec:	8080030b 	ldhu	r2,12(r16)
    31f0:	81400417 	ldw	r5,16(r16)
    31f4:	80000115 	stw	zero,4(r16)
    31f8:	10bff6cc 	andi	r2,r2,65499
    31fc:	8080030d 	sth	r2,12(r16)
    3200:	81400015 	stw	r5,0(r16)
    3204:	8080030b 	ldhu	r2,12(r16)
    3208:	10800214 	ori	r2,r2,8
    320c:	113fffcc 	andi	r4,r2,65535
    3210:	8080030d 	sth	r2,12(r16)
    3214:	003fc306 	br	3124 <__swsetup_r+0x40>
    3218:	81400417 	ldw	r5,16(r16)
    321c:	003ff906 	br	3204 <__swsetup_r+0x120>

00003220 <register_fini>:
    3220:	f800283a 	ret

00003224 <__call_exitprocs>:
    3224:	00800034 	movhi	r2,0
    3228:	109bfe04 	addi	r2,r2,28664
    322c:	10800017 	ldw	r2,0(r2)
    3230:	defff304 	addi	sp,sp,-52
    3234:	df000b15 	stw	fp,44(sp)
    3238:	d8800115 	stw	r2,4(sp)
    323c:	00800034 	movhi	r2,0
    3240:	10800004 	addi	r2,r2,0
    3244:	1005003a 	cmpeq	r2,r2,zero
    3248:	d8800215 	stw	r2,8(sp)
    324c:	d8800117 	ldw	r2,4(sp)
    3250:	dd400815 	stw	r21,32(sp)
    3254:	dd000715 	stw	r20,28(sp)
    3258:	10805204 	addi	r2,r2,328
    325c:	dfc00c15 	stw	ra,48(sp)
    3260:	ddc00a15 	stw	r23,40(sp)
    3264:	dd800915 	stw	r22,36(sp)
    3268:	dcc00615 	stw	r19,24(sp)
    326c:	dc800515 	stw	r18,20(sp)
    3270:	dc400415 	stw	r17,16(sp)
    3274:	dc000315 	stw	r16,12(sp)
    3278:	282b883a 	mov	r21,r5
    327c:	2039883a 	mov	fp,r4
    3280:	d8800015 	stw	r2,0(sp)
    3284:	2829003a 	cmpeq	r20,r5,zero
    3288:	d8800117 	ldw	r2,4(sp)
    328c:	14405217 	ldw	r17,328(r2)
    3290:	88001026 	beq	r17,zero,32d4 <__call_exitprocs+0xb0>
    3294:	ddc00017 	ldw	r23,0(sp)
    3298:	88800117 	ldw	r2,4(r17)
    329c:	8c802204 	addi	r18,r17,136
    32a0:	143fffc4 	addi	r16,r2,-1
    32a4:	80000916 	blt	r16,zero,32cc <__call_exitprocs+0xa8>
    32a8:	05bfffc4 	movi	r22,-1
    32ac:	a000151e 	bne	r20,zero,3304 <__call_exitprocs+0xe0>
    32b0:	8409883a 	add	r4,r16,r16
    32b4:	2105883a 	add	r2,r4,r4
    32b8:	1485883a 	add	r2,r2,r18
    32bc:	10c02017 	ldw	r3,128(r2)
    32c0:	a8c01126 	beq	r21,r3,3308 <__call_exitprocs+0xe4>
    32c4:	843fffc4 	addi	r16,r16,-1
    32c8:	85bff81e 	bne	r16,r22,32ac <__call_exitprocs+0x88>
    32cc:	d8800217 	ldw	r2,8(sp)
    32d0:	10003126 	beq	r2,zero,3398 <__call_exitprocs+0x174>
    32d4:	dfc00c17 	ldw	ra,48(sp)
    32d8:	df000b17 	ldw	fp,44(sp)
    32dc:	ddc00a17 	ldw	r23,40(sp)
    32e0:	dd800917 	ldw	r22,36(sp)
    32e4:	dd400817 	ldw	r21,32(sp)
    32e8:	dd000717 	ldw	r20,28(sp)
    32ec:	dcc00617 	ldw	r19,24(sp)
    32f0:	dc800517 	ldw	r18,20(sp)
    32f4:	dc400417 	ldw	r17,16(sp)
    32f8:	dc000317 	ldw	r16,12(sp)
    32fc:	dec00d04 	addi	sp,sp,52
    3300:	f800283a 	ret
    3304:	8409883a 	add	r4,r16,r16
    3308:	88c00117 	ldw	r3,4(r17)
    330c:	2105883a 	add	r2,r4,r4
    3310:	1445883a 	add	r2,r2,r17
    3314:	18ffffc4 	addi	r3,r3,-1
    3318:	11800217 	ldw	r6,8(r2)
    331c:	1c001526 	beq	r3,r16,3374 <__call_exitprocs+0x150>
    3320:	10000215 	stw	zero,8(r2)
    3324:	303fe726 	beq	r6,zero,32c4 <__call_exitprocs+0xa0>
    3328:	00c00044 	movi	r3,1
    332c:	1c06983a 	sll	r3,r3,r16
    3330:	90804017 	ldw	r2,256(r18)
    3334:	8cc00117 	ldw	r19,4(r17)
    3338:	1884703a 	and	r2,r3,r2
    333c:	10001426 	beq	r2,zero,3390 <__call_exitprocs+0x16c>
    3340:	90804117 	ldw	r2,260(r18)
    3344:	1884703a 	and	r2,r3,r2
    3348:	10000c1e 	bne	r2,zero,337c <__call_exitprocs+0x158>
    334c:	2105883a 	add	r2,r4,r4
    3350:	1485883a 	add	r2,r2,r18
    3354:	11400017 	ldw	r5,0(r2)
    3358:	e009883a 	mov	r4,fp
    335c:	303ee83a 	callr	r6
    3360:	88800117 	ldw	r2,4(r17)
    3364:	98bfc81e 	bne	r19,r2,3288 <__call_exitprocs+0x64>
    3368:	b8800017 	ldw	r2,0(r23)
    336c:	147fd526 	beq	r2,r17,32c4 <__call_exitprocs+0xa0>
    3370:	003fc506 	br	3288 <__call_exitprocs+0x64>
    3374:	8c000115 	stw	r16,4(r17)
    3378:	003fea06 	br	3324 <__call_exitprocs+0x100>
    337c:	2105883a 	add	r2,r4,r4
    3380:	1485883a 	add	r2,r2,r18
    3384:	11000017 	ldw	r4,0(r2)
    3388:	303ee83a 	callr	r6
    338c:	003ff406 	br	3360 <__call_exitprocs+0x13c>
    3390:	303ee83a 	callr	r6
    3394:	003ff206 	br	3360 <__call_exitprocs+0x13c>
    3398:	88800117 	ldw	r2,4(r17)
    339c:	1000081e 	bne	r2,zero,33c0 <__call_exitprocs+0x19c>
    33a0:	89000017 	ldw	r4,0(r17)
    33a4:	20000726 	beq	r4,zero,33c4 <__call_exitprocs+0x1a0>
    33a8:	b9000015 	stw	r4,0(r23)
    33ac:	8809883a 	mov	r4,r17
    33b0:	00000000 	call	0 <__reset>
    33b4:	bc400017 	ldw	r17,0(r23)
    33b8:	883fb71e 	bne	r17,zero,3298 <__call_exitprocs+0x74>
    33bc:	003fc506 	br	32d4 <__call_exitprocs+0xb0>
    33c0:	89000017 	ldw	r4,0(r17)
    33c4:	882f883a 	mov	r23,r17
    33c8:	2023883a 	mov	r17,r4
    33cc:	883fb21e 	bne	r17,zero,3298 <__call_exitprocs+0x74>
    33d0:	003fc006 	br	32d4 <__call_exitprocs+0xb0>

000033d4 <_fflush_r>:
    33d4:	defffb04 	addi	sp,sp,-20
    33d8:	dcc00315 	stw	r19,12(sp)
    33dc:	dc800215 	stw	r18,8(sp)
    33e0:	dfc00415 	stw	ra,16(sp)
    33e4:	dc400115 	stw	r17,4(sp)
    33e8:	dc000015 	stw	r16,0(sp)
    33ec:	2027883a 	mov	r19,r4
    33f0:	2825883a 	mov	r18,r5
    33f4:	20000226 	beq	r4,zero,3400 <_fflush_r+0x2c>
    33f8:	20800e17 	ldw	r2,56(r4)
    33fc:	10005626 	beq	r2,zero,3558 <_fflush_r+0x184>
    3400:	9100030b 	ldhu	r4,12(r18)
    3404:	20ffffcc 	andi	r3,r4,65535
    3408:	18e0001c 	xori	r3,r3,32768
    340c:	18e00004 	addi	r3,r3,-32768
    3410:	1880020c 	andi	r2,r3,8
    3414:	1000261e 	bne	r2,zero,34b0 <_fflush_r+0xdc>
    3418:	90c00117 	ldw	r3,4(r18)
    341c:	20820014 	ori	r2,r4,2048
    3420:	9080030d 	sth	r2,12(r18)
    3424:	1009883a 	mov	r4,r2
    3428:	00c0400e 	bge	zero,r3,352c <_fflush_r+0x158>
    342c:	92000a17 	ldw	r8,40(r18)
    3430:	40004026 	beq	r8,zero,3534 <_fflush_r+0x160>
    3434:	2084000c 	andi	r2,r4,4096
    3438:	10005326 	beq	r2,zero,3588 <_fflush_r+0x1b4>
    343c:	94001417 	ldw	r16,80(r18)
    3440:	9080030b 	ldhu	r2,12(r18)
    3444:	1080010c 	andi	r2,r2,4
    3448:	1000481e 	bne	r2,zero,356c <_fflush_r+0x198>
    344c:	91400717 	ldw	r5,28(r18)
    3450:	9809883a 	mov	r4,r19
    3454:	800d883a 	mov	r6,r16
    3458:	000f883a 	mov	r7,zero
    345c:	403ee83a 	callr	r8
    3460:	8080261e 	bne	r16,r2,34fc <_fflush_r+0x128>
    3464:	9080030b 	ldhu	r2,12(r18)
    3468:	91000417 	ldw	r4,16(r18)
    346c:	90000115 	stw	zero,4(r18)
    3470:	10bdffcc 	andi	r2,r2,63487
    3474:	10ffffcc 	andi	r3,r2,65535
    3478:	18c4000c 	andi	r3,r3,4096
    347c:	9080030d 	sth	r2,12(r18)
    3480:	91000015 	stw	r4,0(r18)
    3484:	18002b26 	beq	r3,zero,3534 <_fflush_r+0x160>
    3488:	0007883a 	mov	r3,zero
    348c:	1805883a 	mov	r2,r3
    3490:	94001415 	stw	r16,80(r18)
    3494:	dfc00417 	ldw	ra,16(sp)
    3498:	dcc00317 	ldw	r19,12(sp)
    349c:	dc800217 	ldw	r18,8(sp)
    34a0:	dc400117 	ldw	r17,4(sp)
    34a4:	dc000017 	ldw	r16,0(sp)
    34a8:	dec00504 	addi	sp,sp,20
    34ac:	f800283a 	ret
    34b0:	94400417 	ldw	r17,16(r18)
    34b4:	88001f26 	beq	r17,zero,3534 <_fflush_r+0x160>
    34b8:	90800017 	ldw	r2,0(r18)
    34bc:	18c000cc 	andi	r3,r3,3
    34c0:	94400015 	stw	r17,0(r18)
    34c4:	1461c83a 	sub	r16,r2,r17
    34c8:	18002526 	beq	r3,zero,3560 <_fflush_r+0x18c>
    34cc:	0005883a 	mov	r2,zero
    34d0:	90800215 	stw	r2,8(r18)
    34d4:	0400170e 	bge	zero,r16,3534 <_fflush_r+0x160>
    34d8:	90c00917 	ldw	r3,36(r18)
    34dc:	91400717 	ldw	r5,28(r18)
    34e0:	880d883a 	mov	r6,r17
    34e4:	800f883a 	mov	r7,r16
    34e8:	9809883a 	mov	r4,r19
    34ec:	183ee83a 	callr	r3
    34f0:	88a3883a 	add	r17,r17,r2
    34f4:	80a1c83a 	sub	r16,r16,r2
    34f8:	00bff616 	blt	zero,r2,34d4 <_fflush_r+0x100>
    34fc:	9080030b 	ldhu	r2,12(r18)
    3500:	00ffffc4 	movi	r3,-1
    3504:	10801014 	ori	r2,r2,64
    3508:	9080030d 	sth	r2,12(r18)
    350c:	1805883a 	mov	r2,r3
    3510:	dfc00417 	ldw	ra,16(sp)
    3514:	dcc00317 	ldw	r19,12(sp)
    3518:	dc800217 	ldw	r18,8(sp)
    351c:	dc400117 	ldw	r17,4(sp)
    3520:	dc000017 	ldw	r16,0(sp)
    3524:	dec00504 	addi	sp,sp,20
    3528:	f800283a 	ret
    352c:	90800f17 	ldw	r2,60(r18)
    3530:	00bfbe16 	blt	zero,r2,342c <_fflush_r+0x58>
    3534:	0007883a 	mov	r3,zero
    3538:	1805883a 	mov	r2,r3
    353c:	dfc00417 	ldw	ra,16(sp)
    3540:	dcc00317 	ldw	r19,12(sp)
    3544:	dc800217 	ldw	r18,8(sp)
    3548:	dc400117 	ldw	r17,4(sp)
    354c:	dc000017 	ldw	r16,0(sp)
    3550:	dec00504 	addi	sp,sp,20
    3554:	f800283a 	ret
    3558:	000366c0 	call	366c <__sinit>
    355c:	003fa806 	br	3400 <_fflush_r+0x2c>
    3560:	90800517 	ldw	r2,20(r18)
    3564:	90800215 	stw	r2,8(r18)
    3568:	003fda06 	br	34d4 <_fflush_r+0x100>
    356c:	90800117 	ldw	r2,4(r18)
    3570:	90c00c17 	ldw	r3,48(r18)
    3574:	80a1c83a 	sub	r16,r16,r2
    3578:	183fb426 	beq	r3,zero,344c <_fflush_r+0x78>
    357c:	90800f17 	ldw	r2,60(r18)
    3580:	80a1c83a 	sub	r16,r16,r2
    3584:	003fb106 	br	344c <_fflush_r+0x78>
    3588:	91400717 	ldw	r5,28(r18)
    358c:	9809883a 	mov	r4,r19
    3590:	000d883a 	mov	r6,zero
    3594:	01c00044 	movi	r7,1
    3598:	403ee83a 	callr	r8
    359c:	1021883a 	mov	r16,r2
    35a0:	00bfffc4 	movi	r2,-1
    35a4:	80800226 	beq	r16,r2,35b0 <_fflush_r+0x1dc>
    35a8:	92000a17 	ldw	r8,40(r18)
    35ac:	003fa406 	br	3440 <_fflush_r+0x6c>
    35b0:	98c00017 	ldw	r3,0(r19)
    35b4:	00800744 	movi	r2,29
    35b8:	18bfde26 	beq	r3,r2,3534 <_fflush_r+0x160>
    35bc:	9080030b 	ldhu	r2,12(r18)
    35c0:	8007883a 	mov	r3,r16
    35c4:	10801014 	ori	r2,r2,64
    35c8:	9080030d 	sth	r2,12(r18)
    35cc:	003fcf06 	br	350c <_fflush_r+0x138>

000035d0 <fflush>:
    35d0:	01400034 	movhi	r5,0
    35d4:	294cf504 	addi	r5,r5,13268
    35d8:	2007883a 	mov	r3,r4
    35dc:	20000526 	beq	r4,zero,35f4 <fflush+0x24>
    35e0:	00800034 	movhi	r2,0
    35e4:	109bfd04 	addi	r2,r2,28660
    35e8:	11000017 	ldw	r4,0(r2)
    35ec:	180b883a 	mov	r5,r3
    35f0:	00033d41 	jmpi	33d4 <_fflush_r>
    35f4:	00800034 	movhi	r2,0
    35f8:	109bfe04 	addi	r2,r2,28664
    35fc:	11000017 	ldw	r4,0(r2)
    3600:	0003d041 	jmpi	3d04 <_fwalk_reent>

00003604 <std>:
    3604:	00800034 	movhi	r2,0
    3608:	1091f204 	addi	r2,r2,18376
    360c:	20800b15 	stw	r2,44(r4)
    3610:	00800034 	movhi	r2,0
    3614:	10922d04 	addi	r2,r2,18612
    3618:	20800815 	stw	r2,32(r4)
    361c:	00c00034 	movhi	r3,0
    3620:	18d20e04 	addi	r3,r3,18488
    3624:	00800034 	movhi	r2,0
    3628:	1091f404 	addi	r2,r2,18384
    362c:	2140030d 	sth	r5,12(r4)
    3630:	2180038d 	sth	r6,14(r4)
    3634:	20c00915 	stw	r3,36(r4)
    3638:	20800a15 	stw	r2,40(r4)
    363c:	20000015 	stw	zero,0(r4)
    3640:	20000115 	stw	zero,4(r4)
    3644:	20000215 	stw	zero,8(r4)
    3648:	20000415 	stw	zero,16(r4)
    364c:	20000515 	stw	zero,20(r4)
    3650:	20000615 	stw	zero,24(r4)
    3654:	21000715 	stw	r4,28(r4)
    3658:	f800283a 	ret

0000365c <__sfp_lock_acquire>:
    365c:	f800283a 	ret

00003660 <__sfp_lock_release>:
    3660:	f800283a 	ret

00003664 <__sinit_lock_acquire>:
    3664:	f800283a 	ret

00003668 <__sinit_lock_release>:
    3668:	f800283a 	ret

0000366c <__sinit>:
    366c:	20800e17 	ldw	r2,56(r4)
    3670:	defffd04 	addi	sp,sp,-12
    3674:	dc400115 	stw	r17,4(sp)
    3678:	dc000015 	stw	r16,0(sp)
    367c:	dfc00215 	stw	ra,8(sp)
    3680:	04400044 	movi	r17,1
    3684:	01400104 	movi	r5,4
    3688:	000d883a 	mov	r6,zero
    368c:	2021883a 	mov	r16,r4
    3690:	2200bb04 	addi	r8,r4,748
    3694:	200f883a 	mov	r7,r4
    3698:	10000526 	beq	r2,zero,36b0 <__sinit+0x44>
    369c:	dfc00217 	ldw	ra,8(sp)
    36a0:	dc400117 	ldw	r17,4(sp)
    36a4:	dc000017 	ldw	r16,0(sp)
    36a8:	dec00304 	addi	sp,sp,12
    36ac:	f800283a 	ret
    36b0:	21000117 	ldw	r4,4(r4)
    36b4:	00800034 	movhi	r2,0
    36b8:	108dd404 	addi	r2,r2,14160
    36bc:	00c000c4 	movi	r3,3
    36c0:	80800f15 	stw	r2,60(r16)
    36c4:	80c0b915 	stw	r3,740(r16)
    36c8:	8200ba15 	stw	r8,744(r16)
    36cc:	84400e15 	stw	r17,56(r16)
    36d0:	8000b815 	stw	zero,736(r16)
    36d4:	00036040 	call	3604 <std>
    36d8:	81000217 	ldw	r4,8(r16)
    36dc:	880d883a 	mov	r6,r17
    36e0:	800f883a 	mov	r7,r16
    36e4:	01400284 	movi	r5,10
    36e8:	00036040 	call	3604 <std>
    36ec:	81000317 	ldw	r4,12(r16)
    36f0:	800f883a 	mov	r7,r16
    36f4:	01400484 	movi	r5,18
    36f8:	01800084 	movi	r6,2
    36fc:	dfc00217 	ldw	ra,8(sp)
    3700:	dc400117 	ldw	r17,4(sp)
    3704:	dc000017 	ldw	r16,0(sp)
    3708:	dec00304 	addi	sp,sp,12
    370c:	00036041 	jmpi	3604 <std>

00003710 <__fp_lock>:
    3710:	0005883a 	mov	r2,zero
    3714:	f800283a 	ret

00003718 <__fp_unlock>:
    3718:	0005883a 	mov	r2,zero
    371c:	f800283a 	ret

00003720 <__fp_unlock_all>:
    3720:	00800034 	movhi	r2,0
    3724:	109bfd04 	addi	r2,r2,28660
    3728:	11000017 	ldw	r4,0(r2)
    372c:	01400034 	movhi	r5,0
    3730:	294dc604 	addi	r5,r5,14104
    3734:	0003dcc1 	jmpi	3dcc <_fwalk>

00003738 <__fp_lock_all>:
    3738:	00800034 	movhi	r2,0
    373c:	109bfd04 	addi	r2,r2,28660
    3740:	11000017 	ldw	r4,0(r2)
    3744:	01400034 	movhi	r5,0
    3748:	294dc404 	addi	r5,r5,14096
    374c:	0003dcc1 	jmpi	3dcc <_fwalk>

00003750 <_cleanup_r>:
    3750:	01400034 	movhi	r5,0
    3754:	2952c304 	addi	r5,r5,19212
    3758:	0003dcc1 	jmpi	3dcc <_fwalk>

0000375c <_cleanup>:
    375c:	00800034 	movhi	r2,0
    3760:	109bfe04 	addi	r2,r2,28664
    3764:	11000017 	ldw	r4,0(r2)
    3768:	00037501 	jmpi	3750 <_cleanup_r>

0000376c <__sfmoreglue>:
    376c:	defffc04 	addi	sp,sp,-16
    3770:	dc400115 	stw	r17,4(sp)
    3774:	2c401724 	muli	r17,r5,92
    3778:	dc800215 	stw	r18,8(sp)
    377c:	2825883a 	mov	r18,r5
    3780:	89400304 	addi	r5,r17,12
    3784:	dc000015 	stw	r16,0(sp)
    3788:	dfc00315 	stw	ra,12(sp)
    378c:	00040180 	call	4018 <_malloc_r>
    3790:	0021883a 	mov	r16,zero
    3794:	880d883a 	mov	r6,r17
    3798:	000b883a 	mov	r5,zero
    379c:	10000626 	beq	r2,zero,37b8 <__sfmoreglue+0x4c>
    37a0:	11000304 	addi	r4,r2,12
    37a4:	14800115 	stw	r18,4(r2)
    37a8:	10000015 	stw	zero,0(r2)
    37ac:	11000215 	stw	r4,8(r2)
    37b0:	1021883a 	mov	r16,r2
    37b4:	00004f40 	call	4f4 <memset>
    37b8:	8005883a 	mov	r2,r16
    37bc:	dfc00317 	ldw	ra,12(sp)
    37c0:	dc800217 	ldw	r18,8(sp)
    37c4:	dc400117 	ldw	r17,4(sp)
    37c8:	dc000017 	ldw	r16,0(sp)
    37cc:	dec00404 	addi	sp,sp,16
    37d0:	f800283a 	ret

000037d4 <__sfp>:
    37d4:	defffd04 	addi	sp,sp,-12
    37d8:	00800034 	movhi	r2,0
    37dc:	109bfe04 	addi	r2,r2,28664
    37e0:	dc000015 	stw	r16,0(sp)
    37e4:	14000017 	ldw	r16,0(r2)
    37e8:	dc400115 	stw	r17,4(sp)
    37ec:	dfc00215 	stw	ra,8(sp)
    37f0:	80800e17 	ldw	r2,56(r16)
    37f4:	2023883a 	mov	r17,r4
    37f8:	10002626 	beq	r2,zero,3894 <__sfp+0xc0>
    37fc:	8400b804 	addi	r16,r16,736
    3800:	80800117 	ldw	r2,4(r16)
    3804:	81000217 	ldw	r4,8(r16)
    3808:	10ffffc4 	addi	r3,r2,-1
    380c:	18000916 	blt	r3,zero,3834 <__sfp+0x60>
    3810:	2080030f 	ldh	r2,12(r4)
    3814:	10000b26 	beq	r2,zero,3844 <__sfp+0x70>
    3818:	017fffc4 	movi	r5,-1
    381c:	00000206 	br	3828 <__sfp+0x54>
    3820:	2080030f 	ldh	r2,12(r4)
    3824:	10000726 	beq	r2,zero,3844 <__sfp+0x70>
    3828:	18ffffc4 	addi	r3,r3,-1
    382c:	21001704 	addi	r4,r4,92
    3830:	197ffb1e 	bne	r3,r5,3820 <__sfp+0x4c>
    3834:	80800017 	ldw	r2,0(r16)
    3838:	10001926 	beq	r2,zero,38a0 <__sfp+0xcc>
    383c:	1021883a 	mov	r16,r2
    3840:	003fef06 	br	3800 <__sfp+0x2c>
    3844:	00bfffc4 	movi	r2,-1
    3848:	00c00044 	movi	r3,1
    384c:	2080038d 	sth	r2,14(r4)
    3850:	20c0030d 	sth	r3,12(r4)
    3854:	20000015 	stw	zero,0(r4)
    3858:	20000215 	stw	zero,8(r4)
    385c:	20000115 	stw	zero,4(r4)
    3860:	20000415 	stw	zero,16(r4)
    3864:	20000515 	stw	zero,20(r4)
    3868:	20000615 	stw	zero,24(r4)
    386c:	20000c15 	stw	zero,48(r4)
    3870:	20000d15 	stw	zero,52(r4)
    3874:	20001115 	stw	zero,68(r4)
    3878:	20001215 	stw	zero,72(r4)
    387c:	2005883a 	mov	r2,r4
    3880:	dfc00217 	ldw	ra,8(sp)
    3884:	dc400117 	ldw	r17,4(sp)
    3888:	dc000017 	ldw	r16,0(sp)
    388c:	dec00304 	addi	sp,sp,12
    3890:	f800283a 	ret
    3894:	8009883a 	mov	r4,r16
    3898:	000366c0 	call	366c <__sinit>
    389c:	003fd706 	br	37fc <__sfp+0x28>
    38a0:	8809883a 	mov	r4,r17
    38a4:	01400104 	movi	r5,4
    38a8:	000376c0 	call	376c <__sfmoreglue>
    38ac:	80800015 	stw	r2,0(r16)
    38b0:	103fe21e 	bne	r2,zero,383c <__sfp+0x68>
    38b4:	00800304 	movi	r2,12
    38b8:	0009883a 	mov	r4,zero
    38bc:	88800015 	stw	r2,0(r17)
    38c0:	003fee06 	br	387c <__sfp+0xa8>

000038c4 <_malloc_trim_r>:
    38c4:	defffb04 	addi	sp,sp,-20
    38c8:	dcc00315 	stw	r19,12(sp)
    38cc:	04c00034 	movhi	r19,0
    38d0:	9cdaf204 	addi	r19,r19,27592
    38d4:	dc800215 	stw	r18,8(sp)
    38d8:	dc400115 	stw	r17,4(sp)
    38dc:	dc000015 	stw	r16,0(sp)
    38e0:	2823883a 	mov	r17,r5
    38e4:	2025883a 	mov	r18,r4
    38e8:	dfc00415 	stw	ra,16(sp)
    38ec:	0004ea40 	call	4ea4 <__malloc_lock>
    38f0:	98800217 	ldw	r2,8(r19)
    38f4:	9009883a 	mov	r4,r18
    38f8:	000b883a 	mov	r5,zero
    38fc:	10c00117 	ldw	r3,4(r2)
    3900:	00bfff04 	movi	r2,-4
    3904:	18a0703a 	and	r16,r3,r2
    3908:	8463c83a 	sub	r17,r16,r17
    390c:	8c43fbc4 	addi	r17,r17,4079
    3910:	8822d33a 	srli	r17,r17,12
    3914:	0083ffc4 	movi	r2,4095
    3918:	8c7fffc4 	addi	r17,r17,-1
    391c:	8822933a 	slli	r17,r17,12
    3920:	1440060e 	bge	r2,r17,393c <_malloc_trim_r+0x78>
    3924:	00047580 	call	4758 <_sbrk_r>
    3928:	98c00217 	ldw	r3,8(r19)
    392c:	9009883a 	mov	r4,r18
    3930:	044bc83a 	sub	r5,zero,r17
    3934:	80c7883a 	add	r3,r16,r3
    3938:	10c00926 	beq	r2,r3,3960 <_malloc_trim_r+0x9c>
    393c:	0004ea80 	call	4ea8 <__malloc_unlock>
    3940:	0005883a 	mov	r2,zero
    3944:	dfc00417 	ldw	ra,16(sp)
    3948:	dcc00317 	ldw	r19,12(sp)
    394c:	dc800217 	ldw	r18,8(sp)
    3950:	dc400117 	ldw	r17,4(sp)
    3954:	dc000017 	ldw	r16,0(sp)
    3958:	dec00504 	addi	sp,sp,20
    395c:	f800283a 	ret
    3960:	9009883a 	mov	r4,r18
    3964:	00047580 	call	4758 <_sbrk_r>
    3968:	844dc83a 	sub	r6,r16,r17
    396c:	00ffffc4 	movi	r3,-1
    3970:	9009883a 	mov	r4,r18
    3974:	000b883a 	mov	r5,zero
    3978:	01c00074 	movhi	r7,1
    397c:	39e34304 	addi	r7,r7,-29428
    3980:	31800054 	ori	r6,r6,1
    3984:	10c00926 	beq	r2,r3,39ac <_malloc_trim_r+0xe8>
    3988:	38800017 	ldw	r2,0(r7)
    398c:	98c00217 	ldw	r3,8(r19)
    3990:	9009883a 	mov	r4,r18
    3994:	1445c83a 	sub	r2,r2,r17
    3998:	38800015 	stw	r2,0(r7)
    399c:	19800115 	stw	r6,4(r3)
    39a0:	0004ea80 	call	4ea8 <__malloc_unlock>
    39a4:	00800044 	movi	r2,1
    39a8:	003fe606 	br	3944 <_malloc_trim_r+0x80>
    39ac:	00047580 	call	4758 <_sbrk_r>
    39b0:	99800217 	ldw	r6,8(r19)
    39b4:	100f883a 	mov	r7,r2
    39b8:	9009883a 	mov	r4,r18
    39bc:	1187c83a 	sub	r3,r2,r6
    39c0:	008003c4 	movi	r2,15
    39c4:	19400054 	ori	r5,r3,1
    39c8:	10ffdc0e 	bge	r2,r3,393c <_malloc_trim_r+0x78>
    39cc:	00800034 	movhi	r2,0
    39d0:	109c0004 	addi	r2,r2,28672
    39d4:	10c00017 	ldw	r3,0(r2)
    39d8:	00800074 	movhi	r2,1
    39dc:	10a34304 	addi	r2,r2,-29428
    39e0:	31400115 	stw	r5,4(r6)
    39e4:	38c7c83a 	sub	r3,r7,r3
    39e8:	10c00015 	stw	r3,0(r2)
    39ec:	003fd306 	br	393c <_malloc_trim_r+0x78>

000039f0 <_free_r>:
    39f0:	defffd04 	addi	sp,sp,-12
    39f4:	dc400115 	stw	r17,4(sp)
    39f8:	dc000015 	stw	r16,0(sp)
    39fc:	dfc00215 	stw	ra,8(sp)
    3a00:	2821883a 	mov	r16,r5
    3a04:	2023883a 	mov	r17,r4
    3a08:	28005a26 	beq	r5,zero,3b74 <_free_r+0x184>
    3a0c:	0004ea40 	call	4ea4 <__malloc_lock>
    3a10:	823ffe04 	addi	r8,r16,-8
    3a14:	41400117 	ldw	r5,4(r8)
    3a18:	00bfff84 	movi	r2,-2
    3a1c:	02800034 	movhi	r10,0
    3a20:	529af204 	addi	r10,r10,27592
    3a24:	288e703a 	and	r7,r5,r2
    3a28:	41cd883a 	add	r6,r8,r7
    3a2c:	30c00117 	ldw	r3,4(r6)
    3a30:	51000217 	ldw	r4,8(r10)
    3a34:	00bfff04 	movi	r2,-4
    3a38:	1892703a 	and	r9,r3,r2
    3a3c:	5017883a 	mov	r11,r10
    3a40:	31006726 	beq	r6,r4,3be0 <_free_r+0x1f0>
    3a44:	2880004c 	andi	r2,r5,1
    3a48:	1005003a 	cmpeq	r2,r2,zero
    3a4c:	32400115 	stw	r9,4(r6)
    3a50:	10001a1e 	bne	r2,zero,3abc <_free_r+0xcc>
    3a54:	000b883a 	mov	r5,zero
    3a58:	3247883a 	add	r3,r6,r9
    3a5c:	18800117 	ldw	r2,4(r3)
    3a60:	1080004c 	andi	r2,r2,1
    3a64:	1000231e 	bne	r2,zero,3af4 <_free_r+0x104>
    3a68:	280ac03a 	cmpne	r5,r5,zero
    3a6c:	3a4f883a 	add	r7,r7,r9
    3a70:	2800451e 	bne	r5,zero,3b88 <_free_r+0x198>
    3a74:	31000217 	ldw	r4,8(r6)
    3a78:	00800034 	movhi	r2,0
    3a7c:	109af404 	addi	r2,r2,27600
    3a80:	20807b26 	beq	r4,r2,3c70 <_free_r+0x280>
    3a84:	30800317 	ldw	r2,12(r6)
    3a88:	3a07883a 	add	r3,r7,r8
    3a8c:	19c00015 	stw	r7,0(r3)
    3a90:	11000215 	stw	r4,8(r2)
    3a94:	20800315 	stw	r2,12(r4)
    3a98:	38800054 	ori	r2,r7,1
    3a9c:	40800115 	stw	r2,4(r8)
    3aa0:	28001a26 	beq	r5,zero,3b0c <_free_r+0x11c>
    3aa4:	8809883a 	mov	r4,r17
    3aa8:	dfc00217 	ldw	ra,8(sp)
    3aac:	dc400117 	ldw	r17,4(sp)
    3ab0:	dc000017 	ldw	r16,0(sp)
    3ab4:	dec00304 	addi	sp,sp,12
    3ab8:	0004ea81 	jmpi	4ea8 <__malloc_unlock>
    3abc:	80bffe17 	ldw	r2,-8(r16)
    3ac0:	50c00204 	addi	r3,r10,8
    3ac4:	4091c83a 	sub	r8,r8,r2
    3ac8:	41000217 	ldw	r4,8(r8)
    3acc:	388f883a 	add	r7,r7,r2
    3ad0:	20c06126 	beq	r4,r3,3c58 <_free_r+0x268>
    3ad4:	40800317 	ldw	r2,12(r8)
    3ad8:	3247883a 	add	r3,r6,r9
    3adc:	000b883a 	mov	r5,zero
    3ae0:	11000215 	stw	r4,8(r2)
    3ae4:	20800315 	stw	r2,12(r4)
    3ae8:	18800117 	ldw	r2,4(r3)
    3aec:	1080004c 	andi	r2,r2,1
    3af0:	103fdd26 	beq	r2,zero,3a68 <_free_r+0x78>
    3af4:	38800054 	ori	r2,r7,1
    3af8:	3a07883a 	add	r3,r7,r8
    3afc:	280ac03a 	cmpne	r5,r5,zero
    3b00:	40800115 	stw	r2,4(r8)
    3b04:	19c00015 	stw	r7,0(r3)
    3b08:	283fe61e 	bne	r5,zero,3aa4 <_free_r+0xb4>
    3b0c:	00807fc4 	movi	r2,511
    3b10:	11c01f2e 	bgeu	r2,r7,3b90 <_free_r+0x1a0>
    3b14:	3806d27a 	srli	r3,r7,9
    3b18:	1800481e 	bne	r3,zero,3c3c <_free_r+0x24c>
    3b1c:	3804d0fa 	srli	r2,r7,3
    3b20:	100690fa 	slli	r3,r2,3
    3b24:	1acd883a 	add	r6,r3,r11
    3b28:	31400217 	ldw	r5,8(r6)
    3b2c:	31405926 	beq	r6,r5,3c94 <_free_r+0x2a4>
    3b30:	28800117 	ldw	r2,4(r5)
    3b34:	00ffff04 	movi	r3,-4
    3b38:	10c4703a 	and	r2,r2,r3
    3b3c:	3880022e 	bgeu	r7,r2,3b48 <_free_r+0x158>
    3b40:	29400217 	ldw	r5,8(r5)
    3b44:	317ffa1e 	bne	r6,r5,3b30 <_free_r+0x140>
    3b48:	29800317 	ldw	r6,12(r5)
    3b4c:	41800315 	stw	r6,12(r8)
    3b50:	41400215 	stw	r5,8(r8)
    3b54:	8809883a 	mov	r4,r17
    3b58:	2a000315 	stw	r8,12(r5)
    3b5c:	32000215 	stw	r8,8(r6)
    3b60:	dfc00217 	ldw	ra,8(sp)
    3b64:	dc400117 	ldw	r17,4(sp)
    3b68:	dc000017 	ldw	r16,0(sp)
    3b6c:	dec00304 	addi	sp,sp,12
    3b70:	0004ea81 	jmpi	4ea8 <__malloc_unlock>
    3b74:	dfc00217 	ldw	ra,8(sp)
    3b78:	dc400117 	ldw	r17,4(sp)
    3b7c:	dc000017 	ldw	r16,0(sp)
    3b80:	dec00304 	addi	sp,sp,12
    3b84:	f800283a 	ret
    3b88:	31000217 	ldw	r4,8(r6)
    3b8c:	003fbd06 	br	3a84 <_free_r+0x94>
    3b90:	3806d0fa 	srli	r3,r7,3
    3b94:	00800044 	movi	r2,1
    3b98:	51400117 	ldw	r5,4(r10)
    3b9c:	180890fa 	slli	r4,r3,3
    3ba0:	1807d0ba 	srai	r3,r3,2
    3ba4:	22c9883a 	add	r4,r4,r11
    3ba8:	21800217 	ldw	r6,8(r4)
    3bac:	10c4983a 	sll	r2,r2,r3
    3bb0:	41000315 	stw	r4,12(r8)
    3bb4:	41800215 	stw	r6,8(r8)
    3bb8:	288ab03a 	or	r5,r5,r2
    3bbc:	22000215 	stw	r8,8(r4)
    3bc0:	8809883a 	mov	r4,r17
    3bc4:	51400115 	stw	r5,4(r10)
    3bc8:	32000315 	stw	r8,12(r6)
    3bcc:	dfc00217 	ldw	ra,8(sp)
    3bd0:	dc400117 	ldw	r17,4(sp)
    3bd4:	dc000017 	ldw	r16,0(sp)
    3bd8:	dec00304 	addi	sp,sp,12
    3bdc:	0004ea81 	jmpi	4ea8 <__malloc_unlock>
    3be0:	2880004c 	andi	r2,r5,1
    3be4:	3a4d883a 	add	r6,r7,r9
    3be8:	1000071e 	bne	r2,zero,3c08 <_free_r+0x218>
    3bec:	80bffe17 	ldw	r2,-8(r16)
    3bf0:	4091c83a 	sub	r8,r8,r2
    3bf4:	41000317 	ldw	r4,12(r8)
    3bf8:	40c00217 	ldw	r3,8(r8)
    3bfc:	308d883a 	add	r6,r6,r2
    3c00:	20c00215 	stw	r3,8(r4)
    3c04:	19000315 	stw	r4,12(r3)
    3c08:	00800034 	movhi	r2,0
    3c0c:	109bff04 	addi	r2,r2,28668
    3c10:	11000017 	ldw	r4,0(r2)
    3c14:	30c00054 	ori	r3,r6,1
    3c18:	52000215 	stw	r8,8(r10)
    3c1c:	40c00115 	stw	r3,4(r8)
    3c20:	313fa036 	bltu	r6,r4,3aa4 <_free_r+0xb4>
    3c24:	00800074 	movhi	r2,1
    3c28:	10a34004 	addi	r2,r2,-29440
    3c2c:	11400017 	ldw	r5,0(r2)
    3c30:	8809883a 	mov	r4,r17
    3c34:	00038c40 	call	38c4 <_malloc_trim_r>
    3c38:	003f9a06 	br	3aa4 <_free_r+0xb4>
    3c3c:	00800104 	movi	r2,4
    3c40:	10c0072e 	bgeu	r2,r3,3c60 <_free_r+0x270>
    3c44:	00800504 	movi	r2,20
    3c48:	10c01936 	bltu	r2,r3,3cb0 <_free_r+0x2c0>
    3c4c:	188016c4 	addi	r2,r3,91
    3c50:	100690fa 	slli	r3,r2,3
    3c54:	003fb306 	br	3b24 <_free_r+0x134>
    3c58:	01400044 	movi	r5,1
    3c5c:	003f7e06 	br	3a58 <_free_r+0x68>
    3c60:	3804d1ba 	srli	r2,r7,6
    3c64:	10800e04 	addi	r2,r2,56
    3c68:	100690fa 	slli	r3,r2,3
    3c6c:	003fad06 	br	3b24 <_free_r+0x134>
    3c70:	22000315 	stw	r8,12(r4)
    3c74:	22000215 	stw	r8,8(r4)
    3c78:	3a05883a 	add	r2,r7,r8
    3c7c:	38c00054 	ori	r3,r7,1
    3c80:	11c00015 	stw	r7,0(r2)
    3c84:	41000215 	stw	r4,8(r8)
    3c88:	40c00115 	stw	r3,4(r8)
    3c8c:	41000315 	stw	r4,12(r8)
    3c90:	003f8406 	br	3aa4 <_free_r+0xb4>
    3c94:	1005d0ba 	srai	r2,r2,2
    3c98:	00c00044 	movi	r3,1
    3c9c:	51000117 	ldw	r4,4(r10)
    3ca0:	1886983a 	sll	r3,r3,r2
    3ca4:	20c8b03a 	or	r4,r4,r3
    3ca8:	51000115 	stw	r4,4(r10)
    3cac:	003fa706 	br	3b4c <_free_r+0x15c>
    3cb0:	00801504 	movi	r2,84
    3cb4:	10c00436 	bltu	r2,r3,3cc8 <_free_r+0x2d8>
    3cb8:	3804d33a 	srli	r2,r7,12
    3cbc:	10801b84 	addi	r2,r2,110
    3cc0:	100690fa 	slli	r3,r2,3
    3cc4:	003f9706 	br	3b24 <_free_r+0x134>
    3cc8:	00805504 	movi	r2,340
    3ccc:	10c00436 	bltu	r2,r3,3ce0 <_free_r+0x2f0>
    3cd0:	3804d3fa 	srli	r2,r7,15
    3cd4:	10801dc4 	addi	r2,r2,119
    3cd8:	100690fa 	slli	r3,r2,3
    3cdc:	003f9106 	br	3b24 <_free_r+0x134>
    3ce0:	00815504 	movi	r2,1364
    3ce4:	10c0032e 	bgeu	r2,r3,3cf4 <_free_r+0x304>
    3ce8:	00801f84 	movi	r2,126
    3cec:	00c0fc04 	movi	r3,1008
    3cf0:	003f8c06 	br	3b24 <_free_r+0x134>
    3cf4:	3804d4ba 	srli	r2,r7,18
    3cf8:	10801f04 	addi	r2,r2,124
    3cfc:	100690fa 	slli	r3,r2,3
    3d00:	003f8806 	br	3b24 <_free_r+0x134>

00003d04 <_fwalk_reent>:
    3d04:	defff704 	addi	sp,sp,-36
    3d08:	dcc00315 	stw	r19,12(sp)
    3d0c:	24c0b804 	addi	r19,r4,736
    3d10:	dd800615 	stw	r22,24(sp)
    3d14:	dd400515 	stw	r21,20(sp)
    3d18:	dfc00815 	stw	ra,32(sp)
    3d1c:	ddc00715 	stw	r23,28(sp)
    3d20:	dd000415 	stw	r20,16(sp)
    3d24:	dc800215 	stw	r18,8(sp)
    3d28:	dc400115 	stw	r17,4(sp)
    3d2c:	dc000015 	stw	r16,0(sp)
    3d30:	202b883a 	mov	r21,r4
    3d34:	282d883a 	mov	r22,r5
    3d38:	000365c0 	call	365c <__sfp_lock_acquire>
    3d3c:	98002126 	beq	r19,zero,3dc4 <_fwalk_reent+0xc0>
    3d40:	002f883a 	mov	r23,zero
    3d44:	9c800117 	ldw	r18,4(r19)
    3d48:	9c000217 	ldw	r16,8(r19)
    3d4c:	90bfffc4 	addi	r2,r18,-1
    3d50:	10000d16 	blt	r2,zero,3d88 <_fwalk_reent+0x84>
    3d54:	0023883a 	mov	r17,zero
    3d58:	053fffc4 	movi	r20,-1
    3d5c:	8080030f 	ldh	r2,12(r16)
    3d60:	8c400044 	addi	r17,r17,1
    3d64:	10000626 	beq	r2,zero,3d80 <_fwalk_reent+0x7c>
    3d68:	8080038f 	ldh	r2,14(r16)
    3d6c:	800b883a 	mov	r5,r16
    3d70:	a809883a 	mov	r4,r21
    3d74:	15000226 	beq	r2,r20,3d80 <_fwalk_reent+0x7c>
    3d78:	b03ee83a 	callr	r22
    3d7c:	b8aeb03a 	or	r23,r23,r2
    3d80:	84001704 	addi	r16,r16,92
    3d84:	947ff51e 	bne	r18,r17,3d5c <_fwalk_reent+0x58>
    3d88:	9cc00017 	ldw	r19,0(r19)
    3d8c:	983fed1e 	bne	r19,zero,3d44 <_fwalk_reent+0x40>
    3d90:	00036600 	call	3660 <__sfp_lock_release>
    3d94:	b805883a 	mov	r2,r23
    3d98:	dfc00817 	ldw	ra,32(sp)
    3d9c:	ddc00717 	ldw	r23,28(sp)
    3da0:	dd800617 	ldw	r22,24(sp)
    3da4:	dd400517 	ldw	r21,20(sp)
    3da8:	dd000417 	ldw	r20,16(sp)
    3dac:	dcc00317 	ldw	r19,12(sp)
    3db0:	dc800217 	ldw	r18,8(sp)
    3db4:	dc400117 	ldw	r17,4(sp)
    3db8:	dc000017 	ldw	r16,0(sp)
    3dbc:	dec00904 	addi	sp,sp,36
    3dc0:	f800283a 	ret
    3dc4:	002f883a 	mov	r23,zero
    3dc8:	003ff106 	br	3d90 <_fwalk_reent+0x8c>

00003dcc <_fwalk>:
    3dcc:	defff804 	addi	sp,sp,-32
    3dd0:	dcc00315 	stw	r19,12(sp)
    3dd4:	24c0b804 	addi	r19,r4,736
    3dd8:	dd400515 	stw	r21,20(sp)
    3ddc:	dfc00715 	stw	ra,28(sp)
    3de0:	dd800615 	stw	r22,24(sp)
    3de4:	dd000415 	stw	r20,16(sp)
    3de8:	dc800215 	stw	r18,8(sp)
    3dec:	dc400115 	stw	r17,4(sp)
    3df0:	dc000015 	stw	r16,0(sp)
    3df4:	282b883a 	mov	r21,r5
    3df8:	000365c0 	call	365c <__sfp_lock_acquire>
    3dfc:	98001f26 	beq	r19,zero,3e7c <_fwalk+0xb0>
    3e00:	002d883a 	mov	r22,zero
    3e04:	9c800117 	ldw	r18,4(r19)
    3e08:	9c000217 	ldw	r16,8(r19)
    3e0c:	90bfffc4 	addi	r2,r18,-1
    3e10:	10000c16 	blt	r2,zero,3e44 <_fwalk+0x78>
    3e14:	0023883a 	mov	r17,zero
    3e18:	053fffc4 	movi	r20,-1
    3e1c:	8080030f 	ldh	r2,12(r16)
    3e20:	8c400044 	addi	r17,r17,1
    3e24:	10000526 	beq	r2,zero,3e3c <_fwalk+0x70>
    3e28:	8080038f 	ldh	r2,14(r16)
    3e2c:	8009883a 	mov	r4,r16
    3e30:	15000226 	beq	r2,r20,3e3c <_fwalk+0x70>
    3e34:	a83ee83a 	callr	r21
    3e38:	b0acb03a 	or	r22,r22,r2
    3e3c:	84001704 	addi	r16,r16,92
    3e40:	947ff61e 	bne	r18,r17,3e1c <_fwalk+0x50>
    3e44:	9cc00017 	ldw	r19,0(r19)
    3e48:	983fee1e 	bne	r19,zero,3e04 <_fwalk+0x38>
    3e4c:	00036600 	call	3660 <__sfp_lock_release>
    3e50:	b005883a 	mov	r2,r22
    3e54:	dfc00717 	ldw	ra,28(sp)
    3e58:	dd800617 	ldw	r22,24(sp)
    3e5c:	dd400517 	ldw	r21,20(sp)
    3e60:	dd000417 	ldw	r20,16(sp)
    3e64:	dcc00317 	ldw	r19,12(sp)
    3e68:	dc800217 	ldw	r18,8(sp)
    3e6c:	dc400117 	ldw	r17,4(sp)
    3e70:	dc000017 	ldw	r16,0(sp)
    3e74:	dec00804 	addi	sp,sp,32
    3e78:	f800283a 	ret
    3e7c:	002d883a 	mov	r22,zero
    3e80:	003ff206 	br	3e4c <_fwalk+0x80>

00003e84 <__smakebuf_r>:
    3e84:	2880030b 	ldhu	r2,12(r5)
    3e88:	deffed04 	addi	sp,sp,-76
    3e8c:	dc401015 	stw	r17,64(sp)
    3e90:	1080008c 	andi	r2,r2,2
    3e94:	dc000f15 	stw	r16,60(sp)
    3e98:	dfc01215 	stw	ra,72(sp)
    3e9c:	dc801115 	stw	r18,68(sp)
    3ea0:	2821883a 	mov	r16,r5
    3ea4:	2023883a 	mov	r17,r4
    3ea8:	10000b26 	beq	r2,zero,3ed8 <__smakebuf_r+0x54>
    3eac:	28c010c4 	addi	r3,r5,67
    3eb0:	00800044 	movi	r2,1
    3eb4:	28800515 	stw	r2,20(r5)
    3eb8:	28c00415 	stw	r3,16(r5)
    3ebc:	28c00015 	stw	r3,0(r5)
    3ec0:	dfc01217 	ldw	ra,72(sp)
    3ec4:	dc801117 	ldw	r18,68(sp)
    3ec8:	dc401017 	ldw	r17,64(sp)
    3ecc:	dc000f17 	ldw	r16,60(sp)
    3ed0:	dec01304 	addi	sp,sp,76
    3ed4:	f800283a 	ret
    3ed8:	2940038f 	ldh	r5,14(r5)
    3edc:	28002116 	blt	r5,zero,3f64 <__smakebuf_r+0xe0>
    3ee0:	d80d883a 	mov	r6,sp
    3ee4:	0004b200 	call	4b20 <_fstat_r>
    3ee8:	10001e16 	blt	r2,zero,3f64 <__smakebuf_r+0xe0>
    3eec:	d8800117 	ldw	r2,4(sp)
    3ef0:	00e00014 	movui	r3,32768
    3ef4:	113c000c 	andi	r4,r2,61440
    3ef8:	20c03126 	beq	r4,r3,3fc0 <__smakebuf_r+0x13c>
    3efc:	8080030b 	ldhu	r2,12(r16)
    3f00:	00c80004 	movi	r3,8192
    3f04:	10820014 	ori	r2,r2,2048
    3f08:	8080030d 	sth	r2,12(r16)
    3f0c:	20c01e26 	beq	r4,r3,3f88 <__smakebuf_r+0x104>
    3f10:	04810004 	movi	r18,1024
    3f14:	8809883a 	mov	r4,r17
    3f18:	900b883a 	mov	r5,r18
    3f1c:	00040180 	call	4018 <_malloc_r>
    3f20:	1009883a 	mov	r4,r2
    3f24:	10003126 	beq	r2,zero,3fec <__smakebuf_r+0x168>
    3f28:	80c0030b 	ldhu	r3,12(r16)
    3f2c:	00800034 	movhi	r2,0
    3f30:	108dd404 	addi	r2,r2,14160
    3f34:	88800f15 	stw	r2,60(r17)
    3f38:	18c02014 	ori	r3,r3,128
    3f3c:	84800515 	stw	r18,20(r16)
    3f40:	80c0030d 	sth	r3,12(r16)
    3f44:	81000415 	stw	r4,16(r16)
    3f48:	81000015 	stw	r4,0(r16)
    3f4c:	dfc01217 	ldw	ra,72(sp)
    3f50:	dc801117 	ldw	r18,68(sp)
    3f54:	dc401017 	ldw	r17,64(sp)
    3f58:	dc000f17 	ldw	r16,60(sp)
    3f5c:	dec01304 	addi	sp,sp,76
    3f60:	f800283a 	ret
    3f64:	80c0030b 	ldhu	r3,12(r16)
    3f68:	1880200c 	andi	r2,r3,128
    3f6c:	10000426 	beq	r2,zero,3f80 <__smakebuf_r+0xfc>
    3f70:	04801004 	movi	r18,64
    3f74:	18820014 	ori	r2,r3,2048
    3f78:	8080030d 	sth	r2,12(r16)
    3f7c:	003fe506 	br	3f14 <__smakebuf_r+0x90>
    3f80:	04810004 	movi	r18,1024
    3f84:	003ffb06 	br	3f74 <__smakebuf_r+0xf0>
    3f88:	8140038f 	ldh	r5,14(r16)
    3f8c:	8809883a 	mov	r4,r17
    3f90:	0004b940 	call	4b94 <_isatty_r>
    3f94:	103fde26 	beq	r2,zero,3f10 <__smakebuf_r+0x8c>
    3f98:	8080030b 	ldhu	r2,12(r16)
    3f9c:	80c010c4 	addi	r3,r16,67
    3fa0:	04810004 	movi	r18,1024
    3fa4:	10800054 	ori	r2,r2,1
    3fa8:	8080030d 	sth	r2,12(r16)
    3fac:	00800044 	movi	r2,1
    3fb0:	80c00415 	stw	r3,16(r16)
    3fb4:	80800515 	stw	r2,20(r16)
    3fb8:	80c00015 	stw	r3,0(r16)
    3fbc:	003fd506 	br	3f14 <__smakebuf_r+0x90>
    3fc0:	80c00a17 	ldw	r3,40(r16)
    3fc4:	00800034 	movhi	r2,0
    3fc8:	1091f404 	addi	r2,r2,18384
    3fcc:	18bfcb1e 	bne	r3,r2,3efc <__smakebuf_r+0x78>
    3fd0:	8080030b 	ldhu	r2,12(r16)
    3fd4:	00c10004 	movi	r3,1024
    3fd8:	1825883a 	mov	r18,r3
    3fdc:	10c4b03a 	or	r2,r2,r3
    3fe0:	8080030d 	sth	r2,12(r16)
    3fe4:	80c01315 	stw	r3,76(r16)
    3fe8:	003fca06 	br	3f14 <__smakebuf_r+0x90>
    3fec:	8100030b 	ldhu	r4,12(r16)
    3ff0:	2080800c 	andi	r2,r4,512
    3ff4:	103fb21e 	bne	r2,zero,3ec0 <__smakebuf_r+0x3c>
    3ff8:	80c010c4 	addi	r3,r16,67
    3ffc:	21000094 	ori	r4,r4,2
    4000:	00800044 	movi	r2,1
    4004:	80800515 	stw	r2,20(r16)
    4008:	8100030d 	sth	r4,12(r16)
    400c:	80c00415 	stw	r3,16(r16)
    4010:	80c00015 	stw	r3,0(r16)
    4014:	003faa06 	br	3ec0 <__smakebuf_r+0x3c>

00004018 <_malloc_r>:
    4018:	defff604 	addi	sp,sp,-40
    401c:	28c002c4 	addi	r3,r5,11
    4020:	00800584 	movi	r2,22
    4024:	dc800215 	stw	r18,8(sp)
    4028:	dfc00915 	stw	ra,36(sp)
    402c:	df000815 	stw	fp,32(sp)
    4030:	ddc00715 	stw	r23,28(sp)
    4034:	dd800615 	stw	r22,24(sp)
    4038:	dd400515 	stw	r21,20(sp)
    403c:	dd000415 	stw	r20,16(sp)
    4040:	dcc00315 	stw	r19,12(sp)
    4044:	dc400115 	stw	r17,4(sp)
    4048:	dc000015 	stw	r16,0(sp)
    404c:	2025883a 	mov	r18,r4
    4050:	10c01236 	bltu	r2,r3,409c <_malloc_r+0x84>
    4054:	04400404 	movi	r17,16
    4058:	8940142e 	bgeu	r17,r5,40ac <_malloc_r+0x94>
    405c:	00800304 	movi	r2,12
    4060:	0007883a 	mov	r3,zero
    4064:	90800015 	stw	r2,0(r18)
    4068:	1805883a 	mov	r2,r3
    406c:	dfc00917 	ldw	ra,36(sp)
    4070:	df000817 	ldw	fp,32(sp)
    4074:	ddc00717 	ldw	r23,28(sp)
    4078:	dd800617 	ldw	r22,24(sp)
    407c:	dd400517 	ldw	r21,20(sp)
    4080:	dd000417 	ldw	r20,16(sp)
    4084:	dcc00317 	ldw	r19,12(sp)
    4088:	dc800217 	ldw	r18,8(sp)
    408c:	dc400117 	ldw	r17,4(sp)
    4090:	dc000017 	ldw	r16,0(sp)
    4094:	dec00a04 	addi	sp,sp,40
    4098:	f800283a 	ret
    409c:	00bffe04 	movi	r2,-8
    40a0:	18a2703a 	and	r17,r3,r2
    40a4:	883fed16 	blt	r17,zero,405c <_malloc_r+0x44>
    40a8:	897fec36 	bltu	r17,r5,405c <_malloc_r+0x44>
    40ac:	9009883a 	mov	r4,r18
    40b0:	0004ea40 	call	4ea4 <__malloc_lock>
    40b4:	00807dc4 	movi	r2,503
    40b8:	14402b2e 	bgeu	r2,r17,4168 <_malloc_r+0x150>
    40bc:	8806d27a 	srli	r3,r17,9
    40c0:	18003f1e 	bne	r3,zero,41c0 <_malloc_r+0x1a8>
    40c4:	880cd0fa 	srli	r6,r17,3
    40c8:	300490fa 	slli	r2,r6,3
    40cc:	02c00034 	movhi	r11,0
    40d0:	5adaf204 	addi	r11,r11,27592
    40d4:	12cb883a 	add	r5,r2,r11
    40d8:	2c000317 	ldw	r16,12(r5)
    40dc:	580f883a 	mov	r7,r11
    40e0:	2c00041e 	bne	r5,r16,40f4 <_malloc_r+0xdc>
    40e4:	00000a06 	br	4110 <_malloc_r+0xf8>
    40e8:	1800860e 	bge	r3,zero,4304 <_malloc_r+0x2ec>
    40ec:	84000317 	ldw	r16,12(r16)
    40f0:	2c000726 	beq	r5,r16,4110 <_malloc_r+0xf8>
    40f4:	80800117 	ldw	r2,4(r16)
    40f8:	00ffff04 	movi	r3,-4
    40fc:	10c8703a 	and	r4,r2,r3
    4100:	2447c83a 	sub	r3,r4,r17
    4104:	008003c4 	movi	r2,15
    4108:	10fff70e 	bge	r2,r3,40e8 <_malloc_r+0xd0>
    410c:	31bfffc4 	addi	r6,r6,-1
    4110:	32400044 	addi	r9,r6,1
    4114:	02800034 	movhi	r10,0
    4118:	529af404 	addi	r10,r10,27600
    411c:	54000217 	ldw	r16,8(r10)
    4120:	8280a026 	beq	r16,r10,43a4 <_malloc_r+0x38c>
    4124:	80800117 	ldw	r2,4(r16)
    4128:	00ffff04 	movi	r3,-4
    412c:	10ca703a 	and	r5,r2,r3
    4130:	2c4dc83a 	sub	r6,r5,r17
    4134:	008003c4 	movi	r2,15
    4138:	11808316 	blt	r2,r6,4348 <_malloc_r+0x330>
    413c:	52800315 	stw	r10,12(r10)
    4140:	52800215 	stw	r10,8(r10)
    4144:	30002916 	blt	r6,zero,41ec <_malloc_r+0x1d4>
    4148:	8147883a 	add	r3,r16,r5
    414c:	18800117 	ldw	r2,4(r3)
    4150:	9009883a 	mov	r4,r18
    4154:	10800054 	ori	r2,r2,1
    4158:	18800115 	stw	r2,4(r3)
    415c:	0004ea80 	call	4ea8 <__malloc_unlock>
    4160:	80c00204 	addi	r3,r16,8
    4164:	003fc006 	br	4068 <_malloc_r+0x50>
    4168:	02c00034 	movhi	r11,0
    416c:	5adaf204 	addi	r11,r11,27592
    4170:	8ac5883a 	add	r2,r17,r11
    4174:	14000317 	ldw	r16,12(r2)
    4178:	580f883a 	mov	r7,r11
    417c:	8806d0fa 	srli	r3,r17,3
    4180:	14006c26 	beq	r2,r16,4334 <_malloc_r+0x31c>
    4184:	80c00117 	ldw	r3,4(r16)
    4188:	00bfff04 	movi	r2,-4
    418c:	81800317 	ldw	r6,12(r16)
    4190:	1886703a 	and	r3,r3,r2
    4194:	80c7883a 	add	r3,r16,r3
    4198:	18800117 	ldw	r2,4(r3)
    419c:	81400217 	ldw	r5,8(r16)
    41a0:	9009883a 	mov	r4,r18
    41a4:	10800054 	ori	r2,r2,1
    41a8:	18800115 	stw	r2,4(r3)
    41ac:	31400215 	stw	r5,8(r6)
    41b0:	29800315 	stw	r6,12(r5)
    41b4:	0004ea80 	call	4ea8 <__malloc_unlock>
    41b8:	80c00204 	addi	r3,r16,8
    41bc:	003faa06 	br	4068 <_malloc_r+0x50>
    41c0:	00800104 	movi	r2,4
    41c4:	10c0052e 	bgeu	r2,r3,41dc <_malloc_r+0x1c4>
    41c8:	00800504 	movi	r2,20
    41cc:	10c07836 	bltu	r2,r3,43b0 <_malloc_r+0x398>
    41d0:	198016c4 	addi	r6,r3,91
    41d4:	300490fa 	slli	r2,r6,3
    41d8:	003fbc06 	br	40cc <_malloc_r+0xb4>
    41dc:	8804d1ba 	srli	r2,r17,6
    41e0:	11800e04 	addi	r6,r2,56
    41e4:	300490fa 	slli	r2,r6,3
    41e8:	003fb806 	br	40cc <_malloc_r+0xb4>
    41ec:	00807fc4 	movi	r2,511
    41f0:	1140bb36 	bltu	r2,r5,44e0 <_malloc_r+0x4c8>
    41f4:	2806d0fa 	srli	r3,r5,3
    41f8:	573ffe04 	addi	fp,r10,-8
    41fc:	00800044 	movi	r2,1
    4200:	180890fa 	slli	r4,r3,3
    4204:	1807d0ba 	srai	r3,r3,2
    4208:	e1c00117 	ldw	r7,4(fp)
    420c:	5909883a 	add	r4,r11,r4
    4210:	21400217 	ldw	r5,8(r4)
    4214:	10c4983a 	sll	r2,r2,r3
    4218:	81000315 	stw	r4,12(r16)
    421c:	81400215 	stw	r5,8(r16)
    4220:	388eb03a 	or	r7,r7,r2
    4224:	2c000315 	stw	r16,12(r5)
    4228:	24000215 	stw	r16,8(r4)
    422c:	e1c00115 	stw	r7,4(fp)
    4230:	4807883a 	mov	r3,r9
    4234:	4800cd16 	blt	r9,zero,456c <_malloc_r+0x554>
    4238:	1807d0ba 	srai	r3,r3,2
    423c:	00800044 	movi	r2,1
    4240:	10c8983a 	sll	r4,r2,r3
    4244:	39004436 	bltu	r7,r4,4358 <_malloc_r+0x340>
    4248:	21c4703a 	and	r2,r4,r7
    424c:	10000a1e 	bne	r2,zero,4278 <_malloc_r+0x260>
    4250:	2109883a 	add	r4,r4,r4
    4254:	00bfff04 	movi	r2,-4
    4258:	4884703a 	and	r2,r9,r2
    425c:	3906703a 	and	r3,r7,r4
    4260:	12400104 	addi	r9,r2,4
    4264:	1800041e 	bne	r3,zero,4278 <_malloc_r+0x260>
    4268:	2109883a 	add	r4,r4,r4
    426c:	3904703a 	and	r2,r7,r4
    4270:	4a400104 	addi	r9,r9,4
    4274:	103ffc26 	beq	r2,zero,4268 <_malloc_r+0x250>
    4278:	480490fa 	slli	r2,r9,3
    427c:	4819883a 	mov	r12,r9
    4280:	023fff04 	movi	r8,-4
    4284:	589b883a 	add	r13,r11,r2
    4288:	6807883a 	mov	r3,r13
    428c:	014003c4 	movi	r5,15
    4290:	1c000317 	ldw	r16,12(r3)
    4294:	1c00041e 	bne	r3,r16,42a8 <_malloc_r+0x290>
    4298:	0000a706 	br	4538 <_malloc_r+0x520>
    429c:	3000ab0e 	bge	r6,zero,454c <_malloc_r+0x534>
    42a0:	84000317 	ldw	r16,12(r16)
    42a4:	1c00a426 	beq	r3,r16,4538 <_malloc_r+0x520>
    42a8:	80800117 	ldw	r2,4(r16)
    42ac:	1204703a 	and	r2,r2,r8
    42b0:	144dc83a 	sub	r6,r2,r17
    42b4:	29bff90e 	bge	r5,r6,429c <_malloc_r+0x284>
    42b8:	81000317 	ldw	r4,12(r16)
    42bc:	80c00217 	ldw	r3,8(r16)
    42c0:	89400054 	ori	r5,r17,1
    42c4:	8445883a 	add	r2,r16,r17
    42c8:	20c00215 	stw	r3,8(r4)
    42cc:	19000315 	stw	r4,12(r3)
    42d0:	81400115 	stw	r5,4(r16)
    42d4:	1187883a 	add	r3,r2,r6
    42d8:	31000054 	ori	r4,r6,1
    42dc:	50800315 	stw	r2,12(r10)
    42e0:	50800215 	stw	r2,8(r10)
    42e4:	19800015 	stw	r6,0(r3)
    42e8:	11000115 	stw	r4,4(r2)
    42ec:	12800215 	stw	r10,8(r2)
    42f0:	12800315 	stw	r10,12(r2)
    42f4:	9009883a 	mov	r4,r18
    42f8:	0004ea80 	call	4ea8 <__malloc_unlock>
    42fc:	80c00204 	addi	r3,r16,8
    4300:	003f5906 	br	4068 <_malloc_r+0x50>
    4304:	8109883a 	add	r4,r16,r4
    4308:	20800117 	ldw	r2,4(r4)
    430c:	80c00217 	ldw	r3,8(r16)
    4310:	81400317 	ldw	r5,12(r16)
    4314:	10800054 	ori	r2,r2,1
    4318:	20800115 	stw	r2,4(r4)
    431c:	28c00215 	stw	r3,8(r5)
    4320:	19400315 	stw	r5,12(r3)
    4324:	9009883a 	mov	r4,r18
    4328:	0004ea80 	call	4ea8 <__malloc_unlock>
    432c:	80c00204 	addi	r3,r16,8
    4330:	003f4d06 	br	4068 <_malloc_r+0x50>
    4334:	80800204 	addi	r2,r16,8
    4338:	14000317 	ldw	r16,12(r2)
    433c:	143f911e 	bne	r2,r16,4184 <_malloc_r+0x16c>
    4340:	1a400084 	addi	r9,r3,2
    4344:	003f7306 	br	4114 <_malloc_r+0xfc>
    4348:	88c00054 	ori	r3,r17,1
    434c:	8445883a 	add	r2,r16,r17
    4350:	80c00115 	stw	r3,4(r16)
    4354:	003fdf06 	br	42d4 <_malloc_r+0x2bc>
    4358:	e4000217 	ldw	r16,8(fp)
    435c:	00bfff04 	movi	r2,-4
    4360:	80c00117 	ldw	r3,4(r16)
    4364:	802d883a 	mov	r22,r16
    4368:	18aa703a 	and	r21,r3,r2
    436c:	ac401636 	bltu	r21,r17,43c8 <_malloc_r+0x3b0>
    4370:	ac49c83a 	sub	r4,r21,r17
    4374:	008003c4 	movi	r2,15
    4378:	1100130e 	bge	r2,r4,43c8 <_malloc_r+0x3b0>
    437c:	88800054 	ori	r2,r17,1
    4380:	8447883a 	add	r3,r16,r17
    4384:	80800115 	stw	r2,4(r16)
    4388:	20800054 	ori	r2,r4,1
    438c:	18800115 	stw	r2,4(r3)
    4390:	e0c00215 	stw	r3,8(fp)
    4394:	9009883a 	mov	r4,r18
    4398:	0004ea80 	call	4ea8 <__malloc_unlock>
    439c:	80c00204 	addi	r3,r16,8
    43a0:	003f3106 	br	4068 <_malloc_r+0x50>
    43a4:	39c00117 	ldw	r7,4(r7)
    43a8:	573ffe04 	addi	fp,r10,-8
    43ac:	003fa006 	br	4230 <_malloc_r+0x218>
    43b0:	00801504 	movi	r2,84
    43b4:	10c06736 	bltu	r2,r3,4554 <_malloc_r+0x53c>
    43b8:	8804d33a 	srli	r2,r17,12
    43bc:	11801b84 	addi	r6,r2,110
    43c0:	300490fa 	slli	r2,r6,3
    43c4:	003f4106 	br	40cc <_malloc_r+0xb4>
    43c8:	d0a74c17 	ldw	r2,-25296(gp)
    43cc:	d0e00c17 	ldw	r3,-32720(gp)
    43d0:	053fffc4 	movi	r20,-1
    43d4:	10800404 	addi	r2,r2,16
    43d8:	88a7883a 	add	r19,r17,r2
    43dc:	1d000326 	beq	r3,r20,43ec <_malloc_r+0x3d4>
    43e0:	98c3ffc4 	addi	r3,r19,4095
    43e4:	00bc0004 	movi	r2,-4096
    43e8:	18a6703a 	and	r19,r3,r2
    43ec:	9009883a 	mov	r4,r18
    43f0:	980b883a 	mov	r5,r19
    43f4:	00047580 	call	4758 <_sbrk_r>
    43f8:	1009883a 	mov	r4,r2
    43fc:	15000426 	beq	r2,r20,4410 <_malloc_r+0x3f8>
    4400:	854b883a 	add	r5,r16,r21
    4404:	1029883a 	mov	r20,r2
    4408:	11405a2e 	bgeu	r2,r5,4574 <_malloc_r+0x55c>
    440c:	87000c26 	beq	r16,fp,4440 <_malloc_r+0x428>
    4410:	e4000217 	ldw	r16,8(fp)
    4414:	80c00117 	ldw	r3,4(r16)
    4418:	00bfff04 	movi	r2,-4
    441c:	1884703a 	and	r2,r3,r2
    4420:	14400336 	bltu	r2,r17,4430 <_malloc_r+0x418>
    4424:	1449c83a 	sub	r4,r2,r17
    4428:	008003c4 	movi	r2,15
    442c:	113fd316 	blt	r2,r4,437c <_malloc_r+0x364>
    4430:	9009883a 	mov	r4,r18
    4434:	0004ea80 	call	4ea8 <__malloc_unlock>
    4438:	0007883a 	mov	r3,zero
    443c:	003f0a06 	br	4068 <_malloc_r+0x50>
    4440:	05c00074 	movhi	r23,1
    4444:	bde34304 	addi	r23,r23,-29428
    4448:	b8800017 	ldw	r2,0(r23)
    444c:	988d883a 	add	r6,r19,r2
    4450:	b9800015 	stw	r6,0(r23)
    4454:	d0e00c17 	ldw	r3,-32720(gp)
    4458:	00bfffc4 	movi	r2,-1
    445c:	18808e26 	beq	r3,r2,4698 <_malloc_r+0x680>
    4460:	2145c83a 	sub	r2,r4,r5
    4464:	3085883a 	add	r2,r6,r2
    4468:	b8800015 	stw	r2,0(r23)
    446c:	20c001cc 	andi	r3,r4,7
    4470:	18005f1e 	bne	r3,zero,45f0 <_malloc_r+0x5d8>
    4474:	000b883a 	mov	r5,zero
    4478:	a4c5883a 	add	r2,r20,r19
    447c:	1083ffcc 	andi	r2,r2,4095
    4480:	00c40004 	movi	r3,4096
    4484:	1887c83a 	sub	r3,r3,r2
    4488:	28e7883a 	add	r19,r5,r3
    448c:	9009883a 	mov	r4,r18
    4490:	980b883a 	mov	r5,r19
    4494:	00047580 	call	4758 <_sbrk_r>
    4498:	1007883a 	mov	r3,r2
    449c:	00bfffc4 	movi	r2,-1
    44a0:	18807a26 	beq	r3,r2,468c <_malloc_r+0x674>
    44a4:	1d05c83a 	sub	r2,r3,r20
    44a8:	9885883a 	add	r2,r19,r2
    44ac:	10c00054 	ori	r3,r2,1
    44b0:	b8800017 	ldw	r2,0(r23)
    44b4:	a021883a 	mov	r16,r20
    44b8:	a0c00115 	stw	r3,4(r20)
    44bc:	9885883a 	add	r2,r19,r2
    44c0:	b8800015 	stw	r2,0(r23)
    44c4:	e5000215 	stw	r20,8(fp)
    44c8:	b7003626 	beq	r22,fp,45a4 <_malloc_r+0x58c>
    44cc:	018003c4 	movi	r6,15
    44d0:	35404b36 	bltu	r6,r21,4600 <_malloc_r+0x5e8>
    44d4:	00800044 	movi	r2,1
    44d8:	a0800115 	stw	r2,4(r20)
    44dc:	003fcd06 	br	4414 <_malloc_r+0x3fc>
    44e0:	2808d27a 	srli	r4,r5,9
    44e4:	2000371e 	bne	r4,zero,45c4 <_malloc_r+0x5ac>
    44e8:	2808d0fa 	srli	r4,r5,3
    44ec:	200690fa 	slli	r3,r4,3
    44f0:	1ad1883a 	add	r8,r3,r11
    44f4:	41800217 	ldw	r6,8(r8)
    44f8:	41805b26 	beq	r8,r6,4668 <_malloc_r+0x650>
    44fc:	30800117 	ldw	r2,4(r6)
    4500:	00ffff04 	movi	r3,-4
    4504:	10c4703a 	and	r2,r2,r3
    4508:	2880022e 	bgeu	r5,r2,4514 <_malloc_r+0x4fc>
    450c:	31800217 	ldw	r6,8(r6)
    4510:	41bffa1e 	bne	r8,r6,44fc <_malloc_r+0x4e4>
    4514:	32000317 	ldw	r8,12(r6)
    4518:	39c00117 	ldw	r7,4(r7)
    451c:	82000315 	stw	r8,12(r16)
    4520:	81800215 	stw	r6,8(r16)
    4524:	07000034 	movhi	fp,0
    4528:	e71af204 	addi	fp,fp,27592
    452c:	34000315 	stw	r16,12(r6)
    4530:	44000215 	stw	r16,8(r8)
    4534:	003f3e06 	br	4230 <_malloc_r+0x218>
    4538:	63000044 	addi	r12,r12,1
    453c:	608000cc 	andi	r2,r12,3
    4540:	10005d26 	beq	r2,zero,46b8 <_malloc_r+0x6a0>
    4544:	18c00204 	addi	r3,r3,8
    4548:	003f5106 	br	4290 <_malloc_r+0x278>
    454c:	8089883a 	add	r4,r16,r2
    4550:	003f6d06 	br	4308 <_malloc_r+0x2f0>
    4554:	00805504 	movi	r2,340
    4558:	10c02036 	bltu	r2,r3,45dc <_malloc_r+0x5c4>
    455c:	8804d3fa 	srli	r2,r17,15
    4560:	11801dc4 	addi	r6,r2,119
    4564:	300490fa 	slli	r2,r6,3
    4568:	003ed806 	br	40cc <_malloc_r+0xb4>
    456c:	48c000c4 	addi	r3,r9,3
    4570:	003f3106 	br	4238 <_malloc_r+0x220>
    4574:	05c00074 	movhi	r23,1
    4578:	bde34304 	addi	r23,r23,-29428
    457c:	b8800017 	ldw	r2,0(r23)
    4580:	988d883a 	add	r6,r19,r2
    4584:	b9800015 	stw	r6,0(r23)
    4588:	293fb21e 	bne	r5,r4,4454 <_malloc_r+0x43c>
    458c:	2083ffcc 	andi	r2,r4,4095
    4590:	103fb01e 	bne	r2,zero,4454 <_malloc_r+0x43c>
    4594:	e4000217 	ldw	r16,8(fp)
    4598:	9d45883a 	add	r2,r19,r21
    459c:	10800054 	ori	r2,r2,1
    45a0:	80800115 	stw	r2,4(r16)
    45a4:	b8c00017 	ldw	r3,0(r23)
    45a8:	d0a74d17 	ldw	r2,-25292(gp)
    45ac:	10c0012e 	bgeu	r2,r3,45b4 <_malloc_r+0x59c>
    45b0:	d0e74d15 	stw	r3,-25292(gp)
    45b4:	d0a74e17 	ldw	r2,-25288(gp)
    45b8:	10ff962e 	bgeu	r2,r3,4414 <_malloc_r+0x3fc>
    45bc:	d0e74e15 	stw	r3,-25288(gp)
    45c0:	003f9406 	br	4414 <_malloc_r+0x3fc>
    45c4:	00800104 	movi	r2,4
    45c8:	11001e36 	bltu	r2,r4,4644 <_malloc_r+0x62c>
    45cc:	2804d1ba 	srli	r2,r5,6
    45d0:	11000e04 	addi	r4,r2,56
    45d4:	200690fa 	slli	r3,r4,3
    45d8:	003fc506 	br	44f0 <_malloc_r+0x4d8>
    45dc:	00815504 	movi	r2,1364
    45e0:	10c01d2e 	bgeu	r2,r3,4658 <_malloc_r+0x640>
    45e4:	01801f84 	movi	r6,126
    45e8:	0080fc04 	movi	r2,1008
    45ec:	003eb706 	br	40cc <_malloc_r+0xb4>
    45f0:	00800204 	movi	r2,8
    45f4:	10cbc83a 	sub	r5,r2,r3
    45f8:	2169883a 	add	r20,r4,r5
    45fc:	003f9e06 	br	4478 <_malloc_r+0x460>
    4600:	00bffe04 	movi	r2,-8
    4604:	a93ffd04 	addi	r4,r21,-12
    4608:	2088703a 	and	r4,r4,r2
    460c:	b10b883a 	add	r5,r22,r4
    4610:	00c00144 	movi	r3,5
    4614:	28c00215 	stw	r3,8(r5)
    4618:	28c00115 	stw	r3,4(r5)
    461c:	b0800117 	ldw	r2,4(r22)
    4620:	1080004c 	andi	r2,r2,1
    4624:	2084b03a 	or	r2,r4,r2
    4628:	b0800115 	stw	r2,4(r22)
    462c:	313fdd2e 	bgeu	r6,r4,45a4 <_malloc_r+0x58c>
    4630:	b1400204 	addi	r5,r22,8
    4634:	9009883a 	mov	r4,r18
    4638:	00039f00 	call	39f0 <_free_r>
    463c:	e4000217 	ldw	r16,8(fp)
    4640:	003fd806 	br	45a4 <_malloc_r+0x58c>
    4644:	00800504 	movi	r2,20
    4648:	11001536 	bltu	r2,r4,46a0 <_malloc_r+0x688>
    464c:	210016c4 	addi	r4,r4,91
    4650:	200690fa 	slli	r3,r4,3
    4654:	003fa606 	br	44f0 <_malloc_r+0x4d8>
    4658:	8804d4ba 	srli	r2,r17,18
    465c:	11801f04 	addi	r6,r2,124
    4660:	300490fa 	slli	r2,r6,3
    4664:	003e9906 	br	40cc <_malloc_r+0xb4>
    4668:	2009d0ba 	srai	r4,r4,2
    466c:	01400034 	movhi	r5,0
    4670:	295af204 	addi	r5,r5,27592
    4674:	00c00044 	movi	r3,1
    4678:	28800117 	ldw	r2,4(r5)
    467c:	1906983a 	sll	r3,r3,r4
    4680:	10c4b03a 	or	r2,r2,r3
    4684:	28800115 	stw	r2,4(r5)
    4688:	003fa306 	br	4518 <_malloc_r+0x500>
    468c:	0027883a 	mov	r19,zero
    4690:	00c00044 	movi	r3,1
    4694:	003f8606 	br	44b0 <_malloc_r+0x498>
    4698:	d1200c15 	stw	r4,-32720(gp)
    469c:	003f7306 	br	446c <_malloc_r+0x454>
    46a0:	00801504 	movi	r2,84
    46a4:	11001936 	bltu	r2,r4,470c <_malloc_r+0x6f4>
    46a8:	2804d33a 	srli	r2,r5,12
    46ac:	11001b84 	addi	r4,r2,110
    46b0:	200690fa 	slli	r3,r4,3
    46b4:	003f8e06 	br	44f0 <_malloc_r+0x4d8>
    46b8:	480b883a 	mov	r5,r9
    46bc:	6807883a 	mov	r3,r13
    46c0:	288000cc 	andi	r2,r5,3
    46c4:	18fffe04 	addi	r3,r3,-8
    46c8:	297fffc4 	addi	r5,r5,-1
    46cc:	10001526 	beq	r2,zero,4724 <_malloc_r+0x70c>
    46d0:	18800217 	ldw	r2,8(r3)
    46d4:	10fffa26 	beq	r2,r3,46c0 <_malloc_r+0x6a8>
    46d8:	2109883a 	add	r4,r4,r4
    46dc:	393f1e36 	bltu	r7,r4,4358 <_malloc_r+0x340>
    46e0:	203f1d26 	beq	r4,zero,4358 <_malloc_r+0x340>
    46e4:	21c4703a 	and	r2,r4,r7
    46e8:	10000226 	beq	r2,zero,46f4 <_malloc_r+0x6dc>
    46ec:	6013883a 	mov	r9,r12
    46f0:	003ee106 	br	4278 <_malloc_r+0x260>
    46f4:	2109883a 	add	r4,r4,r4
    46f8:	3904703a 	and	r2,r7,r4
    46fc:	63000104 	addi	r12,r12,4
    4700:	103ffc26 	beq	r2,zero,46f4 <_malloc_r+0x6dc>
    4704:	6013883a 	mov	r9,r12
    4708:	003edb06 	br	4278 <_malloc_r+0x260>
    470c:	00805504 	movi	r2,340
    4710:	11000836 	bltu	r2,r4,4734 <_malloc_r+0x71c>
    4714:	2804d3fa 	srli	r2,r5,15
    4718:	11001dc4 	addi	r4,r2,119
    471c:	200690fa 	slli	r3,r4,3
    4720:	003f7306 	br	44f0 <_malloc_r+0x4d8>
    4724:	0104303a 	nor	r2,zero,r4
    4728:	388e703a 	and	r7,r7,r2
    472c:	e1c00115 	stw	r7,4(fp)
    4730:	003fe906 	br	46d8 <_malloc_r+0x6c0>
    4734:	00815504 	movi	r2,1364
    4738:	1100032e 	bgeu	r2,r4,4748 <_malloc_r+0x730>
    473c:	01001f84 	movi	r4,126
    4740:	00c0fc04 	movi	r3,1008
    4744:	003f6a06 	br	44f0 <_malloc_r+0x4d8>
    4748:	2804d4ba 	srli	r2,r5,18
    474c:	11001f04 	addi	r4,r2,124
    4750:	200690fa 	slli	r3,r4,3
    4754:	003f6606 	br	44f0 <_malloc_r+0x4d8>

00004758 <_sbrk_r>:
    4758:	defffd04 	addi	sp,sp,-12
    475c:	dc000015 	stw	r16,0(sp)
    4760:	04000074 	movhi	r16,1
    4764:	84233f04 	addi	r16,r16,-29444
    4768:	dc400115 	stw	r17,4(sp)
    476c:	80000015 	stw	zero,0(r16)
    4770:	2023883a 	mov	r17,r4
    4774:	2809883a 	mov	r4,r5
    4778:	dfc00215 	stw	ra,8(sp)
    477c:	0004fa40 	call	4fa4 <sbrk>
    4780:	1007883a 	mov	r3,r2
    4784:	00bfffc4 	movi	r2,-1
    4788:	18800626 	beq	r3,r2,47a4 <_sbrk_r+0x4c>
    478c:	1805883a 	mov	r2,r3
    4790:	dfc00217 	ldw	ra,8(sp)
    4794:	dc400117 	ldw	r17,4(sp)
    4798:	dc000017 	ldw	r16,0(sp)
    479c:	dec00304 	addi	sp,sp,12
    47a0:	f800283a 	ret
    47a4:	80800017 	ldw	r2,0(r16)
    47a8:	103ff826 	beq	r2,zero,478c <_sbrk_r+0x34>
    47ac:	88800015 	stw	r2,0(r17)
    47b0:	1805883a 	mov	r2,r3
    47b4:	dfc00217 	ldw	ra,8(sp)
    47b8:	dc400117 	ldw	r17,4(sp)
    47bc:	dc000017 	ldw	r16,0(sp)
    47c0:	dec00304 	addi	sp,sp,12
    47c4:	f800283a 	ret

000047c8 <__sclose>:
    47c8:	2940038f 	ldh	r5,14(r5)
    47cc:	000498c1 	jmpi	498c <_close_r>

000047d0 <__sseek>:
    47d0:	defffe04 	addi	sp,sp,-8
    47d4:	dc000015 	stw	r16,0(sp)
    47d8:	2821883a 	mov	r16,r5
    47dc:	2940038f 	ldh	r5,14(r5)
    47e0:	dfc00115 	stw	ra,4(sp)
    47e4:	0004c040 	call	4c04 <_lseek_r>
    47e8:	1007883a 	mov	r3,r2
    47ec:	00bfffc4 	movi	r2,-1
    47f0:	18800926 	beq	r3,r2,4818 <__sseek+0x48>
    47f4:	8080030b 	ldhu	r2,12(r16)
    47f8:	80c01415 	stw	r3,80(r16)
    47fc:	10840014 	ori	r2,r2,4096
    4800:	8080030d 	sth	r2,12(r16)
    4804:	1805883a 	mov	r2,r3
    4808:	dfc00117 	ldw	ra,4(sp)
    480c:	dc000017 	ldw	r16,0(sp)
    4810:	dec00204 	addi	sp,sp,8
    4814:	f800283a 	ret
    4818:	8080030b 	ldhu	r2,12(r16)
    481c:	10bbffcc 	andi	r2,r2,61439
    4820:	8080030d 	sth	r2,12(r16)
    4824:	1805883a 	mov	r2,r3
    4828:	dfc00117 	ldw	ra,4(sp)
    482c:	dc000017 	ldw	r16,0(sp)
    4830:	dec00204 	addi	sp,sp,8
    4834:	f800283a 	ret

00004838 <__swrite>:
    4838:	2880030b 	ldhu	r2,12(r5)
    483c:	defffb04 	addi	sp,sp,-20
    4840:	dcc00315 	stw	r19,12(sp)
    4844:	1080400c 	andi	r2,r2,256
    4848:	dc800215 	stw	r18,8(sp)
    484c:	dc400115 	stw	r17,4(sp)
    4850:	dc000015 	stw	r16,0(sp)
    4854:	3027883a 	mov	r19,r6
    4858:	3825883a 	mov	r18,r7
    485c:	dfc00415 	stw	ra,16(sp)
    4860:	2821883a 	mov	r16,r5
    4864:	000d883a 	mov	r6,zero
    4868:	01c00084 	movi	r7,2
    486c:	2023883a 	mov	r17,r4
    4870:	10000226 	beq	r2,zero,487c <__swrite+0x44>
    4874:	2940038f 	ldh	r5,14(r5)
    4878:	0004c040 	call	4c04 <_lseek_r>
    487c:	8080030b 	ldhu	r2,12(r16)
    4880:	8140038f 	ldh	r5,14(r16)
    4884:	8809883a 	mov	r4,r17
    4888:	10bbffcc 	andi	r2,r2,61439
    488c:	980d883a 	mov	r6,r19
    4890:	900f883a 	mov	r7,r18
    4894:	8080030d 	sth	r2,12(r16)
    4898:	dfc00417 	ldw	ra,16(sp)
    489c:	dcc00317 	ldw	r19,12(sp)
    48a0:	dc800217 	ldw	r18,8(sp)
    48a4:	dc400117 	ldw	r17,4(sp)
    48a8:	dc000017 	ldw	r16,0(sp)
    48ac:	dec00504 	addi	sp,sp,20
    48b0:	00049141 	jmpi	4914 <_write_r>

000048b4 <__sread>:
    48b4:	defffe04 	addi	sp,sp,-8
    48b8:	dc000015 	stw	r16,0(sp)
    48bc:	2821883a 	mov	r16,r5
    48c0:	2940038f 	ldh	r5,14(r5)
    48c4:	dfc00115 	stw	ra,4(sp)
    48c8:	0004c7c0 	call	4c7c <_read_r>
    48cc:	1007883a 	mov	r3,r2
    48d0:	10000816 	blt	r2,zero,48f4 <__sread+0x40>
    48d4:	80801417 	ldw	r2,80(r16)
    48d8:	10c5883a 	add	r2,r2,r3
    48dc:	80801415 	stw	r2,80(r16)
    48e0:	1805883a 	mov	r2,r3
    48e4:	dfc00117 	ldw	ra,4(sp)
    48e8:	dc000017 	ldw	r16,0(sp)
    48ec:	dec00204 	addi	sp,sp,8
    48f0:	f800283a 	ret
    48f4:	8080030b 	ldhu	r2,12(r16)
    48f8:	10bbffcc 	andi	r2,r2,61439
    48fc:	8080030d 	sth	r2,12(r16)
    4900:	1805883a 	mov	r2,r3
    4904:	dfc00117 	ldw	ra,4(sp)
    4908:	dc000017 	ldw	r16,0(sp)
    490c:	dec00204 	addi	sp,sp,8
    4910:	f800283a 	ret

00004914 <_write_r>:
    4914:	defffd04 	addi	sp,sp,-12
    4918:	dc000015 	stw	r16,0(sp)
    491c:	04000074 	movhi	r16,1
    4920:	84233f04 	addi	r16,r16,-29444
    4924:	dc400115 	stw	r17,4(sp)
    4928:	80000015 	stw	zero,0(r16)
    492c:	2023883a 	mov	r17,r4
    4930:	2809883a 	mov	r4,r5
    4934:	300b883a 	mov	r5,r6
    4938:	380d883a 	mov	r6,r7
    493c:	dfc00215 	stw	ra,8(sp)
    4940:	0004ff40 	call	4ff4 <write>
    4944:	1007883a 	mov	r3,r2
    4948:	00bfffc4 	movi	r2,-1
    494c:	18800626 	beq	r3,r2,4968 <_write_r+0x54>
    4950:	1805883a 	mov	r2,r3
    4954:	dfc00217 	ldw	ra,8(sp)
    4958:	dc400117 	ldw	r17,4(sp)
    495c:	dc000017 	ldw	r16,0(sp)
    4960:	dec00304 	addi	sp,sp,12
    4964:	f800283a 	ret
    4968:	80800017 	ldw	r2,0(r16)
    496c:	103ff826 	beq	r2,zero,4950 <_write_r+0x3c>
    4970:	88800015 	stw	r2,0(r17)
    4974:	1805883a 	mov	r2,r3
    4978:	dfc00217 	ldw	ra,8(sp)
    497c:	dc400117 	ldw	r17,4(sp)
    4980:	dc000017 	ldw	r16,0(sp)
    4984:	dec00304 	addi	sp,sp,12
    4988:	f800283a 	ret

0000498c <_close_r>:
    498c:	defffd04 	addi	sp,sp,-12
    4990:	dc000015 	stw	r16,0(sp)
    4994:	04000074 	movhi	r16,1
    4998:	84233f04 	addi	r16,r16,-29444
    499c:	dc400115 	stw	r17,4(sp)
    49a0:	80000015 	stw	zero,0(r16)
    49a4:	2023883a 	mov	r17,r4
    49a8:	2809883a 	mov	r4,r5
    49ac:	dfc00215 	stw	ra,8(sp)
    49b0:	00023a40 	call	23a4 <close>
    49b4:	1007883a 	mov	r3,r2
    49b8:	00bfffc4 	movi	r2,-1
    49bc:	18800626 	beq	r3,r2,49d8 <_close_r+0x4c>
    49c0:	1805883a 	mov	r2,r3
    49c4:	dfc00217 	ldw	ra,8(sp)
    49c8:	dc400117 	ldw	r17,4(sp)
    49cc:	dc000017 	ldw	r16,0(sp)
    49d0:	dec00304 	addi	sp,sp,12
    49d4:	f800283a 	ret
    49d8:	80800017 	ldw	r2,0(r16)
    49dc:	103ff826 	beq	r2,zero,49c0 <_close_r+0x34>
    49e0:	88800015 	stw	r2,0(r17)
    49e4:	1805883a 	mov	r2,r3
    49e8:	dfc00217 	ldw	ra,8(sp)
    49ec:	dc400117 	ldw	r17,4(sp)
    49f0:	dc000017 	ldw	r16,0(sp)
    49f4:	dec00304 	addi	sp,sp,12
    49f8:	f800283a 	ret

000049fc <_fclose_r>:
    49fc:	defffc04 	addi	sp,sp,-16
    4a00:	dc400115 	stw	r17,4(sp)
    4a04:	dc000015 	stw	r16,0(sp)
    4a08:	dfc00315 	stw	ra,12(sp)
    4a0c:	dc800215 	stw	r18,8(sp)
    4a10:	2821883a 	mov	r16,r5
    4a14:	2023883a 	mov	r17,r4
    4a18:	28002926 	beq	r5,zero,4ac0 <_fclose_r+0xc4>
    4a1c:	000365c0 	call	365c <__sfp_lock_acquire>
    4a20:	88000226 	beq	r17,zero,4a2c <_fclose_r+0x30>
    4a24:	88800e17 	ldw	r2,56(r17)
    4a28:	10002d26 	beq	r2,zero,4ae0 <_fclose_r+0xe4>
    4a2c:	8080030f 	ldh	r2,12(r16)
    4a30:	10002226 	beq	r2,zero,4abc <_fclose_r+0xc0>
    4a34:	8809883a 	mov	r4,r17
    4a38:	800b883a 	mov	r5,r16
    4a3c:	00033d40 	call	33d4 <_fflush_r>
    4a40:	1025883a 	mov	r18,r2
    4a44:	80800b17 	ldw	r2,44(r16)
    4a48:	10000426 	beq	r2,zero,4a5c <_fclose_r+0x60>
    4a4c:	81400717 	ldw	r5,28(r16)
    4a50:	8809883a 	mov	r4,r17
    4a54:	103ee83a 	callr	r2
    4a58:	10002a16 	blt	r2,zero,4b04 <_fclose_r+0x108>
    4a5c:	8080030b 	ldhu	r2,12(r16)
    4a60:	1080200c 	andi	r2,r2,128
    4a64:	1000231e 	bne	r2,zero,4af4 <_fclose_r+0xf8>
    4a68:	81400c17 	ldw	r5,48(r16)
    4a6c:	28000526 	beq	r5,zero,4a84 <_fclose_r+0x88>
    4a70:	80801004 	addi	r2,r16,64
    4a74:	28800226 	beq	r5,r2,4a80 <_fclose_r+0x84>
    4a78:	8809883a 	mov	r4,r17
    4a7c:	00039f00 	call	39f0 <_free_r>
    4a80:	80000c15 	stw	zero,48(r16)
    4a84:	81401117 	ldw	r5,68(r16)
    4a88:	28000326 	beq	r5,zero,4a98 <_fclose_r+0x9c>
    4a8c:	8809883a 	mov	r4,r17
    4a90:	00039f00 	call	39f0 <_free_r>
    4a94:	80001115 	stw	zero,68(r16)
    4a98:	8000030d 	sth	zero,12(r16)
    4a9c:	00036600 	call	3660 <__sfp_lock_release>
    4aa0:	9005883a 	mov	r2,r18
    4aa4:	dfc00317 	ldw	ra,12(sp)
    4aa8:	dc800217 	ldw	r18,8(sp)
    4aac:	dc400117 	ldw	r17,4(sp)
    4ab0:	dc000017 	ldw	r16,0(sp)
    4ab4:	dec00404 	addi	sp,sp,16
    4ab8:	f800283a 	ret
    4abc:	00036600 	call	3660 <__sfp_lock_release>
    4ac0:	0025883a 	mov	r18,zero
    4ac4:	9005883a 	mov	r2,r18
    4ac8:	dfc00317 	ldw	ra,12(sp)
    4acc:	dc800217 	ldw	r18,8(sp)
    4ad0:	dc400117 	ldw	r17,4(sp)
    4ad4:	dc000017 	ldw	r16,0(sp)
    4ad8:	dec00404 	addi	sp,sp,16
    4adc:	f800283a 	ret
    4ae0:	8809883a 	mov	r4,r17
    4ae4:	000366c0 	call	366c <__sinit>
    4ae8:	8080030f 	ldh	r2,12(r16)
    4aec:	103fd11e 	bne	r2,zero,4a34 <_fclose_r+0x38>
    4af0:	003ff206 	br	4abc <_fclose_r+0xc0>
    4af4:	81400417 	ldw	r5,16(r16)
    4af8:	8809883a 	mov	r4,r17
    4afc:	00039f00 	call	39f0 <_free_r>
    4b00:	003fd906 	br	4a68 <_fclose_r+0x6c>
    4b04:	04bfffc4 	movi	r18,-1
    4b08:	003fd406 	br	4a5c <_fclose_r+0x60>

00004b0c <fclose>:
    4b0c:	00800034 	movhi	r2,0
    4b10:	109bfd04 	addi	r2,r2,28660
    4b14:	200b883a 	mov	r5,r4
    4b18:	11000017 	ldw	r4,0(r2)
    4b1c:	00049fc1 	jmpi	49fc <_fclose_r>

00004b20 <_fstat_r>:
    4b20:	defffd04 	addi	sp,sp,-12
    4b24:	dc000015 	stw	r16,0(sp)
    4b28:	04000074 	movhi	r16,1
    4b2c:	84233f04 	addi	r16,r16,-29444
    4b30:	dc400115 	stw	r17,4(sp)
    4b34:	80000015 	stw	zero,0(r16)
    4b38:	2023883a 	mov	r17,r4
    4b3c:	2809883a 	mov	r4,r5
    4b40:	300b883a 	mov	r5,r6
    4b44:	dfc00215 	stw	ra,8(sp)
    4b48:	0004d080 	call	4d08 <fstat>
    4b4c:	1007883a 	mov	r3,r2
    4b50:	00bfffc4 	movi	r2,-1
    4b54:	18800626 	beq	r3,r2,4b70 <_fstat_r+0x50>
    4b58:	1805883a 	mov	r2,r3
    4b5c:	dfc00217 	ldw	ra,8(sp)
    4b60:	dc400117 	ldw	r17,4(sp)
    4b64:	dc000017 	ldw	r16,0(sp)
    4b68:	dec00304 	addi	sp,sp,12
    4b6c:	f800283a 	ret
    4b70:	80800017 	ldw	r2,0(r16)
    4b74:	103ff826 	beq	r2,zero,4b58 <_fstat_r+0x38>
    4b78:	88800015 	stw	r2,0(r17)
    4b7c:	1805883a 	mov	r2,r3
    4b80:	dfc00217 	ldw	ra,8(sp)
    4b84:	dc400117 	ldw	r17,4(sp)
    4b88:	dc000017 	ldw	r16,0(sp)
    4b8c:	dec00304 	addi	sp,sp,12
    4b90:	f800283a 	ret

00004b94 <_isatty_r>:
    4b94:	defffd04 	addi	sp,sp,-12
    4b98:	dc000015 	stw	r16,0(sp)
    4b9c:	04000074 	movhi	r16,1
    4ba0:	84233f04 	addi	r16,r16,-29444
    4ba4:	dc400115 	stw	r17,4(sp)
    4ba8:	80000015 	stw	zero,0(r16)
    4bac:	2023883a 	mov	r17,r4
    4bb0:	2809883a 	mov	r4,r5
    4bb4:	dfc00215 	stw	ra,8(sp)
    4bb8:	0004d880 	call	4d88 <isatty>
    4bbc:	1007883a 	mov	r3,r2
    4bc0:	00bfffc4 	movi	r2,-1
    4bc4:	18800626 	beq	r3,r2,4be0 <_isatty_r+0x4c>
    4bc8:	1805883a 	mov	r2,r3
    4bcc:	dfc00217 	ldw	ra,8(sp)
    4bd0:	dc400117 	ldw	r17,4(sp)
    4bd4:	dc000017 	ldw	r16,0(sp)
    4bd8:	dec00304 	addi	sp,sp,12
    4bdc:	f800283a 	ret
    4be0:	80800017 	ldw	r2,0(r16)
    4be4:	103ff826 	beq	r2,zero,4bc8 <_isatty_r+0x34>
    4be8:	88800015 	stw	r2,0(r17)
    4bec:	1805883a 	mov	r2,r3
    4bf0:	dfc00217 	ldw	ra,8(sp)
    4bf4:	dc400117 	ldw	r17,4(sp)
    4bf8:	dc000017 	ldw	r16,0(sp)
    4bfc:	dec00304 	addi	sp,sp,12
    4c00:	f800283a 	ret

00004c04 <_lseek_r>:
    4c04:	defffd04 	addi	sp,sp,-12
    4c08:	dc000015 	stw	r16,0(sp)
    4c0c:	04000074 	movhi	r16,1
    4c10:	84233f04 	addi	r16,r16,-29444
    4c14:	dc400115 	stw	r17,4(sp)
    4c18:	80000015 	stw	zero,0(r16)
    4c1c:	2023883a 	mov	r17,r4
    4c20:	2809883a 	mov	r4,r5
    4c24:	300b883a 	mov	r5,r6
    4c28:	380d883a 	mov	r6,r7
    4c2c:	dfc00215 	stw	ra,8(sp)
    4c30:	0004e0c0 	call	4e0c <lseek>
    4c34:	1007883a 	mov	r3,r2
    4c38:	00bfffc4 	movi	r2,-1
    4c3c:	18800626 	beq	r3,r2,4c58 <_lseek_r+0x54>
    4c40:	1805883a 	mov	r2,r3
    4c44:	dfc00217 	ldw	ra,8(sp)
    4c48:	dc400117 	ldw	r17,4(sp)
    4c4c:	dc000017 	ldw	r16,0(sp)
    4c50:	dec00304 	addi	sp,sp,12
    4c54:	f800283a 	ret
    4c58:	80800017 	ldw	r2,0(r16)
    4c5c:	103ff826 	beq	r2,zero,4c40 <_lseek_r+0x3c>
    4c60:	88800015 	stw	r2,0(r17)
    4c64:	1805883a 	mov	r2,r3
    4c68:	dfc00217 	ldw	ra,8(sp)
    4c6c:	dc400117 	ldw	r17,4(sp)
    4c70:	dc000017 	ldw	r16,0(sp)
    4c74:	dec00304 	addi	sp,sp,12
    4c78:	f800283a 	ret

00004c7c <_read_r>:
    4c7c:	defffd04 	addi	sp,sp,-12
    4c80:	dc000015 	stw	r16,0(sp)
    4c84:	04000074 	movhi	r16,1
    4c88:	84233f04 	addi	r16,r16,-29444
    4c8c:	dc400115 	stw	r17,4(sp)
    4c90:	80000015 	stw	zero,0(r16)
    4c94:	2023883a 	mov	r17,r4
    4c98:	2809883a 	mov	r4,r5
    4c9c:	300b883a 	mov	r5,r6
    4ca0:	380d883a 	mov	r6,r7
    4ca4:	dfc00215 	stw	ra,8(sp)
    4ca8:	0004eac0 	call	4eac <read>
    4cac:	1007883a 	mov	r3,r2
    4cb0:	00bfffc4 	movi	r2,-1
    4cb4:	18800626 	beq	r3,r2,4cd0 <_read_r+0x54>
    4cb8:	1805883a 	mov	r2,r3
    4cbc:	dfc00217 	ldw	ra,8(sp)
    4cc0:	dc400117 	ldw	r17,4(sp)
    4cc4:	dc000017 	ldw	r16,0(sp)
    4cc8:	dec00304 	addi	sp,sp,12
    4ccc:	f800283a 	ret
    4cd0:	80800017 	ldw	r2,0(r16)
    4cd4:	103ff826 	beq	r2,zero,4cb8 <_read_r+0x3c>
    4cd8:	88800015 	stw	r2,0(r17)
    4cdc:	1805883a 	mov	r2,r3
    4ce0:	dfc00217 	ldw	ra,8(sp)
    4ce4:	dc400117 	ldw	r17,4(sp)
    4ce8:	dc000017 	ldw	r16,0(sp)
    4cec:	dec00304 	addi	sp,sp,12
    4cf0:	f800283a 	ret

00004cf4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4cf4:	20000226 	beq	r4,zero,4d00 <_exit+0xc>
    ALT_SIM_FAIL();
    4cf8:	002af070 	cmpltui	zero,zero,43969
    4cfc:	00000106 	br	4d04 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    4d00:	002af0b0 	cmpltui	zero,zero,43970
    4d04:	003fff06 	br	4d04 <_exit+0x10>

00004d08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4d08:	deffff04 	addi	sp,sp,-4
    4d0c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4d10:	20000e16 	blt	r4,zero,4d4c <fstat+0x44>
    4d14:	20c00324 	muli	r3,r4,12
    4d18:	00800034 	movhi	r2,0
    4d1c:	10999204 	addi	r2,r2,26184
    4d20:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4d24:	20000926 	beq	r4,zero,4d4c <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4d28:	20800017 	ldw	r2,0(r4)
    4d2c:	10800817 	ldw	r2,32(r2)
    4d30:	10000226 	beq	r2,zero,4d3c <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    4d34:	103ee83a 	callr	r2
    4d38:	00001006 	br	4d7c <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4d3c:	00880004 	movi	r2,8192
    4d40:	28800115 	stw	r2,4(r5)
    4d44:	0005883a 	mov	r2,zero
    4d48:	00000c06 	br	4d7c <fstat+0x74>
    4d4c:	00800034 	movhi	r2,0
    4d50:	109bf904 	addi	r2,r2,28644
    4d54:	10800017 	ldw	r2,0(r2)
    4d58:	1000031e 	bne	r2,zero,4d68 <fstat+0x60>
    4d5c:	00c00074 	movhi	r3,1
    4d60:	18e33f04 	addi	r3,r3,-29444
    4d64:	00000206 	br	4d70 <fstat+0x68>
    4d68:	103ee83a 	callr	r2
    4d6c:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4d70:	00801444 	movi	r2,81
    4d74:	18800015 	stw	r2,0(r3)
    4d78:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    4d7c:	dfc00017 	ldw	ra,0(sp)
    4d80:	dec00104 	addi	sp,sp,4
    4d84:	f800283a 	ret

00004d88 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4d88:	defff004 	addi	sp,sp,-64
    4d8c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4d90:	20000f16 	blt	r4,zero,4dd0 <isatty+0x48>
    4d94:	20c00324 	muli	r3,r4,12
    4d98:	00800034 	movhi	r2,0
    4d9c:	10999204 	addi	r2,r2,26184
    4da0:	1885883a 	add	r2,r3,r2
  
  if (fd)
    4da4:	10000a26 	beq	r2,zero,4dd0 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4da8:	10800017 	ldw	r2,0(r2)
    4dac:	10800817 	ldw	r2,32(r2)
    4db0:	1000021e 	bne	r2,zero,4dbc <isatty+0x34>
    4db4:	00800044 	movi	r2,1
    4db8:	00001106 	br	4e00 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4dbc:	d80b883a 	mov	r5,sp
    4dc0:	0004d080 	call	4d08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4dc4:	d8800117 	ldw	r2,4(sp)
    4dc8:	10880020 	cmpeqi	r2,r2,8192
    4dcc:	00000c06 	br	4e00 <isatty+0x78>
    4dd0:	00800034 	movhi	r2,0
    4dd4:	109bf904 	addi	r2,r2,28644
    4dd8:	10800017 	ldw	r2,0(r2)
    4ddc:	1000031e 	bne	r2,zero,4dec <isatty+0x64>
    4de0:	00c00074 	movhi	r3,1
    4de4:	18e33f04 	addi	r3,r3,-29444
    4de8:	00000206 	br	4df4 <isatty+0x6c>
    4dec:	103ee83a 	callr	r2
    4df0:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4df4:	00801444 	movi	r2,81
    4df8:	18800015 	stw	r2,0(r3)
    4dfc:	0005883a 	mov	r2,zero
    return 0;
  }
}
    4e00:	dfc00f17 	ldw	ra,60(sp)
    4e04:	dec01004 	addi	sp,sp,64
    4e08:	f800283a 	ret

00004e0c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4e0c:	defffe04 	addi	sp,sp,-8
    4e10:	dfc00115 	stw	ra,4(sp)
    4e14:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4e18:	2000020e 	bge	r4,zero,4e24 <lseek+0x18>
    4e1c:	043febc4 	movi	r16,-81
    4e20:	00000d06 	br	4e58 <lseek+0x4c>
    4e24:	20c00324 	muli	r3,r4,12
    4e28:	00800034 	movhi	r2,0
    4e2c:	10999204 	addi	r2,r2,26184
    4e30:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    4e34:	20001526 	beq	r4,zero,4e8c <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4e38:	20800017 	ldw	r2,0(r4)
    4e3c:	10800717 	ldw	r2,28(r2)
    4e40:	1000021e 	bne	r2,zero,4e4c <lseek+0x40>
    4e44:	043fde84 	movi	r16,-134
    4e48:	00000306 	br	4e58 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4e4c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    4e50:	1000100e 	bge	r2,zero,4e94 <lseek+0x88>
    4e54:	1021883a 	mov	r16,r2
    4e58:	00800034 	movhi	r2,0
    4e5c:	109bf904 	addi	r2,r2,28644
    4e60:	10800017 	ldw	r2,0(r2)
    4e64:	1000031e 	bne	r2,zero,4e74 <lseek+0x68>
    4e68:	00c00074 	movhi	r3,1
    4e6c:	18e33f04 	addi	r3,r3,-29444
    4e70:	00000206 	br	4e7c <lseek+0x70>
    4e74:	103ee83a 	callr	r2
    4e78:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    4e7c:	0405c83a 	sub	r2,zero,r16
    4e80:	18800015 	stw	r2,0(r3)
    4e84:	00bfffc4 	movi	r2,-1
    4e88:	00000206 	br	4e94 <lseek+0x88>
    4e8c:	043febc4 	movi	r16,-81
    4e90:	003ff106 	br	4e58 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    4e94:	dfc00117 	ldw	ra,4(sp)
    4e98:	dc000017 	ldw	r16,0(sp)
    4e9c:	dec00204 	addi	sp,sp,8
    4ea0:	f800283a 	ret

00004ea4 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    4ea4:	f800283a 	ret

00004ea8 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    4ea8:	f800283a 	ret

00004eac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    4eac:	defffe04 	addi	sp,sp,-8
    4eb0:	dfc00115 	stw	ra,4(sp)
    4eb4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4eb8:	20002916 	blt	r4,zero,4f60 <read+0xb4>
    4ebc:	20c00324 	muli	r3,r4,12
    4ec0:	00800034 	movhi	r2,0
    4ec4:	10999204 	addi	r2,r2,26184
    4ec8:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4ecc:	20002426 	beq	r4,zero,4f60 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4ed0:	20800217 	ldw	r2,8(r4)
    4ed4:	108000cc 	andi	r2,r2,3
    4ed8:	00c00044 	movi	r3,1
    4edc:	10c01326 	beq	r2,r3,4f2c <read+0x80>
    4ee0:	20800017 	ldw	r2,0(r4)
    4ee4:	10800517 	ldw	r2,20(r2)
    4ee8:	10001026 	beq	r2,zero,4f2c <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4eec:	103ee83a 	callr	r2
    4ef0:	1021883a 	mov	r16,r2
    4ef4:	1000260e 	bge	r2,zero,4f90 <read+0xe4>
    4ef8:	00800034 	movhi	r2,0
    4efc:	109bf904 	addi	r2,r2,28644
    4f00:	10800017 	ldw	r2,0(r2)
    4f04:	1000031e 	bne	r2,zero,4f14 <read+0x68>
    4f08:	00c00074 	movhi	r3,1
    4f0c:	18e33f04 	addi	r3,r3,-29444
    4f10:	00000206 	br	4f1c <read+0x70>
    4f14:	103ee83a 	callr	r2
    4f18:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    4f1c:	0405c83a 	sub	r2,zero,r16
    4f20:	18800015 	stw	r2,0(r3)
    4f24:	043fffc4 	movi	r16,-1
    4f28:	00001906 	br	4f90 <read+0xe4>
    4f2c:	00800034 	movhi	r2,0
    4f30:	109bf904 	addi	r2,r2,28644
    4f34:	10800017 	ldw	r2,0(r2)
    4f38:	1000031e 	bne	r2,zero,4f48 <read+0x9c>
    4f3c:	00c00074 	movhi	r3,1
    4f40:	18e33f04 	addi	r3,r3,-29444
    4f44:	00000206 	br	4f50 <read+0xa4>
    4f48:	103ee83a 	callr	r2
    4f4c:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    4f50:	00800344 	movi	r2,13
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	043fffc4 	movi	r16,-1
    4f5c:	00000c06 	br	4f90 <read+0xe4>
    4f60:	00800034 	movhi	r2,0
    4f64:	109bf904 	addi	r2,r2,28644
    4f68:	10800017 	ldw	r2,0(r2)
    4f6c:	1000031e 	bne	r2,zero,4f7c <read+0xd0>
    4f70:	00c00074 	movhi	r3,1
    4f74:	18e33f04 	addi	r3,r3,-29444
    4f78:	00000206 	br	4f84 <read+0xd8>
    4f7c:	103ee83a 	callr	r2
    4f80:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    4f84:	00801444 	movi	r2,81
    4f88:	18800015 	stw	r2,0(r3)
    4f8c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    4f90:	8005883a 	mov	r2,r16
    4f94:	dfc00117 	ldw	ra,4(sp)
    4f98:	dc000017 	ldw	r16,0(sp)
    4f9c:	dec00204 	addi	sp,sp,8
    4fa0:	f800283a 	ret

00004fa4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4fa4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4fa8:	00bfff84 	movi	r2,-2
    4fac:	2884703a 	and	r2,r5,r2
    4fb0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4fb4:	d0a00d17 	ldw	r2,-32716(gp)
    4fb8:	108000c4 	addi	r2,r2,3
    4fbc:	00ffff04 	movi	r3,-4
    4fc0:	10c6703a 	and	r3,r2,r3
    4fc4:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    4fc8:	1909883a 	add	r4,r3,r4
    4fcc:	00802034 	movhi	r2,128
    4fd0:	10800004 	addi	r2,r2,0
    4fd4:	1100032e 	bgeu	r2,r4,4fe4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4fd8:	2801703a 	wrctl	status,r5
    4fdc:	00ffffc4 	movi	r3,-1
    4fe0:	00000206 	br	4fec <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    4fe4:	d1200d15 	stw	r4,-32716(gp)
    4fe8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    4fec:	1805883a 	mov	r2,r3
    4ff0:	f800283a 	ret

00004ff4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4ff4:	defffe04 	addi	sp,sp,-8
    4ff8:	dfc00115 	stw	ra,4(sp)
    4ffc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5000:	20002816 	blt	r4,zero,50a4 <write+0xb0>
    5004:	20c00324 	muli	r3,r4,12
    5008:	00800034 	movhi	r2,0
    500c:	10999204 	addi	r2,r2,26184
    5010:	1889883a 	add	r4,r3,r2
  
  if (fd)
    5014:	20002326 	beq	r4,zero,50a4 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5018:	20800217 	ldw	r2,8(r4)
    501c:	108000cc 	andi	r2,r2,3
    5020:	10001326 	beq	r2,zero,5070 <write+0x7c>
    5024:	20800017 	ldw	r2,0(r4)
    5028:	10800617 	ldw	r2,24(r2)
    502c:	10001026 	beq	r2,zero,5070 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5030:	103ee83a 	callr	r2
    5034:	1021883a 	mov	r16,r2
    5038:	1000260e 	bge	r2,zero,50d4 <write+0xe0>
    503c:	00800034 	movhi	r2,0
    5040:	109bf904 	addi	r2,r2,28644
    5044:	10800017 	ldw	r2,0(r2)
    5048:	1000031e 	bne	r2,zero,5058 <write+0x64>
    504c:	00c00074 	movhi	r3,1
    5050:	18e33f04 	addi	r3,r3,-29444
    5054:	00000206 	br	5060 <write+0x6c>
    5058:	103ee83a 	callr	r2
    505c:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    5060:	0405c83a 	sub	r2,zero,r16
    5064:	18800015 	stw	r2,0(r3)
    5068:	043fffc4 	movi	r16,-1
    506c:	00001906 	br	50d4 <write+0xe0>
    5070:	00800034 	movhi	r2,0
    5074:	109bf904 	addi	r2,r2,28644
    5078:	10800017 	ldw	r2,0(r2)
    507c:	1000031e 	bne	r2,zero,508c <write+0x98>
    5080:	00c00074 	movhi	r3,1
    5084:	18e33f04 	addi	r3,r3,-29444
    5088:	00000206 	br	5094 <write+0xa0>
    508c:	103ee83a 	callr	r2
    5090:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5094:	00800344 	movi	r2,13
    5098:	18800015 	stw	r2,0(r3)
    509c:	043fffc4 	movi	r16,-1
    50a0:	00000c06 	br	50d4 <write+0xe0>
    50a4:	00800034 	movhi	r2,0
    50a8:	109bf904 	addi	r2,r2,28644
    50ac:	10800017 	ldw	r2,0(r2)
    50b0:	1000031e 	bne	r2,zero,50c0 <write+0xcc>
    50b4:	00c00074 	movhi	r3,1
    50b8:	18e33f04 	addi	r3,r3,-29444
    50bc:	00000206 	br	50c8 <write+0xd4>
    50c0:	103ee83a 	callr	r2
    50c4:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    50c8:	00801444 	movi	r2,81
    50cc:	18800015 	stw	r2,0(r3)
    50d0:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    50d4:	8005883a 	mov	r2,r16
    50d8:	dfc00117 	ldw	ra,4(sp)
    50dc:	dc000017 	ldw	r16,0(sp)
    50e0:	dec00204 	addi	sp,sp,8
    50e4:	f800283a 	ret
    50e8:	00003220 	cmpeqi	zero,zero,200
