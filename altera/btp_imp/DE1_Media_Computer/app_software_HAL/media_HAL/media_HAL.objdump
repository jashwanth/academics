
C:/altera/12.0sp2/University_Program/NiosII_Computer_Systems/DE1/DE1_Media_Computer/app_software_HAL/media_HAL/media_HAL.elf:     file format elf32-littlenios2
C:/altera/12.0sp2/University_Program/NiosII_Computer_Systems/DE1/DE1_Media_Computer/app_software_HAL/media_HAL/media_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000505c memsz 0x0000505c flags r-x
    LOAD off    0x0000607c vaddr 0x0000507c paddr 0x00006d58 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00008a34 vaddr 0x00008a34 paddr 0x00008a34 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004c14  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000300  00004d7c  00004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  0000507c  00006d58  0000607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00008a34  00008a34  00008a34  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00007d58  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00007d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001306  00000000  00000000  00008678  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017fb6  00000000  00000000  0000997e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000564f  00000000  00000000  00021934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cd47  00000000  00000000  00026f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001190  00000000  00000000  00033ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002935  00000000  00000000  00034e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b3c  00000000  00000000  00037791  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0003c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003f24a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003f24d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003f250  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003f251  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003f252  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003f256  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003f25a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003f25e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003f267  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003f270  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0003f279  2**0
                  CONTENTS, READONLY
 28 .jdi          00004996  00000000  00000000  0003f284  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000abe93  00000000  00000000  00043c1a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00004d7c l    d  .rodata	00000000 .rodata
0000507c l    d  .rwdata	00000000 .rwdata
00008a34 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_HAL.c
00004f80 l     O .rodata	00000010 C.8.1848
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000507c l     O .rwdata	00001060 JTAG_UART
000060dc l     O .rwdata	00000030 AV_Config
0000610c l     O .rwdata	00000030 Audio
0000613c l     O .rwdata	0000002c Expansion_JP1
00006168 l     O .rwdata	0000002c Expansion_JP2
00006194 l     O .rwdata	0000002c Green_LEDs
000061c0 l     O .rwdata	0000002c HEX3_HEX0
000061ec l     O .rwdata	0000002c Pushbuttons
00006218 l     O .rwdata	0000002c Red_LEDs
00006244 l     O .rwdata	0000002c Slider_Switches
00006270 l     O .rwdata	00000038 PS2_Port
000062a8 l     O .rwdata	0000002c Serial_Port
000062d4 l     O .rwdata	00000048 VGA_Char_Buffer
0000631c l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000f7c l     F .text	00000054 altera_avalon_jtag_uart_timeout
00001048 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001518 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000021b4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000022bc l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00006518 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00002eb0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003294 l     F .text	00000058 std
000033a0 l     F .text	00000008 __fp_lock
000033a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00006d54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004824 g     F .text	00000070 _isatty_r
000009b8 g     F .text	00000050 alt_main
00008a84 g     O .bss	00000100 alt_irq
00001cc0 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00004894 g     F .text	00000078 _lseek_r
00006d58 g       *ABS*	00000000 __flash_rwdata_start
000017a0 g     F .text	00000020 alt_up_audio_read_fifo_avail
00008b84 g       *ABS*	00000000 __alt_heap_start
00001824 g     F .text	00000064 alt_up_audio_record_r
00004460 g     F .text	00000068 __sseek
000032fc g     F .text	000000a4 __sinit
00002c28 g     F .text	00000130 __swbuf_r
00001ec8 g     F .text	00000088 alt_up_char_buffer_string
00001980 g     F .text	0000000c read_CE_bit
000033fc g     F .text	00000068 __sfmoreglue
00004b38 g     F .text	00000004 __malloc_unlock
00001a50 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00001d6c g     F .text	00000080 alt_up_rs232_read_fd
00001f50 g     F .text	00000058 alt_up_char_buffer_draw
00001888 g     F .text	00000024 alt_up_audio_reset_audio_core
000033ec g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000047b0 g     F .text	00000074 _fstat_r
00008a4c g     O .bss	00000004 errno
000018ac g     F .text	00000014 alt_up_audio_write_interrupt_pending
00008a38 g     O .bss	00000004 alt_argv
0000ed20 g       *ABS*	00000000 _gp
00006398 g     O .rwdata	00000180 alt_fd_list
0000222c g     F .text	00000070 alt_find_dev
000007bc g     F .text	000000a0 memcpy
00001fa8 g     F .text	00000028 alt_up_char_buffer_clear
000033e0 g     F .text	0000000c _cleanup_r
00002320 g     F .text	00000098 alt_io_redirect
00001d20 g     F .text	0000004c alt_up_rs232_read_data
00001570 g     F .text	0000001c alt_up_audio_read_fifo_head
000011f0 g     F .text	00000168 altera_avalon_jtag_uart_read
00004a18 g     F .text	00000084 isatty
00002824 g     F .text	0000003c alt_icache_flush
00008a50 g     O .bss	00000004 __malloc_top_pad
000043e8 g     F .text	00000070 _sbrk_r
0000490c g     F .text	00000078 _read_r
00006d30 g     O .rwdata	00000004 alt_max_fd
00001cf4 g     F .text	0000000c alt_up_rs232_check_parity
00001554 g     F .text	0000001c alt_up_audio_write_fifo_head
0000468c g     F .text	00000110 _fclose_r
0000198c g     F .text	00000008 read_num_bytes_available
00003260 g     F .text	00000034 fflush
00008a54 g     O .bss	00000004 __malloc_max_sbrked_mem
000023b8 g     F .text	000000bc alt_irq_register
0000196c g     F .text	0000000c read_RI_bit
00004a9c g     F .text	00000098 lseek
00006d48 g     O .rwdata	00000004 _global_impure_ptr
00008b84 g       *ABS*	00000000 __bss_end
00002648 g     F .text	000000ac alt_tick
0000192c g     F .text	00000020 alt_up_audio_open_dev
000019a0 g     F .text	00000008 read_data_byte
000033c8 g     F .text	00000018 __fp_lock_all
000002b0 g     F .text	00000078 check_KEYs
0000173c g     F .text	00000064 alt_up_audio_play_r
00002614 g     F .text	00000034 alt_alarm_stop
00001978 g     F .text	00000008 read_RE_bit
00008a40 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00006370 g     O .rwdata	00000028 alt_dev_null
0000194c g     F .text	00000020 alt_up_parallel_port_open_dev
00001b54 g     F .text	00000040 alt_up_ps2_write_data_byte
000021b0 g     F .text	00000004 alt_dcache_flush_all
00006d58 g       *ABS*	00000000 __ram_rwdata_end
00006d28 g     O .rwdata	00000008 alt_dev_list
00004c84 g     F .text	000000f4 write
00002a10 g     F .text	000000e8 _putc_r
0000507c g       *ABS*	00000000 __ram_rodata_end
00004998 g     F .text	00000080 fstat
00001e14 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00008b84 g       *ABS*	00000000 end
00001b94 g     F .text	00000070 alt_up_ps2_write_fd
00001ff0 g     F .text	00000050 alt_up_char_buffer_init
00000fd0 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
000001f0 g     F .text	000000c0 HEX_PS2
000014d4 g     F .text	00000044 alt_avalon_timer_sc_init
00001358 g     F .text	0000017c altera_avalon_jtag_uart_write
000032ec g     F .text	00000004 __sfp_lock_acquire
00003680 g     F .text	00000314 _free_r
00000a08 g     F .text	000001dc alt_printf
00002eb4 g     F .text	000001b0 __call_exitprocs
00006d50 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00008a44 g     O .bss	00000004 _alt_tick_rate
0000158c g     F .text	000000a8 alt_up_audio_write_fifo
00008a48 g     O .bss	00000004 _alt_nticks
00004b3c g     F .text	000000f8 read
00000c2c g     F .text	00000280 alt_sys_init
00001634 g     F .text	00000084 alt_up_audio_read_fifo
000018d4 g     F .text	00000018 alt_up_audio_disable_write_interrupt
000019c8 g     F .text	00000030 alt_up_ps2_clear_fifo
00001dec g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
000001a4 g     F .text	0000004c VGA_box
00000f44 g     F .text	00000038 altera_avalon_jtag_uart_close
0000507c g       *ABS*	00000000 __ram_rwdata_start
00004d7c g       *ABS*	00000000 __ram_rodata_start
00008a5c g     O .bss	00000028 __malloc_current_mallinfo
00000f1c g     F .text	00000028 altera_avalon_jtag_uart_read_fd
000027b8 g     F .text	0000006c alt_get_fd
0000461c g     F .text	00000070 _close_r
000018ec g     F .text	00000014 alt_up_audio_enable_write_interrupt
00002898 g     F .text	00000074 memcmp
00000ecc g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00008b84 g       *ABS*	00000000 __alt_stack_base
00000eac g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00002d74 g     F .text	0000013c __swsetup_r
00001900 g     F .text	00000018 alt_up_audio_disable_read_interrupt
00003464 g     F .text	000000f0 __sfp
00006918 g     O .rwdata	00000408 __malloc_av_
000032f8 g     F .text	00000004 __sinit_lock_release
00004544 g     F .text	00000060 __sread
00001e84 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
000026fc g     F .text	000000bc alt_find_file
000021bc g     F .text	00000070 alt_dev_llist_insert
00004b34 g     F .text	00000004 __malloc_lock
00004c34 g     F .text	00000050 sbrk
00003064 g     F .text	000001fc _fflush_r
00008a34 g       *ABS*	00000000 __bss_start
0000085c g     F .text	00000098 memset
00000328 g     F .text	00000494 main
000016b8 g     F .text	00000020 alt_up_audio_write_fifo_space
00008a3c g     O .bss	00000004 alt_envp
00008a58 g     O .bss	00000004 __malloc_max_total_mem
00001fd0 g     F .text	00000020 alt_up_char_buffer_open_dev
00000ef4 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00002d58 g     F .text	0000001c __swbuf
00004458 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000479c g     F .text	00000014 fclose
000019f8 g     F .text	00000058 alt_up_ps2_read_data_byte
00003ca8 g     F .text	00000740 _malloc_r
00006d34 g     O .rwdata	00000004 alt_errno
00003a5c g     F .text	000000b8 _fwalk
000019a8 g     F .text	00000020 alt_up_ps2_open_dev
0000290c g     F .text	00000104 putc
00003554 g     F .text	0000012c _malloc_trim_r
00001cdc g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00002af8 g     F .text	000000bc strcmp
00004d7c g       *ABS*	00000000 __flash_rodata_start
00001d00 g     F .text	00000020 alt_up_rs232_open_dev
00000c0c g     F .text	00000020 alt_irq_init
000025f0 g     F .text	00000024 alt_release_fd
00001994 g     F .text	0000000c read_data_valid
00001c04 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
000045a4 g     F .text	00000078 _write_r
00006d44 g     O .rwdata	00000004 _impure_ptr
00008a34 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
000033b0 g     F .text	00000018 __fp_unlock_all
00006d20 g     O .rwdata	00000008 alt_fs_list
00001ea0 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
000017c0 g     F .text	00000064 alt_up_audio_record_l
00001dfc g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006d58 g       *ABS*	00000000 _edata
00008b84 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
0000117c g     F .text	00000074 altera_avalon_jtag_uart_ioctl
000016d8 g     F .text	00000064 alt_up_audio_play_l
000044c8 g     F .text	0000007c __swrite
00006d4c g     O .rwdata	00000004 __malloc_trim_threshold
000026f4 g     F .text	00000008 altera_nios2_qsys_irq_init
00002860 g     F .text	00000038 exit
00003994 g     F .text	000000c8 _fwalk_reent
00001c38 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000032f0 g     F .text	00000004 __sfp_lock_release
00004984 g     F .text	00000014 _exit
00002040 g     F .text	00000094 alt_alarm_start
00003b14 g     F .text	00000194 __smakebuf_r
00001af8 g     F .text	0000005c alt_up_ps2_wait_for_ack
00002bb4 g     F .text	00000074 strlen
00002474 g     F .text	0000017c open
00000be4 g     F .text	00000028 alt_putchar
0000229c g     F .text	00000020 alt_icache_flush_all
00006d38 g     O .rwdata	00000004 alt_priority_mask
00001ad0 g     F .text	00000028 alt_up_ps2_read_fd
00006d3c g     O .rwdata	00000008 alt_alarm_list
00001eb8 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
000020d4 g     F .text	000000dc close
000008f4 g     F .text	000000c4 alt_load
00001918 g     F .text	00000014 alt_up_audio_enable_read_interrupt
00000000  w      *UND*	00000000 free
000032f4 g     F .text	00000004 __sinit_lock_acquire
000018c0 g     F .text	00000014 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00808014 	movui	r2,512
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	8422a104 	addi	r16,r16,-30076
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6bb4814 	ori	gp,gp,60704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a28d14 	ori	r2,r2,35380

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e2e114 	ori	r3,r3,35716

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00008f40 	call	8f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00009b80 	call	9b8 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor 
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     1a4:	dac0000b 	ldhu	r11,0(sp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1a8:	39401016 	blt	r7,r5,1ec <VGA_box+0x48>
     1ac:	03000044 	movi	r12,1
     1b0:	00000c06 	br	1e4 <VGA_box+0x40>
     1b4:	2007883a 	mov	r3,r4
     1b8:	2810927a 	slli	r8,r5,9
     1bc:	02820034 	movhi	r10,2048
     1c0:	02400044 	movi	r9,1
	{
		col = x1;
		while (col <= x2)
		{
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     1c4:	40c5883a 	add	r2,r8,r3
     1c8:	1085883a 	add	r2,r2,r2
     1cc:	1285883a 	add	r2,r2,r10
     1d0:	12c0000d 	sth	r11,0(r2)
			++col;
     1d4:	1a47883a 	add	r3,r3,r9

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     1d8:	30fffa0e 	bge	r6,r3,1c4 <VGA_box+0x20>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1dc:	2b0b883a 	add	r5,r5,r12
     1e0:	39400216 	blt	r7,r5,1ec <VGA_box+0x48>
	{
		col = x1;
		while (col <= x2)
     1e4:	313ff30e 	bge	r6,r4,1b4 <VGA_box+0x10>
     1e8:	003ffc06 	br	1dc <VGA_box+0x38>
     1ec:	f800283a 	ret

000001f0 <HEX_PS2>:

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2)
{
     1f0:	defff704 	addi	sp,sp,-36
     1f4:	dfc00815 	stw	ra,32(sp)
     1f8:	dc800715 	stw	r18,28(sp)
     1fc:	dc400615 	stw	r17,24(sp)
     200:	dc000515 	stw	r16,20(sp)
     204:	2021883a 	mov	r16,r4
     208:	2823883a 	mov	r17,r5
	volatile int * HEX3_HEX0_ptr = (int *) 0x10000020;

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in 
	 * a single 7-seg display in the DE1 Media Computer, for the hex digits 0 - F */
	char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
     20c:	04800404 	movi	r18,16
     210:	d809883a 	mov	r4,sp
     214:	01400034 	movhi	r5,0
     218:	2953e004 	addi	r5,r5,20352
     21c:	900d883a 	mov	r6,r18
     220:	00007bc0 	call	7bc <memcpy>
	char	hex_segs[] = { 0, 0, 0, 0};
	int shift_buffer, nibble;
	char code;
	int i;

	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
     224:	84003fcc 	andi	r16,r16,255
     228:	8020923a 	slli	r16,r16,8
     22c:	8c403fcc 	andi	r17,r17,255
     230:	8460b03a 	or	r16,r16,r17
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     234:	00c003c4 	movi	r3,15
     238:	80c4703a 	and	r2,r16,r3
     23c:	d885883a 	add	r2,sp,r2
     240:	10800003 	ldbu	r2,0(r2)
     244:	d8800405 	stb	r2,16(sp)
		shift_buffer = shift_buffer >> 4;
     248:	8005d13a 	srai	r2,r16,4
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     24c:	10c4703a 	and	r2,r2,r3
     250:	d885883a 	add	r2,sp,r2
     254:	10800003 	ldbu	r2,0(r2)
     258:	d8800445 	stb	r2,17(sp)
		shift_buffer = shift_buffer >> 4;
     25c:	8005d23a 	srai	r2,r16,8
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     260:	10c4703a 	and	r2,r2,r3
     264:	d885883a 	add	r2,sp,r2
     268:	10800003 	ldbu	r2,0(r2)
     26c:	d8800485 	stb	r2,18(sp)
     270:	8021d33a 	srai	r16,r16,12
     274:	80e0703a 	and	r16,r16,r3
     278:	dc05883a 	add	r2,sp,r16
     27c:	10800003 	ldbu	r2,0(r2)
     280:	d88004c5 	stb	r2,19(sp)
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
     284:	dc85883a 	add	r2,sp,r18
     288:	10c00017 	ldw	r3,0(r2)
     28c:	00840034 	movhi	r2,4096
     290:	10800804 	addi	r2,r2,32
     294:	10c00015 	stw	r3,0(r2)
}
     298:	dfc00817 	ldw	ra,32(sp)
     29c:	dc800717 	ldw	r18,28(sp)
     2a0:	dc400617 	ldw	r17,24(sp)
     2a4:	dc000517 	ldw	r16,20(sp)
     2a8:	dec00904 	addi	sp,sp,36
     2ac:	f800283a 	ret

000002b0 <check_KEYs>:
/****************************************************************************************
 * Subroutine to read KEYs
****************************************************************************************/
void check_KEYs(int *KEY1, int *KEY2, int *counter, alt_up_parallel_port_dev *KEY_dev,
	alt_up_audio_dev *audio_dev)
{
     2b0:	defffd04 	addi	sp,sp,-12
     2b4:	dfc00215 	stw	ra,8(sp)
     2b8:	dc400115 	stw	r17,4(sp)
     2bc:	dc000015 	stw	r16,0(sp)
     2c0:	2021883a 	mov	r16,r4
     2c4:	2823883a 	mov	r17,r5
     2c8:	d9000317 	ldw	r4,12(sp)
	int KEY_value;

	KEY_value = alt_up_parallel_port_read_data (KEY_dev);
     2cc:	38800a17 	ldw	r2,40(r7)
     2d0:	11400037 	ldwio	r5,0(r2)
     2d4:	1007883a 	mov	r3,r2
	
	while ( alt_up_parallel_port_read_data (KEY_dev) );	// wait for pushbutton KEY release
     2d8:	18800037 	ldwio	r2,0(r3)
     2dc:	103ffe1e 	bne	r2,zero,2d8 <check_KEYs+0x28>

	if (KEY_value == 0x2)					// check KEY1
     2e0:	00800084 	movi	r2,2
     2e4:	2880051e 	bne	r5,r2,2fc <check_KEYs+0x4c>
	{
		// reset counter to start recording
		*counter = 0;
     2e8:	30000015 	stw	zero,0(r6)
		// reset audio port
		alt_up_audio_reset_audio_core (audio_dev);
     2ec:	00018880 	call	1888 <alt_up_audio_reset_audio_core>

		*KEY1 = 1;
     2f0:	00800044 	movi	r2,1
     2f4:	80800015 	stw	r2,0(r16)
     2f8:	00000606 	br	314 <check_KEYs+0x64>
	}
	else if (KEY_value == 0x4)				// check KEY2
     2fc:	00800104 	movi	r2,4
     300:	2880041e 	bne	r5,r2,314 <check_KEYs+0x64>
	{
		// reset counter to start playback
		*counter = 0;
     304:	30000015 	stw	zero,0(r6)
		// reset audio port
		alt_up_audio_reset_audio_core (audio_dev);
     308:	00018880 	call	1888 <alt_up_audio_reset_audio_core>

		*KEY2 = 1;
     30c:	00800044 	movi	r2,1
     310:	88800015 	stw	r2,0(r17)
	}
}
     314:	dfc00217 	ldw	ra,8(sp)
     318:	dc400117 	ldw	r17,4(sp)
     31c:	dc000017 	ldw	r16,0(sp)
     320:	dec00304 	addi	sp,sp,12
     324:	f800283a 	ret

00000328 <main>:
 * 	   the box
 * 	4. Displays the last two bytes of data received from the PS/2 port 
 * 	   on the HEX displays on the DE1 board
********************************************************************************/
int main(void)
{
     328:	defff604 	addi	sp,sp,-40
     32c:	dfc00915 	stw	ra,36(sp)
     330:	df000815 	stw	fp,32(sp)
     334:	ddc00715 	stw	r23,28(sp)
     338:	dd800615 	stw	r22,24(sp)
     33c:	dd400515 	stw	r21,20(sp)
     340:	dd000415 	stw	r20,16(sp)
     344:	dcc00315 	stw	r19,12(sp)
     348:	dc800215 	stw	r18,8(sp)
     34c:	dc400115 	stw	r17,4(sp)
     350:	dc000015 	stw	r16,0(sp)
     354:	023ff0f4 	movhi	r8,65475
     358:	423da604 	addi	r8,r8,-2408
     35c:	da37883a 	add	sp,sp,r8
	alt_up_ps2_dev * PS2_dev;
	alt_up_audio_dev * audio_dev;
	alt_up_char_buffer_dev * char_buffer_dev;

	/* used for audio record/playback */
	int record = 0, play = 0, buffer_index = 0;
     360:	d8000115 	stw	zero,4(sp)
     364:	d8000215 	stw	zero,8(sp)
     368:	d8000315 	stw	zero,12(sp)
	/* used for PS/2 port data */
	unsigned char PS2_data;
	char byte1 = 0, byte2 = 0;

	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE1\0";
     36c:	00800f74 	movhi	r2,61
     370:	10824344 	addi	r2,r2,2317
     374:	d8c00104 	addi	r3,sp,4
     378:	1889883a 	add	r4,r3,r2
     37c:	00c00034 	movhi	r3,0
     380:	18d3cc04 	addi	r3,r3,20272
     384:	18800003 	ldbu	r2,0(r3)
     388:	20800005 	stb	r2,0(r4)
     38c:	18800043 	ldbu	r2,1(r3)
     390:	20800045 	stb	r2,1(r4)
     394:	18800083 	ldbu	r2,2(r3)
     398:	20800085 	stb	r2,2(r4)
     39c:	188000c3 	ldbu	r2,3(r3)
     3a0:	208000c5 	stb	r2,3(r4)
     3a4:	18800103 	ldbu	r2,4(r3)
     3a8:	20800105 	stb	r2,4(r4)
     3ac:	18800143 	ldbu	r2,5(r3)
     3b0:	20800145 	stb	r2,5(r4)
     3b4:	18800183 	ldbu	r2,6(r3)
     3b8:	20800185 	stb	r2,6(r4)
     3bc:	188001c3 	ldbu	r2,7(r3)
     3c0:	208001c5 	stb	r2,7(r4)
     3c4:	18800203 	ldbu	r2,8(r3)
     3c8:	20800205 	stb	r2,8(r4)
     3cc:	18800243 	ldbu	r2,9(r3)
     3d0:	20800245 	stb	r2,9(r4)
     3d4:	18800283 	ldbu	r2,10(r3)
     3d8:	20800285 	stb	r2,10(r4)
     3dc:	188002c3 	ldbu	r2,11(r3)
     3e0:	208002c5 	stb	r2,11(r4)
     3e4:	21000304 	addi	r4,r4,12
     3e8:	000b883a 	mov	r5,zero
     3ec:	01800704 	movi	r6,28
     3f0:	000085c0 	call	85c <memset>
	char text_bottom_row[40] = "Media Computer\0";
     3f4:	00800f74 	movhi	r2,61
     3f8:	10824d44 	addi	r2,r2,2357
     3fc:	d9000104 	addi	r4,sp,4
     400:	20a3883a 	add	r17,r4,r2
     404:	04000404 	movi	r16,16
     408:	8809883a 	mov	r4,r17
     40c:	01400034 	movhi	r5,0
     410:	2953d604 	addi	r5,r5,20312
     414:	800d883a 	mov	r6,r16
     418:	00007bc0 	call	7bc <memcpy>
     41c:	8c09883a 	add	r4,r17,r16
     420:	000b883a 	mov	r5,zero
     424:	01800604 	movi	r6,24
     428:	000085c0 	call	85c <memset>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     42c:	01000034 	movhi	r4,0
     430:	21135f04 	addi	r4,r4,19836
     434:	0001fd00 	call	1fd0 <alt_up_char_buffer_open_dev>
     438:	1023883a 	mov	r17,r2
	if ( char_buffer_dev == NULL)
     43c:	1000041e 	bne	r2,zero,450 <main+0x128>
	{
		alt_printf ("Error: could not open character buffer device\n");
     440:	01000034 	movhi	r4,0
     444:	21136504 	addi	r4,r4,19860
     448:	0000a080 	call	a08 <alt_printf>
     44c:	0000cb06 	br	77c <main+0x454>
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     450:	01000034 	movhi	r4,0
     454:	21137104 	addi	r4,r4,19908
     458:	0000a080 	call	a08 <alt_printf>
	alt_up_char_buffer_string (char_buffer_dev, text_top_row, 35, 29);
     45c:	040008c4 	movi	r16,35
     460:	8809883a 	mov	r4,r17
     464:	01400f74 	movhi	r5,61
     468:	29424344 	addi	r5,r5,2317
     46c:	d8800104 	addi	r2,sp,4
     470:	114b883a 	add	r5,r2,r5
     474:	800d883a 	mov	r6,r16
     478:	01c00744 	movi	r7,29
     47c:	0001ec80 	call	1ec8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_bottom_row, 35, 30);
     480:	8809883a 	mov	r4,r17
     484:	01400f74 	movhi	r5,61
     488:	29424d44 	addi	r5,r5,2357
     48c:	d8c00104 	addi	r3,sp,4
     490:	194b883a 	add	r5,r3,r5
     494:	800d883a 	mov	r6,r16
     498:	01c00784 	movi	r7,30
     49c:	0001ec80 	call	1ec8 <alt_up_char_buffer_string>
	VGA_box (34*4, 28*4, 50*4, 32*4, 0x187F);
     4a0:	00861fc4 	movi	r2,6271
     4a4:	d8800015 	stw	r2,0(sp)
     4a8:	01002204 	movi	r4,136
     4ac:	01401c04 	movi	r5,112
     4b0:	01803204 	movi	r6,200
     4b4:	01c02004 	movi	r7,128
     4b8:	00001a40 	call	1a4 <VGA_box>

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     4bc:	01000034 	movhi	r4,0
     4c0:	21137904 	addi	r4,r4,19940
     4c4:	00019a80 	call	19a8 <alt_up_ps2_open_dev>
     4c8:	102b883a 	mov	r21,r2
	if ( PS2_dev == NULL)
     4cc:	1000041e 	bne	r2,zero,4e0 <main+0x1b8>
	{
		alt_printf ("Error: could not open PS2 device\n");
     4d0:	01000034 	movhi	r4,0
     4d4:	21137d04 	addi	r4,r4,19956
     4d8:	0000a080 	call	a08 <alt_printf>
     4dc:	0000a706 	br	77c <main+0x454>
		return -1;
	}
	else
		alt_printf ("Opened PS2 device\n");
     4e0:	01000034 	movhi	r4,0
     4e4:	21138604 	addi	r4,r4,19992
     4e8:	0000a080 	call	a08 <alt_printf>

	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     4ec:	01000034 	movhi	r4,0
     4f0:	21138b04 	addi	r4,r4,20012
     4f4:	000192c0 	call	192c <alt_up_audio_open_dev>
     4f8:	1029883a 	mov	r20,r2
	if ( audio_dev == NULL)
     4fc:	1000041e 	bne	r2,zero,510 <main+0x1e8>
	{
		alt_printf ("Error: could not open audio device\n");
     500:	01000034 	movhi	r4,0
     504:	21138e04 	addi	r4,r4,20024
     508:	0000a080 	call	a08 <alt_printf>
     50c:	00009b06 	br	77c <main+0x454>
		return -1;
	}
	else
		alt_printf ("Opened audio device\n");
     510:	01000034 	movhi	r4,0
     514:	21139704 	addi	r4,r4,20060
     518:	0000a080 	call	a08 <alt_printf>
	int num_read; int num_written;

	/* read and echo audio data */
	record = 0;
     51c:	d8000115 	stw	zero,4(sp)
	play = 0;
     520:	d8000215 	stw	zero,8(sp)
	// open the pushbutton KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     524:	01000034 	movhi	r4,0
     528:	21139d04 	addi	r4,r4,20084
     52c:	000194c0 	call	194c <alt_up_parallel_port_open_dev>
     530:	1039883a 	mov	fp,r2
	if ( KEY_dev == NULL)
     534:	1000041e 	bne	r2,zero,548 <main+0x220>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     538:	01000034 	movhi	r4,0
     53c:	2113a204 	addi	r4,r4,20104
     540:	0000a080 	call	a08 <alt_printf>
     544:	00008d06 	br	77c <main+0x454>
		return -1;
	}
	else
		alt_printf ("Opened pushbutton KEY device\n");
     548:	01000034 	movhi	r4,0
     54c:	2113ae04 	addi	r4,r4,20152
     550:	0000a080 	call	a08 <alt_printf>

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     554:	01000034 	movhi	r4,0
     558:	2113b604 	addi	r4,r4,20184
     55c:	000194c0 	call	194c <alt_up_parallel_port_open_dev>
     560:	102f883a 	mov	r23,r2
	if (green_LEDs_dev == NULL)
     564:	1000041e 	bne	r2,zero,578 <main+0x250>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     568:	01000034 	movhi	r4,0
     56c:	2113ba04 	addi	r4,r4,20200
     570:	0000a080 	call	a08 <alt_printf>
     574:	00008106 	br	77c <main+0x454>
		return -1;
	}
	else
		alt_printf ("Opened green LEDs device\n");
     578:	01000034 	movhi	r4,0
     57c:	2113c504 	addi	r4,r4,20244
     580:	0000a080 	call	a08 <alt_printf>

	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     584:	a809883a 	mov	r4,r21
     588:	01403fc4 	movi	r5,255
     58c:	0001b540 	call	1b54 <alt_up_ps2_write_data_byte>
     590:	0027883a 	mov	r19,zero
     594:	008007f4 	movhi	r2,31
     598:	10a12304 	addi	r2,r2,-31604
     59c:	d9000104 	addi	r4,sp,4
     5a0:	2087883a 	add	r3,r4,r2
     5a4:	01000f74 	movhi	r4,61
     5a8:	21025904 	addi	r4,r4,2404
     5ac:	26c9883a 	add	r4,r4,sp
     5b0:	20c00015 	stw	r3,0(r4)
     5b4:	00800f74 	movhi	r2,61
     5b8:	10824304 	addi	r2,r2,2316
     5bc:	d8c00104 	addi	r3,sp,4
     5c0:	18ad883a 	add	r22,r3,r2
     5c4:	00000206 	br	5d0 <main+0x2a8>
     5c8:	9825883a 	mov	r18,r19
     5cc:	9027883a 	mov	r19,r18
	while(1)
	{
		check_KEYs ( &record, &play, &buffer_index, KEY_dev, audio_dev );
     5d0:	dd000015 	stw	r20,0(sp)
     5d4:	d9000104 	addi	r4,sp,4
     5d8:	d9400204 	addi	r5,sp,8
     5dc:	d9800304 	addi	r6,sp,12
     5e0:	e00f883a 	mov	r7,fp
     5e4:	00002b00 	call	2b0 <check_KEYs>
		if (record)
     5e8:	d8800117 	ldw	r2,4(sp)
     5ec:	10002626 	beq	r2,zero,688 <main+0x360>
		{
			alt_up_parallel_port_write_data(green_LEDs_dev, 0x1); // set LEDG[0] on
     5f0:	b8800a17 	ldw	r2,40(r23)
     5f4:	00c00044 	movi	r3,1
     5f8:	10c00035 	stwio	r3,0(r2)

			// record data until the buffer is full
			if (buffer_index < BUF_SIZE)
     5fc:	d8c00317 	ldw	r3,12(sp)
     600:	00800234 	movhi	r2,8
     604:	10a847c4 	addi	r2,r2,-24289
     608:	10c04616 	blt	r2,r3,724 <main+0x3fc>
			{
				num_read = alt_up_audio_record_r (audio_dev, &(r_buf[buffer_index]), 
     60c:	18cb883a 	add	r5,r3,r3
     610:	294b883a 	add	r5,r5,r5
     614:	a009883a 	mov	r4,r20
     618:	00800f74 	movhi	r2,61
     61c:	10825904 	addi	r2,r2,2404
     620:	16c5883a 	add	r2,r2,sp
     624:	10800017 	ldw	r2,0(r2)
     628:	114b883a 	add	r5,r2,r5
     62c:	00800234 	movhi	r2,8
     630:	10a84804 	addi	r2,r2,-24288
     634:	10cdc83a 	sub	r6,r2,r3
     638:	00018240 	call	1824 <alt_up_audio_record_r>
     63c:	1021883a 	mov	r16,r2
					BUF_SIZE - buffer_index);
				/* assume we can read same # words from the left and right */
				(void) alt_up_audio_record_l (audio_dev, &(l_buf[buffer_index]), 
     640:	d9400317 	ldw	r5,12(sp)
     644:	294b883a 	add	r5,r5,r5
     648:	294b883a 	add	r5,r5,r5
     64c:	a009883a 	mov	r4,r20
     650:	d8c00404 	addi	r3,sp,16
     654:	194b883a 	add	r5,r3,r5
     658:	100d883a 	mov	r6,r2
     65c:	00017c00 	call	17c0 <alt_up_audio_record_l>
					num_read);
				buffer_index += num_read;
     660:	d8800317 	ldw	r2,12(sp)
     664:	80a1883a 	add	r16,r16,r2
     668:	dc000315 	stw	r16,12(sp)

				if (buffer_index == BUF_SIZE)
     66c:	01000234 	movhi	r4,8
     670:	21284804 	addi	r4,r4,-24288
     674:	81002b1e 	bne	r16,r4,724 <main+0x3fc>
				{
					// done recording
					record = 0;
     678:	d8000115 	stw	zero,4(sp)
					alt_up_parallel_port_write_data(green_LEDs_dev, 0x0); // set LEDG off
     67c:	b8800a17 	ldw	r2,40(r23)
     680:	10000035 	stwio	zero,0(r2)
     684:	00002706 	br	724 <main+0x3fc>
				}
			}
		}
		else if (play)
     688:	d8800217 	ldw	r2,8(sp)
     68c:	10002526 	beq	r2,zero,724 <main+0x3fc>
		{
			alt_up_parallel_port_write_data(green_LEDs_dev, 0x2); // set LEDG[1] on
     690:	b8800a17 	ldw	r2,40(r23)
     694:	00c00084 	movi	r3,2
     698:	10c00035 	stwio	r3,0(r2)

			// output data until the buffer is empty 
			if (buffer_index < BUF_SIZE)
     69c:	d8c00317 	ldw	r3,12(sp)
     6a0:	00800234 	movhi	r2,8
     6a4:	10a847c4 	addi	r2,r2,-24289
     6a8:	10c01e16 	blt	r2,r3,724 <main+0x3fc>
			{
				num_written = alt_up_audio_play_r (audio_dev, &(r_buf[buffer_index]), 
     6ac:	18cb883a 	add	r5,r3,r3
     6b0:	294b883a 	add	r5,r5,r5
     6b4:	a009883a 	mov	r4,r20
     6b8:	00800f74 	movhi	r2,61
     6bc:	10825904 	addi	r2,r2,2404
     6c0:	16c5883a 	add	r2,r2,sp
     6c4:	10800017 	ldw	r2,0(r2)
     6c8:	114b883a 	add	r5,r2,r5
     6cc:	00800234 	movhi	r2,8
     6d0:	10a84804 	addi	r2,r2,-24288
     6d4:	10cdc83a 	sub	r6,r2,r3
     6d8:	000173c0 	call	173c <alt_up_audio_play_r>
     6dc:	1021883a 	mov	r16,r2
				 	BUF_SIZE - buffer_index);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (audio_dev, &(l_buf[buffer_index]), 
     6e0:	d9400317 	ldw	r5,12(sp)
     6e4:	294b883a 	add	r5,r5,r5
     6e8:	294b883a 	add	r5,r5,r5
     6ec:	a009883a 	mov	r4,r20
     6f0:	d8c00404 	addi	r3,sp,16
     6f4:	194b883a 	add	r5,r3,r5
     6f8:	100d883a 	mov	r6,r2
     6fc:	00016d80 	call	16d8 <alt_up_audio_play_l>
					num_written);
				buffer_index += num_written;
     700:	d8800317 	ldw	r2,12(sp)
     704:	80a1883a 	add	r16,r16,r2
     708:	dc000315 	stw	r16,12(sp)

				if (buffer_index == BUF_SIZE)
     70c:	01000234 	movhi	r4,8
     710:	21284804 	addi	r4,r4,-24288
     714:	8100031e 	bne	r16,r4,724 <main+0x3fc>
				{
					// done playback
					play = 0;
     718:	d8000215 	stw	zero,8(sp)
					alt_up_parallel_port_write_data(green_LEDs_dev, 0x0); // set LEDG off
     71c:	b8800a17 	ldw	r2,40(r23)
     720:	10000035 	stwio	zero,0(r2)
				}
			}
		}
		/* check for PS/2 data--display on HEX displays */
		if (alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
     724:	a809883a 	mov	r4,r21
     728:	b00b883a 	mov	r5,r22
     72c:	00019f80 	call	19f8 <alt_up_ps2_read_data_byte>
     730:	103fa51e 	bne	r2,zero,5c8 <main+0x2a0>
		{
			/* shift the next data byte into the display */
			byte1 = byte2;
			byte2 = PS2_data;
     734:	b4400003 	ldbu	r17,0(r22)
     738:	8825883a 	mov	r18,r17
			HEX_PS2 (byte1, byte2);
     73c:	9c003fcc 	andi	r16,r19,255
     740:	8400201c 	xori	r16,r16,128
     744:	843fe004 	addi	r16,r16,-128
     748:	8009883a 	mov	r4,r16
     74c:	89403fcc 	andi	r5,r17,255
     750:	2940201c 	xori	r5,r5,128
     754:	297fe004 	addi	r5,r5,-128
     758:	00001f00 	call	1f0 <HEX_PS2>

			if ( (byte1 == (char) 0xAA) && (byte2 == (char) 0x00) )
     75c:	00bfea84 	movi	r2,-86
     760:	80bf9a1e 	bne	r16,r2,5cc <main+0x2a4>
     764:	88803fcc 	andi	r2,r17,255
     768:	103f981e 	bne	r2,zero,5cc <main+0x2a4>
				// mouse inserted; initialize sending of data
				(void) alt_up_ps2_write_data_byte (PS2_dev, 0xF4);
     76c:	a809883a 	mov	r4,r21
     770:	01403d04 	movi	r5,244
     774:	0001b540 	call	1b54 <alt_up_ps2_write_data_byte>
     778:	003f9406 	br	5cc <main+0x2a4>
		}
	}
}
     77c:	00bfffc4 	movi	r2,-1
     780:	02000f74 	movhi	r8,61
     784:	42025a04 	addi	r8,r8,2408
     788:	da37883a 	add	sp,sp,r8
     78c:	dfc00917 	ldw	ra,36(sp)
     790:	df000817 	ldw	fp,32(sp)
     794:	ddc00717 	ldw	r23,28(sp)
     798:	dd800617 	ldw	r22,24(sp)
     79c:	dd400517 	ldw	r21,20(sp)
     7a0:	dd000417 	ldw	r20,16(sp)
     7a4:	dcc00317 	ldw	r19,12(sp)
     7a8:	dc800217 	ldw	r18,8(sp)
     7ac:	dc400117 	ldw	r17,4(sp)
     7b0:	dc000017 	ldw	r16,0(sp)
     7b4:	dec00a04 	addi	sp,sp,40
     7b8:	f800283a 	ret

000007bc <memcpy>:
     7bc:	01c003c4 	movi	r7,15
     7c0:	2007883a 	mov	r3,r4
     7c4:	3980032e 	bgeu	r7,r6,7d4 <memcpy+0x18>
     7c8:	2904b03a 	or	r2,r5,r4
     7cc:	108000cc 	andi	r2,r2,3
     7d0:	10000926 	beq	r2,zero,7f8 <memcpy+0x3c>
     7d4:	30000626 	beq	r6,zero,7f0 <memcpy+0x34>
     7d8:	30cd883a 	add	r6,r6,r3
     7dc:	28800003 	ldbu	r2,0(r5)
     7e0:	29400044 	addi	r5,r5,1
     7e4:	18800005 	stb	r2,0(r3)
     7e8:	18c00044 	addi	r3,r3,1
     7ec:	30fffb1e 	bne	r6,r3,7dc <memcpy+0x20>
     7f0:	2005883a 	mov	r2,r4
     7f4:	f800283a 	ret
     7f8:	3811883a 	mov	r8,r7
     7fc:	200f883a 	mov	r7,r4
     800:	28c00017 	ldw	r3,0(r5)
     804:	31bffc04 	addi	r6,r6,-16
     808:	38c00015 	stw	r3,0(r7)
     80c:	28800117 	ldw	r2,4(r5)
     810:	38800115 	stw	r2,4(r7)
     814:	28c00217 	ldw	r3,8(r5)
     818:	38c00215 	stw	r3,8(r7)
     81c:	28800317 	ldw	r2,12(r5)
     820:	29400404 	addi	r5,r5,16
     824:	38800315 	stw	r2,12(r7)
     828:	39c00404 	addi	r7,r7,16
     82c:	41bff436 	bltu	r8,r6,800 <memcpy+0x44>
     830:	008000c4 	movi	r2,3
     834:	1180072e 	bgeu	r2,r6,854 <memcpy+0x98>
     838:	1007883a 	mov	r3,r2
     83c:	28800017 	ldw	r2,0(r5)
     840:	31bfff04 	addi	r6,r6,-4
     844:	29400104 	addi	r5,r5,4
     848:	38800015 	stw	r2,0(r7)
     84c:	39c00104 	addi	r7,r7,4
     850:	19bffa36 	bltu	r3,r6,83c <memcpy+0x80>
     854:	3807883a 	mov	r3,r7
     858:	003fde06 	br	7d4 <memcpy+0x18>

0000085c <memset>:
     85c:	008000c4 	movi	r2,3
     860:	29403fcc 	andi	r5,r5,255
     864:	2007883a 	mov	r3,r4
     868:	1180022e 	bgeu	r2,r6,874 <memset+0x18>
     86c:	2084703a 	and	r2,r4,r2
     870:	10000826 	beq	r2,zero,894 <memset+0x38>
     874:	30000526 	beq	r6,zero,88c <memset+0x30>
     878:	2805883a 	mov	r2,r5
     87c:	30cd883a 	add	r6,r6,r3
     880:	18800005 	stb	r2,0(r3)
     884:	18c00044 	addi	r3,r3,1
     888:	19bffd1e 	bne	r3,r6,880 <memset+0x24>
     88c:	2005883a 	mov	r2,r4
     890:	f800283a 	ret
     894:	2804923a 	slli	r2,r5,8
     898:	020003c4 	movi	r8,15
     89c:	200f883a 	mov	r7,r4
     8a0:	2884b03a 	or	r2,r5,r2
     8a4:	1006943a 	slli	r3,r2,16
     8a8:	10c6b03a 	or	r3,r2,r3
     8ac:	41800a2e 	bgeu	r8,r6,8d8 <memset+0x7c>
     8b0:	4005883a 	mov	r2,r8
     8b4:	31bffc04 	addi	r6,r6,-16
     8b8:	38c00015 	stw	r3,0(r7)
     8bc:	38c00115 	stw	r3,4(r7)
     8c0:	38c00215 	stw	r3,8(r7)
     8c4:	38c00315 	stw	r3,12(r7)
     8c8:	39c00404 	addi	r7,r7,16
     8cc:	11bff936 	bltu	r2,r6,8b4 <memset+0x58>
     8d0:	008000c4 	movi	r2,3
     8d4:	1180052e 	bgeu	r2,r6,8ec <memset+0x90>
     8d8:	31bfff04 	addi	r6,r6,-4
     8dc:	008000c4 	movi	r2,3
     8e0:	38c00015 	stw	r3,0(r7)
     8e4:	39c00104 	addi	r7,r7,4
     8e8:	11bffb36 	bltu	r2,r6,8d8 <memset+0x7c>
     8ec:	3807883a 	mov	r3,r7
     8f0:	003fe006 	br	874 <memset+0x18>

000008f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     8f4:	deffff04 	addi	sp,sp,-4
     8f8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     8fc:	01000034 	movhi	r4,0
     900:	211b5604 	addi	r4,r4,27992
     904:	00c00034 	movhi	r3,0
     908:	18d41f04 	addi	r3,r3,20604

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     90c:	20c00926 	beq	r4,r3,934 <alt_load+0x40>
     910:	01800034 	movhi	r6,0
     914:	319b5604 	addi	r6,r6,27992
  {
    while( to != end )
     918:	19800626 	beq	r3,r6,934 <alt_load+0x40>
     91c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     920:	20800017 	ldw	r2,0(r4)
     924:	18800015 	stw	r2,0(r3)
     928:	1947883a 	add	r3,r3,r5
     92c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     930:	30fffb1e 	bne	r6,r3,920 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     934:	01000034 	movhi	r4,0
     938:	21000804 	addi	r4,r4,32
     93c:	00c00034 	movhi	r3,0
     940:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     944:	20c00926 	beq	r4,r3,96c <alt_load+0x78>
     948:	01800034 	movhi	r6,0
     94c:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     950:	19800626 	beq	r3,r6,96c <alt_load+0x78>
     954:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     958:	20800017 	ldw	r2,0(r4)
     95c:	18800015 	stw	r2,0(r3)
     960:	1947883a 	add	r3,r3,r5
     964:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     968:	30fffb1e 	bne	r6,r3,958 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     96c:	01000034 	movhi	r4,0
     970:	21135f04 	addi	r4,r4,19836
     974:	00c00034 	movhi	r3,0
     978:	18d35f04 	addi	r3,r3,19836

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     97c:	20c00926 	beq	r4,r3,9a4 <alt_load+0xb0>
     980:	01800034 	movhi	r6,0
     984:	31941f04 	addi	r6,r6,20604
  {
    while( to != end )
     988:	19800626 	beq	r3,r6,9a4 <alt_load+0xb0>
     98c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     990:	20800017 	ldw	r2,0(r4)
     994:	18800015 	stw	r2,0(r3)
     998:	1947883a 	add	r3,r3,r5
     99c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     9a0:	30fffb1e 	bne	r6,r3,990 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     9a4:	00021b00 	call	21b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
     9a8:	000229c0 	call	229c <alt_icache_flush_all>
}
     9ac:	dfc00017 	ldw	ra,0(sp)
     9b0:	dec00104 	addi	sp,sp,4
     9b4:	f800283a 	ret

000009b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     9b8:	defffe04 	addi	sp,sp,-8
     9bc:	dfc00115 	stw	ra,4(sp)
     9c0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     9c4:	0009883a 	mov	r4,zero
     9c8:	0000c0c0 	call	c0c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     9cc:	0000c2c0 	call	c2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     9d0:	01800034 	movhi	r6,0
     9d4:	3193e404 	addi	r6,r6,20368
     9d8:	3009883a 	mov	r4,r6
     9dc:	300b883a 	mov	r5,r6
     9e0:	00023200 	call	2320 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     9e4:	d1274517 	ldw	r4,-25324(gp)
     9e8:	d1674617 	ldw	r5,-25320(gp)
     9ec:	d1a74717 	ldw	r6,-25316(gp)
     9f0:	00003280 	call	328 <main>
     9f4:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     9f8:	01000044 	movi	r4,1
     9fc:	00020d40 	call	20d4 <close>
  exit (result);
     a00:	8009883a 	mov	r4,r16
     a04:	00028600 	call	2860 <exit>

00000a08 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     a08:	defff804 	addi	sp,sp,-32
     a0c:	dfc00415 	stw	ra,16(sp)
     a10:	dc800315 	stw	r18,12(sp)
     a14:	dc400215 	stw	r17,8(sp)
     a18:	dc000115 	stw	r16,4(sp)
     a1c:	d9400515 	stw	r5,20(sp)
     a20:	d9800615 	stw	r6,24(sp)
     a24:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     a28:	d8800504 	addi	r2,sp,20
     a2c:	d8800015 	stw	r2,0(sp)
     a30:	2023883a 	mov	r17,r4
     a34:	00005d06 	br	bac <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     a38:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     a3c:	21003fcc 	andi	r4,r4,255
     a40:	2100201c 	xori	r4,r4,128
     a44:	213fe004 	addi	r4,r4,-128
     a48:	00800944 	movi	r2,37
     a4c:	20800226 	beq	r4,r2,a58 <alt_printf+0x50>
        {
            alt_putchar(c);
     a50:	0000be40 	call	be4 <alt_putchar>
     a54:	00005506 	br	bac <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     a58:	89400003 	ldbu	r5,0(r17)
     a5c:	8c400044 	addi	r17,r17,1
     a60:	29003fcc 	andi	r4,r5,255
     a64:	2100201c 	xori	r4,r4,128
     a68:	213fe004 	addi	r4,r4,-128
     a6c:	20005726 	beq	r4,zero,bcc <alt_printf+0x1c4>
            {
                if (c == '%')
     a70:	00800944 	movi	r2,37
     a74:	2080021e 	bne	r4,r2,a80 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     a78:	0000be40 	call	be4 <alt_putchar>
     a7c:	00004b06 	br	bac <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     a80:	28c03fcc 	andi	r3,r5,255
     a84:	18c0201c 	xori	r3,r3,128
     a88:	18ffe004 	addi	r3,r3,-128
     a8c:	008018c4 	movi	r2,99
     a90:	1880061e 	bne	r3,r2,aac <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     a94:	d8c00017 	ldw	r3,0(sp)
     a98:	18800104 	addi	r2,r3,4
     a9c:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     aa0:	19000017 	ldw	r4,0(r3)
     aa4:	0000be40 	call	be4 <alt_putchar>
     aa8:	00004006 	br	bac <alt_printf+0x1a4>
                }
                else if (c == 'x')
     aac:	28c03fcc 	andi	r3,r5,255
     ab0:	18c0201c 	xori	r3,r3,128
     ab4:	18ffe004 	addi	r3,r3,-128
     ab8:	00801e04 	movi	r2,120
     abc:	1880231e 	bne	r3,r2,b4c <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     ac0:	d8c00017 	ldw	r3,0(sp)
     ac4:	18800104 	addi	r2,r3,4
     ac8:	d8800015 	stw	r2,0(sp)
     acc:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     ad0:	90000326 	beq	r18,zero,ae0 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     ad4:	90bc002c 	andhi	r2,r18,61440
     ad8:	10000426 	beq	r2,zero,aec <alt_printf+0xe4>
     adc:	00003906 	br	bc4 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     ae0:	01000c04 	movi	r4,48
     ae4:	0000be40 	call	be4 <alt_putchar>
     ae8:	00003006 	br	bac <alt_printf+0x1a4>
                        continue;
     aec:	04000704 	movi	r16,28
     af0:	013fff04 	movi	r4,-4
     af4:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     af8:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     afc:	1c04983a 	sll	r2,r3,r16
     b00:	9084703a 	and	r2,r18,r2
     b04:	103ffc26 	beq	r2,zero,af8 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     b08:	80002816 	blt	r16,zero,bac <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     b0c:	008003c4 	movi	r2,15
     b10:	1404983a 	sll	r2,r2,r16
     b14:	9084703a 	and	r2,r18,r2
     b18:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     b1c:	00800244 	movi	r2,9
     b20:	10c00236 	bltu	r2,r3,b2c <alt_printf+0x124>
                            c = '0' + digit;
     b24:	19000c04 	addi	r4,r3,48
     b28:	00000106 	br	b30 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     b2c:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     b30:	21003fcc 	andi	r4,r4,255
     b34:	2100201c 	xori	r4,r4,128
     b38:	213fe004 	addi	r4,r4,-128
     b3c:	0000be40 	call	be4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     b40:	843fff04 	addi	r16,r16,-4
     b44:	80001916 	blt	r16,zero,bac <alt_printf+0x1a4>
     b48:	003ff006 	br	b0c <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     b4c:	28c03fcc 	andi	r3,r5,255
     b50:	18c0201c 	xori	r3,r3,128
     b54:	18ffe004 	addi	r3,r3,-128
     b58:	00801cc4 	movi	r2,115
     b5c:	1880131e 	bne	r3,r2,bac <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     b60:	d8800017 	ldw	r2,0(sp)
     b64:	10c00104 	addi	r3,r2,4
     b68:	d8c00015 	stw	r3,0(sp)
     b6c:	14000017 	ldw	r16,0(r2)

                    while(*s)
     b70:	81000003 	ldbu	r4,0(r16)
     b74:	20803fcc 	andi	r2,r4,255
     b78:	1080201c 	xori	r2,r2,128
     b7c:	10bfe004 	addi	r2,r2,-128
     b80:	10000a26 	beq	r2,zero,bac <alt_printf+0x1a4>
                      alt_putchar(*s++);
     b84:	84000044 	addi	r16,r16,1
     b88:	21003fcc 	andi	r4,r4,255
     b8c:	2100201c 	xori	r4,r4,128
     b90:	213fe004 	addi	r4,r4,-128
     b94:	0000be40 	call	be4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     b98:	81000003 	ldbu	r4,0(r16)
     b9c:	20803fcc 	andi	r2,r4,255
     ba0:	1080201c 	xori	r2,r2,128
     ba4:	10bfe004 	addi	r2,r2,-128
     ba8:	103ff61e 	bne	r2,zero,b84 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     bac:	89000003 	ldbu	r4,0(r17)
     bb0:	20803fcc 	andi	r2,r4,255
     bb4:	1080201c 	xori	r2,r2,128
     bb8:	10bfe004 	addi	r2,r2,-128
     bbc:	103f9e1e 	bne	r2,zero,a38 <alt_printf+0x30>
     bc0:	00000206 	br	bcc <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     bc4:	04000704 	movi	r16,28
     bc8:	003fd006 	br	b0c <alt_printf+0x104>
     bcc:	dfc00417 	ldw	ra,16(sp)
     bd0:	dc800317 	ldw	r18,12(sp)
     bd4:	dc400217 	ldw	r17,8(sp)
     bd8:	dc000117 	ldw	r16,4(sp)
     bdc:	dec00804 	addi	sp,sp,32
     be0:	f800283a 	ret

00000be4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     be4:	deffff04 	addi	sp,sp,-4
     be8:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     bec:	00800034 	movhi	r2,0
     bf0:	109b5104 	addi	r2,r2,27972
     bf4:	10800017 	ldw	r2,0(r2)
     bf8:	11400217 	ldw	r5,8(r2)
     bfc:	000290c0 	call	290c <putc>
#endif
}
     c00:	dfc00017 	ldw	ra,0(sp)
     c04:	dec00104 	addi	sp,sp,4
     c08:	f800283a 	ret

00000c0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     c0c:	deffff04 	addi	sp,sp,-4
     c10:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     c14:	00026f40 	call	26f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     c18:	00800044 	movi	r2,1
     c1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     c20:	dfc00017 	ldw	ra,0(sp)
     c24:	dec00104 	addi	sp,sp,4
     c28:	f800283a 	ret

00000c2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     c2c:	defffd04 	addi	sp,sp,-12
     c30:	dfc00215 	stw	ra,8(sp)
     c34:	dc400115 	stw	r17,4(sp)
     c38:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     c3c:	04000204 	movi	r16,8
     c40:	01040034 	movhi	r4,4096
     c44:	21080004 	addi	r4,r4,8192
     c48:	000b883a 	mov	r5,zero
     c4c:	000d883a 	mov	r6,zero
     c50:	800f883a 	mov	r7,r16
     c54:	00014d40 	call	14d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     c58:	04400034 	movhi	r17,0
     c5c:	8c542904 	addi	r17,r17,20644
     c60:	8809883a 	mov	r4,r17
     c64:	000b883a 	mov	r5,zero
     c68:	800d883a 	mov	r6,r16
     c6c:	0000fd00 	call	fd0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     c70:	04000034 	movhi	r16,0
     c74:	841b4a04 	addi	r16,r16,27944
     c78:	893ff604 	addi	r4,r17,-40
     c7c:	800b883a 	mov	r5,r16
     c80:	00021bc0 	call	21bc <alt_dev_llist_insert>
     c84:	01000034 	movhi	r4,0
     c88:	21183704 	addi	r4,r4,24796
     c8c:	800b883a 	mov	r5,r16
     c90:	00021bc0 	call	21bc <alt_dev_llist_insert>
     c94:	01000034 	movhi	r4,0
     c98:	21184304 	addi	r4,r4,24844
     c9c:	800b883a 	mov	r5,r16
     ca0:	00021bc0 	call	21bc <alt_dev_llist_insert>
     ca4:	01000034 	movhi	r4,0
     ca8:	21184f04 	addi	r4,r4,24892
     cac:	800b883a 	mov	r5,r16
     cb0:	00021bc0 	call	21bc <alt_dev_llist_insert>
     cb4:	01000034 	movhi	r4,0
     cb8:	21185a04 	addi	r4,r4,24936
     cbc:	800b883a 	mov	r5,r16
     cc0:	00021bc0 	call	21bc <alt_dev_llist_insert>
     cc4:	01000034 	movhi	r4,0
     cc8:	21186504 	addi	r4,r4,24980
     ccc:	800b883a 	mov	r5,r16
     cd0:	00021bc0 	call	21bc <alt_dev_llist_insert>
     cd4:	01000034 	movhi	r4,0
     cd8:	21187004 	addi	r4,r4,25024
     cdc:	800b883a 	mov	r5,r16
     ce0:	00021bc0 	call	21bc <alt_dev_llist_insert>
     ce4:	01000034 	movhi	r4,0
     ce8:	21187b04 	addi	r4,r4,25068
     cec:	800b883a 	mov	r5,r16
     cf0:	00021bc0 	call	21bc <alt_dev_llist_insert>
     cf4:	01000034 	movhi	r4,0
     cf8:	21188604 	addi	r4,r4,25112
     cfc:	800b883a 	mov	r5,r16
     d00:	00021bc0 	call	21bc <alt_dev_llist_insert>
     d04:	01000034 	movhi	r4,0
     d08:	21189104 	addi	r4,r4,25156
     d0c:	800b883a 	mov	r5,r16
     d10:	00021bc0 	call	21bc <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     d14:	04400034 	movhi	r17,0
     d18:	8c589c04 	addi	r17,r17,25200
     d1c:	8809883a 	mov	r4,r17
     d20:	0001c380 	call	1c38 <alt_up_ps2_init>
     d24:	8809883a 	mov	r4,r17
     d28:	800b883a 	mov	r5,r16
     d2c:	00021bc0 	call	21bc <alt_dev_llist_insert>
     d30:	01000034 	movhi	r4,0
     d34:	2118aa04 	addi	r4,r4,25256
     d38:	800b883a 	mov	r5,r16
     d3c:	00021bc0 	call	21bc <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     d40:	01000034 	movhi	r4,0
     d44:	2118b504 	addi	r4,r4,25300
     d48:	20800a17 	ldw	r2,40(r4)
     d4c:	10800104 	addi	r2,r2,4
     d50:	10c0000b 	ldhu	r3,0(r2)
     d54:	20c00c15 	stw	r3,48(r4)
     d58:	10800017 	ldw	r2,0(r2)
     d5c:	100ad43a 	srli	r5,r2,16
     d60:	21400d15 	stw	r5,52(r4)
     d64:	00801004 	movi	r2,64
     d68:	10c00436 	bltu	r2,r3,d7c <alt_sys_init+0x150>
     d6c:	00800fc4 	movi	r2,63
     d70:	20800f15 	stw	r2,60(r4)
     d74:	00800184 	movi	r2,6
     d78:	20801015 	stw	r2,64(r4)
     d7c:	00800804 	movi	r2,32
     d80:	11400436 	bltu	r2,r5,d94 <alt_sys_init+0x168>
     d84:	00c007c4 	movi	r3,31
     d88:	00800034 	movhi	r2,0
     d8c:	1098b504 	addi	r2,r2,25300
     d90:	10c01115 	stw	r3,68(r2)
     d94:	04000034 	movhi	r16,0
     d98:	8418b504 	addi	r16,r16,25300
     d9c:	8009883a 	mov	r4,r16
     da0:	0001ff00 	call	1ff0 <alt_up_char_buffer_init>
     da4:	8009883a 	mov	r4,r16
     da8:	01400034 	movhi	r5,0
     dac:	295b4a04 	addi	r5,r5,27944
     db0:	00021bc0 	call	21bc <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     db4:	01800034 	movhi	r6,0
     db8:	3198c704 	addi	r6,r6,25372
     dbc:	30c00a17 	ldw	r3,40(r6)
     dc0:	18800017 	ldw	r2,0(r3)
     dc4:	30800b15 	stw	r2,44(r6)
     dc8:	18800117 	ldw	r2,4(r3)
     dcc:	30800c15 	stw	r2,48(r6)
     dd0:	19000204 	addi	r4,r3,8
     dd4:	2080000b 	ldhu	r2,0(r4)
     dd8:	30800f15 	stw	r2,60(r6)
     ddc:	20800017 	ldw	r2,0(r4)
     de0:	1004d43a 	srli	r2,r2,16
     de4:	30801015 	stw	r2,64(r6)
     de8:	18c00304 	addi	r3,r3,12
     dec:	18800017 	ldw	r2,0(r3)
     df0:	1005d07a 	srai	r2,r2,1
     df4:	01000044 	movi	r4,1
     df8:	1104703a 	and	r2,r2,r4
     dfc:	30800d15 	stw	r2,52(r6)
     e00:	18800017 	ldw	r2,0(r3)
     e04:	1005d13a 	srai	r2,r2,4
     e08:	114003cc 	andi	r5,r2,15
     e0c:	31400e15 	stw	r5,56(r6)
     e10:	1a000017 	ldw	r8,0(r3)
     e14:	400ed43a 	srli	r7,r8,16
     e18:	2900021e 	bne	r5,r4,e24 <alt_sys_init+0x1f8>
     e1c:	30001115 	stw	zero,68(r6)
     e20:	00000b06 	br	e50 <alt_sys_init+0x224>
     e24:	00800084 	movi	r2,2
     e28:	2880051e 	bne	r5,r2,e40 <alt_sys_init+0x214>
     e2c:	00c00044 	movi	r3,1
     e30:	00800034 	movhi	r2,0
     e34:	1098c704 	addi	r2,r2,25372
     e38:	10c01115 	stw	r3,68(r2)
     e3c:	00000406 	br	e50 <alt_sys_init+0x224>
     e40:	00c00084 	movi	r3,2
     e44:	00800034 	movhi	r2,0
     e48:	1098c704 	addi	r2,r2,25372
     e4c:	10c01115 	stw	r3,68(r2)
     e50:	01000034 	movhi	r4,0
     e54:	2118c704 	addi	r4,r4,25372
     e58:	38c03fcc 	andi	r3,r7,255
     e5c:	01800804 	movi	r6,32
     e60:	30c5c83a 	sub	r2,r6,r3
     e64:	017fffc4 	movi	r5,-1
     e68:	2884d83a 	srl	r2,r5,r2
     e6c:	20801215 	stw	r2,72(r4)
     e70:	20801117 	ldw	r2,68(r4)
     e74:	1887883a 	add	r3,r3,r2
     e78:	20c01315 	stw	r3,76(r4)
     e7c:	4004d63a 	srli	r2,r8,24
     e80:	308dc83a 	sub	r6,r6,r2
     e84:	298ad83a 	srl	r5,r5,r6
     e88:	21401415 	stw	r5,80(r4)
     e8c:	01400034 	movhi	r5,0
     e90:	295b4a04 	addi	r5,r5,27944
     e94:	00021bc0 	call	21bc <alt_dev_llist_insert>
}
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	dc400117 	ldw	r17,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     eac:	deffff04 	addi	sp,sp,-4
     eb0:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     eb4:	21000017 	ldw	r4,0(r4)
     eb8:	21000a04 	addi	r4,r4,40
     ebc:	000117c0 	call	117c <altera_avalon_jtag_uart_ioctl>
}
     ec0:	dfc00017 	ldw	ra,0(sp)
     ec4:	dec00104 	addi	sp,sp,4
     ec8:	f800283a 	ret

00000ecc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     ecc:	deffff04 	addi	sp,sp,-4
     ed0:	dfc00015 	stw	ra,0(sp)
     ed4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     ed8:	21000017 	ldw	r4,0(r4)
     edc:	21000a04 	addi	r4,r4,40
     ee0:	11400217 	ldw	r5,8(r2)
     ee4:	0000f440 	call	f44 <altera_avalon_jtag_uart_close>
}
     ee8:	dfc00017 	ldw	ra,0(sp)
     eec:	dec00104 	addi	sp,sp,4
     ef0:	f800283a 	ret

00000ef4 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     ef4:	deffff04 	addi	sp,sp,-4
     ef8:	dfc00015 	stw	ra,0(sp)
     efc:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     f00:	21000017 	ldw	r4,0(r4)
     f04:	21000a04 	addi	r4,r4,40
     f08:	11c00217 	ldw	r7,8(r2)
     f0c:	00013580 	call	1358 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     f10:	dfc00017 	ldw	ra,0(sp)
     f14:	dec00104 	addi	sp,sp,4
     f18:	f800283a 	ret

00000f1c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     f1c:	deffff04 	addi	sp,sp,-4
     f20:	dfc00015 	stw	ra,0(sp)
     f24:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     f28:	21000017 	ldw	r4,0(r4)
     f2c:	21000a04 	addi	r4,r4,40
     f30:	11c00217 	ldw	r7,8(r2)
     f34:	00011f00 	call	11f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     f38:	dfc00017 	ldw	ra,0(sp)
     f3c:	dec00104 	addi	sp,sp,4
     f40:	f800283a 	ret

00000f44 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     f44:	21800c17 	ldw	r6,48(r4)
     f48:	2950000c 	andi	r5,r5,16384
     f4c:	280b003a 	cmpeq	r5,r5,zero
     f50:	00000306 	br	f60 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     f54:	2800021e 	bne	r5,zero,f60 <altera_avalon_jtag_uart_close+0x1c>
     f58:	00bffd44 	movi	r2,-11
     f5c:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     f60:	20800d17 	ldw	r2,52(r4)
     f64:	11800326 	beq	r2,r6,f74 <altera_avalon_jtag_uart_close+0x30>
     f68:	20c00917 	ldw	r3,36(r4)
     f6c:	20800117 	ldw	r2,4(r4)
     f70:	18bff836 	bltu	r3,r2,f54 <altera_avalon_jtag_uart_close+0x10>
     f74:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     f78:	f800283a 	ret

00000f7c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     f7c:	20800017 	ldw	r2,0(r4)
     f80:	10c00104 	addi	r3,r2,4
     f84:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     f88:	01410004 	movi	r5,1024
     f8c:	1144703a 	and	r2,r2,r5
     f90:	10000526 	beq	r2,zero,fa8 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     f94:	20800817 	ldw	r2,32(r4)
     f98:	1144b03a 	or	r2,r2,r5
     f9c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     fa0:	20000915 	stw	zero,36(r4)
     fa4:	00000606 	br	fc0 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     fa8:	20c00917 	ldw	r3,36(r4)
     fac:	00a00034 	movhi	r2,32768
     fb0:	10bfff04 	addi	r2,r2,-4
     fb4:	10c00236 	bltu	r2,r3,fc0 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     fb8:	18800044 	addi	r2,r3,1
     fbc:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     fc0:	00800074 	movhi	r2,1
     fc4:	10a29104 	addi	r2,r2,-30140
     fc8:	10800017 	ldw	r2,0(r2)
     fcc:	f800283a 	ret

00000fd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     fd0:	defffe04 	addi	sp,sp,-8
     fd4:	dfc00115 	stw	ra,4(sp)
     fd8:	dc000015 	stw	r16,0(sp)
     fdc:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     fe0:	00c00044 	movi	r3,1
     fe4:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     fe8:	20800017 	ldw	r2,0(r4)
     fec:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     ff0:	3009883a 	mov	r4,r6
     ff4:	800b883a 	mov	r5,r16
     ff8:	01800034 	movhi	r6,0
     ffc:	31841204 	addi	r6,r6,4168
    1000:	00023b80 	call	23b8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1004:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1008:	81000204 	addi	r4,r16,8
    100c:	00800074 	movhi	r2,1
    1010:	10a29104 	addi	r2,r2,-30140
    1014:	11400017 	ldw	r5,0(r2)
    1018:	01800034 	movhi	r6,0
    101c:	3183df04 	addi	r6,r6,3964
    1020:	800f883a 	mov	r7,r16
    1024:	00020400 	call	2040 <alt_alarm_start>
    1028:	1000030e 	bge	r2,zero,1038 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    102c:	00a00034 	movhi	r2,32768
    1030:	10bfffc4 	addi	r2,r2,-1
    1034:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1038:	dfc00117 	ldw	ra,4(sp)
    103c:	dc000017 	ldw	r16,0(sp)
    1040:	dec00204 	addi	sp,sp,8
    1044:	f800283a 	ret

00001048 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    1048:	22000017 	ldw	r8,0(r4)
    104c:	03800104 	movi	r14,4
    1050:	4399883a 	add	r12,r8,r14
    1054:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1058:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    105c:	5880c00c 	andi	r2,r11,768
    1060:	10004526 	beq	r2,zero,1178 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    1064:	5880400c 	andi	r2,r11,256
    1068:	10002126 	beq	r2,zero,10f0 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    106c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    1070:	10800044 	addi	r2,r2,1
    1074:	1081ffcc 	andi	r2,r2,2047
    1078:	20c00b17 	ldw	r3,44(r4)
    107c:	10c01626 	beq	r2,r3,10d8 <altera_avalon_jtag_uart_irq+0x90>
    1080:	02a00014 	movui	r10,32768
    1084:	02400e04 	movi	r9,56
    1088:	01c00044 	movi	r7,1
    108c:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1090:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1094:	2a84703a 	and	r2,r5,r10
    1098:	10000d26 	beq	r2,zero,10d0 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    109c:	20800a17 	ldw	r2,40(r4)
    10a0:	1105883a 	add	r2,r2,r4
    10a4:	1245883a 	add	r2,r2,r9
    10a8:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10ac:	20800a17 	ldw	r2,40(r4)
    10b0:	11c5883a 	add	r2,r2,r7
    10b4:	1184703a 	and	r2,r2,r6
    10b8:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10bc:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    10c0:	11c5883a 	add	r2,r2,r7
    10c4:	1184703a 	and	r2,r2,r6
    10c8:	20c00b17 	ldw	r3,44(r4)
    10cc:	10fff01e 	bne	r2,r3,1090 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    10d0:	2b44703a 	and	r2,r5,r13
    10d4:	10000626 	beq	r2,zero,10f0 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    10d8:	20800817 	ldw	r2,32(r4)
    10dc:	00ffff84 	movi	r3,-2
    10e0:	10c4703a 	and	r2,r2,r3
    10e4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    10e8:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    10ec:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    10f0:	5880800c 	andi	r2,r11,512
    10f4:	103fd826 	beq	r2,zero,1058 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    10f8:	5b44703a 	and	r2,r11,r13
    10fc:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    1100:	283fd526 	beq	r5,zero,1058 <altera_avalon_jtag_uart_irq+0x10>
    1104:	20c00d17 	ldw	r3,52(r4)
    1108:	20800c17 	ldw	r2,48(r4)
    110c:	18801126 	beq	r3,r2,1154 <altera_avalon_jtag_uart_irq+0x10c>
    1110:	02420e04 	movi	r9,2104
    1114:	01800044 	movi	r6,1
    1118:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    111c:	20800d17 	ldw	r2,52(r4)
    1120:	1105883a 	add	r2,r2,r4
    1124:	1245883a 	add	r2,r2,r9
    1128:	10800007 	ldb	r2,0(r2)
    112c:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1130:	20800d17 	ldw	r2,52(r4)
    1134:	1185883a 	add	r2,r2,r6
    1138:	11c4703a 	and	r2,r2,r7
    113c:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1140:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1144:	283fc426 	beq	r5,zero,1058 <altera_avalon_jtag_uart_irq+0x10>
    1148:	20c00d17 	ldw	r3,52(r4)
    114c:	20800c17 	ldw	r2,48(r4)
    1150:	18bff21e 	bne	r3,r2,111c <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1154:	20c00817 	ldw	r3,32(r4)
    1158:	00bfff44 	movi	r2,-3
    115c:	1886703a 	and	r3,r3,r2
    1160:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1164:	20800017 	ldw	r2,0(r4)
    1168:	1385883a 	add	r2,r2,r14
    116c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1170:	60800037 	ldwio	r2,0(r12)
    1174:	003fb806 	br	1058 <altera_avalon_jtag_uart_irq+0x10>
    1178:	f800283a 	ret

0000117c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    117c:	009a8044 	movi	r2,27137
    1180:	28800326 	beq	r5,r2,1190 <altera_avalon_jtag_uart_ioctl+0x14>
    1184:	009a8084 	movi	r2,27138
    1188:	2880171e 	bne	r5,r2,11e8 <altera_avalon_jtag_uart_ioctl+0x6c>
    118c:	00000d06 	br	11c4 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1190:	20c00117 	ldw	r3,4(r4)
    1194:	00a00034 	movhi	r2,32768
    1198:	10bfffc4 	addi	r2,r2,-1
    119c:	18801226 	beq	r3,r2,11e8 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    11a0:	31800017 	ldw	r6,0(r6)
    11a4:	30ffff84 	addi	r3,r6,-2
    11a8:	10bfff44 	addi	r2,r2,-3
    11ac:	10c0022e 	bgeu	r2,r3,11b8 <altera_avalon_jtag_uart_ioctl+0x3c>
    11b0:	01a00034 	movhi	r6,32768
    11b4:	31bfff84 	addi	r6,r6,-2
    11b8:	21800115 	stw	r6,4(r4)
    11bc:	0005883a 	mov	r2,zero
    11c0:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    11c4:	20c00117 	ldw	r3,4(r4)
    11c8:	00a00034 	movhi	r2,32768
    11cc:	10bfffc4 	addi	r2,r2,-1
    11d0:	18800526 	beq	r3,r2,11e8 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    11d4:	20800917 	ldw	r2,36(r4)
    11d8:	10c5803a 	cmpltu	r2,r2,r3
    11dc:	30800015 	stw	r2,0(r6)
    11e0:	0005883a 	mov	r2,zero
    11e4:	f800283a 	ret
    11e8:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    11ec:	f800283a 	ret

000011f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    11f0:	defff604 	addi	sp,sp,-40
    11f4:	dfc00915 	stw	ra,36(sp)
    11f8:	df000815 	stw	fp,32(sp)
    11fc:	ddc00715 	stw	r23,28(sp)
    1200:	dd800615 	stw	r22,24(sp)
    1204:	dd400515 	stw	r21,20(sp)
    1208:	dd000415 	stw	r20,16(sp)
    120c:	dcc00315 	stw	r19,12(sp)
    1210:	dc800215 	stw	r18,8(sp)
    1214:	dc400115 	stw	r17,4(sp)
    1218:	dc000015 	stw	r16,0(sp)
    121c:	2025883a 	mov	r18,r4
    1220:	282f883a 	mov	r23,r5
    1224:	3027883a 	mov	r19,r6
    1228:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    122c:	0180220e 	bge	zero,r6,12b8 <altera_avalon_jtag_uart_read+0xc8>
    1230:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1234:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    1238:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    123c:	b4400236 	bltu	r22,r17,1248 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    1240:	b461c83a 	sub	r16,r22,r17
    1244:	00000206 	br	1250 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1248:	00820004 	movi	r2,2048
    124c:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    1250:	80000d26 	beq	r16,zero,1288 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    1254:	9829883a 	mov	r20,r19
    1258:	9c001d36 	bltu	r19,r16,12d0 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    125c:	91400e04 	addi	r5,r18,56
    1260:	a809883a 	mov	r4,r21
    1264:	2c4b883a 	add	r5,r5,r17
    1268:	800d883a 	mov	r6,r16
    126c:	00007bc0 	call	7bc <memcpy>
      ptr   += n;
    1270:	ac2b883a 	add	r21,r21,r16
      space -= n;
    1274:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1278:	8445883a 	add	r2,r16,r17
    127c:	1081ffcc 	andi	r2,r2,2047
    1280:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    1284:	04ffeb16 	blt	zero,r19,1234 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    1288:	adc01c1e 	bne	r21,r23,12fc <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    128c:	e090000c 	andi	r2,fp,16384
    1290:	10000d1e 	bne	r2,zero,12c8 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1294:	90800a17 	ldw	r2,40(r18)
    1298:	b080031e 	bne	r22,r2,12a8 <altera_avalon_jtag_uart_read+0xb8>
    129c:	90c00917 	ldw	r3,36(r18)
    12a0:	90800117 	ldw	r2,4(r18)
    12a4:	18bffb36 	bltu	r3,r2,1294 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    12a8:	90800a17 	ldw	r2,40(r18)
    12ac:	b0800426 	beq	r22,r2,12c0 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    12b0:	04c0030e 	bge	zero,r19,12c0 <altera_avalon_jtag_uart_read+0xd0>
    12b4:	003fde06 	br	1230 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    12b8:	3890000c 	andi	r2,r7,16384
    12bc:	1000021e 	bne	r2,zero,12c8 <altera_avalon_jtag_uart_read+0xd8>
    12c0:	00bffec4 	movi	r2,-5
    12c4:	00001806 	br	1328 <altera_avalon_jtag_uart_read+0x138>
    12c8:	00bffd44 	movi	r2,-11
    12cc:	00001606 	br	1328 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    12d0:	91400e04 	addi	r5,r18,56
    12d4:	a809883a 	mov	r4,r21
    12d8:	894b883a 	add	r5,r17,r5
    12dc:	980d883a 	mov	r6,r19
    12e0:	00007bc0 	call	7bc <memcpy>
      ptr   += n;
    12e4:	aceb883a 	add	r21,r21,r19
      space -= n;
    12e8:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    12ec:	a445883a 	add	r2,r20,r17
    12f0:	1081ffcc 	andi	r2,r2,2047
    12f4:	90800b15 	stw	r2,44(r18)
    12f8:	003fe306 	br	1288 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12fc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1300:	00bfff84 	movi	r2,-2
    1304:	2084703a 	and	r2,r4,r2
    1308:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    130c:	90800817 	ldw	r2,32(r18)
    1310:	10800054 	ori	r2,r2,1
    1314:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1318:	90c00017 	ldw	r3,0(r18)
    131c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1320:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    1324:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    1328:	dfc00917 	ldw	ra,36(sp)
    132c:	df000817 	ldw	fp,32(sp)
    1330:	ddc00717 	ldw	r23,28(sp)
    1334:	dd800617 	ldw	r22,24(sp)
    1338:	dd400517 	ldw	r21,20(sp)
    133c:	dd000417 	ldw	r20,16(sp)
    1340:	dcc00317 	ldw	r19,12(sp)
    1344:	dc800217 	ldw	r18,8(sp)
    1348:	dc400117 	ldw	r17,4(sp)
    134c:	dc000017 	ldw	r16,0(sp)
    1350:	dec00a04 	addi	sp,sp,40
    1354:	f800283a 	ret

00001358 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1358:	defff804 	addi	sp,sp,-32
    135c:	dfc00715 	stw	ra,28(sp)
    1360:	dd800615 	stw	r22,24(sp)
    1364:	dd400515 	stw	r21,20(sp)
    1368:	dd000415 	stw	r20,16(sp)
    136c:	dcc00315 	stw	r19,12(sp)
    1370:	dc800215 	stw	r18,8(sp)
    1374:	dc400115 	stw	r17,4(sp)
    1378:	dc000015 	stw	r16,0(sp)
    137c:	2021883a 	mov	r16,r4
    1380:	282d883a 	mov	r22,r5
    1384:	3011883a 	mov	r8,r6
    1388:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    138c:	01800616 	blt	zero,r6,13a8 <altera_avalon_jtag_uart_write+0x50>
    1390:	2829883a 	mov	r20,r5
    1394:	00002106 	br	141c <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    1398:	a585c83a 	sub	r2,r20,r22
    139c:	00004306 	br	14ac <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    13a0:	00bffd44 	movi	r2,-11
    13a4:	00004106 	br	14ac <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    13a8:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    13ac:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    13b0:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    13b4:	9140032e 	bgeu	r18,r5,13c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    13b8:	2c85c83a 	sub	r2,r5,r18
    13bc:	11bfffc4 	addi	r6,r2,-1
    13c0:	00000606 	br	13dc <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    13c4:	28000326 	beq	r5,zero,13d4 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    13c8:	00820004 	movi	r2,2048
    13cc:	148dc83a 	sub	r6,r2,r18
    13d0:	00000206 	br	13dc <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    13d4:	0081ffc4 	movi	r2,2047
    13d8:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    13dc:	30002626 	beq	r6,zero,1478 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    13e0:	4027883a 	mov	r19,r8
    13e4:	3023883a 	mov	r17,r6
    13e8:	4180012e 	bgeu	r8,r6,13f0 <altera_avalon_jtag_uart_write+0x98>
    13ec:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    13f0:	81020e04 	addi	r4,r16,2104
    13f4:	2489883a 	add	r4,r4,r18
    13f8:	a00b883a 	mov	r5,r20
    13fc:	880d883a 	mov	r6,r17
    1400:	00007bc0 	call	7bc <memcpy>
      ptr   += n;
    1404:	a469883a 	add	r20,r20,r17
      count -= n;
    1408:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    140c:	9445883a 	add	r2,r18,r17
    1410:	1081ffcc 	andi	r2,r2,2047
    1414:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1418:	023fe416 	blt	zero,r8,13ac <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    141c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1420:	00bfff84 	movi	r2,-2
    1424:	2084703a 	and	r2,r4,r2
    1428:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    142c:	80800817 	ldw	r2,32(r16)
    1430:	10800094 	ori	r2,r2,2
    1434:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1438:	80c00017 	ldw	r3,0(r16)
    143c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1440:	2001703a 	wrctl	status,r4
    1444:	00000706 	br	1464 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1448:	80800d17 	ldw	r2,52(r16)
    144c:	1140031e 	bne	r2,r5,145c <altera_avalon_jtag_uart_write+0x104>
    1450:	80c00917 	ldw	r3,36(r16)
    1454:	80800117 	ldw	r2,4(r16)
    1458:	18bffb36 	bltu	r3,r2,1448 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    145c:	80800d17 	ldw	r2,52(r16)
    1460:	117fed1e 	bne	r2,r5,1418 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1464:	b53fcc1e 	bne	r22,r20,1398 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    1468:	a890000c 	andi	r2,r21,16384
    146c:	103fcc1e 	bne	r2,zero,13a0 <altera_avalon_jtag_uart_write+0x48>
    1470:	00bffec4 	movi	r2,-5
    1474:	00000d06 	br	14ac <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1478:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    147c:	00bfff84 	movi	r2,-2
    1480:	2084703a 	and	r2,r4,r2
    1484:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1488:	80800817 	ldw	r2,32(r16)
    148c:	10800094 	ori	r2,r2,2
    1490:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1494:	80c00017 	ldw	r3,0(r16)
    1498:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    149c:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    14a0:	a890000c 	andi	r2,r21,16384
    14a4:	103fe826 	beq	r2,zero,1448 <altera_avalon_jtag_uart_write+0xf0>
    14a8:	003fee06 	br	1464 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    14ac:	dfc00717 	ldw	ra,28(sp)
    14b0:	dd800617 	ldw	r22,24(sp)
    14b4:	dd400517 	ldw	r21,20(sp)
    14b8:	dd000417 	ldw	r20,16(sp)
    14bc:	dcc00317 	ldw	r19,12(sp)
    14c0:	dc800217 	ldw	r18,8(sp)
    14c4:	dc400117 	ldw	r17,4(sp)
    14c8:	dc000017 	ldw	r16,0(sp)
    14cc:	dec00804 	addi	sp,sp,32
    14d0:	f800283a 	ret

000014d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    14d4:	deffff04 	addi	sp,sp,-4
    14d8:	dfc00015 	stw	ra,0(sp)
    14dc:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    14e0:	00c00074 	movhi	r3,1
    14e4:	18e29104 	addi	r3,r3,-30140
    14e8:	18800017 	ldw	r2,0(r3)
    14ec:	1000011e 	bne	r2,zero,14f4 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    14f0:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    14f4:	008001c4 	movi	r2,7
    14f8:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    14fc:	3009883a 	mov	r4,r6
    1500:	01800034 	movhi	r6,0
    1504:	31854604 	addi	r6,r6,5400
    1508:	00023b80 	call	23b8 <alt_irq_register>
#endif  
}
    150c:	dfc00017 	ldw	ra,0(sp)
    1510:	dec00104 	addi	sp,sp,4
    1514:	f800283a 	ret

00001518 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1518:	defffe04 	addi	sp,sp,-8
    151c:	dfc00115 	stw	ra,4(sp)
    1520:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1524:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1528:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    152c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1530:	00bfff84 	movi	r2,-2
    1534:	8084703a 	and	r2,r16,r2
    1538:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    153c:	00026480 	call	2648 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1540:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    1544:	dfc00117 	ldw	ra,4(sp)
    1548:	dc000017 	ldw	r16,0(sp)
    154c:	dec00204 	addi	sp,sp,8
    1550:	f800283a 	ret

00001554 <alt_up_audio_write_fifo_head>:
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
    1554:	3000031e 	bne	r6,zero,1564 <alt_up_audio_write_fifo_head+0x10>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    1558:	20800a17 	ldw	r2,40(r4)
    155c:	11400235 	stwio	r5,8(r2)
    1560:	f800283a 	ret
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    1564:	20800a17 	ldw	r2,40(r4)
    1568:	11400335 	stwio	r5,12(r2)
    156c:	f800283a 	ret

00001570 <alt_up_audio_read_fifo_head>:
	return count;
}

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    1570:	2800031e 	bne	r5,zero,1580 <alt_up_audio_read_fifo_head+0x10>
    1574:	20800a17 	ldw	r2,40(r4)
    1578:	10800237 	ldwio	r2,8(r2)
    157c:	f800283a 	ret
    1580:	20800a17 	ldw	r2,40(r4)
    1584:	10800337 	ldwio	r2,12(r2)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    1588:	f800283a 	ret

0000158c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    158c:	01800216 	blt	zero,r6,1598 <alt_up_audio_write_fifo+0xc>
    1590:	0011883a 	mov	r8,zero
    1594:	00002506 	br	162c <alt_up_audio_write_fifo+0xa0>
    1598:	0011883a 	mov	r8,zero
    159c:	02800104 	movi	r10,4
    15a0:	380ec03a 	cmpne	r7,r7,zero
    15a4:	03bfc034 	movhi	r14,65280
    15a8:	03403ff4 	movhi	r13,255
    15ac:	02400044 	movi	r9,1
    15b0:	03000204 	movi	r12,8
    15b4:	02c00304 	movi	r11,12
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    15b8:	20800a17 	ldw	r2,40(r4)
    15bc:	1285883a 	add	r2,r2,r10
    15c0:	10800037 	ldwio	r2,0(r2)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    15c4:	3800031e 	bne	r7,zero,15d4 <alt_up_audio_write_fifo+0x48>
    15c8:	1384703a 	and	r2,r2,r14
    15cc:	1004d63a 	srli	r2,r2,24
    15d0:	00000206 	br	15dc <alt_up_audio_write_fifo+0x50>
    15d4:	1344703a 	and	r2,r2,r13
    15d8:	1004d43a 	srli	r2,r2,16
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    15dc:	10001326 	beq	r2,zero,162c <alt_up_audio_write_fifo+0xa0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    15e0:	3800091e 	bne	r7,zero,1608 <alt_up_audio_write_fifo+0x7c>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    15e4:	4205883a 	add	r2,r8,r8
    15e8:	1085883a 	add	r2,r2,r2
    15ec:	1145883a 	add	r2,r2,r5
    15f0:	10c00017 	ldw	r3,0(r2)
    15f4:	4251883a 	add	r8,r8,r9
    15f8:	20800a17 	ldw	r2,40(r4)
    15fc:	1305883a 	add	r2,r2,r12
    1600:	10c00035 	stwio	r3,0(r2)
    1604:	00000806 	br	1628 <alt_up_audio_write_fifo+0x9c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    1608:	4205883a 	add	r2,r8,r8
    160c:	1085883a 	add	r2,r2,r2
    1610:	1145883a 	add	r2,r2,r5
    1614:	10c00017 	ldw	r3,0(r2)
    1618:	4251883a 	add	r8,r8,r9
    161c:	20800a17 	ldw	r2,40(r4)
    1620:	12c5883a 	add	r2,r2,r11
    1624:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    1628:	41bfe316 	blt	r8,r6,15b8 <alt_up_audio_write_fifo+0x2c>
			// no more space to write
			break;
		}
	}
	return count;
}
    162c:	4005883a 	mov	r2,r8
    1630:	f800283a 	ret

00001634 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    1634:	01800216 	blt	zero,r6,1640 <alt_up_audio_read_fifo+0xc>
    1638:	0007883a 	mov	r3,zero
    163c:	00001c06 	br	16b0 <alt_up_audio_read_fifo+0x7c>
    1640:	0007883a 	mov	r3,zero
    1644:	02000104 	movi	r8,4
    1648:	380ec03a 	cmpne	r7,r7,zero
    164c:	033fc014 	movui	r12,65280
    1650:	02803fc4 	movi	r10,255
    1654:	02c00204 	movi	r11,8
    1658:	02400304 	movi	r9,12
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    165c:	20800a17 	ldw	r2,40(r4)
    1660:	1205883a 	add	r2,r2,r8
    1664:	10800037 	ldwio	r2,0(r2)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    1668:	3800031e 	bne	r7,zero,1678 <alt_up_audio_read_fifo+0x44>
    166c:	1304703a 	and	r2,r2,r12
    1670:	1004d23a 	srli	r2,r2,8
    1674:	00000106 	br	167c <alt_up_audio_read_fifo+0x48>
    1678:	1284703a 	and	r2,r2,r10
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    167c:	10000c26 	beq	r2,zero,16b0 <alt_up_audio_read_fifo+0x7c>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    1680:	3800041e 	bne	r7,zero,1694 <alt_up_audio_read_fifo+0x60>
    1684:	20800a17 	ldw	r2,40(r4)
    1688:	12c5883a 	add	r2,r2,r11
    168c:	10800037 	ldwio	r2,0(r2)
    1690:	00000306 	br	16a0 <alt_up_audio_read_fifo+0x6c>
    1694:	20800a17 	ldw	r2,40(r4)
    1698:	1245883a 	add	r2,r2,r9
    169c:	10800037 	ldwio	r2,0(r2)
    16a0:	28800015 	stw	r2,0(r5)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    16a4:	18c00044 	addi	r3,r3,1
    16a8:	2a0b883a 	add	r5,r5,r8

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    16ac:	30ffeb1e 	bne	r6,r3,165c <alt_up_audio_read_fifo+0x28>
			// no more data to read
			break;
		}
	}
	return count;
}
    16b0:	1805883a 	mov	r2,r3
    16b4:	f800283a 	ret

000016b8 <alt_up_audio_write_fifo_space>:
/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    16b8:	20800a17 	ldw	r2,40(r4)
    16bc:	10800137 	ldwio	r2,4(r2)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    16c0:	2800021e 	bne	r5,zero,16cc <alt_up_audio_write_fifo_space+0x14>
    16c4:	1004d63a 	srli	r2,r2,24
    16c8:	f800283a 	ret
    16cc:	10803fec 	andhi	r2,r2,255
    16d0:	1004d43a 	srli	r2,r2,16
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
}
    16d4:	f800283a 	ret

000016d8 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    16d8:	defffc04 	addi	sp,sp,-16
    16dc:	dfc00315 	stw	ra,12(sp)
    16e0:	dc800215 	stw	r18,8(sp)
    16e4:	dc400115 	stw	r17,4(sp)
    16e8:	dc000015 	stw	r16,0(sp)
    16ec:	2021883a 	mov	r16,r4
    16f0:	2823883a 	mov	r17,r5
    16f4:	3025883a 	mov	r18,r6
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    16f8:	000b883a 	mov	r5,zero
    16fc:	00016b80 	call	16b8 <alt_up_audio_write_fifo_space>
	if (space <= BUF_THRESHOLD)
    1700:	00c01804 	movi	r3,96
    1704:	18800236 	bltu	r3,r2,1710 <alt_up_audio_play_l+0x38>
    1708:	0005883a 	mov	r2,zero
    170c:	00000506 	br	1724 <alt_up_audio_play_l+0x4c>
		return 0;
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    1710:	8009883a 	mov	r4,r16
    1714:	880b883a 	mov	r5,r17
    1718:	900d883a 	mov	r6,r18
    171c:	000f883a 	mov	r7,zero
    1720:	000158c0 	call	158c <alt_up_audio_write_fifo>
}
    1724:	dfc00317 	ldw	ra,12(sp)
    1728:	dc800217 	ldw	r18,8(sp)
    172c:	dc400117 	ldw	r17,4(sp)
    1730:	dc000017 	ldw	r16,0(sp)
    1734:	dec00404 	addi	sp,sp,16
    1738:	f800283a 	ret

0000173c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    173c:	defffc04 	addi	sp,sp,-16
    1740:	dfc00315 	stw	ra,12(sp)
    1744:	dc800215 	stw	r18,8(sp)
    1748:	dc400115 	stw	r17,4(sp)
    174c:	dc000015 	stw	r16,0(sp)
    1750:	2021883a 	mov	r16,r4
    1754:	2823883a 	mov	r17,r5
    1758:	3025883a 	mov	r18,r6
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    175c:	01400044 	movi	r5,1
    1760:	00016b80 	call	16b8 <alt_up_audio_write_fifo_space>
	if (space <= BUF_THRESHOLD)
    1764:	00c01804 	movi	r3,96
    1768:	18800236 	bltu	r3,r2,1774 <alt_up_audio_play_r+0x38>
    176c:	0005883a 	mov	r2,zero
    1770:	00000506 	br	1788 <alt_up_audio_play_r+0x4c>
		return 0;
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    1774:	8009883a 	mov	r4,r16
    1778:	880b883a 	mov	r5,r17
    177c:	900d883a 	mov	r6,r18
    1780:	01c00044 	movi	r7,1
    1784:	000158c0 	call	158c <alt_up_audio_write_fifo>
}
    1788:	dfc00317 	ldw	ra,12(sp)
    178c:	dc800217 	ldw	r18,8(sp)
    1790:	dc400117 	ldw	r17,4(sp)
    1794:	dc000017 	ldw	r16,0(sp)
    1798:	dec00404 	addi	sp,sp,16
    179c:	f800283a 	ret

000017a0 <alt_up_audio_read_fifo_avail>:
/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    17a0:	20800a17 	ldw	r2,40(r4)
    17a4:	10800137 	ldwio	r2,4(r2)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    17a8:	2800031e 	bne	r5,zero,17b8 <alt_up_audio_read_fifo_avail+0x18>
    17ac:	10bfc00c 	andi	r2,r2,65280
    17b0:	1004d23a 	srli	r2,r2,8
    17b4:	f800283a 	ret
    17b8:	10803fcc 	andi	r2,r2,255
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
}
    17bc:	f800283a 	ret

000017c0 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    17c0:	defffc04 	addi	sp,sp,-16
    17c4:	dfc00315 	stw	ra,12(sp)
    17c8:	dc800215 	stw	r18,8(sp)
    17cc:	dc400115 	stw	r17,4(sp)
    17d0:	dc000015 	stw	r16,0(sp)
    17d4:	2021883a 	mov	r16,r4
    17d8:	2823883a 	mov	r17,r5
    17dc:	3025883a 	mov	r18,r6
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    17e0:	000b883a 	mov	r5,zero
    17e4:	00017a00 	call	17a0 <alt_up_audio_read_fifo_avail>
	if (data_words <= BUF_THRESHOLD)
    17e8:	00c01804 	movi	r3,96
    17ec:	18800236 	bltu	r3,r2,17f8 <alt_up_audio_record_l+0x38>
    17f0:	0005883a 	mov	r2,zero
    17f4:	00000506 	br	180c <alt_up_audio_record_l+0x4c>
		return 0;
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    17f8:	8009883a 	mov	r4,r16
    17fc:	880b883a 	mov	r5,r17
    1800:	900d883a 	mov	r6,r18
    1804:	000f883a 	mov	r7,zero
    1808:	00016340 	call	1634 <alt_up_audio_read_fifo>
}
    180c:	dfc00317 	ldw	ra,12(sp)
    1810:	dc800217 	ldw	r18,8(sp)
    1814:	dc400117 	ldw	r17,4(sp)
    1818:	dc000017 	ldw	r16,0(sp)
    181c:	dec00404 	addi	sp,sp,16
    1820:	f800283a 	ret

00001824 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    1824:	defffc04 	addi	sp,sp,-16
    1828:	dfc00315 	stw	ra,12(sp)
    182c:	dc800215 	stw	r18,8(sp)
    1830:	dc400115 	stw	r17,4(sp)
    1834:	dc000015 	stw	r16,0(sp)
    1838:	2021883a 	mov	r16,r4
    183c:	2823883a 	mov	r17,r5
    1840:	3025883a 	mov	r18,r6
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    1844:	01400044 	movi	r5,1
    1848:	00017a00 	call	17a0 <alt_up_audio_read_fifo_avail>
	if (data_words <= BUF_THRESHOLD)
    184c:	00c01804 	movi	r3,96
    1850:	18800236 	bltu	r3,r2,185c <alt_up_audio_record_r+0x38>
    1854:	0005883a 	mov	r2,zero
    1858:	00000506 	br	1870 <alt_up_audio_record_r+0x4c>
		return 0;
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    185c:	8009883a 	mov	r4,r16
    1860:	880b883a 	mov	r5,r17
    1864:	900d883a 	mov	r6,r18
    1868:	01c00044 	movi	r7,1
    186c:	00016340 	call	1634 <alt_up_audio_read_fifo>
}
    1870:	dfc00317 	ldw	ra,12(sp)
    1874:	dc800217 	ldw	r18,8(sp)
    1878:	dc400117 	ldw	r17,4(sp)
    187c:	dc000017 	ldw	r16,0(sp)
    1880:	dec00404 	addi	sp,sp,16
    1884:	f800283a 	ret

00001888 <alt_up_audio_reset_audio_core>:
}

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    1888:	20c00a17 	ldw	r3,40(r4)
    188c:	18800037 	ldwio	r2,0(r3)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    1890:	10800314 	ori	r2,r2,12
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1894:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1898:	21000a17 	ldw	r4,40(r4)
    189c:	00fffcc4 	movi	r3,-13
    18a0:	10c4703a 	and	r2,r2,r3
    18a4:	20800035 	stwio	r2,0(r4)
}
    18a8:	f800283a 	ret

000018ac <alt_up_audio_write_interrupt_pending>:
}

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    18ac:	20800a17 	ldw	r2,40(r4)
    18b0:	10800037 	ldwio	r2,0(r2)
    18b4:	1004d27a 	srli	r2,r2,9
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
}
    18b8:	1080004c 	andi	r2,r2,1
    18bc:	f800283a 	ret

000018c0 <alt_up_audio_read_interrupt_pending>:
}

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    18c0:	20800a17 	ldw	r2,40(r4)
    18c4:	10800037 	ldwio	r2,0(r2)
    18c8:	1004d23a 	srli	r2,r2,8
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
}
    18cc:	1080004c 	andi	r2,r2,1
    18d0:	f800283a 	ret

000018d4 <alt_up_audio_disable_write_interrupt>:
}

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    18d4:	20800a17 	ldw	r2,40(r4)
    18d8:	10c00037 	ldwio	r3,0(r2)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    18dc:	013fff44 	movi	r4,-3
    18e0:	1906703a 	and	r3,r3,r4
    18e4:	10c00035 	stwio	r3,0(r2)
}
    18e8:	f800283a 	ret

000018ec <alt_up_audio_enable_write_interrupt>:
}

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    18ec:	20c00a17 	ldw	r3,40(r4)
    18f0:	18800037 	ldwio	r2,0(r3)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    18f4:	10800094 	ori	r2,r2,2
    18f8:	18800035 	stwio	r2,0(r3)
}
    18fc:	f800283a 	ret

00001900 <alt_up_audio_disable_read_interrupt>:
}

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    1900:	20800a17 	ldw	r2,40(r4)
    1904:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1908:	013fff84 	movi	r4,-2
    190c:	1906703a 	and	r3,r3,r4
    1910:	10c00035 	stwio	r3,0(r2)
}
    1914:	f800283a 	ret

00001918 <alt_up_audio_enable_read_interrupt>:
}

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    1918:	20c00a17 	ldw	r3,40(r4)
    191c:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    1920:	10800054 	ori	r2,r2,1
    1924:	18800035 	stwio	r2,0(r3)
}
    1928:	f800283a 	ret

0000192c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    192c:	deffff04 	addi	sp,sp,-4
    1930:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    1934:	01400034 	movhi	r5,0
    1938:	295b4a04 	addi	r5,r5,27944
    193c:	000222c0 	call	222c <alt_find_dev>
  return dev;
}
    1940:	dfc00017 	ldw	ra,0(sp)
    1944:	dec00104 	addi	sp,sp,4
    1948:	f800283a 	ret

0000194c <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    194c:	deffff04 	addi	sp,sp,-4
    1950:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    1954:	01400034 	movhi	r5,0
    1958:	295b4a04 	addi	r5,r5,27944
    195c:	000222c0 	call	222c <alt_find_dev>

  return dev;
}
    1960:	dfc00017 	ldw	ra,0(sp)
    1964:	dec00104 	addi	sp,sp,4
    1968:	f800283a 	ret

0000196c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    196c:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    1970:	1004c03a 	cmpne	r2,r2,zero
    1974:	f800283a 	ret

00001978 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    1978:	2080004c 	andi	r2,r4,1
    197c:	f800283a 	ret

00001980 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1980:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    1984:	1004c03a 	cmpne	r2,r2,zero
    1988:	f800283a 	ret

0000198c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    198c:	2004d43a 	srli	r2,r4,16
    1990:	f800283a 	ret

00001994 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    1994:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    1998:	1004c03a 	cmpne	r2,r2,zero
    199c:	f800283a 	ret

000019a0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    19a0:	20803fcc 	andi	r2,r4,255
    19a4:	f800283a 	ret

000019a8 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    19a8:	deffff04 	addi	sp,sp,-4
    19ac:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    19b0:	01400034 	movhi	r5,0
    19b4:	295b4a04 	addi	r5,r5,27944
    19b8:	000222c0 	call	222c <alt_find_dev>

  return dev;
}
    19bc:	dfc00017 	ldw	ra,0(sp)
    19c0:	dec00104 	addi	sp,sp,4
    19c4:	f800283a 	ret

000019c8 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    19c8:	defffe04 	addi	sp,sp,-8
    19cc:	dfc00115 	stw	ra,4(sp)
    19d0:	dc000015 	stw	r16,0(sp)
    19d4:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    19d8:	81000037 	ldwio	r4,0(r16)
    19dc:	000198c0 	call	198c <read_num_bytes_available>
    19e0:	10bfffcc 	andi	r2,r2,65535
    19e4:	103ffc1e 	bne	r2,zero,19d8 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    19e8:	dfc00117 	ldw	ra,4(sp)
    19ec:	dc000017 	ldw	r16,0(sp)
    19f0:	dec00204 	addi	sp,sp,8
    19f4:	f800283a 	ret

000019f8 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    19f8:	defffd04 	addi	sp,sp,-12
    19fc:	dfc00215 	stw	ra,8(sp)
    1a00:	dc400115 	stw	r17,4(sp)
    1a04:	dc000015 	stw	r16,0(sp)
    1a08:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1a0c:	20800a17 	ldw	r2,40(r4)
    1a10:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    1a14:	8009883a 	mov	r4,r16
    1a18:	00019940 	call	1994 <read_data_valid>
    1a1c:	10803fcc 	andi	r2,r2,255
    1a20:	1000021e 	bne	r2,zero,1a2c <alt_up_ps2_read_data_byte+0x34>
    1a24:	00bfffc4 	movi	r2,-1
    1a28:	00000406 	br	1a3c <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    1a2c:	8009883a 	mov	r4,r16
    1a30:	00019a00 	call	19a0 <read_data_byte>
    1a34:	88800005 	stb	r2,0(r17)
    1a38:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    1a3c:	dfc00217 	ldw	ra,8(sp)
    1a40:	dc400117 	ldw	r17,4(sp)
    1a44:	dc000017 	ldw	r16,0(sp)
    1a48:	dec00304 	addi	sp,sp,12
    1a4c:	f800283a 	ret

00001a50 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1a50:	defffb04 	addi	sp,sp,-20
    1a54:	dfc00415 	stw	ra,16(sp)
    1a58:	dcc00315 	stw	r19,12(sp)
    1a5c:	dc800215 	stw	r18,8(sp)
    1a60:	dc400115 	stw	r17,4(sp)
    1a64:	dc000015 	stw	r16,0(sp)
    1a68:	2025883a 	mov	r18,r4
    1a6c:	2827883a 	mov	r19,r5
    1a70:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1a74:	90800a17 	ldw	r2,40(r18)
    1a78:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    1a7c:	8009883a 	mov	r4,r16
    1a80:	00019940 	call	1994 <read_data_valid>
    1a84:	10803fcc 	andi	r2,r2,255
    1a88:	10000526 	beq	r2,zero,1aa0 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    1a8c:	8009883a 	mov	r4,r16
    1a90:	00019a00 	call	19a0 <read_data_byte>
    1a94:	98800005 	stb	r2,0(r19)
    1a98:	0005883a 	mov	r2,zero
    1a9c:	00000506 	br	1ab4 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    1aa0:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    1aa4:	90800c17 	ldw	r2,48(r18)
    1aa8:	103ff226 	beq	r2,zero,1a74 <alt_up_ps2_read_data_byte_timeout+0x24>
    1aac:	147ff12e 	bgeu	r2,r17,1a74 <alt_up_ps2_read_data_byte_timeout+0x24>
    1ab0:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    1ab4:	dfc00417 	ldw	ra,16(sp)
    1ab8:	dcc00317 	ldw	r19,12(sp)
    1abc:	dc800217 	ldw	r18,8(sp)
    1ac0:	dc400117 	ldw	r17,4(sp)
    1ac4:	dc000017 	ldw	r16,0(sp)
    1ac8:	dec00504 	addi	sp,sp,20
    1acc:	f800283a 	ret

00001ad0 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1ad0:	deffff04 	addi	sp,sp,-4
    1ad4:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1ad8:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1adc:	0180010e 	bge	zero,r6,1ae4 <alt_up_ps2_read_fd+0x14>
    1ae0:	003fff06 	br	1ae0 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    1ae4:	0001a500 	call	1a50 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1ae8:	1005003a 	cmpeq	r2,r2,zero
    1aec:	dfc00017 	ldw	ra,0(sp)
    1af0:	dec00104 	addi	sp,sp,4
    1af4:	f800283a 	ret

00001af8 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1af8:	defffc04 	addi	sp,sp,-16
    1afc:	dfc00315 	stw	ra,12(sp)
    1b00:	dc400215 	stw	r17,8(sp)
    1b04:	dc000115 	stw	r16,4(sp)
    1b08:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    1b0c:	d8000005 	stb	zero,0(sp)
    1b10:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    1b14:	8009883a 	mov	r4,r16
    1b18:	d80b883a 	mov	r5,sp
    1b1c:	0001a500 	call	1a50 <alt_up_ps2_read_data_byte_timeout>
    1b20:	1007883a 	mov	r3,r2
		if ( status == 0)
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1000041e 	bne	r2,zero,1b3c <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    1b2c:	d8800003 	ldbu	r2,0(sp)
    1b30:	147ff81e 	bne	r2,r17,1b14 <alt_up_ps2_wait_for_ack+0x1c>
    1b34:	0005883a 	mov	r2,zero
    1b38:	00000106 	br	1b40 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    1b3c:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    1b40:	dfc00317 	ldw	ra,12(sp)
    1b44:	dc400217 	ldw	r17,8(sp)
    1b48:	dc000117 	ldw	r16,4(sp)
    1b4c:	dec00404 	addi	sp,sp,16
    1b50:	f800283a 	ret

00001b54 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1b54:	deffff04 	addi	sp,sp,-4
    1b58:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1b5c:	20800a17 	ldw	r2,40(r4)
    1b60:	29403fcc 	andi	r5,r5,255
    1b64:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1b68:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    1b6c:	11000137 	ldwio	r4,4(r2)
    1b70:	00019800 	call	1980 <read_CE_bit>
    1b74:	10803fcc 	andi	r2,r2,255
    1b78:	10000226 	beq	r2,zero,1b84 <alt_up_ps2_write_data_byte+0x30>
    1b7c:	00bffec4 	movi	r2,-5
    1b80:	00000106 	br	1b88 <alt_up_ps2_write_data_byte+0x34>
    1b84:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1b88:	dfc00017 	ldw	ra,0(sp)
    1b8c:	dec00104 	addi	sp,sp,4
    1b90:	f800283a 	ret

00001b94 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1b94:	defffb04 	addi	sp,sp,-20
    1b98:	dfc00415 	stw	ra,16(sp)
    1b9c:	dcc00315 	stw	r19,12(sp)
    1ba0:	dc800215 	stw	r18,8(sp)
    1ba4:	dc400115 	stw	r17,4(sp)
    1ba8:	dc000015 	stw	r16,0(sp)
    1bac:	2827883a 	mov	r19,r5
    1bb0:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1bb4:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1bb8:	01800216 	blt	zero,r6,1bc4 <alt_up_ps2_write_fd+0x30>
    1bbc:	0021883a 	mov	r16,zero
    1bc0:	00000806 	br	1be4 <alt_up_ps2_write_fd+0x50>
    1bc4:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1bc8:	9c05883a 	add	r2,r19,r16
    1bcc:	8809883a 	mov	r4,r17
    1bd0:	11400003 	ldbu	r5,0(r2)
    1bd4:	0001b540 	call	1b54 <alt_up_ps2_write_data_byte>
		if (status!=0)
    1bd8:	1000021e 	bne	r2,zero,1be4 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    1bdc:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1be0:	943ff91e 	bne	r18,r16,1bc8 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    1be4:	8005883a 	mov	r2,r16
    1be8:	dfc00417 	ldw	ra,16(sp)
    1bec:	dcc00317 	ldw	r19,12(sp)
    1bf0:	dc800217 	ldw	r18,8(sp)
    1bf4:	dc400117 	ldw	r17,4(sp)
    1bf8:	dc000017 	ldw	r16,0(sp)
    1bfc:	dec00504 	addi	sp,sp,20
    1c00:	f800283a 	ret

00001c04 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1c04:	defffe04 	addi	sp,sp,-8
    1c08:	dfc00115 	stw	ra,4(sp)
    1c0c:	dc000015 	stw	r16,0(sp)
    1c10:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1c14:	29403fcc 	andi	r5,r5,255
    1c18:	0001b540 	call	1b54 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    1c1c:	1000021e 	bne	r2,zero,1c28 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1c20:	8009883a 	mov	r4,r16
    1c24:	0001af80 	call	1af8 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    1c28:	dfc00117 	ldw	ra,4(sp)
    1c2c:	dc000017 	ldw	r16,0(sp)
    1c30:	dec00204 	addi	sp,sp,8
    1c34:	f800283a 	ret

00001c38 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1c38:	defffd04 	addi	sp,sp,-12
    1c3c:	dfc00215 	stw	ra,8(sp)
    1c40:	dc000115 	stw	r16,4(sp)
    1c44:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    1c48:	01403fc4 	movi	r5,255
    1c4c:	0001c040 	call	1c04 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    1c50:	1000171e 	bne	r2,zero,1cb0 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1c54:	8009883a 	mov	r4,r16
    1c58:	d80b883a 	mov	r5,sp
    1c5c:	0001a500 	call	1a50 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1c60:	1000131e 	bne	r2,zero,1cb0 <alt_up_ps2_init+0x78>
    1c64:	d8c00003 	ldbu	r3,0(sp)
    1c68:	00802a84 	movi	r2,170
    1c6c:	1880101e 	bne	r3,r2,1cb0 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1c70:	8009883a 	mov	r4,r16
    1c74:	d80b883a 	mov	r5,sp
    1c78:	0001a500 	call	1a50 <alt_up_ps2_read_data_byte_timeout>
    1c7c:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1c80:	00bfe304 	movi	r2,-116
    1c84:	1880031e 	bne	r3,r2,1c94 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1c88:	00800044 	movi	r2,1
    1c8c:	80800d15 	stw	r2,52(r16)
    1c90:	00000706 	br	1cb0 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    1c94:	1800061e 	bne	r3,zero,1cb0 <alt_up_ps2_init+0x78>
    1c98:	d8800003 	ldbu	r2,0(sp)
    1c9c:	1000041e 	bne	r2,zero,1cb0 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1ca0:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1ca4:	8009883a 	mov	r4,r16
    1ca8:	01403d04 	movi	r5,244
    1cac:	0001b540 	call	1b54 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1cb0:	dfc00217 	ldw	ra,8(sp)
    1cb4:	dc000117 	ldw	r16,4(sp)
    1cb8:	dec00304 	addi	sp,sp,12
    1cbc:	f800283a 	ret

00001cc0 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1cc0:	20800a17 	ldw	r2,40(r4)
    1cc4:	10800104 	addi	r2,r2,4
    1cc8:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1ccc:	013fff84 	movi	r4,-2
    1cd0:	1906703a 	and	r3,r3,r4
    1cd4:	10c00035 	stwio	r3,0(r2)
}
    1cd8:	f800283a 	ret

00001cdc <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1cdc:	20c00a17 	ldw	r3,40(r4)
    1ce0:	18c00104 	addi	r3,r3,4
    1ce4:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1ce8:	10800054 	ori	r2,r2,1
    1cec:	18800035 	stwio	r2,0(r3)
}
    1cf0:	f800283a 	ret

00001cf4 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    1cf4:	200495ba 	slli	r2,r4,22
}
    1cf8:	1005d7fa 	srai	r2,r2,31
    1cfc:	f800283a 	ret

00001d00 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1d00:	deffff04 	addi	sp,sp,-4
    1d04:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1d08:	01400034 	movhi	r5,0
    1d0c:	295b4a04 	addi	r5,r5,27944
    1d10:	000222c0 	call	222c <alt_find_dev>

  return dev;
}
    1d14:	dfc00017 	ldw	ra,0(sp)
    1d18:	dec00104 	addi	sp,sp,4
    1d1c:	f800283a 	ret

00001d20 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1d20:	defffd04 	addi	sp,sp,-12
    1d24:	dfc00215 	stw	ra,8(sp)
    1d28:	dc400115 	stw	r17,4(sp)
    1d2c:	dc000015 	stw	r16,0(sp)
    1d30:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1d34:	20800a17 	ldw	r2,40(r4)
    1d38:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1d3c:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1d40:	8009883a 	mov	r4,r16
    1d44:	0001cf40 	call	1cf4 <alt_up_rs232_check_parity>
    1d48:	88800005 	stb	r2,0(r17)
    1d4c:	8420000c 	andi	r16,r16,32768
    1d50:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    1d54:	80bfffc4 	addi	r2,r16,-1
    1d58:	dfc00217 	ldw	ra,8(sp)
    1d5c:	dc400117 	ldw	r17,4(sp)
    1d60:	dc000017 	ldw	r16,0(sp)
    1d64:	dec00304 	addi	sp,sp,12
    1d68:	f800283a 	ret

00001d6c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1d6c:	defff904 	addi	sp,sp,-28
    1d70:	dfc00615 	stw	ra,24(sp)
    1d74:	dd000515 	stw	r20,20(sp)
    1d78:	dcc00415 	stw	r19,16(sp)
    1d7c:	dc800315 	stw	r18,12(sp)
    1d80:	dc400215 	stw	r17,8(sp)
    1d84:	dc000115 	stw	r16,4(sp)
    1d88:	2821883a 	mov	r16,r5
    1d8c:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1d90:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1d94:	3000021e 	bne	r6,zero,1da0 <alt_up_rs232_read_fd+0x34>
    1d98:	0025883a 	mov	r18,zero
    1d9c:	00000a06 	br	1dc8 <alt_up_rs232_read_fd+0x5c>
    1da0:	0025883a 	mov	r18,zero
    1da4:	04400044 	movi	r17,1
    1da8:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1dac:	8461883a 	add	r16,r16,r17
    1db0:	9809883a 	mov	r4,r19
    1db4:	d80d883a 	mov	r6,sp
    1db8:	0001d200 	call	1d20 <alt_up_rs232_read_data>
    1dbc:	1000021e 	bne	r2,zero,1dc8 <alt_up_rs232_read_fd+0x5c>
			count++;
    1dc0:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1dc4:	a4bff81e 	bne	r20,r18,1da8 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1dc8:	9005883a 	mov	r2,r18
    1dcc:	dfc00617 	ldw	ra,24(sp)
    1dd0:	dd000517 	ldw	r20,20(sp)
    1dd4:	dcc00417 	ldw	r19,16(sp)
    1dd8:	dc800317 	ldw	r18,12(sp)
    1ddc:	dc400217 	ldw	r17,8(sp)
    1de0:	dc000117 	ldw	r16,4(sp)
    1de4:	dec00704 	addi	sp,sp,28
    1de8:	f800283a 	ret

00001dec <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1dec:	20800a17 	ldw	r2,40(r4)
    1df0:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1df4:	1004d43a 	srli	r2,r2,16
    1df8:	f800283a 	ret

00001dfc <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1dfc:	20800a17 	ldw	r2,40(r4)
    1e00:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1e04:	29403fcc 	andi	r5,r5,255
    1e08:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1e0c:	0005883a 	mov	r2,zero
    1e10:	f800283a 	ret

00001e14 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1e14:	defffb04 	addi	sp,sp,-20
    1e18:	dfc00415 	stw	ra,16(sp)
    1e1c:	dcc00315 	stw	r19,12(sp)
    1e20:	dc800215 	stw	r18,8(sp)
    1e24:	dc400115 	stw	r17,4(sp)
    1e28:	dc000015 	stw	r16,0(sp)
    1e2c:	2827883a 	mov	r19,r5
    1e30:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1e34:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    1e38:	3000021e 	bne	r6,zero,1e44 <alt_up_rs232_write_fd+0x30>
    1e3c:	0021883a 	mov	r16,zero
    1e40:	00000806 	br	1e64 <alt_up_rs232_write_fd+0x50>
    1e44:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    1e48:	84c5883a 	add	r2,r16,r19
    1e4c:	8809883a 	mov	r4,r17
    1e50:	11400003 	ldbu	r5,0(r2)
    1e54:	0001dfc0 	call	1dfc <alt_up_rs232_write_data>
    1e58:	1000021e 	bne	r2,zero,1e64 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    1e5c:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1e60:	943ff91e 	bne	r18,r16,1e48 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    1e64:	8005883a 	mov	r2,r16
    1e68:	dfc00417 	ldw	ra,16(sp)
    1e6c:	dcc00317 	ldw	r19,12(sp)
    1e70:	dc800217 	ldw	r18,8(sp)
    1e74:	dc400117 	ldw	r17,4(sp)
    1e78:	dc000017 	ldw	r16,0(sp)
    1e7c:	dec00504 	addi	sp,sp,20
    1e80:	f800283a 	ret

00001e84 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1e84:	20800a17 	ldw	r2,40(r4)
    1e88:	10800104 	addi	r2,r2,4
    1e8c:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1e90:	013fff84 	movi	r4,-2
    1e94:	1906703a 	and	r3,r3,r4
    1e98:	10c00035 	stwio	r3,0(r2)
}
    1e9c:	f800283a 	ret

00001ea0 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1ea0:	20c00a17 	ldw	r3,40(r4)
    1ea4:	18c00104 	addi	r3,r3,4
    1ea8:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1eac:	10800054 	ori	r2,r2,1
    1eb0:	18800035 	stwio	r2,0(r3)
}
    1eb4:	f800283a 	ret

00001eb8 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1eb8:	20800a17 	ldw	r2,40(r4)
    1ebc:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1ec0:	10bfffcc 	andi	r2,r2,65535
    1ec4:	f800283a 	ret

00001ec8 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1ec8:	20800c17 	ldw	r2,48(r4)
    1ecc:	30801c2e 	bgeu	r6,r2,1f40 <alt_up_char_buffer_string+0x78>
    1ed0:	20800d17 	ldw	r2,52(r4)
    1ed4:	38801a2e 	bgeu	r7,r2,1f40 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1ed8:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    1edc:	28c00003 	ldbu	r3,0(r5)
    1ee0:	18803fcc 	andi	r2,r3,255
    1ee4:	1080201c 	xori	r2,r2,128
    1ee8:	10bfe004 	addi	r2,r2,-128
    1eec:	10001626 	beq	r2,zero,1f48 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1ef0:	3a04983a 	sll	r2,r7,r8
    1ef4:	308f883a 	add	r7,r6,r2
    1ef8:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1efc:	20800b17 	ldw	r2,44(r4)
    1f00:	3885883a 	add	r2,r7,r2
    1f04:	18c03fcc 	andi	r3,r3,255
    1f08:	18c0201c 	xori	r3,r3,128
    1f0c:	18ffe004 	addi	r3,r3,-128
    1f10:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    1f14:	320d883a 	add	r6,r6,r8
    1f18:	20800c17 	ldw	r2,48(r4)
    1f1c:	3080082e 	bgeu	r6,r2,1f40 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    1f20:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1f24:	28c00003 	ldbu	r3,0(r5)
    1f28:	18803fcc 	andi	r2,r3,255
    1f2c:	1080201c 	xori	r2,r2,128
    1f30:	10bfe004 	addi	r2,r2,-128
    1f34:	10000426 	beq	r2,zero,1f48 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1f38:	3a0f883a 	add	r7,r7,r8
    1f3c:	003fef06 	br	1efc <alt_up_char_buffer_string+0x34>
    1f40:	00bfffc4 	movi	r2,-1
    1f44:	f800283a 	ret
    1f48:	0005883a 	mov	r2,zero
	}
	return 0;
}
    1f4c:	f800283a 	ret

00001f50 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1f50:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1f54:	20800c17 	ldw	r2,48(r4)
    1f58:	3080112e 	bgeu	r6,r2,1fa0 <alt_up_char_buffer_draw+0x50>
    1f5c:	20800d17 	ldw	r2,52(r4)
    1f60:	38800f2e 	bgeu	r7,r2,1fa0 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1f64:	20c00f17 	ldw	r3,60(r4)
    1f68:	30c6703a 	and	r3,r6,r3
    1f6c:	20800e17 	ldw	r2,56(r4)
    1f70:	1886983a 	sll	r3,r3,r2
    1f74:	20801117 	ldw	r2,68(r4)
    1f78:	3884703a 	and	r2,r7,r2
    1f7c:	21001017 	ldw	r4,64(r4)
    1f80:	1104983a 	sll	r2,r2,r4
    1f84:	1886b03a 	or	r3,r3,r2
    1f88:	40800b17 	ldw	r2,44(r8)
    1f8c:	1887883a 	add	r3,r3,r2
    1f90:	28803fcc 	andi	r2,r5,255
    1f94:	18800025 	stbio	r2,0(r3)
    1f98:	0005883a 	mov	r2,zero
    1f9c:	f800283a 	ret

	return 0;
    1fa0:	00bfffc4 	movi	r2,-1
}
    1fa4:	f800283a 	ret

00001fa8 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1fa8:	20c00a17 	ldw	r3,40(r4)
    1fac:	00800044 	movi	r2,1
    1fb0:	188000a5 	stbio	r2,2(r3)
    1fb4:	20800a17 	ldw	r2,40(r4)
    1fb8:	10c00084 	addi	r3,r2,2
    1fbc:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1fc0:	18800023 	ldbuio	r2,0(r3)
    1fc4:	1104703a 	and	r2,r2,r4
    1fc8:	103ffd1e 	bne	r2,zero,1fc0 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    1fcc:	f800283a 	ret

00001fd0 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1fd0:	deffff04 	addi	sp,sp,-4
    1fd4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1fd8:	01400034 	movhi	r5,0
    1fdc:	295b4a04 	addi	r5,r5,27944
    1fe0:	000222c0 	call	222c <alt_find_dev>

  return dev;
}
    1fe4:	dfc00017 	ldw	ra,0(sp)
    1fe8:	dec00104 	addi	sp,sp,4
    1fec:	f800283a 	ret

00001ff0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1ff0:	defffe04 	addi	sp,sp,-8
    1ff4:	dfc00115 	stw	ra,4(sp)
    1ff8:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1ffc:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    2000:	80800007 	ldb	r2,0(r16)
    2004:	10000a26 	beq	r2,zero,2030 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    2008:	8009883a 	mov	r4,r16
    200c:	01400034 	movhi	r5,0
    2010:	29540e04 	addi	r5,r5,20536
    2014:	0002af80 	call	2af8 <strcmp>
    2018:	1000021e 	bne	r2,zero,2024 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    201c:	80000005 	stb	zero,0(r16)
    2020:	00000306 	br	2030 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    2024:	84000044 	addi	r16,r16,1
    2028:	80800007 	ldb	r2,0(r16)
    202c:	103ff61e 	bne	r2,zero,2008 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    2030:	dfc00117 	ldw	ra,4(sp)
    2034:	dc000017 	ldw	r16,0(sp)
    2038:	dec00204 	addi	sp,sp,8
    203c:	f800283a 	ret

00002040 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2040:	00800074 	movhi	r2,1
    2044:	10a29104 	addi	r2,r2,-30140
    2048:	10800017 	ldw	r2,0(r2)
    204c:	1000021e 	bne	r2,zero,2058 <alt_alarm_start+0x18>
    2050:	00bfde84 	movi	r2,-134
    2054:	f800283a 	ret
  {
    if (alarm)
    2058:	2000021e 	bne	r4,zero,2064 <alt_alarm_start+0x24>
    205c:	00bffa84 	movi	r2,-22
    2060:	f800283a 	ret
    {
      alarm->callback = callback;
    2064:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2068:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    206c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2070:	00bfff84 	movi	r2,-2
    2074:	3884703a 	and	r2,r7,r2
    2078:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    207c:	00800074 	movhi	r2,1
    2080:	10a29204 	addi	r2,r2,-30136
    2084:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2088:	01800044 	movi	r6,1
    208c:	1985883a 	add	r2,r3,r6
    2090:	2885883a 	add	r2,r5,r2
    2094:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2098:	10c0022e 	bgeu	r2,r3,20a4 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    209c:	21800405 	stb	r6,16(r4)
    20a0:	00000106 	br	20a8 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    20a4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    20a8:	00800034 	movhi	r2,0
    20ac:	109b4f04 	addi	r2,r2,27964
    20b0:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    20b4:	10c00017 	ldw	r3,0(r2)
    20b8:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    20bc:	10c00017 	ldw	r3,0(r2)
    20c0:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    20c4:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    20c8:	3801703a 	wrctl	status,r7
    20cc:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    20d0:	f800283a 	ret

000020d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    20d4:	defffd04 	addi	sp,sp,-12
    20d8:	dfc00215 	stw	ra,8(sp)
    20dc:	dc400115 	stw	r17,4(sp)
    20e0:	dc000015 	stw	r16,0(sp)
    20e4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    20e8:	20001c16 	blt	r4,zero,215c <close+0x88>
    20ec:	20c00324 	muli	r3,r4,12
    20f0:	00800034 	movhi	r2,0
    20f4:	1098e604 	addi	r2,r2,25496
    20f8:	1889883a 	add	r4,r3,r2

  if (fd)
    20fc:	20001726 	beq	r4,zero,215c <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2100:	20800017 	ldw	r2,0(r4)
    2104:	10800417 	ldw	r2,16(r2)
    2108:	10002126 	beq	r2,zero,2190 <close+0xbc>
    210c:	103ee83a 	callr	r2
    2110:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2114:	8009883a 	mov	r4,r16
    2118:	00025f00 	call	25f0 <alt_release_fd>
    if (rval < 0)
    211c:	88000216 	blt	r17,zero,2128 <close+0x54>
    2120:	0005883a 	mov	r2,zero
    2124:	00001d06 	br	219c <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2128:	00800034 	movhi	r2,0
    212c:	109b4d04 	addi	r2,r2,27956
    2130:	10800017 	ldw	r2,0(r2)
    2134:	1000031e 	bne	r2,zero,2144 <close+0x70>
    2138:	00c00074 	movhi	r3,1
    213c:	18e29304 	addi	r3,r3,-30132
    2140:	00000206 	br	214c <close+0x78>
    2144:	103ee83a 	callr	r2
    2148:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    214c:	0445c83a 	sub	r2,zero,r17
    2150:	18800015 	stw	r2,0(r3)
    2154:	00bfffc4 	movi	r2,-1
    2158:	00001006 	br	219c <close+0xc8>
    215c:	00800034 	movhi	r2,0
    2160:	109b4d04 	addi	r2,r2,27956
    2164:	10800017 	ldw	r2,0(r2)
    2168:	1000031e 	bne	r2,zero,2178 <close+0xa4>
    216c:	00c00074 	movhi	r3,1
    2170:	18e29304 	addi	r3,r3,-30132
    2174:	00000206 	br	2180 <close+0xac>
    2178:	103ee83a 	callr	r2
    217c:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2180:	00801444 	movi	r2,81
    2184:	18800015 	stw	r2,0(r3)
    2188:	00bfffc4 	movi	r2,-1
    218c:	00000306 	br	219c <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2190:	8009883a 	mov	r4,r16
    2194:	00025f00 	call	25f0 <alt_release_fd>
    2198:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    219c:	dfc00217 	ldw	ra,8(sp)
    21a0:	dc400117 	ldw	r17,4(sp)
    21a4:	dc000017 	ldw	r16,0(sp)
    21a8:	dec00304 	addi	sp,sp,12
    21ac:	f800283a 	ret

000021b0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    21b0:	f800283a 	ret

000021b4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    21b4:	3005883a 	mov	r2,r6
    21b8:	f800283a 	ret

000021bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    21bc:	deffff04 	addi	sp,sp,-4
    21c0:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    21c4:	20000226 	beq	r4,zero,21d0 <alt_dev_llist_insert+0x14>
    21c8:	20800217 	ldw	r2,8(r4)
    21cc:	10000d1e 	bne	r2,zero,2204 <alt_dev_llist_insert+0x48>
    21d0:	00800034 	movhi	r2,0
    21d4:	109b4d04 	addi	r2,r2,27956
    21d8:	10800017 	ldw	r2,0(r2)
    21dc:	1000031e 	bne	r2,zero,21ec <alt_dev_llist_insert+0x30>
    21e0:	00c00074 	movhi	r3,1
    21e4:	18e29304 	addi	r3,r3,-30132
    21e8:	00000206 	br	21f4 <alt_dev_llist_insert+0x38>
    21ec:	103ee83a 	callr	r2
    21f0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    21f4:	00800584 	movi	r2,22
    21f8:	18800015 	stw	r2,0(r3)
    21fc:	00bffa84 	movi	r2,-22
    2200:	00000706 	br	2220 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2204:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2208:	28800017 	ldw	r2,0(r5)
    220c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2210:	28800017 	ldw	r2,0(r5)
    2214:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2218:	29000015 	stw	r4,0(r5)
    221c:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2220:	dfc00017 	ldw	ra,0(sp)
    2224:	dec00104 	addi	sp,sp,4
    2228:	f800283a 	ret

0000222c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    222c:	defffb04 	addi	sp,sp,-20
    2230:	dfc00415 	stw	ra,16(sp)
    2234:	dcc00315 	stw	r19,12(sp)
    2238:	dc800215 	stw	r18,8(sp)
    223c:	dc400115 	stw	r17,4(sp)
    2240:	dc000015 	stw	r16,0(sp)
    2244:	2027883a 	mov	r19,r4
    2248:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    224c:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2250:	0002bb40 	call	2bb4 <strlen>
    2254:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2258:	8c000726 	beq	r17,r16,2278 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    225c:	89000217 	ldw	r4,8(r17)
    2260:	980b883a 	mov	r5,r19
    2264:	900d883a 	mov	r6,r18
    2268:	00028980 	call	2898 <memcmp>
    226c:	10000326 	beq	r2,zero,227c <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2270:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2274:	847ff91e 	bne	r16,r17,225c <alt_find_dev+0x30>
    2278:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    227c:	8805883a 	mov	r2,r17
    2280:	dfc00417 	ldw	ra,16(sp)
    2284:	dcc00317 	ldw	r19,12(sp)
    2288:	dc800217 	ldw	r18,8(sp)
    228c:	dc400117 	ldw	r17,4(sp)
    2290:	dc000017 	ldw	r16,0(sp)
    2294:	dec00504 	addi	sp,sp,20
    2298:	f800283a 	ret

0000229c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    229c:	deffff04 	addi	sp,sp,-4
    22a0:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    22a4:	0009883a 	mov	r4,zero
    22a8:	01408004 	movi	r5,512
    22ac:	00028240 	call	2824 <alt_icache_flush>
#endif
}
    22b0:	dfc00017 	ldw	ra,0(sp)
    22b4:	dec00104 	addi	sp,sp,4
    22b8:	f800283a 	ret

000022bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    22bc:	defffe04 	addi	sp,sp,-8
    22c0:	dfc00115 	stw	ra,4(sp)
    22c4:	dc000015 	stw	r16,0(sp)
    22c8:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    22cc:	2809883a 	mov	r4,r5
    22d0:	300b883a 	mov	r5,r6
    22d4:	380d883a 	mov	r6,r7
    22d8:	00024740 	call	2474 <open>
    22dc:	1009883a 	mov	r4,r2

  if (old >= 0)
    22e0:	10000b16 	blt	r2,zero,2310 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    22e4:	10c00324 	muli	r3,r2,12
    22e8:	00800034 	movhi	r2,0
    22ec:	1098e604 	addi	r2,r2,25496
    22f0:	1887883a 	add	r3,r3,r2
    22f4:	18800017 	ldw	r2,0(r3)
    22f8:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    22fc:	18800117 	ldw	r2,4(r3)
    2300:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2304:	18800217 	ldw	r2,8(r3)
    2308:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    230c:	00025f00 	call	25f0 <alt_release_fd>
  }
} 
    2310:	dfc00117 	ldw	ra,4(sp)
    2314:	dc000017 	ldw	r16,0(sp)
    2318:	dec00204 	addi	sp,sp,8
    231c:	f800283a 	ret

00002320 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2320:	defffa04 	addi	sp,sp,-24
    2324:	dfc00515 	stw	ra,20(sp)
    2328:	dd000415 	stw	r20,16(sp)
    232c:	dcc00315 	stw	r19,12(sp)
    2330:	dc800215 	stw	r18,8(sp)
    2334:	dc400115 	stw	r17,4(sp)
    2338:	dc000015 	stw	r16,0(sp)
    233c:	2005883a 	mov	r2,r4
    2340:	2827883a 	mov	r19,r5
    2344:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2348:	04000034 	movhi	r16,0
    234c:	8418e904 	addi	r16,r16,25508
    2350:	04800044 	movi	r18,1
    2354:	04407fc4 	movi	r17,511
    2358:	8009883a 	mov	r4,r16
    235c:	100b883a 	mov	r5,r2
    2360:	900d883a 	mov	r6,r18
    2364:	880f883a 	mov	r7,r17
    2368:	00022bc0 	call	22bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    236c:	843ffd04 	addi	r16,r16,-12
    2370:	8009883a 	mov	r4,r16
    2374:	980b883a 	mov	r5,r19
    2378:	000d883a 	mov	r6,zero
    237c:	880f883a 	mov	r7,r17
    2380:	00022bc0 	call	22bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2384:	81000604 	addi	r4,r16,24
    2388:	a00b883a 	mov	r5,r20
    238c:	900d883a 	mov	r6,r18
    2390:	880f883a 	mov	r7,r17
    2394:	00022bc0 	call	22bc <alt_open_fd>
}  
    2398:	dfc00517 	ldw	ra,20(sp)
    239c:	dd000417 	ldw	r20,16(sp)
    23a0:	dcc00317 	ldw	r19,12(sp)
    23a4:	dc800217 	ldw	r18,8(sp)
    23a8:	dc400117 	ldw	r17,4(sp)
    23ac:	dc000017 	ldw	r16,0(sp)
    23b0:	dec00604 	addi	sp,sp,24
    23b4:	f800283a 	ret

000023b8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    23b8:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    23bc:	008007c4 	movi	r2,31
    23c0:	1100022e 	bgeu	r2,r4,23cc <alt_irq_register+0x14>
    23c4:	00bffa84 	movi	r2,-22
    23c8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    23cc:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    23d0:	013fff84 	movi	r4,-2
    23d4:	4104703a 	and	r2,r8,r4
    23d8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    23dc:	380490fa 	slli	r2,r7,3
    23e0:	00c00074 	movhi	r3,1
    23e4:	18e2a104 	addi	r3,r3,-30076
    23e8:	10c5883a 	add	r2,r2,r3
    23ec:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    23f0:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    23f4:	30000e26 	beq	r6,zero,2430 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    23f8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    23fc:	2904703a 	and	r2,r5,r4
    2400:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2404:	00c00074 	movhi	r3,1
    2408:	18e29004 	addi	r3,r3,-30144
    240c:	19000017 	ldw	r4,0(r3)
    2410:	00800044 	movi	r2,1
    2414:	11c4983a 	sll	r2,r2,r7
    2418:	1104b03a 	or	r2,r2,r4
    241c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2420:	18800017 	ldw	r2,0(r3)
    2424:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2428:	2801703a 	wrctl	status,r5
    242c:	00000e06 	br	2468 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2430:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2434:	00bfff84 	movi	r2,-2
    2438:	2884703a 	and	r2,r5,r2
    243c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2440:	00c00074 	movhi	r3,1
    2444:	18e29004 	addi	r3,r3,-30144
    2448:	19000017 	ldw	r4,0(r3)
    244c:	00bfff84 	movi	r2,-2
    2450:	11c4183a 	rol	r2,r2,r7
    2454:	1104703a 	and	r2,r2,r4
    2458:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    245c:	18800017 	ldw	r2,0(r3)
    2460:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2464:	2801703a 	wrctl	status,r5
    2468:	4001703a 	wrctl	status,r8
    246c:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2470:	f800283a 	ret

00002474 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2474:	defff904 	addi	sp,sp,-28
    2478:	dfc00615 	stw	ra,24(sp)
    247c:	dd400515 	stw	r21,20(sp)
    2480:	dd000415 	stw	r20,16(sp)
    2484:	dcc00315 	stw	r19,12(sp)
    2488:	dc800215 	stw	r18,8(sp)
    248c:	dc400115 	stw	r17,4(sp)
    2490:	dc000015 	stw	r16,0(sp)
    2494:	2029883a 	mov	r20,r4
    2498:	2827883a 	mov	r19,r5
    249c:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    24a0:	01400034 	movhi	r5,0
    24a4:	295b4a04 	addi	r5,r5,27944
    24a8:	000222c0 	call	222c <alt_find_dev>
    24ac:	1021883a 	mov	r16,r2
    24b0:	10000226 	beq	r2,zero,24bc <open+0x48>
    24b4:	0025883a 	mov	r18,zero
    24b8:	00000a06 	br	24e4 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    24bc:	a009883a 	mov	r4,r20
    24c0:	00026fc0 	call	26fc <alt_find_file>
    24c4:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    24c8:	1000051e 	bne	r2,zero,24e0 <open+0x6c>
    24cc:	047fffc4 	movi	r17,-1
    24d0:	043ffb44 	movi	r16,-19
    24d4:	00002b06 	br	2584 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    24d8:	043ffcc4 	movi	r16,-13
    24dc:	00002906 	br	2584 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    24e0:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    24e4:	8009883a 	mov	r4,r16
    24e8:	00027b80 	call	27b8 <alt_get_fd>
    24ec:	1023883a 	mov	r17,r2
    24f0:	10003316 	blt	r2,zero,25c0 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    24f4:	10800324 	muli	r2,r2,12
    24f8:	02000034 	movhi	r8,0
    24fc:	4218e604 	addi	r8,r8,25496
    2500:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2504:	00900034 	movhi	r2,16384
    2508:	10bfffc4 	addi	r2,r2,-1
    250c:	9886703a 	and	r3,r19,r2
    2510:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2514:	9004c03a 	cmpne	r2,r18,zero
    2518:	1000121e 	bne	r2,zero,2564 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    251c:	18900034 	orhi	r2,r3,16384
    2520:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2524:	00800034 	movhi	r2,0
    2528:	109b4c04 	addi	r2,r2,27952
    252c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2530:	21800017 	ldw	r6,0(r4)
    2534:	000b883a 	mov	r5,zero
    2538:	4007883a 	mov	r3,r8
    253c:	02400044 	movi	r9,1
    2540:	02000304 	movi	r8,12
    2544:	18800017 	ldw	r2,0(r3)
    2548:	1180031e 	bne	r2,r6,2558 <open+0xe4>
    254c:	18800217 	ldw	r2,8(r3)
    2550:	1000010e 	bge	r2,zero,2558 <open+0xe4>
    2554:	193fe01e 	bne	r3,r4,24d8 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2558:	2a4b883a 	add	r5,r5,r9
    255c:	1a07883a 	add	r3,r3,r8
    2560:	397ff82e 	bgeu	r7,r5,2544 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2564:	80800317 	ldw	r2,12(r16)
    2568:	10001726 	beq	r2,zero,25c8 <open+0x154>
    256c:	a00b883a 	mov	r5,r20
    2570:	980d883a 	mov	r6,r19
    2574:	a80f883a 	mov	r7,r21
    2578:	103ee83a 	callr	r2
    257c:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2580:	1000110e 	bge	r2,zero,25c8 <open+0x154>
  {
    alt_release_fd (index);  
    2584:	8809883a 	mov	r4,r17
    2588:	00025f00 	call	25f0 <alt_release_fd>
    258c:	00800034 	movhi	r2,0
    2590:	109b4d04 	addi	r2,r2,27956
    2594:	10800017 	ldw	r2,0(r2)
    2598:	1000031e 	bne	r2,zero,25a8 <open+0x134>
    259c:	00c00074 	movhi	r3,1
    25a0:	18e29304 	addi	r3,r3,-30132
    25a4:	00000206 	br	25b0 <open+0x13c>
    25a8:	103ee83a 	callr	r2
    25ac:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    25b0:	0405c83a 	sub	r2,zero,r16
    25b4:	18800015 	stw	r2,0(r3)
    25b8:	047fffc4 	movi	r17,-1
    25bc:	00000206 	br	25c8 <open+0x154>
    25c0:	1021883a 	mov	r16,r2
    25c4:	003fef06 	br	2584 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    25c8:	8805883a 	mov	r2,r17
    25cc:	dfc00617 	ldw	ra,24(sp)
    25d0:	dd400517 	ldw	r21,20(sp)
    25d4:	dd000417 	ldw	r20,16(sp)
    25d8:	dcc00317 	ldw	r19,12(sp)
    25dc:	dc800217 	ldw	r18,8(sp)
    25e0:	dc400117 	ldw	r17,4(sp)
    25e4:	dc000017 	ldw	r16,0(sp)
    25e8:	dec00704 	addi	sp,sp,28
    25ec:	f800283a 	ret

000025f0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    25f0:	00800084 	movi	r2,2
    25f4:	1100060e 	bge	r2,r4,2610 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    25f8:	20800324 	muli	r2,r4,12
    25fc:	00c00034 	movhi	r3,0
    2600:	18d8e604 	addi	r3,r3,25496
    2604:	10c5883a 	add	r2,r2,r3
    2608:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    260c:	10000015 	stw	zero,0(r2)
    2610:	f800283a 	ret

00002614 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2614:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2618:	00bfff84 	movi	r2,-2
    261c:	2884703a 	and	r2,r5,r2
    2620:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2624:	20c00017 	ldw	r3,0(r4)
    2628:	20800117 	ldw	r2,4(r4)
    262c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2630:	20800117 	ldw	r2,4(r4)
    2634:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2638:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    263c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2640:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    2644:	f800283a 	ret

00002648 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2648:	defffd04 	addi	sp,sp,-12
    264c:	dfc00215 	stw	ra,8(sp)
    2650:	dc400115 	stw	r17,4(sp)
    2654:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2658:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    265c:	d0a74a17 	ldw	r2,-25304(gp)
    2660:	10800044 	addi	r2,r2,1
    2664:	d0a74a15 	stw	r2,-25304(gp)
    2668:	00001b06 	br	26d8 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    266c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2670:	80800403 	ldbu	r2,16(r16)
    2674:	10000326 	beq	r2,zero,2684 <alt_tick+0x3c>
    2678:	d0a74a17 	ldw	r2,-25304(gp)
    267c:	1000011e 	bne	r2,zero,2684 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    2680:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2684:	d0e74a17 	ldw	r3,-25304(gp)
    2688:	80800217 	ldw	r2,8(r16)
    268c:	18801136 	bltu	r3,r2,26d4 <alt_tick+0x8c>
    2690:	80800403 	ldbu	r2,16(r16)
    2694:	10000f1e 	bne	r2,zero,26d4 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    2698:	80800317 	ldw	r2,12(r16)
    269c:	81000517 	ldw	r4,20(r16)
    26a0:	103ee83a 	callr	r2
    26a4:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    26a8:	1000031e 	bne	r2,zero,26b8 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    26ac:	8009883a 	mov	r4,r16
    26b0:	00026140 	call	2614 <alt_alarm_stop>
    26b4:	00000706 	br	26d4 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    26b8:	80800217 	ldw	r2,8(r16)
    26bc:	1885883a 	add	r2,r3,r2
    26c0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    26c4:	d0e74a17 	ldw	r3,-25304(gp)
    26c8:	10c0022e 	bgeu	r2,r3,26d4 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    26cc:	00800044 	movi	r2,1
    26d0:	80800405 	stb	r2,16(r16)
    26d4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    26d8:	d0a00704 	addi	r2,gp,-32740
    26dc:	80bfe31e 	bne	r16,r2,266c <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    26e0:	dfc00217 	ldw	ra,8(sp)
    26e4:	dc400117 	ldw	r17,4(sp)
    26e8:	dc000017 	ldw	r16,0(sp)
    26ec:	dec00304 	addi	sp,sp,12
    26f0:	f800283a 	ret

000026f4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    26f4:	000170fa 	wrctl	ienable,zero
}
    26f8:	f800283a 	ret

000026fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    26fc:	defff904 	addi	sp,sp,-28
    2700:	dfc00615 	stw	ra,24(sp)
    2704:	dd400515 	stw	r21,20(sp)
    2708:	dd000415 	stw	r20,16(sp)
    270c:	dcc00315 	stw	r19,12(sp)
    2710:	dc800215 	stw	r18,8(sp)
    2714:	dc400115 	stw	r17,4(sp)
    2718:	dc000015 	stw	r16,0(sp)
    271c:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2720:	00800034 	movhi	r2,0
    2724:	109b4804 	addi	r2,r2,27936
    2728:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    272c:	102b883a 	mov	r21,r2
    2730:	88801626 	beq	r17,r2,278c <alt_find_file+0x90>
    2734:	053fffc4 	movi	r20,-1
    2738:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    273c:	8c000217 	ldw	r16,8(r17)
    2740:	8009883a 	mov	r4,r16
    2744:	0002bb40 	call	2bb4 <strlen>
    2748:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    274c:	8085883a 	add	r2,r16,r2
    2750:	1505883a 	add	r2,r2,r20
    2754:	10800007 	ldb	r2,0(r2)
    2758:	14c0011e 	bne	r2,r19,2760 <alt_find_file+0x64>
    {
      len -= 1;
    275c:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2760:	1c85883a 	add	r2,r3,r18
    2764:	10800007 	ldb	r2,0(r2)
    2768:	14c00126 	beq	r2,r19,2770 <alt_find_file+0x74>
    276c:	1000051e 	bne	r2,zero,2784 <alt_find_file+0x88>
    2770:	8009883a 	mov	r4,r16
    2774:	900b883a 	mov	r5,r18
    2778:	180d883a 	mov	r6,r3
    277c:	00028980 	call	2898 <memcmp>
    2780:	10000326 	beq	r2,zero,2790 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2784:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2788:	8d7fec1e 	bne	r17,r21,273c <alt_find_file+0x40>
    278c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    2790:	8805883a 	mov	r2,r17
    2794:	dfc00617 	ldw	ra,24(sp)
    2798:	dd400517 	ldw	r21,20(sp)
    279c:	dd000417 	ldw	r20,16(sp)
    27a0:	dcc00317 	ldw	r19,12(sp)
    27a4:	dc800217 	ldw	r18,8(sp)
    27a8:	dc400117 	ldw	r17,4(sp)
    27ac:	dc000017 	ldw	r16,0(sp)
    27b0:	dec00704 	addi	sp,sp,28
    27b4:	f800283a 	ret

000027b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    27b8:	000b883a 	mov	r5,zero
    27bc:	00c00034 	movhi	r3,0
    27c0:	18d8e604 	addi	r3,r3,25496
    27c4:	02000304 	movi	r8,12
    27c8:	02400034 	movhi	r9,0
    27cc:	4a5b4c04 	addi	r9,r9,27952
    27d0:	01c00044 	movi	r7,1
    27d4:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    27d8:	18800017 	ldw	r2,0(r3)
    27dc:	10000c1e 	bne	r2,zero,2810 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    27e0:	2a05383a 	mul	r2,r5,r8
    27e4:	00c00034 	movhi	r3,0
    27e8:	18d8e604 	addi	r3,r3,25496
    27ec:	10c5883a 	add	r2,r2,r3
    27f0:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    27f4:	48800017 	ldw	r2,0(r9)
    27f8:	11400216 	blt	r2,r5,2804 <alt_get_fd+0x4c>
    27fc:	2805883a 	mov	r2,r5
    2800:	f800283a 	ret
      {
        alt_max_fd = i;
    2804:	49400015 	stw	r5,0(r9)
    2808:	2805883a 	mov	r2,r5
    280c:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2810:	29cb883a 	add	r5,r5,r7
    2814:	1a07883a 	add	r3,r3,r8
    2818:	29bfef1e 	bne	r5,r6,27d8 <alt_get_fd+0x20>
    281c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    2820:	f800283a 	ret

00002824 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    2824:	2007883a 	mov	r3,r4
    2828:	00808004 	movi	r2,512
    282c:	1140012e 	bgeu	r2,r5,2834 <alt_icache_flush+0x10>
    2830:	100b883a 	mov	r5,r2
    2834:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2838:	1940042e 	bgeu	r3,r5,284c <alt_icache_flush+0x28>
    283c:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2840:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2844:	1887883a 	add	r3,r3,r2
    2848:	197ffd36 	bltu	r3,r5,2840 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    284c:	208007cc 	andi	r2,r4,31
    2850:	10000126 	beq	r2,zero,2858 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2854:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2858:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    285c:	f800283a 	ret

00002860 <exit>:
    2860:	defffe04 	addi	sp,sp,-8
    2864:	000b883a 	mov	r5,zero
    2868:	dc000015 	stw	r16,0(sp)
    286c:	dfc00115 	stw	ra,4(sp)
    2870:	2021883a 	mov	r16,r4
    2874:	0002eb40 	call	2eb4 <__call_exitprocs>
    2878:	00800034 	movhi	r2,0
    287c:	109b5204 	addi	r2,r2,27976
    2880:	11000017 	ldw	r4,0(r2)
    2884:	20800f17 	ldw	r2,60(r4)
    2888:	10000126 	beq	r2,zero,2890 <exit+0x30>
    288c:	103ee83a 	callr	r2
    2890:	8009883a 	mov	r4,r16
    2894:	00049840 	call	4984 <_exit>

00002898 <memcmp>:
    2898:	00c000c4 	movi	r3,3
    289c:	1980032e 	bgeu	r3,r6,28ac <memcmp+0x14>
    28a0:	2144b03a 	or	r2,r4,r5
    28a4:	10c4703a 	and	r2,r2,r3
    28a8:	10000f26 	beq	r2,zero,28e8 <memcmp+0x50>
    28ac:	31ffffc4 	addi	r7,r6,-1
    28b0:	3000061e 	bne	r6,zero,28cc <memcmp+0x34>
    28b4:	00000a06 	br	28e0 <memcmp+0x48>
    28b8:	39ffffc4 	addi	r7,r7,-1
    28bc:	00bfffc4 	movi	r2,-1
    28c0:	21000044 	addi	r4,r4,1
    28c4:	29400044 	addi	r5,r5,1
    28c8:	38800526 	beq	r7,r2,28e0 <memcmp+0x48>
    28cc:	20c00003 	ldbu	r3,0(r4)
    28d0:	28800003 	ldbu	r2,0(r5)
    28d4:	18bff826 	beq	r3,r2,28b8 <memcmp+0x20>
    28d8:	1885c83a 	sub	r2,r3,r2
    28dc:	f800283a 	ret
    28e0:	0005883a 	mov	r2,zero
    28e4:	f800283a 	ret
    28e8:	180f883a 	mov	r7,r3
    28ec:	20c00017 	ldw	r3,0(r4)
    28f0:	28800017 	ldw	r2,0(r5)
    28f4:	18bfed1e 	bne	r3,r2,28ac <memcmp+0x14>
    28f8:	31bfff04 	addi	r6,r6,-4
    28fc:	21000104 	addi	r4,r4,4
    2900:	29400104 	addi	r5,r5,4
    2904:	39bff936 	bltu	r7,r6,28ec <memcmp+0x54>
    2908:	003fe806 	br	28ac <memcmp+0x14>

0000290c <putc>:
    290c:	defffc04 	addi	sp,sp,-16
    2910:	dc800215 	stw	r18,8(sp)
    2914:	04800034 	movhi	r18,0
    2918:	949b5104 	addi	r18,r18,27972
    291c:	90c00017 	ldw	r3,0(r18)
    2920:	dc400115 	stw	r17,4(sp)
    2924:	dc000015 	stw	r16,0(sp)
    2928:	dfc00315 	stw	ra,12(sp)
    292c:	2023883a 	mov	r17,r4
    2930:	2821883a 	mov	r16,r5
    2934:	18000226 	beq	r3,zero,2940 <putc+0x34>
    2938:	18800e17 	ldw	r2,56(r3)
    293c:	10001126 	beq	r2,zero,2984 <putc+0x78>
    2940:	80800217 	ldw	r2,8(r16)
    2944:	10ffffc4 	addi	r3,r2,-1
    2948:	80c00215 	stw	r3,8(r16)
    294c:	18001316 	blt	r3,zero,299c <putc+0x90>
    2950:	80800017 	ldw	r2,0(r16)
    2954:	14400005 	stb	r17,0(r2)
    2958:	80c00017 	ldw	r3,0(r16)
    295c:	18800044 	addi	r2,r3,1
    2960:	18c00003 	ldbu	r3,0(r3)
    2964:	80800015 	stw	r2,0(r16)
    2968:	1805883a 	mov	r2,r3
    296c:	dfc00317 	ldw	ra,12(sp)
    2970:	dc800217 	ldw	r18,8(sp)
    2974:	dc400117 	ldw	r17,4(sp)
    2978:	dc000017 	ldw	r16,0(sp)
    297c:	dec00404 	addi	sp,sp,16
    2980:	f800283a 	ret
    2984:	1809883a 	mov	r4,r3
    2988:	00032fc0 	call	32fc <__sinit>
    298c:	80800217 	ldw	r2,8(r16)
    2990:	10ffffc4 	addi	r3,r2,-1
    2994:	80c00215 	stw	r3,8(r16)
    2998:	183fed0e 	bge	r3,zero,2950 <putc+0x44>
    299c:	80800617 	ldw	r2,24(r16)
    29a0:	18800f16 	blt	r3,r2,29e0 <putc+0xd4>
    29a4:	80800017 	ldw	r2,0(r16)
    29a8:	14400005 	stb	r17,0(r2)
    29ac:	81000017 	ldw	r4,0(r16)
    29b0:	00800284 	movi	r2,10
    29b4:	20c00003 	ldbu	r3,0(r4)
    29b8:	18801226 	beq	r3,r2,2a04 <putc+0xf8>
    29bc:	20800044 	addi	r2,r4,1
    29c0:	80800015 	stw	r2,0(r16)
    29c4:	1805883a 	mov	r2,r3
    29c8:	dfc00317 	ldw	ra,12(sp)
    29cc:	dc800217 	ldw	r18,8(sp)
    29d0:	dc400117 	ldw	r17,4(sp)
    29d4:	dc000017 	ldw	r16,0(sp)
    29d8:	dec00404 	addi	sp,sp,16
    29dc:	f800283a 	ret
    29e0:	91000017 	ldw	r4,0(r18)
    29e4:	880b883a 	mov	r5,r17
    29e8:	800d883a 	mov	r6,r16
    29ec:	dfc00317 	ldw	ra,12(sp)
    29f0:	dc800217 	ldw	r18,8(sp)
    29f4:	dc400117 	ldw	r17,4(sp)
    29f8:	dc000017 	ldw	r16,0(sp)
    29fc:	dec00404 	addi	sp,sp,16
    2a00:	0002c281 	jmpi	2c28 <__swbuf_r>
    2a04:	91000017 	ldw	r4,0(r18)
    2a08:	180b883a 	mov	r5,r3
    2a0c:	003ff606 	br	29e8 <putc+0xdc>

00002a10 <_putc_r>:
    2a10:	defffc04 	addi	sp,sp,-16
    2a14:	dc400215 	stw	r17,8(sp)
    2a18:	dc000115 	stw	r16,4(sp)
    2a1c:	dfc00315 	stw	ra,12(sp)
    2a20:	2021883a 	mov	r16,r4
    2a24:	2823883a 	mov	r17,r5
    2a28:	20000226 	beq	r4,zero,2a34 <_putc_r+0x24>
    2a2c:	20800e17 	ldw	r2,56(r4)
    2a30:	10001026 	beq	r2,zero,2a74 <_putc_r+0x64>
    2a34:	30800217 	ldw	r2,8(r6)
    2a38:	10ffffc4 	addi	r3,r2,-1
    2a3c:	30c00215 	stw	r3,8(r6)
    2a40:	18001316 	blt	r3,zero,2a90 <_putc_r+0x80>
    2a44:	30800017 	ldw	r2,0(r6)
    2a48:	14400005 	stb	r17,0(r2)
    2a4c:	30c00017 	ldw	r3,0(r6)
    2a50:	18800044 	addi	r2,r3,1
    2a54:	18c00003 	ldbu	r3,0(r3)
    2a58:	30800015 	stw	r2,0(r6)
    2a5c:	1805883a 	mov	r2,r3
    2a60:	dfc00317 	ldw	ra,12(sp)
    2a64:	dc400217 	ldw	r17,8(sp)
    2a68:	dc000117 	ldw	r16,4(sp)
    2a6c:	dec00404 	addi	sp,sp,16
    2a70:	f800283a 	ret
    2a74:	d9800015 	stw	r6,0(sp)
    2a78:	00032fc0 	call	32fc <__sinit>
    2a7c:	d9800017 	ldw	r6,0(sp)
    2a80:	30800217 	ldw	r2,8(r6)
    2a84:	10ffffc4 	addi	r3,r2,-1
    2a88:	30c00215 	stw	r3,8(r6)
    2a8c:	183fed0e 	bge	r3,zero,2a44 <_putc_r+0x34>
    2a90:	30800617 	ldw	r2,24(r6)
    2a94:	18800e16 	blt	r3,r2,2ad0 <_putc_r+0xc0>
    2a98:	30800017 	ldw	r2,0(r6)
    2a9c:	14400005 	stb	r17,0(r2)
    2aa0:	31000017 	ldw	r4,0(r6)
    2aa4:	00800284 	movi	r2,10
    2aa8:	20c00003 	ldbu	r3,0(r4)
    2aac:	18800f26 	beq	r3,r2,2aec <_putc_r+0xdc>
    2ab0:	20800044 	addi	r2,r4,1
    2ab4:	30800015 	stw	r2,0(r6)
    2ab8:	1805883a 	mov	r2,r3
    2abc:	dfc00317 	ldw	ra,12(sp)
    2ac0:	dc400217 	ldw	r17,8(sp)
    2ac4:	dc000117 	ldw	r16,4(sp)
    2ac8:	dec00404 	addi	sp,sp,16
    2acc:	f800283a 	ret
    2ad0:	8009883a 	mov	r4,r16
    2ad4:	880b883a 	mov	r5,r17
    2ad8:	dfc00317 	ldw	ra,12(sp)
    2adc:	dc400217 	ldw	r17,8(sp)
    2ae0:	dc000117 	ldw	r16,4(sp)
    2ae4:	dec00404 	addi	sp,sp,16
    2ae8:	0002c281 	jmpi	2c28 <__swbuf_r>
    2aec:	8009883a 	mov	r4,r16
    2af0:	180b883a 	mov	r5,r3
    2af4:	003ff806 	br	2ad8 <_putc_r+0xc8>

00002af8 <strcmp>:
    2af8:	2144b03a 	or	r2,r4,r5
    2afc:	108000cc 	andi	r2,r2,3
    2b00:	10001d1e 	bne	r2,zero,2b78 <strcmp+0x80>
    2b04:	200f883a 	mov	r7,r4
    2b08:	28800017 	ldw	r2,0(r5)
    2b0c:	21000017 	ldw	r4,0(r4)
    2b10:	280d883a 	mov	r6,r5
    2b14:	2080161e 	bne	r4,r2,2b70 <strcmp+0x78>
    2b18:	023fbff4 	movhi	r8,65279
    2b1c:	423fbfc4 	addi	r8,r8,-257
    2b20:	2207883a 	add	r3,r4,r8
    2b24:	01602074 	movhi	r5,32897
    2b28:	29602004 	addi	r5,r5,-32640
    2b2c:	1946703a 	and	r3,r3,r5
    2b30:	0104303a 	nor	r2,zero,r4
    2b34:	10c4703a 	and	r2,r2,r3
    2b38:	10001c1e 	bne	r2,zero,2bac <strcmp+0xb4>
    2b3c:	4013883a 	mov	r9,r8
    2b40:	2811883a 	mov	r8,r5
    2b44:	00000106 	br	2b4c <strcmp+0x54>
    2b48:	1800181e 	bne	r3,zero,2bac <strcmp+0xb4>
    2b4c:	39c00104 	addi	r7,r7,4
    2b50:	39000017 	ldw	r4,0(r7)
    2b54:	31800104 	addi	r6,r6,4
    2b58:	31400017 	ldw	r5,0(r6)
    2b5c:	2245883a 	add	r2,r4,r9
    2b60:	1204703a 	and	r2,r2,r8
    2b64:	0106303a 	nor	r3,zero,r4
    2b68:	1886703a 	and	r3,r3,r2
    2b6c:	217ff626 	beq	r4,r5,2b48 <strcmp+0x50>
    2b70:	3809883a 	mov	r4,r7
    2b74:	300b883a 	mov	r5,r6
    2b78:	20c00007 	ldb	r3,0(r4)
    2b7c:	1800051e 	bne	r3,zero,2b94 <strcmp+0x9c>
    2b80:	00000606 	br	2b9c <strcmp+0xa4>
    2b84:	21000044 	addi	r4,r4,1
    2b88:	20c00007 	ldb	r3,0(r4)
    2b8c:	29400044 	addi	r5,r5,1
    2b90:	18000226 	beq	r3,zero,2b9c <strcmp+0xa4>
    2b94:	28800007 	ldb	r2,0(r5)
    2b98:	18bffa26 	beq	r3,r2,2b84 <strcmp+0x8c>
    2b9c:	20c00003 	ldbu	r3,0(r4)
    2ba0:	28800003 	ldbu	r2,0(r5)
    2ba4:	1885c83a 	sub	r2,r3,r2
    2ba8:	f800283a 	ret
    2bac:	0005883a 	mov	r2,zero
    2bb0:	f800283a 	ret

00002bb4 <strlen>:
    2bb4:	208000cc 	andi	r2,r4,3
    2bb8:	2011883a 	mov	r8,r4
    2bbc:	1000161e 	bne	r2,zero,2c18 <strlen+0x64>
    2bc0:	20c00017 	ldw	r3,0(r4)
    2bc4:	017fbff4 	movhi	r5,65279
    2bc8:	297fbfc4 	addi	r5,r5,-257
    2bcc:	01e02074 	movhi	r7,32897
    2bd0:	39e02004 	addi	r7,r7,-32640
    2bd4:	1945883a 	add	r2,r3,r5
    2bd8:	11c4703a 	and	r2,r2,r7
    2bdc:	00c6303a 	nor	r3,zero,r3
    2be0:	1886703a 	and	r3,r3,r2
    2be4:	18000c1e 	bne	r3,zero,2c18 <strlen+0x64>
    2be8:	280d883a 	mov	r6,r5
    2bec:	380b883a 	mov	r5,r7
    2bf0:	21000104 	addi	r4,r4,4
    2bf4:	20800017 	ldw	r2,0(r4)
    2bf8:	1187883a 	add	r3,r2,r6
    2bfc:	1946703a 	and	r3,r3,r5
    2c00:	0084303a 	nor	r2,zero,r2
    2c04:	10c4703a 	and	r2,r2,r3
    2c08:	103ff926 	beq	r2,zero,2bf0 <strlen+0x3c>
    2c0c:	20800007 	ldb	r2,0(r4)
    2c10:	10000326 	beq	r2,zero,2c20 <strlen+0x6c>
    2c14:	21000044 	addi	r4,r4,1
    2c18:	20800007 	ldb	r2,0(r4)
    2c1c:	103ffd1e 	bne	r2,zero,2c14 <strlen+0x60>
    2c20:	2205c83a 	sub	r2,r4,r8
    2c24:	f800283a 	ret

00002c28 <__swbuf_r>:
    2c28:	defffc04 	addi	sp,sp,-16
    2c2c:	dc400215 	stw	r17,8(sp)
    2c30:	dc000115 	stw	r16,4(sp)
    2c34:	dfc00315 	stw	ra,12(sp)
    2c38:	2023883a 	mov	r17,r4
    2c3c:	2821883a 	mov	r16,r5
    2c40:	20000226 	beq	r4,zero,2c4c <__swbuf_r+0x24>
    2c44:	20800e17 	ldw	r2,56(r4)
    2c48:	10002f26 	beq	r2,zero,2d08 <__swbuf_r+0xe0>
    2c4c:	3080030b 	ldhu	r2,12(r6)
    2c50:	30c00617 	ldw	r3,24(r6)
    2c54:	1080020c 	andi	r2,r2,8
    2c58:	30c00215 	stw	r3,8(r6)
    2c5c:	10002226 	beq	r2,zero,2ce8 <__swbuf_r+0xc0>
    2c60:	30c00417 	ldw	r3,16(r6)
    2c64:	18002026 	beq	r3,zero,2ce8 <__swbuf_r+0xc0>
    2c68:	31000017 	ldw	r4,0(r6)
    2c6c:	30800517 	ldw	r2,20(r6)
    2c70:	20c7c83a 	sub	r3,r4,r3
    2c74:	18802f0e 	bge	r3,r2,2d34 <__swbuf_r+0x10c>
    2c78:	19400044 	addi	r5,r3,1
    2c7c:	30800217 	ldw	r2,8(r6)
    2c80:	84003fcc 	andi	r16,r16,255
    2c84:	20c00044 	addi	r3,r4,1
    2c88:	10bfffc4 	addi	r2,r2,-1
    2c8c:	30800215 	stw	r2,8(r6)
    2c90:	24000005 	stb	r16,0(r4)
    2c94:	30800517 	ldw	r2,20(r6)
    2c98:	30c00015 	stw	r3,0(r6)
    2c9c:	11400c26 	beq	r2,r5,2cd0 <__swbuf_r+0xa8>
    2ca0:	3080030b 	ldhu	r2,12(r6)
    2ca4:	1080004c 	andi	r2,r2,1
    2ca8:	1005003a 	cmpeq	r2,r2,zero
    2cac:	10000626 	beq	r2,zero,2cc8 <__swbuf_r+0xa0>
    2cb0:	8005883a 	mov	r2,r16
    2cb4:	dfc00317 	ldw	ra,12(sp)
    2cb8:	dc400217 	ldw	r17,8(sp)
    2cbc:	dc000117 	ldw	r16,4(sp)
    2cc0:	dec00404 	addi	sp,sp,16
    2cc4:	f800283a 	ret
    2cc8:	00800284 	movi	r2,10
    2ccc:	80bff81e 	bne	r16,r2,2cb0 <__swbuf_r+0x88>
    2cd0:	8809883a 	mov	r4,r17
    2cd4:	300b883a 	mov	r5,r6
    2cd8:	00030640 	call	3064 <_fflush_r>
    2cdc:	103ff426 	beq	r2,zero,2cb0 <__swbuf_r+0x88>
    2ce0:	043fffc4 	movi	r16,-1
    2ce4:	003ff206 	br	2cb0 <__swbuf_r+0x88>
    2ce8:	300b883a 	mov	r5,r6
    2cec:	8809883a 	mov	r4,r17
    2cf0:	d9800015 	stw	r6,0(sp)
    2cf4:	0002d740 	call	2d74 <__swsetup_r>
    2cf8:	d9800017 	ldw	r6,0(sp)
    2cfc:	1000061e 	bne	r2,zero,2d18 <__swbuf_r+0xf0>
    2d00:	30c00417 	ldw	r3,16(r6)
    2d04:	003fd806 	br	2c68 <__swbuf_r+0x40>
    2d08:	d9800015 	stw	r6,0(sp)
    2d0c:	00032fc0 	call	32fc <__sinit>
    2d10:	d9800017 	ldw	r6,0(sp)
    2d14:	003fcd06 	br	2c4c <__swbuf_r+0x24>
    2d18:	3080030b 	ldhu	r2,12(r6)
    2d1c:	00c00244 	movi	r3,9
    2d20:	043fffc4 	movi	r16,-1
    2d24:	10801014 	ori	r2,r2,64
    2d28:	3080030d 	sth	r2,12(r6)
    2d2c:	88c00015 	stw	r3,0(r17)
    2d30:	003fdf06 	br	2cb0 <__swbuf_r+0x88>
    2d34:	300b883a 	mov	r5,r6
    2d38:	8809883a 	mov	r4,r17
    2d3c:	d9800015 	stw	r6,0(sp)
    2d40:	00030640 	call	3064 <_fflush_r>
    2d44:	d9800017 	ldw	r6,0(sp)
    2d48:	103fe51e 	bne	r2,zero,2ce0 <__swbuf_r+0xb8>
    2d4c:	31000017 	ldw	r4,0(r6)
    2d50:	01400044 	movi	r5,1
    2d54:	003fc906 	br	2c7c <__swbuf_r+0x54>

00002d58 <__swbuf>:
    2d58:	01800034 	movhi	r6,0
    2d5c:	319b5104 	addi	r6,r6,27972
    2d60:	2007883a 	mov	r3,r4
    2d64:	31000017 	ldw	r4,0(r6)
    2d68:	280d883a 	mov	r6,r5
    2d6c:	180b883a 	mov	r5,r3
    2d70:	0002c281 	jmpi	2c28 <__swbuf_r>

00002d74 <__swsetup_r>:
    2d74:	00800034 	movhi	r2,0
    2d78:	109b5104 	addi	r2,r2,27972
    2d7c:	10c00017 	ldw	r3,0(r2)
    2d80:	defffd04 	addi	sp,sp,-12
    2d84:	dc400115 	stw	r17,4(sp)
    2d88:	dc000015 	stw	r16,0(sp)
    2d8c:	dfc00215 	stw	ra,8(sp)
    2d90:	2023883a 	mov	r17,r4
    2d94:	2821883a 	mov	r16,r5
    2d98:	18000226 	beq	r3,zero,2da4 <__swsetup_r+0x30>
    2d9c:	18800e17 	ldw	r2,56(r3)
    2da0:	10001f26 	beq	r2,zero,2e20 <__swsetup_r+0xac>
    2da4:	8100030b 	ldhu	r4,12(r16)
    2da8:	2080020c 	andi	r2,r4,8
    2dac:	10002826 	beq	r2,zero,2e50 <__swsetup_r+0xdc>
    2db0:	81400417 	ldw	r5,16(r16)
    2db4:	28001d26 	beq	r5,zero,2e2c <__swsetup_r+0xb8>
    2db8:	2080004c 	andi	r2,r4,1
    2dbc:	1005003a 	cmpeq	r2,r2,zero
    2dc0:	10000b26 	beq	r2,zero,2df0 <__swsetup_r+0x7c>
    2dc4:	2080008c 	andi	r2,r4,2
    2dc8:	10001226 	beq	r2,zero,2e14 <__swsetup_r+0xa0>
    2dcc:	0005883a 	mov	r2,zero
    2dd0:	80800215 	stw	r2,8(r16)
    2dd4:	28000b26 	beq	r5,zero,2e04 <__swsetup_r+0x90>
    2dd8:	0005883a 	mov	r2,zero
    2ddc:	dfc00217 	ldw	ra,8(sp)
    2de0:	dc400117 	ldw	r17,4(sp)
    2de4:	dc000017 	ldw	r16,0(sp)
    2de8:	dec00304 	addi	sp,sp,12
    2dec:	f800283a 	ret
    2df0:	80800517 	ldw	r2,20(r16)
    2df4:	80000215 	stw	zero,8(r16)
    2df8:	0085c83a 	sub	r2,zero,r2
    2dfc:	80800615 	stw	r2,24(r16)
    2e00:	283ff51e 	bne	r5,zero,2dd8 <__swsetup_r+0x64>
    2e04:	2080200c 	andi	r2,r4,128
    2e08:	103ff326 	beq	r2,zero,2dd8 <__swsetup_r+0x64>
    2e0c:	00bfffc4 	movi	r2,-1
    2e10:	003ff206 	br	2ddc <__swsetup_r+0x68>
    2e14:	80800517 	ldw	r2,20(r16)
    2e18:	80800215 	stw	r2,8(r16)
    2e1c:	003fed06 	br	2dd4 <__swsetup_r+0x60>
    2e20:	1809883a 	mov	r4,r3
    2e24:	00032fc0 	call	32fc <__sinit>
    2e28:	003fde06 	br	2da4 <__swsetup_r+0x30>
    2e2c:	20c0a00c 	andi	r3,r4,640
    2e30:	00808004 	movi	r2,512
    2e34:	18bfe026 	beq	r3,r2,2db8 <__swsetup_r+0x44>
    2e38:	8809883a 	mov	r4,r17
    2e3c:	800b883a 	mov	r5,r16
    2e40:	0003b140 	call	3b14 <__smakebuf_r>
    2e44:	8100030b 	ldhu	r4,12(r16)
    2e48:	81400417 	ldw	r5,16(r16)
    2e4c:	003fda06 	br	2db8 <__swsetup_r+0x44>
    2e50:	2080040c 	andi	r2,r4,16
    2e54:	103fed26 	beq	r2,zero,2e0c <__swsetup_r+0x98>
    2e58:	2080010c 	andi	r2,r4,4
    2e5c:	10001226 	beq	r2,zero,2ea8 <__swsetup_r+0x134>
    2e60:	81400c17 	ldw	r5,48(r16)
    2e64:	28000526 	beq	r5,zero,2e7c <__swsetup_r+0x108>
    2e68:	80801004 	addi	r2,r16,64
    2e6c:	28800226 	beq	r5,r2,2e78 <__swsetup_r+0x104>
    2e70:	8809883a 	mov	r4,r17
    2e74:	00036800 	call	3680 <_free_r>
    2e78:	80000c15 	stw	zero,48(r16)
    2e7c:	8080030b 	ldhu	r2,12(r16)
    2e80:	81400417 	ldw	r5,16(r16)
    2e84:	80000115 	stw	zero,4(r16)
    2e88:	10bff6cc 	andi	r2,r2,65499
    2e8c:	8080030d 	sth	r2,12(r16)
    2e90:	81400015 	stw	r5,0(r16)
    2e94:	8080030b 	ldhu	r2,12(r16)
    2e98:	10800214 	ori	r2,r2,8
    2e9c:	113fffcc 	andi	r4,r2,65535
    2ea0:	8080030d 	sth	r2,12(r16)
    2ea4:	003fc306 	br	2db4 <__swsetup_r+0x40>
    2ea8:	81400417 	ldw	r5,16(r16)
    2eac:	003ff906 	br	2e94 <__swsetup_r+0x120>

00002eb0 <register_fini>:
    2eb0:	f800283a 	ret

00002eb4 <__call_exitprocs>:
    2eb4:	00800034 	movhi	r2,0
    2eb8:	109b5204 	addi	r2,r2,27976
    2ebc:	10800017 	ldw	r2,0(r2)
    2ec0:	defff304 	addi	sp,sp,-52
    2ec4:	df000b15 	stw	fp,44(sp)
    2ec8:	d8800115 	stw	r2,4(sp)
    2ecc:	00800034 	movhi	r2,0
    2ed0:	10800004 	addi	r2,r2,0
    2ed4:	1005003a 	cmpeq	r2,r2,zero
    2ed8:	d8800215 	stw	r2,8(sp)
    2edc:	d8800117 	ldw	r2,4(sp)
    2ee0:	dd400815 	stw	r21,32(sp)
    2ee4:	dd000715 	stw	r20,28(sp)
    2ee8:	10805204 	addi	r2,r2,328
    2eec:	dfc00c15 	stw	ra,48(sp)
    2ef0:	ddc00a15 	stw	r23,40(sp)
    2ef4:	dd800915 	stw	r22,36(sp)
    2ef8:	dcc00615 	stw	r19,24(sp)
    2efc:	dc800515 	stw	r18,20(sp)
    2f00:	dc400415 	stw	r17,16(sp)
    2f04:	dc000315 	stw	r16,12(sp)
    2f08:	282b883a 	mov	r21,r5
    2f0c:	2039883a 	mov	fp,r4
    2f10:	d8800015 	stw	r2,0(sp)
    2f14:	2829003a 	cmpeq	r20,r5,zero
    2f18:	d8800117 	ldw	r2,4(sp)
    2f1c:	14405217 	ldw	r17,328(r2)
    2f20:	88001026 	beq	r17,zero,2f64 <__call_exitprocs+0xb0>
    2f24:	ddc00017 	ldw	r23,0(sp)
    2f28:	88800117 	ldw	r2,4(r17)
    2f2c:	8c802204 	addi	r18,r17,136
    2f30:	143fffc4 	addi	r16,r2,-1
    2f34:	80000916 	blt	r16,zero,2f5c <__call_exitprocs+0xa8>
    2f38:	05bfffc4 	movi	r22,-1
    2f3c:	a000151e 	bne	r20,zero,2f94 <__call_exitprocs+0xe0>
    2f40:	8409883a 	add	r4,r16,r16
    2f44:	2105883a 	add	r2,r4,r4
    2f48:	1485883a 	add	r2,r2,r18
    2f4c:	10c02017 	ldw	r3,128(r2)
    2f50:	a8c01126 	beq	r21,r3,2f98 <__call_exitprocs+0xe4>
    2f54:	843fffc4 	addi	r16,r16,-1
    2f58:	85bff81e 	bne	r16,r22,2f3c <__call_exitprocs+0x88>
    2f5c:	d8800217 	ldw	r2,8(sp)
    2f60:	10003126 	beq	r2,zero,3028 <__call_exitprocs+0x174>
    2f64:	dfc00c17 	ldw	ra,48(sp)
    2f68:	df000b17 	ldw	fp,44(sp)
    2f6c:	ddc00a17 	ldw	r23,40(sp)
    2f70:	dd800917 	ldw	r22,36(sp)
    2f74:	dd400817 	ldw	r21,32(sp)
    2f78:	dd000717 	ldw	r20,28(sp)
    2f7c:	dcc00617 	ldw	r19,24(sp)
    2f80:	dc800517 	ldw	r18,20(sp)
    2f84:	dc400417 	ldw	r17,16(sp)
    2f88:	dc000317 	ldw	r16,12(sp)
    2f8c:	dec00d04 	addi	sp,sp,52
    2f90:	f800283a 	ret
    2f94:	8409883a 	add	r4,r16,r16
    2f98:	88c00117 	ldw	r3,4(r17)
    2f9c:	2105883a 	add	r2,r4,r4
    2fa0:	1445883a 	add	r2,r2,r17
    2fa4:	18ffffc4 	addi	r3,r3,-1
    2fa8:	11800217 	ldw	r6,8(r2)
    2fac:	1c001526 	beq	r3,r16,3004 <__call_exitprocs+0x150>
    2fb0:	10000215 	stw	zero,8(r2)
    2fb4:	303fe726 	beq	r6,zero,2f54 <__call_exitprocs+0xa0>
    2fb8:	00c00044 	movi	r3,1
    2fbc:	1c06983a 	sll	r3,r3,r16
    2fc0:	90804017 	ldw	r2,256(r18)
    2fc4:	8cc00117 	ldw	r19,4(r17)
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	10001426 	beq	r2,zero,3020 <__call_exitprocs+0x16c>
    2fd0:	90804117 	ldw	r2,260(r18)
    2fd4:	1884703a 	and	r2,r3,r2
    2fd8:	10000c1e 	bne	r2,zero,300c <__call_exitprocs+0x158>
    2fdc:	2105883a 	add	r2,r4,r4
    2fe0:	1485883a 	add	r2,r2,r18
    2fe4:	11400017 	ldw	r5,0(r2)
    2fe8:	e009883a 	mov	r4,fp
    2fec:	303ee83a 	callr	r6
    2ff0:	88800117 	ldw	r2,4(r17)
    2ff4:	98bfc81e 	bne	r19,r2,2f18 <__call_exitprocs+0x64>
    2ff8:	b8800017 	ldw	r2,0(r23)
    2ffc:	147fd526 	beq	r2,r17,2f54 <__call_exitprocs+0xa0>
    3000:	003fc506 	br	2f18 <__call_exitprocs+0x64>
    3004:	8c000115 	stw	r16,4(r17)
    3008:	003fea06 	br	2fb4 <__call_exitprocs+0x100>
    300c:	2105883a 	add	r2,r4,r4
    3010:	1485883a 	add	r2,r2,r18
    3014:	11000017 	ldw	r4,0(r2)
    3018:	303ee83a 	callr	r6
    301c:	003ff406 	br	2ff0 <__call_exitprocs+0x13c>
    3020:	303ee83a 	callr	r6
    3024:	003ff206 	br	2ff0 <__call_exitprocs+0x13c>
    3028:	88800117 	ldw	r2,4(r17)
    302c:	1000081e 	bne	r2,zero,3050 <__call_exitprocs+0x19c>
    3030:	89000017 	ldw	r4,0(r17)
    3034:	20000726 	beq	r4,zero,3054 <__call_exitprocs+0x1a0>
    3038:	b9000015 	stw	r4,0(r23)
    303c:	8809883a 	mov	r4,r17
    3040:	00000000 	call	0 <__reset>
    3044:	bc400017 	ldw	r17,0(r23)
    3048:	883fb71e 	bne	r17,zero,2f28 <__call_exitprocs+0x74>
    304c:	003fc506 	br	2f64 <__call_exitprocs+0xb0>
    3050:	89000017 	ldw	r4,0(r17)
    3054:	882f883a 	mov	r23,r17
    3058:	2023883a 	mov	r17,r4
    305c:	883fb21e 	bne	r17,zero,2f28 <__call_exitprocs+0x74>
    3060:	003fc006 	br	2f64 <__call_exitprocs+0xb0>

00003064 <_fflush_r>:
    3064:	defffb04 	addi	sp,sp,-20
    3068:	dcc00315 	stw	r19,12(sp)
    306c:	dc800215 	stw	r18,8(sp)
    3070:	dfc00415 	stw	ra,16(sp)
    3074:	dc400115 	stw	r17,4(sp)
    3078:	dc000015 	stw	r16,0(sp)
    307c:	2027883a 	mov	r19,r4
    3080:	2825883a 	mov	r18,r5
    3084:	20000226 	beq	r4,zero,3090 <_fflush_r+0x2c>
    3088:	20800e17 	ldw	r2,56(r4)
    308c:	10005626 	beq	r2,zero,31e8 <_fflush_r+0x184>
    3090:	9100030b 	ldhu	r4,12(r18)
    3094:	20ffffcc 	andi	r3,r4,65535
    3098:	18e0001c 	xori	r3,r3,32768
    309c:	18e00004 	addi	r3,r3,-32768
    30a0:	1880020c 	andi	r2,r3,8
    30a4:	1000261e 	bne	r2,zero,3140 <_fflush_r+0xdc>
    30a8:	90c00117 	ldw	r3,4(r18)
    30ac:	20820014 	ori	r2,r4,2048
    30b0:	9080030d 	sth	r2,12(r18)
    30b4:	1009883a 	mov	r4,r2
    30b8:	00c0400e 	bge	zero,r3,31bc <_fflush_r+0x158>
    30bc:	92000a17 	ldw	r8,40(r18)
    30c0:	40004026 	beq	r8,zero,31c4 <_fflush_r+0x160>
    30c4:	2084000c 	andi	r2,r4,4096
    30c8:	10005326 	beq	r2,zero,3218 <_fflush_r+0x1b4>
    30cc:	94001417 	ldw	r16,80(r18)
    30d0:	9080030b 	ldhu	r2,12(r18)
    30d4:	1080010c 	andi	r2,r2,4
    30d8:	1000481e 	bne	r2,zero,31fc <_fflush_r+0x198>
    30dc:	91400717 	ldw	r5,28(r18)
    30e0:	9809883a 	mov	r4,r19
    30e4:	800d883a 	mov	r6,r16
    30e8:	000f883a 	mov	r7,zero
    30ec:	403ee83a 	callr	r8
    30f0:	8080261e 	bne	r16,r2,318c <_fflush_r+0x128>
    30f4:	9080030b 	ldhu	r2,12(r18)
    30f8:	91000417 	ldw	r4,16(r18)
    30fc:	90000115 	stw	zero,4(r18)
    3100:	10bdffcc 	andi	r2,r2,63487
    3104:	10ffffcc 	andi	r3,r2,65535
    3108:	18c4000c 	andi	r3,r3,4096
    310c:	9080030d 	sth	r2,12(r18)
    3110:	91000015 	stw	r4,0(r18)
    3114:	18002b26 	beq	r3,zero,31c4 <_fflush_r+0x160>
    3118:	0007883a 	mov	r3,zero
    311c:	1805883a 	mov	r2,r3
    3120:	94001415 	stw	r16,80(r18)
    3124:	dfc00417 	ldw	ra,16(sp)
    3128:	dcc00317 	ldw	r19,12(sp)
    312c:	dc800217 	ldw	r18,8(sp)
    3130:	dc400117 	ldw	r17,4(sp)
    3134:	dc000017 	ldw	r16,0(sp)
    3138:	dec00504 	addi	sp,sp,20
    313c:	f800283a 	ret
    3140:	94400417 	ldw	r17,16(r18)
    3144:	88001f26 	beq	r17,zero,31c4 <_fflush_r+0x160>
    3148:	90800017 	ldw	r2,0(r18)
    314c:	18c000cc 	andi	r3,r3,3
    3150:	94400015 	stw	r17,0(r18)
    3154:	1461c83a 	sub	r16,r2,r17
    3158:	18002526 	beq	r3,zero,31f0 <_fflush_r+0x18c>
    315c:	0005883a 	mov	r2,zero
    3160:	90800215 	stw	r2,8(r18)
    3164:	0400170e 	bge	zero,r16,31c4 <_fflush_r+0x160>
    3168:	90c00917 	ldw	r3,36(r18)
    316c:	91400717 	ldw	r5,28(r18)
    3170:	880d883a 	mov	r6,r17
    3174:	800f883a 	mov	r7,r16
    3178:	9809883a 	mov	r4,r19
    317c:	183ee83a 	callr	r3
    3180:	88a3883a 	add	r17,r17,r2
    3184:	80a1c83a 	sub	r16,r16,r2
    3188:	00bff616 	blt	zero,r2,3164 <_fflush_r+0x100>
    318c:	9080030b 	ldhu	r2,12(r18)
    3190:	00ffffc4 	movi	r3,-1
    3194:	10801014 	ori	r2,r2,64
    3198:	9080030d 	sth	r2,12(r18)
    319c:	1805883a 	mov	r2,r3
    31a0:	dfc00417 	ldw	ra,16(sp)
    31a4:	dcc00317 	ldw	r19,12(sp)
    31a8:	dc800217 	ldw	r18,8(sp)
    31ac:	dc400117 	ldw	r17,4(sp)
    31b0:	dc000017 	ldw	r16,0(sp)
    31b4:	dec00504 	addi	sp,sp,20
    31b8:	f800283a 	ret
    31bc:	90800f17 	ldw	r2,60(r18)
    31c0:	00bfbe16 	blt	zero,r2,30bc <_fflush_r+0x58>
    31c4:	0007883a 	mov	r3,zero
    31c8:	1805883a 	mov	r2,r3
    31cc:	dfc00417 	ldw	ra,16(sp)
    31d0:	dcc00317 	ldw	r19,12(sp)
    31d4:	dc800217 	ldw	r18,8(sp)
    31d8:	dc400117 	ldw	r17,4(sp)
    31dc:	dc000017 	ldw	r16,0(sp)
    31e0:	dec00504 	addi	sp,sp,20
    31e4:	f800283a 	ret
    31e8:	00032fc0 	call	32fc <__sinit>
    31ec:	003fa806 	br	3090 <_fflush_r+0x2c>
    31f0:	90800517 	ldw	r2,20(r18)
    31f4:	90800215 	stw	r2,8(r18)
    31f8:	003fda06 	br	3164 <_fflush_r+0x100>
    31fc:	90800117 	ldw	r2,4(r18)
    3200:	90c00c17 	ldw	r3,48(r18)
    3204:	80a1c83a 	sub	r16,r16,r2
    3208:	183fb426 	beq	r3,zero,30dc <_fflush_r+0x78>
    320c:	90800f17 	ldw	r2,60(r18)
    3210:	80a1c83a 	sub	r16,r16,r2
    3214:	003fb106 	br	30dc <_fflush_r+0x78>
    3218:	91400717 	ldw	r5,28(r18)
    321c:	9809883a 	mov	r4,r19
    3220:	000d883a 	mov	r6,zero
    3224:	01c00044 	movi	r7,1
    3228:	403ee83a 	callr	r8
    322c:	1021883a 	mov	r16,r2
    3230:	00bfffc4 	movi	r2,-1
    3234:	80800226 	beq	r16,r2,3240 <_fflush_r+0x1dc>
    3238:	92000a17 	ldw	r8,40(r18)
    323c:	003fa406 	br	30d0 <_fflush_r+0x6c>
    3240:	98c00017 	ldw	r3,0(r19)
    3244:	00800744 	movi	r2,29
    3248:	18bfde26 	beq	r3,r2,31c4 <_fflush_r+0x160>
    324c:	9080030b 	ldhu	r2,12(r18)
    3250:	8007883a 	mov	r3,r16
    3254:	10801014 	ori	r2,r2,64
    3258:	9080030d 	sth	r2,12(r18)
    325c:	003fcf06 	br	319c <_fflush_r+0x138>

00003260 <fflush>:
    3260:	01400034 	movhi	r5,0
    3264:	294c1904 	addi	r5,r5,12388
    3268:	2007883a 	mov	r3,r4
    326c:	20000526 	beq	r4,zero,3284 <fflush+0x24>
    3270:	00800034 	movhi	r2,0
    3274:	109b5104 	addi	r2,r2,27972
    3278:	11000017 	ldw	r4,0(r2)
    327c:	180b883a 	mov	r5,r3
    3280:	00030641 	jmpi	3064 <_fflush_r>
    3284:	00800034 	movhi	r2,0
    3288:	109b5204 	addi	r2,r2,27976
    328c:	11000017 	ldw	r4,0(r2)
    3290:	00039941 	jmpi	3994 <_fwalk_reent>

00003294 <std>:
    3294:	00800034 	movhi	r2,0
    3298:	10911604 	addi	r2,r2,17496
    329c:	20800b15 	stw	r2,44(r4)
    32a0:	00800034 	movhi	r2,0
    32a4:	10915104 	addi	r2,r2,17732
    32a8:	20800815 	stw	r2,32(r4)
    32ac:	00c00034 	movhi	r3,0
    32b0:	18d13204 	addi	r3,r3,17608
    32b4:	00800034 	movhi	r2,0
    32b8:	10911804 	addi	r2,r2,17504
    32bc:	2140030d 	sth	r5,12(r4)
    32c0:	2180038d 	sth	r6,14(r4)
    32c4:	20c00915 	stw	r3,36(r4)
    32c8:	20800a15 	stw	r2,40(r4)
    32cc:	20000015 	stw	zero,0(r4)
    32d0:	20000115 	stw	zero,4(r4)
    32d4:	20000215 	stw	zero,8(r4)
    32d8:	20000415 	stw	zero,16(r4)
    32dc:	20000515 	stw	zero,20(r4)
    32e0:	20000615 	stw	zero,24(r4)
    32e4:	21000715 	stw	r4,28(r4)
    32e8:	f800283a 	ret

000032ec <__sfp_lock_acquire>:
    32ec:	f800283a 	ret

000032f0 <__sfp_lock_release>:
    32f0:	f800283a 	ret

000032f4 <__sinit_lock_acquire>:
    32f4:	f800283a 	ret

000032f8 <__sinit_lock_release>:
    32f8:	f800283a 	ret

000032fc <__sinit>:
    32fc:	20800e17 	ldw	r2,56(r4)
    3300:	defffd04 	addi	sp,sp,-12
    3304:	dc400115 	stw	r17,4(sp)
    3308:	dc000015 	stw	r16,0(sp)
    330c:	dfc00215 	stw	ra,8(sp)
    3310:	04400044 	movi	r17,1
    3314:	01400104 	movi	r5,4
    3318:	000d883a 	mov	r6,zero
    331c:	2021883a 	mov	r16,r4
    3320:	2200bb04 	addi	r8,r4,748
    3324:	200f883a 	mov	r7,r4
    3328:	10000526 	beq	r2,zero,3340 <__sinit+0x44>
    332c:	dfc00217 	ldw	ra,8(sp)
    3330:	dc400117 	ldw	r17,4(sp)
    3334:	dc000017 	ldw	r16,0(sp)
    3338:	dec00304 	addi	sp,sp,12
    333c:	f800283a 	ret
    3340:	21000117 	ldw	r4,4(r4)
    3344:	00800034 	movhi	r2,0
    3348:	108cf804 	addi	r2,r2,13280
    334c:	00c000c4 	movi	r3,3
    3350:	80800f15 	stw	r2,60(r16)
    3354:	80c0b915 	stw	r3,740(r16)
    3358:	8200ba15 	stw	r8,744(r16)
    335c:	84400e15 	stw	r17,56(r16)
    3360:	8000b815 	stw	zero,736(r16)
    3364:	00032940 	call	3294 <std>
    3368:	81000217 	ldw	r4,8(r16)
    336c:	880d883a 	mov	r6,r17
    3370:	800f883a 	mov	r7,r16
    3374:	01400284 	movi	r5,10
    3378:	00032940 	call	3294 <std>
    337c:	81000317 	ldw	r4,12(r16)
    3380:	800f883a 	mov	r7,r16
    3384:	01400484 	movi	r5,18
    3388:	01800084 	movi	r6,2
    338c:	dfc00217 	ldw	ra,8(sp)
    3390:	dc400117 	ldw	r17,4(sp)
    3394:	dc000017 	ldw	r16,0(sp)
    3398:	dec00304 	addi	sp,sp,12
    339c:	00032941 	jmpi	3294 <std>

000033a0 <__fp_lock>:
    33a0:	0005883a 	mov	r2,zero
    33a4:	f800283a 	ret

000033a8 <__fp_unlock>:
    33a8:	0005883a 	mov	r2,zero
    33ac:	f800283a 	ret

000033b0 <__fp_unlock_all>:
    33b0:	00800034 	movhi	r2,0
    33b4:	109b5104 	addi	r2,r2,27972
    33b8:	11000017 	ldw	r4,0(r2)
    33bc:	01400034 	movhi	r5,0
    33c0:	294cea04 	addi	r5,r5,13224
    33c4:	0003a5c1 	jmpi	3a5c <_fwalk>

000033c8 <__fp_lock_all>:
    33c8:	00800034 	movhi	r2,0
    33cc:	109b5104 	addi	r2,r2,27972
    33d0:	11000017 	ldw	r4,0(r2)
    33d4:	01400034 	movhi	r5,0
    33d8:	294ce804 	addi	r5,r5,13216
    33dc:	0003a5c1 	jmpi	3a5c <_fwalk>

000033e0 <_cleanup_r>:
    33e0:	01400034 	movhi	r5,0
    33e4:	2951e704 	addi	r5,r5,18332
    33e8:	0003a5c1 	jmpi	3a5c <_fwalk>

000033ec <_cleanup>:
    33ec:	00800034 	movhi	r2,0
    33f0:	109b5204 	addi	r2,r2,27976
    33f4:	11000017 	ldw	r4,0(r2)
    33f8:	00033e01 	jmpi	33e0 <_cleanup_r>

000033fc <__sfmoreglue>:
    33fc:	defffc04 	addi	sp,sp,-16
    3400:	dc400115 	stw	r17,4(sp)
    3404:	2c401724 	muli	r17,r5,92
    3408:	dc800215 	stw	r18,8(sp)
    340c:	2825883a 	mov	r18,r5
    3410:	89400304 	addi	r5,r17,12
    3414:	dc000015 	stw	r16,0(sp)
    3418:	dfc00315 	stw	ra,12(sp)
    341c:	0003ca80 	call	3ca8 <_malloc_r>
    3420:	0021883a 	mov	r16,zero
    3424:	880d883a 	mov	r6,r17
    3428:	000b883a 	mov	r5,zero
    342c:	10000626 	beq	r2,zero,3448 <__sfmoreglue+0x4c>
    3430:	11000304 	addi	r4,r2,12
    3434:	14800115 	stw	r18,4(r2)
    3438:	10000015 	stw	zero,0(r2)
    343c:	11000215 	stw	r4,8(r2)
    3440:	1021883a 	mov	r16,r2
    3444:	000085c0 	call	85c <memset>
    3448:	8005883a 	mov	r2,r16
    344c:	dfc00317 	ldw	ra,12(sp)
    3450:	dc800217 	ldw	r18,8(sp)
    3454:	dc400117 	ldw	r17,4(sp)
    3458:	dc000017 	ldw	r16,0(sp)
    345c:	dec00404 	addi	sp,sp,16
    3460:	f800283a 	ret

00003464 <__sfp>:
    3464:	defffd04 	addi	sp,sp,-12
    3468:	00800034 	movhi	r2,0
    346c:	109b5204 	addi	r2,r2,27976
    3470:	dc000015 	stw	r16,0(sp)
    3474:	14000017 	ldw	r16,0(r2)
    3478:	dc400115 	stw	r17,4(sp)
    347c:	dfc00215 	stw	ra,8(sp)
    3480:	80800e17 	ldw	r2,56(r16)
    3484:	2023883a 	mov	r17,r4
    3488:	10002626 	beq	r2,zero,3524 <__sfp+0xc0>
    348c:	8400b804 	addi	r16,r16,736
    3490:	80800117 	ldw	r2,4(r16)
    3494:	81000217 	ldw	r4,8(r16)
    3498:	10ffffc4 	addi	r3,r2,-1
    349c:	18000916 	blt	r3,zero,34c4 <__sfp+0x60>
    34a0:	2080030f 	ldh	r2,12(r4)
    34a4:	10000b26 	beq	r2,zero,34d4 <__sfp+0x70>
    34a8:	017fffc4 	movi	r5,-1
    34ac:	00000206 	br	34b8 <__sfp+0x54>
    34b0:	2080030f 	ldh	r2,12(r4)
    34b4:	10000726 	beq	r2,zero,34d4 <__sfp+0x70>
    34b8:	18ffffc4 	addi	r3,r3,-1
    34bc:	21001704 	addi	r4,r4,92
    34c0:	197ffb1e 	bne	r3,r5,34b0 <__sfp+0x4c>
    34c4:	80800017 	ldw	r2,0(r16)
    34c8:	10001926 	beq	r2,zero,3530 <__sfp+0xcc>
    34cc:	1021883a 	mov	r16,r2
    34d0:	003fef06 	br	3490 <__sfp+0x2c>
    34d4:	00bfffc4 	movi	r2,-1
    34d8:	00c00044 	movi	r3,1
    34dc:	2080038d 	sth	r2,14(r4)
    34e0:	20c0030d 	sth	r3,12(r4)
    34e4:	20000015 	stw	zero,0(r4)
    34e8:	20000215 	stw	zero,8(r4)
    34ec:	20000115 	stw	zero,4(r4)
    34f0:	20000415 	stw	zero,16(r4)
    34f4:	20000515 	stw	zero,20(r4)
    34f8:	20000615 	stw	zero,24(r4)
    34fc:	20000c15 	stw	zero,48(r4)
    3500:	20000d15 	stw	zero,52(r4)
    3504:	20001115 	stw	zero,68(r4)
    3508:	20001215 	stw	zero,72(r4)
    350c:	2005883a 	mov	r2,r4
    3510:	dfc00217 	ldw	ra,8(sp)
    3514:	dc400117 	ldw	r17,4(sp)
    3518:	dc000017 	ldw	r16,0(sp)
    351c:	dec00304 	addi	sp,sp,12
    3520:	f800283a 	ret
    3524:	8009883a 	mov	r4,r16
    3528:	00032fc0 	call	32fc <__sinit>
    352c:	003fd706 	br	348c <__sfp+0x28>
    3530:	8809883a 	mov	r4,r17
    3534:	01400104 	movi	r5,4
    3538:	00033fc0 	call	33fc <__sfmoreglue>
    353c:	80800015 	stw	r2,0(r16)
    3540:	103fe21e 	bne	r2,zero,34cc <__sfp+0x68>
    3544:	00800304 	movi	r2,12
    3548:	0009883a 	mov	r4,zero
    354c:	88800015 	stw	r2,0(r17)
    3550:	003fee06 	br	350c <__sfp+0xa8>

00003554 <_malloc_trim_r>:
    3554:	defffb04 	addi	sp,sp,-20
    3558:	dcc00315 	stw	r19,12(sp)
    355c:	04c00034 	movhi	r19,0
    3560:	9cda4604 	addi	r19,r19,26904
    3564:	dc800215 	stw	r18,8(sp)
    3568:	dc400115 	stw	r17,4(sp)
    356c:	dc000015 	stw	r16,0(sp)
    3570:	2823883a 	mov	r17,r5
    3574:	2025883a 	mov	r18,r4
    3578:	dfc00415 	stw	ra,16(sp)
    357c:	0004b340 	call	4b34 <__malloc_lock>
    3580:	98800217 	ldw	r2,8(r19)
    3584:	9009883a 	mov	r4,r18
    3588:	000b883a 	mov	r5,zero
    358c:	10c00117 	ldw	r3,4(r2)
    3590:	00bfff04 	movi	r2,-4
    3594:	18a0703a 	and	r16,r3,r2
    3598:	8463c83a 	sub	r17,r16,r17
    359c:	8c43fbc4 	addi	r17,r17,4079
    35a0:	8822d33a 	srli	r17,r17,12
    35a4:	0083ffc4 	movi	r2,4095
    35a8:	8c7fffc4 	addi	r17,r17,-1
    35ac:	8822933a 	slli	r17,r17,12
    35b0:	1440060e 	bge	r2,r17,35cc <_malloc_trim_r+0x78>
    35b4:	00043e80 	call	43e8 <_sbrk_r>
    35b8:	98c00217 	ldw	r3,8(r19)
    35bc:	9009883a 	mov	r4,r18
    35c0:	044bc83a 	sub	r5,zero,r17
    35c4:	80c7883a 	add	r3,r16,r3
    35c8:	10c00926 	beq	r2,r3,35f0 <_malloc_trim_r+0x9c>
    35cc:	0004b380 	call	4b38 <__malloc_unlock>
    35d0:	0005883a 	mov	r2,zero
    35d4:	dfc00417 	ldw	ra,16(sp)
    35d8:	dcc00317 	ldw	r19,12(sp)
    35dc:	dc800217 	ldw	r18,8(sp)
    35e0:	dc400117 	ldw	r17,4(sp)
    35e4:	dc000017 	ldw	r16,0(sp)
    35e8:	dec00504 	addi	sp,sp,20
    35ec:	f800283a 	ret
    35f0:	9009883a 	mov	r4,r18
    35f4:	00043e80 	call	43e8 <_sbrk_r>
    35f8:	844dc83a 	sub	r6,r16,r17
    35fc:	00ffffc4 	movi	r3,-1
    3600:	9009883a 	mov	r4,r18
    3604:	000b883a 	mov	r5,zero
    3608:	01c00074 	movhi	r7,1
    360c:	39e29704 	addi	r7,r7,-30116
    3610:	31800054 	ori	r6,r6,1
    3614:	10c00926 	beq	r2,r3,363c <_malloc_trim_r+0xe8>
    3618:	38800017 	ldw	r2,0(r7)
    361c:	98c00217 	ldw	r3,8(r19)
    3620:	9009883a 	mov	r4,r18
    3624:	1445c83a 	sub	r2,r2,r17
    3628:	38800015 	stw	r2,0(r7)
    362c:	19800115 	stw	r6,4(r3)
    3630:	0004b380 	call	4b38 <__malloc_unlock>
    3634:	00800044 	movi	r2,1
    3638:	003fe606 	br	35d4 <_malloc_trim_r+0x80>
    363c:	00043e80 	call	43e8 <_sbrk_r>
    3640:	99800217 	ldw	r6,8(r19)
    3644:	100f883a 	mov	r7,r2
    3648:	9009883a 	mov	r4,r18
    364c:	1187c83a 	sub	r3,r2,r6
    3650:	008003c4 	movi	r2,15
    3654:	19400054 	ori	r5,r3,1
    3658:	10ffdc0e 	bge	r2,r3,35cc <_malloc_trim_r+0x78>
    365c:	00800034 	movhi	r2,0
    3660:	109b5404 	addi	r2,r2,27984
    3664:	10c00017 	ldw	r3,0(r2)
    3668:	00800074 	movhi	r2,1
    366c:	10a29704 	addi	r2,r2,-30116
    3670:	31400115 	stw	r5,4(r6)
    3674:	38c7c83a 	sub	r3,r7,r3
    3678:	10c00015 	stw	r3,0(r2)
    367c:	003fd306 	br	35cc <_malloc_trim_r+0x78>

00003680 <_free_r>:
    3680:	defffd04 	addi	sp,sp,-12
    3684:	dc400115 	stw	r17,4(sp)
    3688:	dc000015 	stw	r16,0(sp)
    368c:	dfc00215 	stw	ra,8(sp)
    3690:	2821883a 	mov	r16,r5
    3694:	2023883a 	mov	r17,r4
    3698:	28005a26 	beq	r5,zero,3804 <_free_r+0x184>
    369c:	0004b340 	call	4b34 <__malloc_lock>
    36a0:	823ffe04 	addi	r8,r16,-8
    36a4:	41400117 	ldw	r5,4(r8)
    36a8:	00bfff84 	movi	r2,-2
    36ac:	02800034 	movhi	r10,0
    36b0:	529a4604 	addi	r10,r10,26904
    36b4:	288e703a 	and	r7,r5,r2
    36b8:	41cd883a 	add	r6,r8,r7
    36bc:	30c00117 	ldw	r3,4(r6)
    36c0:	51000217 	ldw	r4,8(r10)
    36c4:	00bfff04 	movi	r2,-4
    36c8:	1892703a 	and	r9,r3,r2
    36cc:	5017883a 	mov	r11,r10
    36d0:	31006726 	beq	r6,r4,3870 <_free_r+0x1f0>
    36d4:	2880004c 	andi	r2,r5,1
    36d8:	1005003a 	cmpeq	r2,r2,zero
    36dc:	32400115 	stw	r9,4(r6)
    36e0:	10001a1e 	bne	r2,zero,374c <_free_r+0xcc>
    36e4:	000b883a 	mov	r5,zero
    36e8:	3247883a 	add	r3,r6,r9
    36ec:	18800117 	ldw	r2,4(r3)
    36f0:	1080004c 	andi	r2,r2,1
    36f4:	1000231e 	bne	r2,zero,3784 <_free_r+0x104>
    36f8:	280ac03a 	cmpne	r5,r5,zero
    36fc:	3a4f883a 	add	r7,r7,r9
    3700:	2800451e 	bne	r5,zero,3818 <_free_r+0x198>
    3704:	31000217 	ldw	r4,8(r6)
    3708:	00800034 	movhi	r2,0
    370c:	109a4804 	addi	r2,r2,26912
    3710:	20807b26 	beq	r4,r2,3900 <_free_r+0x280>
    3714:	30800317 	ldw	r2,12(r6)
    3718:	3a07883a 	add	r3,r7,r8
    371c:	19c00015 	stw	r7,0(r3)
    3720:	11000215 	stw	r4,8(r2)
    3724:	20800315 	stw	r2,12(r4)
    3728:	38800054 	ori	r2,r7,1
    372c:	40800115 	stw	r2,4(r8)
    3730:	28001a26 	beq	r5,zero,379c <_free_r+0x11c>
    3734:	8809883a 	mov	r4,r17
    3738:	dfc00217 	ldw	ra,8(sp)
    373c:	dc400117 	ldw	r17,4(sp)
    3740:	dc000017 	ldw	r16,0(sp)
    3744:	dec00304 	addi	sp,sp,12
    3748:	0004b381 	jmpi	4b38 <__malloc_unlock>
    374c:	80bffe17 	ldw	r2,-8(r16)
    3750:	50c00204 	addi	r3,r10,8
    3754:	4091c83a 	sub	r8,r8,r2
    3758:	41000217 	ldw	r4,8(r8)
    375c:	388f883a 	add	r7,r7,r2
    3760:	20c06126 	beq	r4,r3,38e8 <_free_r+0x268>
    3764:	40800317 	ldw	r2,12(r8)
    3768:	3247883a 	add	r3,r6,r9
    376c:	000b883a 	mov	r5,zero
    3770:	11000215 	stw	r4,8(r2)
    3774:	20800315 	stw	r2,12(r4)
    3778:	18800117 	ldw	r2,4(r3)
    377c:	1080004c 	andi	r2,r2,1
    3780:	103fdd26 	beq	r2,zero,36f8 <_free_r+0x78>
    3784:	38800054 	ori	r2,r7,1
    3788:	3a07883a 	add	r3,r7,r8
    378c:	280ac03a 	cmpne	r5,r5,zero
    3790:	40800115 	stw	r2,4(r8)
    3794:	19c00015 	stw	r7,0(r3)
    3798:	283fe61e 	bne	r5,zero,3734 <_free_r+0xb4>
    379c:	00807fc4 	movi	r2,511
    37a0:	11c01f2e 	bgeu	r2,r7,3820 <_free_r+0x1a0>
    37a4:	3806d27a 	srli	r3,r7,9
    37a8:	1800481e 	bne	r3,zero,38cc <_free_r+0x24c>
    37ac:	3804d0fa 	srli	r2,r7,3
    37b0:	100690fa 	slli	r3,r2,3
    37b4:	1acd883a 	add	r6,r3,r11
    37b8:	31400217 	ldw	r5,8(r6)
    37bc:	31405926 	beq	r6,r5,3924 <_free_r+0x2a4>
    37c0:	28800117 	ldw	r2,4(r5)
    37c4:	00ffff04 	movi	r3,-4
    37c8:	10c4703a 	and	r2,r2,r3
    37cc:	3880022e 	bgeu	r7,r2,37d8 <_free_r+0x158>
    37d0:	29400217 	ldw	r5,8(r5)
    37d4:	317ffa1e 	bne	r6,r5,37c0 <_free_r+0x140>
    37d8:	29800317 	ldw	r6,12(r5)
    37dc:	41800315 	stw	r6,12(r8)
    37e0:	41400215 	stw	r5,8(r8)
    37e4:	8809883a 	mov	r4,r17
    37e8:	2a000315 	stw	r8,12(r5)
    37ec:	32000215 	stw	r8,8(r6)
    37f0:	dfc00217 	ldw	ra,8(sp)
    37f4:	dc400117 	ldw	r17,4(sp)
    37f8:	dc000017 	ldw	r16,0(sp)
    37fc:	dec00304 	addi	sp,sp,12
    3800:	0004b381 	jmpi	4b38 <__malloc_unlock>
    3804:	dfc00217 	ldw	ra,8(sp)
    3808:	dc400117 	ldw	r17,4(sp)
    380c:	dc000017 	ldw	r16,0(sp)
    3810:	dec00304 	addi	sp,sp,12
    3814:	f800283a 	ret
    3818:	31000217 	ldw	r4,8(r6)
    381c:	003fbd06 	br	3714 <_free_r+0x94>
    3820:	3806d0fa 	srli	r3,r7,3
    3824:	00800044 	movi	r2,1
    3828:	51400117 	ldw	r5,4(r10)
    382c:	180890fa 	slli	r4,r3,3
    3830:	1807d0ba 	srai	r3,r3,2
    3834:	22c9883a 	add	r4,r4,r11
    3838:	21800217 	ldw	r6,8(r4)
    383c:	10c4983a 	sll	r2,r2,r3
    3840:	41000315 	stw	r4,12(r8)
    3844:	41800215 	stw	r6,8(r8)
    3848:	288ab03a 	or	r5,r5,r2
    384c:	22000215 	stw	r8,8(r4)
    3850:	8809883a 	mov	r4,r17
    3854:	51400115 	stw	r5,4(r10)
    3858:	32000315 	stw	r8,12(r6)
    385c:	dfc00217 	ldw	ra,8(sp)
    3860:	dc400117 	ldw	r17,4(sp)
    3864:	dc000017 	ldw	r16,0(sp)
    3868:	dec00304 	addi	sp,sp,12
    386c:	0004b381 	jmpi	4b38 <__malloc_unlock>
    3870:	2880004c 	andi	r2,r5,1
    3874:	3a4d883a 	add	r6,r7,r9
    3878:	1000071e 	bne	r2,zero,3898 <_free_r+0x218>
    387c:	80bffe17 	ldw	r2,-8(r16)
    3880:	4091c83a 	sub	r8,r8,r2
    3884:	41000317 	ldw	r4,12(r8)
    3888:	40c00217 	ldw	r3,8(r8)
    388c:	308d883a 	add	r6,r6,r2
    3890:	20c00215 	stw	r3,8(r4)
    3894:	19000315 	stw	r4,12(r3)
    3898:	00800034 	movhi	r2,0
    389c:	109b5304 	addi	r2,r2,27980
    38a0:	11000017 	ldw	r4,0(r2)
    38a4:	30c00054 	ori	r3,r6,1
    38a8:	52000215 	stw	r8,8(r10)
    38ac:	40c00115 	stw	r3,4(r8)
    38b0:	313fa036 	bltu	r6,r4,3734 <_free_r+0xb4>
    38b4:	00800074 	movhi	r2,1
    38b8:	10a29404 	addi	r2,r2,-30128
    38bc:	11400017 	ldw	r5,0(r2)
    38c0:	8809883a 	mov	r4,r17
    38c4:	00035540 	call	3554 <_malloc_trim_r>
    38c8:	003f9a06 	br	3734 <_free_r+0xb4>
    38cc:	00800104 	movi	r2,4
    38d0:	10c0072e 	bgeu	r2,r3,38f0 <_free_r+0x270>
    38d4:	00800504 	movi	r2,20
    38d8:	10c01936 	bltu	r2,r3,3940 <_free_r+0x2c0>
    38dc:	188016c4 	addi	r2,r3,91
    38e0:	100690fa 	slli	r3,r2,3
    38e4:	003fb306 	br	37b4 <_free_r+0x134>
    38e8:	01400044 	movi	r5,1
    38ec:	003f7e06 	br	36e8 <_free_r+0x68>
    38f0:	3804d1ba 	srli	r2,r7,6
    38f4:	10800e04 	addi	r2,r2,56
    38f8:	100690fa 	slli	r3,r2,3
    38fc:	003fad06 	br	37b4 <_free_r+0x134>
    3900:	22000315 	stw	r8,12(r4)
    3904:	22000215 	stw	r8,8(r4)
    3908:	3a05883a 	add	r2,r7,r8
    390c:	38c00054 	ori	r3,r7,1
    3910:	11c00015 	stw	r7,0(r2)
    3914:	41000215 	stw	r4,8(r8)
    3918:	40c00115 	stw	r3,4(r8)
    391c:	41000315 	stw	r4,12(r8)
    3920:	003f8406 	br	3734 <_free_r+0xb4>
    3924:	1005d0ba 	srai	r2,r2,2
    3928:	00c00044 	movi	r3,1
    392c:	51000117 	ldw	r4,4(r10)
    3930:	1886983a 	sll	r3,r3,r2
    3934:	20c8b03a 	or	r4,r4,r3
    3938:	51000115 	stw	r4,4(r10)
    393c:	003fa706 	br	37dc <_free_r+0x15c>
    3940:	00801504 	movi	r2,84
    3944:	10c00436 	bltu	r2,r3,3958 <_free_r+0x2d8>
    3948:	3804d33a 	srli	r2,r7,12
    394c:	10801b84 	addi	r2,r2,110
    3950:	100690fa 	slli	r3,r2,3
    3954:	003f9706 	br	37b4 <_free_r+0x134>
    3958:	00805504 	movi	r2,340
    395c:	10c00436 	bltu	r2,r3,3970 <_free_r+0x2f0>
    3960:	3804d3fa 	srli	r2,r7,15
    3964:	10801dc4 	addi	r2,r2,119
    3968:	100690fa 	slli	r3,r2,3
    396c:	003f9106 	br	37b4 <_free_r+0x134>
    3970:	00815504 	movi	r2,1364
    3974:	10c0032e 	bgeu	r2,r3,3984 <_free_r+0x304>
    3978:	00801f84 	movi	r2,126
    397c:	00c0fc04 	movi	r3,1008
    3980:	003f8c06 	br	37b4 <_free_r+0x134>
    3984:	3804d4ba 	srli	r2,r7,18
    3988:	10801f04 	addi	r2,r2,124
    398c:	100690fa 	slli	r3,r2,3
    3990:	003f8806 	br	37b4 <_free_r+0x134>

00003994 <_fwalk_reent>:
    3994:	defff704 	addi	sp,sp,-36
    3998:	dcc00315 	stw	r19,12(sp)
    399c:	24c0b804 	addi	r19,r4,736
    39a0:	dd800615 	stw	r22,24(sp)
    39a4:	dd400515 	stw	r21,20(sp)
    39a8:	dfc00815 	stw	ra,32(sp)
    39ac:	ddc00715 	stw	r23,28(sp)
    39b0:	dd000415 	stw	r20,16(sp)
    39b4:	dc800215 	stw	r18,8(sp)
    39b8:	dc400115 	stw	r17,4(sp)
    39bc:	dc000015 	stw	r16,0(sp)
    39c0:	202b883a 	mov	r21,r4
    39c4:	282d883a 	mov	r22,r5
    39c8:	00032ec0 	call	32ec <__sfp_lock_acquire>
    39cc:	98002126 	beq	r19,zero,3a54 <_fwalk_reent+0xc0>
    39d0:	002f883a 	mov	r23,zero
    39d4:	9c800117 	ldw	r18,4(r19)
    39d8:	9c000217 	ldw	r16,8(r19)
    39dc:	90bfffc4 	addi	r2,r18,-1
    39e0:	10000d16 	blt	r2,zero,3a18 <_fwalk_reent+0x84>
    39e4:	0023883a 	mov	r17,zero
    39e8:	053fffc4 	movi	r20,-1
    39ec:	8080030f 	ldh	r2,12(r16)
    39f0:	8c400044 	addi	r17,r17,1
    39f4:	10000626 	beq	r2,zero,3a10 <_fwalk_reent+0x7c>
    39f8:	8080038f 	ldh	r2,14(r16)
    39fc:	800b883a 	mov	r5,r16
    3a00:	a809883a 	mov	r4,r21
    3a04:	15000226 	beq	r2,r20,3a10 <_fwalk_reent+0x7c>
    3a08:	b03ee83a 	callr	r22
    3a0c:	b8aeb03a 	or	r23,r23,r2
    3a10:	84001704 	addi	r16,r16,92
    3a14:	947ff51e 	bne	r18,r17,39ec <_fwalk_reent+0x58>
    3a18:	9cc00017 	ldw	r19,0(r19)
    3a1c:	983fed1e 	bne	r19,zero,39d4 <_fwalk_reent+0x40>
    3a20:	00032f00 	call	32f0 <__sfp_lock_release>
    3a24:	b805883a 	mov	r2,r23
    3a28:	dfc00817 	ldw	ra,32(sp)
    3a2c:	ddc00717 	ldw	r23,28(sp)
    3a30:	dd800617 	ldw	r22,24(sp)
    3a34:	dd400517 	ldw	r21,20(sp)
    3a38:	dd000417 	ldw	r20,16(sp)
    3a3c:	dcc00317 	ldw	r19,12(sp)
    3a40:	dc800217 	ldw	r18,8(sp)
    3a44:	dc400117 	ldw	r17,4(sp)
    3a48:	dc000017 	ldw	r16,0(sp)
    3a4c:	dec00904 	addi	sp,sp,36
    3a50:	f800283a 	ret
    3a54:	002f883a 	mov	r23,zero
    3a58:	003ff106 	br	3a20 <_fwalk_reent+0x8c>

00003a5c <_fwalk>:
    3a5c:	defff804 	addi	sp,sp,-32
    3a60:	dcc00315 	stw	r19,12(sp)
    3a64:	24c0b804 	addi	r19,r4,736
    3a68:	dd400515 	stw	r21,20(sp)
    3a6c:	dfc00715 	stw	ra,28(sp)
    3a70:	dd800615 	stw	r22,24(sp)
    3a74:	dd000415 	stw	r20,16(sp)
    3a78:	dc800215 	stw	r18,8(sp)
    3a7c:	dc400115 	stw	r17,4(sp)
    3a80:	dc000015 	stw	r16,0(sp)
    3a84:	282b883a 	mov	r21,r5
    3a88:	00032ec0 	call	32ec <__sfp_lock_acquire>
    3a8c:	98001f26 	beq	r19,zero,3b0c <_fwalk+0xb0>
    3a90:	002d883a 	mov	r22,zero
    3a94:	9c800117 	ldw	r18,4(r19)
    3a98:	9c000217 	ldw	r16,8(r19)
    3a9c:	90bfffc4 	addi	r2,r18,-1
    3aa0:	10000c16 	blt	r2,zero,3ad4 <_fwalk+0x78>
    3aa4:	0023883a 	mov	r17,zero
    3aa8:	053fffc4 	movi	r20,-1
    3aac:	8080030f 	ldh	r2,12(r16)
    3ab0:	8c400044 	addi	r17,r17,1
    3ab4:	10000526 	beq	r2,zero,3acc <_fwalk+0x70>
    3ab8:	8080038f 	ldh	r2,14(r16)
    3abc:	8009883a 	mov	r4,r16
    3ac0:	15000226 	beq	r2,r20,3acc <_fwalk+0x70>
    3ac4:	a83ee83a 	callr	r21
    3ac8:	b0acb03a 	or	r22,r22,r2
    3acc:	84001704 	addi	r16,r16,92
    3ad0:	947ff61e 	bne	r18,r17,3aac <_fwalk+0x50>
    3ad4:	9cc00017 	ldw	r19,0(r19)
    3ad8:	983fee1e 	bne	r19,zero,3a94 <_fwalk+0x38>
    3adc:	00032f00 	call	32f0 <__sfp_lock_release>
    3ae0:	b005883a 	mov	r2,r22
    3ae4:	dfc00717 	ldw	ra,28(sp)
    3ae8:	dd800617 	ldw	r22,24(sp)
    3aec:	dd400517 	ldw	r21,20(sp)
    3af0:	dd000417 	ldw	r20,16(sp)
    3af4:	dcc00317 	ldw	r19,12(sp)
    3af8:	dc800217 	ldw	r18,8(sp)
    3afc:	dc400117 	ldw	r17,4(sp)
    3b00:	dc000017 	ldw	r16,0(sp)
    3b04:	dec00804 	addi	sp,sp,32
    3b08:	f800283a 	ret
    3b0c:	002d883a 	mov	r22,zero
    3b10:	003ff206 	br	3adc <_fwalk+0x80>

00003b14 <__smakebuf_r>:
    3b14:	2880030b 	ldhu	r2,12(r5)
    3b18:	deffed04 	addi	sp,sp,-76
    3b1c:	dc401015 	stw	r17,64(sp)
    3b20:	1080008c 	andi	r2,r2,2
    3b24:	dc000f15 	stw	r16,60(sp)
    3b28:	dfc01215 	stw	ra,72(sp)
    3b2c:	dc801115 	stw	r18,68(sp)
    3b30:	2821883a 	mov	r16,r5
    3b34:	2023883a 	mov	r17,r4
    3b38:	10000b26 	beq	r2,zero,3b68 <__smakebuf_r+0x54>
    3b3c:	28c010c4 	addi	r3,r5,67
    3b40:	00800044 	movi	r2,1
    3b44:	28800515 	stw	r2,20(r5)
    3b48:	28c00415 	stw	r3,16(r5)
    3b4c:	28c00015 	stw	r3,0(r5)
    3b50:	dfc01217 	ldw	ra,72(sp)
    3b54:	dc801117 	ldw	r18,68(sp)
    3b58:	dc401017 	ldw	r17,64(sp)
    3b5c:	dc000f17 	ldw	r16,60(sp)
    3b60:	dec01304 	addi	sp,sp,76
    3b64:	f800283a 	ret
    3b68:	2940038f 	ldh	r5,14(r5)
    3b6c:	28002116 	blt	r5,zero,3bf4 <__smakebuf_r+0xe0>
    3b70:	d80d883a 	mov	r6,sp
    3b74:	00047b00 	call	47b0 <_fstat_r>
    3b78:	10001e16 	blt	r2,zero,3bf4 <__smakebuf_r+0xe0>
    3b7c:	d8800117 	ldw	r2,4(sp)
    3b80:	00e00014 	movui	r3,32768
    3b84:	113c000c 	andi	r4,r2,61440
    3b88:	20c03126 	beq	r4,r3,3c50 <__smakebuf_r+0x13c>
    3b8c:	8080030b 	ldhu	r2,12(r16)
    3b90:	00c80004 	movi	r3,8192
    3b94:	10820014 	ori	r2,r2,2048
    3b98:	8080030d 	sth	r2,12(r16)
    3b9c:	20c01e26 	beq	r4,r3,3c18 <__smakebuf_r+0x104>
    3ba0:	04810004 	movi	r18,1024
    3ba4:	8809883a 	mov	r4,r17
    3ba8:	900b883a 	mov	r5,r18
    3bac:	0003ca80 	call	3ca8 <_malloc_r>
    3bb0:	1009883a 	mov	r4,r2
    3bb4:	10003126 	beq	r2,zero,3c7c <__smakebuf_r+0x168>
    3bb8:	80c0030b 	ldhu	r3,12(r16)
    3bbc:	00800034 	movhi	r2,0
    3bc0:	108cf804 	addi	r2,r2,13280
    3bc4:	88800f15 	stw	r2,60(r17)
    3bc8:	18c02014 	ori	r3,r3,128
    3bcc:	84800515 	stw	r18,20(r16)
    3bd0:	80c0030d 	sth	r3,12(r16)
    3bd4:	81000415 	stw	r4,16(r16)
    3bd8:	81000015 	stw	r4,0(r16)
    3bdc:	dfc01217 	ldw	ra,72(sp)
    3be0:	dc801117 	ldw	r18,68(sp)
    3be4:	dc401017 	ldw	r17,64(sp)
    3be8:	dc000f17 	ldw	r16,60(sp)
    3bec:	dec01304 	addi	sp,sp,76
    3bf0:	f800283a 	ret
    3bf4:	80c0030b 	ldhu	r3,12(r16)
    3bf8:	1880200c 	andi	r2,r3,128
    3bfc:	10000426 	beq	r2,zero,3c10 <__smakebuf_r+0xfc>
    3c00:	04801004 	movi	r18,64
    3c04:	18820014 	ori	r2,r3,2048
    3c08:	8080030d 	sth	r2,12(r16)
    3c0c:	003fe506 	br	3ba4 <__smakebuf_r+0x90>
    3c10:	04810004 	movi	r18,1024
    3c14:	003ffb06 	br	3c04 <__smakebuf_r+0xf0>
    3c18:	8140038f 	ldh	r5,14(r16)
    3c1c:	8809883a 	mov	r4,r17
    3c20:	00048240 	call	4824 <_isatty_r>
    3c24:	103fde26 	beq	r2,zero,3ba0 <__smakebuf_r+0x8c>
    3c28:	8080030b 	ldhu	r2,12(r16)
    3c2c:	80c010c4 	addi	r3,r16,67
    3c30:	04810004 	movi	r18,1024
    3c34:	10800054 	ori	r2,r2,1
    3c38:	8080030d 	sth	r2,12(r16)
    3c3c:	00800044 	movi	r2,1
    3c40:	80c00415 	stw	r3,16(r16)
    3c44:	80800515 	stw	r2,20(r16)
    3c48:	80c00015 	stw	r3,0(r16)
    3c4c:	003fd506 	br	3ba4 <__smakebuf_r+0x90>
    3c50:	80c00a17 	ldw	r3,40(r16)
    3c54:	00800034 	movhi	r2,0
    3c58:	10911804 	addi	r2,r2,17504
    3c5c:	18bfcb1e 	bne	r3,r2,3b8c <__smakebuf_r+0x78>
    3c60:	8080030b 	ldhu	r2,12(r16)
    3c64:	00c10004 	movi	r3,1024
    3c68:	1825883a 	mov	r18,r3
    3c6c:	10c4b03a 	or	r2,r2,r3
    3c70:	8080030d 	sth	r2,12(r16)
    3c74:	80c01315 	stw	r3,76(r16)
    3c78:	003fca06 	br	3ba4 <__smakebuf_r+0x90>
    3c7c:	8100030b 	ldhu	r4,12(r16)
    3c80:	2080800c 	andi	r2,r4,512
    3c84:	103fb21e 	bne	r2,zero,3b50 <__smakebuf_r+0x3c>
    3c88:	80c010c4 	addi	r3,r16,67
    3c8c:	21000094 	ori	r4,r4,2
    3c90:	00800044 	movi	r2,1
    3c94:	80800515 	stw	r2,20(r16)
    3c98:	8100030d 	sth	r4,12(r16)
    3c9c:	80c00415 	stw	r3,16(r16)
    3ca0:	80c00015 	stw	r3,0(r16)
    3ca4:	003faa06 	br	3b50 <__smakebuf_r+0x3c>

00003ca8 <_malloc_r>:
    3ca8:	defff604 	addi	sp,sp,-40
    3cac:	28c002c4 	addi	r3,r5,11
    3cb0:	00800584 	movi	r2,22
    3cb4:	dc800215 	stw	r18,8(sp)
    3cb8:	dfc00915 	stw	ra,36(sp)
    3cbc:	df000815 	stw	fp,32(sp)
    3cc0:	ddc00715 	stw	r23,28(sp)
    3cc4:	dd800615 	stw	r22,24(sp)
    3cc8:	dd400515 	stw	r21,20(sp)
    3ccc:	dd000415 	stw	r20,16(sp)
    3cd0:	dcc00315 	stw	r19,12(sp)
    3cd4:	dc400115 	stw	r17,4(sp)
    3cd8:	dc000015 	stw	r16,0(sp)
    3cdc:	2025883a 	mov	r18,r4
    3ce0:	10c01236 	bltu	r2,r3,3d2c <_malloc_r+0x84>
    3ce4:	04400404 	movi	r17,16
    3ce8:	8940142e 	bgeu	r17,r5,3d3c <_malloc_r+0x94>
    3cec:	00800304 	movi	r2,12
    3cf0:	0007883a 	mov	r3,zero
    3cf4:	90800015 	stw	r2,0(r18)
    3cf8:	1805883a 	mov	r2,r3
    3cfc:	dfc00917 	ldw	ra,36(sp)
    3d00:	df000817 	ldw	fp,32(sp)
    3d04:	ddc00717 	ldw	r23,28(sp)
    3d08:	dd800617 	ldw	r22,24(sp)
    3d0c:	dd400517 	ldw	r21,20(sp)
    3d10:	dd000417 	ldw	r20,16(sp)
    3d14:	dcc00317 	ldw	r19,12(sp)
    3d18:	dc800217 	ldw	r18,8(sp)
    3d1c:	dc400117 	ldw	r17,4(sp)
    3d20:	dc000017 	ldw	r16,0(sp)
    3d24:	dec00a04 	addi	sp,sp,40
    3d28:	f800283a 	ret
    3d2c:	00bffe04 	movi	r2,-8
    3d30:	18a2703a 	and	r17,r3,r2
    3d34:	883fed16 	blt	r17,zero,3cec <_malloc_r+0x44>
    3d38:	897fec36 	bltu	r17,r5,3cec <_malloc_r+0x44>
    3d3c:	9009883a 	mov	r4,r18
    3d40:	0004b340 	call	4b34 <__malloc_lock>
    3d44:	00807dc4 	movi	r2,503
    3d48:	14402b2e 	bgeu	r2,r17,3df8 <_malloc_r+0x150>
    3d4c:	8806d27a 	srli	r3,r17,9
    3d50:	18003f1e 	bne	r3,zero,3e50 <_malloc_r+0x1a8>
    3d54:	880cd0fa 	srli	r6,r17,3
    3d58:	300490fa 	slli	r2,r6,3
    3d5c:	02c00034 	movhi	r11,0
    3d60:	5ada4604 	addi	r11,r11,26904
    3d64:	12cb883a 	add	r5,r2,r11
    3d68:	2c000317 	ldw	r16,12(r5)
    3d6c:	580f883a 	mov	r7,r11
    3d70:	2c00041e 	bne	r5,r16,3d84 <_malloc_r+0xdc>
    3d74:	00000a06 	br	3da0 <_malloc_r+0xf8>
    3d78:	1800860e 	bge	r3,zero,3f94 <_malloc_r+0x2ec>
    3d7c:	84000317 	ldw	r16,12(r16)
    3d80:	2c000726 	beq	r5,r16,3da0 <_malloc_r+0xf8>
    3d84:	80800117 	ldw	r2,4(r16)
    3d88:	00ffff04 	movi	r3,-4
    3d8c:	10c8703a 	and	r4,r2,r3
    3d90:	2447c83a 	sub	r3,r4,r17
    3d94:	008003c4 	movi	r2,15
    3d98:	10fff70e 	bge	r2,r3,3d78 <_malloc_r+0xd0>
    3d9c:	31bfffc4 	addi	r6,r6,-1
    3da0:	32400044 	addi	r9,r6,1
    3da4:	02800034 	movhi	r10,0
    3da8:	529a4804 	addi	r10,r10,26912
    3dac:	54000217 	ldw	r16,8(r10)
    3db0:	8280a026 	beq	r16,r10,4034 <_malloc_r+0x38c>
    3db4:	80800117 	ldw	r2,4(r16)
    3db8:	00ffff04 	movi	r3,-4
    3dbc:	10ca703a 	and	r5,r2,r3
    3dc0:	2c4dc83a 	sub	r6,r5,r17
    3dc4:	008003c4 	movi	r2,15
    3dc8:	11808316 	blt	r2,r6,3fd8 <_malloc_r+0x330>
    3dcc:	52800315 	stw	r10,12(r10)
    3dd0:	52800215 	stw	r10,8(r10)
    3dd4:	30002916 	blt	r6,zero,3e7c <_malloc_r+0x1d4>
    3dd8:	8147883a 	add	r3,r16,r5
    3ddc:	18800117 	ldw	r2,4(r3)
    3de0:	9009883a 	mov	r4,r18
    3de4:	10800054 	ori	r2,r2,1
    3de8:	18800115 	stw	r2,4(r3)
    3dec:	0004b380 	call	4b38 <__malloc_unlock>
    3df0:	80c00204 	addi	r3,r16,8
    3df4:	003fc006 	br	3cf8 <_malloc_r+0x50>
    3df8:	02c00034 	movhi	r11,0
    3dfc:	5ada4604 	addi	r11,r11,26904
    3e00:	8ac5883a 	add	r2,r17,r11
    3e04:	14000317 	ldw	r16,12(r2)
    3e08:	580f883a 	mov	r7,r11
    3e0c:	8806d0fa 	srli	r3,r17,3
    3e10:	14006c26 	beq	r2,r16,3fc4 <_malloc_r+0x31c>
    3e14:	80c00117 	ldw	r3,4(r16)
    3e18:	00bfff04 	movi	r2,-4
    3e1c:	81800317 	ldw	r6,12(r16)
    3e20:	1886703a 	and	r3,r3,r2
    3e24:	80c7883a 	add	r3,r16,r3
    3e28:	18800117 	ldw	r2,4(r3)
    3e2c:	81400217 	ldw	r5,8(r16)
    3e30:	9009883a 	mov	r4,r18
    3e34:	10800054 	ori	r2,r2,1
    3e38:	18800115 	stw	r2,4(r3)
    3e3c:	31400215 	stw	r5,8(r6)
    3e40:	29800315 	stw	r6,12(r5)
    3e44:	0004b380 	call	4b38 <__malloc_unlock>
    3e48:	80c00204 	addi	r3,r16,8
    3e4c:	003faa06 	br	3cf8 <_malloc_r+0x50>
    3e50:	00800104 	movi	r2,4
    3e54:	10c0052e 	bgeu	r2,r3,3e6c <_malloc_r+0x1c4>
    3e58:	00800504 	movi	r2,20
    3e5c:	10c07836 	bltu	r2,r3,4040 <_malloc_r+0x398>
    3e60:	198016c4 	addi	r6,r3,91
    3e64:	300490fa 	slli	r2,r6,3
    3e68:	003fbc06 	br	3d5c <_malloc_r+0xb4>
    3e6c:	8804d1ba 	srli	r2,r17,6
    3e70:	11800e04 	addi	r6,r2,56
    3e74:	300490fa 	slli	r2,r6,3
    3e78:	003fb806 	br	3d5c <_malloc_r+0xb4>
    3e7c:	00807fc4 	movi	r2,511
    3e80:	1140bb36 	bltu	r2,r5,4170 <_malloc_r+0x4c8>
    3e84:	2806d0fa 	srli	r3,r5,3
    3e88:	573ffe04 	addi	fp,r10,-8
    3e8c:	00800044 	movi	r2,1
    3e90:	180890fa 	slli	r4,r3,3
    3e94:	1807d0ba 	srai	r3,r3,2
    3e98:	e1c00117 	ldw	r7,4(fp)
    3e9c:	5909883a 	add	r4,r11,r4
    3ea0:	21400217 	ldw	r5,8(r4)
    3ea4:	10c4983a 	sll	r2,r2,r3
    3ea8:	81000315 	stw	r4,12(r16)
    3eac:	81400215 	stw	r5,8(r16)
    3eb0:	388eb03a 	or	r7,r7,r2
    3eb4:	2c000315 	stw	r16,12(r5)
    3eb8:	24000215 	stw	r16,8(r4)
    3ebc:	e1c00115 	stw	r7,4(fp)
    3ec0:	4807883a 	mov	r3,r9
    3ec4:	4800cd16 	blt	r9,zero,41fc <_malloc_r+0x554>
    3ec8:	1807d0ba 	srai	r3,r3,2
    3ecc:	00800044 	movi	r2,1
    3ed0:	10c8983a 	sll	r4,r2,r3
    3ed4:	39004436 	bltu	r7,r4,3fe8 <_malloc_r+0x340>
    3ed8:	21c4703a 	and	r2,r4,r7
    3edc:	10000a1e 	bne	r2,zero,3f08 <_malloc_r+0x260>
    3ee0:	2109883a 	add	r4,r4,r4
    3ee4:	00bfff04 	movi	r2,-4
    3ee8:	4884703a 	and	r2,r9,r2
    3eec:	3906703a 	and	r3,r7,r4
    3ef0:	12400104 	addi	r9,r2,4
    3ef4:	1800041e 	bne	r3,zero,3f08 <_malloc_r+0x260>
    3ef8:	2109883a 	add	r4,r4,r4
    3efc:	3904703a 	and	r2,r7,r4
    3f00:	4a400104 	addi	r9,r9,4
    3f04:	103ffc26 	beq	r2,zero,3ef8 <_malloc_r+0x250>
    3f08:	480490fa 	slli	r2,r9,3
    3f0c:	4819883a 	mov	r12,r9
    3f10:	023fff04 	movi	r8,-4
    3f14:	589b883a 	add	r13,r11,r2
    3f18:	6807883a 	mov	r3,r13
    3f1c:	014003c4 	movi	r5,15
    3f20:	1c000317 	ldw	r16,12(r3)
    3f24:	1c00041e 	bne	r3,r16,3f38 <_malloc_r+0x290>
    3f28:	0000a706 	br	41c8 <_malloc_r+0x520>
    3f2c:	3000ab0e 	bge	r6,zero,41dc <_malloc_r+0x534>
    3f30:	84000317 	ldw	r16,12(r16)
    3f34:	1c00a426 	beq	r3,r16,41c8 <_malloc_r+0x520>
    3f38:	80800117 	ldw	r2,4(r16)
    3f3c:	1204703a 	and	r2,r2,r8
    3f40:	144dc83a 	sub	r6,r2,r17
    3f44:	29bff90e 	bge	r5,r6,3f2c <_malloc_r+0x284>
    3f48:	81000317 	ldw	r4,12(r16)
    3f4c:	80c00217 	ldw	r3,8(r16)
    3f50:	89400054 	ori	r5,r17,1
    3f54:	8445883a 	add	r2,r16,r17
    3f58:	20c00215 	stw	r3,8(r4)
    3f5c:	19000315 	stw	r4,12(r3)
    3f60:	81400115 	stw	r5,4(r16)
    3f64:	1187883a 	add	r3,r2,r6
    3f68:	31000054 	ori	r4,r6,1
    3f6c:	50800315 	stw	r2,12(r10)
    3f70:	50800215 	stw	r2,8(r10)
    3f74:	19800015 	stw	r6,0(r3)
    3f78:	11000115 	stw	r4,4(r2)
    3f7c:	12800215 	stw	r10,8(r2)
    3f80:	12800315 	stw	r10,12(r2)
    3f84:	9009883a 	mov	r4,r18
    3f88:	0004b380 	call	4b38 <__malloc_unlock>
    3f8c:	80c00204 	addi	r3,r16,8
    3f90:	003f5906 	br	3cf8 <_malloc_r+0x50>
    3f94:	8109883a 	add	r4,r16,r4
    3f98:	20800117 	ldw	r2,4(r4)
    3f9c:	80c00217 	ldw	r3,8(r16)
    3fa0:	81400317 	ldw	r5,12(r16)
    3fa4:	10800054 	ori	r2,r2,1
    3fa8:	20800115 	stw	r2,4(r4)
    3fac:	28c00215 	stw	r3,8(r5)
    3fb0:	19400315 	stw	r5,12(r3)
    3fb4:	9009883a 	mov	r4,r18
    3fb8:	0004b380 	call	4b38 <__malloc_unlock>
    3fbc:	80c00204 	addi	r3,r16,8
    3fc0:	003f4d06 	br	3cf8 <_malloc_r+0x50>
    3fc4:	80800204 	addi	r2,r16,8
    3fc8:	14000317 	ldw	r16,12(r2)
    3fcc:	143f911e 	bne	r2,r16,3e14 <_malloc_r+0x16c>
    3fd0:	1a400084 	addi	r9,r3,2
    3fd4:	003f7306 	br	3da4 <_malloc_r+0xfc>
    3fd8:	88c00054 	ori	r3,r17,1
    3fdc:	8445883a 	add	r2,r16,r17
    3fe0:	80c00115 	stw	r3,4(r16)
    3fe4:	003fdf06 	br	3f64 <_malloc_r+0x2bc>
    3fe8:	e4000217 	ldw	r16,8(fp)
    3fec:	00bfff04 	movi	r2,-4
    3ff0:	80c00117 	ldw	r3,4(r16)
    3ff4:	802d883a 	mov	r22,r16
    3ff8:	18aa703a 	and	r21,r3,r2
    3ffc:	ac401636 	bltu	r21,r17,4058 <_malloc_r+0x3b0>
    4000:	ac49c83a 	sub	r4,r21,r17
    4004:	008003c4 	movi	r2,15
    4008:	1100130e 	bge	r2,r4,4058 <_malloc_r+0x3b0>
    400c:	88800054 	ori	r2,r17,1
    4010:	8447883a 	add	r3,r16,r17
    4014:	80800115 	stw	r2,4(r16)
    4018:	20800054 	ori	r2,r4,1
    401c:	18800115 	stw	r2,4(r3)
    4020:	e0c00215 	stw	r3,8(fp)
    4024:	9009883a 	mov	r4,r18
    4028:	0004b380 	call	4b38 <__malloc_unlock>
    402c:	80c00204 	addi	r3,r16,8
    4030:	003f3106 	br	3cf8 <_malloc_r+0x50>
    4034:	39c00117 	ldw	r7,4(r7)
    4038:	573ffe04 	addi	fp,r10,-8
    403c:	003fa006 	br	3ec0 <_malloc_r+0x218>
    4040:	00801504 	movi	r2,84
    4044:	10c06736 	bltu	r2,r3,41e4 <_malloc_r+0x53c>
    4048:	8804d33a 	srli	r2,r17,12
    404c:	11801b84 	addi	r6,r2,110
    4050:	300490fa 	slli	r2,r6,3
    4054:	003f4106 	br	3d5c <_malloc_r+0xb4>
    4058:	d0a74c17 	ldw	r2,-25296(gp)
    405c:	d0e00c17 	ldw	r3,-32720(gp)
    4060:	053fffc4 	movi	r20,-1
    4064:	10800404 	addi	r2,r2,16
    4068:	88a7883a 	add	r19,r17,r2
    406c:	1d000326 	beq	r3,r20,407c <_malloc_r+0x3d4>
    4070:	98c3ffc4 	addi	r3,r19,4095
    4074:	00bc0004 	movi	r2,-4096
    4078:	18a6703a 	and	r19,r3,r2
    407c:	9009883a 	mov	r4,r18
    4080:	980b883a 	mov	r5,r19
    4084:	00043e80 	call	43e8 <_sbrk_r>
    4088:	1009883a 	mov	r4,r2
    408c:	15000426 	beq	r2,r20,40a0 <_malloc_r+0x3f8>
    4090:	854b883a 	add	r5,r16,r21
    4094:	1029883a 	mov	r20,r2
    4098:	11405a2e 	bgeu	r2,r5,4204 <_malloc_r+0x55c>
    409c:	87000c26 	beq	r16,fp,40d0 <_malloc_r+0x428>
    40a0:	e4000217 	ldw	r16,8(fp)
    40a4:	80c00117 	ldw	r3,4(r16)
    40a8:	00bfff04 	movi	r2,-4
    40ac:	1884703a 	and	r2,r3,r2
    40b0:	14400336 	bltu	r2,r17,40c0 <_malloc_r+0x418>
    40b4:	1449c83a 	sub	r4,r2,r17
    40b8:	008003c4 	movi	r2,15
    40bc:	113fd316 	blt	r2,r4,400c <_malloc_r+0x364>
    40c0:	9009883a 	mov	r4,r18
    40c4:	0004b380 	call	4b38 <__malloc_unlock>
    40c8:	0007883a 	mov	r3,zero
    40cc:	003f0a06 	br	3cf8 <_malloc_r+0x50>
    40d0:	05c00074 	movhi	r23,1
    40d4:	bde29704 	addi	r23,r23,-30116
    40d8:	b8800017 	ldw	r2,0(r23)
    40dc:	988d883a 	add	r6,r19,r2
    40e0:	b9800015 	stw	r6,0(r23)
    40e4:	d0e00c17 	ldw	r3,-32720(gp)
    40e8:	00bfffc4 	movi	r2,-1
    40ec:	18808e26 	beq	r3,r2,4328 <_malloc_r+0x680>
    40f0:	2145c83a 	sub	r2,r4,r5
    40f4:	3085883a 	add	r2,r6,r2
    40f8:	b8800015 	stw	r2,0(r23)
    40fc:	20c001cc 	andi	r3,r4,7
    4100:	18005f1e 	bne	r3,zero,4280 <_malloc_r+0x5d8>
    4104:	000b883a 	mov	r5,zero
    4108:	a4c5883a 	add	r2,r20,r19
    410c:	1083ffcc 	andi	r2,r2,4095
    4110:	00c40004 	movi	r3,4096
    4114:	1887c83a 	sub	r3,r3,r2
    4118:	28e7883a 	add	r19,r5,r3
    411c:	9009883a 	mov	r4,r18
    4120:	980b883a 	mov	r5,r19
    4124:	00043e80 	call	43e8 <_sbrk_r>
    4128:	1007883a 	mov	r3,r2
    412c:	00bfffc4 	movi	r2,-1
    4130:	18807a26 	beq	r3,r2,431c <_malloc_r+0x674>
    4134:	1d05c83a 	sub	r2,r3,r20
    4138:	9885883a 	add	r2,r19,r2
    413c:	10c00054 	ori	r3,r2,1
    4140:	b8800017 	ldw	r2,0(r23)
    4144:	a021883a 	mov	r16,r20
    4148:	a0c00115 	stw	r3,4(r20)
    414c:	9885883a 	add	r2,r19,r2
    4150:	b8800015 	stw	r2,0(r23)
    4154:	e5000215 	stw	r20,8(fp)
    4158:	b7003626 	beq	r22,fp,4234 <_malloc_r+0x58c>
    415c:	018003c4 	movi	r6,15
    4160:	35404b36 	bltu	r6,r21,4290 <_malloc_r+0x5e8>
    4164:	00800044 	movi	r2,1
    4168:	a0800115 	stw	r2,4(r20)
    416c:	003fcd06 	br	40a4 <_malloc_r+0x3fc>
    4170:	2808d27a 	srli	r4,r5,9
    4174:	2000371e 	bne	r4,zero,4254 <_malloc_r+0x5ac>
    4178:	2808d0fa 	srli	r4,r5,3
    417c:	200690fa 	slli	r3,r4,3
    4180:	1ad1883a 	add	r8,r3,r11
    4184:	41800217 	ldw	r6,8(r8)
    4188:	41805b26 	beq	r8,r6,42f8 <_malloc_r+0x650>
    418c:	30800117 	ldw	r2,4(r6)
    4190:	00ffff04 	movi	r3,-4
    4194:	10c4703a 	and	r2,r2,r3
    4198:	2880022e 	bgeu	r5,r2,41a4 <_malloc_r+0x4fc>
    419c:	31800217 	ldw	r6,8(r6)
    41a0:	41bffa1e 	bne	r8,r6,418c <_malloc_r+0x4e4>
    41a4:	32000317 	ldw	r8,12(r6)
    41a8:	39c00117 	ldw	r7,4(r7)
    41ac:	82000315 	stw	r8,12(r16)
    41b0:	81800215 	stw	r6,8(r16)
    41b4:	07000034 	movhi	fp,0
    41b8:	e71a4604 	addi	fp,fp,26904
    41bc:	34000315 	stw	r16,12(r6)
    41c0:	44000215 	stw	r16,8(r8)
    41c4:	003f3e06 	br	3ec0 <_malloc_r+0x218>
    41c8:	63000044 	addi	r12,r12,1
    41cc:	608000cc 	andi	r2,r12,3
    41d0:	10005d26 	beq	r2,zero,4348 <_malloc_r+0x6a0>
    41d4:	18c00204 	addi	r3,r3,8
    41d8:	003f5106 	br	3f20 <_malloc_r+0x278>
    41dc:	8089883a 	add	r4,r16,r2
    41e0:	003f6d06 	br	3f98 <_malloc_r+0x2f0>
    41e4:	00805504 	movi	r2,340
    41e8:	10c02036 	bltu	r2,r3,426c <_malloc_r+0x5c4>
    41ec:	8804d3fa 	srli	r2,r17,15
    41f0:	11801dc4 	addi	r6,r2,119
    41f4:	300490fa 	slli	r2,r6,3
    41f8:	003ed806 	br	3d5c <_malloc_r+0xb4>
    41fc:	48c000c4 	addi	r3,r9,3
    4200:	003f3106 	br	3ec8 <_malloc_r+0x220>
    4204:	05c00074 	movhi	r23,1
    4208:	bde29704 	addi	r23,r23,-30116
    420c:	b8800017 	ldw	r2,0(r23)
    4210:	988d883a 	add	r6,r19,r2
    4214:	b9800015 	stw	r6,0(r23)
    4218:	293fb21e 	bne	r5,r4,40e4 <_malloc_r+0x43c>
    421c:	2083ffcc 	andi	r2,r4,4095
    4220:	103fb01e 	bne	r2,zero,40e4 <_malloc_r+0x43c>
    4224:	e4000217 	ldw	r16,8(fp)
    4228:	9d45883a 	add	r2,r19,r21
    422c:	10800054 	ori	r2,r2,1
    4230:	80800115 	stw	r2,4(r16)
    4234:	b8c00017 	ldw	r3,0(r23)
    4238:	d0a74d17 	ldw	r2,-25292(gp)
    423c:	10c0012e 	bgeu	r2,r3,4244 <_malloc_r+0x59c>
    4240:	d0e74d15 	stw	r3,-25292(gp)
    4244:	d0a74e17 	ldw	r2,-25288(gp)
    4248:	10ff962e 	bgeu	r2,r3,40a4 <_malloc_r+0x3fc>
    424c:	d0e74e15 	stw	r3,-25288(gp)
    4250:	003f9406 	br	40a4 <_malloc_r+0x3fc>
    4254:	00800104 	movi	r2,4
    4258:	11001e36 	bltu	r2,r4,42d4 <_malloc_r+0x62c>
    425c:	2804d1ba 	srli	r2,r5,6
    4260:	11000e04 	addi	r4,r2,56
    4264:	200690fa 	slli	r3,r4,3
    4268:	003fc506 	br	4180 <_malloc_r+0x4d8>
    426c:	00815504 	movi	r2,1364
    4270:	10c01d2e 	bgeu	r2,r3,42e8 <_malloc_r+0x640>
    4274:	01801f84 	movi	r6,126
    4278:	0080fc04 	movi	r2,1008
    427c:	003eb706 	br	3d5c <_malloc_r+0xb4>
    4280:	00800204 	movi	r2,8
    4284:	10cbc83a 	sub	r5,r2,r3
    4288:	2169883a 	add	r20,r4,r5
    428c:	003f9e06 	br	4108 <_malloc_r+0x460>
    4290:	00bffe04 	movi	r2,-8
    4294:	a93ffd04 	addi	r4,r21,-12
    4298:	2088703a 	and	r4,r4,r2
    429c:	b10b883a 	add	r5,r22,r4
    42a0:	00c00144 	movi	r3,5
    42a4:	28c00215 	stw	r3,8(r5)
    42a8:	28c00115 	stw	r3,4(r5)
    42ac:	b0800117 	ldw	r2,4(r22)
    42b0:	1080004c 	andi	r2,r2,1
    42b4:	2084b03a 	or	r2,r4,r2
    42b8:	b0800115 	stw	r2,4(r22)
    42bc:	313fdd2e 	bgeu	r6,r4,4234 <_malloc_r+0x58c>
    42c0:	b1400204 	addi	r5,r22,8
    42c4:	9009883a 	mov	r4,r18
    42c8:	00036800 	call	3680 <_free_r>
    42cc:	e4000217 	ldw	r16,8(fp)
    42d0:	003fd806 	br	4234 <_malloc_r+0x58c>
    42d4:	00800504 	movi	r2,20
    42d8:	11001536 	bltu	r2,r4,4330 <_malloc_r+0x688>
    42dc:	210016c4 	addi	r4,r4,91
    42e0:	200690fa 	slli	r3,r4,3
    42e4:	003fa606 	br	4180 <_malloc_r+0x4d8>
    42e8:	8804d4ba 	srli	r2,r17,18
    42ec:	11801f04 	addi	r6,r2,124
    42f0:	300490fa 	slli	r2,r6,3
    42f4:	003e9906 	br	3d5c <_malloc_r+0xb4>
    42f8:	2009d0ba 	srai	r4,r4,2
    42fc:	01400034 	movhi	r5,0
    4300:	295a4604 	addi	r5,r5,26904
    4304:	00c00044 	movi	r3,1
    4308:	28800117 	ldw	r2,4(r5)
    430c:	1906983a 	sll	r3,r3,r4
    4310:	10c4b03a 	or	r2,r2,r3
    4314:	28800115 	stw	r2,4(r5)
    4318:	003fa306 	br	41a8 <_malloc_r+0x500>
    431c:	0027883a 	mov	r19,zero
    4320:	00c00044 	movi	r3,1
    4324:	003f8606 	br	4140 <_malloc_r+0x498>
    4328:	d1200c15 	stw	r4,-32720(gp)
    432c:	003f7306 	br	40fc <_malloc_r+0x454>
    4330:	00801504 	movi	r2,84
    4334:	11001936 	bltu	r2,r4,439c <_malloc_r+0x6f4>
    4338:	2804d33a 	srli	r2,r5,12
    433c:	11001b84 	addi	r4,r2,110
    4340:	200690fa 	slli	r3,r4,3
    4344:	003f8e06 	br	4180 <_malloc_r+0x4d8>
    4348:	480b883a 	mov	r5,r9
    434c:	6807883a 	mov	r3,r13
    4350:	288000cc 	andi	r2,r5,3
    4354:	18fffe04 	addi	r3,r3,-8
    4358:	297fffc4 	addi	r5,r5,-1
    435c:	10001526 	beq	r2,zero,43b4 <_malloc_r+0x70c>
    4360:	18800217 	ldw	r2,8(r3)
    4364:	10fffa26 	beq	r2,r3,4350 <_malloc_r+0x6a8>
    4368:	2109883a 	add	r4,r4,r4
    436c:	393f1e36 	bltu	r7,r4,3fe8 <_malloc_r+0x340>
    4370:	203f1d26 	beq	r4,zero,3fe8 <_malloc_r+0x340>
    4374:	21c4703a 	and	r2,r4,r7
    4378:	10000226 	beq	r2,zero,4384 <_malloc_r+0x6dc>
    437c:	6013883a 	mov	r9,r12
    4380:	003ee106 	br	3f08 <_malloc_r+0x260>
    4384:	2109883a 	add	r4,r4,r4
    4388:	3904703a 	and	r2,r7,r4
    438c:	63000104 	addi	r12,r12,4
    4390:	103ffc26 	beq	r2,zero,4384 <_malloc_r+0x6dc>
    4394:	6013883a 	mov	r9,r12
    4398:	003edb06 	br	3f08 <_malloc_r+0x260>
    439c:	00805504 	movi	r2,340
    43a0:	11000836 	bltu	r2,r4,43c4 <_malloc_r+0x71c>
    43a4:	2804d3fa 	srli	r2,r5,15
    43a8:	11001dc4 	addi	r4,r2,119
    43ac:	200690fa 	slli	r3,r4,3
    43b0:	003f7306 	br	4180 <_malloc_r+0x4d8>
    43b4:	0104303a 	nor	r2,zero,r4
    43b8:	388e703a 	and	r7,r7,r2
    43bc:	e1c00115 	stw	r7,4(fp)
    43c0:	003fe906 	br	4368 <_malloc_r+0x6c0>
    43c4:	00815504 	movi	r2,1364
    43c8:	1100032e 	bgeu	r2,r4,43d8 <_malloc_r+0x730>
    43cc:	01001f84 	movi	r4,126
    43d0:	00c0fc04 	movi	r3,1008
    43d4:	003f6a06 	br	4180 <_malloc_r+0x4d8>
    43d8:	2804d4ba 	srli	r2,r5,18
    43dc:	11001f04 	addi	r4,r2,124
    43e0:	200690fa 	slli	r3,r4,3
    43e4:	003f6606 	br	4180 <_malloc_r+0x4d8>

000043e8 <_sbrk_r>:
    43e8:	defffd04 	addi	sp,sp,-12
    43ec:	dc000015 	stw	r16,0(sp)
    43f0:	04000074 	movhi	r16,1
    43f4:	84229304 	addi	r16,r16,-30132
    43f8:	dc400115 	stw	r17,4(sp)
    43fc:	80000015 	stw	zero,0(r16)
    4400:	2023883a 	mov	r17,r4
    4404:	2809883a 	mov	r4,r5
    4408:	dfc00215 	stw	ra,8(sp)
    440c:	0004c340 	call	4c34 <sbrk>
    4410:	1007883a 	mov	r3,r2
    4414:	00bfffc4 	movi	r2,-1
    4418:	18800626 	beq	r3,r2,4434 <_sbrk_r+0x4c>
    441c:	1805883a 	mov	r2,r3
    4420:	dfc00217 	ldw	ra,8(sp)
    4424:	dc400117 	ldw	r17,4(sp)
    4428:	dc000017 	ldw	r16,0(sp)
    442c:	dec00304 	addi	sp,sp,12
    4430:	f800283a 	ret
    4434:	80800017 	ldw	r2,0(r16)
    4438:	103ff826 	beq	r2,zero,441c <_sbrk_r+0x34>
    443c:	88800015 	stw	r2,0(r17)
    4440:	1805883a 	mov	r2,r3
    4444:	dfc00217 	ldw	ra,8(sp)
    4448:	dc400117 	ldw	r17,4(sp)
    444c:	dc000017 	ldw	r16,0(sp)
    4450:	dec00304 	addi	sp,sp,12
    4454:	f800283a 	ret

00004458 <__sclose>:
    4458:	2940038f 	ldh	r5,14(r5)
    445c:	000461c1 	jmpi	461c <_close_r>

00004460 <__sseek>:
    4460:	defffe04 	addi	sp,sp,-8
    4464:	dc000015 	stw	r16,0(sp)
    4468:	2821883a 	mov	r16,r5
    446c:	2940038f 	ldh	r5,14(r5)
    4470:	dfc00115 	stw	ra,4(sp)
    4474:	00048940 	call	4894 <_lseek_r>
    4478:	1007883a 	mov	r3,r2
    447c:	00bfffc4 	movi	r2,-1
    4480:	18800926 	beq	r3,r2,44a8 <__sseek+0x48>
    4484:	8080030b 	ldhu	r2,12(r16)
    4488:	80c01415 	stw	r3,80(r16)
    448c:	10840014 	ori	r2,r2,4096
    4490:	8080030d 	sth	r2,12(r16)
    4494:	1805883a 	mov	r2,r3
    4498:	dfc00117 	ldw	ra,4(sp)
    449c:	dc000017 	ldw	r16,0(sp)
    44a0:	dec00204 	addi	sp,sp,8
    44a4:	f800283a 	ret
    44a8:	8080030b 	ldhu	r2,12(r16)
    44ac:	10bbffcc 	andi	r2,r2,61439
    44b0:	8080030d 	sth	r2,12(r16)
    44b4:	1805883a 	mov	r2,r3
    44b8:	dfc00117 	ldw	ra,4(sp)
    44bc:	dc000017 	ldw	r16,0(sp)
    44c0:	dec00204 	addi	sp,sp,8
    44c4:	f800283a 	ret

000044c8 <__swrite>:
    44c8:	2880030b 	ldhu	r2,12(r5)
    44cc:	defffb04 	addi	sp,sp,-20
    44d0:	dcc00315 	stw	r19,12(sp)
    44d4:	1080400c 	andi	r2,r2,256
    44d8:	dc800215 	stw	r18,8(sp)
    44dc:	dc400115 	stw	r17,4(sp)
    44e0:	dc000015 	stw	r16,0(sp)
    44e4:	3027883a 	mov	r19,r6
    44e8:	3825883a 	mov	r18,r7
    44ec:	dfc00415 	stw	ra,16(sp)
    44f0:	2821883a 	mov	r16,r5
    44f4:	000d883a 	mov	r6,zero
    44f8:	01c00084 	movi	r7,2
    44fc:	2023883a 	mov	r17,r4
    4500:	10000226 	beq	r2,zero,450c <__swrite+0x44>
    4504:	2940038f 	ldh	r5,14(r5)
    4508:	00048940 	call	4894 <_lseek_r>
    450c:	8080030b 	ldhu	r2,12(r16)
    4510:	8140038f 	ldh	r5,14(r16)
    4514:	8809883a 	mov	r4,r17
    4518:	10bbffcc 	andi	r2,r2,61439
    451c:	980d883a 	mov	r6,r19
    4520:	900f883a 	mov	r7,r18
    4524:	8080030d 	sth	r2,12(r16)
    4528:	dfc00417 	ldw	ra,16(sp)
    452c:	dcc00317 	ldw	r19,12(sp)
    4530:	dc800217 	ldw	r18,8(sp)
    4534:	dc400117 	ldw	r17,4(sp)
    4538:	dc000017 	ldw	r16,0(sp)
    453c:	dec00504 	addi	sp,sp,20
    4540:	00045a41 	jmpi	45a4 <_write_r>

00004544 <__sread>:
    4544:	defffe04 	addi	sp,sp,-8
    4548:	dc000015 	stw	r16,0(sp)
    454c:	2821883a 	mov	r16,r5
    4550:	2940038f 	ldh	r5,14(r5)
    4554:	dfc00115 	stw	ra,4(sp)
    4558:	000490c0 	call	490c <_read_r>
    455c:	1007883a 	mov	r3,r2
    4560:	10000816 	blt	r2,zero,4584 <__sread+0x40>
    4564:	80801417 	ldw	r2,80(r16)
    4568:	10c5883a 	add	r2,r2,r3
    456c:	80801415 	stw	r2,80(r16)
    4570:	1805883a 	mov	r2,r3
    4574:	dfc00117 	ldw	ra,4(sp)
    4578:	dc000017 	ldw	r16,0(sp)
    457c:	dec00204 	addi	sp,sp,8
    4580:	f800283a 	ret
    4584:	8080030b 	ldhu	r2,12(r16)
    4588:	10bbffcc 	andi	r2,r2,61439
    458c:	8080030d 	sth	r2,12(r16)
    4590:	1805883a 	mov	r2,r3
    4594:	dfc00117 	ldw	ra,4(sp)
    4598:	dc000017 	ldw	r16,0(sp)
    459c:	dec00204 	addi	sp,sp,8
    45a0:	f800283a 	ret

000045a4 <_write_r>:
    45a4:	defffd04 	addi	sp,sp,-12
    45a8:	dc000015 	stw	r16,0(sp)
    45ac:	04000074 	movhi	r16,1
    45b0:	84229304 	addi	r16,r16,-30132
    45b4:	dc400115 	stw	r17,4(sp)
    45b8:	80000015 	stw	zero,0(r16)
    45bc:	2023883a 	mov	r17,r4
    45c0:	2809883a 	mov	r4,r5
    45c4:	300b883a 	mov	r5,r6
    45c8:	380d883a 	mov	r6,r7
    45cc:	dfc00215 	stw	ra,8(sp)
    45d0:	0004c840 	call	4c84 <write>
    45d4:	1007883a 	mov	r3,r2
    45d8:	00bfffc4 	movi	r2,-1
    45dc:	18800626 	beq	r3,r2,45f8 <_write_r+0x54>
    45e0:	1805883a 	mov	r2,r3
    45e4:	dfc00217 	ldw	ra,8(sp)
    45e8:	dc400117 	ldw	r17,4(sp)
    45ec:	dc000017 	ldw	r16,0(sp)
    45f0:	dec00304 	addi	sp,sp,12
    45f4:	f800283a 	ret
    45f8:	80800017 	ldw	r2,0(r16)
    45fc:	103ff826 	beq	r2,zero,45e0 <_write_r+0x3c>
    4600:	88800015 	stw	r2,0(r17)
    4604:	1805883a 	mov	r2,r3
    4608:	dfc00217 	ldw	ra,8(sp)
    460c:	dc400117 	ldw	r17,4(sp)
    4610:	dc000017 	ldw	r16,0(sp)
    4614:	dec00304 	addi	sp,sp,12
    4618:	f800283a 	ret

0000461c <_close_r>:
    461c:	defffd04 	addi	sp,sp,-12
    4620:	dc000015 	stw	r16,0(sp)
    4624:	04000074 	movhi	r16,1
    4628:	84229304 	addi	r16,r16,-30132
    462c:	dc400115 	stw	r17,4(sp)
    4630:	80000015 	stw	zero,0(r16)
    4634:	2023883a 	mov	r17,r4
    4638:	2809883a 	mov	r4,r5
    463c:	dfc00215 	stw	ra,8(sp)
    4640:	00020d40 	call	20d4 <close>
    4644:	1007883a 	mov	r3,r2
    4648:	00bfffc4 	movi	r2,-1
    464c:	18800626 	beq	r3,r2,4668 <_close_r+0x4c>
    4650:	1805883a 	mov	r2,r3
    4654:	dfc00217 	ldw	ra,8(sp)
    4658:	dc400117 	ldw	r17,4(sp)
    465c:	dc000017 	ldw	r16,0(sp)
    4660:	dec00304 	addi	sp,sp,12
    4664:	f800283a 	ret
    4668:	80800017 	ldw	r2,0(r16)
    466c:	103ff826 	beq	r2,zero,4650 <_close_r+0x34>
    4670:	88800015 	stw	r2,0(r17)
    4674:	1805883a 	mov	r2,r3
    4678:	dfc00217 	ldw	ra,8(sp)
    467c:	dc400117 	ldw	r17,4(sp)
    4680:	dc000017 	ldw	r16,0(sp)
    4684:	dec00304 	addi	sp,sp,12
    4688:	f800283a 	ret

0000468c <_fclose_r>:
    468c:	defffc04 	addi	sp,sp,-16
    4690:	dc400115 	stw	r17,4(sp)
    4694:	dc000015 	stw	r16,0(sp)
    4698:	dfc00315 	stw	ra,12(sp)
    469c:	dc800215 	stw	r18,8(sp)
    46a0:	2821883a 	mov	r16,r5
    46a4:	2023883a 	mov	r17,r4
    46a8:	28002926 	beq	r5,zero,4750 <_fclose_r+0xc4>
    46ac:	00032ec0 	call	32ec <__sfp_lock_acquire>
    46b0:	88000226 	beq	r17,zero,46bc <_fclose_r+0x30>
    46b4:	88800e17 	ldw	r2,56(r17)
    46b8:	10002d26 	beq	r2,zero,4770 <_fclose_r+0xe4>
    46bc:	8080030f 	ldh	r2,12(r16)
    46c0:	10002226 	beq	r2,zero,474c <_fclose_r+0xc0>
    46c4:	8809883a 	mov	r4,r17
    46c8:	800b883a 	mov	r5,r16
    46cc:	00030640 	call	3064 <_fflush_r>
    46d0:	1025883a 	mov	r18,r2
    46d4:	80800b17 	ldw	r2,44(r16)
    46d8:	10000426 	beq	r2,zero,46ec <_fclose_r+0x60>
    46dc:	81400717 	ldw	r5,28(r16)
    46e0:	8809883a 	mov	r4,r17
    46e4:	103ee83a 	callr	r2
    46e8:	10002a16 	blt	r2,zero,4794 <_fclose_r+0x108>
    46ec:	8080030b 	ldhu	r2,12(r16)
    46f0:	1080200c 	andi	r2,r2,128
    46f4:	1000231e 	bne	r2,zero,4784 <_fclose_r+0xf8>
    46f8:	81400c17 	ldw	r5,48(r16)
    46fc:	28000526 	beq	r5,zero,4714 <_fclose_r+0x88>
    4700:	80801004 	addi	r2,r16,64
    4704:	28800226 	beq	r5,r2,4710 <_fclose_r+0x84>
    4708:	8809883a 	mov	r4,r17
    470c:	00036800 	call	3680 <_free_r>
    4710:	80000c15 	stw	zero,48(r16)
    4714:	81401117 	ldw	r5,68(r16)
    4718:	28000326 	beq	r5,zero,4728 <_fclose_r+0x9c>
    471c:	8809883a 	mov	r4,r17
    4720:	00036800 	call	3680 <_free_r>
    4724:	80001115 	stw	zero,68(r16)
    4728:	8000030d 	sth	zero,12(r16)
    472c:	00032f00 	call	32f0 <__sfp_lock_release>
    4730:	9005883a 	mov	r2,r18
    4734:	dfc00317 	ldw	ra,12(sp)
    4738:	dc800217 	ldw	r18,8(sp)
    473c:	dc400117 	ldw	r17,4(sp)
    4740:	dc000017 	ldw	r16,0(sp)
    4744:	dec00404 	addi	sp,sp,16
    4748:	f800283a 	ret
    474c:	00032f00 	call	32f0 <__sfp_lock_release>
    4750:	0025883a 	mov	r18,zero
    4754:	9005883a 	mov	r2,r18
    4758:	dfc00317 	ldw	ra,12(sp)
    475c:	dc800217 	ldw	r18,8(sp)
    4760:	dc400117 	ldw	r17,4(sp)
    4764:	dc000017 	ldw	r16,0(sp)
    4768:	dec00404 	addi	sp,sp,16
    476c:	f800283a 	ret
    4770:	8809883a 	mov	r4,r17
    4774:	00032fc0 	call	32fc <__sinit>
    4778:	8080030f 	ldh	r2,12(r16)
    477c:	103fd11e 	bne	r2,zero,46c4 <_fclose_r+0x38>
    4780:	003ff206 	br	474c <_fclose_r+0xc0>
    4784:	81400417 	ldw	r5,16(r16)
    4788:	8809883a 	mov	r4,r17
    478c:	00036800 	call	3680 <_free_r>
    4790:	003fd906 	br	46f8 <_fclose_r+0x6c>
    4794:	04bfffc4 	movi	r18,-1
    4798:	003fd406 	br	46ec <_fclose_r+0x60>

0000479c <fclose>:
    479c:	00800034 	movhi	r2,0
    47a0:	109b5104 	addi	r2,r2,27972
    47a4:	200b883a 	mov	r5,r4
    47a8:	11000017 	ldw	r4,0(r2)
    47ac:	000468c1 	jmpi	468c <_fclose_r>

000047b0 <_fstat_r>:
    47b0:	defffd04 	addi	sp,sp,-12
    47b4:	dc000015 	stw	r16,0(sp)
    47b8:	04000074 	movhi	r16,1
    47bc:	84229304 	addi	r16,r16,-30132
    47c0:	dc400115 	stw	r17,4(sp)
    47c4:	80000015 	stw	zero,0(r16)
    47c8:	2023883a 	mov	r17,r4
    47cc:	2809883a 	mov	r4,r5
    47d0:	300b883a 	mov	r5,r6
    47d4:	dfc00215 	stw	ra,8(sp)
    47d8:	00049980 	call	4998 <fstat>
    47dc:	1007883a 	mov	r3,r2
    47e0:	00bfffc4 	movi	r2,-1
    47e4:	18800626 	beq	r3,r2,4800 <_fstat_r+0x50>
    47e8:	1805883a 	mov	r2,r3
    47ec:	dfc00217 	ldw	ra,8(sp)
    47f0:	dc400117 	ldw	r17,4(sp)
    47f4:	dc000017 	ldw	r16,0(sp)
    47f8:	dec00304 	addi	sp,sp,12
    47fc:	f800283a 	ret
    4800:	80800017 	ldw	r2,0(r16)
    4804:	103ff826 	beq	r2,zero,47e8 <_fstat_r+0x38>
    4808:	88800015 	stw	r2,0(r17)
    480c:	1805883a 	mov	r2,r3
    4810:	dfc00217 	ldw	ra,8(sp)
    4814:	dc400117 	ldw	r17,4(sp)
    4818:	dc000017 	ldw	r16,0(sp)
    481c:	dec00304 	addi	sp,sp,12
    4820:	f800283a 	ret

00004824 <_isatty_r>:
    4824:	defffd04 	addi	sp,sp,-12
    4828:	dc000015 	stw	r16,0(sp)
    482c:	04000074 	movhi	r16,1
    4830:	84229304 	addi	r16,r16,-30132
    4834:	dc400115 	stw	r17,4(sp)
    4838:	80000015 	stw	zero,0(r16)
    483c:	2023883a 	mov	r17,r4
    4840:	2809883a 	mov	r4,r5
    4844:	dfc00215 	stw	ra,8(sp)
    4848:	0004a180 	call	4a18 <isatty>
    484c:	1007883a 	mov	r3,r2
    4850:	00bfffc4 	movi	r2,-1
    4854:	18800626 	beq	r3,r2,4870 <_isatty_r+0x4c>
    4858:	1805883a 	mov	r2,r3
    485c:	dfc00217 	ldw	ra,8(sp)
    4860:	dc400117 	ldw	r17,4(sp)
    4864:	dc000017 	ldw	r16,0(sp)
    4868:	dec00304 	addi	sp,sp,12
    486c:	f800283a 	ret
    4870:	80800017 	ldw	r2,0(r16)
    4874:	103ff826 	beq	r2,zero,4858 <_isatty_r+0x34>
    4878:	88800015 	stw	r2,0(r17)
    487c:	1805883a 	mov	r2,r3
    4880:	dfc00217 	ldw	ra,8(sp)
    4884:	dc400117 	ldw	r17,4(sp)
    4888:	dc000017 	ldw	r16,0(sp)
    488c:	dec00304 	addi	sp,sp,12
    4890:	f800283a 	ret

00004894 <_lseek_r>:
    4894:	defffd04 	addi	sp,sp,-12
    4898:	dc000015 	stw	r16,0(sp)
    489c:	04000074 	movhi	r16,1
    48a0:	84229304 	addi	r16,r16,-30132
    48a4:	dc400115 	stw	r17,4(sp)
    48a8:	80000015 	stw	zero,0(r16)
    48ac:	2023883a 	mov	r17,r4
    48b0:	2809883a 	mov	r4,r5
    48b4:	300b883a 	mov	r5,r6
    48b8:	380d883a 	mov	r6,r7
    48bc:	dfc00215 	stw	ra,8(sp)
    48c0:	0004a9c0 	call	4a9c <lseek>
    48c4:	1007883a 	mov	r3,r2
    48c8:	00bfffc4 	movi	r2,-1
    48cc:	18800626 	beq	r3,r2,48e8 <_lseek_r+0x54>
    48d0:	1805883a 	mov	r2,r3
    48d4:	dfc00217 	ldw	ra,8(sp)
    48d8:	dc400117 	ldw	r17,4(sp)
    48dc:	dc000017 	ldw	r16,0(sp)
    48e0:	dec00304 	addi	sp,sp,12
    48e4:	f800283a 	ret
    48e8:	80800017 	ldw	r2,0(r16)
    48ec:	103ff826 	beq	r2,zero,48d0 <_lseek_r+0x3c>
    48f0:	88800015 	stw	r2,0(r17)
    48f4:	1805883a 	mov	r2,r3
    48f8:	dfc00217 	ldw	ra,8(sp)
    48fc:	dc400117 	ldw	r17,4(sp)
    4900:	dc000017 	ldw	r16,0(sp)
    4904:	dec00304 	addi	sp,sp,12
    4908:	f800283a 	ret

0000490c <_read_r>:
    490c:	defffd04 	addi	sp,sp,-12
    4910:	dc000015 	stw	r16,0(sp)
    4914:	04000074 	movhi	r16,1
    4918:	84229304 	addi	r16,r16,-30132
    491c:	dc400115 	stw	r17,4(sp)
    4920:	80000015 	stw	zero,0(r16)
    4924:	2023883a 	mov	r17,r4
    4928:	2809883a 	mov	r4,r5
    492c:	300b883a 	mov	r5,r6
    4930:	380d883a 	mov	r6,r7
    4934:	dfc00215 	stw	ra,8(sp)
    4938:	0004b3c0 	call	4b3c <read>
    493c:	1007883a 	mov	r3,r2
    4940:	00bfffc4 	movi	r2,-1
    4944:	18800626 	beq	r3,r2,4960 <_read_r+0x54>
    4948:	1805883a 	mov	r2,r3
    494c:	dfc00217 	ldw	ra,8(sp)
    4950:	dc400117 	ldw	r17,4(sp)
    4954:	dc000017 	ldw	r16,0(sp)
    4958:	dec00304 	addi	sp,sp,12
    495c:	f800283a 	ret
    4960:	80800017 	ldw	r2,0(r16)
    4964:	103ff826 	beq	r2,zero,4948 <_read_r+0x3c>
    4968:	88800015 	stw	r2,0(r17)
    496c:	1805883a 	mov	r2,r3
    4970:	dfc00217 	ldw	ra,8(sp)
    4974:	dc400117 	ldw	r17,4(sp)
    4978:	dc000017 	ldw	r16,0(sp)
    497c:	dec00304 	addi	sp,sp,12
    4980:	f800283a 	ret

00004984 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4984:	20000226 	beq	r4,zero,4990 <_exit+0xc>
    ALT_SIM_FAIL();
    4988:	002af070 	cmpltui	zero,zero,43969
    498c:	00000106 	br	4994 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    4990:	002af0b0 	cmpltui	zero,zero,43970
    4994:	003fff06 	br	4994 <_exit+0x10>

00004998 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4998:	deffff04 	addi	sp,sp,-4
    499c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    49a0:	20000e16 	blt	r4,zero,49dc <fstat+0x44>
    49a4:	20c00324 	muli	r3,r4,12
    49a8:	00800034 	movhi	r2,0
    49ac:	1098e604 	addi	r2,r2,25496
    49b0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    49b4:	20000926 	beq	r4,zero,49dc <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    49b8:	20800017 	ldw	r2,0(r4)
    49bc:	10800817 	ldw	r2,32(r2)
    49c0:	10000226 	beq	r2,zero,49cc <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    49c4:	103ee83a 	callr	r2
    49c8:	00001006 	br	4a0c <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    49cc:	00880004 	movi	r2,8192
    49d0:	28800115 	stw	r2,4(r5)
    49d4:	0005883a 	mov	r2,zero
    49d8:	00000c06 	br	4a0c <fstat+0x74>
    49dc:	00800034 	movhi	r2,0
    49e0:	109b4d04 	addi	r2,r2,27956
    49e4:	10800017 	ldw	r2,0(r2)
    49e8:	1000031e 	bne	r2,zero,49f8 <fstat+0x60>
    49ec:	00c00074 	movhi	r3,1
    49f0:	18e29304 	addi	r3,r3,-30132
    49f4:	00000206 	br	4a00 <fstat+0x68>
    49f8:	103ee83a 	callr	r2
    49fc:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4a00:	00801444 	movi	r2,81
    4a04:	18800015 	stw	r2,0(r3)
    4a08:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    4a0c:	dfc00017 	ldw	ra,0(sp)
    4a10:	dec00104 	addi	sp,sp,4
    4a14:	f800283a 	ret

00004a18 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4a18:	defff004 	addi	sp,sp,-64
    4a1c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4a20:	20000f16 	blt	r4,zero,4a60 <isatty+0x48>
    4a24:	20c00324 	muli	r3,r4,12
    4a28:	00800034 	movhi	r2,0
    4a2c:	1098e604 	addi	r2,r2,25496
    4a30:	1885883a 	add	r2,r3,r2
  
  if (fd)
    4a34:	10000a26 	beq	r2,zero,4a60 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4a38:	10800017 	ldw	r2,0(r2)
    4a3c:	10800817 	ldw	r2,32(r2)
    4a40:	1000021e 	bne	r2,zero,4a4c <isatty+0x34>
    4a44:	00800044 	movi	r2,1
    4a48:	00001106 	br	4a90 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4a4c:	d80b883a 	mov	r5,sp
    4a50:	00049980 	call	4998 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4a54:	d8800117 	ldw	r2,4(sp)
    4a58:	10880020 	cmpeqi	r2,r2,8192
    4a5c:	00000c06 	br	4a90 <isatty+0x78>
    4a60:	00800034 	movhi	r2,0
    4a64:	109b4d04 	addi	r2,r2,27956
    4a68:	10800017 	ldw	r2,0(r2)
    4a6c:	1000031e 	bne	r2,zero,4a7c <isatty+0x64>
    4a70:	00c00074 	movhi	r3,1
    4a74:	18e29304 	addi	r3,r3,-30132
    4a78:	00000206 	br	4a84 <isatty+0x6c>
    4a7c:	103ee83a 	callr	r2
    4a80:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4a84:	00801444 	movi	r2,81
    4a88:	18800015 	stw	r2,0(r3)
    4a8c:	0005883a 	mov	r2,zero
    return 0;
  }
}
    4a90:	dfc00f17 	ldw	ra,60(sp)
    4a94:	dec01004 	addi	sp,sp,64
    4a98:	f800283a 	ret

00004a9c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4a9c:	defffe04 	addi	sp,sp,-8
    4aa0:	dfc00115 	stw	ra,4(sp)
    4aa4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4aa8:	2000020e 	bge	r4,zero,4ab4 <lseek+0x18>
    4aac:	043febc4 	movi	r16,-81
    4ab0:	00000d06 	br	4ae8 <lseek+0x4c>
    4ab4:	20c00324 	muli	r3,r4,12
    4ab8:	00800034 	movhi	r2,0
    4abc:	1098e604 	addi	r2,r2,25496
    4ac0:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    4ac4:	20001526 	beq	r4,zero,4b1c <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4ac8:	20800017 	ldw	r2,0(r4)
    4acc:	10800717 	ldw	r2,28(r2)
    4ad0:	1000021e 	bne	r2,zero,4adc <lseek+0x40>
    4ad4:	043fde84 	movi	r16,-134
    4ad8:	00000306 	br	4ae8 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4adc:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    4ae0:	1000100e 	bge	r2,zero,4b24 <lseek+0x88>
    4ae4:	1021883a 	mov	r16,r2
    4ae8:	00800034 	movhi	r2,0
    4aec:	109b4d04 	addi	r2,r2,27956
    4af0:	10800017 	ldw	r2,0(r2)
    4af4:	1000031e 	bne	r2,zero,4b04 <lseek+0x68>
    4af8:	00c00074 	movhi	r3,1
    4afc:	18e29304 	addi	r3,r3,-30132
    4b00:	00000206 	br	4b0c <lseek+0x70>
    4b04:	103ee83a 	callr	r2
    4b08:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    4b0c:	0405c83a 	sub	r2,zero,r16
    4b10:	18800015 	stw	r2,0(r3)
    4b14:	00bfffc4 	movi	r2,-1
    4b18:	00000206 	br	4b24 <lseek+0x88>
    4b1c:	043febc4 	movi	r16,-81
    4b20:	003ff106 	br	4ae8 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    4b24:	dfc00117 	ldw	ra,4(sp)
    4b28:	dc000017 	ldw	r16,0(sp)
    4b2c:	dec00204 	addi	sp,sp,8
    4b30:	f800283a 	ret

00004b34 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    4b34:	f800283a 	ret

00004b38 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    4b38:	f800283a 	ret

00004b3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    4b3c:	defffe04 	addi	sp,sp,-8
    4b40:	dfc00115 	stw	ra,4(sp)
    4b44:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4b48:	20002916 	blt	r4,zero,4bf0 <read+0xb4>
    4b4c:	20c00324 	muli	r3,r4,12
    4b50:	00800034 	movhi	r2,0
    4b54:	1098e604 	addi	r2,r2,25496
    4b58:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4b5c:	20002426 	beq	r4,zero,4bf0 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4b60:	20800217 	ldw	r2,8(r4)
    4b64:	108000cc 	andi	r2,r2,3
    4b68:	00c00044 	movi	r3,1
    4b6c:	10c01326 	beq	r2,r3,4bbc <read+0x80>
    4b70:	20800017 	ldw	r2,0(r4)
    4b74:	10800517 	ldw	r2,20(r2)
    4b78:	10001026 	beq	r2,zero,4bbc <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4b7c:	103ee83a 	callr	r2
    4b80:	1021883a 	mov	r16,r2
    4b84:	1000260e 	bge	r2,zero,4c20 <read+0xe4>
    4b88:	00800034 	movhi	r2,0
    4b8c:	109b4d04 	addi	r2,r2,27956
    4b90:	10800017 	ldw	r2,0(r2)
    4b94:	1000031e 	bne	r2,zero,4ba4 <read+0x68>
    4b98:	00c00074 	movhi	r3,1
    4b9c:	18e29304 	addi	r3,r3,-30132
    4ba0:	00000206 	br	4bac <read+0x70>
    4ba4:	103ee83a 	callr	r2
    4ba8:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    4bac:	0405c83a 	sub	r2,zero,r16
    4bb0:	18800015 	stw	r2,0(r3)
    4bb4:	043fffc4 	movi	r16,-1
    4bb8:	00001906 	br	4c20 <read+0xe4>
    4bbc:	00800034 	movhi	r2,0
    4bc0:	109b4d04 	addi	r2,r2,27956
    4bc4:	10800017 	ldw	r2,0(r2)
    4bc8:	1000031e 	bne	r2,zero,4bd8 <read+0x9c>
    4bcc:	00c00074 	movhi	r3,1
    4bd0:	18e29304 	addi	r3,r3,-30132
    4bd4:	00000206 	br	4be0 <read+0xa4>
    4bd8:	103ee83a 	callr	r2
    4bdc:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    4be0:	00800344 	movi	r2,13
    4be4:	18800015 	stw	r2,0(r3)
    4be8:	043fffc4 	movi	r16,-1
    4bec:	00000c06 	br	4c20 <read+0xe4>
    4bf0:	00800034 	movhi	r2,0
    4bf4:	109b4d04 	addi	r2,r2,27956
    4bf8:	10800017 	ldw	r2,0(r2)
    4bfc:	1000031e 	bne	r2,zero,4c0c <read+0xd0>
    4c00:	00c00074 	movhi	r3,1
    4c04:	18e29304 	addi	r3,r3,-30132
    4c08:	00000206 	br	4c14 <read+0xd8>
    4c0c:	103ee83a 	callr	r2
    4c10:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    4c14:	00801444 	movi	r2,81
    4c18:	18800015 	stw	r2,0(r3)
    4c1c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    4c20:	8005883a 	mov	r2,r16
    4c24:	dfc00117 	ldw	ra,4(sp)
    4c28:	dc000017 	ldw	r16,0(sp)
    4c2c:	dec00204 	addi	sp,sp,8
    4c30:	f800283a 	ret

00004c34 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c34:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c38:	00bfff84 	movi	r2,-2
    4c3c:	2884703a 	and	r2,r5,r2
    4c40:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4c44:	d0a00d17 	ldw	r2,-32716(gp)
    4c48:	108000c4 	addi	r2,r2,3
    4c4c:	00ffff04 	movi	r3,-4
    4c50:	10c6703a 	and	r3,r2,r3
    4c54:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    4c58:	1909883a 	add	r4,r3,r4
    4c5c:	00802034 	movhi	r2,128
    4c60:	10800004 	addi	r2,r2,0
    4c64:	1100032e 	bgeu	r2,r4,4c74 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c68:	2801703a 	wrctl	status,r5
    4c6c:	00ffffc4 	movi	r3,-1
    4c70:	00000206 	br	4c7c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    4c74:	d1200d15 	stw	r4,-32716(gp)
    4c78:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    4c7c:	1805883a 	mov	r2,r3
    4c80:	f800283a 	ret

00004c84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4c84:	defffe04 	addi	sp,sp,-8
    4c88:	dfc00115 	stw	ra,4(sp)
    4c8c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4c90:	20002816 	blt	r4,zero,4d34 <write+0xb0>
    4c94:	20c00324 	muli	r3,r4,12
    4c98:	00800034 	movhi	r2,0
    4c9c:	1098e604 	addi	r2,r2,25496
    4ca0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4ca4:	20002326 	beq	r4,zero,4d34 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4ca8:	20800217 	ldw	r2,8(r4)
    4cac:	108000cc 	andi	r2,r2,3
    4cb0:	10001326 	beq	r2,zero,4d00 <write+0x7c>
    4cb4:	20800017 	ldw	r2,0(r4)
    4cb8:	10800617 	ldw	r2,24(r2)
    4cbc:	10001026 	beq	r2,zero,4d00 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4cc0:	103ee83a 	callr	r2
    4cc4:	1021883a 	mov	r16,r2
    4cc8:	1000260e 	bge	r2,zero,4d64 <write+0xe0>
    4ccc:	00800034 	movhi	r2,0
    4cd0:	109b4d04 	addi	r2,r2,27956
    4cd4:	10800017 	ldw	r2,0(r2)
    4cd8:	1000031e 	bne	r2,zero,4ce8 <write+0x64>
    4cdc:	00c00074 	movhi	r3,1
    4ce0:	18e29304 	addi	r3,r3,-30132
    4ce4:	00000206 	br	4cf0 <write+0x6c>
    4ce8:	103ee83a 	callr	r2
    4cec:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    4cf0:	0405c83a 	sub	r2,zero,r16
    4cf4:	18800015 	stw	r2,0(r3)
    4cf8:	043fffc4 	movi	r16,-1
    4cfc:	00001906 	br	4d64 <write+0xe0>
    4d00:	00800034 	movhi	r2,0
    4d04:	109b4d04 	addi	r2,r2,27956
    4d08:	10800017 	ldw	r2,0(r2)
    4d0c:	1000031e 	bne	r2,zero,4d1c <write+0x98>
    4d10:	00c00074 	movhi	r3,1
    4d14:	18e29304 	addi	r3,r3,-30132
    4d18:	00000206 	br	4d24 <write+0xa0>
    4d1c:	103ee83a 	callr	r2
    4d20:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    4d24:	00800344 	movi	r2,13
    4d28:	18800015 	stw	r2,0(r3)
    4d2c:	043fffc4 	movi	r16,-1
    4d30:	00000c06 	br	4d64 <write+0xe0>
    4d34:	00800034 	movhi	r2,0
    4d38:	109b4d04 	addi	r2,r2,27956
    4d3c:	10800017 	ldw	r2,0(r2)
    4d40:	1000031e 	bne	r2,zero,4d50 <write+0xcc>
    4d44:	00c00074 	movhi	r3,1
    4d48:	18e29304 	addi	r3,r3,-30132
    4d4c:	00000206 	br	4d58 <write+0xd4>
    4d50:	103ee83a 	callr	r2
    4d54:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    4d58:	00801444 	movi	r2,81
    4d5c:	18800015 	stw	r2,0(r3)
    4d60:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    4d64:	8005883a 	mov	r2,r16
    4d68:	dfc00117 	ldw	ra,4(sp)
    4d6c:	dc000017 	ldw	r16,0(sp)
    4d70:	dec00204 	addi	sp,sp,8
    4d74:	f800283a 	ret
    4d78:	00002eb0 	cmpltui	zero,zero,186
