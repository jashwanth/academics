
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000071  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003a5  00000000  00000000  0000034f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001c2  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002b6  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f6  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a6  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  64:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  6c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	88 e9       	ldi	r24, 0x98	; 152
  70:	9a e3       	ldi	r25, 0x3A	; 58
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <toggle+0x6>
	_delay_ms(5);
	PORTC&=0xDF;
  76:	ad 98       	cbi	0x15, 5	; 21
}
  78:	08 95       	ret

0000007a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c>>4;
  7a:	98 2f       	mov	r25, r24
  7c:	92 95       	swap	r25
  7e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  80:	28 2f       	mov	r18, r24
  82:	2f 70       	andi	r18, 0x0F	; 15
	if(DC==0){
  84:	67 2b       	or	r22, r23
  86:	49 f4       	brne	.+18     	; 0x9a <LCD_Send+0x20>
		PORTC=unib;
  88:	95 bb       	out	0x15, r25	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  8a:	ad 9a       	sbi	0x15, 5	; 21
  8c:	88 e9       	ldi	r24, 0x98	; 152
  8e:	9a e3       	ldi	r25, 0x3A	; 58
  90:	fc 01       	movw	r30, r24
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_Send+0x18>
	_delay_ms(5);
	PORTC&=0xDF;
  96:	ad 98       	cbi	0x15, 5	; 21
  98:	0a c0       	rjmp	.+20     	; 0xae <LCD_Send+0x34>
		PORTC=lnib;
		toggle();
	}
	else
	{
		PORTC=unib|0x80;
  9a:	90 68       	ori	r25, 0x80	; 128
  9c:	95 bb       	out	0x15, r25	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  9e:	ad 9a       	sbi	0x15, 5	; 21
  a0:	88 e9       	ldi	r24, 0x98	; 152
  a2:	9a e3       	ldi	r25, 0x3A	; 58
  a4:	fc 01       	movw	r30, r24
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_Send+0x2c>
	_delay_ms(5);
	PORTC&=0xDF;
  aa:	ad 98       	cbi	0x15, 5	; 21
	}
	else
	{
		PORTC=unib|0x80;
		toggle();
		PORTC=lnib|0x80;
  ac:	20 68       	ori	r18, 0x80	; 128
  ae:	25 bb       	out	0x15, r18	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  b0:	ad 9a       	sbi	0x15, 5	; 21
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Send+0x38>
	_delay_ms(5);
	PORTC&=0xDF;
  b6:	ad 98       	cbi	0x15, 5	; 21
  b8:	08 95       	ret

000000ba <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  be:	15 ba       	out	0x15, r1	; 21
	LCD_Send(0x01,0);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
	LCD_Send(0x0C,0);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
	LCD_Send(0x28,0);
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
}
  de:	08 95       	ret

000000e0 <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	71 05       	cpc	r23, r1
  e4:	11 f4       	brne	.+4      	; 0xea <LCD_GotoXY+0xa>
	{
		LCD_Send(127+x,0);
  e6:	81 58       	subi	r24, 0x81	; 129
  e8:	01 c0       	rjmp	.+2      	; 0xec <LCD_GotoXY+0xc>
	}
	else
	{
		LCD_Send(191+x,0);
  ea:	81 54       	subi	r24, 0x41	; 65
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
  f4:	08 95       	ret

000000f6 <LCD_Send_String>:
	LCD_Send(0x0C,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 104:	dc 01       	movw	r26, r24
 106:	0d 90       	ld	r0, X+
 108:	00 20       	and	r0, r0
 10a:	e9 f7       	brne	.-6      	; 0x106 <LCD_Send_String+0x10>
 10c:	8d 01       	movw	r16, r26
 10e:	01 50       	subi	r16, 0x01	; 1
 110:	10 40       	sbci	r17, 0x00	; 0
 112:	08 1b       	sub	r16, r24
 114:	19 0b       	sbc	r17, r25
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	09 c0       	rjmp	.+18     	; 0x12e <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 11c:	f7 01       	movw	r30, r14
 11e:	ec 0f       	add	r30, r28
 120:	fd 1f       	adc	r31, r29
 122:	80 81       	ld	r24, Z
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	c0 17       	cp	r28, r16
 130:	d1 07       	cpc	r29, r17
 132:	a4 f3       	brlt	.-24     	; 0x11c <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	08 95       	ret

00000142 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	c4 56       	subi	r28, 0x64	; 100
 150:	d0 40       	sbci	r29, 0x00	; 0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	8c 01       	movw	r16, r24
 15e:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 160:	ba 01       	movw	r22, r20
 162:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_GotoXY>
	char t[100];
	if(data<0){
 166:	17 ff       	sbrs	r17, 7
 168:	08 c0       	rjmp	.+16     	; 0x17a <LCD_Print+0x38>
		LCD_Send('-',1);
 16a:	8d e2       	ldi	r24, 0x2D	; 45
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
		data*=-1;
 174:	10 95       	com	r17
 176:	01 95       	neg	r16
 178:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	LCD_Send_String(itoa(data,t,10));
 17a:	c8 01       	movw	r24, r16
 17c:	be 01       	movw	r22, r28
 17e:	6f 5f       	subi	r22, 0xFF	; 255
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	4a e0       	ldi	r20, 0x0A	; 10
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	0e 94 ee 00 	call	0x1dc	; 0x1dc <itoa>
 18a:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Send_String>
}	
 18e:	cc 59       	subi	r28, 0x9C	; 156
 190:	df 4f       	sbci	r29, 0xFF	; 255
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <main>:
#include<avr/io.h>
#include "lcd.h"
#include <util/delay.h>
#include<avr/interrupt.h>
int main(void){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
	unsigned int x;
	unsigned char u,l;
	LCD_init();
 1aa:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>
 1ae:	cc e2       	ldi	r28, 0x2C	; 44
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
	x=0b0000001100000101;
	while(1){
		u=(unsigned char)(x>>5);
		LCD_Send(0x01,0);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
		LCD_Print(u,1,1);
 1bc:	88 e1       	ldi	r24, 0x18	; 24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Print>
 1cc:	80 ea       	ldi	r24, 0xA0	; 160
 1ce:	9f e0       	ldi	r25, 0x0F	; 15
 1d0:	fe 01       	movw	r30, r28
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <main+0x2a>
 1da:	eb cf       	rjmp	.-42     	; 0x1b2 <main+0xc>

000001dc <itoa>:
 1dc:	fb 01       	movw	r30, r22
 1de:	9f 01       	movw	r18, r30
 1e0:	e8 94       	clt
 1e2:	42 30       	cpi	r20, 0x02	; 2
 1e4:	c4 f0       	brlt	.+48     	; 0x216 <itoa+0x3a>
 1e6:	45 32       	cpi	r20, 0x25	; 37
 1e8:	b4 f4       	brge	.+44     	; 0x216 <itoa+0x3a>
 1ea:	4a 30       	cpi	r20, 0x0A	; 10
 1ec:	29 f4       	brne	.+10     	; 0x1f8 <itoa+0x1c>
 1ee:	97 fb       	bst	r25, 7
 1f0:	1e f4       	brtc	.+6      	; 0x1f8 <itoa+0x1c>
 1f2:	90 95       	com	r25
 1f4:	81 95       	neg	r24
 1f6:	9f 4f       	sbci	r25, 0xFF	; 255
 1f8:	64 2f       	mov	r22, r20
 1fa:	77 27       	eor	r23, r23
 1fc:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 200:	80 5d       	subi	r24, 0xD0	; 208
 202:	8a 33       	cpi	r24, 0x3A	; 58
 204:	0c f0       	brlt	.+2      	; 0x208 <itoa+0x2c>
 206:	89 5d       	subi	r24, 0xD9	; 217
 208:	81 93       	st	Z+, r24
 20a:	cb 01       	movw	r24, r22
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	a1 f7       	brne	.-24     	; 0x1f8 <itoa+0x1c>
 210:	16 f4       	brtc	.+4      	; 0x216 <itoa+0x3a>
 212:	5d e2       	ldi	r21, 0x2D	; 45
 214:	51 93       	st	Z+, r21
 216:	10 82       	st	Z, r1
 218:	c9 01       	movw	r24, r18
 21a:	0c 94 0f 01 	jmp	0x21e	; 0x21e <strrev>

0000021e <strrev>:
 21e:	dc 01       	movw	r26, r24
 220:	fc 01       	movw	r30, r24
 222:	67 2f       	mov	r22, r23
 224:	71 91       	ld	r23, Z+
 226:	77 23       	and	r23, r23
 228:	e1 f7       	brne	.-8      	; 0x222 <strrev+0x4>
 22a:	32 97       	sbiw	r30, 0x02	; 2
 22c:	04 c0       	rjmp	.+8      	; 0x236 <strrev+0x18>
 22e:	7c 91       	ld	r23, X
 230:	6d 93       	st	X+, r22
 232:	70 83       	st	Z, r23
 234:	62 91       	ld	r22, -Z
 236:	ae 17       	cp	r26, r30
 238:	bf 07       	cpc	r27, r31
 23a:	c8 f3       	brcs	.-14     	; 0x22e <strrev+0x10>
 23c:	08 95       	ret

0000023e <__udivmodhi4>:
 23e:	aa 1b       	sub	r26, r26
 240:	bb 1b       	sub	r27, r27
 242:	51 e1       	ldi	r21, 0x11	; 17
 244:	07 c0       	rjmp	.+14     	; 0x254 <__udivmodhi4_ep>

00000246 <__udivmodhi4_loop>:
 246:	aa 1f       	adc	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	a6 17       	cp	r26, r22
 24c:	b7 07       	cpc	r27, r23
 24e:	10 f0       	brcs	.+4      	; 0x254 <__udivmodhi4_ep>
 250:	a6 1b       	sub	r26, r22
 252:	b7 0b       	sbc	r27, r23

00000254 <__udivmodhi4_ep>:
 254:	88 1f       	adc	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	5a 95       	dec	r21
 25a:	a9 f7       	brne	.-22     	; 0x246 <__udivmodhi4_loop>
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
