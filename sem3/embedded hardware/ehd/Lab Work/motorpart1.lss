
motorpart1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000038c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000cb  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000547  00000000  00000000  00000477  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000222  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000043e  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000143  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000201  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  74:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  7c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	80 e3       	ldi	r24, 0x30	; 48
  80:	95 e7       	ldi	r25, 0x75	; 117
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  86:	ad 98       	cbi	0x15, 5	; 21
}
  88:	08 95       	ret

0000008a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  8a:	af 9a       	sbi	0x15, 7	; 21
}
  8c:	08 95       	ret

0000008e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  8e:	af 98       	cbi	0x15, 7	; 21
}
  90:	08 95       	ret

00000092 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  92:	ae 98       	cbi	0x15, 6	; 21
}
  94:	08 95       	ret

00000096 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  96:	ae 9a       	sbi	0x15, 6	; 21
}
  98:	08 95       	ret

0000009a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  9a:	98 2f       	mov	r25, r24
  9c:	92 95       	swap	r25
  9e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  a0:	48 2f       	mov	r20, r24
  a2:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  a4:	61 15       	cp	r22, r1
  a6:	71 05       	cpc	r23, r1
  a8:	c9 f4       	brne	.+50     	; 0xdc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	98 2b       	or	r25, r24
  b0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  b2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  b4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  b6:	ad 9a       	sbi	0x15, 5	; 21
  b8:	20 e3       	ldi	r18, 0x30	; 48
  ba:	35 e7       	ldi	r19, 0x75	; 117
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  c2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	48 2b       	or	r20, r24
  ca:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  cc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ce:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  d0:	ad 9a       	sbi	0x15, 5	; 21
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  d8:	ad 98       	cbi	0x15, 5	; 21
  da:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	71 05       	cpc	r23, r1
  e0:	c1 f4       	brne	.+48     	; 0x112 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	98 2b       	or	r25, r24
  e8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  ea:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ec:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  ee:	ad 9a       	sbi	0x15, 5	; 21
  f0:	20 e3       	ldi	r18, 0x30	; 48
  f2:	35 e7       	ldi	r19, 0x75	; 117
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  fa:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	48 2b       	or	r20, r24
 102:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 104:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 106:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 108:	ad 9a       	sbi	0x15, 5	; 21
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 110:	ad 98       	cbi	0x15, 5	; 21
 112:	08 95       	ret

00000114 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 118:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 11a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x0F,0);
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x28,0);
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
}
 13a:	08 95       	ret

0000013c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	71 05       	cpc	r23, r1
 140:	31 f4       	brne	.+12     	; 0x14e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 142:	81 58       	subi	r24, 0x81	; 129
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 14c:	08 95       	ret
	}
	else if(y==2)
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	71 05       	cpc	r23, r1
 152:	29 f4       	brne	.+10     	; 0x15e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 154:	81 54       	subi	r24, 0x41	; 65
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 15e:	08 95       	ret

00000160 <pwm>:
	//LCD_Print(i,1,2);
}

void pwm(void)
{
	TCCR2=0x07;
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	85 bd       	out	0x25, r24	; 37
}
 164:	08 95       	ret

00000166 <npwm>:

void npwm(void)
{
	TCCR2=0x00;
 166:	15 bc       	out	0x25, r1	; 37
}
 168:	08 95       	ret

0000016a <__vector_2>:

ISR(INT1_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
	cli();
 178:	f8 94       	cli
	count++;
 17a:	80 91 60 00 	lds	r24, 0x0060
 17e:	90 91 61 00 	lds	r25, 0x0061
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 61 00 	sts	0x0061, r25
 188:	80 93 60 00 	sts	0x0060, r24
	sei();
 18c:	78 94       	sei
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1aa:	dc 01       	movw	r26, r24
 1ac:	0d 90       	ld	r0, X+
 1ae:	00 20       	and	r0, r0
 1b0:	e9 f7       	brne	.-6      	; 0x1ac <LCD_Send_String+0x10>
 1b2:	8d 01       	movw	r16, r26
 1b4:	01 50       	subi	r16, 0x01	; 1
 1b6:	10 40       	sbci	r17, 0x00	; 0
 1b8:	08 1b       	sub	r16, r24
 1ba:	19 0b       	sbc	r17, r25
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1c2:	f7 01       	movw	r30, r14
 1c4:	ec 0f       	add	r30, r28
 1c6:	fd 1f       	adc	r31, r29
 1c8:	80 81       	ld	r24, Z
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	c0 17       	cp	r28, r16
 1d6:	d1 07       	cpc	r29, r17
 1d8:	a4 f3       	brlt	.-24     	; 0x1c2 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	c4 56       	subi	r28, 0x64	; 100
 1f6:	d0 40       	sbci	r29, 0x00	; 0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	8c 01       	movw	r16, r24
 204:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 206:	ba 01       	movw	r22, r20
 208:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_GotoXY>
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 20c:	c8 01       	movw	r24, r16
 20e:	be 01       	movw	r22, r28
 210:	6f 5f       	subi	r22, 0xFF	; 255
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	4a e0       	ldi	r20, 0x0A	; 10
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0e 94 45 01 	call	0x28a	; 0x28a <itoa>
 21c:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Send_String>
 220:	cc 59       	subi	r28, 0x9C	; 156
 222:	df 4f       	sbci	r29, 0xFF	; 255
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <main>:

void pwm(void);
void npwm(void);
int count=0;
int main(void)
{
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	MCUCR=0x08;
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	85 bf       	out	0x35, r24	; 53
	GICR=0x80;
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	8b bf       	out	0x3b, r24	; 59
	DDRD=0x11;
 246:	81 e1       	ldi	r24, 0x11	; 17
 248:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
 24a:	12 ba       	out	0x12, r1	; 18
	LCD_init();
 24c:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_init>
	//LCD_Print(i,1,2);
}

void pwm(void)
{
	TCCR2=0x07;
 250:	17 e0       	ldi	r17, 0x07	; 7
 252:	cc e2       	ldi	r28, 0x2C	; 44
 254:	d1 e0       	ldi	r29, 0x01	; 1
 256:	15 bd       	out	0x25, r17	; 37
	//pd3 will produce external interrupt
	while(1)
	{
		
		pwm();
		sei();
 258:	78 94       	sei
		while(TCNT2<255)
 25a:	84 b5       	in	r24, 0x24	; 36
 25c:	8f 3f       	cpi	r24, 0xFF	; 255
 25e:	e9 f7       	brne	.-6      	; 0x25a <main+0x22>
		{
			;
		}
		TCNT2=0;
 260:	14 bc       	out	0x24, r1	; 36
		
		cli();
 262:	f8 94       	cli
	TCCR2=0x07;
}

void npwm(void)
{
	TCCR2=0x00;
 264:	15 bc       	out	0x25, r1	; 37
		TCNT2=0;
		
		cli();
		npwm();
		
		LCD_Print(count,1,1);
 266:	80 91 60 00 	lds	r24, 0x0060
 26a:	90 91 61 00 	lds	r25, 0x0061
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Print>
 27a:	88 ee       	ldi	r24, 0xE8	; 232
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	fe 01       	movw	r30, r28
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 284:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 286:	d9 f7       	brne	.-10     	; 0x27e <main+0x46>
 288:	e6 cf       	rjmp	.-52     	; 0x256 <main+0x1e>

0000028a <itoa>:
 28a:	fb 01       	movw	r30, r22
 28c:	9f 01       	movw	r18, r30
 28e:	e8 94       	clt
 290:	42 30       	cpi	r20, 0x02	; 2
 292:	c4 f0       	brlt	.+48     	; 0x2c4 <itoa+0x3a>
 294:	45 32       	cpi	r20, 0x25	; 37
 296:	b4 f4       	brge	.+44     	; 0x2c4 <itoa+0x3a>
 298:	4a 30       	cpi	r20, 0x0A	; 10
 29a:	29 f4       	brne	.+10     	; 0x2a6 <itoa+0x1c>
 29c:	97 fb       	bst	r25, 7
 29e:	1e f4       	brtc	.+6      	; 0x2a6 <itoa+0x1c>
 2a0:	90 95       	com	r25
 2a2:	81 95       	neg	r24
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	64 2f       	mov	r22, r20
 2a8:	77 27       	eor	r23, r23
 2aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <__udivmodhi4>
 2ae:	80 5d       	subi	r24, 0xD0	; 208
 2b0:	8a 33       	cpi	r24, 0x3A	; 58
 2b2:	0c f0       	brlt	.+2      	; 0x2b6 <itoa+0x2c>
 2b4:	89 5d       	subi	r24, 0xD9	; 217
 2b6:	81 93       	st	Z+, r24
 2b8:	cb 01       	movw	r24, r22
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	a1 f7       	brne	.-24     	; 0x2a6 <itoa+0x1c>
 2be:	16 f4       	brtc	.+4      	; 0x2c4 <itoa+0x3a>
 2c0:	5d e2       	ldi	r21, 0x2D	; 45
 2c2:	51 93       	st	Z+, r21
 2c4:	10 82       	st	Z, r1
 2c6:	c9 01       	movw	r24, r18
 2c8:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <strrev>

000002cc <strrev>:
 2cc:	dc 01       	movw	r26, r24
 2ce:	fc 01       	movw	r30, r24
 2d0:	67 2f       	mov	r22, r23
 2d2:	71 91       	ld	r23, Z+
 2d4:	77 23       	and	r23, r23
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <strrev+0x4>
 2d8:	32 97       	sbiw	r30, 0x02	; 2
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <strrev+0x18>
 2dc:	7c 91       	ld	r23, X
 2de:	6d 93       	st	X+, r22
 2e0:	70 83       	st	Z, r23
 2e2:	62 91       	ld	r22, -Z
 2e4:	ae 17       	cp	r26, r30
 2e6:	bf 07       	cpc	r27, r31
 2e8:	c8 f3       	brcs	.-14     	; 0x2dc <strrev+0x10>
 2ea:	08 95       	ret

000002ec <__udivmodhi4>:
 2ec:	aa 1b       	sub	r26, r26
 2ee:	bb 1b       	sub	r27, r27
 2f0:	51 e1       	ldi	r21, 0x11	; 17
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <__udivmodhi4_ep>

000002f4 <__udivmodhi4_loop>:
 2f4:	aa 1f       	adc	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	a6 17       	cp	r26, r22
 2fa:	b7 07       	cpc	r27, r23
 2fc:	10 f0       	brcs	.+4      	; 0x302 <__udivmodhi4_ep>
 2fe:	a6 1b       	sub	r26, r22
 300:	b7 0b       	sbc	r27, r23

00000302 <__udivmodhi4_ep>:
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	5a 95       	dec	r21
 308:	a9 f7       	brne	.-22     	; 0x2f4 <__udivmodhi4_loop>
 30a:	80 95       	com	r24
 30c:	90 95       	com	r25
 30e:	bc 01       	movw	r22, r24
 310:	cd 01       	movw	r24, r26
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
