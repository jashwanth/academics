
speedetection1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000041c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e2  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000057d  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001fc  00000000  00000000  00000a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004cd  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016c  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000201  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 28 01 	call	0x250	; 0x250 <main>
  74:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  7c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	80 e3       	ldi	r24, 0x30	; 48
  80:	95 e7       	ldi	r25, 0x75	; 117
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  86:	ad 98       	cbi	0x15, 5	; 21
}
  88:	08 95       	ret

0000008a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  8a:	af 9a       	sbi	0x15, 7	; 21
}
  8c:	08 95       	ret

0000008e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  8e:	af 98       	cbi	0x15, 7	; 21
}
  90:	08 95       	ret

00000092 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  92:	ae 98       	cbi	0x15, 6	; 21
}
  94:	08 95       	ret

00000096 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  96:	ae 9a       	sbi	0x15, 6	; 21
}
  98:	08 95       	ret

0000009a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  9a:	98 2f       	mov	r25, r24
  9c:	92 95       	swap	r25
  9e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  a0:	48 2f       	mov	r20, r24
  a2:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  a4:	61 15       	cp	r22, r1
  a6:	71 05       	cpc	r23, r1
  a8:	c9 f4       	brne	.+50     	; 0xdc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	98 2b       	or	r25, r24
  b0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  b2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  b4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  b6:	ad 9a       	sbi	0x15, 5	; 21
  b8:	20 e3       	ldi	r18, 0x30	; 48
  ba:	35 e7       	ldi	r19, 0x75	; 117
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  c2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	48 2b       	or	r20, r24
  ca:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  cc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ce:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  d0:	ad 9a       	sbi	0x15, 5	; 21
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  d8:	ad 98       	cbi	0x15, 5	; 21
  da:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	71 05       	cpc	r23, r1
  e0:	c1 f4       	brne	.+48     	; 0x112 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	98 2b       	or	r25, r24
  e8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  ea:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ec:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  ee:	ad 9a       	sbi	0x15, 5	; 21
  f0:	20 e3       	ldi	r18, 0x30	; 48
  f2:	35 e7       	ldi	r19, 0x75	; 117
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  fa:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	48 2b       	or	r20, r24
 102:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 104:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 106:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 108:	ad 9a       	sbi	0x15, 5	; 21
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 110:	ad 98       	cbi	0x15, 5	; 21
 112:	08 95       	ret

00000114 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 118:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 11a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x0F,0);
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x28,0);
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
}
 13a:	08 95       	ret

0000013c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	71 05       	cpc	r23, r1
 140:	31 f4       	brne	.+12     	; 0x14e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 142:	81 58       	subi	r24, 0x81	; 129
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 14c:	08 95       	ret
	}
	else if(y==2)
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	71 05       	cpc	r23, r1
 152:	29 f4       	brne	.+10     	; 0x15e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 154:	81 54       	subi	r24, 0x41	; 65
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 15e:	08 95       	ret

00000160 <__vector_2>:
#include "lcd.h"

volatile int count;

ISR(INT1_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
	count++;
 16e:	80 91 60 00 	lds	r24, 0x0060
 172:	90 91 61 00 	lds	r25, 0x0061
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 61 00 	sts	0x0061, r25
 17c:	80 93 60 00 	sts	0x0060, r24
}
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <pwmdriver>:

void pwmdriver(void)
{
	TCCR2=0x07;
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	85 bd       	out	0x25, r24	; 37
}
 192:	08 95       	ret

00000194 <timer1>:

void timer1(void)
{
	TCCR1A=0x82;
 194:	82 e8       	ldi	r24, 0x82	; 130
 196:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x11;
 198:	81 e1       	ldi	r24, 0x11	; 17
 19a:	8e bd       	out	0x2e, r24	; 46
	OCR1A=512;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	9b bd       	out	0x2b, r25	; 43
 1a2:	8a bd       	out	0x2a, r24	; 42
	ICR1=1024;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	94 e0       	ldi	r25, 0x04	; 4
 1a8:	97 bd       	out	0x27, r25	; 39
 1aa:	86 bd       	out	0x26, r24	; 38
}
 1ac:	08 95       	ret

000001ae <timer1_dis>:

void timer1_dis(void)
{
	TCCR1A=0x00;
 1ae:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x00; 
 1b0:	1e bc       	out	0x2e, r1	; 46
}
 1b2:	08 95       	ret

000001b4 <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1c2:	dc 01       	movw	r26, r24
 1c4:	0d 90       	ld	r0, X+
 1c6:	00 20       	and	r0, r0
 1c8:	e9 f7       	brne	.-6      	; 0x1c4 <LCD_Send_String+0x10>
 1ca:	8d 01       	movw	r16, r26
 1cc:	01 50       	subi	r16, 0x01	; 1
 1ce:	10 40       	sbci	r17, 0x00	; 0
 1d0:	08 1b       	sub	r16, r24
 1d2:	19 0b       	sbc	r17, r25
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1da:	f7 01       	movw	r30, r14
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	80 81       	ld	r24, Z
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	c0 17       	cp	r28, r16
 1ee:	d1 07       	cpc	r29, r17
 1f0:	a4 f3       	brlt	.-24     	; 0x1da <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned int y)
{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	c4 56       	subi	r28, 0x64	; 100
 20e:	d0 40       	sbci	r29, 0x00	; 0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	8c 01       	movw	r16, r24
 21c:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 21e:	ba 01       	movw	r22, r20
 220:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_GotoXY>
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 224:	c8 01       	movw	r24, r16
 226:	be 01       	movw	r22, r28
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	4a e0       	ldi	r20, 0x0A	; 10
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	0e 94 8d 01 	call	0x31a	; 0x31a <itoa>
 234:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Send_String>
}	
 238:	cc 59       	subi	r28, 0x9C	; 156
 23a:	df 4f       	sbci	r29, 0xFF	; 255
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <main>:

int main(void)
{
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
	int setcount;
	int diff;
	DDRD=0x21;
 258:	81 e2       	ldi	r24, 0x21	; 33
 25a:	81 bb       	out	0x11, r24	; 17
	PORTD=0x01;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	82 bb       	out	0x12, r24	; 18
	SREG=0x80;
 260:	10 e8       	ldi	r17, 0x80	; 128
 262:	1f bf       	out	0x3f, r17	; 63
	LCD_init();
 264:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_init>
	GICR= (1<<INT1);
 268:	1b bf       	out	0x3b, r17	; 59
	MCUCR= (1<<ISC10);
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	85 bf       	out	0x35, r24	; 53
	count=0;
 26e:	10 92 61 00 	sts	0x0061, r1
 272:	10 92 60 00 	sts	0x0060, r1
	TCCR2=0x07;
}

void timer1(void)
{
	TCCR1A=0x82;
 276:	82 e8       	ldi	r24, 0x82	; 130
 278:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x11;
 27a:	81 e1       	ldi	r24, 0x11	; 17
 27c:	8e bd       	out	0x2e, r24	; 46
	OCR1A=512;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	9b bd       	out	0x2b, r25	; 43
 284:	8a bd       	out	0x2a, r24	; 42
	ICR1=1024;
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	94 e0       	ldi	r25, 0x04	; 4
 28a:	97 bd       	out	0x27, r25	; 39
 28c:	86 bd       	out	0x26, r24	; 38
	count++;
}

void pwmdriver(void)
{
	TCCR2=0x07;
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	85 bd       	out	0x25, r24	; 37
 292:	0c e2       	ldi	r16, 0x2C	; 44
 294:	11 e0       	ldi	r17, 0x01	; 1
	timer1();
	pwmdriver();
	while(1)
	{
		setcount=11;
		while(TCNT2<250);
 296:	84 b5       	in	r24, 0x24	; 36
 298:	8a 3f       	cpi	r24, 0xFA	; 250
 29a:	e8 f3       	brcs	.-6      	; 0x296 <main+0x46>
		cli();
 29c:	f8 94       	cli
		LCD_Print(count,1,1);
 29e:	80 91 60 00 	lds	r24, 0x0060
 2a2:	90 91 61 00 	lds	r25, 0x0061
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	0e 94 00 01 	call	0x200	; 0x200 <LCD_Print>
		diff=count-setcount;
 2b2:	c0 91 60 00 	lds	r28, 0x0060
 2b6:	d0 91 61 00 	lds	r29, 0x0061
 2ba:	2b 97       	sbiw	r28, 0x0b	; 11
		LCD_Print(diff,10,1);
 2bc:	ce 01       	movw	r24, r28
 2be:	6a e0       	ldi	r22, 0x0A	; 10
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	0e 94 00 01 	call	0x200	; 0x200 <LCD_Print>
		if(diff>0)
 2ca:	1c 16       	cp	r1, r28
 2cc:	1d 06       	cpc	r1, r29
 2ce:	34 f4       	brge	.+12     	; 0x2dc <main+0x8c>
		{
			OCR1A=OCR1A-(diff-5);
 2d0:	8a b5       	in	r24, 0x2a	; 42
 2d2:	9b b5       	in	r25, 0x2b	; 43
 2d4:	05 96       	adiw	r24, 0x05	; 5
 2d6:	8c 1b       	sub	r24, r28
 2d8:	9d 0b       	sbc	r25, r29
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <main+0x9a>
		}
		else if(diff<0)
 2dc:	20 97       	sbiw	r28, 0x00	; 0
 2de:	39 f0       	breq	.+14     	; 0x2ee <main+0x9e>
		{
			OCR1A=OCR1A+(diff-5);
 2e0:	8a b5       	in	r24, 0x2a	; 42
 2e2:	9b b5       	in	r25, 0x2b	; 43
 2e4:	05 97       	sbiw	r24, 0x05	; 5
 2e6:	8c 0f       	add	r24, r28
 2e8:	9d 1f       	adc	r25, r29
 2ea:	9b bd       	out	0x2b, r25	; 43
 2ec:	8a bd       	out	0x2a, r24	; 42
		}
		LCD_Print(OCR1A,1,2);
 2ee:	8a b5       	in	r24, 0x2a	; 42
 2f0:	9b b5       	in	r25, 0x2b	; 43
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	42 e0       	ldi	r20, 0x02	; 2
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	0e 94 00 01 	call	0x200	; 0x200 <LCD_Print>
 2fe:	88 eb       	ldi	r24, 0xB8	; 184
 300:	9b e0       	ldi	r25, 0x0B	; 11
 302:	f8 01       	movw	r30, r16
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0xb4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 308:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30a:	d9 f7       	brne	.-10     	; 0x302 <main+0xb2>
		_delay_ms(300);
		TCNT2=0;
 30c:	14 bc       	out	0x24, r1	; 36
		count=0;
 30e:	10 92 61 00 	sts	0x0061, r1
 312:	10 92 60 00 	sts	0x0060, r1
		sei();
 316:	78 94       	sei
 318:	be cf       	rjmp	.-132    	; 0x296 <main+0x46>

0000031a <itoa>:
 31a:	fb 01       	movw	r30, r22
 31c:	9f 01       	movw	r18, r30
 31e:	e8 94       	clt
 320:	42 30       	cpi	r20, 0x02	; 2
 322:	c4 f0       	brlt	.+48     	; 0x354 <itoa+0x3a>
 324:	45 32       	cpi	r20, 0x25	; 37
 326:	b4 f4       	brge	.+44     	; 0x354 <itoa+0x3a>
 328:	4a 30       	cpi	r20, 0x0A	; 10
 32a:	29 f4       	brne	.+10     	; 0x336 <itoa+0x1c>
 32c:	97 fb       	bst	r25, 7
 32e:	1e f4       	brtc	.+6      	; 0x336 <itoa+0x1c>
 330:	90 95       	com	r25
 332:	81 95       	neg	r24
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	64 2f       	mov	r22, r20
 338:	77 27       	eor	r23, r23
 33a:	0e 94 be 01 	call	0x37c	; 0x37c <__udivmodhi4>
 33e:	80 5d       	subi	r24, 0xD0	; 208
 340:	8a 33       	cpi	r24, 0x3A	; 58
 342:	0c f0       	brlt	.+2      	; 0x346 <itoa+0x2c>
 344:	89 5d       	subi	r24, 0xD9	; 217
 346:	81 93       	st	Z+, r24
 348:	cb 01       	movw	r24, r22
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	a1 f7       	brne	.-24     	; 0x336 <itoa+0x1c>
 34e:	16 f4       	brtc	.+4      	; 0x354 <itoa+0x3a>
 350:	5d e2       	ldi	r21, 0x2D	; 45
 352:	51 93       	st	Z+, r21
 354:	10 82       	st	Z, r1
 356:	c9 01       	movw	r24, r18
 358:	0c 94 ae 01 	jmp	0x35c	; 0x35c <strrev>

0000035c <strrev>:
 35c:	dc 01       	movw	r26, r24
 35e:	fc 01       	movw	r30, r24
 360:	67 2f       	mov	r22, r23
 362:	71 91       	ld	r23, Z+
 364:	77 23       	and	r23, r23
 366:	e1 f7       	brne	.-8      	; 0x360 <strrev+0x4>
 368:	32 97       	sbiw	r30, 0x02	; 2
 36a:	04 c0       	rjmp	.+8      	; 0x374 <strrev+0x18>
 36c:	7c 91       	ld	r23, X
 36e:	6d 93       	st	X+, r22
 370:	70 83       	st	Z, r23
 372:	62 91       	ld	r22, -Z
 374:	ae 17       	cp	r26, r30
 376:	bf 07       	cpc	r27, r31
 378:	c8 f3       	brcs	.-14     	; 0x36c <strrev+0x10>
 37a:	08 95       	ret

0000037c <__udivmodhi4>:
 37c:	aa 1b       	sub	r26, r26
 37e:	bb 1b       	sub	r27, r27
 380:	51 e1       	ldi	r21, 0x11	; 17
 382:	07 c0       	rjmp	.+14     	; 0x392 <__udivmodhi4_ep>

00000384 <__udivmodhi4_loop>:
 384:	aa 1f       	adc	r26, r26
 386:	bb 1f       	adc	r27, r27
 388:	a6 17       	cp	r26, r22
 38a:	b7 07       	cpc	r27, r23
 38c:	10 f0       	brcs	.+4      	; 0x392 <__udivmodhi4_ep>
 38e:	a6 1b       	sub	r26, r22
 390:	b7 0b       	sbc	r27, r23

00000392 <__udivmodhi4_ep>:
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	5a 95       	dec	r21
 398:	a9 f7       	brne	.-22     	; 0x384 <__udivmodhi4_loop>
 39a:	80 95       	com	r24
 39c:	90 95       	com	r25
 39e:	bc 01       	movw	r22, r24
 3a0:	cd 01       	movw	r24, r26
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
