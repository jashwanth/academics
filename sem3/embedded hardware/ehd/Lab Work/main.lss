
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000432  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000004a6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000db  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000568  00000000  00000000  000005a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000216  00000000  00000000  00000b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004f9  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015b  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000281  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 38 01 	call	0x270	; 0x270 <main>
  74:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  7c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	80 e3       	ldi	r24, 0x30	; 48
  80:	95 e7       	ldi	r25, 0x75	; 117
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  86:	ad 98       	cbi	0x15, 5	; 21
}
  88:	08 95       	ret

0000008a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  8a:	af 9a       	sbi	0x15, 7	; 21
}
  8c:	08 95       	ret

0000008e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  8e:	af 98       	cbi	0x15, 7	; 21
}
  90:	08 95       	ret

00000092 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  92:	ae 98       	cbi	0x15, 6	; 21
}
  94:	08 95       	ret

00000096 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  96:	ae 9a       	sbi	0x15, 6	; 21
}
  98:	08 95       	ret

0000009a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  9a:	98 2f       	mov	r25, r24
  9c:	92 95       	swap	r25
  9e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  a0:	48 2f       	mov	r20, r24
  a2:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  a4:	61 15       	cp	r22, r1
  a6:	71 05       	cpc	r23, r1
  a8:	c9 f4       	brne	.+50     	; 0xdc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	98 2b       	or	r25, r24
  b0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  b2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  b4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  b6:	ad 9a       	sbi	0x15, 5	; 21
  b8:	20 e3       	ldi	r18, 0x30	; 48
  ba:	35 e7       	ldi	r19, 0x75	; 117
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  c2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	48 2b       	or	r20, r24
  ca:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  cc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ce:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  d0:	ad 9a       	sbi	0x15, 5	; 21
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  d8:	ad 98       	cbi	0x15, 5	; 21
  da:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	71 05       	cpc	r23, r1
  e0:	c1 f4       	brne	.+48     	; 0x112 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	98 2b       	or	r25, r24
  e8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  ea:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ec:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  ee:	ad 9a       	sbi	0x15, 5	; 21
  f0:	20 e3       	ldi	r18, 0x30	; 48
  f2:	35 e7       	ldi	r19, 0x75	; 117
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  fa:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	48 2b       	or	r20, r24
 102:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 104:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 106:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 108:	ad 9a       	sbi	0x15, 5	; 21
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 110:	ad 98       	cbi	0x15, 5	; 21
 112:	08 95       	ret

00000114 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 118:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 11a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x0F,0);
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x28,0);
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
}
 13a:	08 95       	ret

0000013c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	71 05       	cpc	r23, r1
 140:	31 f4       	brne	.+12     	; 0x14e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 142:	81 58       	subi	r24, 0x81	; 129
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 14c:	08 95       	ret
	}
	else if(y==2)
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	71 05       	cpc	r23, r1
 152:	29 f4       	brne	.+10     	; 0x15e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 154:	81 54       	subi	r24, 0x41	; 65
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 15e:	08 95       	ret

00000160 <pwm_maker>:
#include <avr/interrupt.h>
#include "lcd.h"

void pwm_maker(void)
{
	TCCR1A |= 0x82;
 160:	8f b5       	in	r24, 0x2f	; 47
 162:	82 68       	ori	r24, 0x82	; 130
 164:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 0x13;
 166:	8e b5       	in	r24, 0x2e	; 46
 168:	83 61       	ori	r24, 0x13	; 19
 16a:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 500;
 16c:	84 ef       	ldi	r24, 0xF4	; 244
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	97 bd       	out	0x27, r25	; 39
 172:	86 bd       	out	0x26, r24	; 38
}
 174:	08 95       	ret

00000176 <set_duty_cycle>:

void set_duty_cycle(int dc)
{
 176:	9c 01       	movw	r18, r24
	if(dc > 500)
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	85 3f       	cpi	r24, 0xF5	; 245
 17c:	94 07       	cpc	r25, r20
 17e:	24 f0       	brlt	.+8      	; 0x188 <set_duty_cycle+0x12>
		OCR1A = 500;
 180:	84 ef       	ldi	r24, 0xF4	; 244
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	9b bd       	out	0x2b, r25	; 43
 186:	8a bd       	out	0x2a, r24	; 42
	if(dc < 25)
 188:	29 31       	cpi	r18, 0x19	; 25
 18a:	31 05       	cpc	r19, r1
 18c:	24 f4       	brge	.+8      	; 0x196 <set_duty_cycle+0x20>
		OCR1A = 25;
 18e:	89 e1       	ldi	r24, 0x19	; 25
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9b bd       	out	0x2b, r25	; 43
 194:	8a bd       	out	0x2a, r24	; 42
	if(dc >= 25 && dc <= 500)
 196:	c9 01       	movw	r24, r18
 198:	49 97       	sbiw	r24, 0x19	; 25
 19a:	8c 5d       	subi	r24, 0xDC	; 220
 19c:	91 40       	sbci	r25, 0x01	; 1
 19e:	10 f4       	brcc	.+4      	; 0x1a4 <set_duty_cycle+0x2e>
	OCR1A = dc;
 1a0:	3b bd       	out	0x2b, r19	; 43
 1a2:	2a bd       	out	0x2a, r18	; 42
 1a4:	08 95       	ret

000001a6 <__vector_2>:
}

volatile int count=0;
ISR(INT1_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
	count++;
 1b4:	80 91 60 00 	lds	r24, 0x0060
 1b8:	90 91 61 00 	lds	r25, 0x0061
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 61 00 	sts	0x0061, r25
 1c2:	80 93 60 00 	sts	0x0060, r24
}
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1e2:	dc 01       	movw	r26, r24
 1e4:	0d 90       	ld	r0, X+
 1e6:	00 20       	and	r0, r0
 1e8:	e9 f7       	brne	.-6      	; 0x1e4 <LCD_Send_String+0x10>
 1ea:	8d 01       	movw	r16, r26
 1ec:	01 50       	subi	r16, 0x01	; 1
 1ee:	10 40       	sbci	r17, 0x00	; 0
 1f0:	08 1b       	sub	r16, r24
 1f2:	19 0b       	sbc	r17, r25
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1fa:	f7 01       	movw	r30, r14
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	80 81       	ld	r24, Z
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	c0 17       	cp	r28, r16
 20e:	d1 07       	cpc	r29, r17
 210:	a4 f3       	brlt	.-24     	; 0x1fa <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned int y)
{
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	c4 56       	subi	r28, 0x64	; 100
 22e:	d0 40       	sbci	r29, 0x00	; 0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	8c 01       	movw	r16, r24
 23c:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 23e:	ba 01       	movw	r22, r20
 240:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_GotoXY>
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 244:	c8 01       	movw	r24, r16
 246:	be 01       	movw	r22, r28
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	4a e0       	ldi	r20, 0x0A	; 10
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <itoa>
 254:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_Send_String>
}	
 258:	cc 59       	subi	r28, 0x9C	; 156
 25a:	df 4f       	sbci	r29, 0xFF	; 255
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <main>:


int main(void)
{
 270:	bf 92       	push	r11
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29

	int set_count = 6;
	int th = 2;
	int a = 100;
	
	LCD_init();
 282:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_init>
	DDRD = 0x21;
 286:	81 e2       	ldi	r24, 0x21	; 33
 288:	81 bb       	out	0x11, r24	; 17
	PORTD &= 0xFE;
 28a:	90 98       	cbi	0x12, 0	; 18
 28c:	c4 e6       	ldi	r28, 0x64	; 100
 28e:	d0 e0       	ldi	r29, 0x00	; 0

void pwm_maker(void)
{
	TCCR1A |= 0x82;
	TCCR1B |= 0x13;
	ICR1 = 500;
 290:	24 ef       	ldi	r18, 0xF4	; 244
 292:	c2 2e       	mov	r12, r18
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	d2 2e       	mov	r13, r18
		pwm_maker();
		TCCR2 |= 0x07;
		GICR |= 1<<INT1;
		MCUCR |= 0x08;
		MCUCR &= 0xFB;
		SREG = 0x80;
 298:	90 e8       	ldi	r25, 0x80	; 128
 29a:	b9 2e       	mov	r11, r25
 29c:	8c e2       	ldi	r24, 0x2C	; 44
 29e:	e8 2e       	mov	r14, r24
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	f8 2e       	mov	r15, r24
	DDRD = 0x21;
	PORTD &= 0xFE;
	
	while(1)
	{
		count = 0;
 2a4:	10 92 61 00 	sts	0x0061, r1
 2a8:	10 92 60 00 	sts	0x0060, r1
		TCNT2=0;
 2ac:	14 bc       	out	0x24, r1	; 36
		TCCR2 &=0xB7;
 2ae:	85 b5       	in	r24, 0x25	; 37
 2b0:	87 7b       	andi	r24, 0xB7	; 183
 2b2:	85 bd       	out	0x25, r24	; 37
		TCCR2 |=0x07;
 2b4:	85 b5       	in	r24, 0x25	; 37
 2b6:	87 60       	ori	r24, 0x07	; 7
 2b8:	85 bd       	out	0x25, r24	; 37
		PORTD |= 0x01;
 2ba:	90 9a       	sbi	0x12, 0	; 18
		set_duty_cycle(a);
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 bb 00 	call	0x176	; 0x176 <set_duty_cycle>
#include <avr/interrupt.h>
#include "lcd.h"

void pwm_maker(void)
{
	TCCR1A |= 0x82;
 2c2:	8f b5       	in	r24, 0x2f	; 47
 2c4:	82 68       	ori	r24, 0x82	; 130
 2c6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 0x13;
 2c8:	8e b5       	in	r24, 0x2e	; 46
 2ca:	83 61       	ori	r24, 0x13	; 19
 2cc:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 500;
 2ce:	d7 bc       	out	0x27, r13	; 39
 2d0:	c6 bc       	out	0x26, r12	; 38
		TCCR2 &=0xB7;
		TCCR2 |=0x07;
		PORTD |= 0x01;
		set_duty_cycle(a);
		pwm_maker();
		TCCR2 |= 0x07;
 2d2:	85 b5       	in	r24, 0x25	; 37
 2d4:	87 60       	ori	r24, 0x07	; 7
 2d6:	85 bd       	out	0x25, r24	; 37
		GICR |= 1<<INT1;
 2d8:	8b b7       	in	r24, 0x3b	; 59
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	8b bf       	out	0x3b, r24	; 59
		MCUCR |= 0x08;
 2de:	85 b7       	in	r24, 0x35	; 53
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	85 bf       	out	0x35, r24	; 53
		MCUCR &= 0xFB;
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	85 bf       	out	0x35, r24	; 53
		SREG = 0x80;
 2ea:	bf be       	out	0x3f, r11	; 63
		sei();
 2ec:	78 94       	sei
		while(TCNT2 < 254);
 2ee:	84 b5       	in	r24, 0x24	; 36
 2f0:	8e 3f       	cpi	r24, 0xFE	; 254
 2f2:	e8 f3       	brcs	.-6      	; 0x2ee <main+0x7e>
		cli();
 2f4:	f8 94       	cli
		TCCR2 &= 0xF8;
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	88 7f       	andi	r24, 0xF8	; 248
 2fa:	85 bd       	out	0x25, r24	; 37
		LCD_Print(count, 1, 1);
 2fc:	80 91 60 00 	lds	r24, 0x0060
 300:	90 91 61 00 	lds	r25, 0x0061
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Print>
		LCD_Print(TCNT2, 5, 1);
 310:	84 b5       	in	r24, 0x24	; 36
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	65 e0       	ldi	r22, 0x05	; 5
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Print>
		LCD_Print(set_count, 1, 2);
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	42 e0       	ldi	r20, 0x02	; 2
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Print>
		LCD_Print(OCR1A, 5, 2);
 330:	8a b5       	in	r24, 0x2a	; 42
 332:	9b b5       	in	r25, 0x2b	; 43
 334:	65 e0       	ldi	r22, 0x05	; 5
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	42 e0       	ldi	r20, 0x02	; 2
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Print>
		if(set_count > count)
 340:	80 91 60 00 	lds	r24, 0x0060
 344:	90 91 61 00 	lds	r25, 0x0061
 348:	06 97       	sbiw	r24, 0x06	; 6
 34a:	8c f4       	brge	.+34     	; 0x36e <main+0xfe>
		{
			if(set_count - count > th)
 34c:	20 91 60 00 	lds	r18, 0x0060
 350:	30 91 61 00 	lds	r19, 0x0061
 354:	86 e0       	ldi	r24, 0x06	; 6
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	82 1b       	sub	r24, r18
 35a:	93 0b       	sbc	r25, r19
 35c:	03 97       	sbiw	r24, 0x03	; 3
 35e:	3c f0       	brlt	.+14     	; 0x36e <main+0xfe>
				set_duty_cycle(a++);
 360:	8e 01       	movw	r16, r28
 362:	0f 5f       	subi	r16, 0xFF	; 255
 364:	1f 4f       	sbci	r17, 0xFF	; 255
 366:	ce 01       	movw	r24, r28
 368:	0e 94 bb 00 	call	0x176	; 0x176 <set_duty_cycle>
 36c:	e8 01       	movw	r28, r16
		}
		
		if(count > set_count)
 36e:	80 91 60 00 	lds	r24, 0x0060
 372:	90 91 61 00 	lds	r25, 0x0061
 376:	07 97       	sbiw	r24, 0x07	; 7
 378:	6c f0       	brlt	.+26     	; 0x394 <main+0x124>
		{
			if(count - set_count > th)
 37a:	80 91 60 00 	lds	r24, 0x0060
 37e:	90 91 61 00 	lds	r25, 0x0061
 382:	09 97       	sbiw	r24, 0x09	; 9
 384:	3c f0       	brlt	.+14     	; 0x394 <main+0x124>
				set_duty_cycle(a--);
 386:	8e 01       	movw	r16, r28
 388:	01 50       	subi	r16, 0x01	; 1
 38a:	10 40       	sbci	r17, 0x00	; 0
 38c:	ce 01       	movw	r24, r28
 38e:	0e 94 bb 00 	call	0x176	; 0x176 <set_duty_cycle>
 392:	e8 01       	movw	r28, r16
 394:	88 eb       	ldi	r24, 0xB8	; 184
 396:	9b e0       	ldi	r25, 0x0B	; 11
 398:	f7 01       	movw	r30, r14
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x12a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 39e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a0:	d9 f7       	brne	.-10     	; 0x398 <main+0x128>
 3a2:	80 cf       	rjmp	.-256    	; 0x2a4 <main+0x34>

000003a4 <itoa>:
 3a4:	fb 01       	movw	r30, r22
 3a6:	9f 01       	movw	r18, r30
 3a8:	e8 94       	clt
 3aa:	42 30       	cpi	r20, 0x02	; 2
 3ac:	c4 f0       	brlt	.+48     	; 0x3de <itoa+0x3a>
 3ae:	45 32       	cpi	r20, 0x25	; 37
 3b0:	b4 f4       	brge	.+44     	; 0x3de <itoa+0x3a>
 3b2:	4a 30       	cpi	r20, 0x0A	; 10
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <itoa+0x1c>
 3b6:	97 fb       	bst	r25, 7
 3b8:	1e f4       	brtc	.+6      	; 0x3c0 <itoa+0x1c>
 3ba:	90 95       	com	r25
 3bc:	81 95       	neg	r24
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	64 2f       	mov	r22, r20
 3c2:	77 27       	eor	r23, r23
 3c4:	0e 94 03 02 	call	0x406	; 0x406 <__udivmodhi4>
 3c8:	80 5d       	subi	r24, 0xD0	; 208
 3ca:	8a 33       	cpi	r24, 0x3A	; 58
 3cc:	0c f0       	brlt	.+2      	; 0x3d0 <itoa+0x2c>
 3ce:	89 5d       	subi	r24, 0xD9	; 217
 3d0:	81 93       	st	Z+, r24
 3d2:	cb 01       	movw	r24, r22
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	a1 f7       	brne	.-24     	; 0x3c0 <itoa+0x1c>
 3d8:	16 f4       	brtc	.+4      	; 0x3de <itoa+0x3a>
 3da:	5d e2       	ldi	r21, 0x2D	; 45
 3dc:	51 93       	st	Z+, r21
 3de:	10 82       	st	Z, r1
 3e0:	c9 01       	movw	r24, r18
 3e2:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <strrev>

000003e6 <strrev>:
 3e6:	dc 01       	movw	r26, r24
 3e8:	fc 01       	movw	r30, r24
 3ea:	67 2f       	mov	r22, r23
 3ec:	71 91       	ld	r23, Z+
 3ee:	77 23       	and	r23, r23
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <strrev+0x4>
 3f2:	32 97       	sbiw	r30, 0x02	; 2
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <strrev+0x18>
 3f6:	7c 91       	ld	r23, X
 3f8:	6d 93       	st	X+, r22
 3fa:	70 83       	st	Z, r23
 3fc:	62 91       	ld	r22, -Z
 3fe:	ae 17       	cp	r26, r30
 400:	bf 07       	cpc	r27, r31
 402:	c8 f3       	brcs	.-14     	; 0x3f6 <strrev+0x10>
 404:	08 95       	ret

00000406 <__udivmodhi4>:
 406:	aa 1b       	sub	r26, r26
 408:	bb 1b       	sub	r27, r27
 40a:	51 e1       	ldi	r21, 0x11	; 17
 40c:	07 c0       	rjmp	.+14     	; 0x41c <__udivmodhi4_ep>

0000040e <__udivmodhi4_loop>:
 40e:	aa 1f       	adc	r26, r26
 410:	bb 1f       	adc	r27, r27
 412:	a6 17       	cp	r26, r22
 414:	b7 07       	cpc	r27, r23
 416:	10 f0       	brcs	.+4      	; 0x41c <__udivmodhi4_ep>
 418:	a6 1b       	sub	r26, r22
 41a:	b7 0b       	sbc	r27, r23

0000041c <__udivmodhi4_ep>:
 41c:	88 1f       	adc	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	5a 95       	dec	r21
 422:	a9 f7       	brne	.-22     	; 0x40e <__udivmodhi4_loop>
 424:	80 95       	com	r24
 426:	90 95       	com	r25
 428:	bc 01       	movw	r22, r24
 42a:	cd 01       	movw	r24, r26
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
