
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000113  00000000  00000000  0000012f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b2  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000144  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bb  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  00000513  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<avr/delay.h>
int main(void)
{
	DDRD=0b11111101;
  6c:	8d ef       	ldi	r24, 0xFD	; 253
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD|=0b11111111;
  70:	82 b3       	in	r24, 0x12	; 18
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	82 bb       	out	0x12, r24	; 18
	SFIOR&=0b11111011;
  76:	80 b7       	in	r24, 0x30	; 48
  78:	8b 7f       	andi	r24, 0xFB	; 251
  7a:	80 bf       	out	0x30, r24	; 48
	while(1)
	{
		if(PIND & 0b00000010)
			PORTD=0b00000001;
  7c:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	2c e2       	ldi	r18, 0x2C	; 44
  80:	31 e0       	ldi	r19, 0x01	; 1
	DDRD=0b11111101;
	PORTD|=0b11111111;
	SFIOR&=0b11111011;
	while(1)
	{
		if(PIND & 0b00000010)
  82:	81 9b       	sbis	0x10, 1	; 16
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
			PORTD=0b00000001;
  86:	42 bb       	out	0x12, r20	; 18
  88:	01 c0       	rjmp	.+2      	; 0x8c <main+0x20>
		else
			PORTD=0X00;
  8a:	12 ba       	out	0x12, r1	; 18
  8c:	88 e8       	ldi	r24, 0x88	; 136
  8e:	93 e1       	ldi	r25, 0x13	; 19
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  98:	a1 f3       	breq	.-24     	; 0x82 <main+0x16>
  9a:	fa cf       	rjmp	.-12     	; 0x90 <main+0x24>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
