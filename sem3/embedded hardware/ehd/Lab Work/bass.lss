
bass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000ac  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000004e0  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001cd  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003a6  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000d0  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000134  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001c9  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  64:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  6c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	80 e3       	ldi	r24, 0x30	; 48
  70:	95 e7       	ldi	r25, 0x75	; 117
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  76:	ad 98       	cbi	0x15, 5	; 21
}
  78:	08 95       	ret

0000007a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  7a:	af 9a       	sbi	0x15, 7	; 21
}
  7c:	08 95       	ret

0000007e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  7e:	af 98       	cbi	0x15, 7	; 21
}
  80:	08 95       	ret

00000082 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  82:	ae 98       	cbi	0x15, 6	; 21
}
  84:	08 95       	ret

00000086 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  86:	ae 9a       	sbi	0x15, 6	; 21
}
  88:	08 95       	ret

0000008a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  8a:	98 2f       	mov	r25, r24
  8c:	92 95       	swap	r25
  8e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  90:	48 2f       	mov	r20, r24
  92:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  94:	61 15       	cp	r22, r1
  96:	71 05       	cpc	r23, r1
  98:	c9 f4       	brne	.+50     	; 0xcc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	98 2b       	or	r25, r24
  a0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  a2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  a4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  a6:	ad 9a       	sbi	0x15, 5	; 21
  a8:	20 e3       	ldi	r18, 0x30	; 48
  aa:	35 e7       	ldi	r19, 0x75	; 117
  ac:	c9 01       	movw	r24, r18
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  b2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	48 2b       	or	r20, r24
  ba:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  bc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  be:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  c0:	ad 9a       	sbi	0x15, 5	; 21
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  c8:	ad 98       	cbi	0x15, 5	; 21
  ca:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	71 05       	cpc	r23, r1
  d0:	c1 f4       	brne	.+48     	; 0x102 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	98 2b       	or	r25, r24
  d8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  da:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  dc:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  de:	ad 9a       	sbi	0x15, 5	; 21
  e0:	20 e3       	ldi	r18, 0x30	; 48
  e2:	35 e7       	ldi	r19, 0x75	; 117
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  ea:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	48 2b       	or	r20, r24
  f2:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  f4:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  f6:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  f8:	ad 9a       	sbi	0x15, 5	; 21
  fa:	c9 01       	movw	r24, r18
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 100:	ad 98       	cbi	0x15, 5	; 21
 102:	08 95       	ret

00000104 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 108:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 10a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x0F,0);
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x28,0);
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
}
 12a:	08 95       	ret

0000012c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	71 05       	cpc	r23, r1
 130:	31 f4       	brne	.+12     	; 0x13e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 132:	81 58       	subi	r24, 0x81	; 129
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 13c:	08 95       	ret
	}
	else if(y==2)
 13e:	62 30       	cpi	r22, 0x02	; 2
 140:	71 05       	cpc	r23, r1
 142:	29 f4       	brne	.+10     	; 0x14e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 144:	81 54       	subi	r24, 0x41	; 65
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 14e:	08 95       	ret

00000150 <timer1>:
#include<avr/interrupt.h>
#include "lcd.h"

void timer1(int a)
{
	TCCR1A|=0x82;
 150:	2f b5       	in	r18, 0x2f	; 47
 152:	22 68       	ori	r18, 0x82	; 130
 154:	2f bd       	out	0x2f, r18	; 47
	TCCR1B|=0x13;
 156:	2e b5       	in	r18, 0x2e	; 46
 158:	23 61       	ori	r18, 0x13	; 19
 15a:	2e bd       	out	0x2e, r18	; 46
	OCR1A=a;
 15c:	9b bd       	out	0x2b, r25	; 43
 15e:	8a bd       	out	0x2a, r24	; 42
	ICR1=400;
 160:	80 e9       	ldi	r24, 0x90	; 144
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	97 bd       	out	0x27, r25	; 39
 166:	86 bd       	out	0x26, r24	; 38
}
 168:	08 95       	ret

0000016a <main>:

int main(void)
{
	DDRD=0x30;
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	81 bb       	out	0x11, r24	; 17
#include<avr/interrupt.h>
#include "lcd.h"

void timer1(int a)
{
	TCCR1A|=0x82;
 16e:	8f b5       	in	r24, 0x2f	; 47
 170:	82 68       	ori	r24, 0x82	; 130
 172:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=0x13;
 174:	8e b5       	in	r24, 0x2e	; 46
 176:	83 61       	ori	r24, 0x13	; 19
 178:	8e bd       	out	0x2e, r24	; 46
	OCR1A=a;
 17a:	8a ef       	ldi	r24, 0xFA	; 250
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9b bd       	out	0x2b, r25	; 43
 180:	8a bd       	out	0x2a, r24	; 42
	ICR1=400;
 182:	80 e9       	ldi	r24, 0x90	; 144
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	97 bd       	out	0x27, r25	; 39
 188:	86 bd       	out	0x26, r24	; 38
int main(void)
{
	DDRD=0x30;
	timer1(250);
	return 0;
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	08 95       	ret

00000190 <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 19e:	dc 01       	movw	r26, r24
 1a0:	0d 90       	ld	r0, X+
 1a2:	00 20       	and	r0, r0
 1a4:	e9 f7       	brne	.-6      	; 0x1a0 <LCD_Send_String+0x10>
 1a6:	8d 01       	movw	r16, r26
 1a8:	01 50       	subi	r16, 0x01	; 1
 1aa:	10 40       	sbci	r17, 0x00	; 0
 1ac:	08 1b       	sub	r16, r24
 1ae:	19 0b       	sbc	r17, r25
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1b6:	f7 01       	movw	r30, r14
 1b8:	ec 0f       	add	r30, r28
 1ba:	fd 1f       	adc	r31, r29
 1bc:	80 81       	ld	r24, Z
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1c6:	21 96       	adiw	r28, 0x01	; 1
 1c8:	c0 17       	cp	r28, r16
 1ca:	d1 07       	cpc	r29, r17
 1cc:	a4 f3       	brlt	.-24     	; 0x1b6 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	c4 56       	subi	r28, 0x64	; 100
 1ea:	d0 40       	sbci	r29, 0x00	; 0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
 1f6:	8c 01       	movw	r16, r24
 1f8:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 1fa:	ba 01       	movw	r22, r20
 1fc:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_GotoXY>
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 200:	c8 01       	movw	r24, r16
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	4a e0       	ldi	r20, 0x0A	; 10
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	0e 94 16 01 	call	0x22c	; 0x22c <itoa>
 210:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Send_String>
 214:	cc 59       	subi	r28, 0x9C	; 156
 216:	df 4f       	sbci	r29, 0xFF	; 255
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <itoa>:
 22c:	fb 01       	movw	r30, r22
 22e:	9f 01       	movw	r18, r30
 230:	e8 94       	clt
 232:	42 30       	cpi	r20, 0x02	; 2
 234:	c4 f0       	brlt	.+48     	; 0x266 <itoa+0x3a>
 236:	45 32       	cpi	r20, 0x25	; 37
 238:	b4 f4       	brge	.+44     	; 0x266 <itoa+0x3a>
 23a:	4a 30       	cpi	r20, 0x0A	; 10
 23c:	29 f4       	brne	.+10     	; 0x248 <itoa+0x1c>
 23e:	97 fb       	bst	r25, 7
 240:	1e f4       	brtc	.+6      	; 0x248 <itoa+0x1c>
 242:	90 95       	com	r25
 244:	81 95       	neg	r24
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	64 2f       	mov	r22, r20
 24a:	77 27       	eor	r23, r23
 24c:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 250:	80 5d       	subi	r24, 0xD0	; 208
 252:	8a 33       	cpi	r24, 0x3A	; 58
 254:	0c f0       	brlt	.+2      	; 0x258 <itoa+0x2c>
 256:	89 5d       	subi	r24, 0xD9	; 217
 258:	81 93       	st	Z+, r24
 25a:	cb 01       	movw	r24, r22
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	a1 f7       	brne	.-24     	; 0x248 <itoa+0x1c>
 260:	16 f4       	brtc	.+4      	; 0x266 <itoa+0x3a>
 262:	5d e2       	ldi	r21, 0x2D	; 45
 264:	51 93       	st	Z+, r21
 266:	10 82       	st	Z, r1
 268:	c9 01       	movw	r24, r18
 26a:	0c 94 37 01 	jmp	0x26e	; 0x26e <strrev>

0000026e <strrev>:
 26e:	dc 01       	movw	r26, r24
 270:	fc 01       	movw	r30, r24
 272:	67 2f       	mov	r22, r23
 274:	71 91       	ld	r23, Z+
 276:	77 23       	and	r23, r23
 278:	e1 f7       	brne	.-8      	; 0x272 <strrev+0x4>
 27a:	32 97       	sbiw	r30, 0x02	; 2
 27c:	04 c0       	rjmp	.+8      	; 0x286 <strrev+0x18>
 27e:	7c 91       	ld	r23, X
 280:	6d 93       	st	X+, r22
 282:	70 83       	st	Z, r23
 284:	62 91       	ld	r22, -Z
 286:	ae 17       	cp	r26, r30
 288:	bf 07       	cpc	r27, r31
 28a:	c8 f3       	brcs	.-14     	; 0x27e <strrev+0x10>
 28c:	08 95       	ret

0000028e <__udivmodhi4>:
 28e:	aa 1b       	sub	r26, r26
 290:	bb 1b       	sub	r27, r27
 292:	51 e1       	ldi	r21, 0x11	; 17
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <__udivmodhi4_ep>

00000296 <__udivmodhi4_loop>:
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	a6 17       	cp	r26, r22
 29c:	b7 07       	cpc	r27, r23
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__udivmodhi4_ep>
 2a0:	a6 1b       	sub	r26, r22
 2a2:	b7 0b       	sbc	r27, r23

000002a4 <__udivmodhi4_ep>:
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	5a 95       	dec	r21
 2aa:	a9 f7       	brne	.-22     	; 0x296 <__udivmodhi4_loop>
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
