
sharp2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000ce  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000055a  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d8  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000046a  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000f0  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014b  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001c9  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  64:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  6c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	80 e3       	ldi	r24, 0x30	; 48
  70:	95 e7       	ldi	r25, 0x75	; 117
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  76:	ad 98       	cbi	0x15, 5	; 21
}
  78:	08 95       	ret

0000007a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  7a:	af 9a       	sbi	0x15, 7	; 21
}
  7c:	08 95       	ret

0000007e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  7e:	af 98       	cbi	0x15, 7	; 21
}
  80:	08 95       	ret

00000082 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  82:	ae 98       	cbi	0x15, 6	; 21
}
  84:	08 95       	ret

00000086 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  86:	ae 9a       	sbi	0x15, 6	; 21
}
  88:	08 95       	ret

0000008a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  8a:	98 2f       	mov	r25, r24
  8c:	92 95       	swap	r25
  8e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  90:	48 2f       	mov	r20, r24
  92:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  94:	61 15       	cp	r22, r1
  96:	71 05       	cpc	r23, r1
  98:	c9 f4       	brne	.+50     	; 0xcc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	98 2b       	or	r25, r24
  a0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  a2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  a4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  a6:	ad 9a       	sbi	0x15, 5	; 21
  a8:	20 e3       	ldi	r18, 0x30	; 48
  aa:	35 e7       	ldi	r19, 0x75	; 117
  ac:	c9 01       	movw	r24, r18
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  b2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	48 2b       	or	r20, r24
  ba:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  bc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  be:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  c0:	ad 9a       	sbi	0x15, 5	; 21
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  c8:	ad 98       	cbi	0x15, 5	; 21
  ca:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	71 05       	cpc	r23, r1
  d0:	c1 f4       	brne	.+48     	; 0x102 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	98 2b       	or	r25, r24
  d8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  da:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  dc:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  de:	ad 9a       	sbi	0x15, 5	; 21
  e0:	20 e3       	ldi	r18, 0x30	; 48
  e2:	35 e7       	ldi	r19, 0x75	; 117
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  ea:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	48 2b       	or	r20, r24
  f2:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  f4:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  f6:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  f8:	ad 9a       	sbi	0x15, 5	; 21
  fa:	c9 01       	movw	r24, r18
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 100:	ad 98       	cbi	0x15, 5	; 21
 102:	08 95       	ret

00000104 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 108:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 10a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x0F,0);
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x28,0);
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
}
 12a:	08 95       	ret

0000012c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	71 05       	cpc	r23, r1
 130:	31 f4       	brne	.+12     	; 0x13e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 132:	81 58       	subi	r24, 0x81	; 129
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 13c:	08 95       	ret
	}
	else if(y==2)
 13e:	62 30       	cpi	r22, 0x02	; 2
 140:	71 05       	cpc	r23, r1
 142:	29 f4       	brne	.+10     	; 0x14e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 144:	81 54       	subi	r24, 0x41	; 65
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 14e:	08 95       	ret

00000150 <USART_Init>:
	UCSRC|=0x8E;
}*/	
void USART_Init( unsigned int ubrr)
{
/* Set baud rate */
UBRRH = (unsigned char)(ubrr>>8);
 150:	90 bd       	out	0x20, r25	; 32
UBRRL = (unsigned char)ubrr;
 152:	89 b9       	out	0x09, r24	; 9
/* Enable receiver and transmitter */
UCSRB =(1<<TXEN);
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	8a b9       	out	0x0a, r24	; 10
/* Set frame format: 8data, 2stop bit */
UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 158:	8e e8       	ldi	r24, 0x8E	; 142
 15a:	80 bd       	out	0x20, r24	; 32
}
 15c:	08 95       	ret

0000015e <ADC_Single>:

void ADC_Single(void)
{
	DDRA=0x00;
 15e:	1a ba       	out	0x1a, r1	; 26
	PORTA=0x00;
 160:	1b ba       	out	0x1b, r1	; 27
	ADCSRA=0xC6;
 162:	86 ec       	ldi	r24, 0xC6	; 198
 164:	86 b9       	out	0x06, r24	; 6
	ADMUX=0xC0;
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=0x40;
 16a:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
 16c:	36 99       	sbic	0x06, 6	; 6
 16e:	fe cf       	rjmp	.-4      	; 0x16c <ADC_Single+0xe>
}	
 170:	08 95       	ret

00000172 <usart_send>:
void usart_send(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)));
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <usart_send>
		UDR=data;
 176:	8c b9       	out	0x0c, r24	; 12
}
 178:	08 95       	ret

0000017a <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 188:	dc 01       	movw	r26, r24
 18a:	0d 90       	ld	r0, X+
 18c:	00 20       	and	r0, r0
 18e:	e9 f7       	brne	.-6      	; 0x18a <LCD_Send_String+0x10>
 190:	8d 01       	movw	r16, r26
 192:	01 50       	subi	r16, 0x01	; 1
 194:	10 40       	sbci	r17, 0x00	; 0
 196:	08 1b       	sub	r16, r24
 198:	19 0b       	sbc	r17, r25
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	09 c0       	rjmp	.+18     	; 0x1b2 <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1a0:	f7 01       	movw	r30, r14
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	80 81       	ld	r24, Z
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	c0 17       	cp	r28, r16
 1b4:	d1 07       	cpc	r29, r17
 1b6:	a4 f3       	brlt	.-24     	; 0x1a0 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	08 95       	ret

000001c6 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned int y)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	c4 56       	subi	r28, 0x64	; 100
 1d4:	d0 40       	sbci	r29, 0x00	; 0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	8c 01       	movw	r16, r24
 1e2:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 1e4:	ba 01       	movw	r22, r20
 1e6:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_GotoXY>
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 1ea:	c8 01       	movw	r24, r16
 1ec:	be 01       	movw	r22, r28
 1ee:	6f 5f       	subi	r22, 0xFF	; 255
 1f0:	7f 4f       	sbci	r23, 0xFF	; 255
 1f2:	4a e0       	ldi	r20, 0x0A	; 10
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	0e 94 2e 01 	call	0x25c	; 0x25c <itoa>
 1fa:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Send_String>
}	
 1fe:	cc 59       	subi	r28, 0x9C	; 156
 200:	df 4f       	sbci	r29, 0xFF	; 255
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <main>:
int main(void)
{
 216:	1f 93       	push	r17
	unsigned int x=0;
	unsigned char ub=0,lb=0;
	DDRA=0x00;
 218:	1a ba       	out	0x1a, r1	; 26
	DDRD=0x02;
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
 21e:	12 ba       	out	0x12, r1	; 18
	LCD_init();
 220:	0e 94 82 00 	call	0x104	; 0x104 <LCD_init>
	ADCSRA=0xC6;
 224:	86 ec       	ldi	r24, 0xC6	; 198
 226:	86 b9       	out	0x06, r24	; 6
	ADMUX=0xC0;
 228:	80 ec       	ldi	r24, 0xC0	; 192
 22a:	87 b9       	out	0x07, r24	; 7
	UCSRC|=0x8E;
}*/	
void USART_Init( unsigned int ubrr)
{
/* Set baud rate */
UBRRH = (unsigned char)(ubrr>>8);
 22c:	10 bc       	out	0x20, r1	; 32
UBRRL = (unsigned char)ubrr;
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	89 b9       	out	0x09, r24	; 9
/* Enable receiver and transmitter */
UCSRB =(1<<TXEN);
 232:	88 e0       	ldi	r24, 0x08	; 8
 234:	8a b9       	out	0x0a, r24	; 10
/* Set frame format: 8data, 2stop bit */
UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 236:	8e e8       	ldi	r24, 0x8E	; 142
 238:	80 bd       	out	0x20, r24	; 32
	PORTD=0x00;
	LCD_init();
	ADCSRA=0xC6;
	ADMUX=0xC0;
	USART_Init(12);
	ADCSRA|=0x40;
 23a:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));
}	
void usart_send(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)));
		UDR=data;
 23c:	14 e6       	ldi	r17, 0x64	; 100
	ADMUX=0xC0;
	USART_Init(12);
	ADCSRA|=0x40;
	while(1)
	{
		ADCSRA|=0x40;
 23e:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA&(1<<ADSC));
 240:	36 99       	sbic	0x06, 6	; 6
 242:	fe cf       	rjmp	.-4      	; 0x240 <main+0x2a>
		x=100;
		LCD_Print(x,1,1);
 244:	84 e6       	ldi	r24, 0x64	; 100
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_Print>
	ADCSRA|=0x40;
	while(ADCSRA&(1<<ADSC));
}	
void usart_send(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)));
 254:	5d 9b       	sbis	0x0b, 5	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <main+0x3e>
		UDR=data;
 258:	1c b9       	out	0x0c, r17	; 12
 25a:	f1 cf       	rjmp	.-30     	; 0x23e <main+0x28>

0000025c <itoa>:
 25c:	fb 01       	movw	r30, r22
 25e:	9f 01       	movw	r18, r30
 260:	e8 94       	clt
 262:	42 30       	cpi	r20, 0x02	; 2
 264:	c4 f0       	brlt	.+48     	; 0x296 <itoa+0x3a>
 266:	45 32       	cpi	r20, 0x25	; 37
 268:	b4 f4       	brge	.+44     	; 0x296 <itoa+0x3a>
 26a:	4a 30       	cpi	r20, 0x0A	; 10
 26c:	29 f4       	brne	.+10     	; 0x278 <itoa+0x1c>
 26e:	97 fb       	bst	r25, 7
 270:	1e f4       	brtc	.+6      	; 0x278 <itoa+0x1c>
 272:	90 95       	com	r25
 274:	81 95       	neg	r24
 276:	9f 4f       	sbci	r25, 0xFF	; 255
 278:	64 2f       	mov	r22, r20
 27a:	77 27       	eor	r23, r23
 27c:	0e 94 5f 01 	call	0x2be	; 0x2be <__udivmodhi4>
 280:	80 5d       	subi	r24, 0xD0	; 208
 282:	8a 33       	cpi	r24, 0x3A	; 58
 284:	0c f0       	brlt	.+2      	; 0x288 <itoa+0x2c>
 286:	89 5d       	subi	r24, 0xD9	; 217
 288:	81 93       	st	Z+, r24
 28a:	cb 01       	movw	r24, r22
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	a1 f7       	brne	.-24     	; 0x278 <itoa+0x1c>
 290:	16 f4       	brtc	.+4      	; 0x296 <itoa+0x3a>
 292:	5d e2       	ldi	r21, 0x2D	; 45
 294:	51 93       	st	Z+, r21
 296:	10 82       	st	Z, r1
 298:	c9 01       	movw	r24, r18
 29a:	0c 94 4f 01 	jmp	0x29e	; 0x29e <strrev>

0000029e <strrev>:
 29e:	dc 01       	movw	r26, r24
 2a0:	fc 01       	movw	r30, r24
 2a2:	67 2f       	mov	r22, r23
 2a4:	71 91       	ld	r23, Z+
 2a6:	77 23       	and	r23, r23
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <strrev+0x4>
 2aa:	32 97       	sbiw	r30, 0x02	; 2
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <strrev+0x18>
 2ae:	7c 91       	ld	r23, X
 2b0:	6d 93       	st	X+, r22
 2b2:	70 83       	st	Z, r23
 2b4:	62 91       	ld	r22, -Z
 2b6:	ae 17       	cp	r26, r30
 2b8:	bf 07       	cpc	r27, r31
 2ba:	c8 f3       	brcs	.-14     	; 0x2ae <strrev+0x10>
 2bc:	08 95       	ret

000002be <__udivmodhi4>:
 2be:	aa 1b       	sub	r26, r26
 2c0:	bb 1b       	sub	r27, r27
 2c2:	51 e1       	ldi	r21, 0x11	; 17
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <__udivmodhi4_ep>

000002c6 <__udivmodhi4_loop>:
 2c6:	aa 1f       	adc	r26, r26
 2c8:	bb 1f       	adc	r27, r27
 2ca:	a6 17       	cp	r26, r22
 2cc:	b7 07       	cpc	r27, r23
 2ce:	10 f0       	brcs	.+4      	; 0x2d4 <__udivmodhi4_ep>
 2d0:	a6 1b       	sub	r26, r22
 2d2:	b7 0b       	sbc	r27, r23

000002d4 <__udivmodhi4_ep>:
 2d4:	88 1f       	adc	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	5a 95       	dec	r21
 2da:	a9 f7       	brne	.-22     	; 0x2c6 <__udivmodhi4_loop>
 2dc:	80 95       	com	r24
 2de:	90 95       	com	r25
 2e0:	bc 01       	movw	r22, r24
 2e2:	cd 01       	movw	r24, r26
 2e4:	08 95       	ret

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
