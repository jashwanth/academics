
sharp2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000bf  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000640  00000000  00000000  00000423  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001f3  00000000  00000000  00000a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004ae  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000e0  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000137  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002a7  00000000  00000000  0000131b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  64:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  6c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	80 e3       	ldi	r24, 0x30	; 48
  70:	95 e7       	ldi	r25, 0x75	; 117
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  76:	ad 98       	cbi	0x15, 5	; 21
}
  78:	08 95       	ret

0000007a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  7a:	af 9a       	sbi	0x15, 7	; 21
}
  7c:	08 95       	ret

0000007e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  7e:	af 98       	cbi	0x15, 7	; 21
}
  80:	08 95       	ret

00000082 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  82:	ae 98       	cbi	0x15, 6	; 21
}
  84:	08 95       	ret

00000086 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  86:	ae 9a       	sbi	0x15, 6	; 21
}
  88:	08 95       	ret

0000008a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  8a:	98 2f       	mov	r25, r24
  8c:	92 95       	swap	r25
  8e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  90:	48 2f       	mov	r20, r24
  92:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  94:	61 15       	cp	r22, r1
  96:	71 05       	cpc	r23, r1
  98:	c9 f4       	brne	.+50     	; 0xcc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	98 2b       	or	r25, r24
  a0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  a2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  a4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  a6:	ad 9a       	sbi	0x15, 5	; 21
  a8:	20 e3       	ldi	r18, 0x30	; 48
  aa:	35 e7       	ldi	r19, 0x75	; 117
  ac:	c9 01       	movw	r24, r18
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  b2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	48 2b       	or	r20, r24
  ba:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  bc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  be:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  c0:	ad 9a       	sbi	0x15, 5	; 21
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  c8:	ad 98       	cbi	0x15, 5	; 21
  ca:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	71 05       	cpc	r23, r1
  d0:	c1 f4       	brne	.+48     	; 0x102 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	98 2b       	or	r25, r24
  d8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  da:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  dc:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  de:	ad 9a       	sbi	0x15, 5	; 21
  e0:	20 e3       	ldi	r18, 0x30	; 48
  e2:	35 e7       	ldi	r19, 0x75	; 117
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  ea:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	48 2b       	or	r20, r24
  f2:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  f4:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  f6:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  f8:	ad 9a       	sbi	0x15, 5	; 21
  fa:	c9 01       	movw	r24, r18
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 100:	ad 98       	cbi	0x15, 5	; 21
 102:	08 95       	ret

00000104 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 108:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 10a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x0F,0);
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x28,0);
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
}
 12a:	08 95       	ret

0000012c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	71 05       	cpc	r23, r1
 130:	31 f4       	brne	.+12     	; 0x13e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 132:	81 58       	subi	r24, 0x81	; 129
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 13c:	08 95       	ret
	}
	else if(y==2)
 13e:	62 30       	cpi	r22, 0x02	; 2
 140:	71 05       	cpc	r23, r1
 142:	29 f4       	brne	.+10     	; 0x14e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 144:	81 54       	subi	r24, 0x41	; 65
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 14e:	08 95       	ret

00000150 <usart_init>:
#include<avr/delay.h>
#include "lcd.h"

void usart_init(unsigned int a)
{
	UCSRB&=0x7F;
 150:	57 98       	cbi	0x0a, 7	; 10
	UBRRH=(a>>8);
 152:	90 bd       	out	0x20, r25	; 32
	UBRRL=a;
 154:	89 b9       	out	0x09, r24	; 9
	UCSRB|=0x08;
 156:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC|=0x88;
 158:	80 b5       	in	r24, 0x20	; 32
 15a:	88 68       	ori	r24, 0x88	; 136
 15c:	80 bd       	out	0x20, r24	; 32
}	
 15e:	08 95       	ret

00000160 <usart_send>:

void usart_send(unsigned char data)
	{
	while(!(UCSRA & (1<<UDRE)))
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <usart_send>
		;
	UDR=data;
 164:	8c b9       	out	0x0c, r24	; 12
}
 166:	08 95       	ret

00000168 <main>:
int main(void)
{
	DDRD=0x00;
 168:	11 ba       	out	0x11, r1	; 17
	PORTD=0x00;
 16a:	12 ba       	out	0x12, r1	; 18
	LCD_init();
 16c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_init>
	unsigned char x=0;
	
	while(1)
	{
		ADMUX=0x00;
		ADCSRA=0xC7;
 170:	67 ec       	ldi	r22, 0xC7	; 199
 172:	4c e2       	ldi	r20, 0x2C	; 44
 174:	51 e0       	ldi	r21, 0x01	; 1
	LCD_init();
	unsigned char x=0;
	
	while(1)
	{
		ADMUX=0x00;
 176:	17 b8       	out	0x07, r1	; 7
		ADCSRA=0xC7;
 178:	66 b9       	out	0x06, r22	; 6
 17a:	88 ee       	ldi	r24, 0xE8	; 232
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	fa 01       	movw	r30, r20
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <main+0x16>
		_delay_ms(100);
		x=ADC;
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	95 b1       	in	r25, 0x05	; 5
	UCSRC|=0x88;
}	

void usart_send(unsigned char data)
	{
	while(!(UCSRA & (1<<UDRE)))
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <main+0x24>
	{
		ADMUX=0x00;
		ADCSRA=0xC7;
		_delay_ms(100);
		x=ADC;
		x&=0x1F;
 190:	8f 71       	andi	r24, 0x1F	; 31

void usart_send(unsigned char data)
	{
	while(!(UCSRA & (1<<UDRE)))
		;
	UDR=data;
 192:	8c b9       	out	0x0c, r24	; 12
 194:	88 ee       	ldi	r24, 0xE8	; 232
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	fa 01       	movw	r30, r20
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a0:	d9 f7       	brne	.-10     	; 0x198 <main+0x30>
		_delay_ms(100);
		x=ADC;
		x&=0x1F;
		usart_send(x);
		_delay_ms(100);
		x=(ADC>>5);
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	95 b1       	in	r25, 0x05	; 5
 1a6:	28 ee       	ldi	r18, 0xE8	; 232
 1a8:	33 e0       	ldi	r19, 0x03	; 3
 1aa:	fa 01       	movw	r30, r20
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d1 f7       	brne	.-12     	; 0x1aa <main+0x42>
	UCSRC|=0x88;
}	

void usart_send(unsigned char data)
	{
	while(!(UCSRA & (1<<UDRE)))
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <main+0x4e>
		_delay_ms(100);
		x=ADC;
		x&=0x1F;
		usart_send(x);
		_delay_ms(100);
		x=(ADC>>5);
 1ba:	25 e0       	ldi	r18, 0x05	; 5
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	2a 95       	dec	r18
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x54>
		x&=0x1F;
 1c4:	8f 71       	andi	r24, 0x1F	; 31
		x|=0x80;
 1c6:	80 68       	ori	r24, 0x80	; 128

void usart_send(unsigned char data)
	{
	while(!(UCSRA & (1<<UDRE)))
		;
	UDR=data;
 1c8:	8c b9       	out	0x0c, r24	; 12
 1ca:	88 ee       	ldi	r24, 0xE8	; 232
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	fa 01       	movw	r30, r20
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <main+0x66>
 1d8:	ce cf       	rjmp	.-100    	; 0x176 <main+0xe>

000001da <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1e8:	dc 01       	movw	r26, r24
 1ea:	0d 90       	ld	r0, X+
 1ec:	00 20       	and	r0, r0
 1ee:	e9 f7       	brne	.-6      	; 0x1ea <LCD_Send_String+0x10>
 1f0:	8d 01       	movw	r16, r26
 1f2:	01 50       	subi	r16, 0x01	; 1
 1f4:	10 40       	sbci	r17, 0x00	; 0
 1f6:	08 1b       	sub	r16, r24
 1f8:	19 0b       	sbc	r17, r25
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 200:	f7 01       	movw	r30, r14
 202:	ec 0f       	add	r30, r28
 204:	fd 1f       	adc	r31, r29
 206:	80 81       	ld	r24, Z
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 210:	21 96       	adiw	r28, 0x01	; 1
 212:	c0 17       	cp	r28, r16
 214:	d1 07       	cpc	r29, r17
 216:	a4 f3       	brlt	.-24     	; 0x200 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	c4 56       	subi	r28, 0x64	; 100
 230:	d0 40       	sbci	r29, 0x00	; 0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
	//LCD_GotoXY(x,y);
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 23c:	be 01       	movw	r22, r28
 23e:	6f 5f       	subi	r22, 0xFF	; 255
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	4a e0       	ldi	r20, 0x0A	; 10
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	0e 94 31 01 	call	0x262	; 0x262 <itoa>
 24a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Send_String>
}	
 24e:	cc 59       	subi	r28, 0x9C	; 156
 250:	df 4f       	sbci	r29, 0xFF	; 255
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	08 95       	ret

00000262 <itoa>:
 262:	fb 01       	movw	r30, r22
 264:	9f 01       	movw	r18, r30
 266:	e8 94       	clt
 268:	42 30       	cpi	r20, 0x02	; 2
 26a:	c4 f0       	brlt	.+48     	; 0x29c <itoa+0x3a>
 26c:	45 32       	cpi	r20, 0x25	; 37
 26e:	b4 f4       	brge	.+44     	; 0x29c <itoa+0x3a>
 270:	4a 30       	cpi	r20, 0x0A	; 10
 272:	29 f4       	brne	.+10     	; 0x27e <itoa+0x1c>
 274:	97 fb       	bst	r25, 7
 276:	1e f4       	brtc	.+6      	; 0x27e <itoa+0x1c>
 278:	90 95       	com	r25
 27a:	81 95       	neg	r24
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	64 2f       	mov	r22, r20
 280:	77 27       	eor	r23, r23
 282:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__udivmodhi4>
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	8a 33       	cpi	r24, 0x3A	; 58
 28a:	0c f0       	brlt	.+2      	; 0x28e <itoa+0x2c>
 28c:	89 5d       	subi	r24, 0xD9	; 217
 28e:	81 93       	st	Z+, r24
 290:	cb 01       	movw	r24, r22
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	a1 f7       	brne	.-24     	; 0x27e <itoa+0x1c>
 296:	16 f4       	brtc	.+4      	; 0x29c <itoa+0x3a>
 298:	5d e2       	ldi	r21, 0x2D	; 45
 29a:	51 93       	st	Z+, r21
 29c:	10 82       	st	Z, r1
 29e:	c9 01       	movw	r24, r18
 2a0:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <strrev>

000002a4 <strrev>:
 2a4:	dc 01       	movw	r26, r24
 2a6:	fc 01       	movw	r30, r24
 2a8:	67 2f       	mov	r22, r23
 2aa:	71 91       	ld	r23, Z+
 2ac:	77 23       	and	r23, r23
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <strrev+0x4>
 2b0:	32 97       	sbiw	r30, 0x02	; 2
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <strrev+0x18>
 2b4:	7c 91       	ld	r23, X
 2b6:	6d 93       	st	X+, r22
 2b8:	70 83       	st	Z, r23
 2ba:	62 91       	ld	r22, -Z
 2bc:	ae 17       	cp	r26, r30
 2be:	bf 07       	cpc	r27, r31
 2c0:	c8 f3       	brcs	.-14     	; 0x2b4 <strrev+0x10>
 2c2:	08 95       	ret

000002c4 <__udivmodhi4>:
 2c4:	aa 1b       	sub	r26, r26
 2c6:	bb 1b       	sub	r27, r27
 2c8:	51 e1       	ldi	r21, 0x11	; 17
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <__udivmodhi4_ep>

000002cc <__udivmodhi4_loop>:
 2cc:	aa 1f       	adc	r26, r26
 2ce:	bb 1f       	adc	r27, r27
 2d0:	a6 17       	cp	r26, r22
 2d2:	b7 07       	cpc	r27, r23
 2d4:	10 f0       	brcs	.+4      	; 0x2da <__udivmodhi4_ep>
 2d6:	a6 1b       	sub	r26, r22
 2d8:	b7 0b       	sbc	r27, r23

000002da <__udivmodhi4_ep>:
 2da:	88 1f       	adc	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	5a 95       	dec	r21
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <__udivmodhi4_loop>
 2e2:	80 95       	com	r24
 2e4:	90 95       	com	r25
 2e6:	bc 01       	movw	r22, r24
 2e8:	cd 01       	movw	r24, r26
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
