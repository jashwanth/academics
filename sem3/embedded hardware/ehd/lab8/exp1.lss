
exp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  0000045e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e9  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000570  00000000  00000000  00000567  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020d  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000485  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000145  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e1  00000000  00000000  000013a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  8a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  92:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	80 e3       	ldi	r24, 0x30	; 48
  96:	95 e7       	ldi	r25, 0x75	; 117
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  9c:	ad 98       	cbi	0x15, 5	; 21
}
  9e:	08 95       	ret

000000a0 <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  a0:	af 9a       	sbi	0x15, 7	; 21
}
  a2:	08 95       	ret

000000a4 <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  a4:	af 98       	cbi	0x15, 7	; 21
}
  a6:	08 95       	ret

000000a8 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  a8:	ae 98       	cbi	0x15, 6	; 21
}
  aa:	08 95       	ret

000000ac <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  ac:	ae 9a       	sbi	0x15, 6	; 21
}
  ae:	08 95       	ret

000000b0 <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  b0:	98 2f       	mov	r25, r24
  b2:	92 95       	swap	r25
  b4:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  b6:	48 2f       	mov	r20, r24
  b8:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  ba:	61 15       	cp	r22, r1
  bc:	71 05       	cpc	r23, r1
  be:	c9 f4       	brne	.+50     	; 0xf2 <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	98 2b       	or	r25, r24
  c6:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  c8:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ca:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  cc:	ad 9a       	sbi	0x15, 5	; 21
  ce:	20 e3       	ldi	r18, 0x30	; 48
  d0:	35 e7       	ldi	r19, 0x75	; 117
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  d8:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	48 2b       	or	r20, r24
  e0:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  e2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  e4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  e6:	ad 9a       	sbi	0x15, 5	; 21
  e8:	c9 01       	movw	r24, r18
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  ee:	ad 98       	cbi	0x15, 5	; 21
  f0:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  f2:	61 30       	cpi	r22, 0x01	; 1
  f4:	71 05       	cpc	r23, r1
  f6:	c1 f4       	brne	.+48     	; 0x128 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	98 2b       	or	r25, r24
  fe:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 100:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 102:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 104:	ad 9a       	sbi	0x15, 5	; 21
 106:	20 e3       	ldi	r18, 0x30	; 48
 108:	35 e7       	ldi	r19, 0x75	; 117
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
 110:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
 112:	85 b3       	in	r24, 0x15	; 21
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	48 2b       	or	r20, r24
 118:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 11a:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 11c:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 11e:	ad 9a       	sbi	0x15, 5	; 21
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 126:	ad 98       	cbi	0x15, 5	; 21
 128:	08 95       	ret

0000012a <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 12e:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 130:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Send>
	LCD_Send(0x0F,0);
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Send>
	LCD_Send(0x28,0);
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Send>
}
 150:	08 95       	ret

00000152 <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 152:	61 30       	cpi	r22, 0x01	; 1
 154:	71 05       	cpc	r23, r1
 156:	31 f4       	brne	.+12     	; 0x164 <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 158:	81 58       	subi	r24, 0x81	; 129
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Send>
 162:	08 95       	ret
	}
	else if(y==2)
 164:	62 30       	cpi	r22, 0x02	; 2
 166:	71 05       	cpc	r23, r1
 168:	29 f4       	brne	.+10     	; 0x174 <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 16a:	81 54       	subi	r24, 0x41	; 65
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Send>
 174:	08 95       	ret

00000176 <__vector_2>:
#include<avr/interrupt.h>
#include<string.h>
#include "lcd.h"
volatile int count=0,set_count=11,diff=0;
ISR(INT1_vect)
{ 
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
  count++;
 184:	80 91 62 00 	lds	r24, 0x0062
 188:	90 91 63 00 	lds	r25, 0x0063
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 63 00 	sts	0x0063, r25
 192:	80 93 62 00 	sts	0x0062, r24
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <timer2_init>:
void timer2_init(void)
{
  TCCR2 = 0x07;
 1a4:	87 e0       	ldi	r24, 0x07	; 7
 1a6:	85 bd       	out	0x25, r24	; 37
}
 1a8:	08 95       	ret

000001aa <PWM>:
void PWM(void)
{
	TCCR1A=0x82;
 1aa:	82 e8       	ldi	r24, 0x82	; 130
 1ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x11;
 1ae:	81 e1       	ldi	r24, 0x11	; 17
 1b0:	8e bd       	out	0x2e, r24	; 46
}
 1b2:	08 95       	ret

000001b4 <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1c2:	dc 01       	movw	r26, r24
 1c4:	0d 90       	ld	r0, X+
 1c6:	00 20       	and	r0, r0
 1c8:	e9 f7       	brne	.-6      	; 0x1c4 <LCD_Send_String+0x10>
 1ca:	8d 01       	movw	r16, r26
 1cc:	01 50       	subi	r16, 0x01	; 1
 1ce:	10 40       	sbci	r17, 0x00	; 0
 1d0:	08 1b       	sub	r16, r24
 1d2:	19 0b       	sbc	r17, r25
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1da:	f7 01       	movw	r30, r14
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	80 81       	ld	r24, Z
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	c0 17       	cp	r28, r16
 1ee:	d1 07       	cpc	r29, r17
 1f0:	a4 f3       	brlt	.-24     	; 0x1da <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 200:	df 93       	push	r29
 202:	cf 93       	push	r28
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	c4 56       	subi	r28, 0x64	; 100
 20a:	d0 40       	sbci	r29, 0x00	; 0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
	//LCD_GotoXY(x,y);
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	4a e0       	ldi	r20, 0x0A	; 10
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 9d 01 	call	0x33a	; 0x33a <itoa>
 224:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Send_String>
}	
 228:	cc 59       	subi	r28, 0x9C	; 156
 22a:	df 4f       	sbci	r29, 0xFF	; 255
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	cf 91       	pop	r28
 238:	df 91       	pop	r29
 23a:	08 95       	ret

0000023c <main>:
int main(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
  DDRD = 0x21;
 240:	81 e2       	ldi	r24, 0x21	; 33
 242:	81 bb       	out	0x11, r24	; 17
  SREG|=0x80;
 244:	8f b7       	in	r24, 0x3f	; 63
 246:	80 68       	ori	r24, 0x80	; 128
 248:	8f bf       	out	0x3f, r24	; 63
  ICR1=1000;
 24a:	88 ee       	ldi	r24, 0xE8	; 232
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	97 bd       	out	0x27, r25	; 39
 250:	86 bd       	out	0x26, r24	; 38
  OCR1A=500;
 252:	84 ef       	ldi	r24, 0xF4	; 244
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	9b bd       	out	0x2b, r25	; 43
 258:	8a bd       	out	0x2a, r24	; 42
  PORTD|=1<<PORTD0;
 25a:	90 9a       	sbi	0x12, 0	; 18
  GICR |= (1<<INT1);
 25c:	8b b7       	in	r24, 0x3b	; 59
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	8b bf       	out	0x3b, r24	; 59
  MCUCR |= (1<<ISC10);
 262:	85 b7       	in	r24, 0x35	; 53
 264:	84 60       	ori	r24, 0x04	; 4
 266:	85 bf       	out	0x35, r24	; 53
{
  TCCR2 = 0x07;
}
void PWM(void)
{
	TCCR1A=0x82;
 268:	82 e8       	ldi	r24, 0x82	; 130
 26a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x11;
 26c:	81 e1       	ldi	r24, 0x11	; 17
 26e:	8e bd       	out	0x2e, r24	; 46
{ 
  count++;
}
void timer2_init(void)
{
  TCCR2 = 0x07;
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	85 bd       	out	0x25, r24	; 37
 274:	cc e2       	ldi	r28, 0x2C	; 44
 276:	d1 e0       	ldi	r29, 0x01	; 1
  PWM();
  
  timer2_init();
  while(1)
  {
    LCD_init();
 278:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_init>
	while(TCNT2<250);
 27c:	84 b5       	in	r24, 0x24	; 36
 27e:	8a 3f       	cpi	r24, 0xFA	; 250
 280:	e8 f3       	brcs	.-6      	; 0x27c <main+0x40>
    cli();
 282:	f8 94       	cli
	diff = set_count-count;
 284:	80 91 60 00 	lds	r24, 0x0060
 288:	90 91 61 00 	lds	r25, 0x0061
 28c:	20 91 62 00 	lds	r18, 0x0062
 290:	30 91 63 00 	lds	r19, 0x0063
 294:	82 1b       	sub	r24, r18
 296:	93 0b       	sbc	r25, r19
 298:	90 93 65 00 	sts	0x0065, r25
 29c:	80 93 64 00 	sts	0x0064, r24
	LCD_Print(count,1,1);
 2a0:	80 91 62 00 	lds	r24, 0x0062
 2a4:	90 91 63 00 	lds	r25, 0x0063
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	0e 94 00 01 	call	0x200	; 0x200 <LCD_Print>
	LCD_Print(diff,10,1);
 2b4:	80 91 64 00 	lds	r24, 0x0064
 2b8:	90 91 65 00 	lds	r25, 0x0065
 2bc:	6a e0       	ldi	r22, 0x0A	; 10
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	0e 94 00 01 	call	0x200	; 0x200 <LCD_Print>
	LCD_Print(OCR1A,1,2);
 2c8:	8a b5       	in	r24, 0x2a	; 42
 2ca:	9b b5       	in	r25, 0x2b	; 43
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	42 e0       	ldi	r20, 0x02	; 2
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	0e 94 00 01 	call	0x200	; 0x200 <LCD_Print>
	if(diff>0)
 2d8:	80 91 64 00 	lds	r24, 0x0064
 2dc:	90 91 65 00 	lds	r25, 0x0065
 2e0:	18 16       	cp	r1, r24
 2e2:	19 06       	cpc	r1, r25
 2e4:	5c f4       	brge	.+22     	; 0x2fc <main+0xc0>
	{
	  OCR1A = OCR1A-(diff-5);
 2e6:	8a b5       	in	r24, 0x2a	; 42
 2e8:	9b b5       	in	r25, 0x2b	; 43
 2ea:	20 91 64 00 	lds	r18, 0x0064
 2ee:	30 91 65 00 	lds	r19, 0x0065
 2f2:	05 96       	adiw	r24, 0x05	; 5
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
 2f8:	9b bd       	out	0x2b, r25	; 43
 2fa:	8a bd       	out	0x2a, r24	; 42
	}
	if(diff<0)
 2fc:	80 91 64 00 	lds	r24, 0x0064
 300:	90 91 65 00 	lds	r25, 0x0065
 304:	97 ff       	sbrs	r25, 7
 306:	0b c0       	rjmp	.+22     	; 0x31e <main+0xe2>
	{
	  OCR1A += (diff-5);
 308:	8a b5       	in	r24, 0x2a	; 42
 30a:	9b b5       	in	r25, 0x2b	; 43
 30c:	20 91 64 00 	lds	r18, 0x0064
 310:	30 91 65 00 	lds	r19, 0x0065
 314:	05 97       	sbiw	r24, 0x05	; 5
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	9b bd       	out	0x2b, r25	; 43
 31c:	8a bd       	out	0x2a, r24	; 42
 31e:	88 eb       	ldi	r24, 0xB8	; 184
 320:	9b e0       	ldi	r25, 0x0B	; 11
 322:	fe 01       	movw	r30, r28
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <main+0xe8>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 328:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32a:	d9 f7       	brne	.-10     	; 0x322 <main+0xe6>
	}
	_delay_ms(300);
	sei();
 32c:	78 94       	sei
    count = 0;
 32e:	10 92 63 00 	sts	0x0063, r1
 332:	10 92 62 00 	sts	0x0062, r1
	TCNT2 =0x00;
 336:	14 bc       	out	0x24, r1	; 36
 338:	9f cf       	rjmp	.-194    	; 0x278 <main+0x3c>

0000033a <itoa>:
 33a:	fb 01       	movw	r30, r22
 33c:	9f 01       	movw	r18, r30
 33e:	e8 94       	clt
 340:	42 30       	cpi	r20, 0x02	; 2
 342:	c4 f0       	brlt	.+48     	; 0x374 <itoa+0x3a>
 344:	45 32       	cpi	r20, 0x25	; 37
 346:	b4 f4       	brge	.+44     	; 0x374 <itoa+0x3a>
 348:	4a 30       	cpi	r20, 0x0A	; 10
 34a:	29 f4       	brne	.+10     	; 0x356 <itoa+0x1c>
 34c:	97 fb       	bst	r25, 7
 34e:	1e f4       	brtc	.+6      	; 0x356 <itoa+0x1c>
 350:	90 95       	com	r25
 352:	81 95       	neg	r24
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	64 2f       	mov	r22, r20
 358:	77 27       	eor	r23, r23
 35a:	0e 94 ce 01 	call	0x39c	; 0x39c <__udivmodhi4>
 35e:	80 5d       	subi	r24, 0xD0	; 208
 360:	8a 33       	cpi	r24, 0x3A	; 58
 362:	0c f0       	brlt	.+2      	; 0x366 <itoa+0x2c>
 364:	89 5d       	subi	r24, 0xD9	; 217
 366:	81 93       	st	Z+, r24
 368:	cb 01       	movw	r24, r22
 36a:	00 97       	sbiw	r24, 0x00	; 0
 36c:	a1 f7       	brne	.-24     	; 0x356 <itoa+0x1c>
 36e:	16 f4       	brtc	.+4      	; 0x374 <itoa+0x3a>
 370:	5d e2       	ldi	r21, 0x2D	; 45
 372:	51 93       	st	Z+, r21
 374:	10 82       	st	Z, r1
 376:	c9 01       	movw	r24, r18
 378:	0c 94 be 01 	jmp	0x37c	; 0x37c <strrev>

0000037c <strrev>:
 37c:	dc 01       	movw	r26, r24
 37e:	fc 01       	movw	r30, r24
 380:	67 2f       	mov	r22, r23
 382:	71 91       	ld	r23, Z+
 384:	77 23       	and	r23, r23
 386:	e1 f7       	brne	.-8      	; 0x380 <strrev+0x4>
 388:	32 97       	sbiw	r30, 0x02	; 2
 38a:	04 c0       	rjmp	.+8      	; 0x394 <strrev+0x18>
 38c:	7c 91       	ld	r23, X
 38e:	6d 93       	st	X+, r22
 390:	70 83       	st	Z, r23
 392:	62 91       	ld	r22, -Z
 394:	ae 17       	cp	r26, r30
 396:	bf 07       	cpc	r27, r31
 398:	c8 f3       	brcs	.-14     	; 0x38c <strrev+0x10>
 39a:	08 95       	ret

0000039c <__udivmodhi4>:
 39c:	aa 1b       	sub	r26, r26
 39e:	bb 1b       	sub	r27, r27
 3a0:	51 e1       	ldi	r21, 0x11	; 17
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <__udivmodhi4_ep>

000003a4 <__udivmodhi4_loop>:
 3a4:	aa 1f       	adc	r26, r26
 3a6:	bb 1f       	adc	r27, r27
 3a8:	a6 17       	cp	r26, r22
 3aa:	b7 07       	cpc	r27, r23
 3ac:	10 f0       	brcs	.+4      	; 0x3b2 <__udivmodhi4_ep>
 3ae:	a6 1b       	sub	r26, r22
 3b0:	b7 0b       	sbc	r27, r23

000003b2 <__udivmodhi4_ep>:
 3b2:	88 1f       	adc	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	5a 95       	dec	r21
 3b8:	a9 f7       	brne	.-22     	; 0x3a4 <__udivmodhi4_loop>
 3ba:	80 95       	com	r24
 3bc:	90 95       	com	r25
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
