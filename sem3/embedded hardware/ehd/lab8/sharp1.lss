
sharp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000a1  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000049a  00000000  00000000  000003ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001c4  00000000  00000000  00000889  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000380  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000121  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000191  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  b6:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  be:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	80 e3       	ldi	r24, 0x30	; 48
  c2:	95 e7       	ldi	r25, 0x75	; 117
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  c8:	ad 98       	cbi	0x15, 5	; 21
}
  ca:	08 95       	ret

000000cc <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  cc:	af 9a       	sbi	0x15, 7	; 21
}
  ce:	08 95       	ret

000000d0 <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  d0:	af 98       	cbi	0x15, 7	; 21
}
  d2:	08 95       	ret

000000d4 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  d4:	ae 98       	cbi	0x15, 6	; 21
}
  d6:	08 95       	ret

000000d8 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  d8:	ae 9a       	sbi	0x15, 6	; 21
}
  da:	08 95       	ret

000000dc <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  dc:	98 2f       	mov	r25, r24
  de:	92 95       	swap	r25
  e0:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  e2:	48 2f       	mov	r20, r24
  e4:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  e6:	61 15       	cp	r22, r1
  e8:	71 05       	cpc	r23, r1
  ea:	c9 f4       	brne	.+50     	; 0x11e <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	98 2b       	or	r25, r24
  f2:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  f4:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  f6:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  f8:	ad 9a       	sbi	0x15, 5	; 21
  fa:	20 e3       	ldi	r18, 0x30	; 48
  fc:	35 e7       	ldi	r19, 0x75	; 117
  fe:	c9 01       	movw	r24, r18
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
 104:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
 106:	85 b3       	in	r24, 0x15	; 21
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	48 2b       	or	r20, r24
 10c:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 10e:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 110:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 112:	ad 9a       	sbi	0x15, 5	; 21
 114:	c9 01       	movw	r24, r18
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
 11a:	ad 98       	cbi	0x15, 5	; 21
 11c:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	71 05       	cpc	r23, r1
 122:	c1 f4       	brne	.+48     	; 0x154 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
 124:	85 b3       	in	r24, 0x15	; 21
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	98 2b       	or	r25, r24
 12a:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 12c:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 12e:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 130:	ad 9a       	sbi	0x15, 5	; 21
 132:	20 e3       	ldi	r18, 0x30	; 48
 134:	35 e7       	ldi	r19, 0x75	; 117
 136:	c9 01       	movw	r24, r18
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
 13c:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	48 2b       	or	r20, r24
 144:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 146:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 148:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 14a:	ad 9a       	sbi	0x15, 5	; 21
 14c:	c9 01       	movw	r24, r18
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 152:	ad 98       	cbi	0x15, 5	; 21
 154:	08 95       	ret

00000156 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 15a:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 15c:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Send>
	LCD_Send(0x0F,0);
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Send>
	LCD_Send(0x28,0);
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Send>
}
 17c:	08 95       	ret

0000017e <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	71 05       	cpc	r23, r1
 182:	31 f4       	brne	.+12     	; 0x190 <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 184:	81 58       	subi	r24, 0x81	; 129
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Send>
 18e:	08 95       	ret
	}
	else if(y==2)
 190:	62 30       	cpi	r22, 0x02	; 2
 192:	71 05       	cpc	r23, r1
 194:	29 f4       	brne	.+10     	; 0x1a0 <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 196:	81 54       	subi	r24, 0x41	; 65
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Send>
 1a0:	08 95       	ret

000001a2 <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1b0:	dc 01       	movw	r26, r24
 1b2:	0d 90       	ld	r0, X+
 1b4:	00 20       	and	r0, r0
 1b6:	e9 f7       	brne	.-6      	; 0x1b2 <LCD_Send_String+0x10>
 1b8:	8d 01       	movw	r16, r26
 1ba:	01 50       	subi	r16, 0x01	; 1
 1bc:	10 40       	sbci	r17, 0x00	; 0
 1be:	08 1b       	sub	r16, r24
 1c0:	19 0b       	sbc	r17, r25
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1c8:	f7 01       	movw	r30, r14
 1ca:	ec 0f       	add	r30, r28
 1cc:	fd 1f       	adc	r31, r29
 1ce:	80 81       	ld	r24, Z
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	c0 17       	cp	r28, r16
 1dc:	d1 07       	cpc	r29, r17
 1de:	a4 f3       	brlt	.-24     	; 0x1c8 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	08 95       	ret

000001ee <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	c4 56       	subi	r28, 0x64	; 100
 1f8:	d0 40       	sbci	r29, 0x00	; 0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
	//LCD_GotoXY(x,y);
	char t[100];
	LCD_Send_String(itoa(data,t,10));
 204:	be 01       	movw	r22, r28
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	4a e0       	ldi	r20, 0x0A	; 10
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	0e 94 26 01 	call	0x24c	; 0x24c <itoa>
 212:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_Send_String>
}	
 216:	cc 59       	subi	r28, 0x9C	; 156
 218:	df 4f       	sbci	r29, 0xFF	; 255
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	cf 91       	pop	r28
 226:	df 91       	pop	r29
 228:	08 95       	ret

0000022a <main>:
#include<util/delay.h>
#include<avr/delay.h>
#include "lcd.h"

int main(void)
{
 22a:	1f 93       	push	r17
	DDRD=0x00;
 22c:	11 ba       	out	0x11, r1	; 17
	PORTD=0x00;
 22e:	12 ba       	out	0x12, r1	; 18
	int x=0;
	LCD_init();
 230:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_init>
	while(1)
	{
		ADMUX=0x00;
		ADCSRA=0xC7;
 234:	17 ec       	ldi	r17, 0xC7	; 199
	PORTD=0x00;
	int x=0;
	LCD_init();
	while(1)
	{
		ADMUX=0x00;
 236:	17 b8       	out	0x07, r1	; 7
		ADCSRA=0xC7;
 238:	16 b9       	out	0x06, r17	; 6
		x=ADC;
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	95 b1       	in	r25, 0x05	; 5
		LCD_Print(x,1,1);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Print>
 24a:	f5 cf       	rjmp	.-22     	; 0x236 <main+0xc>

0000024c <itoa>:
 24c:	fb 01       	movw	r30, r22
 24e:	9f 01       	movw	r18, r30
 250:	e8 94       	clt
 252:	42 30       	cpi	r20, 0x02	; 2
 254:	c4 f0       	brlt	.+48     	; 0x286 <itoa+0x3a>
 256:	45 32       	cpi	r20, 0x25	; 37
 258:	b4 f4       	brge	.+44     	; 0x286 <itoa+0x3a>
 25a:	4a 30       	cpi	r20, 0x0A	; 10
 25c:	29 f4       	brne	.+10     	; 0x268 <itoa+0x1c>
 25e:	97 fb       	bst	r25, 7
 260:	1e f4       	brtc	.+6      	; 0x268 <itoa+0x1c>
 262:	90 95       	com	r25
 264:	81 95       	neg	r24
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	64 2f       	mov	r22, r20
 26a:	77 27       	eor	r23, r23
 26c:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	8a 33       	cpi	r24, 0x3A	; 58
 274:	0c f0       	brlt	.+2      	; 0x278 <itoa+0x2c>
 276:	89 5d       	subi	r24, 0xD9	; 217
 278:	81 93       	st	Z+, r24
 27a:	cb 01       	movw	r24, r22
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	a1 f7       	brne	.-24     	; 0x268 <itoa+0x1c>
 280:	16 f4       	brtc	.+4      	; 0x286 <itoa+0x3a>
 282:	5d e2       	ldi	r21, 0x2D	; 45
 284:	51 93       	st	Z+, r21
 286:	10 82       	st	Z, r1
 288:	c9 01       	movw	r24, r18
 28a:	0c 94 47 01 	jmp	0x28e	; 0x28e <strrev>

0000028e <strrev>:
 28e:	dc 01       	movw	r26, r24
 290:	fc 01       	movw	r30, r24
 292:	67 2f       	mov	r22, r23
 294:	71 91       	ld	r23, Z+
 296:	77 23       	and	r23, r23
 298:	e1 f7       	brne	.-8      	; 0x292 <strrev+0x4>
 29a:	32 97       	sbiw	r30, 0x02	; 2
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <strrev+0x18>
 29e:	7c 91       	ld	r23, X
 2a0:	6d 93       	st	X+, r22
 2a2:	70 83       	st	Z, r23
 2a4:	62 91       	ld	r22, -Z
 2a6:	ae 17       	cp	r26, r30
 2a8:	bf 07       	cpc	r27, r31
 2aa:	c8 f3       	brcs	.-14     	; 0x29e <strrev+0x10>
 2ac:	08 95       	ret

000002ae <__udivmodhi4>:
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	51 e1       	ldi	r21, 0x11	; 17
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__udivmodhi4_ep>

000002b6 <__udivmodhi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	a6 17       	cp	r26, r22
 2bc:	b7 07       	cpc	r27, r23
 2be:	10 f0       	brcs	.+4      	; 0x2c4 <__udivmodhi4_ep>
 2c0:	a6 1b       	sub	r26, r22
 2c2:	b7 0b       	sbc	r27, r23

000002c4 <__udivmodhi4_ep>:
 2c4:	88 1f       	adc	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	5a 95       	dec	r21
 2ca:	a9 f7       	brne	.-22     	; 0x2b6 <__udivmodhi4_loop>
 2cc:	80 95       	com	r24
 2ce:	90 95       	com	r25
 2d0:	bc 01       	movw	r22, r24
 2d2:	cd 01       	movw	r24, r26
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
