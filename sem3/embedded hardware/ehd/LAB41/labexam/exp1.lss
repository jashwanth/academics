
exp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000372  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000086  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000411  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bf  00000000  00000000  00000829  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000349  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000109  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b6  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 83 00 	call	0x106	; 0x106 <main>
  74:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  7c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	88 e9       	ldi	r24, 0x98	; 152
  80:	9a e3       	ldi	r25, 0x3A	; 58
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <toggle+0x6>
	_delay_ms(5);
	PORTC&=0xDF;
  86:	ad 98       	cbi	0x15, 5	; 21
}
  88:	08 95       	ret

0000008a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c>>4;
  8a:	98 2f       	mov	r25, r24
  8c:	92 95       	swap	r25
  8e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  90:	28 2f       	mov	r18, r24
  92:	2f 70       	andi	r18, 0x0F	; 15
	if(DC==0){
  94:	67 2b       	or	r22, r23
  96:	49 f4       	brne	.+18     	; 0xaa <LCD_Send+0x20>
		PORTC=unib;
  98:	95 bb       	out	0x15, r25	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  9a:	ad 9a       	sbi	0x15, 5	; 21
  9c:	88 e9       	ldi	r24, 0x98	; 152
  9e:	9a e3       	ldi	r25, 0x3A	; 58
  a0:	fc 01       	movw	r30, r24
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Send+0x18>
	_delay_ms(5);
	PORTC&=0xDF;
  a6:	ad 98       	cbi	0x15, 5	; 21
  a8:	0a c0       	rjmp	.+20     	; 0xbe <LCD_Send+0x34>
		PORTC=lnib;
		toggle();
	}
	else
	{
		PORTC=unib|0x80;
  aa:	90 68       	ori	r25, 0x80	; 128
  ac:	95 bb       	out	0x15, r25	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  ae:	ad 9a       	sbi	0x15, 5	; 21
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	9a e3       	ldi	r25, 0x3A	; 58
  b4:	fc 01       	movw	r30, r24
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Send+0x2c>
	_delay_ms(5);
	PORTC&=0xDF;
  ba:	ad 98       	cbi	0x15, 5	; 21
	}
	else
	{
		PORTC=unib|0x80;
		toggle();
		PORTC=lnib|0x80;
  bc:	20 68       	ori	r18, 0x80	; 128
  be:	25 bb       	out	0x15, r18	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  c0:	ad 9a       	sbi	0x15, 5	; 21
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Send+0x38>
	_delay_ms(5);
	PORTC&=0xDF;
  c6:	ad 98       	cbi	0x15, 5	; 21
  c8:	08 95       	ret

000000ca <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  ce:	15 ba       	out	0x15, r1	; 21
	LCD_Send(0x01,0);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x0C,0);
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x28,0);
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
}
  ee:	08 95       	ret

000000f0 <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	71 05       	cpc	r23, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <LCD_GotoXY+0xa>
	{
		LCD_Send(127+x,0);
  f6:	81 58       	subi	r24, 0x81	; 129
  f8:	01 c0       	rjmp	.+2      	; 0xfc <LCD_GotoXY+0xc>
	}
	else
	{
		LCD_Send(191+x,0);
  fa:	81 54       	subi	r24, 0x41	; 65
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 104:	08 95       	ret

00000106 <main>:
  _delay_ms(100);
 // LCD_Send_String("hello");
}
int main(void)
{
	DDRD=0x00;
 106:	11 ba       	out	0x11, r1	; 17
	PORTD=0x00;
 108:	12 ba       	out	0x12, r1	; 18
	DDRA=0x00;
 10a:	1a ba       	out	0x1a, r1	; 26
	PORTA=0x00;
 10c:	1b ba       	out	0x1b, r1	; 27
	LCD_init();
 10e:	0e 94 65 00 	call	0xca	; 0xca <LCD_init>
	SREG = 0x80;
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	8f bf       	out	0x3f, r24	; 63
	sei();
 116:	78 94       	sei
	GICR = 1<<INT1;
 118:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0x0C;
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	85 bf       	out	0x35, r24	; 53
	SFIOR = 0x40;
 11e:	80 e4       	ldi	r24, 0x40	; 64
 120:	80 bf       	out	0x30, r24	; 48
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x1c>

00000124 <LCD_Send_String>:
	LCD_Send(0x0C,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 132:	dc 01       	movw	r26, r24
 134:	0d 90       	ld	r0, X+
 136:	00 20       	and	r0, r0
 138:	e9 f7       	brne	.-6      	; 0x134 <LCD_Send_String+0x10>
 13a:	8d 01       	movw	r16, r26
 13c:	01 50       	subi	r16, 0x01	; 1
 13e:	10 40       	sbci	r17, 0x00	; 0
 140:	08 1b       	sub	r16, r24
 142:	19 0b       	sbc	r17, r25
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
 148:	09 c0       	rjmp	.+18     	; 0x15c <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 14a:	f7 01       	movw	r30, r14
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	80 81       	ld	r24, Z
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	c0 17       	cp	r28, r16
 15e:	d1 07       	cpc	r29, r17
 160:	a4 f3       	brlt	.-24     	; 0x14a <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	c4 56       	subi	r28, 0x64	; 100
 17e:	d0 40       	sbci	r29, 0x00	; 0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	8c 01       	movw	r16, r24
 18c:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 18e:	ba 01       	movw	r22, r20
 190:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_GotoXY>
	char t[100];
	if(data<0){
 194:	17 ff       	sbrs	r17, 7
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <LCD_Print+0x38>
		LCD_Send('-',1);
 198:	8d e2       	ldi	r24, 0x2D	; 45
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
		data*=-1;
 1a2:	10 95       	com	r17
 1a4:	01 95       	neg	r16
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	LCD_Send_String(itoa(data,t,10));
 1a8:	c8 01       	movw	r24, r16
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	4a e0       	ldi	r20, 0x0A	; 10
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	0e 94 38 01 	call	0x270	; 0x270 <itoa>
 1b8:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Send_String>
}	
 1bc:	cc 59       	subi	r28, 0x9C	; 156
 1be:	df 4f       	sbci	r29, 0xFF	; 255
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <__vector_2>:
#include<avr/interrupt.h>
#include<util/delay.h>
#include "lcd.h"
unsigned int x=0;
ISR(INT1_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
  int y;
  LCD_init();
 1f6:	0e 94 65 00 	call	0xca	; 0xca <LCD_init>
  ADCSRA= 0xA6;
 1fa:	86 ea       	ldi	r24, 0xA6	; 166
 1fc:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x60;
 1fe:	80 e6       	ldi	r24, 0x60	; 96
 200:	87 b9       	out	0x07, r24	; 7
 202:	88 ee       	ldi	r24, 0xE8	; 232
 204:	93 e0       	ldi	r25, 0x03	; 3
 206:	2c e2       	ldi	r18, 0x2C	; 44
 208:	31 e0       	ldi	r19, 0x01	; 1
 20a:	f9 01       	movw	r30, r18
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <__vector_2+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 210:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 212:	d9 f7       	brne	.-10     	; 0x20a <__vector_2+0x36>
  _delay_ms(100);
  x = ADC;
 214:	84 b1       	in	r24, 0x04	; 4
 216:	95 b1       	in	r25, 0x05	; 5
 218:	90 93 61 00 	sts	0x0061, r25
 21c:	80 93 60 00 	sts	0x0060, r24
  y = PINA3;
  LCD_Print(x,1,1);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Print>
  LCD_Print(y,5,2);
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	65 e0       	ldi	r22, 0x05	; 5
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	42 e0       	ldi	r20, 0x02	; 2
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Print>
 23c:	88 ee       	ldi	r24, 0xE8	; 232
 23e:	93 e0       	ldi	r25, 0x03	; 3
 240:	2c e2       	ldi	r18, 0x2C	; 44
 242:	31 e0       	ldi	r19, 0x01	; 1
 244:	f9 01       	movw	r30, r18
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <__vector_2+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24c:	d9 f7       	brne	.-10     	; 0x244 <__vector_2+0x70>
  _delay_ms(100);
 // LCD_Send_String("hello");
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <itoa>:
 270:	fb 01       	movw	r30, r22
 272:	9f 01       	movw	r18, r30
 274:	e8 94       	clt
 276:	42 30       	cpi	r20, 0x02	; 2
 278:	c4 f0       	brlt	.+48     	; 0x2aa <itoa+0x3a>
 27a:	45 32       	cpi	r20, 0x25	; 37
 27c:	b4 f4       	brge	.+44     	; 0x2aa <itoa+0x3a>
 27e:	4a 30       	cpi	r20, 0x0A	; 10
 280:	29 f4       	brne	.+10     	; 0x28c <itoa+0x1c>
 282:	97 fb       	bst	r25, 7
 284:	1e f4       	brtc	.+6      	; 0x28c <itoa+0x1c>
 286:	90 95       	com	r25
 288:	81 95       	neg	r24
 28a:	9f 4f       	sbci	r25, 0xFF	; 255
 28c:	64 2f       	mov	r22, r20
 28e:	77 27       	eor	r23, r23
 290:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__udivmodhi4>
 294:	80 5d       	subi	r24, 0xD0	; 208
 296:	8a 33       	cpi	r24, 0x3A	; 58
 298:	0c f0       	brlt	.+2      	; 0x29c <itoa+0x2c>
 29a:	89 5d       	subi	r24, 0xD9	; 217
 29c:	81 93       	st	Z+, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	a1 f7       	brne	.-24     	; 0x28c <itoa+0x1c>
 2a4:	16 f4       	brtc	.+4      	; 0x2aa <itoa+0x3a>
 2a6:	5d e2       	ldi	r21, 0x2D	; 45
 2a8:	51 93       	st	Z+, r21
 2aa:	10 82       	st	Z, r1
 2ac:	c9 01       	movw	r24, r18
 2ae:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <strrev>

000002b2 <strrev>:
 2b2:	dc 01       	movw	r26, r24
 2b4:	fc 01       	movw	r30, r24
 2b6:	67 2f       	mov	r22, r23
 2b8:	71 91       	ld	r23, Z+
 2ba:	77 23       	and	r23, r23
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <strrev+0x4>
 2be:	32 97       	sbiw	r30, 0x02	; 2
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <strrev+0x18>
 2c2:	7c 91       	ld	r23, X
 2c4:	6d 93       	st	X+, r22
 2c6:	70 83       	st	Z, r23
 2c8:	62 91       	ld	r22, -Z
 2ca:	ae 17       	cp	r26, r30
 2cc:	bf 07       	cpc	r27, r31
 2ce:	c8 f3       	brcs	.-14     	; 0x2c2 <strrev+0x10>
 2d0:	08 95       	ret

000002d2 <__udivmodhi4>:
 2d2:	aa 1b       	sub	r26, r26
 2d4:	bb 1b       	sub	r27, r27
 2d6:	51 e1       	ldi	r21, 0x11	; 17
 2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <__udivmodhi4_ep>

000002da <__udivmodhi4_loop>:
 2da:	aa 1f       	adc	r26, r26
 2dc:	bb 1f       	adc	r27, r27
 2de:	a6 17       	cp	r26, r22
 2e0:	b7 07       	cpc	r27, r23
 2e2:	10 f0       	brcs	.+4      	; 0x2e8 <__udivmodhi4_ep>
 2e4:	a6 1b       	sub	r26, r22
 2e6:	b7 0b       	sbc	r27, r23

000002e8 <__udivmodhi4_ep>:
 2e8:	88 1f       	adc	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	5a 95       	dec	r21
 2ee:	a9 f7       	brne	.-22     	; 0x2da <__udivmodhi4_loop>
 2f0:	80 95       	com	r24
 2f2:	90 95       	com	r25
 2f4:	bc 01       	movw	r22, r24
 2f6:	cd 01       	movw	r24, r26
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
