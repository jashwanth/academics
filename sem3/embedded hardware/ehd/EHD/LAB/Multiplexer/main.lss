
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000007d  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003dc  00000000  00000000  000003c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b7  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000351  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000102  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000204  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  64:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  6c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	88 e9       	ldi	r24, 0x98	; 152
  70:	9a e3       	ldi	r25, 0x3A	; 58
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <toggle+0x6>
	_delay_ms(5);
	PORTC&=0xDF;
  76:	ad 98       	cbi	0x15, 5	; 21
}
  78:	08 95       	ret

0000007a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c>>4;
  7a:	98 2f       	mov	r25, r24
  7c:	92 95       	swap	r25
  7e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  80:	28 2f       	mov	r18, r24
  82:	2f 70       	andi	r18, 0x0F	; 15
	if(DC==0){
  84:	67 2b       	or	r22, r23
  86:	49 f4       	brne	.+18     	; 0x9a <LCD_Send+0x20>
		PORTC=unib;
  88:	95 bb       	out	0x15, r25	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  8a:	ad 9a       	sbi	0x15, 5	; 21
  8c:	88 e9       	ldi	r24, 0x98	; 152
  8e:	9a e3       	ldi	r25, 0x3A	; 58
  90:	fc 01       	movw	r30, r24
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_Send+0x18>
	_delay_ms(5);
	PORTC&=0xDF;
  96:	ad 98       	cbi	0x15, 5	; 21
  98:	0a c0       	rjmp	.+20     	; 0xae <LCD_Send+0x34>
		PORTC=lnib;
		toggle();
	}
	else
	{
		PORTC=unib|0x80;
  9a:	90 68       	ori	r25, 0x80	; 128
  9c:	95 bb       	out	0x15, r25	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  9e:	ad 9a       	sbi	0x15, 5	; 21
  a0:	88 e9       	ldi	r24, 0x98	; 152
  a2:	9a e3       	ldi	r25, 0x3A	; 58
  a4:	fc 01       	movw	r30, r24
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_Send+0x2c>
	_delay_ms(5);
	PORTC&=0xDF;
  aa:	ad 98       	cbi	0x15, 5	; 21
	}
	else
	{
		PORTC=unib|0x80;
		toggle();
		PORTC=lnib|0x80;
  ac:	20 68       	ori	r18, 0x80	; 128
  ae:	25 bb       	out	0x15, r18	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  b0:	ad 9a       	sbi	0x15, 5	; 21
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Send+0x38>
	_delay_ms(5);
	PORTC&=0xDF;
  b6:	ad 98       	cbi	0x15, 5	; 21
  b8:	08 95       	ret

000000ba <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  be:	15 ba       	out	0x15, r1	; 21
	LCD_Send(0x01,0);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
	LCD_Send(0x0C,0);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
	LCD_Send(0x28,0);
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
}
  de:	08 95       	ret

000000e0 <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	71 05       	cpc	r23, r1
  e4:	11 f4       	brne	.+4      	; 0xea <LCD_GotoXY+0xa>
	{
		LCD_Send(127+x,0);
  e6:	81 58       	subi	r24, 0x81	; 129
  e8:	01 c0       	rjmp	.+2      	; 0xec <LCD_GotoXY+0xc>
	}
	else
	{
		LCD_Send(191+x,0);
  ea:	81 54       	subi	r24, 0x41	; 65
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
  f4:	08 95       	ret

000000f6 <LCD_Bit>:
		data*=-1;
	}
	LCD_Send_String(itoa(data,t,10));
}

void LCD_Bit(char ip){
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	00 e8       	ldi	r16, 0x80	; 128
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
    int x=1<<7;
    while(x!=0){
        if(x&ip){
 10a:	e8 2e       	mov	r14, r24
 10c:	ff 24       	eor	r15, r15
 10e:	c8 01       	movw	r24, r16
 110:	8e 21       	and	r24, r14
 112:	9f 21       	and	r25, r15
 114:	89 2b       	or	r24, r25
 116:	11 f0       	breq	.+4      	; 0x11c <LCD_Bit+0x26>
            LCD_Send('1',1);
 118:	81 e3       	ldi	r24, 0x31	; 49
 11a:	01 c0       	rjmp	.+2      	; 0x11e <LCD_Bit+0x28>
        }
        else{
            LCD_Send('0',1);
 11c:	80 e3       	ldi	r24, 0x30	; 48
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
        }
        x=x>>1;
 126:	15 95       	asr	r17
 128:	07 95       	ror	r16
 12a:	21 96       	adiw	r28, 0x01	; 1
	LCD_Send_String(itoa(data,t,10));
}

void LCD_Bit(char ip){
    int x=1<<7;
    while(x!=0){
 12c:	c8 30       	cpi	r28, 0x08	; 8
 12e:	d1 05       	cpc	r29, r1
 130:	71 f7       	brne	.-36     	; 0x10e <LCD_Bit+0x18>
        else{
            LCD_Send('0',1);
        }
        x=x>>1;
    }
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <main>:
#include "lcd.h"
#include <util/delay.h>
#include<avr/interrupt.h>


int main(void){
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
	DDRD=0x07;
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	87 e0       	ldi	r24, 0x07	; 7
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	10 e0       	ldi	r17, 0x00	; 0
				sip+=1;
			}
			sip=sip<<1;
		}
		PORTD=x;
		DDRD=0x07;
 152:	07 e0       	ldi	r16, 0x07	; 7
 154:	cc e2       	ldi	r28, 0x2C	; 44
 156:	d1 e0       	ldi	r29, 0x01	; 1
 158:	06 c0       	rjmp	.+12     	; 0x166 <main+0x26>
	unsigned int x;
	unsigned char sip;
	while(1){
		sip=0;
		for(x=7;x>0;x--){
			PORTD=x;
 15a:	82 bb       	out	0x12, r24	; 18
			DDRD=0x07;
 15c:	01 bb       	out	0x11, r16	; 17
			if(PIND&0x08){
 15e:	83 99       	sbic	0x10, 3	; 16
				sip+=1;
 160:	1f 5f       	subi	r17, 0xFF	; 255
			}
			sip=sip<<1;
 162:	11 0f       	add	r17, r17
	DDRD=0x07;
	unsigned int x;
	unsigned char sip;
	while(1){
		sip=0;
		for(x=7;x>0;x--){
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	c1 f7       	brne	.-16     	; 0x15a <main+0x1a>
			if(PIND&0x08){
				sip+=1;
			}
			sip=sip<<1;
		}
		PORTD=x;
 16a:	12 ba       	out	0x12, r1	; 18
		DDRD=0x07;
 16c:	01 bb       	out	0x11, r16	; 17
		if(PIND&0x08){
 16e:	83 99       	sbic	0x10, 3	; 16
			sip+=1;
 170:	1f 5f       	subi	r17, 0xFF	; 255
		}
		LCD_init();
 172:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>
		LCD_Bit(sip);
 176:	81 2f       	mov	r24, r17
 178:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Bit>
 17c:	88 e8       	ldi	r24, 0x88	; 136
 17e:	93 e1       	ldi	r25, 0x13	; 19
 180:	fe 01       	movw	r30, r28
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <main+0x40>
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	e4 cf       	rjmp	.-56     	; 0x15a <main+0x1a>

00000192 <LCD_Send_String>:
	LCD_Send(0x0C,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1a0:	dc 01       	movw	r26, r24
 1a2:	0d 90       	ld	r0, X+
 1a4:	00 20       	and	r0, r0
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <LCD_Send_String+0x10>
 1a8:	8d 01       	movw	r16, r26
 1aa:	01 50       	subi	r16, 0x01	; 1
 1ac:	10 40       	sbci	r17, 0x00	; 0
 1ae:	08 1b       	sub	r16, r24
 1b0:	19 0b       	sbc	r17, r25
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	09 c0       	rjmp	.+18     	; 0x1ca <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1b8:	f7 01       	movw	r30, r14
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	80 81       	ld	r24, Z
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1c8:	21 96       	adiw	r28, 0x01	; 1
 1ca:	c0 17       	cp	r28, r16
 1cc:	d1 07       	cpc	r29, r17
 1ce:	a4 f3       	brlt	.-24     	; 0x1b8 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	c4 56       	subi	r28, 0x64	; 100
 1ec:	d0 40       	sbci	r29, 0x00	; 0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	8c 01       	movw	r16, r24
 1fa:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 1fc:	ba 01       	movw	r22, r20
 1fe:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_GotoXY>
	char t[100];
	if(data<0){
 202:	17 ff       	sbrs	r17, 7
 204:	08 c0       	rjmp	.+16     	; 0x216 <LCD_Print+0x38>
		LCD_Send('-',1);
 206:	8d e2       	ldi	r24, 0x2D	; 45
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	0e 94 3d 00 	call	0x7a	; 0x7a <LCD_Send>
		data*=-1;
 210:	10 95       	com	r17
 212:	01 95       	neg	r16
 214:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	LCD_Send_String(itoa(data,t,10));
 216:	c8 01       	movw	r24, r16
 218:	be 01       	movw	r22, r28
 21a:	6f 5f       	subi	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	4a e0       	ldi	r20, 0x0A	; 10
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	0e 94 21 01 	call	0x242	; 0x242 <itoa>
 226:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Send_String>
}
 22a:	cc 59       	subi	r28, 0x9C	; 156
 22c:	df 4f       	sbci	r29, 0xFF	; 255
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	cf 91       	pop	r28
 23a:	df 91       	pop	r29
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <itoa>:
 242:	fb 01       	movw	r30, r22
 244:	9f 01       	movw	r18, r30
 246:	e8 94       	clt
 248:	42 30       	cpi	r20, 0x02	; 2
 24a:	c4 f0       	brlt	.+48     	; 0x27c <itoa+0x3a>
 24c:	45 32       	cpi	r20, 0x25	; 37
 24e:	b4 f4       	brge	.+44     	; 0x27c <itoa+0x3a>
 250:	4a 30       	cpi	r20, 0x0A	; 10
 252:	29 f4       	brne	.+10     	; 0x25e <itoa+0x1c>
 254:	97 fb       	bst	r25, 7
 256:	1e f4       	brtc	.+6      	; 0x25e <itoa+0x1c>
 258:	90 95       	com	r25
 25a:	81 95       	neg	r24
 25c:	9f 4f       	sbci	r25, 0xFF	; 255
 25e:	64 2f       	mov	r22, r20
 260:	77 27       	eor	r23, r23
 262:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__udivmodhi4>
 266:	80 5d       	subi	r24, 0xD0	; 208
 268:	8a 33       	cpi	r24, 0x3A	; 58
 26a:	0c f0       	brlt	.+2      	; 0x26e <itoa+0x2c>
 26c:	89 5d       	subi	r24, 0xD9	; 217
 26e:	81 93       	st	Z+, r24
 270:	cb 01       	movw	r24, r22
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	a1 f7       	brne	.-24     	; 0x25e <itoa+0x1c>
 276:	16 f4       	brtc	.+4      	; 0x27c <itoa+0x3a>
 278:	5d e2       	ldi	r21, 0x2D	; 45
 27a:	51 93       	st	Z+, r21
 27c:	10 82       	st	Z, r1
 27e:	c9 01       	movw	r24, r18
 280:	0c 94 42 01 	jmp	0x284	; 0x284 <strrev>

00000284 <strrev>:
 284:	dc 01       	movw	r26, r24
 286:	fc 01       	movw	r30, r24
 288:	67 2f       	mov	r22, r23
 28a:	71 91       	ld	r23, Z+
 28c:	77 23       	and	r23, r23
 28e:	e1 f7       	brne	.-8      	; 0x288 <strrev+0x4>
 290:	32 97       	sbiw	r30, 0x02	; 2
 292:	04 c0       	rjmp	.+8      	; 0x29c <strrev+0x18>
 294:	7c 91       	ld	r23, X
 296:	6d 93       	st	X+, r22
 298:	70 83       	st	Z, r23
 29a:	62 91       	ld	r22, -Z
 29c:	ae 17       	cp	r26, r30
 29e:	bf 07       	cpc	r27, r31
 2a0:	c8 f3       	brcs	.-14     	; 0x294 <strrev+0x10>
 2a2:	08 95       	ret

000002a4 <__udivmodhi4>:
 2a4:	aa 1b       	sub	r26, r26
 2a6:	bb 1b       	sub	r27, r27
 2a8:	51 e1       	ldi	r21, 0x11	; 17
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <__udivmodhi4_ep>

000002ac <__udivmodhi4_loop>:
 2ac:	aa 1f       	adc	r26, r26
 2ae:	bb 1f       	adc	r27, r27
 2b0:	a6 17       	cp	r26, r22
 2b2:	b7 07       	cpc	r27, r23
 2b4:	10 f0       	brcs	.+4      	; 0x2ba <__udivmodhi4_ep>
 2b6:	a6 1b       	sub	r26, r22
 2b8:	b7 0b       	sbc	r27, r23

000002ba <__udivmodhi4_ep>:
 2ba:	88 1f       	adc	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	5a 95       	dec	r21
 2c0:	a9 f7       	brne	.-22     	; 0x2ac <__udivmodhi4_loop>
 2c2:	80 95       	com	r24
 2c4:	90 95       	com	r25
 2c6:	bc 01       	movw	r22, r24
 2c8:	cd 01       	movw	r24, r26
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
