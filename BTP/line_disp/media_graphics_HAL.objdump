
C:/Users/Jashwanth/Desktop/academics/BTP/line_disp/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/Users/Jashwanth/Desktop/academics/BTP/line_disp/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000522c memsz 0x0000522c flags r-x
    LOAD off    0x0000624c vaddr 0x0000524c paddr 0x00006f28 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00008c04 vaddr 0x00008c04 paddr 0x00008c04 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004ef4  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001f0  0000505c  0000505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  0000524c  00006f28  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00008c04  00008c04  00008c04  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00007f28  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00007f50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000124d  00000000  00000000  00008828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017cfc  00000000  00000000  00009a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000055c8  00000000  00000000  00021771  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cc95  00000000  00000000  00026d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000010cc  00000000  00000000  000339d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027ca  00000000  00000000  00034a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000051a6  00000000  00000000  00037266  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003c40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0003c430  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003f247  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003f24a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003f24d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003f24e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003f24f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003f253  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003f257  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003f25b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003f264  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003f26d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0003f276  2**0
                  CONTENTS, READONLY
 28 .jdi          00004d54  00000000  00000000  0003f281  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000abe93  00000000  00000000  00043fd5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
0000505c l    d  .rodata	00000000 .rodata
0000524c l    d  .rwdata	00000000 .rwdata
00008c04 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000524c l     O .rwdata	00001060 JTAG_UART
000062ac l     O .rwdata	00000030 AV_Config
000062dc l     O .rwdata	00000030 Audio
0000630c l     O .rwdata	0000002c Expansion_JP1
00006338 l     O .rwdata	0000002c Expansion_JP2
00006364 l     O .rwdata	0000002c Green_LEDs
00006390 l     O .rwdata	0000002c HEX3_HEX0
000063bc l     O .rwdata	0000002c Pushbuttons
000063e8 l     O .rwdata	0000002c Red_LEDs
00006414 l     O .rwdata	0000002c Slider_Switches
00006440 l     O .rwdata	00000038 PS2_Port
00006478 l     O .rwdata	0000002c Serial_Port
000064a4 l     O .rwdata	00000048 VGA_Char_Buffer
000064ec l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000aec l     F .text	00000054 altera_avalon_jtag_uart_timeout
00000bb8 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001088 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000235c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002464 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000066e8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000030f8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000034dc l     F .text	00000058 std
000035e8 l     F .text	00000008 __fp_lock
000035f0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00006f24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004b04 g     F .text	00000070 _isatty_r
00000528 g     F .text	00000050 alt_main
000019e0 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
00008c54 g     O .bss	00000100 alt_irq
00001418 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00004b74 g     F .text	00000078 _lseek_r
00006f28 g       *ABS*	00000000 __flash_rwdata_start
00008d54 g       *ABS*	00000000 __alt_heap_start
00004740 g     F .text	00000068 __sseek
00003544 g     F .text	000000a4 __sinit
00002e70 g     F .text	00000130 __swbuf_r
00001620 g     F .text	00000088 alt_up_char_buffer_string
000010d8 g     F .text	0000000c read_CE_bit
00003644 g     F .text	00000068 __sfmoreglue
00004e18 g     F .text	00000004 __malloc_unlock
000011a8 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
000014c4 g     F .text	00000080 alt_up_rs232_read_fd
000016a8 g     F .text	00000058 alt_up_char_buffer_draw
00003634 g     F .text	00000010 _cleanup
000020d4 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
000021c8 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004a90 g     F .text	00000074 _fstat_r
00008c1c g     O .bss	00000004 errno
00008c08 g     O .bss	00000004 alt_argv
0000eef0 g       *ABS*	00000000 _gp
000021a0 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00006568 g     O .rwdata	00000180 alt_fd_list
000023d4 g     F .text	00000070 alt_find_dev
00002ab4 g     F .text	000000a0 memcpy
00001700 g     F .text	00000028 alt_up_char_buffer_clear
00003628 g     F .text	0000000c _cleanup_r
000024c8 g     F .text	00000098 alt_io_redirect
00001478 g     F .text	0000004c alt_up_rs232_read_data
00002190 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00000d60 g     F .text	00000168 altera_avalon_jtag_uart_read
00004cf8 g     F .text	00000084 isatty
00001b74 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
000029cc g     F .text	0000003c alt_icache_flush
00008c20 g     O .bss	00000004 __malloc_top_pad
000046c8 g     F .text	00000070 _sbrk_r
00001798 g     F .text	0000005c helper_plot_pixel
00004bec g     F .text	00000078 _read_r
00006f00 g     O .rwdata	00000004 alt_max_fd
0000144c g     F .text	0000000c alt_up_rs232_check_parity
0000496c g     F .text	00000110 _fclose_r
000010e4 g     F .text	00000008 read_num_bytes_available
000034a8 g     F .text	00000034 fflush
00008c24 g     O .bss	00000004 __malloc_max_sbrked_mem
00002560 g     F .text	000000bc alt_irq_register
000010c4 g     F .text	0000000c read_RI_bit
00001ffc g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
00004d7c g     F .text	00000098 lseek
00006f18 g     O .rwdata	00000004 _global_impure_ptr
00008d54 g       *ABS*	00000000 __bss_end
00001db8 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
000027f0 g     F .text	000000ac alt_tick
000010f8 g     F .text	00000008 read_data_byte
00003610 g     F .text	00000018 __fp_lock_all
000027bc g     F .text	00000034 alt_alarm_stop
000010d0 g     F .text	00000008 read_RE_bit
00008c10 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00006540 g     O .rwdata	00000028 alt_dev_null
000012ac g     F .text	00000040 alt_up_ps2_write_data_byte
00002358 g     F .text	00000004 alt_dcache_flush_all
00001ce8 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
00006f28 g       *ABS*	00000000 __ram_rwdata_end
00006ef8 g     O .rwdata	00000008 alt_dev_list
00004f64 g     F .text	000000f4 write
00002c58 g     F .text	000000e8 _putc_r
000017f4 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
0000524c g       *ABS*	00000000 __ram_rodata_end
00004c78 g     F .text	00000080 fstat
0000156c g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00008d54 g       *ABS*	00000000 end
000012ec g     F .text	00000070 alt_up_ps2_write_fd
00001748 g     F .text	00000050 alt_up_char_buffer_init
00000b40 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
00001044 g     F .text	00000044 alt_avalon_timer_sc_init
00000ec8 g     F .text	0000017c altera_avalon_jtag_uart_write
00003534 g     F .text	00000004 __sfp_lock_acquire
000038c8 g     F .text	00000314 _free_r
00000578 g     F .text	000001dc alt_printf
000030fc g     F .text	000001b0 __call_exitprocs
00006f20 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00008c14 g     O .bss	00000004 _alt_tick_rate
00008c18 g     O .bss	00000004 _alt_nticks
00004e1c g     F .text	000000f8 read
0000079c g     F .text	00000280 alt_sys_init
000001a4 g     F .text	000001f4 draw_big_A
00001120 g     F .text	00000030 alt_up_ps2_clear_fifo
00001544 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00000ab4 g     F .text	00000038 altera_avalon_jtag_uart_close
0000524c g       *ABS*	00000000 __ram_rwdata_start
0000505c g       *ABS*	00000000 __ram_rodata_start
00008c2c g     O .bss	00000028 __malloc_current_mallinfo
00000a8c g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00002960 g     F .text	0000006c alt_get_fd
000048fc g     F .text	00000070 _close_r
00002a40 g     F .text	00000074 memcmp
00000a3c g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00008d54 g       *ABS*	00000000 __alt_stack_base
00000a1c g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00002fbc g     F .text	0000013c __swsetup_r
000036ac g     F .text	000000f0 __sfp
00006ae8 g     O .rwdata	00000408 __malloc_av_
00003540 g     F .text	00000004 __sinit_lock_release
00004824 g     F .text	00000060 __sread
000015dc g     F .text	0000001c alt_up_rs232_disable_read_interrupt
000028a4 g     F .text	000000bc alt_find_file
00002364 g     F .text	00000070 alt_dev_llist_insert
00004e14 g     F .text	00000004 __malloc_lock
00004f14 g     F .text	00000050 sbrk
000032ac g     F .text	000001fc _fflush_r
00008c04 g       *ABS*	00000000 __bss_start
00004630 g     F .text	00000098 memset
00000398 g     F .text	000000cc main
00008c0c g     O .bss	00000004 alt_envp
00008c28 g     O .bss	00000004 __malloc_max_total_mem
000020b0 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001728 g     F .text	00000020 alt_up_char_buffer_open_dev
00000a64 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00002fa0 g     F .text	0000001c __swbuf
00004738 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00004a7c g     F .text	00000014 fclose
00001150 g     F .text	00000058 alt_up_ps2_read_data_byte
00003ef0 g     F .text	00000740 _malloc_r
00006f04 g     O .rwdata	00000004 alt_errno
00003ca4 g     F .text	000000b8 _fwalk
00001100 g     F .text	00000020 alt_up_ps2_open_dev
00002b54 g     F .text	00000104 putc
0000379c g     F .text	0000012c _malloc_trim_r
00001434 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00002d40 g     F .text	000000bc strcmp
0000505c g       *ABS*	00000000 __flash_rodata_start
00001458 g     F .text	00000020 alt_up_rs232_open_dev
0000077c g     F .text	00000020 alt_irq_init
00002798 g     F .text	00000024 alt_release_fd
000010ec g     F .text	0000000c read_data_valid
0000135c g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00004884 g     F .text	00000078 _write_r
00006f14 g     O .rwdata	00000004 _impure_ptr
00008c04 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
000035f8 g     F .text	00000018 __fp_unlock_all
00006ef0 g     O .rwdata	00000008 alt_fs_list
000015f8 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001554 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006f28 g       *ABS*	00000000 _edata
00008d54 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000cec g     F .text	00000074 altera_avalon_jtag_uart_ioctl
000047a8 g     F .text	0000007c __swrite
00006f1c g     O .rwdata	00000004 __malloc_trim_threshold
0000289c g     F .text	00000008 altera_nios2_qsys_irq_init
00002a08 g     F .text	00000038 exit
00003bdc g     F .text	000000c8 _fwalk_reent
00001390 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003538 g     F .text	00000004 __sfp_lock_release
00004c64 g     F .text	00000014 _exit
000021e8 g     F .text	00000094 alt_alarm_start
00003d5c g     F .text	00000194 __smakebuf_r
00001250 g     F .text	0000005c alt_up_ps2_wait_for_ack
00002dfc g     F .text	00000074 strlen
0000261c g     F .text	0000017c open
00000754 g     F .text	00000028 alt_putchar
00002444 g     F .text	00000020 alt_icache_flush_all
00006f08 g     O .rwdata	00000004 alt_priority_mask
00001228 g     F .text	00000028 alt_up_ps2_read_fd
00006f0c g     O .rwdata	00000008 alt_alarm_list
00001610 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000227c g     F .text	000000dc close
00000464 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
0000353c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00808014 	movui	r2,512
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	84231504 	addi	r16,r16,-29612
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6bbbc14 	ori	gp,gp,61168
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a30114 	ori	r2,r2,35844

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e35514 	ori	r3,r3,36180

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00004640 	call	464 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00005280 	call	528 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <draw_big_A>:
	}
}

/* draws a big letter A on the screen */
void draw_big_A(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev )
{
     1a4:	defff404 	addi	sp,sp,-48
     1a8:	dfc00b15 	stw	ra,44(sp)
     1ac:	ddc00a15 	stw	r23,40(sp)
     1b0:	dd800915 	stw	r22,36(sp)
     1b4:	dd400815 	stw	r21,32(sp)
     1b8:	dd000715 	stw	r20,28(sp)
     1bc:	dcc00615 	stw	r19,24(sp)
     1c0:	dc800515 	stw	r18,20(sp)
     1c4:	dc400415 	stw	r17,16(sp)
     1c8:	dc000315 	stw	r16,12(sp)
     1cc:	2027883a 	mov	r19,r4
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 10, 88, 44, 10, 0xffff, 0);
     1d0:	05c00284 	movi	r23,10
     1d4:	04801604 	movi	r18,88
     1d8:	04000b04 	movi	r16,44
     1dc:	ddc00015 	stw	r23,0(sp)
     1e0:	047fffd4 	movui	r17,65535
     1e4:	dc400115 	stw	r17,4(sp)
     1e8:	d8000215 	stw	zero,8(sp)
     1ec:	b80b883a 	mov	r5,r23
     1f0:	900d883a 	mov	r6,r18
     1f4:	800f883a 	mov	r7,r16
     1f8:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 44, 10, 72, 10, 0xffff, 0);
     1fc:	05001204 	movi	r20,72
     200:	ddc00015 	stw	r23,0(sp)
     204:	dc400115 	stw	r17,4(sp)
     208:	d8000215 	stw	zero,8(sp)
     20c:	9809883a 	mov	r4,r19
     210:	800b883a 	mov	r5,r16
     214:	b80d883a 	mov	r6,r23
     218:	a00f883a 	mov	r7,r20
     21c:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 72, 10, 106, 88, 0xffff, 0);
     220:	04001a84 	movi	r16,106
     224:	dc800015 	stw	r18,0(sp)
     228:	dc400115 	stw	r17,4(sp)
     22c:	d8000215 	stw	zero,8(sp)
     230:	9809883a 	mov	r4,r19
     234:	a00b883a 	mov	r5,r20
     238:	b80d883a 	mov	r6,r23
     23c:	800f883a 	mov	r7,r16
     240:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 106, 88, 81, 88, 0xffff, 0);
     244:	05001444 	movi	r20,81
     248:	dc800015 	stw	r18,0(sp)
     24c:	dc400115 	stw	r17,4(sp)
     250:	d8000215 	stw	zero,8(sp)
     254:	9809883a 	mov	r4,r19
     258:	800b883a 	mov	r5,r16
     25c:	900d883a 	mov	r6,r18
     260:	a00f883a 	mov	r7,r20
     264:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 81, 88, 75, 77, 0xffff, 0);
     268:	058012c4 	movi	r22,75
     26c:	04001344 	movi	r16,77
     270:	dc000015 	stw	r16,0(sp)
     274:	dc400115 	stw	r17,4(sp)
     278:	d8000215 	stw	zero,8(sp)
     27c:	9809883a 	mov	r4,r19
     280:	a00b883a 	mov	r5,r20
     284:	900d883a 	mov	r6,r18
     288:	b00f883a 	mov	r7,r22
     28c:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 75, 77, 41, 77, 0xffff, 0);
     290:	05400a44 	movi	r21,41
     294:	dc000015 	stw	r16,0(sp)
     298:	dc400115 	stw	r17,4(sp)
     29c:	d8000215 	stw	zero,8(sp)
     2a0:	9809883a 	mov	r4,r19
     2a4:	b00b883a 	mov	r5,r22
     2a8:	800d883a 	mov	r6,r16
     2ac:	a80f883a 	mov	r7,r21
     2b0:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 41, 77, 35, 88, 0xffff, 0);
     2b4:	050008c4 	movi	r20,35
     2b8:	dc800015 	stw	r18,0(sp)
     2bc:	dc400115 	stw	r17,4(sp)
     2c0:	d8000215 	stw	zero,8(sp)
     2c4:	9809883a 	mov	r4,r19
     2c8:	a80b883a 	mov	r5,r21
     2cc:	800d883a 	mov	r6,r16
     2d0:	a00f883a 	mov	r7,r20
     2d4:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 35, 88, 10, 88, 0xffff, 0);
     2d8:	dc800015 	stw	r18,0(sp)
     2dc:	dc400115 	stw	r17,4(sp)
     2e0:	d8000215 	stw	zero,8(sp)
     2e4:	9809883a 	mov	r4,r19
     2e8:	a00b883a 	mov	r5,r20
     2ec:	900d883a 	mov	r6,r18
     2f0:	b80f883a 	mov	r7,r23
     2f4:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 47, 60, 58, 32, 0xffff, 0);
     2f8:	05800bc4 	movi	r22,47
     2fc:	04000f04 	movi	r16,60
     300:	05000e84 	movi	r20,58
     304:	05400804 	movi	r21,32
     308:	dd400015 	stw	r21,0(sp)
     30c:	dc400115 	stw	r17,4(sp)
     310:	d8000215 	stw	zero,8(sp)
     314:	9809883a 	mov	r4,r19
     318:	b00b883a 	mov	r5,r22
     31c:	800d883a 	mov	r6,r16
     320:	a00f883a 	mov	r7,r20
     324:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 58, 32, 69, 60, 0xffff, 0);
     328:	04801144 	movi	r18,69
     32c:	dc000015 	stw	r16,0(sp)
     330:	dc400115 	stw	r17,4(sp)
     334:	d8000215 	stw	zero,8(sp)
     338:	9809883a 	mov	r4,r19
     33c:	a00b883a 	mov	r5,r20
     340:	a80d883a 	mov	r6,r21
     344:	900f883a 	mov	r7,r18
     348:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 69, 60, 47, 60, 0xffff, 0);
     34c:	dc000015 	stw	r16,0(sp)
     350:	dc400115 	stw	r17,4(sp)
     354:	d8000215 	stw	zero,8(sp)
     358:	9809883a 	mov	r4,r19
     35c:	900b883a 	mov	r5,r18
     360:	800d883a 	mov	r6,r16
     364:	b00f883a 	mov	r7,r22
     368:	00017f40 	call	17f4 <alt_up_pixel_buffer_dma_draw_line>
}
     36c:	dfc00b17 	ldw	ra,44(sp)
     370:	ddc00a17 	ldw	r23,40(sp)
     374:	dd800917 	ldw	r22,36(sp)
     378:	dd400817 	ldw	r21,32(sp)
     37c:	dd000717 	ldw	r20,28(sp)
     380:	dcc00617 	ldw	r19,24(sp)
     384:	dc800517 	ldw	r18,20(sp)
     388:	dc400417 	ldw	r17,16(sp)
     38c:	dc000317 	ldw	r16,12(sp)
     390:	dec00c04 	addi	sp,sp,48
     394:	f800283a 	ret

00000398 <main>:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void)
{
     398:	defffe04 	addi	sp,sp,-8
     39c:	dfc00115 	stw	ra,4(sp)
     3a0:	dc000015 	stw	r16,0(sp)
	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE1\0";
	char text_bottom_row[40] = "Media Computer\0";

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     3a4:	01000034 	movhi	r4,0
     3a8:	21141704 	addi	r4,r4,20572
     3ac:	00021c80 	call	21c8 <alt_up_pixel_buffer_dma_open_dev>
     3b0:	1021883a 	mov	r16,r2
	if ( pixel_buffer_dev == NULL)
     3b4:	1000041e 	bne	r2,zero,3c8 <main+0x30>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     3b8:	01000034 	movhi	r4,0
     3bc:	21141d04 	addi	r4,r4,20596
     3c0:	00005780 	call	578 <alt_printf>
     3c4:	00000306 	br	3d4 <main+0x3c>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     3c8:	01000034 	movhi	r4,0
     3cc:	21142904 	addi	r4,r4,20644
     3d0:	00005780 	call	578 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     3d4:	8009883a 	mov	r4,r16
     3d8:	000b883a 	mov	r5,zero
     3dc:	0001ffc0 	call	1ffc <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     3e0:	01000034 	movhi	r4,0
     3e4:	21143404 	addi	r4,r4,20688
     3e8:	00017280 	call	1728 <alt_up_char_buffer_open_dev>
	if (char_buffer_dev == NULL)
     3ec:	10001526 	beq	r2,zero,444 <main+0xac>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     3f0:	01000034 	movhi	r4,0
     3f4:	21144604 	addi	r4,r4,20760
     3f8:	00005780 	call	578 <alt_printf>
     3fc:	01c20034 	movhi	r7,2048
     400:	01863dc4 	movi	r6,6391
     404:	01403c04 	movi	r5,240
     408:	02005004 	movi	r8,320
     40c:	0009883a 	mov	r4,zero
     410:	00000a06 	br	43c <main+0xa4>
		  for(row=0;row<320;row++)
		  {
		    for(col=0;col<240;col++)
			{
			  offset = (row << 9) + col;
			  *(pixel_buffer+offset) = 0x18F7;
     414:	2004927a 	slli	r2,r4,9
     418:	1885883a 	add	r2,r3,r2
     41c:	1085883a 	add	r2,r2,r2
     420:	11c5883a 	add	r2,r2,r7
     424:	1180000d 	sth	r6,0(r2)
	{
	//	if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
	//	{
		  for(row=0;row<320;row++)
		  {
		    for(col=0;col<240;col++)
     428:	00800044 	movi	r2,1
     42c:	1887883a 	add	r3,r3,r2
     430:	197ff81e 	bne	r3,r5,414 <main+0x7c>
    int row = 0, col = 0 , offset;	 
	while(1)
	{
	//	if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
	//	{
		  for(row=0;row<320;row++)
     434:	2089883a 	add	r4,r4,r2
     438:	223ff426 	beq	r4,r8,40c <main+0x74>
     43c:	0007883a 	mov	r3,zero
     440:	003ff406 	br	414 <main+0x7c>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     444:	01000034 	movhi	r4,0
     448:	21143a04 	addi	r4,r4,20712
     44c:	00005780 	call	578 <alt_printf>
			  *(pixel_buffer+offset) = 0x18F7;
		    }
		  }	
	//  	}	
	}
}
     450:	00bfffc4 	movi	r2,-1
     454:	dfc00117 	ldw	ra,4(sp)
     458:	dc000017 	ldw	r16,0(sp)
     45c:	dec00204 	addi	sp,sp,8
     460:	f800283a 	ret

00000464 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     464:	deffff04 	addi	sp,sp,-4
     468:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     46c:	01000034 	movhi	r4,0
     470:	211bca04 	addi	r4,r4,28456
     474:	00c00034 	movhi	r3,0
     478:	18d49304 	addi	r3,r3,21068

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     47c:	20c00926 	beq	r4,r3,4a4 <alt_load+0x40>
     480:	01800034 	movhi	r6,0
     484:	319bca04 	addi	r6,r6,28456
  {
    while( to != end )
     488:	19800626 	beq	r3,r6,4a4 <alt_load+0x40>
     48c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     490:	20800017 	ldw	r2,0(r4)
     494:	18800015 	stw	r2,0(r3)
     498:	1947883a 	add	r3,r3,r5
     49c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     4a0:	30fffb1e 	bne	r6,r3,490 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     4a4:	01000034 	movhi	r4,0
     4a8:	21000804 	addi	r4,r4,32
     4ac:	00c00034 	movhi	r3,0
     4b0:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     4b4:	20c00926 	beq	r4,r3,4dc <alt_load+0x78>
     4b8:	01800034 	movhi	r6,0
     4bc:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     4c0:	19800626 	beq	r3,r6,4dc <alt_load+0x78>
     4c4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     4c8:	20800017 	ldw	r2,0(r4)
     4cc:	18800015 	stw	r2,0(r3)
     4d0:	1947883a 	add	r3,r3,r5
     4d4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     4d8:	30fffb1e 	bne	r6,r3,4c8 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     4dc:	01000034 	movhi	r4,0
     4e0:	21141704 	addi	r4,r4,20572
     4e4:	00c00034 	movhi	r3,0
     4e8:	18d41704 	addi	r3,r3,20572

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     4ec:	20c00926 	beq	r4,r3,514 <alt_load+0xb0>
     4f0:	01800034 	movhi	r6,0
     4f4:	31949304 	addi	r6,r6,21068
  {
    while( to != end )
     4f8:	19800626 	beq	r3,r6,514 <alt_load+0xb0>
     4fc:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     500:	20800017 	ldw	r2,0(r4)
     504:	18800015 	stw	r2,0(r3)
     508:	1947883a 	add	r3,r3,r5
     50c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     510:	30fffb1e 	bne	r6,r3,500 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     514:	00023580 	call	2358 <alt_dcache_flush_all>
  alt_icache_flush_all();
     518:	00024440 	call	2444 <alt_icache_flush_all>
}
     51c:	dfc00017 	ldw	ra,0(sp)
     520:	dec00104 	addi	sp,sp,4
     524:	f800283a 	ret

00000528 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     528:	defffe04 	addi	sp,sp,-8
     52c:	dfc00115 	stw	ra,4(sp)
     530:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     534:	0009883a 	mov	r4,zero
     538:	000077c0 	call	77c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     53c:	000079c0 	call	79c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     540:	01800034 	movhi	r6,0
     544:	31944e04 	addi	r6,r6,20792
     548:	3009883a 	mov	r4,r6
     54c:	300b883a 	mov	r5,r6
     550:	00024c80 	call	24c8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     554:	d1274517 	ldw	r4,-25324(gp)
     558:	d1674617 	ldw	r5,-25320(gp)
     55c:	d1a74717 	ldw	r6,-25316(gp)
     560:	00003980 	call	398 <main>
     564:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     568:	01000044 	movi	r4,1
     56c:	000227c0 	call	227c <close>
  exit (result);
     570:	8009883a 	mov	r4,r16
     574:	0002a080 	call	2a08 <exit>

00000578 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     578:	defff804 	addi	sp,sp,-32
     57c:	dfc00415 	stw	ra,16(sp)
     580:	dc800315 	stw	r18,12(sp)
     584:	dc400215 	stw	r17,8(sp)
     588:	dc000115 	stw	r16,4(sp)
     58c:	d9400515 	stw	r5,20(sp)
     590:	d9800615 	stw	r6,24(sp)
     594:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     598:	d8800504 	addi	r2,sp,20
     59c:	d8800015 	stw	r2,0(sp)
     5a0:	2023883a 	mov	r17,r4
     5a4:	00005d06 	br	71c <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     5a8:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     5ac:	21003fcc 	andi	r4,r4,255
     5b0:	2100201c 	xori	r4,r4,128
     5b4:	213fe004 	addi	r4,r4,-128
     5b8:	00800944 	movi	r2,37
     5bc:	20800226 	beq	r4,r2,5c8 <alt_printf+0x50>
        {
            alt_putchar(c);
     5c0:	00007540 	call	754 <alt_putchar>
     5c4:	00005506 	br	71c <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     5c8:	89400003 	ldbu	r5,0(r17)
     5cc:	8c400044 	addi	r17,r17,1
     5d0:	29003fcc 	andi	r4,r5,255
     5d4:	2100201c 	xori	r4,r4,128
     5d8:	213fe004 	addi	r4,r4,-128
     5dc:	20005726 	beq	r4,zero,73c <alt_printf+0x1c4>
            {
                if (c == '%')
     5e0:	00800944 	movi	r2,37
     5e4:	2080021e 	bne	r4,r2,5f0 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     5e8:	00007540 	call	754 <alt_putchar>
     5ec:	00004b06 	br	71c <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     5f0:	28c03fcc 	andi	r3,r5,255
     5f4:	18c0201c 	xori	r3,r3,128
     5f8:	18ffe004 	addi	r3,r3,-128
     5fc:	008018c4 	movi	r2,99
     600:	1880061e 	bne	r3,r2,61c <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     604:	d8c00017 	ldw	r3,0(sp)
     608:	18800104 	addi	r2,r3,4
     60c:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     610:	19000017 	ldw	r4,0(r3)
     614:	00007540 	call	754 <alt_putchar>
     618:	00004006 	br	71c <alt_printf+0x1a4>
                }
                else if (c == 'x')
     61c:	28c03fcc 	andi	r3,r5,255
     620:	18c0201c 	xori	r3,r3,128
     624:	18ffe004 	addi	r3,r3,-128
     628:	00801e04 	movi	r2,120
     62c:	1880231e 	bne	r3,r2,6bc <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     630:	d8c00017 	ldw	r3,0(sp)
     634:	18800104 	addi	r2,r3,4
     638:	d8800015 	stw	r2,0(sp)
     63c:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     640:	90000326 	beq	r18,zero,650 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     644:	90bc002c 	andhi	r2,r18,61440
     648:	10000426 	beq	r2,zero,65c <alt_printf+0xe4>
     64c:	00003906 	br	734 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     650:	01000c04 	movi	r4,48
     654:	00007540 	call	754 <alt_putchar>
     658:	00003006 	br	71c <alt_printf+0x1a4>
                        continue;
     65c:	04000704 	movi	r16,28
     660:	013fff04 	movi	r4,-4
     664:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     668:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     66c:	1c04983a 	sll	r2,r3,r16
     670:	9084703a 	and	r2,r18,r2
     674:	103ffc26 	beq	r2,zero,668 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     678:	80002816 	blt	r16,zero,71c <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     67c:	008003c4 	movi	r2,15
     680:	1404983a 	sll	r2,r2,r16
     684:	9084703a 	and	r2,r18,r2
     688:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     68c:	00800244 	movi	r2,9
     690:	10c00236 	bltu	r2,r3,69c <alt_printf+0x124>
                            c = '0' + digit;
     694:	19000c04 	addi	r4,r3,48
     698:	00000106 	br	6a0 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     69c:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     6a0:	21003fcc 	andi	r4,r4,255
     6a4:	2100201c 	xori	r4,r4,128
     6a8:	213fe004 	addi	r4,r4,-128
     6ac:	00007540 	call	754 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     6b0:	843fff04 	addi	r16,r16,-4
     6b4:	80001916 	blt	r16,zero,71c <alt_printf+0x1a4>
     6b8:	003ff006 	br	67c <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     6bc:	28c03fcc 	andi	r3,r5,255
     6c0:	18c0201c 	xori	r3,r3,128
     6c4:	18ffe004 	addi	r3,r3,-128
     6c8:	00801cc4 	movi	r2,115
     6cc:	1880131e 	bne	r3,r2,71c <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     6d0:	d8800017 	ldw	r2,0(sp)
     6d4:	10c00104 	addi	r3,r2,4
     6d8:	d8c00015 	stw	r3,0(sp)
     6dc:	14000017 	ldw	r16,0(r2)

                    while(*s)
     6e0:	81000003 	ldbu	r4,0(r16)
     6e4:	20803fcc 	andi	r2,r4,255
     6e8:	1080201c 	xori	r2,r2,128
     6ec:	10bfe004 	addi	r2,r2,-128
     6f0:	10000a26 	beq	r2,zero,71c <alt_printf+0x1a4>
                      alt_putchar(*s++);
     6f4:	84000044 	addi	r16,r16,1
     6f8:	21003fcc 	andi	r4,r4,255
     6fc:	2100201c 	xori	r4,r4,128
     700:	213fe004 	addi	r4,r4,-128
     704:	00007540 	call	754 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     708:	81000003 	ldbu	r4,0(r16)
     70c:	20803fcc 	andi	r2,r4,255
     710:	1080201c 	xori	r2,r2,128
     714:	10bfe004 	addi	r2,r2,-128
     718:	103ff61e 	bne	r2,zero,6f4 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     71c:	89000003 	ldbu	r4,0(r17)
     720:	20803fcc 	andi	r2,r4,255
     724:	1080201c 	xori	r2,r2,128
     728:	10bfe004 	addi	r2,r2,-128
     72c:	103f9e1e 	bne	r2,zero,5a8 <alt_printf+0x30>
     730:	00000206 	br	73c <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     734:	04000704 	movi	r16,28
     738:	003fd006 	br	67c <alt_printf+0x104>
     73c:	dfc00417 	ldw	ra,16(sp)
     740:	dc800317 	ldw	r18,12(sp)
     744:	dc400217 	ldw	r17,8(sp)
     748:	dc000117 	ldw	r16,4(sp)
     74c:	dec00804 	addi	sp,sp,32
     750:	f800283a 	ret

00000754 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     754:	deffff04 	addi	sp,sp,-4
     758:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     75c:	00800034 	movhi	r2,0
     760:	109bc504 	addi	r2,r2,28436
     764:	10800017 	ldw	r2,0(r2)
     768:	11400217 	ldw	r5,8(r2)
     76c:	0002b540 	call	2b54 <putc>
#endif
}
     770:	dfc00017 	ldw	ra,0(sp)
     774:	dec00104 	addi	sp,sp,4
     778:	f800283a 	ret

0000077c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     77c:	deffff04 	addi	sp,sp,-4
     780:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     784:	000289c0 	call	289c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     788:	00800044 	movi	r2,1
     78c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     790:	dfc00017 	ldw	ra,0(sp)
     794:	dec00104 	addi	sp,sp,4
     798:	f800283a 	ret

0000079c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     79c:	defffd04 	addi	sp,sp,-12
     7a0:	dfc00215 	stw	ra,8(sp)
     7a4:	dc400115 	stw	r17,4(sp)
     7a8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     7ac:	04000204 	movi	r16,8
     7b0:	01040034 	movhi	r4,4096
     7b4:	21080004 	addi	r4,r4,8192
     7b8:	000b883a 	mov	r5,zero
     7bc:	000d883a 	mov	r6,zero
     7c0:	800f883a 	mov	r7,r16
     7c4:	00010440 	call	1044 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     7c8:	04400034 	movhi	r17,0
     7cc:	8c549d04 	addi	r17,r17,21108
     7d0:	8809883a 	mov	r4,r17
     7d4:	000b883a 	mov	r5,zero
     7d8:	800d883a 	mov	r6,r16
     7dc:	0000b400 	call	b40 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     7e0:	04000034 	movhi	r16,0
     7e4:	841bbe04 	addi	r16,r16,28408
     7e8:	893ff604 	addi	r4,r17,-40
     7ec:	800b883a 	mov	r5,r16
     7f0:	00023640 	call	2364 <alt_dev_llist_insert>
     7f4:	01000034 	movhi	r4,0
     7f8:	2118ab04 	addi	r4,r4,25260
     7fc:	800b883a 	mov	r5,r16
     800:	00023640 	call	2364 <alt_dev_llist_insert>
     804:	01000034 	movhi	r4,0
     808:	2118b704 	addi	r4,r4,25308
     80c:	800b883a 	mov	r5,r16
     810:	00023640 	call	2364 <alt_dev_llist_insert>
     814:	01000034 	movhi	r4,0
     818:	2118c304 	addi	r4,r4,25356
     81c:	800b883a 	mov	r5,r16
     820:	00023640 	call	2364 <alt_dev_llist_insert>
     824:	01000034 	movhi	r4,0
     828:	2118ce04 	addi	r4,r4,25400
     82c:	800b883a 	mov	r5,r16
     830:	00023640 	call	2364 <alt_dev_llist_insert>
     834:	01000034 	movhi	r4,0
     838:	2118d904 	addi	r4,r4,25444
     83c:	800b883a 	mov	r5,r16
     840:	00023640 	call	2364 <alt_dev_llist_insert>
     844:	01000034 	movhi	r4,0
     848:	2118e404 	addi	r4,r4,25488
     84c:	800b883a 	mov	r5,r16
     850:	00023640 	call	2364 <alt_dev_llist_insert>
     854:	01000034 	movhi	r4,0
     858:	2118ef04 	addi	r4,r4,25532
     85c:	800b883a 	mov	r5,r16
     860:	00023640 	call	2364 <alt_dev_llist_insert>
     864:	01000034 	movhi	r4,0
     868:	2118fa04 	addi	r4,r4,25576
     86c:	800b883a 	mov	r5,r16
     870:	00023640 	call	2364 <alt_dev_llist_insert>
     874:	01000034 	movhi	r4,0
     878:	21190504 	addi	r4,r4,25620
     87c:	800b883a 	mov	r5,r16
     880:	00023640 	call	2364 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     884:	04400034 	movhi	r17,0
     888:	8c591004 	addi	r17,r17,25664
     88c:	8809883a 	mov	r4,r17
     890:	00013900 	call	1390 <alt_up_ps2_init>
     894:	8809883a 	mov	r4,r17
     898:	800b883a 	mov	r5,r16
     89c:	00023640 	call	2364 <alt_dev_llist_insert>
     8a0:	01000034 	movhi	r4,0
     8a4:	21191e04 	addi	r4,r4,25720
     8a8:	800b883a 	mov	r5,r16
     8ac:	00023640 	call	2364 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     8b0:	01000034 	movhi	r4,0
     8b4:	21192904 	addi	r4,r4,25764
     8b8:	20800a17 	ldw	r2,40(r4)
     8bc:	10800104 	addi	r2,r2,4
     8c0:	10c0000b 	ldhu	r3,0(r2)
     8c4:	20c00c15 	stw	r3,48(r4)
     8c8:	10800017 	ldw	r2,0(r2)
     8cc:	100ad43a 	srli	r5,r2,16
     8d0:	21400d15 	stw	r5,52(r4)
     8d4:	00801004 	movi	r2,64
     8d8:	10c00436 	bltu	r2,r3,8ec <alt_sys_init+0x150>
     8dc:	00800fc4 	movi	r2,63
     8e0:	20800f15 	stw	r2,60(r4)
     8e4:	00800184 	movi	r2,6
     8e8:	20801015 	stw	r2,64(r4)
     8ec:	00800804 	movi	r2,32
     8f0:	11400436 	bltu	r2,r5,904 <alt_sys_init+0x168>
     8f4:	00c007c4 	movi	r3,31
     8f8:	00800034 	movhi	r2,0
     8fc:	10992904 	addi	r2,r2,25764
     900:	10c01115 	stw	r3,68(r2)
     904:	04000034 	movhi	r16,0
     908:	84192904 	addi	r16,r16,25764
     90c:	8009883a 	mov	r4,r16
     910:	00017480 	call	1748 <alt_up_char_buffer_init>
     914:	8009883a 	mov	r4,r16
     918:	01400034 	movhi	r5,0
     91c:	295bbe04 	addi	r5,r5,28408
     920:	00023640 	call	2364 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     924:	01800034 	movhi	r6,0
     928:	31993b04 	addi	r6,r6,25836
     92c:	30c00a17 	ldw	r3,40(r6)
     930:	18800017 	ldw	r2,0(r3)
     934:	30800b15 	stw	r2,44(r6)
     938:	18800117 	ldw	r2,4(r3)
     93c:	30800c15 	stw	r2,48(r6)
     940:	19000204 	addi	r4,r3,8
     944:	2080000b 	ldhu	r2,0(r4)
     948:	30800f15 	stw	r2,60(r6)
     94c:	20800017 	ldw	r2,0(r4)
     950:	1004d43a 	srli	r2,r2,16
     954:	30801015 	stw	r2,64(r6)
     958:	18c00304 	addi	r3,r3,12
     95c:	18800017 	ldw	r2,0(r3)
     960:	1005d07a 	srai	r2,r2,1
     964:	01000044 	movi	r4,1
     968:	1104703a 	and	r2,r2,r4
     96c:	30800d15 	stw	r2,52(r6)
     970:	18800017 	ldw	r2,0(r3)
     974:	1005d13a 	srai	r2,r2,4
     978:	114003cc 	andi	r5,r2,15
     97c:	31400e15 	stw	r5,56(r6)
     980:	1a000017 	ldw	r8,0(r3)
     984:	400ed43a 	srli	r7,r8,16
     988:	2900021e 	bne	r5,r4,994 <alt_sys_init+0x1f8>
     98c:	30001115 	stw	zero,68(r6)
     990:	00000b06 	br	9c0 <alt_sys_init+0x224>
     994:	00800084 	movi	r2,2
     998:	2880051e 	bne	r5,r2,9b0 <alt_sys_init+0x214>
     99c:	00c00044 	movi	r3,1
     9a0:	00800034 	movhi	r2,0
     9a4:	10993b04 	addi	r2,r2,25836
     9a8:	10c01115 	stw	r3,68(r2)
     9ac:	00000406 	br	9c0 <alt_sys_init+0x224>
     9b0:	00c00084 	movi	r3,2
     9b4:	00800034 	movhi	r2,0
     9b8:	10993b04 	addi	r2,r2,25836
     9bc:	10c01115 	stw	r3,68(r2)
     9c0:	01000034 	movhi	r4,0
     9c4:	21193b04 	addi	r4,r4,25836
     9c8:	38c03fcc 	andi	r3,r7,255
     9cc:	01800804 	movi	r6,32
     9d0:	30c5c83a 	sub	r2,r6,r3
     9d4:	017fffc4 	movi	r5,-1
     9d8:	2884d83a 	srl	r2,r5,r2
     9dc:	20801215 	stw	r2,72(r4)
     9e0:	20801117 	ldw	r2,68(r4)
     9e4:	1887883a 	add	r3,r3,r2
     9e8:	20c01315 	stw	r3,76(r4)
     9ec:	4004d63a 	srli	r2,r8,24
     9f0:	308dc83a 	sub	r6,r6,r2
     9f4:	298ad83a 	srl	r5,r5,r6
     9f8:	21401415 	stw	r5,80(r4)
     9fc:	01400034 	movhi	r5,0
     a00:	295bbe04 	addi	r5,r5,28408
     a04:	00023640 	call	2364 <alt_dev_llist_insert>
}
     a08:	dfc00217 	ldw	ra,8(sp)
     a0c:	dc400117 	ldw	r17,4(sp)
     a10:	dc000017 	ldw	r16,0(sp)
     a14:	dec00304 	addi	sp,sp,12
     a18:	f800283a 	ret

00000a1c <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     a1c:	deffff04 	addi	sp,sp,-4
     a20:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     a24:	21000017 	ldw	r4,0(r4)
     a28:	21000a04 	addi	r4,r4,40
     a2c:	0000cec0 	call	cec <altera_avalon_jtag_uart_ioctl>
}
     a30:	dfc00017 	ldw	ra,0(sp)
     a34:	dec00104 	addi	sp,sp,4
     a38:	f800283a 	ret

00000a3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     a3c:	deffff04 	addi	sp,sp,-4
     a40:	dfc00015 	stw	ra,0(sp)
     a44:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     a48:	21000017 	ldw	r4,0(r4)
     a4c:	21000a04 	addi	r4,r4,40
     a50:	11400217 	ldw	r5,8(r2)
     a54:	0000ab40 	call	ab4 <altera_avalon_jtag_uart_close>
}
     a58:	dfc00017 	ldw	ra,0(sp)
     a5c:	dec00104 	addi	sp,sp,4
     a60:	f800283a 	ret

00000a64 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     a64:	deffff04 	addi	sp,sp,-4
     a68:	dfc00015 	stw	ra,0(sp)
     a6c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     a70:	21000017 	ldw	r4,0(r4)
     a74:	21000a04 	addi	r4,r4,40
     a78:	11c00217 	ldw	r7,8(r2)
     a7c:	0000ec80 	call	ec8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     a80:	dfc00017 	ldw	ra,0(sp)
     a84:	dec00104 	addi	sp,sp,4
     a88:	f800283a 	ret

00000a8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     a8c:	deffff04 	addi	sp,sp,-4
     a90:	dfc00015 	stw	ra,0(sp)
     a94:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     a98:	21000017 	ldw	r4,0(r4)
     a9c:	21000a04 	addi	r4,r4,40
     aa0:	11c00217 	ldw	r7,8(r2)
     aa4:	0000d600 	call	d60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     aa8:	dfc00017 	ldw	ra,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ab4:	21800c17 	ldw	r6,48(r4)
     ab8:	2950000c 	andi	r5,r5,16384
     abc:	280b003a 	cmpeq	r5,r5,zero
     ac0:	00000306 	br	ad0 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     ac4:	2800021e 	bne	r5,zero,ad0 <altera_avalon_jtag_uart_close+0x1c>
     ac8:	00bffd44 	movi	r2,-11
     acc:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ad0:	20800d17 	ldw	r2,52(r4)
     ad4:	11800326 	beq	r2,r6,ae4 <altera_avalon_jtag_uart_close+0x30>
     ad8:	20c00917 	ldw	r3,36(r4)
     adc:	20800117 	ldw	r2,4(r4)
     ae0:	18bff836 	bltu	r3,r2,ac4 <altera_avalon_jtag_uart_close+0x10>
     ae4:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     ae8:	f800283a 	ret

00000aec <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     aec:	20800017 	ldw	r2,0(r4)
     af0:	10c00104 	addi	r3,r2,4
     af4:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     af8:	01410004 	movi	r5,1024
     afc:	1144703a 	and	r2,r2,r5
     b00:	10000526 	beq	r2,zero,b18 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     b04:	20800817 	ldw	r2,32(r4)
     b08:	1144b03a 	or	r2,r2,r5
     b0c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     b10:	20000915 	stw	zero,36(r4)
     b14:	00000606 	br	b30 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     b18:	20c00917 	ldw	r3,36(r4)
     b1c:	00a00034 	movhi	r2,32768
     b20:	10bfff04 	addi	r2,r2,-4
     b24:	10c00236 	bltu	r2,r3,b30 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     b28:	18800044 	addi	r2,r3,1
     b2c:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     b30:	00800074 	movhi	r2,1
     b34:	10a30504 	addi	r2,r2,-29676
     b38:	10800017 	ldw	r2,0(r2)
     b3c:	f800283a 	ret

00000b40 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     b40:	defffe04 	addi	sp,sp,-8
     b44:	dfc00115 	stw	ra,4(sp)
     b48:	dc000015 	stw	r16,0(sp)
     b4c:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     b50:	00c00044 	movi	r3,1
     b54:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     b58:	20800017 	ldw	r2,0(r4)
     b5c:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     b60:	3009883a 	mov	r4,r6
     b64:	800b883a 	mov	r5,r16
     b68:	01800034 	movhi	r6,0
     b6c:	3182ee04 	addi	r6,r6,3000
     b70:	00025600 	call	2560 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     b74:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     b78:	81000204 	addi	r4,r16,8
     b7c:	00800074 	movhi	r2,1
     b80:	10a30504 	addi	r2,r2,-29676
     b84:	11400017 	ldw	r5,0(r2)
     b88:	01800034 	movhi	r6,0
     b8c:	3182bb04 	addi	r6,r6,2796
     b90:	800f883a 	mov	r7,r16
     b94:	00021e80 	call	21e8 <alt_alarm_start>
     b98:	1000030e 	bge	r2,zero,ba8 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     b9c:	00a00034 	movhi	r2,32768
     ba0:	10bfffc4 	addi	r2,r2,-1
     ba4:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     ba8:	dfc00117 	ldw	ra,4(sp)
     bac:	dc000017 	ldw	r16,0(sp)
     bb0:	dec00204 	addi	sp,sp,8
     bb4:	f800283a 	ret

00000bb8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     bb8:	22000017 	ldw	r8,0(r4)
     bbc:	03800104 	movi	r14,4
     bc0:	4399883a 	add	r12,r8,r14
     bc4:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     bc8:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     bcc:	5880c00c 	andi	r2,r11,768
     bd0:	10004526 	beq	r2,zero,ce8 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     bd4:	5880400c 	andi	r2,r11,256
     bd8:	10002126 	beq	r2,zero,c60 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     bdc:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     be0:	10800044 	addi	r2,r2,1
     be4:	1081ffcc 	andi	r2,r2,2047
     be8:	20c00b17 	ldw	r3,44(r4)
     bec:	10c01626 	beq	r2,r3,c48 <altera_avalon_jtag_uart_irq+0x90>
     bf0:	02a00014 	movui	r10,32768
     bf4:	02400e04 	movi	r9,56
     bf8:	01c00044 	movi	r7,1
     bfc:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     c00:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     c04:	2a84703a 	and	r2,r5,r10
     c08:	10000d26 	beq	r2,zero,c40 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     c0c:	20800a17 	ldw	r2,40(r4)
     c10:	1105883a 	add	r2,r2,r4
     c14:	1245883a 	add	r2,r2,r9
     c18:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c1c:	20800a17 	ldw	r2,40(r4)
     c20:	11c5883a 	add	r2,r2,r7
     c24:	1184703a 	and	r2,r2,r6
     c28:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c2c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     c30:	11c5883a 	add	r2,r2,r7
     c34:	1184703a 	and	r2,r2,r6
     c38:	20c00b17 	ldw	r3,44(r4)
     c3c:	10fff01e 	bne	r2,r3,c00 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     c40:	2b44703a 	and	r2,r5,r13
     c44:	10000626 	beq	r2,zero,c60 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     c48:	20800817 	ldw	r2,32(r4)
     c4c:	00ffff84 	movi	r3,-2
     c50:	10c4703a 	and	r2,r2,r3
     c54:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     c58:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c5c:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     c60:	5880800c 	andi	r2,r11,512
     c64:	103fd826 	beq	r2,zero,bc8 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     c68:	5b44703a 	and	r2,r11,r13
     c6c:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
     c70:	283fd526 	beq	r5,zero,bc8 <altera_avalon_jtag_uart_irq+0x10>
     c74:	20c00d17 	ldw	r3,52(r4)
     c78:	20800c17 	ldw	r2,48(r4)
     c7c:	18801126 	beq	r3,r2,cc4 <altera_avalon_jtag_uart_irq+0x10c>
     c80:	02420e04 	movi	r9,2104
     c84:	01800044 	movi	r6,1
     c88:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     c8c:	20800d17 	ldw	r2,52(r4)
     c90:	1105883a 	add	r2,r2,r4
     c94:	1245883a 	add	r2,r2,r9
     c98:	10800007 	ldb	r2,0(r2)
     c9c:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ca0:	20800d17 	ldw	r2,52(r4)
     ca4:	1185883a 	add	r2,r2,r6
     ca8:	11c4703a 	and	r2,r2,r7
     cac:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     cb0:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     cb4:	283fc426 	beq	r5,zero,bc8 <altera_avalon_jtag_uart_irq+0x10>
     cb8:	20c00d17 	ldw	r3,52(r4)
     cbc:	20800c17 	ldw	r2,48(r4)
     cc0:	18bff21e 	bne	r3,r2,c8c <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     cc4:	20c00817 	ldw	r3,32(r4)
     cc8:	00bfff44 	movi	r2,-3
     ccc:	1886703a 	and	r3,r3,r2
     cd0:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     cd4:	20800017 	ldw	r2,0(r4)
     cd8:	1385883a 	add	r2,r2,r14
     cdc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ce0:	60800037 	ldwio	r2,0(r12)
     ce4:	003fb806 	br	bc8 <altera_avalon_jtag_uart_irq+0x10>
     ce8:	f800283a 	ret

00000cec <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     cec:	009a8044 	movi	r2,27137
     cf0:	28800326 	beq	r5,r2,d00 <altera_avalon_jtag_uart_ioctl+0x14>
     cf4:	009a8084 	movi	r2,27138
     cf8:	2880171e 	bne	r5,r2,d58 <altera_avalon_jtag_uart_ioctl+0x6c>
     cfc:	00000d06 	br	d34 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     d00:	20c00117 	ldw	r3,4(r4)
     d04:	00a00034 	movhi	r2,32768
     d08:	10bfffc4 	addi	r2,r2,-1
     d0c:	18801226 	beq	r3,r2,d58 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     d10:	31800017 	ldw	r6,0(r6)
     d14:	30ffff84 	addi	r3,r6,-2
     d18:	10bfff44 	addi	r2,r2,-3
     d1c:	10c0022e 	bgeu	r2,r3,d28 <altera_avalon_jtag_uart_ioctl+0x3c>
     d20:	01a00034 	movhi	r6,32768
     d24:	31bfff84 	addi	r6,r6,-2
     d28:	21800115 	stw	r6,4(r4)
     d2c:	0005883a 	mov	r2,zero
     d30:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     d34:	20c00117 	ldw	r3,4(r4)
     d38:	00a00034 	movhi	r2,32768
     d3c:	10bfffc4 	addi	r2,r2,-1
     d40:	18800526 	beq	r3,r2,d58 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     d44:	20800917 	ldw	r2,36(r4)
     d48:	10c5803a 	cmpltu	r2,r2,r3
     d4c:	30800015 	stw	r2,0(r6)
     d50:	0005883a 	mov	r2,zero
     d54:	f800283a 	ret
     d58:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     d5c:	f800283a 	ret

00000d60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     d60:	defff604 	addi	sp,sp,-40
     d64:	dfc00915 	stw	ra,36(sp)
     d68:	df000815 	stw	fp,32(sp)
     d6c:	ddc00715 	stw	r23,28(sp)
     d70:	dd800615 	stw	r22,24(sp)
     d74:	dd400515 	stw	r21,20(sp)
     d78:	dd000415 	stw	r20,16(sp)
     d7c:	dcc00315 	stw	r19,12(sp)
     d80:	dc800215 	stw	r18,8(sp)
     d84:	dc400115 	stw	r17,4(sp)
     d88:	dc000015 	stw	r16,0(sp)
     d8c:	2025883a 	mov	r18,r4
     d90:	282f883a 	mov	r23,r5
     d94:	3027883a 	mov	r19,r6
     d98:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     d9c:	0180220e 	bge	zero,r6,e28 <altera_avalon_jtag_uart_read+0xc8>
     da0:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     da4:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
     da8:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
     dac:	b4400236 	bltu	r22,r17,db8 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
     db0:	b461c83a 	sub	r16,r22,r17
     db4:	00000206 	br	dc0 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     db8:	00820004 	movi	r2,2048
     dbc:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
     dc0:	80000d26 	beq	r16,zero,df8 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
     dc4:	9829883a 	mov	r20,r19
     dc8:	9c001d36 	bltu	r19,r16,e40 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     dcc:	91400e04 	addi	r5,r18,56
     dd0:	a809883a 	mov	r4,r21
     dd4:	2c4b883a 	add	r5,r5,r17
     dd8:	800d883a 	mov	r6,r16
     ddc:	0002ab40 	call	2ab4 <memcpy>
      ptr   += n;
     de0:	ac2b883a 	add	r21,r21,r16
      space -= n;
     de4:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     de8:	8445883a 	add	r2,r16,r17
     dec:	1081ffcc 	andi	r2,r2,2047
     df0:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
     df4:	04ffeb16 	blt	zero,r19,da4 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
     df8:	adc01c1e 	bne	r21,r23,e6c <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     dfc:	e090000c 	andi	r2,fp,16384
     e00:	10000d1e 	bne	r2,zero,e38 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     e04:	90800a17 	ldw	r2,40(r18)
     e08:	b080031e 	bne	r22,r2,e18 <altera_avalon_jtag_uart_read+0xb8>
     e0c:	90c00917 	ldw	r3,36(r18)
     e10:	90800117 	ldw	r2,4(r18)
     e14:	18bffb36 	bltu	r3,r2,e04 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     e18:	90800a17 	ldw	r2,40(r18)
     e1c:	b0800426 	beq	r22,r2,e30 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     e20:	04c0030e 	bge	zero,r19,e30 <altera_avalon_jtag_uart_read+0xd0>
     e24:	003fde06 	br	da0 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
     e28:	3890000c 	andi	r2,r7,16384
     e2c:	1000021e 	bne	r2,zero,e38 <altera_avalon_jtag_uart_read+0xd8>
     e30:	00bffec4 	movi	r2,-5
     e34:	00001806 	br	e98 <altera_avalon_jtag_uart_read+0x138>
     e38:	00bffd44 	movi	r2,-11
     e3c:	00001606 	br	e98 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     e40:	91400e04 	addi	r5,r18,56
     e44:	a809883a 	mov	r4,r21
     e48:	894b883a 	add	r5,r17,r5
     e4c:	980d883a 	mov	r6,r19
     e50:	0002ab40 	call	2ab4 <memcpy>
      ptr   += n;
     e54:	aceb883a 	add	r21,r21,r19
      space -= n;
     e58:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e5c:	a445883a 	add	r2,r20,r17
     e60:	1081ffcc 	andi	r2,r2,2047
     e64:	90800b15 	stw	r2,44(r18)
     e68:	003fe306 	br	df8 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     e6c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e70:	00bfff84 	movi	r2,-2
     e74:	2084703a 	and	r2,r4,r2
     e78:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     e7c:	90800817 	ldw	r2,32(r18)
     e80:	10800054 	ori	r2,r2,1
     e84:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     e88:	90c00017 	ldw	r3,0(r18)
     e8c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     e90:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
     e94:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
     e98:	dfc00917 	ldw	ra,36(sp)
     e9c:	df000817 	ldw	fp,32(sp)
     ea0:	ddc00717 	ldw	r23,28(sp)
     ea4:	dd800617 	ldw	r22,24(sp)
     ea8:	dd400517 	ldw	r21,20(sp)
     eac:	dd000417 	ldw	r20,16(sp)
     eb0:	dcc00317 	ldw	r19,12(sp)
     eb4:	dc800217 	ldw	r18,8(sp)
     eb8:	dc400117 	ldw	r17,4(sp)
     ebc:	dc000017 	ldw	r16,0(sp)
     ec0:	dec00a04 	addi	sp,sp,40
     ec4:	f800283a 	ret

00000ec8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     ec8:	defff804 	addi	sp,sp,-32
     ecc:	dfc00715 	stw	ra,28(sp)
     ed0:	dd800615 	stw	r22,24(sp)
     ed4:	dd400515 	stw	r21,20(sp)
     ed8:	dd000415 	stw	r20,16(sp)
     edc:	dcc00315 	stw	r19,12(sp)
     ee0:	dc800215 	stw	r18,8(sp)
     ee4:	dc400115 	stw	r17,4(sp)
     ee8:	dc000015 	stw	r16,0(sp)
     eec:	2021883a 	mov	r16,r4
     ef0:	282d883a 	mov	r22,r5
     ef4:	3011883a 	mov	r8,r6
     ef8:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     efc:	01800616 	blt	zero,r6,f18 <altera_avalon_jtag_uart_write+0x50>
     f00:	2829883a 	mov	r20,r5
     f04:	00002106 	br	f8c <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
     f08:	a585c83a 	sub	r2,r20,r22
     f0c:	00004306 	br	101c <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
     f10:	00bffd44 	movi	r2,-11
     f14:	00004106 	br	101c <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f18:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     f1c:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
     f20:	81400d17 	ldw	r5,52(r16)

      if (in < out)
     f24:	9140032e 	bgeu	r18,r5,f34 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     f28:	2c85c83a 	sub	r2,r5,r18
     f2c:	11bfffc4 	addi	r6,r2,-1
     f30:	00000606 	br	f4c <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
     f34:	28000326 	beq	r5,zero,f44 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     f38:	00820004 	movi	r2,2048
     f3c:	148dc83a 	sub	r6,r2,r18
     f40:	00000206 	br	f4c <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     f44:	0081ffc4 	movi	r2,2047
     f48:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
     f4c:	30002626 	beq	r6,zero,fe8 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
     f50:	4027883a 	mov	r19,r8
     f54:	3023883a 	mov	r17,r6
     f58:	4180012e 	bgeu	r8,r6,f60 <altera_avalon_jtag_uart_write+0x98>
     f5c:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
     f60:	81020e04 	addi	r4,r16,2104
     f64:	2489883a 	add	r4,r4,r18
     f68:	a00b883a 	mov	r5,r20
     f6c:	880d883a 	mov	r6,r17
     f70:	0002ab40 	call	2ab4 <memcpy>
      ptr   += n;
     f74:	a469883a 	add	r20,r20,r17
      count -= n;
     f78:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f7c:	9445883a 	add	r2,r18,r17
     f80:	1081ffcc 	andi	r2,r2,2047
     f84:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f88:	023fe416 	blt	zero,r8,f1c <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     f8c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f90:	00bfff84 	movi	r2,-2
     f94:	2084703a 	and	r2,r4,r2
     f98:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     f9c:	80800817 	ldw	r2,32(r16)
     fa0:	10800094 	ori	r2,r2,2
     fa4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     fa8:	80c00017 	ldw	r3,0(r16)
     fac:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     fb0:	2001703a 	wrctl	status,r4
     fb4:	00000706 	br	fd4 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     fb8:	80800d17 	ldw	r2,52(r16)
     fbc:	1140031e 	bne	r2,r5,fcc <altera_avalon_jtag_uart_write+0x104>
     fc0:	80c00917 	ldw	r3,36(r16)
     fc4:	80800117 	ldw	r2,4(r16)
     fc8:	18bffb36 	bltu	r3,r2,fb8 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
     fcc:	80800d17 	ldw	r2,52(r16)
     fd0:	117fed1e 	bne	r2,r5,f88 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     fd4:	b53fcc1e 	bne	r22,r20,f08 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
     fd8:	a890000c 	andi	r2,r21,16384
     fdc:	103fcc1e 	bne	r2,zero,f10 <altera_avalon_jtag_uart_write+0x48>
     fe0:	00bffec4 	movi	r2,-5
     fe4:	00000d06 	br	101c <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     fe8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     fec:	00bfff84 	movi	r2,-2
     ff0:	2084703a 	and	r2,r4,r2
     ff4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     ff8:	80800817 	ldw	r2,32(r16)
     ffc:	10800094 	ori	r2,r2,2
    1000:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1004:	80c00017 	ldw	r3,0(r16)
    1008:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    100c:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    1010:	a890000c 	andi	r2,r21,16384
    1014:	103fe826 	beq	r2,zero,fb8 <altera_avalon_jtag_uart_write+0xf0>
    1018:	003fee06 	br	fd4 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    101c:	dfc00717 	ldw	ra,28(sp)
    1020:	dd800617 	ldw	r22,24(sp)
    1024:	dd400517 	ldw	r21,20(sp)
    1028:	dd000417 	ldw	r20,16(sp)
    102c:	dcc00317 	ldw	r19,12(sp)
    1030:	dc800217 	ldw	r18,8(sp)
    1034:	dc400117 	ldw	r17,4(sp)
    1038:	dc000017 	ldw	r16,0(sp)
    103c:	dec00804 	addi	sp,sp,32
    1040:	f800283a 	ret

00001044 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1044:	deffff04 	addi	sp,sp,-4
    1048:	dfc00015 	stw	ra,0(sp)
    104c:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1050:	00c00074 	movhi	r3,1
    1054:	18e30504 	addi	r3,r3,-29676
    1058:	18800017 	ldw	r2,0(r3)
    105c:	1000011e 	bne	r2,zero,1064 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    1060:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1064:	008001c4 	movi	r2,7
    1068:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    106c:	3009883a 	mov	r4,r6
    1070:	01800034 	movhi	r6,0
    1074:	31842204 	addi	r6,r6,4232
    1078:	00025600 	call	2560 <alt_irq_register>
#endif  
}
    107c:	dfc00017 	ldw	ra,0(sp)
    1080:	dec00104 	addi	sp,sp,4
    1084:	f800283a 	ret

00001088 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1088:	defffe04 	addi	sp,sp,-8
    108c:	dfc00115 	stw	ra,4(sp)
    1090:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1094:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1098:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    109c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    10a0:	00bfff84 	movi	r2,-2
    10a4:	8084703a 	and	r2,r16,r2
    10a8:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    10ac:	00027f00 	call	27f0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10b0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    10b4:	dfc00117 	ldw	ra,4(sp)
    10b8:	dc000017 	ldw	r16,0(sp)
    10bc:	dec00204 	addi	sp,sp,8
    10c0:	f800283a 	ret

000010c4 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    10c4:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    10c8:	1004c03a 	cmpne	r2,r2,zero
    10cc:	f800283a 	ret

000010d0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    10d0:	2080004c 	andi	r2,r4,1
    10d4:	f800283a 	ret

000010d8 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    10d8:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    10dc:	1004c03a 	cmpne	r2,r2,zero
    10e0:	f800283a 	ret

000010e4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    10e4:	2004d43a 	srli	r2,r4,16
    10e8:	f800283a 	ret

000010ec <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    10ec:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    10f0:	1004c03a 	cmpne	r2,r2,zero
    10f4:	f800283a 	ret

000010f8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    10f8:	20803fcc 	andi	r2,r4,255
    10fc:	f800283a 	ret

00001100 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1100:	deffff04 	addi	sp,sp,-4
    1104:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1108:	01400034 	movhi	r5,0
    110c:	295bbe04 	addi	r5,r5,28408
    1110:	00023d40 	call	23d4 <alt_find_dev>

  return dev;
}
    1114:	dfc00017 	ldw	ra,0(sp)
    1118:	dec00104 	addi	sp,sp,4
    111c:	f800283a 	ret

00001120 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1120:	defffe04 	addi	sp,sp,-8
    1124:	dfc00115 	stw	ra,4(sp)
    1128:	dc000015 	stw	r16,0(sp)
    112c:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1130:	81000037 	ldwio	r4,0(r16)
    1134:	00010e40 	call	10e4 <read_num_bytes_available>
    1138:	10bfffcc 	andi	r2,r2,65535
    113c:	103ffc1e 	bne	r2,zero,1130 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1150:	defffd04 	addi	sp,sp,-12
    1154:	dfc00215 	stw	ra,8(sp)
    1158:	dc400115 	stw	r17,4(sp)
    115c:	dc000015 	stw	r16,0(sp)
    1160:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1164:	20800a17 	ldw	r2,40(r4)
    1168:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    116c:	8009883a 	mov	r4,r16
    1170:	00010ec0 	call	10ec <read_data_valid>
    1174:	10803fcc 	andi	r2,r2,255
    1178:	1000021e 	bne	r2,zero,1184 <alt_up_ps2_read_data_byte+0x34>
    117c:	00bfffc4 	movi	r2,-1
    1180:	00000406 	br	1194 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    1184:	8009883a 	mov	r4,r16
    1188:	00010f80 	call	10f8 <read_data_byte>
    118c:	88800005 	stb	r2,0(r17)
    1190:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    1194:	dfc00217 	ldw	ra,8(sp)
    1198:	dc400117 	ldw	r17,4(sp)
    119c:	dc000017 	ldw	r16,0(sp)
    11a0:	dec00304 	addi	sp,sp,12
    11a4:	f800283a 	ret

000011a8 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    11a8:	defffb04 	addi	sp,sp,-20
    11ac:	dfc00415 	stw	ra,16(sp)
    11b0:	dcc00315 	stw	r19,12(sp)
    11b4:	dc800215 	stw	r18,8(sp)
    11b8:	dc400115 	stw	r17,4(sp)
    11bc:	dc000015 	stw	r16,0(sp)
    11c0:	2025883a 	mov	r18,r4
    11c4:	2827883a 	mov	r19,r5
    11c8:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    11cc:	90800a17 	ldw	r2,40(r18)
    11d0:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    11d4:	8009883a 	mov	r4,r16
    11d8:	00010ec0 	call	10ec <read_data_valid>
    11dc:	10803fcc 	andi	r2,r2,255
    11e0:	10000526 	beq	r2,zero,11f8 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    11e4:	8009883a 	mov	r4,r16
    11e8:	00010f80 	call	10f8 <read_data_byte>
    11ec:	98800005 	stb	r2,0(r19)
    11f0:	0005883a 	mov	r2,zero
    11f4:	00000506 	br	120c <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    11f8:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    11fc:	90800c17 	ldw	r2,48(r18)
    1200:	103ff226 	beq	r2,zero,11cc <alt_up_ps2_read_data_byte_timeout+0x24>
    1204:	147ff12e 	bgeu	r2,r17,11cc <alt_up_ps2_read_data_byte_timeout+0x24>
    1208:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    120c:	dfc00417 	ldw	ra,16(sp)
    1210:	dcc00317 	ldw	r19,12(sp)
    1214:	dc800217 	ldw	r18,8(sp)
    1218:	dc400117 	ldw	r17,4(sp)
    121c:	dc000017 	ldw	r16,0(sp)
    1220:	dec00504 	addi	sp,sp,20
    1224:	f800283a 	ret

00001228 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1228:	deffff04 	addi	sp,sp,-4
    122c:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1230:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1234:	0180010e 	bge	zero,r6,123c <alt_up_ps2_read_fd+0x14>
    1238:	003fff06 	br	1238 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    123c:	00011a80 	call	11a8 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1240:	1005003a 	cmpeq	r2,r2,zero
    1244:	dfc00017 	ldw	ra,0(sp)
    1248:	dec00104 	addi	sp,sp,4
    124c:	f800283a 	ret

00001250 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1250:	defffc04 	addi	sp,sp,-16
    1254:	dfc00315 	stw	ra,12(sp)
    1258:	dc400215 	stw	r17,8(sp)
    125c:	dc000115 	stw	r16,4(sp)
    1260:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    1264:	d8000005 	stb	zero,0(sp)
    1268:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    126c:	8009883a 	mov	r4,r16
    1270:	d80b883a 	mov	r5,sp
    1274:	00011a80 	call	11a8 <alt_up_ps2_read_data_byte_timeout>
    1278:	1007883a 	mov	r3,r2
		if ( status == 0)
    127c:	10803fcc 	andi	r2,r2,255
    1280:	1000041e 	bne	r2,zero,1294 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    1284:	d8800003 	ldbu	r2,0(sp)
    1288:	147ff81e 	bne	r2,r17,126c <alt_up_ps2_wait_for_ack+0x1c>
    128c:	0005883a 	mov	r2,zero
    1290:	00000106 	br	1298 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    1294:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    1298:	dfc00317 	ldw	ra,12(sp)
    129c:	dc400217 	ldw	r17,8(sp)
    12a0:	dc000117 	ldw	r16,4(sp)
    12a4:	dec00404 	addi	sp,sp,16
    12a8:	f800283a 	ret

000012ac <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    12ac:	deffff04 	addi	sp,sp,-4
    12b0:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    12b4:	20800a17 	ldw	r2,40(r4)
    12b8:	29403fcc 	andi	r5,r5,255
    12bc:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    12c0:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    12c4:	11000137 	ldwio	r4,4(r2)
    12c8:	00010d80 	call	10d8 <read_CE_bit>
    12cc:	10803fcc 	andi	r2,r2,255
    12d0:	10000226 	beq	r2,zero,12dc <alt_up_ps2_write_data_byte+0x30>
    12d4:	00bffec4 	movi	r2,-5
    12d8:	00000106 	br	12e0 <alt_up_ps2_write_data_byte+0x34>
    12dc:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    12e0:	dfc00017 	ldw	ra,0(sp)
    12e4:	dec00104 	addi	sp,sp,4
    12e8:	f800283a 	ret

000012ec <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    12ec:	defffb04 	addi	sp,sp,-20
    12f0:	dfc00415 	stw	ra,16(sp)
    12f4:	dcc00315 	stw	r19,12(sp)
    12f8:	dc800215 	stw	r18,8(sp)
    12fc:	dc400115 	stw	r17,4(sp)
    1300:	dc000015 	stw	r16,0(sp)
    1304:	2827883a 	mov	r19,r5
    1308:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    130c:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1310:	01800216 	blt	zero,r6,131c <alt_up_ps2_write_fd+0x30>
    1314:	0021883a 	mov	r16,zero
    1318:	00000806 	br	133c <alt_up_ps2_write_fd+0x50>
    131c:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1320:	9c05883a 	add	r2,r19,r16
    1324:	8809883a 	mov	r4,r17
    1328:	11400003 	ldbu	r5,0(r2)
    132c:	00012ac0 	call	12ac <alt_up_ps2_write_data_byte>
		if (status!=0)
    1330:	1000021e 	bne	r2,zero,133c <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    1334:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1338:	943ff91e 	bne	r18,r16,1320 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    133c:	8005883a 	mov	r2,r16
    1340:	dfc00417 	ldw	ra,16(sp)
    1344:	dcc00317 	ldw	r19,12(sp)
    1348:	dc800217 	ldw	r18,8(sp)
    134c:	dc400117 	ldw	r17,4(sp)
    1350:	dc000017 	ldw	r16,0(sp)
    1354:	dec00504 	addi	sp,sp,20
    1358:	f800283a 	ret

0000135c <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    135c:	defffe04 	addi	sp,sp,-8
    1360:	dfc00115 	stw	ra,4(sp)
    1364:	dc000015 	stw	r16,0(sp)
    1368:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    136c:	29403fcc 	andi	r5,r5,255
    1370:	00012ac0 	call	12ac <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    1374:	1000021e 	bne	r2,zero,1380 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1378:	8009883a 	mov	r4,r16
    137c:	00012500 	call	1250 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    1380:	dfc00117 	ldw	ra,4(sp)
    1384:	dc000017 	ldw	r16,0(sp)
    1388:	dec00204 	addi	sp,sp,8
    138c:	f800283a 	ret

00001390 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1390:	defffd04 	addi	sp,sp,-12
    1394:	dfc00215 	stw	ra,8(sp)
    1398:	dc000115 	stw	r16,4(sp)
    139c:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    13a0:	01403fc4 	movi	r5,255
    13a4:	000135c0 	call	135c <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    13a8:	1000171e 	bne	r2,zero,1408 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    13ac:	8009883a 	mov	r4,r16
    13b0:	d80b883a 	mov	r5,sp
    13b4:	00011a80 	call	11a8 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    13b8:	1000131e 	bne	r2,zero,1408 <alt_up_ps2_init+0x78>
    13bc:	d8c00003 	ldbu	r3,0(sp)
    13c0:	00802a84 	movi	r2,170
    13c4:	1880101e 	bne	r3,r2,1408 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    13c8:	8009883a 	mov	r4,r16
    13cc:	d80b883a 	mov	r5,sp
    13d0:	00011a80 	call	11a8 <alt_up_ps2_read_data_byte_timeout>
    13d4:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    13d8:	00bfe304 	movi	r2,-116
    13dc:	1880031e 	bne	r3,r2,13ec <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    13e0:	00800044 	movi	r2,1
    13e4:	80800d15 	stw	r2,52(r16)
    13e8:	00000706 	br	1408 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    13ec:	1800061e 	bne	r3,zero,1408 <alt_up_ps2_init+0x78>
    13f0:	d8800003 	ldbu	r2,0(sp)
    13f4:	1000041e 	bne	r2,zero,1408 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    13f8:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    13fc:	8009883a 	mov	r4,r16
    1400:	01403d04 	movi	r5,244
    1404:	00012ac0 	call	12ac <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1408:	dfc00217 	ldw	ra,8(sp)
    140c:	dc000117 	ldw	r16,4(sp)
    1410:	dec00304 	addi	sp,sp,12
    1414:	f800283a 	ret

00001418 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1418:	20800a17 	ldw	r2,40(r4)
    141c:	10800104 	addi	r2,r2,4
    1420:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1424:	013fff84 	movi	r4,-2
    1428:	1906703a 	and	r3,r3,r4
    142c:	10c00035 	stwio	r3,0(r2)
}
    1430:	f800283a 	ret

00001434 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1434:	20c00a17 	ldw	r3,40(r4)
    1438:	18c00104 	addi	r3,r3,4
    143c:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1440:	10800054 	ori	r2,r2,1
    1444:	18800035 	stwio	r2,0(r3)
}
    1448:	f800283a 	ret

0000144c <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    144c:	200495ba 	slli	r2,r4,22
}
    1450:	1005d7fa 	srai	r2,r2,31
    1454:	f800283a 	ret

00001458 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1458:	deffff04 	addi	sp,sp,-4
    145c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1460:	01400034 	movhi	r5,0
    1464:	295bbe04 	addi	r5,r5,28408
    1468:	00023d40 	call	23d4 <alt_find_dev>

  return dev;
}
    146c:	dfc00017 	ldw	ra,0(sp)
    1470:	dec00104 	addi	sp,sp,4
    1474:	f800283a 	ret

00001478 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1478:	defffd04 	addi	sp,sp,-12
    147c:	dfc00215 	stw	ra,8(sp)
    1480:	dc400115 	stw	r17,4(sp)
    1484:	dc000015 	stw	r16,0(sp)
    1488:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    148c:	20800a17 	ldw	r2,40(r4)
    1490:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1494:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1498:	8009883a 	mov	r4,r16
    149c:	000144c0 	call	144c <alt_up_rs232_check_parity>
    14a0:	88800005 	stb	r2,0(r17)
    14a4:	8420000c 	andi	r16,r16,32768
    14a8:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    14ac:	80bfffc4 	addi	r2,r16,-1
    14b0:	dfc00217 	ldw	ra,8(sp)
    14b4:	dc400117 	ldw	r17,4(sp)
    14b8:	dc000017 	ldw	r16,0(sp)
    14bc:	dec00304 	addi	sp,sp,12
    14c0:	f800283a 	ret

000014c4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    14c4:	defff904 	addi	sp,sp,-28
    14c8:	dfc00615 	stw	ra,24(sp)
    14cc:	dd000515 	stw	r20,20(sp)
    14d0:	dcc00415 	stw	r19,16(sp)
    14d4:	dc800315 	stw	r18,12(sp)
    14d8:	dc400215 	stw	r17,8(sp)
    14dc:	dc000115 	stw	r16,4(sp)
    14e0:	2821883a 	mov	r16,r5
    14e4:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    14e8:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    14ec:	3000021e 	bne	r6,zero,14f8 <alt_up_rs232_read_fd+0x34>
    14f0:	0025883a 	mov	r18,zero
    14f4:	00000a06 	br	1520 <alt_up_rs232_read_fd+0x5c>
    14f8:	0025883a 	mov	r18,zero
    14fc:	04400044 	movi	r17,1
    1500:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1504:	8461883a 	add	r16,r16,r17
    1508:	9809883a 	mov	r4,r19
    150c:	d80d883a 	mov	r6,sp
    1510:	00014780 	call	1478 <alt_up_rs232_read_data>
    1514:	1000021e 	bne	r2,zero,1520 <alt_up_rs232_read_fd+0x5c>
			count++;
    1518:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    151c:	a4bff81e 	bne	r20,r18,1500 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1520:	9005883a 	mov	r2,r18
    1524:	dfc00617 	ldw	ra,24(sp)
    1528:	dd000517 	ldw	r20,20(sp)
    152c:	dcc00417 	ldw	r19,16(sp)
    1530:	dc800317 	ldw	r18,12(sp)
    1534:	dc400217 	ldw	r17,8(sp)
    1538:	dc000117 	ldw	r16,4(sp)
    153c:	dec00704 	addi	sp,sp,28
    1540:	f800283a 	ret

00001544 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1544:	20800a17 	ldw	r2,40(r4)
    1548:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    154c:	1004d43a 	srli	r2,r2,16
    1550:	f800283a 	ret

00001554 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1554:	20800a17 	ldw	r2,40(r4)
    1558:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    155c:	29403fcc 	andi	r5,r5,255
    1560:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1564:	0005883a 	mov	r2,zero
    1568:	f800283a 	ret

0000156c <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    156c:	defffb04 	addi	sp,sp,-20
    1570:	dfc00415 	stw	ra,16(sp)
    1574:	dcc00315 	stw	r19,12(sp)
    1578:	dc800215 	stw	r18,8(sp)
    157c:	dc400115 	stw	r17,4(sp)
    1580:	dc000015 	stw	r16,0(sp)
    1584:	2827883a 	mov	r19,r5
    1588:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    158c:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    1590:	3000021e 	bne	r6,zero,159c <alt_up_rs232_write_fd+0x30>
    1594:	0021883a 	mov	r16,zero
    1598:	00000806 	br	15bc <alt_up_rs232_write_fd+0x50>
    159c:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    15a0:	84c5883a 	add	r2,r16,r19
    15a4:	8809883a 	mov	r4,r17
    15a8:	11400003 	ldbu	r5,0(r2)
    15ac:	00015540 	call	1554 <alt_up_rs232_write_data>
    15b0:	1000021e 	bne	r2,zero,15bc <alt_up_rs232_write_fd+0x50>
		{
			count++;
    15b4:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    15b8:	943ff91e 	bne	r18,r16,15a0 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    15bc:	8005883a 	mov	r2,r16
    15c0:	dfc00417 	ldw	ra,16(sp)
    15c4:	dcc00317 	ldw	r19,12(sp)
    15c8:	dc800217 	ldw	r18,8(sp)
    15cc:	dc400117 	ldw	r17,4(sp)
    15d0:	dc000017 	ldw	r16,0(sp)
    15d4:	dec00504 	addi	sp,sp,20
    15d8:	f800283a 	ret

000015dc <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    15dc:	20800a17 	ldw	r2,40(r4)
    15e0:	10800104 	addi	r2,r2,4
    15e4:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    15e8:	013fff84 	movi	r4,-2
    15ec:	1906703a 	and	r3,r3,r4
    15f0:	10c00035 	stwio	r3,0(r2)
}
    15f4:	f800283a 	ret

000015f8 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    15f8:	20c00a17 	ldw	r3,40(r4)
    15fc:	18c00104 	addi	r3,r3,4
    1600:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1604:	10800054 	ori	r2,r2,1
    1608:	18800035 	stwio	r2,0(r3)
}
    160c:	f800283a 	ret

00001610 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1610:	20800a17 	ldw	r2,40(r4)
    1614:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1618:	10bfffcc 	andi	r2,r2,65535
    161c:	f800283a 	ret

00001620 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1620:	20800c17 	ldw	r2,48(r4)
    1624:	30801c2e 	bgeu	r6,r2,1698 <alt_up_char_buffer_string+0x78>
    1628:	20800d17 	ldw	r2,52(r4)
    162c:	38801a2e 	bgeu	r7,r2,1698 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1630:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    1634:	28c00003 	ldbu	r3,0(r5)
    1638:	18803fcc 	andi	r2,r3,255
    163c:	1080201c 	xori	r2,r2,128
    1640:	10bfe004 	addi	r2,r2,-128
    1644:	10001626 	beq	r2,zero,16a0 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1648:	3a04983a 	sll	r2,r7,r8
    164c:	308f883a 	add	r7,r6,r2
    1650:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1654:	20800b17 	ldw	r2,44(r4)
    1658:	3885883a 	add	r2,r7,r2
    165c:	18c03fcc 	andi	r3,r3,255
    1660:	18c0201c 	xori	r3,r3,128
    1664:	18ffe004 	addi	r3,r3,-128
    1668:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    166c:	320d883a 	add	r6,r6,r8
    1670:	20800c17 	ldw	r2,48(r4)
    1674:	3080082e 	bgeu	r6,r2,1698 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    1678:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    167c:	28c00003 	ldbu	r3,0(r5)
    1680:	18803fcc 	andi	r2,r3,255
    1684:	1080201c 	xori	r2,r2,128
    1688:	10bfe004 	addi	r2,r2,-128
    168c:	10000426 	beq	r2,zero,16a0 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1690:	3a0f883a 	add	r7,r7,r8
    1694:	003fef06 	br	1654 <alt_up_char_buffer_string+0x34>
    1698:	00bfffc4 	movi	r2,-1
    169c:	f800283a 	ret
    16a0:	0005883a 	mov	r2,zero
	}
	return 0;
}
    16a4:	f800283a 	ret

000016a8 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    16a8:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    16ac:	20800c17 	ldw	r2,48(r4)
    16b0:	3080112e 	bgeu	r6,r2,16f8 <alt_up_char_buffer_draw+0x50>
    16b4:	20800d17 	ldw	r2,52(r4)
    16b8:	38800f2e 	bgeu	r7,r2,16f8 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    16bc:	20c00f17 	ldw	r3,60(r4)
    16c0:	30c6703a 	and	r3,r6,r3
    16c4:	20800e17 	ldw	r2,56(r4)
    16c8:	1886983a 	sll	r3,r3,r2
    16cc:	20801117 	ldw	r2,68(r4)
    16d0:	3884703a 	and	r2,r7,r2
    16d4:	21001017 	ldw	r4,64(r4)
    16d8:	1104983a 	sll	r2,r2,r4
    16dc:	1886b03a 	or	r3,r3,r2
    16e0:	40800b17 	ldw	r2,44(r8)
    16e4:	1887883a 	add	r3,r3,r2
    16e8:	28803fcc 	andi	r2,r5,255
    16ec:	18800025 	stbio	r2,0(r3)
    16f0:	0005883a 	mov	r2,zero
    16f4:	f800283a 	ret

	return 0;
    16f8:	00bfffc4 	movi	r2,-1
}
    16fc:	f800283a 	ret

00001700 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1700:	20c00a17 	ldw	r3,40(r4)
    1704:	00800044 	movi	r2,1
    1708:	188000a5 	stbio	r2,2(r3)
    170c:	20800a17 	ldw	r2,40(r4)
    1710:	10c00084 	addi	r3,r2,2
    1714:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1718:	18800023 	ldbuio	r2,0(r3)
    171c:	1104703a 	and	r2,r2,r4
    1720:	103ffd1e 	bne	r2,zero,1718 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    1724:	f800283a 	ret

00001728 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1728:	deffff04 	addi	sp,sp,-4
    172c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1730:	01400034 	movhi	r5,0
    1734:	295bbe04 	addi	r5,r5,28408
    1738:	00023d40 	call	23d4 <alt_find_dev>

  return dev;
}
    173c:	dfc00017 	ldw	ra,0(sp)
    1740:	dec00104 	addi	sp,sp,4
    1744:	f800283a 	ret

00001748 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1748:	defffe04 	addi	sp,sp,-8
    174c:	dfc00115 	stw	ra,4(sp)
    1750:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1754:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1758:	80800007 	ldb	r2,0(r16)
    175c:	10000a26 	beq	r2,zero,1788 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1760:	8009883a 	mov	r4,r16
    1764:	01400034 	movhi	r5,0
    1768:	29548804 	addi	r5,r5,21024
    176c:	0002d400 	call	2d40 <strcmp>
    1770:	1000021e 	bne	r2,zero,177c <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    1774:	80000005 	stb	zero,0(r16)
    1778:	00000306 	br	1788 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    177c:	84000044 	addi	r16,r16,1
    1780:	80800007 	ldb	r2,0(r16)
    1784:	103ff61e 	bne	r2,zero,1760 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    1788:	dfc00117 	ldw	ra,4(sp)
    178c:	dc000017 	ldw	r16,0(sp)
    1790:	dec00204 	addi	sp,sp,8
    1794:	f800283a 	ret

00001798 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    1798:	da000017 	ldw	r8,0(sp)
    179c:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    17a0:	1800051e 	bne	r3,zero,17b8 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    17a4:	29c5383a 	mul	r2,r5,r7
    17a8:	3085883a 	add	r2,r6,r2
    17ac:	1105883a 	add	r2,r2,r4
    17b0:	12000025 	stbio	r8,0(r2)
    17b4:	f800283a 	ret
	else if (mode == 1)
    17b8:	00800044 	movi	r2,1
    17bc:	1880061e 	bne	r3,r2,17d8 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    17c0:	29c5383a 	mul	r2,r5,r7
    17c4:	3085883a 	add	r2,r6,r2
    17c8:	1085883a 	add	r2,r2,r2
    17cc:	1105883a 	add	r2,r2,r4
    17d0:	1200002d 	sthio	r8,0(r2)
    17d4:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    17d8:	29c5383a 	mul	r2,r5,r7
    17dc:	1185883a 	add	r2,r2,r6
    17e0:	1085883a 	add	r2,r2,r2
    17e4:	1085883a 	add	r2,r2,r2
    17e8:	1105883a 	add	r2,r2,r4
    17ec:	12000035 	stwio	r8,0(r2)
    17f0:	f800283a 	ret

000017f4 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    17f4:	defff304 	addi	sp,sp,-52
    17f8:	dfc00c15 	stw	ra,48(sp)
    17fc:	df000b15 	stw	fp,44(sp)
    1800:	ddc00a15 	stw	r23,40(sp)
    1804:	dd800915 	stw	r22,36(sp)
    1808:	dd400815 	stw	r21,32(sp)
    180c:	dd000715 	stw	r20,28(sp)
    1810:	dcc00615 	stw	r19,24(sp)
    1814:	dc800515 	stw	r18,20(sp)
    1818:	dc400415 	stw	r17,16(sp)
    181c:	dc000315 	stw	r16,12(sp)
    1820:	3011883a 	mov	r8,r6
    1824:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    1828:	4987c83a 	sub	r3,r9,r6
    182c:	1800010e 	bge	r3,zero,1834 <alt_up_pixel_buffer_dma_draw_line+0x40>
    1830:	00c7c83a 	sub	r3,zero,r3
    1834:	3945c83a 	sub	r2,r7,r5
    1838:	1000010e 	bge	r2,zero,1840 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    183c:	0085c83a 	sub	r2,zero,r2
    1840:	10c4803a 	cmplt	r2,r2,r3
    1844:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    1848:	20c00e17 	ldw	r3,56(r4)
    184c:	00800044 	movi	r2,1
    1850:	1880021e 	bne	r3,r2,185c <alt_up_pixel_buffer_dma_draw_line+0x68>
    1854:	d8000215 	stw	zero,8(sp)
    1858:	00000306 	br	1868 <alt_up_pixel_buffer_dma_draw_line+0x74>
    185c:	18c00098 	cmpnei	r3,r3,2
    1860:	18c00044 	addi	r3,r3,1
    1864:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    1868:	20800d17 	ldw	r2,52(r4)
    186c:	1000061e 	bne	r2,zero,1888 <alt_up_pixel_buffer_dma_draw_line+0x94>
    1870:	20801317 	ldw	r2,76(r4)
    1874:	d8c00217 	ldw	r3,8(sp)
    1878:	10c5c83a 	sub	r2,r2,r3
    187c:	00c00044 	movi	r3,1
    1880:	18ae983a 	sll	r23,r3,r2
    1884:	00000106 	br	188c <alt_up_pixel_buffer_dma_draw_line+0x98>
    1888:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    188c:	d8c00f17 	ldw	r3,60(sp)
    1890:	00800044 	movi	r2,1
    1894:	1880021e 	bne	r3,r2,18a0 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    1898:	25800c17 	ldw	r22,48(r4)
    189c:	00000106 	br	18a4 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    18a0:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    18a4:	50000326 	beq	r10,zero,18b4 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    18a8:	400d883a 	mov	r6,r8
    18ac:	4827883a 	mov	r19,r9
    18b0:	00000406 	br	18c4 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    18b4:	280d883a 	mov	r6,r5
    18b8:	400b883a 	mov	r5,r8
    18bc:	3827883a 	mov	r19,r7
    18c0:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    18c4:	9980060e 	bge	r19,r6,18e0 <alt_up_pixel_buffer_dma_draw_line+0xec>
    18c8:	9805883a 	mov	r2,r19
    18cc:	3027883a 	mov	r19,r6
    18d0:	100d883a 	mov	r6,r2
    18d4:	3805883a 	mov	r2,r7
    18d8:	280f883a 	mov	r7,r5
    18dc:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    18e0:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    18e4:	3969c83a 	sub	r20,r7,r5
    18e8:	a000010e 	bge	r20,zero,18f0 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    18ec:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    18f0:	a804d7fa 	srli	r2,r21,31
    18f4:	1545883a 	add	r2,r2,r21
    18f8:	1005d07a 	srai	r2,r2,1
    18fc:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    1900:	29c0020e 	bge	r5,r7,190c <alt_up_pixel_buffer_dma_draw_line+0x118>
    1904:	07000044 	movi	fp,1
    1908:	00000106 	br	1910 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    190c:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    1910:	50000226 	beq	r10,zero,191c <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    1914:	9980030e 	bge	r19,r6,1924 <alt_up_pixel_buffer_dma_draw_line+0x130>
    1918:	00002506 	br	19b0 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    191c:	9980130e 	bge	r19,r6,196c <alt_up_pixel_buffer_dma_draw_line+0x178>
    1920:	00002306 	br	19b0 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1924:	3021883a 	mov	r16,r6
    1928:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    192c:	d8800e17 	ldw	r2,56(sp)
    1930:	d8800015 	stw	r2,0(sp)
    1934:	d8c00217 	ldw	r3,8(sp)
    1938:	d8c00115 	stw	r3,4(sp)
    193c:	b009883a 	mov	r4,r22
    1940:	b80b883a 	mov	r5,r23
    1944:	900d883a 	mov	r6,r18
    1948:	800f883a 	mov	r7,r16
    194c:	00017980 	call	1798 <helper_plot_pixel>
			error = error + deltay;
    1950:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1954:	0440020e 	bge	zero,r17,1960 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    1958:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    195c:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    1960:	84000044 	addi	r16,r16,1
    1964:	9c001216 	blt	r19,r16,19b0 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1968:	003ff006 	br	192c <alt_up_pixel_buffer_dma_draw_line+0x138>
    196c:	3021883a 	mov	r16,r6
    1970:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    1974:	d8800e17 	ldw	r2,56(sp)
    1978:	d8800015 	stw	r2,0(sp)
    197c:	d8c00217 	ldw	r3,8(sp)
    1980:	d8c00115 	stw	r3,4(sp)
    1984:	b009883a 	mov	r4,r22
    1988:	b80b883a 	mov	r5,r23
    198c:	800d883a 	mov	r6,r16
    1990:	900f883a 	mov	r7,r18
    1994:	00017980 	call	1798 <helper_plot_pixel>
			error = error + deltay;
    1998:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    199c:	0440020e 	bge	zero,r17,19a8 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    19a0:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    19a4:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    19a8:	84000044 	addi	r16,r16,1
    19ac:	9c3ff10e 	bge	r19,r16,1974 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    19b0:	dfc00c17 	ldw	ra,48(sp)
    19b4:	df000b17 	ldw	fp,44(sp)
    19b8:	ddc00a17 	ldw	r23,40(sp)
    19bc:	dd800917 	ldw	r22,36(sp)
    19c0:	dd400817 	ldw	r21,32(sp)
    19c4:	dd000717 	ldw	r20,28(sp)
    19c8:	dcc00617 	ldw	r19,24(sp)
    19cc:	dc800517 	ldw	r18,20(sp)
    19d0:	dc400417 	ldw	r17,16(sp)
    19d4:	dc000317 	ldw	r16,12(sp)
    19d8:	dec00d04 	addi	sp,sp,52
    19dc:	f800283a 	ret

000019e0 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    19e0:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    19e4:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    19e8:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    19ec:	3980022e 	bgeu	r7,r6,19f8 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    19f0:	3011883a 	mov	r8,r6
    19f4:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    19f8:	2a405d2e 	bgeu	r5,r9,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    19fc:	30805c2e 	bgeu	r6,r2,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    1a00:	40800136 	bltu	r8,r2,1a08 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    1a04:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1a08:	d8c00117 	ldw	r3,4(sp)
    1a0c:	00800044 	movi	r2,1
    1a10:	1880021e 	bne	r3,r2,1a1c <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1a14:	20c00c17 	ldw	r3,48(r4)
    1a18:	00000106 	br	1a20 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1a1c:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    1a20:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1a24:	20800d17 	ldw	r2,52(r4)
    1a28:	1000281e 	bne	r2,zero,1acc <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    1a2c:	22801317 	ldw	r10,76(r4)
    1a30:	3284983a 	sll	r2,r6,r10
    1a34:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1a38:	21000e17 	ldw	r4,56(r4)
    1a3c:	00800044 	movi	r2,1
    1a40:	2080091e 	bne	r4,r2,1a68 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    1a44:	41804a36 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1a48:	1013883a 	mov	r9,r2
    1a4c:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1a50:	1945883a 	add	r2,r3,r5
    1a54:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1a58:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1a5c:	324d883a 	add	r6,r6,r9
    1a60:	41804336 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1a64:	003ffa06 	br	1a50 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1a68:	00800084 	movi	r2,2
    1a6c:	2080021e 	bne	r4,r2,1a78 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    1a70:	4180032e 	bgeu	r8,r6,1a80 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    1a74:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1a78:	41800a2e 	bgeu	r8,r6,1aa4 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    1a7c:	f800283a 	ret
    1a80:	294b883a 	add	r5,r5,r5
    1a84:	02400044 	movi	r9,1
    1a88:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1a8c:	28c5883a 	add	r2,r5,r3
    1a90:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1a94:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1a98:	324d883a 	add	r6,r6,r9
    1a9c:	41803436 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1aa0:	003ffa06 	br	1a8c <alt_up_pixel_buffer_dma_draw_vline+0xac>
    1aa4:	2945883a 	add	r2,r5,r5
    1aa8:	108b883a 	add	r5,r2,r2
    1aac:	02400044 	movi	r9,1
    1ab0:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1ab4:	28c5883a 	add	r2,r5,r3
    1ab8:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1abc:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1ac0:	324d883a 	add	r6,r6,r9
    1ac4:	41802a36 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1ac8:	003ffa06 	br	1ab4 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1acc:	21000e17 	ldw	r4,56(r4)
    1ad0:	00800044 	movi	r2,1
    1ad4:	20800b1e 	bne	r4,r2,1b04 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1ad8:	41802536 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1adc:	4809883a 	mov	r4,r9
    1ae0:	3245383a 	mul	r2,r6,r9
    1ae4:	1885883a 	add	r2,r3,r2
    1ae8:	1145883a 	add	r2,r2,r5
    1aec:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1af0:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1af4:	30cd883a 	add	r6,r6,r3
    1af8:	1105883a 	add	r2,r2,r4
    1afc:	41801c36 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1b00:	003ffb06 	br	1af0 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1b04:	00800084 	movi	r2,2
    1b08:	20800c1e 	bne	r4,r2,1b3c <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1b0c:	41801836 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    1b10:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    1b14:	3105383a 	mul	r2,r6,r4
    1b18:	1887883a 	add	r3,r3,r2
    1b1c:	294b883a 	add	r5,r5,r5
    1b20:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1b24:	28c5883a 	add	r2,r5,r3
    1b28:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    1b2c:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1b30:	324d883a 	add	r6,r6,r9
    1b34:	41800e36 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1b38:	003ffa06 	br	1b24 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1b3c:	41800c36 	bltu	r8,r6,1b70 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    1b40:	4a45883a 	add	r2,r9,r9
    1b44:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    1b48:	3105383a 	mul	r2,r6,r4
    1b4c:	1887883a 	add	r3,r3,r2
    1b50:	2945883a 	add	r2,r5,r5
    1b54:	108b883a 	add	r5,r2,r2
    1b58:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1b5c:	28c5883a 	add	r2,r5,r3
    1b60:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    1b64:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1b68:	324d883a 	add	r6,r6,r9
    1b6c:	41bffb2e 	bgeu	r8,r6,1b5c <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    1b70:	f800283a 	ret

00001b74 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1b74:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1b78:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    1b7c:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    1b80:	3140022e 	bgeu	r6,r5,1b8c <alt_up_pixel_buffer_dma_draw_hline+0x18>
    1b84:	2813883a 	mov	r9,r5
    1b88:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    1b8c:	2a00552e 	bgeu	r5,r8,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1b90:	3880542e 	bgeu	r7,r2,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    1b94:	4a000136 	bltu	r9,r8,1b9c <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    1b98:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1b9c:	d8c00117 	ldw	r3,4(sp)
    1ba0:	00800044 	movi	r2,1
    1ba4:	1880021e 	bne	r3,r2,1bb0 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1ba8:	21800c17 	ldw	r6,48(r4)
    1bac:	00000106 	br	1bb4 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1bb0:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    1bb4:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1bb8:	20800d17 	ldw	r2,52(r4)
    1bbc:	1000231e 	bne	r2,zero,1c4c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    1bc0:	20801317 	ldw	r2,76(r4)
    1bc4:	3884983a 	sll	r2,r7,r2
    1bc8:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1bcc:	21000e17 	ldw	r4,56(r4)
    1bd0:	00800044 	movi	r2,1
    1bd4:	2080081e 	bne	r4,r2,1bf8 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    1bd8:	49404236 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1bdc:	3945883a 	add	r2,r7,r5
    1be0:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    1be4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    1be8:	290b883a 	add	r5,r5,r4
    1bec:	1105883a 	add	r2,r2,r4
    1bf0:	49403c36 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1bf4:	003ffb06 	br	1be4 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1bf8:	00800084 	movi	r2,2
    1bfc:	2080021e 	bne	r4,r2,1c08 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    1c00:	4940032e 	bgeu	r9,r5,1c10 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    1c04:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    1c08:	4940082e 	bgeu	r9,r5,1c2c <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    1c0c:	f800283a 	ret
    1c10:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    1c14:	2945883a 	add	r2,r5,r5
    1c18:	11c5883a 	add	r2,r2,r7
    1c1c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    1c20:	290b883a 	add	r5,r5,r4
    1c24:	49402f36 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1c28:	003ffa06 	br	1c14 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    1c2c:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    1c30:	2945883a 	add	r2,r5,r5
    1c34:	1085883a 	add	r2,r2,r2
    1c38:	11c5883a 	add	r2,r2,r7
    1c3c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    1c40:	290b883a 	add	r5,r5,r4
    1c44:	49402736 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1c48:	003ff906 	br	1c30 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1c4c:	21000e17 	ldw	r4,56(r4)
    1c50:	00800044 	movi	r2,1
    1c54:	20800a1e 	bne	r4,r2,1c80 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    1c58:	41c5383a 	mul	r2,r8,r7
    1c5c:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    1c60:	49402036 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1c64:	1145883a 	add	r2,r2,r5
    1c68:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    1c6c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1c70:	290b883a 	add	r5,r5,r4
    1c74:	1105883a 	add	r2,r2,r4
    1c78:	49401a36 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1c7c:	003ffb06 	br	1c6c <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1c80:	00800084 	movi	r2,2
    1c84:	20800b1e 	bne	r4,r2,1cb4 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    1c88:	4205883a 	add	r2,r8,r8
    1c8c:	3885383a 	mul	r2,r7,r2
    1c90:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    1c94:	49401336 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1c98:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    1c9c:	2945883a 	add	r2,r5,r5
    1ca0:	11c5883a 	add	r2,r2,r7
    1ca4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1ca8:	290b883a 	add	r5,r5,r4
    1cac:	49400d36 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1cb0:	003ffa06 	br	1c9c <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    1cb4:	4205883a 	add	r2,r8,r8
    1cb8:	1085883a 	add	r2,r2,r2
    1cbc:	3885383a 	mul	r2,r7,r2
    1cc0:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    1cc4:	49400736 	bltu	r9,r5,1ce4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1cc8:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    1ccc:	2945883a 	add	r2,r5,r5
    1cd0:	1085883a 	add	r2,r2,r2
    1cd4:	11c5883a 	add	r2,r2,r7
    1cd8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1cdc:	290b883a 	add	r5,r5,r4
    1ce0:	497ffa2e 	bgeu	r9,r5,1ccc <alt_up_pixel_buffer_dma_draw_hline+0x158>
    1ce4:	f800283a 	ret

00001ce8 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    1ce8:	defff604 	addi	sp,sp,-40
    1cec:	dfc00915 	stw	ra,36(sp)
    1cf0:	dd800815 	stw	r22,32(sp)
    1cf4:	dd400715 	stw	r21,28(sp)
    1cf8:	dd000615 	stw	r20,24(sp)
    1cfc:	dcc00515 	stw	r19,20(sp)
    1d00:	dc800415 	stw	r18,16(sp)
    1d04:	dc400315 	stw	r17,12(sp)
    1d08:	dc000215 	stw	r16,8(sp)
    1d0c:	2029883a 	mov	r20,r4
    1d10:	282d883a 	mov	r22,r5
    1d14:	302b883a 	mov	r21,r6
    1d18:	3825883a 	mov	r18,r7
    1d1c:	dcc00a17 	ldw	r19,40(sp)
    1d20:	dc000b17 	ldw	r16,44(sp)
    1d24:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    1d28:	dc000015 	stw	r16,0(sp)
    1d2c:	dc400115 	stw	r17,4(sp)
    1d30:	380d883a 	mov	r6,r7
    1d34:	a80f883a 	mov	r7,r21
    1d38:	0001b740 	call	1b74 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    1d3c:	dc000015 	stw	r16,0(sp)
    1d40:	dc400115 	stw	r17,4(sp)
    1d44:	a009883a 	mov	r4,r20
    1d48:	b00b883a 	mov	r5,r22
    1d4c:	900d883a 	mov	r6,r18
    1d50:	980f883a 	mov	r7,r19
    1d54:	0001b740 	call	1b74 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    1d58:	dc000015 	stw	r16,0(sp)
    1d5c:	dc400115 	stw	r17,4(sp)
    1d60:	a009883a 	mov	r4,r20
    1d64:	b00b883a 	mov	r5,r22
    1d68:	a80d883a 	mov	r6,r21
    1d6c:	980f883a 	mov	r7,r19
    1d70:	00019e00 	call	19e0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    1d74:	dc000015 	stw	r16,0(sp)
    1d78:	dc400115 	stw	r17,4(sp)
    1d7c:	a009883a 	mov	r4,r20
    1d80:	900b883a 	mov	r5,r18
    1d84:	a80d883a 	mov	r6,r21
    1d88:	980f883a 	mov	r7,r19
    1d8c:	00019e00 	call	19e0 <alt_up_pixel_buffer_dma_draw_vline>
}
    1d90:	dfc00917 	ldw	ra,36(sp)
    1d94:	dd800817 	ldw	r22,32(sp)
    1d98:	dd400717 	ldw	r21,28(sp)
    1d9c:	dd000617 	ldw	r20,24(sp)
    1da0:	dcc00517 	ldw	r19,20(sp)
    1da4:	dc800417 	ldw	r18,16(sp)
    1da8:	dc400317 	ldw	r17,12(sp)
    1dac:	dc000217 	ldw	r16,8(sp)
    1db0:	dec00a04 	addi	sp,sp,40
    1db4:	f800283a 	ret

00001db8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1db8:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1dbc:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    1dc0:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    1dc4:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    1dc8:	3940022e 	bgeu	r7,r5,1dd4 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    1dcc:	2811883a 	mov	r8,r5
    1dd0:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    1dd4:	5980032e 	bgeu	r11,r6,1de4 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    1dd8:	5805883a 	mov	r2,r11
    1ddc:	3017883a 	mov	r11,r6
    1de0:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    1de4:	2a80842e 	bgeu	r5,r10,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1de8:	30c0832e 	bgeu	r6,r3,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    1dec:	42800136 	bltu	r8,r10,1df4 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    1df0:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    1df4:	58c00136 	bltu	r11,r3,1dfc <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    1df8:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1dfc:	d8c00217 	ldw	r3,8(sp)
    1e00:	00800044 	movi	r2,1
    1e04:	1880021e 	bne	r3,r2,1e10 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    1e08:	20c00c17 	ldw	r3,48(r4)
    1e0c:	00000106 	br	1e14 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    1e10:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    1e14:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1e18:	20800d17 	ldw	r2,52(r4)
    1e1c:	1000391e 	bne	r2,zero,1f04 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    1e20:	22801317 	ldw	r10,76(r4)
    1e24:	3284983a 	sll	r2,r6,r10
    1e28:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1e2c:	21000e17 	ldw	r4,56(r4)
    1e30:	00800044 	movi	r2,1
    1e34:	2080101e 	bne	r4,r2,1e78 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    1e38:	59806f36 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1e3c:	00000a06 	br	1e68 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    1e40:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1e44:	00800044 	movi	r2,1
    1e48:	1887883a 	add	r3,r3,r2
    1e4c:	2089883a 	add	r4,r4,r2
    1e50:	40fffb2e 	bgeu	r8,r3,1e40 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1e54:	00800044 	movi	r2,1
    1e58:	308d883a 	add	r6,r6,r2
    1e5c:	59806636 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    1e60:	1284983a 	sll	r2,r2,r10
    1e64:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1e68:	417ffa36 	bltu	r8,r5,1e54 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    1e6c:	29c9883a 	add	r4,r5,r7
    1e70:	2807883a 	mov	r3,r5
    1e74:	003ff206 	br	1e40 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1e78:	00800084 	movi	r2,2
    1e7c:	2080021e 	bne	r4,r2,1e88 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    1e80:	59805d36 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1e84:	00000e06 	br	1ec0 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1e88:	59805b36 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1e8c:	00001b06 	br	1efc <alt_up_pixel_buffer_dma_draw_box+0x144>
    1e90:	2807883a 	mov	r3,r5
    1e94:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    1e98:	18c5883a 	add	r2,r3,r3
    1e9c:	11c5883a 	add	r2,r2,r7
    1ea0:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1ea4:	1907883a 	add	r3,r3,r4
    1ea8:	40fffb2e 	bgeu	r8,r3,1e98 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1eac:	00800044 	movi	r2,1
    1eb0:	308d883a 	add	r6,r6,r2
    1eb4:	59805036 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    1eb8:	1284983a 	sll	r2,r2,r10
    1ebc:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1ec0:	417ff32e 	bgeu	r8,r5,1e90 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    1ec4:	003ff906 	br	1eac <alt_up_pixel_buffer_dma_draw_box+0xf4>
    1ec8:	2807883a 	mov	r3,r5
    1ecc:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    1ed0:	18c5883a 	add	r2,r3,r3
    1ed4:	1085883a 	add	r2,r2,r2
    1ed8:	11c5883a 	add	r2,r2,r7
    1edc:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1ee0:	1907883a 	add	r3,r3,r4
    1ee4:	40fffa2e 	bgeu	r8,r3,1ed0 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1ee8:	00800044 	movi	r2,1
    1eec:	308d883a 	add	r6,r6,r2
    1ef0:	59804136 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    1ef4:	1284983a 	sll	r2,r2,r10
    1ef8:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1efc:	417ff22e 	bgeu	r8,r5,1ec8 <alt_up_pixel_buffer_dma_draw_box+0x110>
    1f00:	003ff906 	br	1ee8 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1f04:	21000e17 	ldw	r4,56(r4)
    1f08:	00800044 	movi	r2,1
    1f0c:	2080121e 	bne	r4,r2,1f58 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f10:	59803936 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
    1f14:	5019883a 	mov	r12,r10
    1f18:	3285383a 	mul	r2,r6,r10
    1f1c:	1885883a 	add	r2,r3,r2
    1f20:	114f883a 	add	r7,r2,r5
    1f24:	00000806 	br	1f48 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    1f28:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1f2c:	00800044 	movi	r2,1
    1f30:	1887883a 	add	r3,r3,r2
    1f34:	2089883a 	add	r4,r4,r2
    1f38:	40fffb2e 	bgeu	r8,r3,1f28 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f3c:	31800044 	addi	r6,r6,1
    1f40:	3b0f883a 	add	r7,r7,r12
    1f44:	59802c36 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    1f48:	417ffc36 	bltu	r8,r5,1f3c <alt_up_pixel_buffer_dma_draw_box+0x184>
    1f4c:	3809883a 	mov	r4,r7
    1f50:	2807883a 	mov	r3,r5
    1f54:	003ff406 	br	1f28 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1f58:	00800084 	movi	r2,2
    1f5c:	2080121e 	bne	r4,r2,1fa8 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f60:	59802536 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    1f64:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    1f68:	3285383a 	mul	r2,r6,r10
    1f6c:	1889883a 	add	r4,r3,r2
    1f70:	03000044 	movi	r12,1
    1f74:	00000a06 	br	1fa0 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    1f78:	2807883a 	mov	r3,r5
    1f7c:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    1f80:	18c5883a 	add	r2,r3,r3
    1f84:	1105883a 	add	r2,r2,r4
    1f88:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1f8c:	19c7883a 	add	r3,r3,r7
    1f90:	40fffb2e 	bgeu	r8,r3,1f80 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1f94:	330d883a 	add	r6,r6,r12
    1f98:	59801736 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    1f9c:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1fa0:	417ff52e 	bgeu	r8,r5,1f78 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    1fa4:	003ffb06 	br	1f94 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1fa8:	59801336 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    1fac:	5285883a 	add	r2,r10,r10
    1fb0:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    1fb4:	3285383a 	mul	r2,r6,r10
    1fb8:	1889883a 	add	r4,r3,r2
    1fbc:	03000044 	movi	r12,1
    1fc0:	00000b06 	br	1ff0 <alt_up_pixel_buffer_dma_draw_box+0x238>
    1fc4:	2807883a 	mov	r3,r5
    1fc8:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    1fcc:	18c5883a 	add	r2,r3,r3
    1fd0:	1085883a 	add	r2,r2,r2
    1fd4:	1105883a 	add	r2,r2,r4
    1fd8:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1fdc:	19c7883a 	add	r3,r3,r7
    1fe0:	40fffa2e 	bgeu	r8,r3,1fcc <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1fe4:	330d883a 	add	r6,r6,r12
    1fe8:	59800336 	bltu	r11,r6,1ff8 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    1fec:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    1ff0:	417ff42e 	bgeu	r8,r5,1fc4 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    1ff4:	003ffb06 	br	1fe4 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    1ff8:	f800283a 	ret

00001ffc <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1ffc:	00800044 	movi	r2,1
    2000:	2880021e 	bne	r5,r2,200c <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    2004:	21c00c17 	ldw	r7,48(r4)
    2008:	00000106 	br	2010 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    200c:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    2010:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2014:	20c00e17 	ldw	r3,56(r4)
    2018:	00800084 	movi	r2,2
    201c:	1880021e 	bne	r3,r2,2028 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2020:	294d883a 	add	r6,r5,r5
    2024:	00000206 	br	2030 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    2028:	2945883a 	add	r2,r5,r5
    202c:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    2030:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2034:	20800d17 	ldw	r2,52(r4)
    2038:	1000121e 	bne	r2,zero,2084 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    203c:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    2040:	48001a26 	beq	r9,zero,20ac <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2044:	0011883a 	mov	r8,zero
    2048:	3014c03a 	cmpne	r10,r6,zero
    204c:	00000b06 	br	207c <alt_up_pixel_buffer_dma_clear_screen+0x80>
    2050:	0007883a 	mov	r3,zero
    2054:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    2058:	19c5883a 	add	r2,r3,r7
    205c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    2060:	1947883a 	add	r3,r3,r5
    2064:	19bffc36 	bltu	r3,r6,2058 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    2068:	00800044 	movi	r2,1
    206c:	4091883a 	add	r8,r8,r2
    2070:	4a000e26 	beq	r9,r8,20ac <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    2074:	1104983a 	sll	r2,r2,r4
    2078:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    207c:	503ff41e 	bne	r10,zero,2050 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    2080:	003ff906 	br	2068 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    2084:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    2088:	20000826 	beq	r4,zero,20ac <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    208c:	0007883a 	mov	r3,zero
    2090:	0005883a 	mov	r2,zero
    2094:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    2098:	3885883a 	add	r2,r7,r2
    209c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    20a0:	1945883a 	add	r2,r3,r5
    20a4:	1007883a 	mov	r3,r2
    20a8:	113ffb36 	bltu	r2,r4,2098 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    20ac:	f800283a 	ret

000020b0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    20b0:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    20b4:	20c00a17 	ldw	r3,40(r4)
    20b8:	00800044 	movi	r2,1
    20bc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    20c0:	20800b17 	ldw	r2,44(r4)
    20c4:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    20c8:	21400b15 	stw	r5,44(r4)
	return 0;
}
    20cc:	0005883a 	mov	r2,zero
    20d0:	f800283a 	ret

000020d4 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    20d4:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    20d8:	22400f17 	ldw	r9,60(r4)
    20dc:	32402a2e 	bgeu	r6,r9,2188 <alt_up_pixel_buffer_dma_draw+0xb4>
    20e0:	20801017 	ldw	r2,64(r4)
    20e4:	3880282e 	bgeu	r7,r2,2188 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    20e8:	20800d17 	ldw	r2,52(r4)
    20ec:	10000a1e 	bne	r2,zero,2118 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    20f0:	21001217 	ldw	r4,72(r4)
    20f4:	3108703a 	and	r4,r6,r4
    20f8:	40801117 	ldw	r2,68(r8)
    20fc:	2088983a 	sll	r4,r4,r2
    2100:	40801417 	ldw	r2,80(r8)
    2104:	3884703a 	and	r2,r7,r2
    2108:	40c01317 	ldw	r3,76(r8)
    210c:	10c4983a 	sll	r2,r2,r3
    2110:	2086b03a 	or	r3,r4,r2
    2114:	00000806 	br	2138 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    2118:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    211c:	40c01217 	ldw	r3,72(r8)
    2120:	30c6703a 	and	r3,r6,r3
    2124:	40801417 	ldw	r2,80(r8)
    2128:	3884703a 	and	r2,r7,r2
    212c:	4885383a 	mul	r2,r9,r2
    2130:	10c5883a 	add	r2,r2,r3
    2134:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2138:	42400e17 	ldw	r9,56(r8)
    213c:	00800044 	movi	r2,1
    2140:	4880051e 	bne	r9,r2,2158 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2144:	40800c17 	ldw	r2,48(r8)
    2148:	1885883a 	add	r2,r3,r2
    214c:	11400025 	stbio	r5,0(r2)
    2150:	0005883a 	mov	r2,zero
    2154:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2158:	00800084 	movi	r2,2
    215c:	4880051e 	bne	r9,r2,2174 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2160:	40800c17 	ldw	r2,48(r8)
    2164:	1885883a 	add	r2,r3,r2
    2168:	1140002d 	sthio	r5,0(r2)
    216c:	0005883a 	mov	r2,zero
    2170:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2174:	40800c17 	ldw	r2,48(r8)
    2178:	1885883a 	add	r2,r3,r2
    217c:	11400035 	stwio	r5,0(r2)
    2180:	0005883a 	mov	r2,zero
    2184:	f800283a 	ret
    2188:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    218c:	f800283a 	ret

00002190 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    2190:	20800a17 	ldw	r2,40(r4)
    2194:	10800337 	ldwio	r2,12(r2)
}
    2198:	1080004c 	andi	r2,r2,1
    219c:	f800283a 	ret

000021a0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    21a0:	00c00104 	movi	r3,4
    21a4:	20800a17 	ldw	r2,40(r4)
    21a8:	10c5883a 	add	r2,r2,r3
    21ac:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    21b0:	20800a17 	ldw	r2,40(r4)
    21b4:	10c5883a 	add	r2,r2,r3
    21b8:	10800037 	ldwio	r2,0(r2)
    21bc:	20800c15 	stw	r2,48(r4)
	return 0;
}
    21c0:	0005883a 	mov	r2,zero
    21c4:	f800283a 	ret

000021c8 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    21c8:	deffff04 	addi	sp,sp,-4
    21cc:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    21d0:	01400034 	movhi	r5,0
    21d4:	295bbe04 	addi	r5,r5,28408
    21d8:	00023d40 	call	23d4 <alt_find_dev>

  return dev;
}
    21dc:	dfc00017 	ldw	ra,0(sp)
    21e0:	dec00104 	addi	sp,sp,4
    21e4:	f800283a 	ret

000021e8 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    21e8:	00800074 	movhi	r2,1
    21ec:	10a30504 	addi	r2,r2,-29676
    21f0:	10800017 	ldw	r2,0(r2)
    21f4:	1000021e 	bne	r2,zero,2200 <alt_alarm_start+0x18>
    21f8:	00bfde84 	movi	r2,-134
    21fc:	f800283a 	ret
  {
    if (alarm)
    2200:	2000021e 	bne	r4,zero,220c <alt_alarm_start+0x24>
    2204:	00bffa84 	movi	r2,-22
    2208:	f800283a 	ret
    {
      alarm->callback = callback;
    220c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2210:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2214:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2218:	00bfff84 	movi	r2,-2
    221c:	3884703a 	and	r2,r7,r2
    2220:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2224:	00800074 	movhi	r2,1
    2228:	10a30604 	addi	r2,r2,-29672
    222c:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2230:	01800044 	movi	r6,1
    2234:	1985883a 	add	r2,r3,r6
    2238:	2885883a 	add	r2,r5,r2
    223c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2240:	10c0022e 	bgeu	r2,r3,224c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    2244:	21800405 	stb	r6,16(r4)
    2248:	00000106 	br	2250 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    224c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2250:	00800034 	movhi	r2,0
    2254:	109bc304 	addi	r2,r2,28428
    2258:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    225c:	10c00017 	ldw	r3,0(r2)
    2260:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    2264:	10c00017 	ldw	r3,0(r2)
    2268:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    226c:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2270:	3801703a 	wrctl	status,r7
    2274:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    2278:	f800283a 	ret

0000227c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    227c:	defffd04 	addi	sp,sp,-12
    2280:	dfc00215 	stw	ra,8(sp)
    2284:	dc400115 	stw	r17,4(sp)
    2288:	dc000015 	stw	r16,0(sp)
    228c:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2290:	20001c16 	blt	r4,zero,2304 <close+0x88>
    2294:	20c00324 	muli	r3,r4,12
    2298:	00800034 	movhi	r2,0
    229c:	10995a04 	addi	r2,r2,25960
    22a0:	1889883a 	add	r4,r3,r2

  if (fd)
    22a4:	20001726 	beq	r4,zero,2304 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    22a8:	20800017 	ldw	r2,0(r4)
    22ac:	10800417 	ldw	r2,16(r2)
    22b0:	10002126 	beq	r2,zero,2338 <close+0xbc>
    22b4:	103ee83a 	callr	r2
    22b8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    22bc:	8009883a 	mov	r4,r16
    22c0:	00027980 	call	2798 <alt_release_fd>
    if (rval < 0)
    22c4:	88000216 	blt	r17,zero,22d0 <close+0x54>
    22c8:	0005883a 	mov	r2,zero
    22cc:	00001d06 	br	2344 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    22d0:	00800034 	movhi	r2,0
    22d4:	109bc104 	addi	r2,r2,28420
    22d8:	10800017 	ldw	r2,0(r2)
    22dc:	1000031e 	bne	r2,zero,22ec <close+0x70>
    22e0:	00c00074 	movhi	r3,1
    22e4:	18e30704 	addi	r3,r3,-29668
    22e8:	00000206 	br	22f4 <close+0x78>
    22ec:	103ee83a 	callr	r2
    22f0:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    22f4:	0445c83a 	sub	r2,zero,r17
    22f8:	18800015 	stw	r2,0(r3)
    22fc:	00bfffc4 	movi	r2,-1
    2300:	00001006 	br	2344 <close+0xc8>
    2304:	00800034 	movhi	r2,0
    2308:	109bc104 	addi	r2,r2,28420
    230c:	10800017 	ldw	r2,0(r2)
    2310:	1000031e 	bne	r2,zero,2320 <close+0xa4>
    2314:	00c00074 	movhi	r3,1
    2318:	18e30704 	addi	r3,r3,-29668
    231c:	00000206 	br	2328 <close+0xac>
    2320:	103ee83a 	callr	r2
    2324:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2328:	00801444 	movi	r2,81
    232c:	18800015 	stw	r2,0(r3)
    2330:	00bfffc4 	movi	r2,-1
    2334:	00000306 	br	2344 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2338:	8009883a 	mov	r4,r16
    233c:	00027980 	call	2798 <alt_release_fd>
    2340:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    2344:	dfc00217 	ldw	ra,8(sp)
    2348:	dc400117 	ldw	r17,4(sp)
    234c:	dc000017 	ldw	r16,0(sp)
    2350:	dec00304 	addi	sp,sp,12
    2354:	f800283a 	ret

00002358 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2358:	f800283a 	ret

0000235c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    235c:	3005883a 	mov	r2,r6
    2360:	f800283a 	ret

00002364 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2364:	deffff04 	addi	sp,sp,-4
    2368:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    236c:	20000226 	beq	r4,zero,2378 <alt_dev_llist_insert+0x14>
    2370:	20800217 	ldw	r2,8(r4)
    2374:	10000d1e 	bne	r2,zero,23ac <alt_dev_llist_insert+0x48>
    2378:	00800034 	movhi	r2,0
    237c:	109bc104 	addi	r2,r2,28420
    2380:	10800017 	ldw	r2,0(r2)
    2384:	1000031e 	bne	r2,zero,2394 <alt_dev_llist_insert+0x30>
    2388:	00c00074 	movhi	r3,1
    238c:	18e30704 	addi	r3,r3,-29668
    2390:	00000206 	br	239c <alt_dev_llist_insert+0x38>
    2394:	103ee83a 	callr	r2
    2398:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    239c:	00800584 	movi	r2,22
    23a0:	18800015 	stw	r2,0(r3)
    23a4:	00bffa84 	movi	r2,-22
    23a8:	00000706 	br	23c8 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    23ac:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    23b0:	28800017 	ldw	r2,0(r5)
    23b4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    23b8:	28800017 	ldw	r2,0(r5)
    23bc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    23c0:	29000015 	stw	r4,0(r5)
    23c4:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    23c8:	dfc00017 	ldw	ra,0(sp)
    23cc:	dec00104 	addi	sp,sp,4
    23d0:	f800283a 	ret

000023d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    23d4:	defffb04 	addi	sp,sp,-20
    23d8:	dfc00415 	stw	ra,16(sp)
    23dc:	dcc00315 	stw	r19,12(sp)
    23e0:	dc800215 	stw	r18,8(sp)
    23e4:	dc400115 	stw	r17,4(sp)
    23e8:	dc000015 	stw	r16,0(sp)
    23ec:	2027883a 	mov	r19,r4
    23f0:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    23f4:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    23f8:	0002dfc0 	call	2dfc <strlen>
    23fc:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2400:	8c000726 	beq	r17,r16,2420 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2404:	89000217 	ldw	r4,8(r17)
    2408:	980b883a 	mov	r5,r19
    240c:	900d883a 	mov	r6,r18
    2410:	0002a400 	call	2a40 <memcmp>
    2414:	10000326 	beq	r2,zero,2424 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2418:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    241c:	847ff91e 	bne	r16,r17,2404 <alt_find_dev+0x30>
    2420:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    2424:	8805883a 	mov	r2,r17
    2428:	dfc00417 	ldw	ra,16(sp)
    242c:	dcc00317 	ldw	r19,12(sp)
    2430:	dc800217 	ldw	r18,8(sp)
    2434:	dc400117 	ldw	r17,4(sp)
    2438:	dc000017 	ldw	r16,0(sp)
    243c:	dec00504 	addi	sp,sp,20
    2440:	f800283a 	ret

00002444 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2444:	deffff04 	addi	sp,sp,-4
    2448:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    244c:	0009883a 	mov	r4,zero
    2450:	01408004 	movi	r5,512
    2454:	00029cc0 	call	29cc <alt_icache_flush>
#endif
}
    2458:	dfc00017 	ldw	ra,0(sp)
    245c:	dec00104 	addi	sp,sp,4
    2460:	f800283a 	ret

00002464 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2464:	defffe04 	addi	sp,sp,-8
    2468:	dfc00115 	stw	ra,4(sp)
    246c:	dc000015 	stw	r16,0(sp)
    2470:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    2474:	2809883a 	mov	r4,r5
    2478:	300b883a 	mov	r5,r6
    247c:	380d883a 	mov	r6,r7
    2480:	000261c0 	call	261c <open>
    2484:	1009883a 	mov	r4,r2

  if (old >= 0)
    2488:	10000b16 	blt	r2,zero,24b8 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    248c:	10c00324 	muli	r3,r2,12
    2490:	00800034 	movhi	r2,0
    2494:	10995a04 	addi	r2,r2,25960
    2498:	1887883a 	add	r3,r3,r2
    249c:	18800017 	ldw	r2,0(r3)
    24a0:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    24a4:	18800117 	ldw	r2,4(r3)
    24a8:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    24ac:	18800217 	ldw	r2,8(r3)
    24b0:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    24b4:	00027980 	call	2798 <alt_release_fd>
  }
} 
    24b8:	dfc00117 	ldw	ra,4(sp)
    24bc:	dc000017 	ldw	r16,0(sp)
    24c0:	dec00204 	addi	sp,sp,8
    24c4:	f800283a 	ret

000024c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    24c8:	defffa04 	addi	sp,sp,-24
    24cc:	dfc00515 	stw	ra,20(sp)
    24d0:	dd000415 	stw	r20,16(sp)
    24d4:	dcc00315 	stw	r19,12(sp)
    24d8:	dc800215 	stw	r18,8(sp)
    24dc:	dc400115 	stw	r17,4(sp)
    24e0:	dc000015 	stw	r16,0(sp)
    24e4:	2005883a 	mov	r2,r4
    24e8:	2827883a 	mov	r19,r5
    24ec:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    24f0:	04000034 	movhi	r16,0
    24f4:	84195d04 	addi	r16,r16,25972
    24f8:	04800044 	movi	r18,1
    24fc:	04407fc4 	movi	r17,511
    2500:	8009883a 	mov	r4,r16
    2504:	100b883a 	mov	r5,r2
    2508:	900d883a 	mov	r6,r18
    250c:	880f883a 	mov	r7,r17
    2510:	00024640 	call	2464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2514:	843ffd04 	addi	r16,r16,-12
    2518:	8009883a 	mov	r4,r16
    251c:	980b883a 	mov	r5,r19
    2520:	000d883a 	mov	r6,zero
    2524:	880f883a 	mov	r7,r17
    2528:	00024640 	call	2464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    252c:	81000604 	addi	r4,r16,24
    2530:	a00b883a 	mov	r5,r20
    2534:	900d883a 	mov	r6,r18
    2538:	880f883a 	mov	r7,r17
    253c:	00024640 	call	2464 <alt_open_fd>
}  
    2540:	dfc00517 	ldw	ra,20(sp)
    2544:	dd000417 	ldw	r20,16(sp)
    2548:	dcc00317 	ldw	r19,12(sp)
    254c:	dc800217 	ldw	r18,8(sp)
    2550:	dc400117 	ldw	r17,4(sp)
    2554:	dc000017 	ldw	r16,0(sp)
    2558:	dec00604 	addi	sp,sp,24
    255c:	f800283a 	ret

00002560 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2560:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2564:	008007c4 	movi	r2,31
    2568:	1100022e 	bgeu	r2,r4,2574 <alt_irq_register+0x14>
    256c:	00bffa84 	movi	r2,-22
    2570:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2574:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2578:	013fff84 	movi	r4,-2
    257c:	4104703a 	and	r2,r8,r4
    2580:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2584:	380490fa 	slli	r2,r7,3
    2588:	00c00074 	movhi	r3,1
    258c:	18e31504 	addi	r3,r3,-29612
    2590:	10c5883a 	add	r2,r2,r3
    2594:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2598:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    259c:	30000e26 	beq	r6,zero,25d8 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25a0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25a4:	2904703a 	and	r2,r5,r4
    25a8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    25ac:	00c00074 	movhi	r3,1
    25b0:	18e30404 	addi	r3,r3,-29680
    25b4:	19000017 	ldw	r4,0(r3)
    25b8:	00800044 	movi	r2,1
    25bc:	11c4983a 	sll	r2,r2,r7
    25c0:	1104b03a 	or	r2,r2,r4
    25c4:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    25c8:	18800017 	ldw	r2,0(r3)
    25cc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    25d0:	2801703a 	wrctl	status,r5
    25d4:	00000e06 	br	2610 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25d8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25dc:	00bfff84 	movi	r2,-2
    25e0:	2884703a 	and	r2,r5,r2
    25e4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    25e8:	00c00074 	movhi	r3,1
    25ec:	18e30404 	addi	r3,r3,-29680
    25f0:	19000017 	ldw	r4,0(r3)
    25f4:	00bfff84 	movi	r2,-2
    25f8:	11c4183a 	rol	r2,r2,r7
    25fc:	1104703a 	and	r2,r2,r4
    2600:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2604:	18800017 	ldw	r2,0(r3)
    2608:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    260c:	2801703a 	wrctl	status,r5
    2610:	4001703a 	wrctl	status,r8
    2614:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2618:	f800283a 	ret

0000261c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    261c:	defff904 	addi	sp,sp,-28
    2620:	dfc00615 	stw	ra,24(sp)
    2624:	dd400515 	stw	r21,20(sp)
    2628:	dd000415 	stw	r20,16(sp)
    262c:	dcc00315 	stw	r19,12(sp)
    2630:	dc800215 	stw	r18,8(sp)
    2634:	dc400115 	stw	r17,4(sp)
    2638:	dc000015 	stw	r16,0(sp)
    263c:	2029883a 	mov	r20,r4
    2640:	2827883a 	mov	r19,r5
    2644:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2648:	01400034 	movhi	r5,0
    264c:	295bbe04 	addi	r5,r5,28408
    2650:	00023d40 	call	23d4 <alt_find_dev>
    2654:	1021883a 	mov	r16,r2
    2658:	10000226 	beq	r2,zero,2664 <open+0x48>
    265c:	0025883a 	mov	r18,zero
    2660:	00000a06 	br	268c <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2664:	a009883a 	mov	r4,r20
    2668:	00028a40 	call	28a4 <alt_find_file>
    266c:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2670:	1000051e 	bne	r2,zero,2688 <open+0x6c>
    2674:	047fffc4 	movi	r17,-1
    2678:	043ffb44 	movi	r16,-19
    267c:	00002b06 	br	272c <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2680:	043ffcc4 	movi	r16,-13
    2684:	00002906 	br	272c <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2688:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    268c:	8009883a 	mov	r4,r16
    2690:	00029600 	call	2960 <alt_get_fd>
    2694:	1023883a 	mov	r17,r2
    2698:	10003316 	blt	r2,zero,2768 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    269c:	10800324 	muli	r2,r2,12
    26a0:	02000034 	movhi	r8,0
    26a4:	42195a04 	addi	r8,r8,25960
    26a8:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    26ac:	00900034 	movhi	r2,16384
    26b0:	10bfffc4 	addi	r2,r2,-1
    26b4:	9886703a 	and	r3,r19,r2
    26b8:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    26bc:	9004c03a 	cmpne	r2,r18,zero
    26c0:	1000121e 	bne	r2,zero,270c <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    26c4:	18900034 	orhi	r2,r3,16384
    26c8:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    26cc:	00800034 	movhi	r2,0
    26d0:	109bc004 	addi	r2,r2,28416
    26d4:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    26d8:	21800017 	ldw	r6,0(r4)
    26dc:	000b883a 	mov	r5,zero
    26e0:	4007883a 	mov	r3,r8
    26e4:	02400044 	movi	r9,1
    26e8:	02000304 	movi	r8,12
    26ec:	18800017 	ldw	r2,0(r3)
    26f0:	1180031e 	bne	r2,r6,2700 <open+0xe4>
    26f4:	18800217 	ldw	r2,8(r3)
    26f8:	1000010e 	bge	r2,zero,2700 <open+0xe4>
    26fc:	193fe01e 	bne	r3,r4,2680 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2700:	2a4b883a 	add	r5,r5,r9
    2704:	1a07883a 	add	r3,r3,r8
    2708:	397ff82e 	bgeu	r7,r5,26ec <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    270c:	80800317 	ldw	r2,12(r16)
    2710:	10001726 	beq	r2,zero,2770 <open+0x154>
    2714:	a00b883a 	mov	r5,r20
    2718:	980d883a 	mov	r6,r19
    271c:	a80f883a 	mov	r7,r21
    2720:	103ee83a 	callr	r2
    2724:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2728:	1000110e 	bge	r2,zero,2770 <open+0x154>
  {
    alt_release_fd (index);  
    272c:	8809883a 	mov	r4,r17
    2730:	00027980 	call	2798 <alt_release_fd>
    2734:	00800034 	movhi	r2,0
    2738:	109bc104 	addi	r2,r2,28420
    273c:	10800017 	ldw	r2,0(r2)
    2740:	1000031e 	bne	r2,zero,2750 <open+0x134>
    2744:	00c00074 	movhi	r3,1
    2748:	18e30704 	addi	r3,r3,-29668
    274c:	00000206 	br	2758 <open+0x13c>
    2750:	103ee83a 	callr	r2
    2754:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    2758:	0405c83a 	sub	r2,zero,r16
    275c:	18800015 	stw	r2,0(r3)
    2760:	047fffc4 	movi	r17,-1
    2764:	00000206 	br	2770 <open+0x154>
    2768:	1021883a 	mov	r16,r2
    276c:	003fef06 	br	272c <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    2770:	8805883a 	mov	r2,r17
    2774:	dfc00617 	ldw	ra,24(sp)
    2778:	dd400517 	ldw	r21,20(sp)
    277c:	dd000417 	ldw	r20,16(sp)
    2780:	dcc00317 	ldw	r19,12(sp)
    2784:	dc800217 	ldw	r18,8(sp)
    2788:	dc400117 	ldw	r17,4(sp)
    278c:	dc000017 	ldw	r16,0(sp)
    2790:	dec00704 	addi	sp,sp,28
    2794:	f800283a 	ret

00002798 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    2798:	00800084 	movi	r2,2
    279c:	1100060e 	bge	r2,r4,27b8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    27a0:	20800324 	muli	r2,r4,12
    27a4:	00c00034 	movhi	r3,0
    27a8:	18d95a04 	addi	r3,r3,25960
    27ac:	10c5883a 	add	r2,r2,r3
    27b0:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    27b4:	10000015 	stw	zero,0(r2)
    27b8:	f800283a 	ret

000027bc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    27bc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    27c0:	00bfff84 	movi	r2,-2
    27c4:	2884703a 	and	r2,r5,r2
    27c8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    27cc:	20c00017 	ldw	r3,0(r4)
    27d0:	20800117 	ldw	r2,4(r4)
    27d4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    27d8:	20800117 	ldw	r2,4(r4)
    27dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    27e0:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    27e4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    27e8:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    27ec:	f800283a 	ret

000027f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    27f0:	defffd04 	addi	sp,sp,-12
    27f4:	dfc00215 	stw	ra,8(sp)
    27f8:	dc400115 	stw	r17,4(sp)
    27fc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2800:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2804:	d0a74a17 	ldw	r2,-25304(gp)
    2808:	10800044 	addi	r2,r2,1
    280c:	d0a74a15 	stw	r2,-25304(gp)
    2810:	00001b06 	br	2880 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    2814:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2818:	80800403 	ldbu	r2,16(r16)
    281c:	10000326 	beq	r2,zero,282c <alt_tick+0x3c>
    2820:	d0a74a17 	ldw	r2,-25304(gp)
    2824:	1000011e 	bne	r2,zero,282c <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    2828:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    282c:	d0e74a17 	ldw	r3,-25304(gp)
    2830:	80800217 	ldw	r2,8(r16)
    2834:	18801136 	bltu	r3,r2,287c <alt_tick+0x8c>
    2838:	80800403 	ldbu	r2,16(r16)
    283c:	10000f1e 	bne	r2,zero,287c <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    2840:	80800317 	ldw	r2,12(r16)
    2844:	81000517 	ldw	r4,20(r16)
    2848:	103ee83a 	callr	r2
    284c:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2850:	1000031e 	bne	r2,zero,2860 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    2854:	8009883a 	mov	r4,r16
    2858:	00027bc0 	call	27bc <alt_alarm_stop>
    285c:	00000706 	br	287c <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    2860:	80800217 	ldw	r2,8(r16)
    2864:	1885883a 	add	r2,r3,r2
    2868:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    286c:	d0e74a17 	ldw	r3,-25304(gp)
    2870:	10c0022e 	bgeu	r2,r3,287c <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    2874:	00800044 	movi	r2,1
    2878:	80800405 	stb	r2,16(r16)
    287c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2880:	d0a00704 	addi	r2,gp,-32740
    2884:	80bfe31e 	bne	r16,r2,2814 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2888:	dfc00217 	ldw	ra,8(sp)
    288c:	dc400117 	ldw	r17,4(sp)
    2890:	dc000017 	ldw	r16,0(sp)
    2894:	dec00304 	addi	sp,sp,12
    2898:	f800283a 	ret

0000289c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    289c:	000170fa 	wrctl	ienable,zero
}
    28a0:	f800283a 	ret

000028a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    28a4:	defff904 	addi	sp,sp,-28
    28a8:	dfc00615 	stw	ra,24(sp)
    28ac:	dd400515 	stw	r21,20(sp)
    28b0:	dd000415 	stw	r20,16(sp)
    28b4:	dcc00315 	stw	r19,12(sp)
    28b8:	dc800215 	stw	r18,8(sp)
    28bc:	dc400115 	stw	r17,4(sp)
    28c0:	dc000015 	stw	r16,0(sp)
    28c4:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    28c8:	00800034 	movhi	r2,0
    28cc:	109bbc04 	addi	r2,r2,28400
    28d0:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    28d4:	102b883a 	mov	r21,r2
    28d8:	88801626 	beq	r17,r2,2934 <alt_find_file+0x90>
    28dc:	053fffc4 	movi	r20,-1
    28e0:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    28e4:	8c000217 	ldw	r16,8(r17)
    28e8:	8009883a 	mov	r4,r16
    28ec:	0002dfc0 	call	2dfc <strlen>
    28f0:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    28f4:	8085883a 	add	r2,r16,r2
    28f8:	1505883a 	add	r2,r2,r20
    28fc:	10800007 	ldb	r2,0(r2)
    2900:	14c0011e 	bne	r2,r19,2908 <alt_find_file+0x64>
    {
      len -= 1;
    2904:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2908:	1c85883a 	add	r2,r3,r18
    290c:	10800007 	ldb	r2,0(r2)
    2910:	14c00126 	beq	r2,r19,2918 <alt_find_file+0x74>
    2914:	1000051e 	bne	r2,zero,292c <alt_find_file+0x88>
    2918:	8009883a 	mov	r4,r16
    291c:	900b883a 	mov	r5,r18
    2920:	180d883a 	mov	r6,r3
    2924:	0002a400 	call	2a40 <memcmp>
    2928:	10000326 	beq	r2,zero,2938 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    292c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2930:	8d7fec1e 	bne	r17,r21,28e4 <alt_find_file+0x40>
    2934:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    2938:	8805883a 	mov	r2,r17
    293c:	dfc00617 	ldw	ra,24(sp)
    2940:	dd400517 	ldw	r21,20(sp)
    2944:	dd000417 	ldw	r20,16(sp)
    2948:	dcc00317 	ldw	r19,12(sp)
    294c:	dc800217 	ldw	r18,8(sp)
    2950:	dc400117 	ldw	r17,4(sp)
    2954:	dc000017 	ldw	r16,0(sp)
    2958:	dec00704 	addi	sp,sp,28
    295c:	f800283a 	ret

00002960 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2960:	000b883a 	mov	r5,zero
    2964:	00c00034 	movhi	r3,0
    2968:	18d95a04 	addi	r3,r3,25960
    296c:	02000304 	movi	r8,12
    2970:	02400034 	movhi	r9,0
    2974:	4a5bc004 	addi	r9,r9,28416
    2978:	01c00044 	movi	r7,1
    297c:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    2980:	18800017 	ldw	r2,0(r3)
    2984:	10000c1e 	bne	r2,zero,29b8 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    2988:	2a05383a 	mul	r2,r5,r8
    298c:	00c00034 	movhi	r3,0
    2990:	18d95a04 	addi	r3,r3,25960
    2994:	10c5883a 	add	r2,r2,r3
    2998:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    299c:	48800017 	ldw	r2,0(r9)
    29a0:	11400216 	blt	r2,r5,29ac <alt_get_fd+0x4c>
    29a4:	2805883a 	mov	r2,r5
    29a8:	f800283a 	ret
      {
        alt_max_fd = i;
    29ac:	49400015 	stw	r5,0(r9)
    29b0:	2805883a 	mov	r2,r5
    29b4:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    29b8:	29cb883a 	add	r5,r5,r7
    29bc:	1a07883a 	add	r3,r3,r8
    29c0:	29bfef1e 	bne	r5,r6,2980 <alt_get_fd+0x20>
    29c4:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    29c8:	f800283a 	ret

000029cc <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    29cc:	2007883a 	mov	r3,r4
    29d0:	00808004 	movi	r2,512
    29d4:	1140012e 	bgeu	r2,r5,29dc <alt_icache_flush+0x10>
    29d8:	100b883a 	mov	r5,r2
    29dc:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    29e0:	1940042e 	bgeu	r3,r5,29f4 <alt_icache_flush+0x28>
    29e4:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    29e8:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    29ec:	1887883a 	add	r3,r3,r2
    29f0:	197ffd36 	bltu	r3,r5,29e8 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    29f4:	208007cc 	andi	r2,r4,31
    29f8:	10000126 	beq	r2,zero,2a00 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    29fc:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2a00:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2a04:	f800283a 	ret

00002a08 <exit>:
    2a08:	defffe04 	addi	sp,sp,-8
    2a0c:	000b883a 	mov	r5,zero
    2a10:	dc000015 	stw	r16,0(sp)
    2a14:	dfc00115 	stw	ra,4(sp)
    2a18:	2021883a 	mov	r16,r4
    2a1c:	00030fc0 	call	30fc <__call_exitprocs>
    2a20:	00800034 	movhi	r2,0
    2a24:	109bc604 	addi	r2,r2,28440
    2a28:	11000017 	ldw	r4,0(r2)
    2a2c:	20800f17 	ldw	r2,60(r4)
    2a30:	10000126 	beq	r2,zero,2a38 <exit+0x30>
    2a34:	103ee83a 	callr	r2
    2a38:	8009883a 	mov	r4,r16
    2a3c:	0004c640 	call	4c64 <_exit>

00002a40 <memcmp>:
    2a40:	00c000c4 	movi	r3,3
    2a44:	1980032e 	bgeu	r3,r6,2a54 <memcmp+0x14>
    2a48:	2144b03a 	or	r2,r4,r5
    2a4c:	10c4703a 	and	r2,r2,r3
    2a50:	10000f26 	beq	r2,zero,2a90 <memcmp+0x50>
    2a54:	31ffffc4 	addi	r7,r6,-1
    2a58:	3000061e 	bne	r6,zero,2a74 <memcmp+0x34>
    2a5c:	00000a06 	br	2a88 <memcmp+0x48>
    2a60:	39ffffc4 	addi	r7,r7,-1
    2a64:	00bfffc4 	movi	r2,-1
    2a68:	21000044 	addi	r4,r4,1
    2a6c:	29400044 	addi	r5,r5,1
    2a70:	38800526 	beq	r7,r2,2a88 <memcmp+0x48>
    2a74:	20c00003 	ldbu	r3,0(r4)
    2a78:	28800003 	ldbu	r2,0(r5)
    2a7c:	18bff826 	beq	r3,r2,2a60 <memcmp+0x20>
    2a80:	1885c83a 	sub	r2,r3,r2
    2a84:	f800283a 	ret
    2a88:	0005883a 	mov	r2,zero
    2a8c:	f800283a 	ret
    2a90:	180f883a 	mov	r7,r3
    2a94:	20c00017 	ldw	r3,0(r4)
    2a98:	28800017 	ldw	r2,0(r5)
    2a9c:	18bfed1e 	bne	r3,r2,2a54 <memcmp+0x14>
    2aa0:	31bfff04 	addi	r6,r6,-4
    2aa4:	21000104 	addi	r4,r4,4
    2aa8:	29400104 	addi	r5,r5,4
    2aac:	39bff936 	bltu	r7,r6,2a94 <memcmp+0x54>
    2ab0:	003fe806 	br	2a54 <memcmp+0x14>

00002ab4 <memcpy>:
    2ab4:	01c003c4 	movi	r7,15
    2ab8:	2007883a 	mov	r3,r4
    2abc:	3980032e 	bgeu	r7,r6,2acc <memcpy+0x18>
    2ac0:	2904b03a 	or	r2,r5,r4
    2ac4:	108000cc 	andi	r2,r2,3
    2ac8:	10000926 	beq	r2,zero,2af0 <memcpy+0x3c>
    2acc:	30000626 	beq	r6,zero,2ae8 <memcpy+0x34>
    2ad0:	30cd883a 	add	r6,r6,r3
    2ad4:	28800003 	ldbu	r2,0(r5)
    2ad8:	29400044 	addi	r5,r5,1
    2adc:	18800005 	stb	r2,0(r3)
    2ae0:	18c00044 	addi	r3,r3,1
    2ae4:	30fffb1e 	bne	r6,r3,2ad4 <memcpy+0x20>
    2ae8:	2005883a 	mov	r2,r4
    2aec:	f800283a 	ret
    2af0:	3811883a 	mov	r8,r7
    2af4:	200f883a 	mov	r7,r4
    2af8:	28c00017 	ldw	r3,0(r5)
    2afc:	31bffc04 	addi	r6,r6,-16
    2b00:	38c00015 	stw	r3,0(r7)
    2b04:	28800117 	ldw	r2,4(r5)
    2b08:	38800115 	stw	r2,4(r7)
    2b0c:	28c00217 	ldw	r3,8(r5)
    2b10:	38c00215 	stw	r3,8(r7)
    2b14:	28800317 	ldw	r2,12(r5)
    2b18:	29400404 	addi	r5,r5,16
    2b1c:	38800315 	stw	r2,12(r7)
    2b20:	39c00404 	addi	r7,r7,16
    2b24:	41bff436 	bltu	r8,r6,2af8 <memcpy+0x44>
    2b28:	008000c4 	movi	r2,3
    2b2c:	1180072e 	bgeu	r2,r6,2b4c <memcpy+0x98>
    2b30:	1007883a 	mov	r3,r2
    2b34:	28800017 	ldw	r2,0(r5)
    2b38:	31bfff04 	addi	r6,r6,-4
    2b3c:	29400104 	addi	r5,r5,4
    2b40:	38800015 	stw	r2,0(r7)
    2b44:	39c00104 	addi	r7,r7,4
    2b48:	19bffa36 	bltu	r3,r6,2b34 <memcpy+0x80>
    2b4c:	3807883a 	mov	r3,r7
    2b50:	003fde06 	br	2acc <memcpy+0x18>

00002b54 <putc>:
    2b54:	defffc04 	addi	sp,sp,-16
    2b58:	dc800215 	stw	r18,8(sp)
    2b5c:	04800034 	movhi	r18,0
    2b60:	949bc504 	addi	r18,r18,28436
    2b64:	90c00017 	ldw	r3,0(r18)
    2b68:	dc400115 	stw	r17,4(sp)
    2b6c:	dc000015 	stw	r16,0(sp)
    2b70:	dfc00315 	stw	ra,12(sp)
    2b74:	2023883a 	mov	r17,r4
    2b78:	2821883a 	mov	r16,r5
    2b7c:	18000226 	beq	r3,zero,2b88 <putc+0x34>
    2b80:	18800e17 	ldw	r2,56(r3)
    2b84:	10001126 	beq	r2,zero,2bcc <putc+0x78>
    2b88:	80800217 	ldw	r2,8(r16)
    2b8c:	10ffffc4 	addi	r3,r2,-1
    2b90:	80c00215 	stw	r3,8(r16)
    2b94:	18001316 	blt	r3,zero,2be4 <putc+0x90>
    2b98:	80800017 	ldw	r2,0(r16)
    2b9c:	14400005 	stb	r17,0(r2)
    2ba0:	80c00017 	ldw	r3,0(r16)
    2ba4:	18800044 	addi	r2,r3,1
    2ba8:	18c00003 	ldbu	r3,0(r3)
    2bac:	80800015 	stw	r2,0(r16)
    2bb0:	1805883a 	mov	r2,r3
    2bb4:	dfc00317 	ldw	ra,12(sp)
    2bb8:	dc800217 	ldw	r18,8(sp)
    2bbc:	dc400117 	ldw	r17,4(sp)
    2bc0:	dc000017 	ldw	r16,0(sp)
    2bc4:	dec00404 	addi	sp,sp,16
    2bc8:	f800283a 	ret
    2bcc:	1809883a 	mov	r4,r3
    2bd0:	00035440 	call	3544 <__sinit>
    2bd4:	80800217 	ldw	r2,8(r16)
    2bd8:	10ffffc4 	addi	r3,r2,-1
    2bdc:	80c00215 	stw	r3,8(r16)
    2be0:	183fed0e 	bge	r3,zero,2b98 <putc+0x44>
    2be4:	80800617 	ldw	r2,24(r16)
    2be8:	18800f16 	blt	r3,r2,2c28 <putc+0xd4>
    2bec:	80800017 	ldw	r2,0(r16)
    2bf0:	14400005 	stb	r17,0(r2)
    2bf4:	81000017 	ldw	r4,0(r16)
    2bf8:	00800284 	movi	r2,10
    2bfc:	20c00003 	ldbu	r3,0(r4)
    2c00:	18801226 	beq	r3,r2,2c4c <putc+0xf8>
    2c04:	20800044 	addi	r2,r4,1
    2c08:	80800015 	stw	r2,0(r16)
    2c0c:	1805883a 	mov	r2,r3
    2c10:	dfc00317 	ldw	ra,12(sp)
    2c14:	dc800217 	ldw	r18,8(sp)
    2c18:	dc400117 	ldw	r17,4(sp)
    2c1c:	dc000017 	ldw	r16,0(sp)
    2c20:	dec00404 	addi	sp,sp,16
    2c24:	f800283a 	ret
    2c28:	91000017 	ldw	r4,0(r18)
    2c2c:	880b883a 	mov	r5,r17
    2c30:	800d883a 	mov	r6,r16
    2c34:	dfc00317 	ldw	ra,12(sp)
    2c38:	dc800217 	ldw	r18,8(sp)
    2c3c:	dc400117 	ldw	r17,4(sp)
    2c40:	dc000017 	ldw	r16,0(sp)
    2c44:	dec00404 	addi	sp,sp,16
    2c48:	0002e701 	jmpi	2e70 <__swbuf_r>
    2c4c:	91000017 	ldw	r4,0(r18)
    2c50:	180b883a 	mov	r5,r3
    2c54:	003ff606 	br	2c30 <putc+0xdc>

00002c58 <_putc_r>:
    2c58:	defffc04 	addi	sp,sp,-16
    2c5c:	dc400215 	stw	r17,8(sp)
    2c60:	dc000115 	stw	r16,4(sp)
    2c64:	dfc00315 	stw	ra,12(sp)
    2c68:	2021883a 	mov	r16,r4
    2c6c:	2823883a 	mov	r17,r5
    2c70:	20000226 	beq	r4,zero,2c7c <_putc_r+0x24>
    2c74:	20800e17 	ldw	r2,56(r4)
    2c78:	10001026 	beq	r2,zero,2cbc <_putc_r+0x64>
    2c7c:	30800217 	ldw	r2,8(r6)
    2c80:	10ffffc4 	addi	r3,r2,-1
    2c84:	30c00215 	stw	r3,8(r6)
    2c88:	18001316 	blt	r3,zero,2cd8 <_putc_r+0x80>
    2c8c:	30800017 	ldw	r2,0(r6)
    2c90:	14400005 	stb	r17,0(r2)
    2c94:	30c00017 	ldw	r3,0(r6)
    2c98:	18800044 	addi	r2,r3,1
    2c9c:	18c00003 	ldbu	r3,0(r3)
    2ca0:	30800015 	stw	r2,0(r6)
    2ca4:	1805883a 	mov	r2,r3
    2ca8:	dfc00317 	ldw	ra,12(sp)
    2cac:	dc400217 	ldw	r17,8(sp)
    2cb0:	dc000117 	ldw	r16,4(sp)
    2cb4:	dec00404 	addi	sp,sp,16
    2cb8:	f800283a 	ret
    2cbc:	d9800015 	stw	r6,0(sp)
    2cc0:	00035440 	call	3544 <__sinit>
    2cc4:	d9800017 	ldw	r6,0(sp)
    2cc8:	30800217 	ldw	r2,8(r6)
    2ccc:	10ffffc4 	addi	r3,r2,-1
    2cd0:	30c00215 	stw	r3,8(r6)
    2cd4:	183fed0e 	bge	r3,zero,2c8c <_putc_r+0x34>
    2cd8:	30800617 	ldw	r2,24(r6)
    2cdc:	18800e16 	blt	r3,r2,2d18 <_putc_r+0xc0>
    2ce0:	30800017 	ldw	r2,0(r6)
    2ce4:	14400005 	stb	r17,0(r2)
    2ce8:	31000017 	ldw	r4,0(r6)
    2cec:	00800284 	movi	r2,10
    2cf0:	20c00003 	ldbu	r3,0(r4)
    2cf4:	18800f26 	beq	r3,r2,2d34 <_putc_r+0xdc>
    2cf8:	20800044 	addi	r2,r4,1
    2cfc:	30800015 	stw	r2,0(r6)
    2d00:	1805883a 	mov	r2,r3
    2d04:	dfc00317 	ldw	ra,12(sp)
    2d08:	dc400217 	ldw	r17,8(sp)
    2d0c:	dc000117 	ldw	r16,4(sp)
    2d10:	dec00404 	addi	sp,sp,16
    2d14:	f800283a 	ret
    2d18:	8009883a 	mov	r4,r16
    2d1c:	880b883a 	mov	r5,r17
    2d20:	dfc00317 	ldw	ra,12(sp)
    2d24:	dc400217 	ldw	r17,8(sp)
    2d28:	dc000117 	ldw	r16,4(sp)
    2d2c:	dec00404 	addi	sp,sp,16
    2d30:	0002e701 	jmpi	2e70 <__swbuf_r>
    2d34:	8009883a 	mov	r4,r16
    2d38:	180b883a 	mov	r5,r3
    2d3c:	003ff806 	br	2d20 <_putc_r+0xc8>

00002d40 <strcmp>:
    2d40:	2144b03a 	or	r2,r4,r5
    2d44:	108000cc 	andi	r2,r2,3
    2d48:	10001d1e 	bne	r2,zero,2dc0 <strcmp+0x80>
    2d4c:	200f883a 	mov	r7,r4
    2d50:	28800017 	ldw	r2,0(r5)
    2d54:	21000017 	ldw	r4,0(r4)
    2d58:	280d883a 	mov	r6,r5
    2d5c:	2080161e 	bne	r4,r2,2db8 <strcmp+0x78>
    2d60:	023fbff4 	movhi	r8,65279
    2d64:	423fbfc4 	addi	r8,r8,-257
    2d68:	2207883a 	add	r3,r4,r8
    2d6c:	01602074 	movhi	r5,32897
    2d70:	29602004 	addi	r5,r5,-32640
    2d74:	1946703a 	and	r3,r3,r5
    2d78:	0104303a 	nor	r2,zero,r4
    2d7c:	10c4703a 	and	r2,r2,r3
    2d80:	10001c1e 	bne	r2,zero,2df4 <strcmp+0xb4>
    2d84:	4013883a 	mov	r9,r8
    2d88:	2811883a 	mov	r8,r5
    2d8c:	00000106 	br	2d94 <strcmp+0x54>
    2d90:	1800181e 	bne	r3,zero,2df4 <strcmp+0xb4>
    2d94:	39c00104 	addi	r7,r7,4
    2d98:	39000017 	ldw	r4,0(r7)
    2d9c:	31800104 	addi	r6,r6,4
    2da0:	31400017 	ldw	r5,0(r6)
    2da4:	2245883a 	add	r2,r4,r9
    2da8:	1204703a 	and	r2,r2,r8
    2dac:	0106303a 	nor	r3,zero,r4
    2db0:	1886703a 	and	r3,r3,r2
    2db4:	217ff626 	beq	r4,r5,2d90 <strcmp+0x50>
    2db8:	3809883a 	mov	r4,r7
    2dbc:	300b883a 	mov	r5,r6
    2dc0:	20c00007 	ldb	r3,0(r4)
    2dc4:	1800051e 	bne	r3,zero,2ddc <strcmp+0x9c>
    2dc8:	00000606 	br	2de4 <strcmp+0xa4>
    2dcc:	21000044 	addi	r4,r4,1
    2dd0:	20c00007 	ldb	r3,0(r4)
    2dd4:	29400044 	addi	r5,r5,1
    2dd8:	18000226 	beq	r3,zero,2de4 <strcmp+0xa4>
    2ddc:	28800007 	ldb	r2,0(r5)
    2de0:	18bffa26 	beq	r3,r2,2dcc <strcmp+0x8c>
    2de4:	20c00003 	ldbu	r3,0(r4)
    2de8:	28800003 	ldbu	r2,0(r5)
    2dec:	1885c83a 	sub	r2,r3,r2
    2df0:	f800283a 	ret
    2df4:	0005883a 	mov	r2,zero
    2df8:	f800283a 	ret

00002dfc <strlen>:
    2dfc:	208000cc 	andi	r2,r4,3
    2e00:	2011883a 	mov	r8,r4
    2e04:	1000161e 	bne	r2,zero,2e60 <strlen+0x64>
    2e08:	20c00017 	ldw	r3,0(r4)
    2e0c:	017fbff4 	movhi	r5,65279
    2e10:	297fbfc4 	addi	r5,r5,-257
    2e14:	01e02074 	movhi	r7,32897
    2e18:	39e02004 	addi	r7,r7,-32640
    2e1c:	1945883a 	add	r2,r3,r5
    2e20:	11c4703a 	and	r2,r2,r7
    2e24:	00c6303a 	nor	r3,zero,r3
    2e28:	1886703a 	and	r3,r3,r2
    2e2c:	18000c1e 	bne	r3,zero,2e60 <strlen+0x64>
    2e30:	280d883a 	mov	r6,r5
    2e34:	380b883a 	mov	r5,r7
    2e38:	21000104 	addi	r4,r4,4
    2e3c:	20800017 	ldw	r2,0(r4)
    2e40:	1187883a 	add	r3,r2,r6
    2e44:	1946703a 	and	r3,r3,r5
    2e48:	0084303a 	nor	r2,zero,r2
    2e4c:	10c4703a 	and	r2,r2,r3
    2e50:	103ff926 	beq	r2,zero,2e38 <strlen+0x3c>
    2e54:	20800007 	ldb	r2,0(r4)
    2e58:	10000326 	beq	r2,zero,2e68 <strlen+0x6c>
    2e5c:	21000044 	addi	r4,r4,1
    2e60:	20800007 	ldb	r2,0(r4)
    2e64:	103ffd1e 	bne	r2,zero,2e5c <strlen+0x60>
    2e68:	2205c83a 	sub	r2,r4,r8
    2e6c:	f800283a 	ret

00002e70 <__swbuf_r>:
    2e70:	defffc04 	addi	sp,sp,-16
    2e74:	dc400215 	stw	r17,8(sp)
    2e78:	dc000115 	stw	r16,4(sp)
    2e7c:	dfc00315 	stw	ra,12(sp)
    2e80:	2023883a 	mov	r17,r4
    2e84:	2821883a 	mov	r16,r5
    2e88:	20000226 	beq	r4,zero,2e94 <__swbuf_r+0x24>
    2e8c:	20800e17 	ldw	r2,56(r4)
    2e90:	10002f26 	beq	r2,zero,2f50 <__swbuf_r+0xe0>
    2e94:	3080030b 	ldhu	r2,12(r6)
    2e98:	30c00617 	ldw	r3,24(r6)
    2e9c:	1080020c 	andi	r2,r2,8
    2ea0:	30c00215 	stw	r3,8(r6)
    2ea4:	10002226 	beq	r2,zero,2f30 <__swbuf_r+0xc0>
    2ea8:	30c00417 	ldw	r3,16(r6)
    2eac:	18002026 	beq	r3,zero,2f30 <__swbuf_r+0xc0>
    2eb0:	31000017 	ldw	r4,0(r6)
    2eb4:	30800517 	ldw	r2,20(r6)
    2eb8:	20c7c83a 	sub	r3,r4,r3
    2ebc:	18802f0e 	bge	r3,r2,2f7c <__swbuf_r+0x10c>
    2ec0:	19400044 	addi	r5,r3,1
    2ec4:	30800217 	ldw	r2,8(r6)
    2ec8:	84003fcc 	andi	r16,r16,255
    2ecc:	20c00044 	addi	r3,r4,1
    2ed0:	10bfffc4 	addi	r2,r2,-1
    2ed4:	30800215 	stw	r2,8(r6)
    2ed8:	24000005 	stb	r16,0(r4)
    2edc:	30800517 	ldw	r2,20(r6)
    2ee0:	30c00015 	stw	r3,0(r6)
    2ee4:	11400c26 	beq	r2,r5,2f18 <__swbuf_r+0xa8>
    2ee8:	3080030b 	ldhu	r2,12(r6)
    2eec:	1080004c 	andi	r2,r2,1
    2ef0:	1005003a 	cmpeq	r2,r2,zero
    2ef4:	10000626 	beq	r2,zero,2f10 <__swbuf_r+0xa0>
    2ef8:	8005883a 	mov	r2,r16
    2efc:	dfc00317 	ldw	ra,12(sp)
    2f00:	dc400217 	ldw	r17,8(sp)
    2f04:	dc000117 	ldw	r16,4(sp)
    2f08:	dec00404 	addi	sp,sp,16
    2f0c:	f800283a 	ret
    2f10:	00800284 	movi	r2,10
    2f14:	80bff81e 	bne	r16,r2,2ef8 <__swbuf_r+0x88>
    2f18:	8809883a 	mov	r4,r17
    2f1c:	300b883a 	mov	r5,r6
    2f20:	00032ac0 	call	32ac <_fflush_r>
    2f24:	103ff426 	beq	r2,zero,2ef8 <__swbuf_r+0x88>
    2f28:	043fffc4 	movi	r16,-1
    2f2c:	003ff206 	br	2ef8 <__swbuf_r+0x88>
    2f30:	300b883a 	mov	r5,r6
    2f34:	8809883a 	mov	r4,r17
    2f38:	d9800015 	stw	r6,0(sp)
    2f3c:	0002fbc0 	call	2fbc <__swsetup_r>
    2f40:	d9800017 	ldw	r6,0(sp)
    2f44:	1000061e 	bne	r2,zero,2f60 <__swbuf_r+0xf0>
    2f48:	30c00417 	ldw	r3,16(r6)
    2f4c:	003fd806 	br	2eb0 <__swbuf_r+0x40>
    2f50:	d9800015 	stw	r6,0(sp)
    2f54:	00035440 	call	3544 <__sinit>
    2f58:	d9800017 	ldw	r6,0(sp)
    2f5c:	003fcd06 	br	2e94 <__swbuf_r+0x24>
    2f60:	3080030b 	ldhu	r2,12(r6)
    2f64:	00c00244 	movi	r3,9
    2f68:	043fffc4 	movi	r16,-1
    2f6c:	10801014 	ori	r2,r2,64
    2f70:	3080030d 	sth	r2,12(r6)
    2f74:	88c00015 	stw	r3,0(r17)
    2f78:	003fdf06 	br	2ef8 <__swbuf_r+0x88>
    2f7c:	300b883a 	mov	r5,r6
    2f80:	8809883a 	mov	r4,r17
    2f84:	d9800015 	stw	r6,0(sp)
    2f88:	00032ac0 	call	32ac <_fflush_r>
    2f8c:	d9800017 	ldw	r6,0(sp)
    2f90:	103fe51e 	bne	r2,zero,2f28 <__swbuf_r+0xb8>
    2f94:	31000017 	ldw	r4,0(r6)
    2f98:	01400044 	movi	r5,1
    2f9c:	003fc906 	br	2ec4 <__swbuf_r+0x54>

00002fa0 <__swbuf>:
    2fa0:	01800034 	movhi	r6,0
    2fa4:	319bc504 	addi	r6,r6,28436
    2fa8:	2007883a 	mov	r3,r4
    2fac:	31000017 	ldw	r4,0(r6)
    2fb0:	280d883a 	mov	r6,r5
    2fb4:	180b883a 	mov	r5,r3
    2fb8:	0002e701 	jmpi	2e70 <__swbuf_r>

00002fbc <__swsetup_r>:
    2fbc:	00800034 	movhi	r2,0
    2fc0:	109bc504 	addi	r2,r2,28436
    2fc4:	10c00017 	ldw	r3,0(r2)
    2fc8:	defffd04 	addi	sp,sp,-12
    2fcc:	dc400115 	stw	r17,4(sp)
    2fd0:	dc000015 	stw	r16,0(sp)
    2fd4:	dfc00215 	stw	ra,8(sp)
    2fd8:	2023883a 	mov	r17,r4
    2fdc:	2821883a 	mov	r16,r5
    2fe0:	18000226 	beq	r3,zero,2fec <__swsetup_r+0x30>
    2fe4:	18800e17 	ldw	r2,56(r3)
    2fe8:	10001f26 	beq	r2,zero,3068 <__swsetup_r+0xac>
    2fec:	8100030b 	ldhu	r4,12(r16)
    2ff0:	2080020c 	andi	r2,r4,8
    2ff4:	10002826 	beq	r2,zero,3098 <__swsetup_r+0xdc>
    2ff8:	81400417 	ldw	r5,16(r16)
    2ffc:	28001d26 	beq	r5,zero,3074 <__swsetup_r+0xb8>
    3000:	2080004c 	andi	r2,r4,1
    3004:	1005003a 	cmpeq	r2,r2,zero
    3008:	10000b26 	beq	r2,zero,3038 <__swsetup_r+0x7c>
    300c:	2080008c 	andi	r2,r4,2
    3010:	10001226 	beq	r2,zero,305c <__swsetup_r+0xa0>
    3014:	0005883a 	mov	r2,zero
    3018:	80800215 	stw	r2,8(r16)
    301c:	28000b26 	beq	r5,zero,304c <__swsetup_r+0x90>
    3020:	0005883a 	mov	r2,zero
    3024:	dfc00217 	ldw	ra,8(sp)
    3028:	dc400117 	ldw	r17,4(sp)
    302c:	dc000017 	ldw	r16,0(sp)
    3030:	dec00304 	addi	sp,sp,12
    3034:	f800283a 	ret
    3038:	80800517 	ldw	r2,20(r16)
    303c:	80000215 	stw	zero,8(r16)
    3040:	0085c83a 	sub	r2,zero,r2
    3044:	80800615 	stw	r2,24(r16)
    3048:	283ff51e 	bne	r5,zero,3020 <__swsetup_r+0x64>
    304c:	2080200c 	andi	r2,r4,128
    3050:	103ff326 	beq	r2,zero,3020 <__swsetup_r+0x64>
    3054:	00bfffc4 	movi	r2,-1
    3058:	003ff206 	br	3024 <__swsetup_r+0x68>
    305c:	80800517 	ldw	r2,20(r16)
    3060:	80800215 	stw	r2,8(r16)
    3064:	003fed06 	br	301c <__swsetup_r+0x60>
    3068:	1809883a 	mov	r4,r3
    306c:	00035440 	call	3544 <__sinit>
    3070:	003fde06 	br	2fec <__swsetup_r+0x30>
    3074:	20c0a00c 	andi	r3,r4,640
    3078:	00808004 	movi	r2,512
    307c:	18bfe026 	beq	r3,r2,3000 <__swsetup_r+0x44>
    3080:	8809883a 	mov	r4,r17
    3084:	800b883a 	mov	r5,r16
    3088:	0003d5c0 	call	3d5c <__smakebuf_r>
    308c:	8100030b 	ldhu	r4,12(r16)
    3090:	81400417 	ldw	r5,16(r16)
    3094:	003fda06 	br	3000 <__swsetup_r+0x44>
    3098:	2080040c 	andi	r2,r4,16
    309c:	103fed26 	beq	r2,zero,3054 <__swsetup_r+0x98>
    30a0:	2080010c 	andi	r2,r4,4
    30a4:	10001226 	beq	r2,zero,30f0 <__swsetup_r+0x134>
    30a8:	81400c17 	ldw	r5,48(r16)
    30ac:	28000526 	beq	r5,zero,30c4 <__swsetup_r+0x108>
    30b0:	80801004 	addi	r2,r16,64
    30b4:	28800226 	beq	r5,r2,30c0 <__swsetup_r+0x104>
    30b8:	8809883a 	mov	r4,r17
    30bc:	00038c80 	call	38c8 <_free_r>
    30c0:	80000c15 	stw	zero,48(r16)
    30c4:	8080030b 	ldhu	r2,12(r16)
    30c8:	81400417 	ldw	r5,16(r16)
    30cc:	80000115 	stw	zero,4(r16)
    30d0:	10bff6cc 	andi	r2,r2,65499
    30d4:	8080030d 	sth	r2,12(r16)
    30d8:	81400015 	stw	r5,0(r16)
    30dc:	8080030b 	ldhu	r2,12(r16)
    30e0:	10800214 	ori	r2,r2,8
    30e4:	113fffcc 	andi	r4,r2,65535
    30e8:	8080030d 	sth	r2,12(r16)
    30ec:	003fc306 	br	2ffc <__swsetup_r+0x40>
    30f0:	81400417 	ldw	r5,16(r16)
    30f4:	003ff906 	br	30dc <__swsetup_r+0x120>

000030f8 <register_fini>:
    30f8:	f800283a 	ret

000030fc <__call_exitprocs>:
    30fc:	00800034 	movhi	r2,0
    3100:	109bc604 	addi	r2,r2,28440
    3104:	10800017 	ldw	r2,0(r2)
    3108:	defff304 	addi	sp,sp,-52
    310c:	df000b15 	stw	fp,44(sp)
    3110:	d8800115 	stw	r2,4(sp)
    3114:	00800034 	movhi	r2,0
    3118:	10800004 	addi	r2,r2,0
    311c:	1005003a 	cmpeq	r2,r2,zero
    3120:	d8800215 	stw	r2,8(sp)
    3124:	d8800117 	ldw	r2,4(sp)
    3128:	dd400815 	stw	r21,32(sp)
    312c:	dd000715 	stw	r20,28(sp)
    3130:	10805204 	addi	r2,r2,328
    3134:	dfc00c15 	stw	ra,48(sp)
    3138:	ddc00a15 	stw	r23,40(sp)
    313c:	dd800915 	stw	r22,36(sp)
    3140:	dcc00615 	stw	r19,24(sp)
    3144:	dc800515 	stw	r18,20(sp)
    3148:	dc400415 	stw	r17,16(sp)
    314c:	dc000315 	stw	r16,12(sp)
    3150:	282b883a 	mov	r21,r5
    3154:	2039883a 	mov	fp,r4
    3158:	d8800015 	stw	r2,0(sp)
    315c:	2829003a 	cmpeq	r20,r5,zero
    3160:	d8800117 	ldw	r2,4(sp)
    3164:	14405217 	ldw	r17,328(r2)
    3168:	88001026 	beq	r17,zero,31ac <__call_exitprocs+0xb0>
    316c:	ddc00017 	ldw	r23,0(sp)
    3170:	88800117 	ldw	r2,4(r17)
    3174:	8c802204 	addi	r18,r17,136
    3178:	143fffc4 	addi	r16,r2,-1
    317c:	80000916 	blt	r16,zero,31a4 <__call_exitprocs+0xa8>
    3180:	05bfffc4 	movi	r22,-1
    3184:	a000151e 	bne	r20,zero,31dc <__call_exitprocs+0xe0>
    3188:	8409883a 	add	r4,r16,r16
    318c:	2105883a 	add	r2,r4,r4
    3190:	1485883a 	add	r2,r2,r18
    3194:	10c02017 	ldw	r3,128(r2)
    3198:	a8c01126 	beq	r21,r3,31e0 <__call_exitprocs+0xe4>
    319c:	843fffc4 	addi	r16,r16,-1
    31a0:	85bff81e 	bne	r16,r22,3184 <__call_exitprocs+0x88>
    31a4:	d8800217 	ldw	r2,8(sp)
    31a8:	10003126 	beq	r2,zero,3270 <__call_exitprocs+0x174>
    31ac:	dfc00c17 	ldw	ra,48(sp)
    31b0:	df000b17 	ldw	fp,44(sp)
    31b4:	ddc00a17 	ldw	r23,40(sp)
    31b8:	dd800917 	ldw	r22,36(sp)
    31bc:	dd400817 	ldw	r21,32(sp)
    31c0:	dd000717 	ldw	r20,28(sp)
    31c4:	dcc00617 	ldw	r19,24(sp)
    31c8:	dc800517 	ldw	r18,20(sp)
    31cc:	dc400417 	ldw	r17,16(sp)
    31d0:	dc000317 	ldw	r16,12(sp)
    31d4:	dec00d04 	addi	sp,sp,52
    31d8:	f800283a 	ret
    31dc:	8409883a 	add	r4,r16,r16
    31e0:	88c00117 	ldw	r3,4(r17)
    31e4:	2105883a 	add	r2,r4,r4
    31e8:	1445883a 	add	r2,r2,r17
    31ec:	18ffffc4 	addi	r3,r3,-1
    31f0:	11800217 	ldw	r6,8(r2)
    31f4:	1c001526 	beq	r3,r16,324c <__call_exitprocs+0x150>
    31f8:	10000215 	stw	zero,8(r2)
    31fc:	303fe726 	beq	r6,zero,319c <__call_exitprocs+0xa0>
    3200:	00c00044 	movi	r3,1
    3204:	1c06983a 	sll	r3,r3,r16
    3208:	90804017 	ldw	r2,256(r18)
    320c:	8cc00117 	ldw	r19,4(r17)
    3210:	1884703a 	and	r2,r3,r2
    3214:	10001426 	beq	r2,zero,3268 <__call_exitprocs+0x16c>
    3218:	90804117 	ldw	r2,260(r18)
    321c:	1884703a 	and	r2,r3,r2
    3220:	10000c1e 	bne	r2,zero,3254 <__call_exitprocs+0x158>
    3224:	2105883a 	add	r2,r4,r4
    3228:	1485883a 	add	r2,r2,r18
    322c:	11400017 	ldw	r5,0(r2)
    3230:	e009883a 	mov	r4,fp
    3234:	303ee83a 	callr	r6
    3238:	88800117 	ldw	r2,4(r17)
    323c:	98bfc81e 	bne	r19,r2,3160 <__call_exitprocs+0x64>
    3240:	b8800017 	ldw	r2,0(r23)
    3244:	147fd526 	beq	r2,r17,319c <__call_exitprocs+0xa0>
    3248:	003fc506 	br	3160 <__call_exitprocs+0x64>
    324c:	8c000115 	stw	r16,4(r17)
    3250:	003fea06 	br	31fc <__call_exitprocs+0x100>
    3254:	2105883a 	add	r2,r4,r4
    3258:	1485883a 	add	r2,r2,r18
    325c:	11000017 	ldw	r4,0(r2)
    3260:	303ee83a 	callr	r6
    3264:	003ff406 	br	3238 <__call_exitprocs+0x13c>
    3268:	303ee83a 	callr	r6
    326c:	003ff206 	br	3238 <__call_exitprocs+0x13c>
    3270:	88800117 	ldw	r2,4(r17)
    3274:	1000081e 	bne	r2,zero,3298 <__call_exitprocs+0x19c>
    3278:	89000017 	ldw	r4,0(r17)
    327c:	20000726 	beq	r4,zero,329c <__call_exitprocs+0x1a0>
    3280:	b9000015 	stw	r4,0(r23)
    3284:	8809883a 	mov	r4,r17
    3288:	00000000 	call	0 <__alt_mem_SDRAM>
    328c:	bc400017 	ldw	r17,0(r23)
    3290:	883fb71e 	bne	r17,zero,3170 <__call_exitprocs+0x74>
    3294:	003fc506 	br	31ac <__call_exitprocs+0xb0>
    3298:	89000017 	ldw	r4,0(r17)
    329c:	882f883a 	mov	r23,r17
    32a0:	2023883a 	mov	r17,r4
    32a4:	883fb21e 	bne	r17,zero,3170 <__call_exitprocs+0x74>
    32a8:	003fc006 	br	31ac <__call_exitprocs+0xb0>

000032ac <_fflush_r>:
    32ac:	defffb04 	addi	sp,sp,-20
    32b0:	dcc00315 	stw	r19,12(sp)
    32b4:	dc800215 	stw	r18,8(sp)
    32b8:	dfc00415 	stw	ra,16(sp)
    32bc:	dc400115 	stw	r17,4(sp)
    32c0:	dc000015 	stw	r16,0(sp)
    32c4:	2027883a 	mov	r19,r4
    32c8:	2825883a 	mov	r18,r5
    32cc:	20000226 	beq	r4,zero,32d8 <_fflush_r+0x2c>
    32d0:	20800e17 	ldw	r2,56(r4)
    32d4:	10005626 	beq	r2,zero,3430 <_fflush_r+0x184>
    32d8:	9100030b 	ldhu	r4,12(r18)
    32dc:	20ffffcc 	andi	r3,r4,65535
    32e0:	18e0001c 	xori	r3,r3,32768
    32e4:	18e00004 	addi	r3,r3,-32768
    32e8:	1880020c 	andi	r2,r3,8
    32ec:	1000261e 	bne	r2,zero,3388 <_fflush_r+0xdc>
    32f0:	90c00117 	ldw	r3,4(r18)
    32f4:	20820014 	ori	r2,r4,2048
    32f8:	9080030d 	sth	r2,12(r18)
    32fc:	1009883a 	mov	r4,r2
    3300:	00c0400e 	bge	zero,r3,3404 <_fflush_r+0x158>
    3304:	92000a17 	ldw	r8,40(r18)
    3308:	40004026 	beq	r8,zero,340c <_fflush_r+0x160>
    330c:	2084000c 	andi	r2,r4,4096
    3310:	10005326 	beq	r2,zero,3460 <_fflush_r+0x1b4>
    3314:	94001417 	ldw	r16,80(r18)
    3318:	9080030b 	ldhu	r2,12(r18)
    331c:	1080010c 	andi	r2,r2,4
    3320:	1000481e 	bne	r2,zero,3444 <_fflush_r+0x198>
    3324:	91400717 	ldw	r5,28(r18)
    3328:	9809883a 	mov	r4,r19
    332c:	800d883a 	mov	r6,r16
    3330:	000f883a 	mov	r7,zero
    3334:	403ee83a 	callr	r8
    3338:	8080261e 	bne	r16,r2,33d4 <_fflush_r+0x128>
    333c:	9080030b 	ldhu	r2,12(r18)
    3340:	91000417 	ldw	r4,16(r18)
    3344:	90000115 	stw	zero,4(r18)
    3348:	10bdffcc 	andi	r2,r2,63487
    334c:	10ffffcc 	andi	r3,r2,65535
    3350:	18c4000c 	andi	r3,r3,4096
    3354:	9080030d 	sth	r2,12(r18)
    3358:	91000015 	stw	r4,0(r18)
    335c:	18002b26 	beq	r3,zero,340c <_fflush_r+0x160>
    3360:	0007883a 	mov	r3,zero
    3364:	1805883a 	mov	r2,r3
    3368:	94001415 	stw	r16,80(r18)
    336c:	dfc00417 	ldw	ra,16(sp)
    3370:	dcc00317 	ldw	r19,12(sp)
    3374:	dc800217 	ldw	r18,8(sp)
    3378:	dc400117 	ldw	r17,4(sp)
    337c:	dc000017 	ldw	r16,0(sp)
    3380:	dec00504 	addi	sp,sp,20
    3384:	f800283a 	ret
    3388:	94400417 	ldw	r17,16(r18)
    338c:	88001f26 	beq	r17,zero,340c <_fflush_r+0x160>
    3390:	90800017 	ldw	r2,0(r18)
    3394:	18c000cc 	andi	r3,r3,3
    3398:	94400015 	stw	r17,0(r18)
    339c:	1461c83a 	sub	r16,r2,r17
    33a0:	18002526 	beq	r3,zero,3438 <_fflush_r+0x18c>
    33a4:	0005883a 	mov	r2,zero
    33a8:	90800215 	stw	r2,8(r18)
    33ac:	0400170e 	bge	zero,r16,340c <_fflush_r+0x160>
    33b0:	90c00917 	ldw	r3,36(r18)
    33b4:	91400717 	ldw	r5,28(r18)
    33b8:	880d883a 	mov	r6,r17
    33bc:	800f883a 	mov	r7,r16
    33c0:	9809883a 	mov	r4,r19
    33c4:	183ee83a 	callr	r3
    33c8:	88a3883a 	add	r17,r17,r2
    33cc:	80a1c83a 	sub	r16,r16,r2
    33d0:	00bff616 	blt	zero,r2,33ac <_fflush_r+0x100>
    33d4:	9080030b 	ldhu	r2,12(r18)
    33d8:	00ffffc4 	movi	r3,-1
    33dc:	10801014 	ori	r2,r2,64
    33e0:	9080030d 	sth	r2,12(r18)
    33e4:	1805883a 	mov	r2,r3
    33e8:	dfc00417 	ldw	ra,16(sp)
    33ec:	dcc00317 	ldw	r19,12(sp)
    33f0:	dc800217 	ldw	r18,8(sp)
    33f4:	dc400117 	ldw	r17,4(sp)
    33f8:	dc000017 	ldw	r16,0(sp)
    33fc:	dec00504 	addi	sp,sp,20
    3400:	f800283a 	ret
    3404:	90800f17 	ldw	r2,60(r18)
    3408:	00bfbe16 	blt	zero,r2,3304 <_fflush_r+0x58>
    340c:	0007883a 	mov	r3,zero
    3410:	1805883a 	mov	r2,r3
    3414:	dfc00417 	ldw	ra,16(sp)
    3418:	dcc00317 	ldw	r19,12(sp)
    341c:	dc800217 	ldw	r18,8(sp)
    3420:	dc400117 	ldw	r17,4(sp)
    3424:	dc000017 	ldw	r16,0(sp)
    3428:	dec00504 	addi	sp,sp,20
    342c:	f800283a 	ret
    3430:	00035440 	call	3544 <__sinit>
    3434:	003fa806 	br	32d8 <_fflush_r+0x2c>
    3438:	90800517 	ldw	r2,20(r18)
    343c:	90800215 	stw	r2,8(r18)
    3440:	003fda06 	br	33ac <_fflush_r+0x100>
    3444:	90800117 	ldw	r2,4(r18)
    3448:	90c00c17 	ldw	r3,48(r18)
    344c:	80a1c83a 	sub	r16,r16,r2
    3450:	183fb426 	beq	r3,zero,3324 <_fflush_r+0x78>
    3454:	90800f17 	ldw	r2,60(r18)
    3458:	80a1c83a 	sub	r16,r16,r2
    345c:	003fb106 	br	3324 <_fflush_r+0x78>
    3460:	91400717 	ldw	r5,28(r18)
    3464:	9809883a 	mov	r4,r19
    3468:	000d883a 	mov	r6,zero
    346c:	01c00044 	movi	r7,1
    3470:	403ee83a 	callr	r8
    3474:	1021883a 	mov	r16,r2
    3478:	00bfffc4 	movi	r2,-1
    347c:	80800226 	beq	r16,r2,3488 <_fflush_r+0x1dc>
    3480:	92000a17 	ldw	r8,40(r18)
    3484:	003fa406 	br	3318 <_fflush_r+0x6c>
    3488:	98c00017 	ldw	r3,0(r19)
    348c:	00800744 	movi	r2,29
    3490:	18bfde26 	beq	r3,r2,340c <_fflush_r+0x160>
    3494:	9080030b 	ldhu	r2,12(r18)
    3498:	8007883a 	mov	r3,r16
    349c:	10801014 	ori	r2,r2,64
    34a0:	9080030d 	sth	r2,12(r18)
    34a4:	003fcf06 	br	33e4 <_fflush_r+0x138>

000034a8 <fflush>:
    34a8:	01400034 	movhi	r5,0
    34ac:	294cab04 	addi	r5,r5,12972
    34b0:	2007883a 	mov	r3,r4
    34b4:	20000526 	beq	r4,zero,34cc <fflush+0x24>
    34b8:	00800034 	movhi	r2,0
    34bc:	109bc504 	addi	r2,r2,28436
    34c0:	11000017 	ldw	r4,0(r2)
    34c4:	180b883a 	mov	r5,r3
    34c8:	00032ac1 	jmpi	32ac <_fflush_r>
    34cc:	00800034 	movhi	r2,0
    34d0:	109bc604 	addi	r2,r2,28440
    34d4:	11000017 	ldw	r4,0(r2)
    34d8:	0003bdc1 	jmpi	3bdc <_fwalk_reent>

000034dc <std>:
    34dc:	00800034 	movhi	r2,0
    34e0:	1091ce04 	addi	r2,r2,18232
    34e4:	20800b15 	stw	r2,44(r4)
    34e8:	00800034 	movhi	r2,0
    34ec:	10920904 	addi	r2,r2,18468
    34f0:	20800815 	stw	r2,32(r4)
    34f4:	00c00034 	movhi	r3,0
    34f8:	18d1ea04 	addi	r3,r3,18344
    34fc:	00800034 	movhi	r2,0
    3500:	1091d004 	addi	r2,r2,18240
    3504:	2140030d 	sth	r5,12(r4)
    3508:	2180038d 	sth	r6,14(r4)
    350c:	20c00915 	stw	r3,36(r4)
    3510:	20800a15 	stw	r2,40(r4)
    3514:	20000015 	stw	zero,0(r4)
    3518:	20000115 	stw	zero,4(r4)
    351c:	20000215 	stw	zero,8(r4)
    3520:	20000415 	stw	zero,16(r4)
    3524:	20000515 	stw	zero,20(r4)
    3528:	20000615 	stw	zero,24(r4)
    352c:	21000715 	stw	r4,28(r4)
    3530:	f800283a 	ret

00003534 <__sfp_lock_acquire>:
    3534:	f800283a 	ret

00003538 <__sfp_lock_release>:
    3538:	f800283a 	ret

0000353c <__sinit_lock_acquire>:
    353c:	f800283a 	ret

00003540 <__sinit_lock_release>:
    3540:	f800283a 	ret

00003544 <__sinit>:
    3544:	20800e17 	ldw	r2,56(r4)
    3548:	defffd04 	addi	sp,sp,-12
    354c:	dc400115 	stw	r17,4(sp)
    3550:	dc000015 	stw	r16,0(sp)
    3554:	dfc00215 	stw	ra,8(sp)
    3558:	04400044 	movi	r17,1
    355c:	01400104 	movi	r5,4
    3560:	000d883a 	mov	r6,zero
    3564:	2021883a 	mov	r16,r4
    3568:	2200bb04 	addi	r8,r4,748
    356c:	200f883a 	mov	r7,r4
    3570:	10000526 	beq	r2,zero,3588 <__sinit+0x44>
    3574:	dfc00217 	ldw	ra,8(sp)
    3578:	dc400117 	ldw	r17,4(sp)
    357c:	dc000017 	ldw	r16,0(sp)
    3580:	dec00304 	addi	sp,sp,12
    3584:	f800283a 	ret
    3588:	21000117 	ldw	r4,4(r4)
    358c:	00800034 	movhi	r2,0
    3590:	108d8a04 	addi	r2,r2,13864
    3594:	00c000c4 	movi	r3,3
    3598:	80800f15 	stw	r2,60(r16)
    359c:	80c0b915 	stw	r3,740(r16)
    35a0:	8200ba15 	stw	r8,744(r16)
    35a4:	84400e15 	stw	r17,56(r16)
    35a8:	8000b815 	stw	zero,736(r16)
    35ac:	00034dc0 	call	34dc <std>
    35b0:	81000217 	ldw	r4,8(r16)
    35b4:	880d883a 	mov	r6,r17
    35b8:	800f883a 	mov	r7,r16
    35bc:	01400284 	movi	r5,10
    35c0:	00034dc0 	call	34dc <std>
    35c4:	81000317 	ldw	r4,12(r16)
    35c8:	800f883a 	mov	r7,r16
    35cc:	01400484 	movi	r5,18
    35d0:	01800084 	movi	r6,2
    35d4:	dfc00217 	ldw	ra,8(sp)
    35d8:	dc400117 	ldw	r17,4(sp)
    35dc:	dc000017 	ldw	r16,0(sp)
    35e0:	dec00304 	addi	sp,sp,12
    35e4:	00034dc1 	jmpi	34dc <std>

000035e8 <__fp_lock>:
    35e8:	0005883a 	mov	r2,zero
    35ec:	f800283a 	ret

000035f0 <__fp_unlock>:
    35f0:	0005883a 	mov	r2,zero
    35f4:	f800283a 	ret

000035f8 <__fp_unlock_all>:
    35f8:	00800034 	movhi	r2,0
    35fc:	109bc504 	addi	r2,r2,28436
    3600:	11000017 	ldw	r4,0(r2)
    3604:	01400034 	movhi	r5,0
    3608:	294d7c04 	addi	r5,r5,13808
    360c:	0003ca41 	jmpi	3ca4 <_fwalk>

00003610 <__fp_lock_all>:
    3610:	00800034 	movhi	r2,0
    3614:	109bc504 	addi	r2,r2,28436
    3618:	11000017 	ldw	r4,0(r2)
    361c:	01400034 	movhi	r5,0
    3620:	294d7a04 	addi	r5,r5,13800
    3624:	0003ca41 	jmpi	3ca4 <_fwalk>

00003628 <_cleanup_r>:
    3628:	01400034 	movhi	r5,0
    362c:	29529f04 	addi	r5,r5,19068
    3630:	0003ca41 	jmpi	3ca4 <_fwalk>

00003634 <_cleanup>:
    3634:	00800034 	movhi	r2,0
    3638:	109bc604 	addi	r2,r2,28440
    363c:	11000017 	ldw	r4,0(r2)
    3640:	00036281 	jmpi	3628 <_cleanup_r>

00003644 <__sfmoreglue>:
    3644:	defffc04 	addi	sp,sp,-16
    3648:	dc400115 	stw	r17,4(sp)
    364c:	2c401724 	muli	r17,r5,92
    3650:	dc800215 	stw	r18,8(sp)
    3654:	2825883a 	mov	r18,r5
    3658:	89400304 	addi	r5,r17,12
    365c:	dc000015 	stw	r16,0(sp)
    3660:	dfc00315 	stw	ra,12(sp)
    3664:	0003ef00 	call	3ef0 <_malloc_r>
    3668:	0021883a 	mov	r16,zero
    366c:	880d883a 	mov	r6,r17
    3670:	000b883a 	mov	r5,zero
    3674:	10000626 	beq	r2,zero,3690 <__sfmoreglue+0x4c>
    3678:	11000304 	addi	r4,r2,12
    367c:	14800115 	stw	r18,4(r2)
    3680:	10000015 	stw	zero,0(r2)
    3684:	11000215 	stw	r4,8(r2)
    3688:	1021883a 	mov	r16,r2
    368c:	00046300 	call	4630 <memset>
    3690:	8005883a 	mov	r2,r16
    3694:	dfc00317 	ldw	ra,12(sp)
    3698:	dc800217 	ldw	r18,8(sp)
    369c:	dc400117 	ldw	r17,4(sp)
    36a0:	dc000017 	ldw	r16,0(sp)
    36a4:	dec00404 	addi	sp,sp,16
    36a8:	f800283a 	ret

000036ac <__sfp>:
    36ac:	defffd04 	addi	sp,sp,-12
    36b0:	00800034 	movhi	r2,0
    36b4:	109bc604 	addi	r2,r2,28440
    36b8:	dc000015 	stw	r16,0(sp)
    36bc:	14000017 	ldw	r16,0(r2)
    36c0:	dc400115 	stw	r17,4(sp)
    36c4:	dfc00215 	stw	ra,8(sp)
    36c8:	80800e17 	ldw	r2,56(r16)
    36cc:	2023883a 	mov	r17,r4
    36d0:	10002626 	beq	r2,zero,376c <__sfp+0xc0>
    36d4:	8400b804 	addi	r16,r16,736
    36d8:	80800117 	ldw	r2,4(r16)
    36dc:	81000217 	ldw	r4,8(r16)
    36e0:	10ffffc4 	addi	r3,r2,-1
    36e4:	18000916 	blt	r3,zero,370c <__sfp+0x60>
    36e8:	2080030f 	ldh	r2,12(r4)
    36ec:	10000b26 	beq	r2,zero,371c <__sfp+0x70>
    36f0:	017fffc4 	movi	r5,-1
    36f4:	00000206 	br	3700 <__sfp+0x54>
    36f8:	2080030f 	ldh	r2,12(r4)
    36fc:	10000726 	beq	r2,zero,371c <__sfp+0x70>
    3700:	18ffffc4 	addi	r3,r3,-1
    3704:	21001704 	addi	r4,r4,92
    3708:	197ffb1e 	bne	r3,r5,36f8 <__sfp+0x4c>
    370c:	80800017 	ldw	r2,0(r16)
    3710:	10001926 	beq	r2,zero,3778 <__sfp+0xcc>
    3714:	1021883a 	mov	r16,r2
    3718:	003fef06 	br	36d8 <__sfp+0x2c>
    371c:	00bfffc4 	movi	r2,-1
    3720:	00c00044 	movi	r3,1
    3724:	2080038d 	sth	r2,14(r4)
    3728:	20c0030d 	sth	r3,12(r4)
    372c:	20000015 	stw	zero,0(r4)
    3730:	20000215 	stw	zero,8(r4)
    3734:	20000115 	stw	zero,4(r4)
    3738:	20000415 	stw	zero,16(r4)
    373c:	20000515 	stw	zero,20(r4)
    3740:	20000615 	stw	zero,24(r4)
    3744:	20000c15 	stw	zero,48(r4)
    3748:	20000d15 	stw	zero,52(r4)
    374c:	20001115 	stw	zero,68(r4)
    3750:	20001215 	stw	zero,72(r4)
    3754:	2005883a 	mov	r2,r4
    3758:	dfc00217 	ldw	ra,8(sp)
    375c:	dc400117 	ldw	r17,4(sp)
    3760:	dc000017 	ldw	r16,0(sp)
    3764:	dec00304 	addi	sp,sp,12
    3768:	f800283a 	ret
    376c:	8009883a 	mov	r4,r16
    3770:	00035440 	call	3544 <__sinit>
    3774:	003fd706 	br	36d4 <__sfp+0x28>
    3778:	8809883a 	mov	r4,r17
    377c:	01400104 	movi	r5,4
    3780:	00036440 	call	3644 <__sfmoreglue>
    3784:	80800015 	stw	r2,0(r16)
    3788:	103fe21e 	bne	r2,zero,3714 <__sfp+0x68>
    378c:	00800304 	movi	r2,12
    3790:	0009883a 	mov	r4,zero
    3794:	88800015 	stw	r2,0(r17)
    3798:	003fee06 	br	3754 <__sfp+0xa8>

0000379c <_malloc_trim_r>:
    379c:	defffb04 	addi	sp,sp,-20
    37a0:	dcc00315 	stw	r19,12(sp)
    37a4:	04c00034 	movhi	r19,0
    37a8:	9cdaba04 	addi	r19,r19,27368
    37ac:	dc800215 	stw	r18,8(sp)
    37b0:	dc400115 	stw	r17,4(sp)
    37b4:	dc000015 	stw	r16,0(sp)
    37b8:	2823883a 	mov	r17,r5
    37bc:	2025883a 	mov	r18,r4
    37c0:	dfc00415 	stw	ra,16(sp)
    37c4:	0004e140 	call	4e14 <__malloc_lock>
    37c8:	98800217 	ldw	r2,8(r19)
    37cc:	9009883a 	mov	r4,r18
    37d0:	000b883a 	mov	r5,zero
    37d4:	10c00117 	ldw	r3,4(r2)
    37d8:	00bfff04 	movi	r2,-4
    37dc:	18a0703a 	and	r16,r3,r2
    37e0:	8463c83a 	sub	r17,r16,r17
    37e4:	8c43fbc4 	addi	r17,r17,4079
    37e8:	8822d33a 	srli	r17,r17,12
    37ec:	0083ffc4 	movi	r2,4095
    37f0:	8c7fffc4 	addi	r17,r17,-1
    37f4:	8822933a 	slli	r17,r17,12
    37f8:	1440060e 	bge	r2,r17,3814 <_malloc_trim_r+0x78>
    37fc:	00046c80 	call	46c8 <_sbrk_r>
    3800:	98c00217 	ldw	r3,8(r19)
    3804:	9009883a 	mov	r4,r18
    3808:	044bc83a 	sub	r5,zero,r17
    380c:	80c7883a 	add	r3,r16,r3
    3810:	10c00926 	beq	r2,r3,3838 <_malloc_trim_r+0x9c>
    3814:	0004e180 	call	4e18 <__malloc_unlock>
    3818:	0005883a 	mov	r2,zero
    381c:	dfc00417 	ldw	ra,16(sp)
    3820:	dcc00317 	ldw	r19,12(sp)
    3824:	dc800217 	ldw	r18,8(sp)
    3828:	dc400117 	ldw	r17,4(sp)
    382c:	dc000017 	ldw	r16,0(sp)
    3830:	dec00504 	addi	sp,sp,20
    3834:	f800283a 	ret
    3838:	9009883a 	mov	r4,r18
    383c:	00046c80 	call	46c8 <_sbrk_r>
    3840:	844dc83a 	sub	r6,r16,r17
    3844:	00ffffc4 	movi	r3,-1
    3848:	9009883a 	mov	r4,r18
    384c:	000b883a 	mov	r5,zero
    3850:	01c00074 	movhi	r7,1
    3854:	39e30b04 	addi	r7,r7,-29652
    3858:	31800054 	ori	r6,r6,1
    385c:	10c00926 	beq	r2,r3,3884 <_malloc_trim_r+0xe8>
    3860:	38800017 	ldw	r2,0(r7)
    3864:	98c00217 	ldw	r3,8(r19)
    3868:	9009883a 	mov	r4,r18
    386c:	1445c83a 	sub	r2,r2,r17
    3870:	38800015 	stw	r2,0(r7)
    3874:	19800115 	stw	r6,4(r3)
    3878:	0004e180 	call	4e18 <__malloc_unlock>
    387c:	00800044 	movi	r2,1
    3880:	003fe606 	br	381c <_malloc_trim_r+0x80>
    3884:	00046c80 	call	46c8 <_sbrk_r>
    3888:	99800217 	ldw	r6,8(r19)
    388c:	100f883a 	mov	r7,r2
    3890:	9009883a 	mov	r4,r18
    3894:	1187c83a 	sub	r3,r2,r6
    3898:	008003c4 	movi	r2,15
    389c:	19400054 	ori	r5,r3,1
    38a0:	10ffdc0e 	bge	r2,r3,3814 <_malloc_trim_r+0x78>
    38a4:	00800034 	movhi	r2,0
    38a8:	109bc804 	addi	r2,r2,28448
    38ac:	10c00017 	ldw	r3,0(r2)
    38b0:	00800074 	movhi	r2,1
    38b4:	10a30b04 	addi	r2,r2,-29652
    38b8:	31400115 	stw	r5,4(r6)
    38bc:	38c7c83a 	sub	r3,r7,r3
    38c0:	10c00015 	stw	r3,0(r2)
    38c4:	003fd306 	br	3814 <_malloc_trim_r+0x78>

000038c8 <_free_r>:
    38c8:	defffd04 	addi	sp,sp,-12
    38cc:	dc400115 	stw	r17,4(sp)
    38d0:	dc000015 	stw	r16,0(sp)
    38d4:	dfc00215 	stw	ra,8(sp)
    38d8:	2821883a 	mov	r16,r5
    38dc:	2023883a 	mov	r17,r4
    38e0:	28005a26 	beq	r5,zero,3a4c <_free_r+0x184>
    38e4:	0004e140 	call	4e14 <__malloc_lock>
    38e8:	823ffe04 	addi	r8,r16,-8
    38ec:	41400117 	ldw	r5,4(r8)
    38f0:	00bfff84 	movi	r2,-2
    38f4:	02800034 	movhi	r10,0
    38f8:	529aba04 	addi	r10,r10,27368
    38fc:	288e703a 	and	r7,r5,r2
    3900:	41cd883a 	add	r6,r8,r7
    3904:	30c00117 	ldw	r3,4(r6)
    3908:	51000217 	ldw	r4,8(r10)
    390c:	00bfff04 	movi	r2,-4
    3910:	1892703a 	and	r9,r3,r2
    3914:	5017883a 	mov	r11,r10
    3918:	31006726 	beq	r6,r4,3ab8 <_free_r+0x1f0>
    391c:	2880004c 	andi	r2,r5,1
    3920:	1005003a 	cmpeq	r2,r2,zero
    3924:	32400115 	stw	r9,4(r6)
    3928:	10001a1e 	bne	r2,zero,3994 <_free_r+0xcc>
    392c:	000b883a 	mov	r5,zero
    3930:	3247883a 	add	r3,r6,r9
    3934:	18800117 	ldw	r2,4(r3)
    3938:	1080004c 	andi	r2,r2,1
    393c:	1000231e 	bne	r2,zero,39cc <_free_r+0x104>
    3940:	280ac03a 	cmpne	r5,r5,zero
    3944:	3a4f883a 	add	r7,r7,r9
    3948:	2800451e 	bne	r5,zero,3a60 <_free_r+0x198>
    394c:	31000217 	ldw	r4,8(r6)
    3950:	00800034 	movhi	r2,0
    3954:	109abc04 	addi	r2,r2,27376
    3958:	20807b26 	beq	r4,r2,3b48 <_free_r+0x280>
    395c:	30800317 	ldw	r2,12(r6)
    3960:	3a07883a 	add	r3,r7,r8
    3964:	19c00015 	stw	r7,0(r3)
    3968:	11000215 	stw	r4,8(r2)
    396c:	20800315 	stw	r2,12(r4)
    3970:	38800054 	ori	r2,r7,1
    3974:	40800115 	stw	r2,4(r8)
    3978:	28001a26 	beq	r5,zero,39e4 <_free_r+0x11c>
    397c:	8809883a 	mov	r4,r17
    3980:	dfc00217 	ldw	ra,8(sp)
    3984:	dc400117 	ldw	r17,4(sp)
    3988:	dc000017 	ldw	r16,0(sp)
    398c:	dec00304 	addi	sp,sp,12
    3990:	0004e181 	jmpi	4e18 <__malloc_unlock>
    3994:	80bffe17 	ldw	r2,-8(r16)
    3998:	50c00204 	addi	r3,r10,8
    399c:	4091c83a 	sub	r8,r8,r2
    39a0:	41000217 	ldw	r4,8(r8)
    39a4:	388f883a 	add	r7,r7,r2
    39a8:	20c06126 	beq	r4,r3,3b30 <_free_r+0x268>
    39ac:	40800317 	ldw	r2,12(r8)
    39b0:	3247883a 	add	r3,r6,r9
    39b4:	000b883a 	mov	r5,zero
    39b8:	11000215 	stw	r4,8(r2)
    39bc:	20800315 	stw	r2,12(r4)
    39c0:	18800117 	ldw	r2,4(r3)
    39c4:	1080004c 	andi	r2,r2,1
    39c8:	103fdd26 	beq	r2,zero,3940 <_free_r+0x78>
    39cc:	38800054 	ori	r2,r7,1
    39d0:	3a07883a 	add	r3,r7,r8
    39d4:	280ac03a 	cmpne	r5,r5,zero
    39d8:	40800115 	stw	r2,4(r8)
    39dc:	19c00015 	stw	r7,0(r3)
    39e0:	283fe61e 	bne	r5,zero,397c <_free_r+0xb4>
    39e4:	00807fc4 	movi	r2,511
    39e8:	11c01f2e 	bgeu	r2,r7,3a68 <_free_r+0x1a0>
    39ec:	3806d27a 	srli	r3,r7,9
    39f0:	1800481e 	bne	r3,zero,3b14 <_free_r+0x24c>
    39f4:	3804d0fa 	srli	r2,r7,3
    39f8:	100690fa 	slli	r3,r2,3
    39fc:	1acd883a 	add	r6,r3,r11
    3a00:	31400217 	ldw	r5,8(r6)
    3a04:	31405926 	beq	r6,r5,3b6c <_free_r+0x2a4>
    3a08:	28800117 	ldw	r2,4(r5)
    3a0c:	00ffff04 	movi	r3,-4
    3a10:	10c4703a 	and	r2,r2,r3
    3a14:	3880022e 	bgeu	r7,r2,3a20 <_free_r+0x158>
    3a18:	29400217 	ldw	r5,8(r5)
    3a1c:	317ffa1e 	bne	r6,r5,3a08 <_free_r+0x140>
    3a20:	29800317 	ldw	r6,12(r5)
    3a24:	41800315 	stw	r6,12(r8)
    3a28:	41400215 	stw	r5,8(r8)
    3a2c:	8809883a 	mov	r4,r17
    3a30:	2a000315 	stw	r8,12(r5)
    3a34:	32000215 	stw	r8,8(r6)
    3a38:	dfc00217 	ldw	ra,8(sp)
    3a3c:	dc400117 	ldw	r17,4(sp)
    3a40:	dc000017 	ldw	r16,0(sp)
    3a44:	dec00304 	addi	sp,sp,12
    3a48:	0004e181 	jmpi	4e18 <__malloc_unlock>
    3a4c:	dfc00217 	ldw	ra,8(sp)
    3a50:	dc400117 	ldw	r17,4(sp)
    3a54:	dc000017 	ldw	r16,0(sp)
    3a58:	dec00304 	addi	sp,sp,12
    3a5c:	f800283a 	ret
    3a60:	31000217 	ldw	r4,8(r6)
    3a64:	003fbd06 	br	395c <_free_r+0x94>
    3a68:	3806d0fa 	srli	r3,r7,3
    3a6c:	00800044 	movi	r2,1
    3a70:	51400117 	ldw	r5,4(r10)
    3a74:	180890fa 	slli	r4,r3,3
    3a78:	1807d0ba 	srai	r3,r3,2
    3a7c:	22c9883a 	add	r4,r4,r11
    3a80:	21800217 	ldw	r6,8(r4)
    3a84:	10c4983a 	sll	r2,r2,r3
    3a88:	41000315 	stw	r4,12(r8)
    3a8c:	41800215 	stw	r6,8(r8)
    3a90:	288ab03a 	or	r5,r5,r2
    3a94:	22000215 	stw	r8,8(r4)
    3a98:	8809883a 	mov	r4,r17
    3a9c:	51400115 	stw	r5,4(r10)
    3aa0:	32000315 	stw	r8,12(r6)
    3aa4:	dfc00217 	ldw	ra,8(sp)
    3aa8:	dc400117 	ldw	r17,4(sp)
    3aac:	dc000017 	ldw	r16,0(sp)
    3ab0:	dec00304 	addi	sp,sp,12
    3ab4:	0004e181 	jmpi	4e18 <__malloc_unlock>
    3ab8:	2880004c 	andi	r2,r5,1
    3abc:	3a4d883a 	add	r6,r7,r9
    3ac0:	1000071e 	bne	r2,zero,3ae0 <_free_r+0x218>
    3ac4:	80bffe17 	ldw	r2,-8(r16)
    3ac8:	4091c83a 	sub	r8,r8,r2
    3acc:	41000317 	ldw	r4,12(r8)
    3ad0:	40c00217 	ldw	r3,8(r8)
    3ad4:	308d883a 	add	r6,r6,r2
    3ad8:	20c00215 	stw	r3,8(r4)
    3adc:	19000315 	stw	r4,12(r3)
    3ae0:	00800034 	movhi	r2,0
    3ae4:	109bc704 	addi	r2,r2,28444
    3ae8:	11000017 	ldw	r4,0(r2)
    3aec:	30c00054 	ori	r3,r6,1
    3af0:	52000215 	stw	r8,8(r10)
    3af4:	40c00115 	stw	r3,4(r8)
    3af8:	313fa036 	bltu	r6,r4,397c <_free_r+0xb4>
    3afc:	00800074 	movhi	r2,1
    3b00:	10a30804 	addi	r2,r2,-29664
    3b04:	11400017 	ldw	r5,0(r2)
    3b08:	8809883a 	mov	r4,r17
    3b0c:	000379c0 	call	379c <_malloc_trim_r>
    3b10:	003f9a06 	br	397c <_free_r+0xb4>
    3b14:	00800104 	movi	r2,4
    3b18:	10c0072e 	bgeu	r2,r3,3b38 <_free_r+0x270>
    3b1c:	00800504 	movi	r2,20
    3b20:	10c01936 	bltu	r2,r3,3b88 <_free_r+0x2c0>
    3b24:	188016c4 	addi	r2,r3,91
    3b28:	100690fa 	slli	r3,r2,3
    3b2c:	003fb306 	br	39fc <_free_r+0x134>
    3b30:	01400044 	movi	r5,1
    3b34:	003f7e06 	br	3930 <_free_r+0x68>
    3b38:	3804d1ba 	srli	r2,r7,6
    3b3c:	10800e04 	addi	r2,r2,56
    3b40:	100690fa 	slli	r3,r2,3
    3b44:	003fad06 	br	39fc <_free_r+0x134>
    3b48:	22000315 	stw	r8,12(r4)
    3b4c:	22000215 	stw	r8,8(r4)
    3b50:	3a05883a 	add	r2,r7,r8
    3b54:	38c00054 	ori	r3,r7,1
    3b58:	11c00015 	stw	r7,0(r2)
    3b5c:	41000215 	stw	r4,8(r8)
    3b60:	40c00115 	stw	r3,4(r8)
    3b64:	41000315 	stw	r4,12(r8)
    3b68:	003f8406 	br	397c <_free_r+0xb4>
    3b6c:	1005d0ba 	srai	r2,r2,2
    3b70:	00c00044 	movi	r3,1
    3b74:	51000117 	ldw	r4,4(r10)
    3b78:	1886983a 	sll	r3,r3,r2
    3b7c:	20c8b03a 	or	r4,r4,r3
    3b80:	51000115 	stw	r4,4(r10)
    3b84:	003fa706 	br	3a24 <_free_r+0x15c>
    3b88:	00801504 	movi	r2,84
    3b8c:	10c00436 	bltu	r2,r3,3ba0 <_free_r+0x2d8>
    3b90:	3804d33a 	srli	r2,r7,12
    3b94:	10801b84 	addi	r2,r2,110
    3b98:	100690fa 	slli	r3,r2,3
    3b9c:	003f9706 	br	39fc <_free_r+0x134>
    3ba0:	00805504 	movi	r2,340
    3ba4:	10c00436 	bltu	r2,r3,3bb8 <_free_r+0x2f0>
    3ba8:	3804d3fa 	srli	r2,r7,15
    3bac:	10801dc4 	addi	r2,r2,119
    3bb0:	100690fa 	slli	r3,r2,3
    3bb4:	003f9106 	br	39fc <_free_r+0x134>
    3bb8:	00815504 	movi	r2,1364
    3bbc:	10c0032e 	bgeu	r2,r3,3bcc <_free_r+0x304>
    3bc0:	00801f84 	movi	r2,126
    3bc4:	00c0fc04 	movi	r3,1008
    3bc8:	003f8c06 	br	39fc <_free_r+0x134>
    3bcc:	3804d4ba 	srli	r2,r7,18
    3bd0:	10801f04 	addi	r2,r2,124
    3bd4:	100690fa 	slli	r3,r2,3
    3bd8:	003f8806 	br	39fc <_free_r+0x134>

00003bdc <_fwalk_reent>:
    3bdc:	defff704 	addi	sp,sp,-36
    3be0:	dcc00315 	stw	r19,12(sp)
    3be4:	24c0b804 	addi	r19,r4,736
    3be8:	dd800615 	stw	r22,24(sp)
    3bec:	dd400515 	stw	r21,20(sp)
    3bf0:	dfc00815 	stw	ra,32(sp)
    3bf4:	ddc00715 	stw	r23,28(sp)
    3bf8:	dd000415 	stw	r20,16(sp)
    3bfc:	dc800215 	stw	r18,8(sp)
    3c00:	dc400115 	stw	r17,4(sp)
    3c04:	dc000015 	stw	r16,0(sp)
    3c08:	202b883a 	mov	r21,r4
    3c0c:	282d883a 	mov	r22,r5
    3c10:	00035340 	call	3534 <__sfp_lock_acquire>
    3c14:	98002126 	beq	r19,zero,3c9c <_fwalk_reent+0xc0>
    3c18:	002f883a 	mov	r23,zero
    3c1c:	9c800117 	ldw	r18,4(r19)
    3c20:	9c000217 	ldw	r16,8(r19)
    3c24:	90bfffc4 	addi	r2,r18,-1
    3c28:	10000d16 	blt	r2,zero,3c60 <_fwalk_reent+0x84>
    3c2c:	0023883a 	mov	r17,zero
    3c30:	053fffc4 	movi	r20,-1
    3c34:	8080030f 	ldh	r2,12(r16)
    3c38:	8c400044 	addi	r17,r17,1
    3c3c:	10000626 	beq	r2,zero,3c58 <_fwalk_reent+0x7c>
    3c40:	8080038f 	ldh	r2,14(r16)
    3c44:	800b883a 	mov	r5,r16
    3c48:	a809883a 	mov	r4,r21
    3c4c:	15000226 	beq	r2,r20,3c58 <_fwalk_reent+0x7c>
    3c50:	b03ee83a 	callr	r22
    3c54:	b8aeb03a 	or	r23,r23,r2
    3c58:	84001704 	addi	r16,r16,92
    3c5c:	947ff51e 	bne	r18,r17,3c34 <_fwalk_reent+0x58>
    3c60:	9cc00017 	ldw	r19,0(r19)
    3c64:	983fed1e 	bne	r19,zero,3c1c <_fwalk_reent+0x40>
    3c68:	00035380 	call	3538 <__sfp_lock_release>
    3c6c:	b805883a 	mov	r2,r23
    3c70:	dfc00817 	ldw	ra,32(sp)
    3c74:	ddc00717 	ldw	r23,28(sp)
    3c78:	dd800617 	ldw	r22,24(sp)
    3c7c:	dd400517 	ldw	r21,20(sp)
    3c80:	dd000417 	ldw	r20,16(sp)
    3c84:	dcc00317 	ldw	r19,12(sp)
    3c88:	dc800217 	ldw	r18,8(sp)
    3c8c:	dc400117 	ldw	r17,4(sp)
    3c90:	dc000017 	ldw	r16,0(sp)
    3c94:	dec00904 	addi	sp,sp,36
    3c98:	f800283a 	ret
    3c9c:	002f883a 	mov	r23,zero
    3ca0:	003ff106 	br	3c68 <_fwalk_reent+0x8c>

00003ca4 <_fwalk>:
    3ca4:	defff804 	addi	sp,sp,-32
    3ca8:	dcc00315 	stw	r19,12(sp)
    3cac:	24c0b804 	addi	r19,r4,736
    3cb0:	dd400515 	stw	r21,20(sp)
    3cb4:	dfc00715 	stw	ra,28(sp)
    3cb8:	dd800615 	stw	r22,24(sp)
    3cbc:	dd000415 	stw	r20,16(sp)
    3cc0:	dc800215 	stw	r18,8(sp)
    3cc4:	dc400115 	stw	r17,4(sp)
    3cc8:	dc000015 	stw	r16,0(sp)
    3ccc:	282b883a 	mov	r21,r5
    3cd0:	00035340 	call	3534 <__sfp_lock_acquire>
    3cd4:	98001f26 	beq	r19,zero,3d54 <_fwalk+0xb0>
    3cd8:	002d883a 	mov	r22,zero
    3cdc:	9c800117 	ldw	r18,4(r19)
    3ce0:	9c000217 	ldw	r16,8(r19)
    3ce4:	90bfffc4 	addi	r2,r18,-1
    3ce8:	10000c16 	blt	r2,zero,3d1c <_fwalk+0x78>
    3cec:	0023883a 	mov	r17,zero
    3cf0:	053fffc4 	movi	r20,-1
    3cf4:	8080030f 	ldh	r2,12(r16)
    3cf8:	8c400044 	addi	r17,r17,1
    3cfc:	10000526 	beq	r2,zero,3d14 <_fwalk+0x70>
    3d00:	8080038f 	ldh	r2,14(r16)
    3d04:	8009883a 	mov	r4,r16
    3d08:	15000226 	beq	r2,r20,3d14 <_fwalk+0x70>
    3d0c:	a83ee83a 	callr	r21
    3d10:	b0acb03a 	or	r22,r22,r2
    3d14:	84001704 	addi	r16,r16,92
    3d18:	947ff61e 	bne	r18,r17,3cf4 <_fwalk+0x50>
    3d1c:	9cc00017 	ldw	r19,0(r19)
    3d20:	983fee1e 	bne	r19,zero,3cdc <_fwalk+0x38>
    3d24:	00035380 	call	3538 <__sfp_lock_release>
    3d28:	b005883a 	mov	r2,r22
    3d2c:	dfc00717 	ldw	ra,28(sp)
    3d30:	dd800617 	ldw	r22,24(sp)
    3d34:	dd400517 	ldw	r21,20(sp)
    3d38:	dd000417 	ldw	r20,16(sp)
    3d3c:	dcc00317 	ldw	r19,12(sp)
    3d40:	dc800217 	ldw	r18,8(sp)
    3d44:	dc400117 	ldw	r17,4(sp)
    3d48:	dc000017 	ldw	r16,0(sp)
    3d4c:	dec00804 	addi	sp,sp,32
    3d50:	f800283a 	ret
    3d54:	002d883a 	mov	r22,zero
    3d58:	003ff206 	br	3d24 <_fwalk+0x80>

00003d5c <__smakebuf_r>:
    3d5c:	2880030b 	ldhu	r2,12(r5)
    3d60:	deffed04 	addi	sp,sp,-76
    3d64:	dc401015 	stw	r17,64(sp)
    3d68:	1080008c 	andi	r2,r2,2
    3d6c:	dc000f15 	stw	r16,60(sp)
    3d70:	dfc01215 	stw	ra,72(sp)
    3d74:	dc801115 	stw	r18,68(sp)
    3d78:	2821883a 	mov	r16,r5
    3d7c:	2023883a 	mov	r17,r4
    3d80:	10000b26 	beq	r2,zero,3db0 <__smakebuf_r+0x54>
    3d84:	28c010c4 	addi	r3,r5,67
    3d88:	00800044 	movi	r2,1
    3d8c:	28800515 	stw	r2,20(r5)
    3d90:	28c00415 	stw	r3,16(r5)
    3d94:	28c00015 	stw	r3,0(r5)
    3d98:	dfc01217 	ldw	ra,72(sp)
    3d9c:	dc801117 	ldw	r18,68(sp)
    3da0:	dc401017 	ldw	r17,64(sp)
    3da4:	dc000f17 	ldw	r16,60(sp)
    3da8:	dec01304 	addi	sp,sp,76
    3dac:	f800283a 	ret
    3db0:	2940038f 	ldh	r5,14(r5)
    3db4:	28002116 	blt	r5,zero,3e3c <__smakebuf_r+0xe0>
    3db8:	d80d883a 	mov	r6,sp
    3dbc:	0004a900 	call	4a90 <_fstat_r>
    3dc0:	10001e16 	blt	r2,zero,3e3c <__smakebuf_r+0xe0>
    3dc4:	d8800117 	ldw	r2,4(sp)
    3dc8:	00e00014 	movui	r3,32768
    3dcc:	113c000c 	andi	r4,r2,61440
    3dd0:	20c03126 	beq	r4,r3,3e98 <__smakebuf_r+0x13c>
    3dd4:	8080030b 	ldhu	r2,12(r16)
    3dd8:	00c80004 	movi	r3,8192
    3ddc:	10820014 	ori	r2,r2,2048
    3de0:	8080030d 	sth	r2,12(r16)
    3de4:	20c01e26 	beq	r4,r3,3e60 <__smakebuf_r+0x104>
    3de8:	04810004 	movi	r18,1024
    3dec:	8809883a 	mov	r4,r17
    3df0:	900b883a 	mov	r5,r18
    3df4:	0003ef00 	call	3ef0 <_malloc_r>
    3df8:	1009883a 	mov	r4,r2
    3dfc:	10003126 	beq	r2,zero,3ec4 <__smakebuf_r+0x168>
    3e00:	80c0030b 	ldhu	r3,12(r16)
    3e04:	00800034 	movhi	r2,0
    3e08:	108d8a04 	addi	r2,r2,13864
    3e0c:	88800f15 	stw	r2,60(r17)
    3e10:	18c02014 	ori	r3,r3,128
    3e14:	84800515 	stw	r18,20(r16)
    3e18:	80c0030d 	sth	r3,12(r16)
    3e1c:	81000415 	stw	r4,16(r16)
    3e20:	81000015 	stw	r4,0(r16)
    3e24:	dfc01217 	ldw	ra,72(sp)
    3e28:	dc801117 	ldw	r18,68(sp)
    3e2c:	dc401017 	ldw	r17,64(sp)
    3e30:	dc000f17 	ldw	r16,60(sp)
    3e34:	dec01304 	addi	sp,sp,76
    3e38:	f800283a 	ret
    3e3c:	80c0030b 	ldhu	r3,12(r16)
    3e40:	1880200c 	andi	r2,r3,128
    3e44:	10000426 	beq	r2,zero,3e58 <__smakebuf_r+0xfc>
    3e48:	04801004 	movi	r18,64
    3e4c:	18820014 	ori	r2,r3,2048
    3e50:	8080030d 	sth	r2,12(r16)
    3e54:	003fe506 	br	3dec <__smakebuf_r+0x90>
    3e58:	04810004 	movi	r18,1024
    3e5c:	003ffb06 	br	3e4c <__smakebuf_r+0xf0>
    3e60:	8140038f 	ldh	r5,14(r16)
    3e64:	8809883a 	mov	r4,r17
    3e68:	0004b040 	call	4b04 <_isatty_r>
    3e6c:	103fde26 	beq	r2,zero,3de8 <__smakebuf_r+0x8c>
    3e70:	8080030b 	ldhu	r2,12(r16)
    3e74:	80c010c4 	addi	r3,r16,67
    3e78:	04810004 	movi	r18,1024
    3e7c:	10800054 	ori	r2,r2,1
    3e80:	8080030d 	sth	r2,12(r16)
    3e84:	00800044 	movi	r2,1
    3e88:	80c00415 	stw	r3,16(r16)
    3e8c:	80800515 	stw	r2,20(r16)
    3e90:	80c00015 	stw	r3,0(r16)
    3e94:	003fd506 	br	3dec <__smakebuf_r+0x90>
    3e98:	80c00a17 	ldw	r3,40(r16)
    3e9c:	00800034 	movhi	r2,0
    3ea0:	1091d004 	addi	r2,r2,18240
    3ea4:	18bfcb1e 	bne	r3,r2,3dd4 <__smakebuf_r+0x78>
    3ea8:	8080030b 	ldhu	r2,12(r16)
    3eac:	00c10004 	movi	r3,1024
    3eb0:	1825883a 	mov	r18,r3
    3eb4:	10c4b03a 	or	r2,r2,r3
    3eb8:	8080030d 	sth	r2,12(r16)
    3ebc:	80c01315 	stw	r3,76(r16)
    3ec0:	003fca06 	br	3dec <__smakebuf_r+0x90>
    3ec4:	8100030b 	ldhu	r4,12(r16)
    3ec8:	2080800c 	andi	r2,r4,512
    3ecc:	103fb21e 	bne	r2,zero,3d98 <__smakebuf_r+0x3c>
    3ed0:	80c010c4 	addi	r3,r16,67
    3ed4:	21000094 	ori	r4,r4,2
    3ed8:	00800044 	movi	r2,1
    3edc:	80800515 	stw	r2,20(r16)
    3ee0:	8100030d 	sth	r4,12(r16)
    3ee4:	80c00415 	stw	r3,16(r16)
    3ee8:	80c00015 	stw	r3,0(r16)
    3eec:	003faa06 	br	3d98 <__smakebuf_r+0x3c>

00003ef0 <_malloc_r>:
    3ef0:	defff604 	addi	sp,sp,-40
    3ef4:	28c002c4 	addi	r3,r5,11
    3ef8:	00800584 	movi	r2,22
    3efc:	dc800215 	stw	r18,8(sp)
    3f00:	dfc00915 	stw	ra,36(sp)
    3f04:	df000815 	stw	fp,32(sp)
    3f08:	ddc00715 	stw	r23,28(sp)
    3f0c:	dd800615 	stw	r22,24(sp)
    3f10:	dd400515 	stw	r21,20(sp)
    3f14:	dd000415 	stw	r20,16(sp)
    3f18:	dcc00315 	stw	r19,12(sp)
    3f1c:	dc400115 	stw	r17,4(sp)
    3f20:	dc000015 	stw	r16,0(sp)
    3f24:	2025883a 	mov	r18,r4
    3f28:	10c01236 	bltu	r2,r3,3f74 <_malloc_r+0x84>
    3f2c:	04400404 	movi	r17,16
    3f30:	8940142e 	bgeu	r17,r5,3f84 <_malloc_r+0x94>
    3f34:	00800304 	movi	r2,12
    3f38:	0007883a 	mov	r3,zero
    3f3c:	90800015 	stw	r2,0(r18)
    3f40:	1805883a 	mov	r2,r3
    3f44:	dfc00917 	ldw	ra,36(sp)
    3f48:	df000817 	ldw	fp,32(sp)
    3f4c:	ddc00717 	ldw	r23,28(sp)
    3f50:	dd800617 	ldw	r22,24(sp)
    3f54:	dd400517 	ldw	r21,20(sp)
    3f58:	dd000417 	ldw	r20,16(sp)
    3f5c:	dcc00317 	ldw	r19,12(sp)
    3f60:	dc800217 	ldw	r18,8(sp)
    3f64:	dc400117 	ldw	r17,4(sp)
    3f68:	dc000017 	ldw	r16,0(sp)
    3f6c:	dec00a04 	addi	sp,sp,40
    3f70:	f800283a 	ret
    3f74:	00bffe04 	movi	r2,-8
    3f78:	18a2703a 	and	r17,r3,r2
    3f7c:	883fed16 	blt	r17,zero,3f34 <_malloc_r+0x44>
    3f80:	897fec36 	bltu	r17,r5,3f34 <_malloc_r+0x44>
    3f84:	9009883a 	mov	r4,r18
    3f88:	0004e140 	call	4e14 <__malloc_lock>
    3f8c:	00807dc4 	movi	r2,503
    3f90:	14402b2e 	bgeu	r2,r17,4040 <_malloc_r+0x150>
    3f94:	8806d27a 	srli	r3,r17,9
    3f98:	18003f1e 	bne	r3,zero,4098 <_malloc_r+0x1a8>
    3f9c:	880cd0fa 	srli	r6,r17,3
    3fa0:	300490fa 	slli	r2,r6,3
    3fa4:	02c00034 	movhi	r11,0
    3fa8:	5adaba04 	addi	r11,r11,27368
    3fac:	12cb883a 	add	r5,r2,r11
    3fb0:	2c000317 	ldw	r16,12(r5)
    3fb4:	580f883a 	mov	r7,r11
    3fb8:	2c00041e 	bne	r5,r16,3fcc <_malloc_r+0xdc>
    3fbc:	00000a06 	br	3fe8 <_malloc_r+0xf8>
    3fc0:	1800860e 	bge	r3,zero,41dc <_malloc_r+0x2ec>
    3fc4:	84000317 	ldw	r16,12(r16)
    3fc8:	2c000726 	beq	r5,r16,3fe8 <_malloc_r+0xf8>
    3fcc:	80800117 	ldw	r2,4(r16)
    3fd0:	00ffff04 	movi	r3,-4
    3fd4:	10c8703a 	and	r4,r2,r3
    3fd8:	2447c83a 	sub	r3,r4,r17
    3fdc:	008003c4 	movi	r2,15
    3fe0:	10fff70e 	bge	r2,r3,3fc0 <_malloc_r+0xd0>
    3fe4:	31bfffc4 	addi	r6,r6,-1
    3fe8:	32400044 	addi	r9,r6,1
    3fec:	02800034 	movhi	r10,0
    3ff0:	529abc04 	addi	r10,r10,27376
    3ff4:	54000217 	ldw	r16,8(r10)
    3ff8:	8280a026 	beq	r16,r10,427c <_malloc_r+0x38c>
    3ffc:	80800117 	ldw	r2,4(r16)
    4000:	00ffff04 	movi	r3,-4
    4004:	10ca703a 	and	r5,r2,r3
    4008:	2c4dc83a 	sub	r6,r5,r17
    400c:	008003c4 	movi	r2,15
    4010:	11808316 	blt	r2,r6,4220 <_malloc_r+0x330>
    4014:	52800315 	stw	r10,12(r10)
    4018:	52800215 	stw	r10,8(r10)
    401c:	30002916 	blt	r6,zero,40c4 <_malloc_r+0x1d4>
    4020:	8147883a 	add	r3,r16,r5
    4024:	18800117 	ldw	r2,4(r3)
    4028:	9009883a 	mov	r4,r18
    402c:	10800054 	ori	r2,r2,1
    4030:	18800115 	stw	r2,4(r3)
    4034:	0004e180 	call	4e18 <__malloc_unlock>
    4038:	80c00204 	addi	r3,r16,8
    403c:	003fc006 	br	3f40 <_malloc_r+0x50>
    4040:	02c00034 	movhi	r11,0
    4044:	5adaba04 	addi	r11,r11,27368
    4048:	8ac5883a 	add	r2,r17,r11
    404c:	14000317 	ldw	r16,12(r2)
    4050:	580f883a 	mov	r7,r11
    4054:	8806d0fa 	srli	r3,r17,3
    4058:	14006c26 	beq	r2,r16,420c <_malloc_r+0x31c>
    405c:	80c00117 	ldw	r3,4(r16)
    4060:	00bfff04 	movi	r2,-4
    4064:	81800317 	ldw	r6,12(r16)
    4068:	1886703a 	and	r3,r3,r2
    406c:	80c7883a 	add	r3,r16,r3
    4070:	18800117 	ldw	r2,4(r3)
    4074:	81400217 	ldw	r5,8(r16)
    4078:	9009883a 	mov	r4,r18
    407c:	10800054 	ori	r2,r2,1
    4080:	18800115 	stw	r2,4(r3)
    4084:	31400215 	stw	r5,8(r6)
    4088:	29800315 	stw	r6,12(r5)
    408c:	0004e180 	call	4e18 <__malloc_unlock>
    4090:	80c00204 	addi	r3,r16,8
    4094:	003faa06 	br	3f40 <_malloc_r+0x50>
    4098:	00800104 	movi	r2,4
    409c:	10c0052e 	bgeu	r2,r3,40b4 <_malloc_r+0x1c4>
    40a0:	00800504 	movi	r2,20
    40a4:	10c07836 	bltu	r2,r3,4288 <_malloc_r+0x398>
    40a8:	198016c4 	addi	r6,r3,91
    40ac:	300490fa 	slli	r2,r6,3
    40b0:	003fbc06 	br	3fa4 <_malloc_r+0xb4>
    40b4:	8804d1ba 	srli	r2,r17,6
    40b8:	11800e04 	addi	r6,r2,56
    40bc:	300490fa 	slli	r2,r6,3
    40c0:	003fb806 	br	3fa4 <_malloc_r+0xb4>
    40c4:	00807fc4 	movi	r2,511
    40c8:	1140bb36 	bltu	r2,r5,43b8 <_malloc_r+0x4c8>
    40cc:	2806d0fa 	srli	r3,r5,3
    40d0:	573ffe04 	addi	fp,r10,-8
    40d4:	00800044 	movi	r2,1
    40d8:	180890fa 	slli	r4,r3,3
    40dc:	1807d0ba 	srai	r3,r3,2
    40e0:	e1c00117 	ldw	r7,4(fp)
    40e4:	5909883a 	add	r4,r11,r4
    40e8:	21400217 	ldw	r5,8(r4)
    40ec:	10c4983a 	sll	r2,r2,r3
    40f0:	81000315 	stw	r4,12(r16)
    40f4:	81400215 	stw	r5,8(r16)
    40f8:	388eb03a 	or	r7,r7,r2
    40fc:	2c000315 	stw	r16,12(r5)
    4100:	24000215 	stw	r16,8(r4)
    4104:	e1c00115 	stw	r7,4(fp)
    4108:	4807883a 	mov	r3,r9
    410c:	4800cd16 	blt	r9,zero,4444 <_malloc_r+0x554>
    4110:	1807d0ba 	srai	r3,r3,2
    4114:	00800044 	movi	r2,1
    4118:	10c8983a 	sll	r4,r2,r3
    411c:	39004436 	bltu	r7,r4,4230 <_malloc_r+0x340>
    4120:	21c4703a 	and	r2,r4,r7
    4124:	10000a1e 	bne	r2,zero,4150 <_malloc_r+0x260>
    4128:	2109883a 	add	r4,r4,r4
    412c:	00bfff04 	movi	r2,-4
    4130:	4884703a 	and	r2,r9,r2
    4134:	3906703a 	and	r3,r7,r4
    4138:	12400104 	addi	r9,r2,4
    413c:	1800041e 	bne	r3,zero,4150 <_malloc_r+0x260>
    4140:	2109883a 	add	r4,r4,r4
    4144:	3904703a 	and	r2,r7,r4
    4148:	4a400104 	addi	r9,r9,4
    414c:	103ffc26 	beq	r2,zero,4140 <_malloc_r+0x250>
    4150:	480490fa 	slli	r2,r9,3
    4154:	4819883a 	mov	r12,r9
    4158:	023fff04 	movi	r8,-4
    415c:	589b883a 	add	r13,r11,r2
    4160:	6807883a 	mov	r3,r13
    4164:	014003c4 	movi	r5,15
    4168:	1c000317 	ldw	r16,12(r3)
    416c:	1c00041e 	bne	r3,r16,4180 <_malloc_r+0x290>
    4170:	0000a706 	br	4410 <_malloc_r+0x520>
    4174:	3000ab0e 	bge	r6,zero,4424 <_malloc_r+0x534>
    4178:	84000317 	ldw	r16,12(r16)
    417c:	1c00a426 	beq	r3,r16,4410 <_malloc_r+0x520>
    4180:	80800117 	ldw	r2,4(r16)
    4184:	1204703a 	and	r2,r2,r8
    4188:	144dc83a 	sub	r6,r2,r17
    418c:	29bff90e 	bge	r5,r6,4174 <_malloc_r+0x284>
    4190:	81000317 	ldw	r4,12(r16)
    4194:	80c00217 	ldw	r3,8(r16)
    4198:	89400054 	ori	r5,r17,1
    419c:	8445883a 	add	r2,r16,r17
    41a0:	20c00215 	stw	r3,8(r4)
    41a4:	19000315 	stw	r4,12(r3)
    41a8:	81400115 	stw	r5,4(r16)
    41ac:	1187883a 	add	r3,r2,r6
    41b0:	31000054 	ori	r4,r6,1
    41b4:	50800315 	stw	r2,12(r10)
    41b8:	50800215 	stw	r2,8(r10)
    41bc:	19800015 	stw	r6,0(r3)
    41c0:	11000115 	stw	r4,4(r2)
    41c4:	12800215 	stw	r10,8(r2)
    41c8:	12800315 	stw	r10,12(r2)
    41cc:	9009883a 	mov	r4,r18
    41d0:	0004e180 	call	4e18 <__malloc_unlock>
    41d4:	80c00204 	addi	r3,r16,8
    41d8:	003f5906 	br	3f40 <_malloc_r+0x50>
    41dc:	8109883a 	add	r4,r16,r4
    41e0:	20800117 	ldw	r2,4(r4)
    41e4:	80c00217 	ldw	r3,8(r16)
    41e8:	81400317 	ldw	r5,12(r16)
    41ec:	10800054 	ori	r2,r2,1
    41f0:	20800115 	stw	r2,4(r4)
    41f4:	28c00215 	stw	r3,8(r5)
    41f8:	19400315 	stw	r5,12(r3)
    41fc:	9009883a 	mov	r4,r18
    4200:	0004e180 	call	4e18 <__malloc_unlock>
    4204:	80c00204 	addi	r3,r16,8
    4208:	003f4d06 	br	3f40 <_malloc_r+0x50>
    420c:	80800204 	addi	r2,r16,8
    4210:	14000317 	ldw	r16,12(r2)
    4214:	143f911e 	bne	r2,r16,405c <_malloc_r+0x16c>
    4218:	1a400084 	addi	r9,r3,2
    421c:	003f7306 	br	3fec <_malloc_r+0xfc>
    4220:	88c00054 	ori	r3,r17,1
    4224:	8445883a 	add	r2,r16,r17
    4228:	80c00115 	stw	r3,4(r16)
    422c:	003fdf06 	br	41ac <_malloc_r+0x2bc>
    4230:	e4000217 	ldw	r16,8(fp)
    4234:	00bfff04 	movi	r2,-4
    4238:	80c00117 	ldw	r3,4(r16)
    423c:	802d883a 	mov	r22,r16
    4240:	18aa703a 	and	r21,r3,r2
    4244:	ac401636 	bltu	r21,r17,42a0 <_malloc_r+0x3b0>
    4248:	ac49c83a 	sub	r4,r21,r17
    424c:	008003c4 	movi	r2,15
    4250:	1100130e 	bge	r2,r4,42a0 <_malloc_r+0x3b0>
    4254:	88800054 	ori	r2,r17,1
    4258:	8447883a 	add	r3,r16,r17
    425c:	80800115 	stw	r2,4(r16)
    4260:	20800054 	ori	r2,r4,1
    4264:	18800115 	stw	r2,4(r3)
    4268:	e0c00215 	stw	r3,8(fp)
    426c:	9009883a 	mov	r4,r18
    4270:	0004e180 	call	4e18 <__malloc_unlock>
    4274:	80c00204 	addi	r3,r16,8
    4278:	003f3106 	br	3f40 <_malloc_r+0x50>
    427c:	39c00117 	ldw	r7,4(r7)
    4280:	573ffe04 	addi	fp,r10,-8
    4284:	003fa006 	br	4108 <_malloc_r+0x218>
    4288:	00801504 	movi	r2,84
    428c:	10c06736 	bltu	r2,r3,442c <_malloc_r+0x53c>
    4290:	8804d33a 	srli	r2,r17,12
    4294:	11801b84 	addi	r6,r2,110
    4298:	300490fa 	slli	r2,r6,3
    429c:	003f4106 	br	3fa4 <_malloc_r+0xb4>
    42a0:	d0a74c17 	ldw	r2,-25296(gp)
    42a4:	d0e00c17 	ldw	r3,-32720(gp)
    42a8:	053fffc4 	movi	r20,-1
    42ac:	10800404 	addi	r2,r2,16
    42b0:	88a7883a 	add	r19,r17,r2
    42b4:	1d000326 	beq	r3,r20,42c4 <_malloc_r+0x3d4>
    42b8:	98c3ffc4 	addi	r3,r19,4095
    42bc:	00bc0004 	movi	r2,-4096
    42c0:	18a6703a 	and	r19,r3,r2
    42c4:	9009883a 	mov	r4,r18
    42c8:	980b883a 	mov	r5,r19
    42cc:	00046c80 	call	46c8 <_sbrk_r>
    42d0:	1009883a 	mov	r4,r2
    42d4:	15000426 	beq	r2,r20,42e8 <_malloc_r+0x3f8>
    42d8:	854b883a 	add	r5,r16,r21
    42dc:	1029883a 	mov	r20,r2
    42e0:	11405a2e 	bgeu	r2,r5,444c <_malloc_r+0x55c>
    42e4:	87000c26 	beq	r16,fp,4318 <_malloc_r+0x428>
    42e8:	e4000217 	ldw	r16,8(fp)
    42ec:	80c00117 	ldw	r3,4(r16)
    42f0:	00bfff04 	movi	r2,-4
    42f4:	1884703a 	and	r2,r3,r2
    42f8:	14400336 	bltu	r2,r17,4308 <_malloc_r+0x418>
    42fc:	1449c83a 	sub	r4,r2,r17
    4300:	008003c4 	movi	r2,15
    4304:	113fd316 	blt	r2,r4,4254 <_malloc_r+0x364>
    4308:	9009883a 	mov	r4,r18
    430c:	0004e180 	call	4e18 <__malloc_unlock>
    4310:	0007883a 	mov	r3,zero
    4314:	003f0a06 	br	3f40 <_malloc_r+0x50>
    4318:	05c00074 	movhi	r23,1
    431c:	bde30b04 	addi	r23,r23,-29652
    4320:	b8800017 	ldw	r2,0(r23)
    4324:	988d883a 	add	r6,r19,r2
    4328:	b9800015 	stw	r6,0(r23)
    432c:	d0e00c17 	ldw	r3,-32720(gp)
    4330:	00bfffc4 	movi	r2,-1
    4334:	18808e26 	beq	r3,r2,4570 <_malloc_r+0x680>
    4338:	2145c83a 	sub	r2,r4,r5
    433c:	3085883a 	add	r2,r6,r2
    4340:	b8800015 	stw	r2,0(r23)
    4344:	20c001cc 	andi	r3,r4,7
    4348:	18005f1e 	bne	r3,zero,44c8 <_malloc_r+0x5d8>
    434c:	000b883a 	mov	r5,zero
    4350:	a4c5883a 	add	r2,r20,r19
    4354:	1083ffcc 	andi	r2,r2,4095
    4358:	00c40004 	movi	r3,4096
    435c:	1887c83a 	sub	r3,r3,r2
    4360:	28e7883a 	add	r19,r5,r3
    4364:	9009883a 	mov	r4,r18
    4368:	980b883a 	mov	r5,r19
    436c:	00046c80 	call	46c8 <_sbrk_r>
    4370:	1007883a 	mov	r3,r2
    4374:	00bfffc4 	movi	r2,-1
    4378:	18807a26 	beq	r3,r2,4564 <_malloc_r+0x674>
    437c:	1d05c83a 	sub	r2,r3,r20
    4380:	9885883a 	add	r2,r19,r2
    4384:	10c00054 	ori	r3,r2,1
    4388:	b8800017 	ldw	r2,0(r23)
    438c:	a021883a 	mov	r16,r20
    4390:	a0c00115 	stw	r3,4(r20)
    4394:	9885883a 	add	r2,r19,r2
    4398:	b8800015 	stw	r2,0(r23)
    439c:	e5000215 	stw	r20,8(fp)
    43a0:	b7003626 	beq	r22,fp,447c <_malloc_r+0x58c>
    43a4:	018003c4 	movi	r6,15
    43a8:	35404b36 	bltu	r6,r21,44d8 <_malloc_r+0x5e8>
    43ac:	00800044 	movi	r2,1
    43b0:	a0800115 	stw	r2,4(r20)
    43b4:	003fcd06 	br	42ec <_malloc_r+0x3fc>
    43b8:	2808d27a 	srli	r4,r5,9
    43bc:	2000371e 	bne	r4,zero,449c <_malloc_r+0x5ac>
    43c0:	2808d0fa 	srli	r4,r5,3
    43c4:	200690fa 	slli	r3,r4,3
    43c8:	1ad1883a 	add	r8,r3,r11
    43cc:	41800217 	ldw	r6,8(r8)
    43d0:	41805b26 	beq	r8,r6,4540 <_malloc_r+0x650>
    43d4:	30800117 	ldw	r2,4(r6)
    43d8:	00ffff04 	movi	r3,-4
    43dc:	10c4703a 	and	r2,r2,r3
    43e0:	2880022e 	bgeu	r5,r2,43ec <_malloc_r+0x4fc>
    43e4:	31800217 	ldw	r6,8(r6)
    43e8:	41bffa1e 	bne	r8,r6,43d4 <_malloc_r+0x4e4>
    43ec:	32000317 	ldw	r8,12(r6)
    43f0:	39c00117 	ldw	r7,4(r7)
    43f4:	82000315 	stw	r8,12(r16)
    43f8:	81800215 	stw	r6,8(r16)
    43fc:	07000034 	movhi	fp,0
    4400:	e71aba04 	addi	fp,fp,27368
    4404:	34000315 	stw	r16,12(r6)
    4408:	44000215 	stw	r16,8(r8)
    440c:	003f3e06 	br	4108 <_malloc_r+0x218>
    4410:	63000044 	addi	r12,r12,1
    4414:	608000cc 	andi	r2,r12,3
    4418:	10005d26 	beq	r2,zero,4590 <_malloc_r+0x6a0>
    441c:	18c00204 	addi	r3,r3,8
    4420:	003f5106 	br	4168 <_malloc_r+0x278>
    4424:	8089883a 	add	r4,r16,r2
    4428:	003f6d06 	br	41e0 <_malloc_r+0x2f0>
    442c:	00805504 	movi	r2,340
    4430:	10c02036 	bltu	r2,r3,44b4 <_malloc_r+0x5c4>
    4434:	8804d3fa 	srli	r2,r17,15
    4438:	11801dc4 	addi	r6,r2,119
    443c:	300490fa 	slli	r2,r6,3
    4440:	003ed806 	br	3fa4 <_malloc_r+0xb4>
    4444:	48c000c4 	addi	r3,r9,3
    4448:	003f3106 	br	4110 <_malloc_r+0x220>
    444c:	05c00074 	movhi	r23,1
    4450:	bde30b04 	addi	r23,r23,-29652
    4454:	b8800017 	ldw	r2,0(r23)
    4458:	988d883a 	add	r6,r19,r2
    445c:	b9800015 	stw	r6,0(r23)
    4460:	293fb21e 	bne	r5,r4,432c <_malloc_r+0x43c>
    4464:	2083ffcc 	andi	r2,r4,4095
    4468:	103fb01e 	bne	r2,zero,432c <_malloc_r+0x43c>
    446c:	e4000217 	ldw	r16,8(fp)
    4470:	9d45883a 	add	r2,r19,r21
    4474:	10800054 	ori	r2,r2,1
    4478:	80800115 	stw	r2,4(r16)
    447c:	b8c00017 	ldw	r3,0(r23)
    4480:	d0a74d17 	ldw	r2,-25292(gp)
    4484:	10c0012e 	bgeu	r2,r3,448c <_malloc_r+0x59c>
    4488:	d0e74d15 	stw	r3,-25292(gp)
    448c:	d0a74e17 	ldw	r2,-25288(gp)
    4490:	10ff962e 	bgeu	r2,r3,42ec <_malloc_r+0x3fc>
    4494:	d0e74e15 	stw	r3,-25288(gp)
    4498:	003f9406 	br	42ec <_malloc_r+0x3fc>
    449c:	00800104 	movi	r2,4
    44a0:	11001e36 	bltu	r2,r4,451c <_malloc_r+0x62c>
    44a4:	2804d1ba 	srli	r2,r5,6
    44a8:	11000e04 	addi	r4,r2,56
    44ac:	200690fa 	slli	r3,r4,3
    44b0:	003fc506 	br	43c8 <_malloc_r+0x4d8>
    44b4:	00815504 	movi	r2,1364
    44b8:	10c01d2e 	bgeu	r2,r3,4530 <_malloc_r+0x640>
    44bc:	01801f84 	movi	r6,126
    44c0:	0080fc04 	movi	r2,1008
    44c4:	003eb706 	br	3fa4 <_malloc_r+0xb4>
    44c8:	00800204 	movi	r2,8
    44cc:	10cbc83a 	sub	r5,r2,r3
    44d0:	2169883a 	add	r20,r4,r5
    44d4:	003f9e06 	br	4350 <_malloc_r+0x460>
    44d8:	00bffe04 	movi	r2,-8
    44dc:	a93ffd04 	addi	r4,r21,-12
    44e0:	2088703a 	and	r4,r4,r2
    44e4:	b10b883a 	add	r5,r22,r4
    44e8:	00c00144 	movi	r3,5
    44ec:	28c00215 	stw	r3,8(r5)
    44f0:	28c00115 	stw	r3,4(r5)
    44f4:	b0800117 	ldw	r2,4(r22)
    44f8:	1080004c 	andi	r2,r2,1
    44fc:	2084b03a 	or	r2,r4,r2
    4500:	b0800115 	stw	r2,4(r22)
    4504:	313fdd2e 	bgeu	r6,r4,447c <_malloc_r+0x58c>
    4508:	b1400204 	addi	r5,r22,8
    450c:	9009883a 	mov	r4,r18
    4510:	00038c80 	call	38c8 <_free_r>
    4514:	e4000217 	ldw	r16,8(fp)
    4518:	003fd806 	br	447c <_malloc_r+0x58c>
    451c:	00800504 	movi	r2,20
    4520:	11001536 	bltu	r2,r4,4578 <_malloc_r+0x688>
    4524:	210016c4 	addi	r4,r4,91
    4528:	200690fa 	slli	r3,r4,3
    452c:	003fa606 	br	43c8 <_malloc_r+0x4d8>
    4530:	8804d4ba 	srli	r2,r17,18
    4534:	11801f04 	addi	r6,r2,124
    4538:	300490fa 	slli	r2,r6,3
    453c:	003e9906 	br	3fa4 <_malloc_r+0xb4>
    4540:	2009d0ba 	srai	r4,r4,2
    4544:	01400034 	movhi	r5,0
    4548:	295aba04 	addi	r5,r5,27368
    454c:	00c00044 	movi	r3,1
    4550:	28800117 	ldw	r2,4(r5)
    4554:	1906983a 	sll	r3,r3,r4
    4558:	10c4b03a 	or	r2,r2,r3
    455c:	28800115 	stw	r2,4(r5)
    4560:	003fa306 	br	43f0 <_malloc_r+0x500>
    4564:	0027883a 	mov	r19,zero
    4568:	00c00044 	movi	r3,1
    456c:	003f8606 	br	4388 <_malloc_r+0x498>
    4570:	d1200c15 	stw	r4,-32720(gp)
    4574:	003f7306 	br	4344 <_malloc_r+0x454>
    4578:	00801504 	movi	r2,84
    457c:	11001936 	bltu	r2,r4,45e4 <_malloc_r+0x6f4>
    4580:	2804d33a 	srli	r2,r5,12
    4584:	11001b84 	addi	r4,r2,110
    4588:	200690fa 	slli	r3,r4,3
    458c:	003f8e06 	br	43c8 <_malloc_r+0x4d8>
    4590:	480b883a 	mov	r5,r9
    4594:	6807883a 	mov	r3,r13
    4598:	288000cc 	andi	r2,r5,3
    459c:	18fffe04 	addi	r3,r3,-8
    45a0:	297fffc4 	addi	r5,r5,-1
    45a4:	10001526 	beq	r2,zero,45fc <_malloc_r+0x70c>
    45a8:	18800217 	ldw	r2,8(r3)
    45ac:	10fffa26 	beq	r2,r3,4598 <_malloc_r+0x6a8>
    45b0:	2109883a 	add	r4,r4,r4
    45b4:	393f1e36 	bltu	r7,r4,4230 <_malloc_r+0x340>
    45b8:	203f1d26 	beq	r4,zero,4230 <_malloc_r+0x340>
    45bc:	21c4703a 	and	r2,r4,r7
    45c0:	10000226 	beq	r2,zero,45cc <_malloc_r+0x6dc>
    45c4:	6013883a 	mov	r9,r12
    45c8:	003ee106 	br	4150 <_malloc_r+0x260>
    45cc:	2109883a 	add	r4,r4,r4
    45d0:	3904703a 	and	r2,r7,r4
    45d4:	63000104 	addi	r12,r12,4
    45d8:	103ffc26 	beq	r2,zero,45cc <_malloc_r+0x6dc>
    45dc:	6013883a 	mov	r9,r12
    45e0:	003edb06 	br	4150 <_malloc_r+0x260>
    45e4:	00805504 	movi	r2,340
    45e8:	11000836 	bltu	r2,r4,460c <_malloc_r+0x71c>
    45ec:	2804d3fa 	srli	r2,r5,15
    45f0:	11001dc4 	addi	r4,r2,119
    45f4:	200690fa 	slli	r3,r4,3
    45f8:	003f7306 	br	43c8 <_malloc_r+0x4d8>
    45fc:	0104303a 	nor	r2,zero,r4
    4600:	388e703a 	and	r7,r7,r2
    4604:	e1c00115 	stw	r7,4(fp)
    4608:	003fe906 	br	45b0 <_malloc_r+0x6c0>
    460c:	00815504 	movi	r2,1364
    4610:	1100032e 	bgeu	r2,r4,4620 <_malloc_r+0x730>
    4614:	01001f84 	movi	r4,126
    4618:	00c0fc04 	movi	r3,1008
    461c:	003f6a06 	br	43c8 <_malloc_r+0x4d8>
    4620:	2804d4ba 	srli	r2,r5,18
    4624:	11001f04 	addi	r4,r2,124
    4628:	200690fa 	slli	r3,r4,3
    462c:	003f6606 	br	43c8 <_malloc_r+0x4d8>

00004630 <memset>:
    4630:	008000c4 	movi	r2,3
    4634:	29403fcc 	andi	r5,r5,255
    4638:	2007883a 	mov	r3,r4
    463c:	1180022e 	bgeu	r2,r6,4648 <memset+0x18>
    4640:	2084703a 	and	r2,r4,r2
    4644:	10000826 	beq	r2,zero,4668 <memset+0x38>
    4648:	30000526 	beq	r6,zero,4660 <memset+0x30>
    464c:	2805883a 	mov	r2,r5
    4650:	30cd883a 	add	r6,r6,r3
    4654:	18800005 	stb	r2,0(r3)
    4658:	18c00044 	addi	r3,r3,1
    465c:	19bffd1e 	bne	r3,r6,4654 <memset+0x24>
    4660:	2005883a 	mov	r2,r4
    4664:	f800283a 	ret
    4668:	2804923a 	slli	r2,r5,8
    466c:	020003c4 	movi	r8,15
    4670:	200f883a 	mov	r7,r4
    4674:	2884b03a 	or	r2,r5,r2
    4678:	1006943a 	slli	r3,r2,16
    467c:	10c6b03a 	or	r3,r2,r3
    4680:	41800a2e 	bgeu	r8,r6,46ac <memset+0x7c>
    4684:	4005883a 	mov	r2,r8
    4688:	31bffc04 	addi	r6,r6,-16
    468c:	38c00015 	stw	r3,0(r7)
    4690:	38c00115 	stw	r3,4(r7)
    4694:	38c00215 	stw	r3,8(r7)
    4698:	38c00315 	stw	r3,12(r7)
    469c:	39c00404 	addi	r7,r7,16
    46a0:	11bff936 	bltu	r2,r6,4688 <memset+0x58>
    46a4:	008000c4 	movi	r2,3
    46a8:	1180052e 	bgeu	r2,r6,46c0 <memset+0x90>
    46ac:	31bfff04 	addi	r6,r6,-4
    46b0:	008000c4 	movi	r2,3
    46b4:	38c00015 	stw	r3,0(r7)
    46b8:	39c00104 	addi	r7,r7,4
    46bc:	11bffb36 	bltu	r2,r6,46ac <memset+0x7c>
    46c0:	3807883a 	mov	r3,r7
    46c4:	003fe006 	br	4648 <memset+0x18>

000046c8 <_sbrk_r>:
    46c8:	defffd04 	addi	sp,sp,-12
    46cc:	dc000015 	stw	r16,0(sp)
    46d0:	04000074 	movhi	r16,1
    46d4:	84230704 	addi	r16,r16,-29668
    46d8:	dc400115 	stw	r17,4(sp)
    46dc:	80000015 	stw	zero,0(r16)
    46e0:	2023883a 	mov	r17,r4
    46e4:	2809883a 	mov	r4,r5
    46e8:	dfc00215 	stw	ra,8(sp)
    46ec:	0004f140 	call	4f14 <sbrk>
    46f0:	1007883a 	mov	r3,r2
    46f4:	00bfffc4 	movi	r2,-1
    46f8:	18800626 	beq	r3,r2,4714 <_sbrk_r+0x4c>
    46fc:	1805883a 	mov	r2,r3
    4700:	dfc00217 	ldw	ra,8(sp)
    4704:	dc400117 	ldw	r17,4(sp)
    4708:	dc000017 	ldw	r16,0(sp)
    470c:	dec00304 	addi	sp,sp,12
    4710:	f800283a 	ret
    4714:	80800017 	ldw	r2,0(r16)
    4718:	103ff826 	beq	r2,zero,46fc <_sbrk_r+0x34>
    471c:	88800015 	stw	r2,0(r17)
    4720:	1805883a 	mov	r2,r3
    4724:	dfc00217 	ldw	ra,8(sp)
    4728:	dc400117 	ldw	r17,4(sp)
    472c:	dc000017 	ldw	r16,0(sp)
    4730:	dec00304 	addi	sp,sp,12
    4734:	f800283a 	ret

00004738 <__sclose>:
    4738:	2940038f 	ldh	r5,14(r5)
    473c:	00048fc1 	jmpi	48fc <_close_r>

00004740 <__sseek>:
    4740:	defffe04 	addi	sp,sp,-8
    4744:	dc000015 	stw	r16,0(sp)
    4748:	2821883a 	mov	r16,r5
    474c:	2940038f 	ldh	r5,14(r5)
    4750:	dfc00115 	stw	ra,4(sp)
    4754:	0004b740 	call	4b74 <_lseek_r>
    4758:	1007883a 	mov	r3,r2
    475c:	00bfffc4 	movi	r2,-1
    4760:	18800926 	beq	r3,r2,4788 <__sseek+0x48>
    4764:	8080030b 	ldhu	r2,12(r16)
    4768:	80c01415 	stw	r3,80(r16)
    476c:	10840014 	ori	r2,r2,4096
    4770:	8080030d 	sth	r2,12(r16)
    4774:	1805883a 	mov	r2,r3
    4778:	dfc00117 	ldw	ra,4(sp)
    477c:	dc000017 	ldw	r16,0(sp)
    4780:	dec00204 	addi	sp,sp,8
    4784:	f800283a 	ret
    4788:	8080030b 	ldhu	r2,12(r16)
    478c:	10bbffcc 	andi	r2,r2,61439
    4790:	8080030d 	sth	r2,12(r16)
    4794:	1805883a 	mov	r2,r3
    4798:	dfc00117 	ldw	ra,4(sp)
    479c:	dc000017 	ldw	r16,0(sp)
    47a0:	dec00204 	addi	sp,sp,8
    47a4:	f800283a 	ret

000047a8 <__swrite>:
    47a8:	2880030b 	ldhu	r2,12(r5)
    47ac:	defffb04 	addi	sp,sp,-20
    47b0:	dcc00315 	stw	r19,12(sp)
    47b4:	1080400c 	andi	r2,r2,256
    47b8:	dc800215 	stw	r18,8(sp)
    47bc:	dc400115 	stw	r17,4(sp)
    47c0:	dc000015 	stw	r16,0(sp)
    47c4:	3027883a 	mov	r19,r6
    47c8:	3825883a 	mov	r18,r7
    47cc:	dfc00415 	stw	ra,16(sp)
    47d0:	2821883a 	mov	r16,r5
    47d4:	000d883a 	mov	r6,zero
    47d8:	01c00084 	movi	r7,2
    47dc:	2023883a 	mov	r17,r4
    47e0:	10000226 	beq	r2,zero,47ec <__swrite+0x44>
    47e4:	2940038f 	ldh	r5,14(r5)
    47e8:	0004b740 	call	4b74 <_lseek_r>
    47ec:	8080030b 	ldhu	r2,12(r16)
    47f0:	8140038f 	ldh	r5,14(r16)
    47f4:	8809883a 	mov	r4,r17
    47f8:	10bbffcc 	andi	r2,r2,61439
    47fc:	980d883a 	mov	r6,r19
    4800:	900f883a 	mov	r7,r18
    4804:	8080030d 	sth	r2,12(r16)
    4808:	dfc00417 	ldw	ra,16(sp)
    480c:	dcc00317 	ldw	r19,12(sp)
    4810:	dc800217 	ldw	r18,8(sp)
    4814:	dc400117 	ldw	r17,4(sp)
    4818:	dc000017 	ldw	r16,0(sp)
    481c:	dec00504 	addi	sp,sp,20
    4820:	00048841 	jmpi	4884 <_write_r>

00004824 <__sread>:
    4824:	defffe04 	addi	sp,sp,-8
    4828:	dc000015 	stw	r16,0(sp)
    482c:	2821883a 	mov	r16,r5
    4830:	2940038f 	ldh	r5,14(r5)
    4834:	dfc00115 	stw	ra,4(sp)
    4838:	0004bec0 	call	4bec <_read_r>
    483c:	1007883a 	mov	r3,r2
    4840:	10000816 	blt	r2,zero,4864 <__sread+0x40>
    4844:	80801417 	ldw	r2,80(r16)
    4848:	10c5883a 	add	r2,r2,r3
    484c:	80801415 	stw	r2,80(r16)
    4850:	1805883a 	mov	r2,r3
    4854:	dfc00117 	ldw	ra,4(sp)
    4858:	dc000017 	ldw	r16,0(sp)
    485c:	dec00204 	addi	sp,sp,8
    4860:	f800283a 	ret
    4864:	8080030b 	ldhu	r2,12(r16)
    4868:	10bbffcc 	andi	r2,r2,61439
    486c:	8080030d 	sth	r2,12(r16)
    4870:	1805883a 	mov	r2,r3
    4874:	dfc00117 	ldw	ra,4(sp)
    4878:	dc000017 	ldw	r16,0(sp)
    487c:	dec00204 	addi	sp,sp,8
    4880:	f800283a 	ret

00004884 <_write_r>:
    4884:	defffd04 	addi	sp,sp,-12
    4888:	dc000015 	stw	r16,0(sp)
    488c:	04000074 	movhi	r16,1
    4890:	84230704 	addi	r16,r16,-29668
    4894:	dc400115 	stw	r17,4(sp)
    4898:	80000015 	stw	zero,0(r16)
    489c:	2023883a 	mov	r17,r4
    48a0:	2809883a 	mov	r4,r5
    48a4:	300b883a 	mov	r5,r6
    48a8:	380d883a 	mov	r6,r7
    48ac:	dfc00215 	stw	ra,8(sp)
    48b0:	0004f640 	call	4f64 <write>
    48b4:	1007883a 	mov	r3,r2
    48b8:	00bfffc4 	movi	r2,-1
    48bc:	18800626 	beq	r3,r2,48d8 <_write_r+0x54>
    48c0:	1805883a 	mov	r2,r3
    48c4:	dfc00217 	ldw	ra,8(sp)
    48c8:	dc400117 	ldw	r17,4(sp)
    48cc:	dc000017 	ldw	r16,0(sp)
    48d0:	dec00304 	addi	sp,sp,12
    48d4:	f800283a 	ret
    48d8:	80800017 	ldw	r2,0(r16)
    48dc:	103ff826 	beq	r2,zero,48c0 <_write_r+0x3c>
    48e0:	88800015 	stw	r2,0(r17)
    48e4:	1805883a 	mov	r2,r3
    48e8:	dfc00217 	ldw	ra,8(sp)
    48ec:	dc400117 	ldw	r17,4(sp)
    48f0:	dc000017 	ldw	r16,0(sp)
    48f4:	dec00304 	addi	sp,sp,12
    48f8:	f800283a 	ret

000048fc <_close_r>:
    48fc:	defffd04 	addi	sp,sp,-12
    4900:	dc000015 	stw	r16,0(sp)
    4904:	04000074 	movhi	r16,1
    4908:	84230704 	addi	r16,r16,-29668
    490c:	dc400115 	stw	r17,4(sp)
    4910:	80000015 	stw	zero,0(r16)
    4914:	2023883a 	mov	r17,r4
    4918:	2809883a 	mov	r4,r5
    491c:	dfc00215 	stw	ra,8(sp)
    4920:	000227c0 	call	227c <close>
    4924:	1007883a 	mov	r3,r2
    4928:	00bfffc4 	movi	r2,-1
    492c:	18800626 	beq	r3,r2,4948 <_close_r+0x4c>
    4930:	1805883a 	mov	r2,r3
    4934:	dfc00217 	ldw	ra,8(sp)
    4938:	dc400117 	ldw	r17,4(sp)
    493c:	dc000017 	ldw	r16,0(sp)
    4940:	dec00304 	addi	sp,sp,12
    4944:	f800283a 	ret
    4948:	80800017 	ldw	r2,0(r16)
    494c:	103ff826 	beq	r2,zero,4930 <_close_r+0x34>
    4950:	88800015 	stw	r2,0(r17)
    4954:	1805883a 	mov	r2,r3
    4958:	dfc00217 	ldw	ra,8(sp)
    495c:	dc400117 	ldw	r17,4(sp)
    4960:	dc000017 	ldw	r16,0(sp)
    4964:	dec00304 	addi	sp,sp,12
    4968:	f800283a 	ret

0000496c <_fclose_r>:
    496c:	defffc04 	addi	sp,sp,-16
    4970:	dc400115 	stw	r17,4(sp)
    4974:	dc000015 	stw	r16,0(sp)
    4978:	dfc00315 	stw	ra,12(sp)
    497c:	dc800215 	stw	r18,8(sp)
    4980:	2821883a 	mov	r16,r5
    4984:	2023883a 	mov	r17,r4
    4988:	28002926 	beq	r5,zero,4a30 <_fclose_r+0xc4>
    498c:	00035340 	call	3534 <__sfp_lock_acquire>
    4990:	88000226 	beq	r17,zero,499c <_fclose_r+0x30>
    4994:	88800e17 	ldw	r2,56(r17)
    4998:	10002d26 	beq	r2,zero,4a50 <_fclose_r+0xe4>
    499c:	8080030f 	ldh	r2,12(r16)
    49a0:	10002226 	beq	r2,zero,4a2c <_fclose_r+0xc0>
    49a4:	8809883a 	mov	r4,r17
    49a8:	800b883a 	mov	r5,r16
    49ac:	00032ac0 	call	32ac <_fflush_r>
    49b0:	1025883a 	mov	r18,r2
    49b4:	80800b17 	ldw	r2,44(r16)
    49b8:	10000426 	beq	r2,zero,49cc <_fclose_r+0x60>
    49bc:	81400717 	ldw	r5,28(r16)
    49c0:	8809883a 	mov	r4,r17
    49c4:	103ee83a 	callr	r2
    49c8:	10002a16 	blt	r2,zero,4a74 <_fclose_r+0x108>
    49cc:	8080030b 	ldhu	r2,12(r16)
    49d0:	1080200c 	andi	r2,r2,128
    49d4:	1000231e 	bne	r2,zero,4a64 <_fclose_r+0xf8>
    49d8:	81400c17 	ldw	r5,48(r16)
    49dc:	28000526 	beq	r5,zero,49f4 <_fclose_r+0x88>
    49e0:	80801004 	addi	r2,r16,64
    49e4:	28800226 	beq	r5,r2,49f0 <_fclose_r+0x84>
    49e8:	8809883a 	mov	r4,r17
    49ec:	00038c80 	call	38c8 <_free_r>
    49f0:	80000c15 	stw	zero,48(r16)
    49f4:	81401117 	ldw	r5,68(r16)
    49f8:	28000326 	beq	r5,zero,4a08 <_fclose_r+0x9c>
    49fc:	8809883a 	mov	r4,r17
    4a00:	00038c80 	call	38c8 <_free_r>
    4a04:	80001115 	stw	zero,68(r16)
    4a08:	8000030d 	sth	zero,12(r16)
    4a0c:	00035380 	call	3538 <__sfp_lock_release>
    4a10:	9005883a 	mov	r2,r18
    4a14:	dfc00317 	ldw	ra,12(sp)
    4a18:	dc800217 	ldw	r18,8(sp)
    4a1c:	dc400117 	ldw	r17,4(sp)
    4a20:	dc000017 	ldw	r16,0(sp)
    4a24:	dec00404 	addi	sp,sp,16
    4a28:	f800283a 	ret
    4a2c:	00035380 	call	3538 <__sfp_lock_release>
    4a30:	0025883a 	mov	r18,zero
    4a34:	9005883a 	mov	r2,r18
    4a38:	dfc00317 	ldw	ra,12(sp)
    4a3c:	dc800217 	ldw	r18,8(sp)
    4a40:	dc400117 	ldw	r17,4(sp)
    4a44:	dc000017 	ldw	r16,0(sp)
    4a48:	dec00404 	addi	sp,sp,16
    4a4c:	f800283a 	ret
    4a50:	8809883a 	mov	r4,r17
    4a54:	00035440 	call	3544 <__sinit>
    4a58:	8080030f 	ldh	r2,12(r16)
    4a5c:	103fd11e 	bne	r2,zero,49a4 <_fclose_r+0x38>
    4a60:	003ff206 	br	4a2c <_fclose_r+0xc0>
    4a64:	81400417 	ldw	r5,16(r16)
    4a68:	8809883a 	mov	r4,r17
    4a6c:	00038c80 	call	38c8 <_free_r>
    4a70:	003fd906 	br	49d8 <_fclose_r+0x6c>
    4a74:	04bfffc4 	movi	r18,-1
    4a78:	003fd406 	br	49cc <_fclose_r+0x60>

00004a7c <fclose>:
    4a7c:	00800034 	movhi	r2,0
    4a80:	109bc504 	addi	r2,r2,28436
    4a84:	200b883a 	mov	r5,r4
    4a88:	11000017 	ldw	r4,0(r2)
    4a8c:	000496c1 	jmpi	496c <_fclose_r>

00004a90 <_fstat_r>:
    4a90:	defffd04 	addi	sp,sp,-12
    4a94:	dc000015 	stw	r16,0(sp)
    4a98:	04000074 	movhi	r16,1
    4a9c:	84230704 	addi	r16,r16,-29668
    4aa0:	dc400115 	stw	r17,4(sp)
    4aa4:	80000015 	stw	zero,0(r16)
    4aa8:	2023883a 	mov	r17,r4
    4aac:	2809883a 	mov	r4,r5
    4ab0:	300b883a 	mov	r5,r6
    4ab4:	dfc00215 	stw	ra,8(sp)
    4ab8:	0004c780 	call	4c78 <fstat>
    4abc:	1007883a 	mov	r3,r2
    4ac0:	00bfffc4 	movi	r2,-1
    4ac4:	18800626 	beq	r3,r2,4ae0 <_fstat_r+0x50>
    4ac8:	1805883a 	mov	r2,r3
    4acc:	dfc00217 	ldw	ra,8(sp)
    4ad0:	dc400117 	ldw	r17,4(sp)
    4ad4:	dc000017 	ldw	r16,0(sp)
    4ad8:	dec00304 	addi	sp,sp,12
    4adc:	f800283a 	ret
    4ae0:	80800017 	ldw	r2,0(r16)
    4ae4:	103ff826 	beq	r2,zero,4ac8 <_fstat_r+0x38>
    4ae8:	88800015 	stw	r2,0(r17)
    4aec:	1805883a 	mov	r2,r3
    4af0:	dfc00217 	ldw	ra,8(sp)
    4af4:	dc400117 	ldw	r17,4(sp)
    4af8:	dc000017 	ldw	r16,0(sp)
    4afc:	dec00304 	addi	sp,sp,12
    4b00:	f800283a 	ret

00004b04 <_isatty_r>:
    4b04:	defffd04 	addi	sp,sp,-12
    4b08:	dc000015 	stw	r16,0(sp)
    4b0c:	04000074 	movhi	r16,1
    4b10:	84230704 	addi	r16,r16,-29668
    4b14:	dc400115 	stw	r17,4(sp)
    4b18:	80000015 	stw	zero,0(r16)
    4b1c:	2023883a 	mov	r17,r4
    4b20:	2809883a 	mov	r4,r5
    4b24:	dfc00215 	stw	ra,8(sp)
    4b28:	0004cf80 	call	4cf8 <isatty>
    4b2c:	1007883a 	mov	r3,r2
    4b30:	00bfffc4 	movi	r2,-1
    4b34:	18800626 	beq	r3,r2,4b50 <_isatty_r+0x4c>
    4b38:	1805883a 	mov	r2,r3
    4b3c:	dfc00217 	ldw	ra,8(sp)
    4b40:	dc400117 	ldw	r17,4(sp)
    4b44:	dc000017 	ldw	r16,0(sp)
    4b48:	dec00304 	addi	sp,sp,12
    4b4c:	f800283a 	ret
    4b50:	80800017 	ldw	r2,0(r16)
    4b54:	103ff826 	beq	r2,zero,4b38 <_isatty_r+0x34>
    4b58:	88800015 	stw	r2,0(r17)
    4b5c:	1805883a 	mov	r2,r3
    4b60:	dfc00217 	ldw	ra,8(sp)
    4b64:	dc400117 	ldw	r17,4(sp)
    4b68:	dc000017 	ldw	r16,0(sp)
    4b6c:	dec00304 	addi	sp,sp,12
    4b70:	f800283a 	ret

00004b74 <_lseek_r>:
    4b74:	defffd04 	addi	sp,sp,-12
    4b78:	dc000015 	stw	r16,0(sp)
    4b7c:	04000074 	movhi	r16,1
    4b80:	84230704 	addi	r16,r16,-29668
    4b84:	dc400115 	stw	r17,4(sp)
    4b88:	80000015 	stw	zero,0(r16)
    4b8c:	2023883a 	mov	r17,r4
    4b90:	2809883a 	mov	r4,r5
    4b94:	300b883a 	mov	r5,r6
    4b98:	380d883a 	mov	r6,r7
    4b9c:	dfc00215 	stw	ra,8(sp)
    4ba0:	0004d7c0 	call	4d7c <lseek>
    4ba4:	1007883a 	mov	r3,r2
    4ba8:	00bfffc4 	movi	r2,-1
    4bac:	18800626 	beq	r3,r2,4bc8 <_lseek_r+0x54>
    4bb0:	1805883a 	mov	r2,r3
    4bb4:	dfc00217 	ldw	ra,8(sp)
    4bb8:	dc400117 	ldw	r17,4(sp)
    4bbc:	dc000017 	ldw	r16,0(sp)
    4bc0:	dec00304 	addi	sp,sp,12
    4bc4:	f800283a 	ret
    4bc8:	80800017 	ldw	r2,0(r16)
    4bcc:	103ff826 	beq	r2,zero,4bb0 <_lseek_r+0x3c>
    4bd0:	88800015 	stw	r2,0(r17)
    4bd4:	1805883a 	mov	r2,r3
    4bd8:	dfc00217 	ldw	ra,8(sp)
    4bdc:	dc400117 	ldw	r17,4(sp)
    4be0:	dc000017 	ldw	r16,0(sp)
    4be4:	dec00304 	addi	sp,sp,12
    4be8:	f800283a 	ret

00004bec <_read_r>:
    4bec:	defffd04 	addi	sp,sp,-12
    4bf0:	dc000015 	stw	r16,0(sp)
    4bf4:	04000074 	movhi	r16,1
    4bf8:	84230704 	addi	r16,r16,-29668
    4bfc:	dc400115 	stw	r17,4(sp)
    4c00:	80000015 	stw	zero,0(r16)
    4c04:	2023883a 	mov	r17,r4
    4c08:	2809883a 	mov	r4,r5
    4c0c:	300b883a 	mov	r5,r6
    4c10:	380d883a 	mov	r6,r7
    4c14:	dfc00215 	stw	ra,8(sp)
    4c18:	0004e1c0 	call	4e1c <read>
    4c1c:	1007883a 	mov	r3,r2
    4c20:	00bfffc4 	movi	r2,-1
    4c24:	18800626 	beq	r3,r2,4c40 <_read_r+0x54>
    4c28:	1805883a 	mov	r2,r3
    4c2c:	dfc00217 	ldw	ra,8(sp)
    4c30:	dc400117 	ldw	r17,4(sp)
    4c34:	dc000017 	ldw	r16,0(sp)
    4c38:	dec00304 	addi	sp,sp,12
    4c3c:	f800283a 	ret
    4c40:	80800017 	ldw	r2,0(r16)
    4c44:	103ff826 	beq	r2,zero,4c28 <_read_r+0x3c>
    4c48:	88800015 	stw	r2,0(r17)
    4c4c:	1805883a 	mov	r2,r3
    4c50:	dfc00217 	ldw	ra,8(sp)
    4c54:	dc400117 	ldw	r17,4(sp)
    4c58:	dc000017 	ldw	r16,0(sp)
    4c5c:	dec00304 	addi	sp,sp,12
    4c60:	f800283a 	ret

00004c64 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4c64:	20000226 	beq	r4,zero,4c70 <_exit+0xc>
    ALT_SIM_FAIL();
    4c68:	002af070 	cmpltui	zero,zero,43969
    4c6c:	00000106 	br	4c74 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    4c70:	002af0b0 	cmpltui	zero,zero,43970
    4c74:	003fff06 	br	4c74 <_exit+0x10>

00004c78 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4c78:	deffff04 	addi	sp,sp,-4
    4c7c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4c80:	20000e16 	blt	r4,zero,4cbc <fstat+0x44>
    4c84:	20c00324 	muli	r3,r4,12
    4c88:	00800034 	movhi	r2,0
    4c8c:	10995a04 	addi	r2,r2,25960
    4c90:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4c94:	20000926 	beq	r4,zero,4cbc <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4c98:	20800017 	ldw	r2,0(r4)
    4c9c:	10800817 	ldw	r2,32(r2)
    4ca0:	10000226 	beq	r2,zero,4cac <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    4ca4:	103ee83a 	callr	r2
    4ca8:	00001006 	br	4cec <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4cac:	00880004 	movi	r2,8192
    4cb0:	28800115 	stw	r2,4(r5)
    4cb4:	0005883a 	mov	r2,zero
    4cb8:	00000c06 	br	4cec <fstat+0x74>
    4cbc:	00800034 	movhi	r2,0
    4cc0:	109bc104 	addi	r2,r2,28420
    4cc4:	10800017 	ldw	r2,0(r2)
    4cc8:	1000031e 	bne	r2,zero,4cd8 <fstat+0x60>
    4ccc:	00c00074 	movhi	r3,1
    4cd0:	18e30704 	addi	r3,r3,-29668
    4cd4:	00000206 	br	4ce0 <fstat+0x68>
    4cd8:	103ee83a 	callr	r2
    4cdc:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4ce0:	00801444 	movi	r2,81
    4ce4:	18800015 	stw	r2,0(r3)
    4ce8:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    4cec:	dfc00017 	ldw	ra,0(sp)
    4cf0:	dec00104 	addi	sp,sp,4
    4cf4:	f800283a 	ret

00004cf8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4cf8:	defff004 	addi	sp,sp,-64
    4cfc:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4d00:	20000f16 	blt	r4,zero,4d40 <isatty+0x48>
    4d04:	20c00324 	muli	r3,r4,12
    4d08:	00800034 	movhi	r2,0
    4d0c:	10995a04 	addi	r2,r2,25960
    4d10:	1885883a 	add	r2,r3,r2
  
  if (fd)
    4d14:	10000a26 	beq	r2,zero,4d40 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4d18:	10800017 	ldw	r2,0(r2)
    4d1c:	10800817 	ldw	r2,32(r2)
    4d20:	1000021e 	bne	r2,zero,4d2c <isatty+0x34>
    4d24:	00800044 	movi	r2,1
    4d28:	00001106 	br	4d70 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4d2c:	d80b883a 	mov	r5,sp
    4d30:	0004c780 	call	4c78 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4d34:	d8800117 	ldw	r2,4(sp)
    4d38:	10880020 	cmpeqi	r2,r2,8192
    4d3c:	00000c06 	br	4d70 <isatty+0x78>
    4d40:	00800034 	movhi	r2,0
    4d44:	109bc104 	addi	r2,r2,28420
    4d48:	10800017 	ldw	r2,0(r2)
    4d4c:	1000031e 	bne	r2,zero,4d5c <isatty+0x64>
    4d50:	00c00074 	movhi	r3,1
    4d54:	18e30704 	addi	r3,r3,-29668
    4d58:	00000206 	br	4d64 <isatty+0x6c>
    4d5c:	103ee83a 	callr	r2
    4d60:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4d64:	00801444 	movi	r2,81
    4d68:	18800015 	stw	r2,0(r3)
    4d6c:	0005883a 	mov	r2,zero
    return 0;
  }
}
    4d70:	dfc00f17 	ldw	ra,60(sp)
    4d74:	dec01004 	addi	sp,sp,64
    4d78:	f800283a 	ret

00004d7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4d7c:	defffe04 	addi	sp,sp,-8
    4d80:	dfc00115 	stw	ra,4(sp)
    4d84:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4d88:	2000020e 	bge	r4,zero,4d94 <lseek+0x18>
    4d8c:	043febc4 	movi	r16,-81
    4d90:	00000d06 	br	4dc8 <lseek+0x4c>
    4d94:	20c00324 	muli	r3,r4,12
    4d98:	00800034 	movhi	r2,0
    4d9c:	10995a04 	addi	r2,r2,25960
    4da0:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    4da4:	20001526 	beq	r4,zero,4dfc <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4da8:	20800017 	ldw	r2,0(r4)
    4dac:	10800717 	ldw	r2,28(r2)
    4db0:	1000021e 	bne	r2,zero,4dbc <lseek+0x40>
    4db4:	043fde84 	movi	r16,-134
    4db8:	00000306 	br	4dc8 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4dbc:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    4dc0:	1000100e 	bge	r2,zero,4e04 <lseek+0x88>
    4dc4:	1021883a 	mov	r16,r2
    4dc8:	00800034 	movhi	r2,0
    4dcc:	109bc104 	addi	r2,r2,28420
    4dd0:	10800017 	ldw	r2,0(r2)
    4dd4:	1000031e 	bne	r2,zero,4de4 <lseek+0x68>
    4dd8:	00c00074 	movhi	r3,1
    4ddc:	18e30704 	addi	r3,r3,-29668
    4de0:	00000206 	br	4dec <lseek+0x70>
    4de4:	103ee83a 	callr	r2
    4de8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    4dec:	0405c83a 	sub	r2,zero,r16
    4df0:	18800015 	stw	r2,0(r3)
    4df4:	00bfffc4 	movi	r2,-1
    4df8:	00000206 	br	4e04 <lseek+0x88>
    4dfc:	043febc4 	movi	r16,-81
    4e00:	003ff106 	br	4dc8 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    4e04:	dfc00117 	ldw	ra,4(sp)
    4e08:	dc000017 	ldw	r16,0(sp)
    4e0c:	dec00204 	addi	sp,sp,8
    4e10:	f800283a 	ret

00004e14 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    4e14:	f800283a 	ret

00004e18 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    4e18:	f800283a 	ret

00004e1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    4e1c:	defffe04 	addi	sp,sp,-8
    4e20:	dfc00115 	stw	ra,4(sp)
    4e24:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4e28:	20002916 	blt	r4,zero,4ed0 <read+0xb4>
    4e2c:	20c00324 	muli	r3,r4,12
    4e30:	00800034 	movhi	r2,0
    4e34:	10995a04 	addi	r2,r2,25960
    4e38:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4e3c:	20002426 	beq	r4,zero,4ed0 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4e40:	20800217 	ldw	r2,8(r4)
    4e44:	108000cc 	andi	r2,r2,3
    4e48:	00c00044 	movi	r3,1
    4e4c:	10c01326 	beq	r2,r3,4e9c <read+0x80>
    4e50:	20800017 	ldw	r2,0(r4)
    4e54:	10800517 	ldw	r2,20(r2)
    4e58:	10001026 	beq	r2,zero,4e9c <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4e5c:	103ee83a 	callr	r2
    4e60:	1021883a 	mov	r16,r2
    4e64:	1000260e 	bge	r2,zero,4f00 <read+0xe4>
    4e68:	00800034 	movhi	r2,0
    4e6c:	109bc104 	addi	r2,r2,28420
    4e70:	10800017 	ldw	r2,0(r2)
    4e74:	1000031e 	bne	r2,zero,4e84 <read+0x68>
    4e78:	00c00074 	movhi	r3,1
    4e7c:	18e30704 	addi	r3,r3,-29668
    4e80:	00000206 	br	4e8c <read+0x70>
    4e84:	103ee83a 	callr	r2
    4e88:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    4e8c:	0405c83a 	sub	r2,zero,r16
    4e90:	18800015 	stw	r2,0(r3)
    4e94:	043fffc4 	movi	r16,-1
    4e98:	00001906 	br	4f00 <read+0xe4>
    4e9c:	00800034 	movhi	r2,0
    4ea0:	109bc104 	addi	r2,r2,28420
    4ea4:	10800017 	ldw	r2,0(r2)
    4ea8:	1000031e 	bne	r2,zero,4eb8 <read+0x9c>
    4eac:	00c00074 	movhi	r3,1
    4eb0:	18e30704 	addi	r3,r3,-29668
    4eb4:	00000206 	br	4ec0 <read+0xa4>
    4eb8:	103ee83a 	callr	r2
    4ebc:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    4ec0:	00800344 	movi	r2,13
    4ec4:	18800015 	stw	r2,0(r3)
    4ec8:	043fffc4 	movi	r16,-1
    4ecc:	00000c06 	br	4f00 <read+0xe4>
    4ed0:	00800034 	movhi	r2,0
    4ed4:	109bc104 	addi	r2,r2,28420
    4ed8:	10800017 	ldw	r2,0(r2)
    4edc:	1000031e 	bne	r2,zero,4eec <read+0xd0>
    4ee0:	00c00074 	movhi	r3,1
    4ee4:	18e30704 	addi	r3,r3,-29668
    4ee8:	00000206 	br	4ef4 <read+0xd8>
    4eec:	103ee83a 	callr	r2
    4ef0:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    4ef4:	00801444 	movi	r2,81
    4ef8:	18800015 	stw	r2,0(r3)
    4efc:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    4f00:	8005883a 	mov	r2,r16
    4f04:	dfc00117 	ldw	ra,4(sp)
    4f08:	dc000017 	ldw	r16,0(sp)
    4f0c:	dec00204 	addi	sp,sp,8
    4f10:	f800283a 	ret

00004f14 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f14:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f18:	00bfff84 	movi	r2,-2
    4f1c:	2884703a 	and	r2,r5,r2
    4f20:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4f24:	d0a00d17 	ldw	r2,-32716(gp)
    4f28:	108000c4 	addi	r2,r2,3
    4f2c:	00ffff04 	movi	r3,-4
    4f30:	10c6703a 	and	r3,r2,r3
    4f34:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    4f38:	1909883a 	add	r4,r3,r4
    4f3c:	00802034 	movhi	r2,128
    4f40:	10800004 	addi	r2,r2,0
    4f44:	1100032e 	bgeu	r2,r4,4f54 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f48:	2801703a 	wrctl	status,r5
    4f4c:	00ffffc4 	movi	r3,-1
    4f50:	00000206 	br	4f5c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    4f54:	d1200d15 	stw	r4,-32716(gp)
    4f58:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    4f5c:	1805883a 	mov	r2,r3
    4f60:	f800283a 	ret

00004f64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4f64:	defffe04 	addi	sp,sp,-8
    4f68:	dfc00115 	stw	ra,4(sp)
    4f6c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4f70:	20002816 	blt	r4,zero,5014 <write+0xb0>
    4f74:	20c00324 	muli	r3,r4,12
    4f78:	00800034 	movhi	r2,0
    4f7c:	10995a04 	addi	r2,r2,25960
    4f80:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4f84:	20002326 	beq	r4,zero,5014 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4f88:	20800217 	ldw	r2,8(r4)
    4f8c:	108000cc 	andi	r2,r2,3
    4f90:	10001326 	beq	r2,zero,4fe0 <write+0x7c>
    4f94:	20800017 	ldw	r2,0(r4)
    4f98:	10800617 	ldw	r2,24(r2)
    4f9c:	10001026 	beq	r2,zero,4fe0 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4fa0:	103ee83a 	callr	r2
    4fa4:	1021883a 	mov	r16,r2
    4fa8:	1000260e 	bge	r2,zero,5044 <write+0xe0>
    4fac:	00800034 	movhi	r2,0
    4fb0:	109bc104 	addi	r2,r2,28420
    4fb4:	10800017 	ldw	r2,0(r2)
    4fb8:	1000031e 	bne	r2,zero,4fc8 <write+0x64>
    4fbc:	00c00074 	movhi	r3,1
    4fc0:	18e30704 	addi	r3,r3,-29668
    4fc4:	00000206 	br	4fd0 <write+0x6c>
    4fc8:	103ee83a 	callr	r2
    4fcc:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    4fd0:	0405c83a 	sub	r2,zero,r16
    4fd4:	18800015 	stw	r2,0(r3)
    4fd8:	043fffc4 	movi	r16,-1
    4fdc:	00001906 	br	5044 <write+0xe0>
    4fe0:	00800034 	movhi	r2,0
    4fe4:	109bc104 	addi	r2,r2,28420
    4fe8:	10800017 	ldw	r2,0(r2)
    4fec:	1000031e 	bne	r2,zero,4ffc <write+0x98>
    4ff0:	00c00074 	movhi	r3,1
    4ff4:	18e30704 	addi	r3,r3,-29668
    4ff8:	00000206 	br	5004 <write+0xa0>
    4ffc:	103ee83a 	callr	r2
    5000:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5004:	00800344 	movi	r2,13
    5008:	18800015 	stw	r2,0(r3)
    500c:	043fffc4 	movi	r16,-1
    5010:	00000c06 	br	5044 <write+0xe0>
    5014:	00800034 	movhi	r2,0
    5018:	109bc104 	addi	r2,r2,28420
    501c:	10800017 	ldw	r2,0(r2)
    5020:	1000031e 	bne	r2,zero,5030 <write+0xcc>
    5024:	00c00074 	movhi	r3,1
    5028:	18e30704 	addi	r3,r3,-29668
    502c:	00000206 	br	5038 <write+0xd4>
    5030:	103ee83a 	callr	r2
    5034:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5038:	00801444 	movi	r2,81
    503c:	18800015 	stw	r2,0(r3)
    5040:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    5044:	8005883a 	mov	r2,r16
    5048:	dfc00117 	ldw	ra,4(sp)
    504c:	dc000017 	ldw	r16,0(sp)
    5050:	dec00204 	addi	sp,sp,8
    5054:	f800283a 	ret
    5058:	000030f8 	rdprs	zero,zero,195
