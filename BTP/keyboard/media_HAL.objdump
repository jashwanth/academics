
C:/Users/Jashwanth/Desktop/BTP/keyboard/media_HAL.elf:     file format elf32-littlenios2
C:/Users/Jashwanth/Desktop/BTP/keyboard/media_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005a68 memsz 0x00005a68 flags r-x
    LOAD off    0x00006a88 vaddr 0x00005a88 paddr 0x00007764 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00009440 vaddr 0x00009440 paddr 0x00009440 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005650  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d0  000057b8  000057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  00005a88  00007764  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00009440  00009440  00009440  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008764  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00008790  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000128a  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000182b5  00000000  00000000  0000a312  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000574c  00000000  00000000  000225c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d3cb  00000000  00000000  00027d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000110c  00000000  00000000  000350e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000028db  00000000  00000000  000361ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005409  00000000  00000000  00038ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003ded0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0003def0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00040d8b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00040d8e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00040d91  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00040d92  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00040d93  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00040d97  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00040d9b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00040d9f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00040da8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00040db1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00040dba  2**0
                  CONTENTS, READONLY
 28 .jdi          00004996  00000000  00000000  00040dc5  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000abe93  00000000  00000000  0004575b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
000057b8 l    d  .rodata	00000000 .rodata
00005a88 l    d  .rwdata	00000000 .rwdata
00009440 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_HAL.c
00005996 l     O .rodata	00000010 C.9.2035
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005a88 l     O .rwdata	00001060 JTAG_UART
00006ae8 l     O .rwdata	00000030 AV_Config
00006b18 l     O .rwdata	00000030 Audio
00006b48 l     O .rwdata	0000002c Expansion_JP1
00006b74 l     O .rwdata	0000002c Expansion_JP2
00006ba0 l     O .rwdata	0000002c Green_LEDs
00006bcc l     O .rwdata	0000002c HEX3_HEX0
00006bf8 l     O .rwdata	0000002c Pushbuttons
00006c24 l     O .rwdata	0000002c Red_LEDs
00006c50 l     O .rwdata	0000002c Slider_Switches
00006c7c l     O .rwdata	00000038 PS2_Port
00006cb4 l     O .rwdata	0000002c Serial_Port
00006ce0 l     O .rwdata	00000048 VGA_Char_Buffer
00006d28 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000012c8 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00001394 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001864 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002b58 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002c60 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00006f24 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003854 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003c38 l     F .text	00000058 std
00003d44 l     F .text	00000008 __fp_lock
00003d4c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007760 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005260 g     F .text	00000070 _isatty_r
00000d04 g     F .text	00000050 alt_main
000021dc g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
00009490 g     O .bss	00000100 alt_irq
00001c14 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
000052d0 g     F .text	00000078 _lseek_r
00007764 g       *ABS*	00000000 __flash_rwdata_start
00009590 g       *ABS*	00000000 __alt_heap_start
00004e9c g     F .text	00000068 __sseek
00003ca0 g     F .text	000000a4 __sinit
000035cc g     F .text	00000130 __swbuf_r
00001e1c g     F .text	00000088 alt_up_char_buffer_string
000018d4 g     F .text	0000000c read_CE_bit
00003da0 g     F .text	00000068 __sfmoreglue
00005574 g     F .text	00000004 __malloc_unlock
000019a4 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00001cc0 g     F .text	00000080 alt_up_rs232_read_fd
00001ea4 g     F .text	00000058 alt_up_char_buffer_draw
00003d90 g     F .text	00000010 _cleanup
000028d0 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
000029c4 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000051ec g     F .text	00000074 _fstat_r
00009458 g     O .bss	00000004 errno
00009444 g     O .bss	00000004 alt_argv
0000f72c g       *ABS*	00000000 _gp
0000299c g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
00006da4 g     O .rwdata	00000180 alt_fd_list
00002bd0 g     F .text	00000070 alt_find_dev
00000ba0 g     F .text	000000a0 memcpy
00001efc g     F .text	00000028 alt_up_char_buffer_clear
00003d84 g     F .text	0000000c _cleanup_r
00002cc4 g     F .text	00000098 alt_io_redirect
00001c74 g     F .text	0000004c alt_up_rs232_read_data
0000298c g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000153c g     F .text	00000168 altera_avalon_jtag_uart_read
00005454 g     F .text	00000084 isatty
00002370 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
000031c8 g     F .text	0000003c alt_icache_flush
0000945c g     O .bss	00000004 __malloc_top_pad
00004e24 g     F .text	00000070 _sbrk_r
00001f94 g     F .text	0000005c helper_plot_pixel
00005348 g     F .text	00000078 _read_r
0000773c g     O .rwdata	00000004 alt_max_fd
00001c48 g     F .text	0000000c alt_up_rs232_check_parity
000050c8 g     F .text	00000110 _fclose_r
000018e0 g     F .text	00000008 read_num_bytes_available
00003c04 g     F .text	00000034 fflush
00009460 g     O .bss	00000004 __malloc_max_sbrked_mem
00002d5c g     F .text	000000bc alt_irq_register
000018c0 g     F .text	0000000c read_RI_bit
000027f8 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
000054d8 g     F .text	00000098 lseek
00007754 g     O .rwdata	00000004 _global_impure_ptr
00009590 g       *ABS*	00000000 __bss_end
000025b4 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00002fec g     F .text	000000ac alt_tick
000018f4 g     F .text	00000008 read_data_byte
00003d6c g     F .text	00000018 __fp_lock_all
00002fb8 g     F .text	00000034 alt_alarm_stop
000018cc g     F .text	00000008 read_RE_bit
0000944c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00006d7c g     O .rwdata	00000028 alt_dev_null
000018a0 g     F .text	00000020 alt_up_parallel_port_open_dev
00001aa8 g     F .text	00000040 alt_up_ps2_write_data_byte
00002b54 g     F .text	00000004 alt_dcache_flush_all
000024e4 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
00007764 g       *ABS*	00000000 __ram_rwdata_end
00007734 g     O .rwdata	00000008 alt_dev_list
000056c0 g     F .text	000000f4 write
000033b4 g     F .text	000000e8 _putc_r
00001ff0 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
00005a88 g       *ABS*	00000000 __ram_rodata_end
000053d4 g     F .text	00000080 fstat
00001d68 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00009590 g       *ABS*	00000000 end
00001ae8 g     F .text	00000070 alt_up_ps2_write_fd
00001f44 g     F .text	00000050 alt_up_char_buffer_init
0000131c g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
000001f0 g     F .text	000000c0 HEX_PS2
00001820 g     F .text	00000044 alt_avalon_timer_sc_init
000016a4 g     F .text	0000017c altera_avalon_jtag_uart_write
00003c90 g     F .text	00000004 __sfp_lock_acquire
00004024 g     F .text	00000314 _free_r
00000d54 g     F .text	000001dc alt_printf
00003858 g     F .text	000001b0 __call_exitprocs
0000775c g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00009450 g     O .bss	00000004 _alt_tick_rate
00009454 g     O .bss	00000004 _alt_nticks
00005578 g     F .text	000000f8 read
00000f78 g     F .text	00000280 alt_sys_init
0000191c g     F .text	00000030 alt_up_ps2_clear_fifo
00001d40 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
000001a4 g     F .text	0000004c VGA_box
00001290 g     F .text	00000038 altera_avalon_jtag_uart_close
00005a88 g       *ABS*	00000000 __ram_rwdata_start
000057b8 g       *ABS*	00000000 __ram_rodata_start
00009468 g     O .bss	00000028 __malloc_current_mallinfo
00001268 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000315c g     F .text	0000006c alt_get_fd
00005058 g     F .text	00000070 _close_r
0000323c g     F .text	00000074 memcmp
00001218 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00009590 g       *ABS*	00000000 __alt_stack_base
000011f8 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00003718 g     F .text	0000013c __swsetup_r
00003e08 g     F .text	000000f0 __sfp
00007324 g     O .rwdata	00000408 __malloc_av_
00003c9c g     F .text	00000004 __sinit_lock_release
00004f80 g     F .text	00000060 __sread
00001dd8 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
000030a0 g     F .text	000000bc alt_find_file
00002b60 g     F .text	00000070 alt_dev_llist_insert
00005570 g     F .text	00000004 __malloc_lock
00005670 g     F .text	00000050 sbrk
00003a08 g     F .text	000001fc _fflush_r
00009440 g       *ABS*	00000000 __bss_start
00004d8c g     F .text	00000098 memset
000002b0 g     F .text	000008f0 main
00009448 g     O .bss	00000004 alt_envp
00009464 g     O .bss	00000004 __malloc_max_total_mem
000028ac g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001f24 g     F .text	00000020 alt_up_char_buffer_open_dev
00001240 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000036fc g     F .text	0000001c __swbuf
00004e94 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
000051d8 g     F .text	00000014 fclose
0000194c g     F .text	00000058 alt_up_ps2_read_data_byte
0000464c g     F .text	00000740 _malloc_r
00007740 g     O .rwdata	00000004 alt_errno
00004400 g     F .text	000000b8 _fwalk
000018fc g     F .text	00000020 alt_up_ps2_open_dev
000032b0 g     F .text	00000104 putc
00003ef8 g     F .text	0000012c _malloc_trim_r
00001c30 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
0000349c g     F .text	000000bc strcmp
000057b8 g       *ABS*	00000000 __flash_rodata_start
00001c54 g     F .text	00000020 alt_up_rs232_open_dev
00000f58 g     F .text	00000020 alt_irq_init
00002f94 g     F .text	00000024 alt_release_fd
000018e8 g     F .text	0000000c read_data_valid
00001b58 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00004fe0 g     F .text	00000078 _write_r
00007750 g     O .rwdata	00000004 _impure_ptr
00009440 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00003d54 g     F .text	00000018 __fp_unlock_all
0000772c g     O .rwdata	00000008 alt_fs_list
00001df4 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001d50 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007764 g       *ABS*	00000000 _edata
00009590 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
000014c8 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00004f04 g     F .text	0000007c __swrite
00007758 g     O .rwdata	00000004 __malloc_trim_threshold
00003098 g     F .text	00000008 altera_nios2_qsys_irq_init
00003204 g     F .text	00000038 exit
00004338 g     F .text	000000c8 _fwalk_reent
00001b8c g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003c94 g     F .text	00000004 __sfp_lock_release
000053c0 g     F .text	00000014 _exit
000029e4 g     F .text	00000094 alt_alarm_start
000044b8 g     F .text	00000194 __smakebuf_r
00001a4c g     F .text	0000005c alt_up_ps2_wait_for_ack
00003558 g     F .text	00000074 strlen
00002e18 g     F .text	0000017c open
00000f30 g     F .text	00000028 alt_putchar
00002c40 g     F .text	00000020 alt_icache_flush_all
00007744 g     O .rwdata	00000004 alt_priority_mask
00001a24 g     F .text	00000028 alt_up_ps2_read_fd
00007748 g     O .rwdata	00000008 alt_alarm_list
00001e0c g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00002a78 g     F .text	000000dc close
00000c40 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
00003c98 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00808014 	movui	r2,512
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	84252404 	addi	r16,r16,-27504
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6bdcb14 	ori	gp,gp,63276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a51014 	ori	r2,r2,37952

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e56414 	ori	r3,r3,38288

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	0000c400 	call	c40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	0000d040 	call	d04 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor 
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     1a4:	dac0000b 	ldhu	r11,0(sp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1a8:	39401016 	blt	r7,r5,1ec <VGA_box+0x48>
     1ac:	03000044 	movi	r12,1
     1b0:	00000c06 	br	1e4 <VGA_box+0x40>
     1b4:	2007883a 	mov	r3,r4
     1b8:	2810927a 	slli	r8,r5,9
     1bc:	02820034 	movhi	r10,2048
     1c0:	02400044 	movi	r9,1
	{
		col = x1;
		while (col <= x2)
		{
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     1c4:	40c5883a 	add	r2,r8,r3
     1c8:	1085883a 	add	r2,r2,r2
     1cc:	1285883a 	add	r2,r2,r10
     1d0:	12c0000d 	sth	r11,0(r2)
			++col;
     1d4:	1a47883a 	add	r3,r3,r9

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     1d8:	30fffa0e 	bge	r6,r3,1c4 <VGA_box+0x20>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1dc:	2b0b883a 	add	r5,r5,r12
     1e0:	39400216 	blt	r7,r5,1ec <VGA_box+0x48>
	{
		col = x1;
		while (col <= x2)
     1e4:	313ff30e 	bge	r6,r4,1b4 <VGA_box+0x10>
     1e8:	003ffc06 	br	1dc <VGA_box+0x38>
     1ec:	f800283a 	ret

000001f0 <HEX_PS2>:

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2)
{
     1f0:	defff704 	addi	sp,sp,-36
     1f4:	dfc00815 	stw	ra,32(sp)
     1f8:	dc800715 	stw	r18,28(sp)
     1fc:	dc400615 	stw	r17,24(sp)
     200:	dc000515 	stw	r16,20(sp)
     204:	2021883a 	mov	r16,r4
     208:	2823883a 	mov	r17,r5
	volatile int * HEX3_HEX0_ptr = (int *) 0x10000020;

	// SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in 
	// a single 7-seg display in the DE1 Media Computer, for the hex digits 0 - F */
	char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
     20c:	04800404 	movi	r18,16
     210:	d809883a 	mov	r4,sp
     214:	01400034 	movhi	r5,0
     218:	29566584 	addi	r5,r5,22934
     21c:	900d883a 	mov	r6,r18
     220:	0000ba00 	call	ba0 <memcpy>
	char	hex_segs[] = { 0, 0, 0, 0};
	int shift_buffer, nibble;
	char code;
	int i;

	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
     224:	84003fcc 	andi	r16,r16,255
     228:	8020923a 	slli	r16,r16,8
     22c:	8c403fcc 	andi	r17,r17,255
     230:	8460b03a 	or	r16,r16,r17
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     234:	00c003c4 	movi	r3,15
     238:	80c4703a 	and	r2,r16,r3
     23c:	d885883a 	add	r2,sp,r2
     240:	10800003 	ldbu	r2,0(r2)
     244:	d8800405 	stb	r2,16(sp)
		shift_buffer = shift_buffer >> 4;
     248:	8005d13a 	srai	r2,r16,4
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     24c:	10c4703a 	and	r2,r2,r3
     250:	d885883a 	add	r2,sp,r2
     254:	10800003 	ldbu	r2,0(r2)
     258:	d8800445 	stb	r2,17(sp)
		shift_buffer = shift_buffer >> 4;
     25c:	8005d23a 	srai	r2,r16,8
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     260:	10c4703a 	and	r2,r2,r3
     264:	d885883a 	add	r2,sp,r2
     268:	10800003 	ldbu	r2,0(r2)
     26c:	d8800485 	stb	r2,18(sp)
     270:	8021d33a 	srai	r16,r16,12
     274:	80e0703a 	and	r16,r16,r3
     278:	dc05883a 	add	r2,sp,r16
     27c:	10800003 	ldbu	r2,0(r2)
     280:	d88004c5 	stb	r2,19(sp)
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
     284:	dc85883a 	add	r2,sp,r18
     288:	10c00017 	ldw	r3,0(r2)
     28c:	00840034 	movhi	r2,4096
     290:	10800804 	addi	r2,r2,32
     294:	10c00015 	stw	r3,0(r2)
}  
     298:	dfc00817 	ldw	ra,32(sp)
     29c:	dc800717 	ldw	r18,28(sp)
     2a0:	dc400617 	ldw	r17,24(sp)
     2a4:	dc000517 	ldw	r16,20(sp)
     2a8:	dec00904 	addi	sp,sp,36
     2ac:	f800283a 	ret

000002b0 <main>:
 * 	   the box
 * 	4. Displays the last two bytes of data received from the PS/2 port 
 * 	   on the HEX displays on the DE1 board
********************************************************************************/
int main(void)
{
     2b0:	defcd104 	addi	sp,sp,-3260
     2b4:	dfc32e15 	stw	ra,3256(sp)
     2b8:	df032d15 	stw	fp,3252(sp)
     2bc:	ddc32c15 	stw	r23,3248(sp)
     2c0:	dd832b15 	stw	r22,3244(sp)
     2c4:	dd432a15 	stw	r21,3240(sp)
     2c8:	dd032915 	stw	r20,3236(sp)
     2cc:	dcc32815 	stw	r19,3232(sp)
     2d0:	dc832715 	stw	r18,3228(sp)
     2d4:	dc432615 	stw	r17,3224(sp)
     2d8:	dc032515 	stw	r16,3220(sp)
	alt_up_parallel_port_dev *green_LEDs_dev;
	alt_up_parallel_port_dev *KEY_dev;
	alt_up_ps2_dev * PS2_dev;
	alt_up_char_buffer_dev * char_buffer_dev;
    alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     2dc:	01000034 	movhi	r4,0
     2e0:	2115ee04 	addi	r4,r4,22456
     2e4:	00029c40 	call	29c4 <alt_up_pixel_buffer_dma_open_dev>
     2e8:	1021883a 	mov	r16,r2
	if ( pixel_buffer_dev == NULL)
     2ec:	1000041e 	bne	r2,zero,300 <main+0x50>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     2f0:	01000034 	movhi	r4,0
     2f4:	2115f404 	addi	r4,r4,22480
     2f8:	0000d540 	call	d54 <alt_printf>
     2fc:	00000306 	br	30c <main+0x5c>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     300:	01000034 	movhi	r4,0
     304:	21160004 	addi	r4,r4,22528
     308:	0000d540 	call	d54 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     30c:	8009883a 	mov	r4,r16
     310:	000b883a 	mov	r5,zero
     314:	00027f80 	call	27f8 <alt_up_pixel_buffer_dma_clear_screen>
     318:	d8800044 	addi	r2,sp,1
     31c:	01001404 	movi	r4,80
     320:	d8c32044 	addi	r3,sp,3201
	char text_top_row[40] = "Altera DE1\0";
	char text_bottom_row[40] = "Media Computer\0";
	char display_vga[40][80];
	int count = 0,i = 0,init=0;
	for(init=0;init<40;init++)
	 display_vga[init][0] = '\0';
     324:	10000005 	stb	zero,0(r2)
     328:	1105883a 	add	r2,r2,r4
	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE1\0";
	char text_bottom_row[40] = "Media Computer\0";
	char display_vga[40][80];
	int count = 0,i = 0,init=0;
	for(init=0;init<40;init++)
     32c:	10fffd1e 	bne	r2,r3,324 <main+0x74>
	 display_vga[init][0] = '\0';
    char key;
	char key2;
	int flag=0;
	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     330:	01000034 	movhi	r4,0
     334:	21160b04 	addi	r4,r4,22572
     338:	0001f240 	call	1f24 <alt_up_char_buffer_open_dev>
     33c:	1027883a 	mov	r19,r2
	if ( char_buffer_dev == NULL)
     340:	1000041e 	bne	r2,zero,354 <main+0xa4>
	{
		alt_printf ("Error: could not open character buffer device\n");
     344:	01000034 	movhi	r4,0
     348:	21161104 	addi	r4,r4,22596
     34c:	0000d540 	call	d54 <alt_printf>
     350:	00020606 	br	b6c <main+0x8bc>
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     354:	01000034 	movhi	r4,0
     358:	21161d04 	addi	r4,r4,22644
     35c:	0000d540 	call	d54 <alt_printf>
//	alt_up_char_buffer_string (char_buffer_dev, text_top_row, 35, 29);
//	alt_up_char_buffer_string (char_buffer_dev, text_bottom_row, 35, 30);
//	VGA_box (34*4, 28*4, 50*4, 32*4, 0x187F);
    
	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     360:	01000034 	movhi	r4,0
     364:	21162504 	addi	r4,r4,22676
     368:	00018fc0 	call	18fc <alt_up_ps2_open_dev>
     36c:	102f883a 	mov	r23,r2
	if ( PS2_dev == NULL)
     370:	1000041e 	bne	r2,zero,384 <main+0xd4>
	{
		alt_printf ("Error: could not open PS2 device\n");
     374:	01000034 	movhi	r4,0
     378:	21162904 	addi	r4,r4,22692
     37c:	0000d540 	call	d54 <alt_printf>
     380:	0001fa06 	br	b6c <main+0x8bc>
		return -1;
	}
	else
		alt_printf ("Opened PS2 device\n");
     384:	01000034 	movhi	r4,0
     388:	21163204 	addi	r4,r4,22728
     38c:	0000d540 	call	d54 <alt_printf>

	// open the pushbutton KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     390:	01000034 	movhi	r4,0
     394:	21163704 	addi	r4,r4,22748
     398:	00018a00 	call	18a0 <alt_up_parallel_port_open_dev>
	if ( KEY_dev == NULL)
     39c:	1000041e 	bne	r2,zero,3b0 <main+0x100>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     3a0:	01000034 	movhi	r4,0
     3a4:	21163c04 	addi	r4,r4,22768
     3a8:	0000d540 	call	d54 <alt_printf>
     3ac:	0001ef06 	br	b6c <main+0x8bc>
		return -1;
	}
	else
		alt_printf ("Opened pushbutton KEY device\n");
     3b0:	01000034 	movhi	r4,0
     3b4:	21164804 	addi	r4,r4,22816
     3b8:	0000d540 	call	d54 <alt_printf>

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     3bc:	01000034 	movhi	r4,0
     3c0:	21165004 	addi	r4,r4,22848
     3c4:	00018a00 	call	18a0 <alt_up_parallel_port_open_dev>
	if (green_LEDs_dev == NULL)
     3c8:	1000041e 	bne	r2,zero,3dc <main+0x12c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     3cc:	01000034 	movhi	r4,0
     3d0:	21165404 	addi	r4,r4,22864
     3d4:	0000d540 	call	d54 <alt_printf>
     3d8:	0001e406 	br	b6c <main+0x8bc>
		return -1;
	}
	else
		alt_printf ("Opened green LEDs device\n");
     3dc:	01000034 	movhi	r4,0
     3e0:	21165f04 	addi	r4,r4,22908
     3e4:	0000d540 	call	d54 <alt_printf>

	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     3e8:	b809883a 	mov	r4,r23
     3ec:	01403fc4 	movi	r5,255
     3f0:	0001aa80 	call	1aa8 <alt_up_ps2_write_data_byte>
     3f4:	0021883a 	mov	r16,zero
     3f8:	d8032415 	stw	zero,3216(sp)
     3fc:	d8032315 	stw	zero,3212(sp)
     400:	00800c04 	movi	r2,48
     404:	d8832205 	stb	r2,3208(sp)
     408:	d8032115 	stw	zero,3204(sp)
     40c:	00000106 	br	414 <main+0x164>
     410:	a021883a 	mov	r16,r20
	{
	 //      int success =  decode_scancode(PS2_dev,&decode_mode,&buf,&key);       
	//	   if(success==0)
	//	   {
			/* check for PS/2 data--display on HEX displays */
  		if (alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
     414:	b809883a 	mov	r4,r23
     418:	d80b883a 	mov	r5,sp
     41c:	000194c0 	call	194c <alt_up_ps2_read_data_byte>
     420:	103ffc1e 	bne	r2,zero,414 <main+0x164>
		{
		   
	//		 shift the next data byte into the display 
			byte1 = byte2;
			byte2 = PS2_data;
     424:	dd000003 	ldbu	r20,0(sp)
			HEX_PS2 (byte1, byte2);
     428:	81003fcc 	andi	r4,r16,255
     42c:	2100201c 	xori	r4,r4,128
     430:	213fe004 	addi	r4,r4,-128
     434:	a1403fcc 	andi	r5,r20,255
     438:	2940201c 	xori	r5,r5,128
     43c:	297fe004 	addi	r5,r5,-128
     440:	00001f00 	call	1f0 <HEX_PS2>
			if(byte1==240 || byte1==byte2)
     444:	81003fcc 	andi	r4,r16,255
     448:	00803c04 	movi	r2,240
     44c:	20800226 	beq	r4,r2,458 <main+0x1a8>
     450:	a0803fcc 	andi	r2,r20,255
     454:	20bfee1e 	bne	r4,r2,410 <main+0x160>
			{ 
			   if(key2=='0')
     458:	d9832203 	ldbu	r6,3208(sp)
     45c:	30c03fcc 	andi	r3,r6,255
     460:	18c0201c 	xori	r3,r3,128
     464:	18ffe004 	addi	r3,r3,-128
     468:	00800c04 	movi	r2,48
     46c:	18809a1e 	bne	r3,r2,6d8 <main+0x428>
			   {
			    flag = 1;
			  switch(byte2)
     470:	a0bffac4 	addi	r2,r20,-21
     474:	10c03fcc 	andi	r3,r2,255
     478:	008010c4 	movi	r2,67
     47c:	10c09336 	bltu	r2,r3,6cc <main+0x41c>
     480:	18c5883a 	add	r2,r3,r3
     484:	1085883a 	add	r2,r2,r2
     488:	00c00034 	movhi	r3,0
     48c:	18c12704 	addi	r3,r3,1180
     490:	10c5883a 	add	r2,r2,r3
     494:	10800017 	ldw	r2,0(r2)
     498:	1000683a 	jmp	r2
     49c:	0000062c 	andhi	zero,zero,24
     4a0:	0000068c 	andi	zero,zero,26
     4a4:	000006cc 	andi	zero,zero,27
     4a8:	000006cc 	andi	zero,zero,27
     4ac:	000006cc 	andi	zero,zero,27
     4b0:	00000674 	movhi	zero,25
     4b4:	0000063c 	xorhi	zero,zero,24
     4b8:	000005ac 	andhi	zero,zero,22
     4bc:	0000065c 	xori	zero,zero,25
     4c0:	00000694 	movui	zero,26
     4c4:	000006cc 	andi	zero,zero,27
     4c8:	000006cc 	andi	zero,zero,27
     4cc:	000005bc 	xorhi	zero,zero,22
     4d0:	00000664 	muli	zero,zero,25
     4d4:	000005c4 	movi	zero,23
     4d8:	000005cc 	andi	zero,zero,23
     4dc:	000006a4 	muli	zero,zero,26
     4e0:	0000069c 	xori	zero,zero,26
     4e4:	000006cc 	andi	zero,zero,27
     4e8:	000006cc 	andi	zero,zero,27
     4ec:	0000067c 	xorhi	zero,zero,25
     4f0:	00000654 	movui	zero,25
     4f4:	000005d4 	movui	zero,23
     4f8:	00000644 	movi	zero,25
     4fc:	00000634 	movhi	zero,24
     500:	000006ac 	andhi	zero,zero,26
     504:	000006cc 	andi	zero,zero,27
     508:	000006cc 	andi	zero,zero,27
     50c:	00000614 	movui	zero,24
     510:	000005b4 	movhi	zero,22
     514:	000005e4 	muli	zero,zero,23
     518:	000005dc 	xori	zero,zero,23
     51c:	0000066c 	andhi	zero,zero,25
     520:	000006b4 	movhi	zero,26
     524:	000006cc 	andi	zero,zero,27
     528:	000006cc 	andi	zero,zero,27
     52c:	000006cc 	andi	zero,zero,27
     530:	0000060c 	andi	zero,zero,24
     534:	000005f4 	movhi	zero,23
     538:	0000064c 	andi	zero,zero,25
     53c:	000006bc 	xorhi	zero,zero,26
     540:	000006c4 	movi	zero,27
     544:	000006cc 	andi	zero,zero,27
     548:	000006cc 	andi	zero,zero,27
     54c:	000006cc 	andi	zero,zero,27
     550:	000005fc 	xorhi	zero,zero,23
     554:	000005ec 	andhi	zero,zero,23
     558:	0000061c 	xori	zero,zero,24
     55c:	00000684 	movi	zero,26
     560:	00000b5c 	xori	zero,zero,45
     564:	000006cc 	andi	zero,zero,27
     568:	000006cc 	andi	zero,zero,27
     56c:	000006cc 	andi	zero,zero,27
     570:	000006cc 	andi	zero,zero,27
     574:	00000604 	movi	zero,24
     578:	000006cc 	andi	zero,zero,27
     57c:	00000624 	muli	zero,zero,24
     580:	000006cc 	andi	zero,zero,27
     584:	000006cc 	andi	zero,zero,27
     588:	000006cc 	andi	zero,zero,27
     58c:	000006cc 	andi	zero,zero,27
     590:	000006cc 	andi	zero,zero,27
     594:	000006cc 	andi	zero,zero,27
     598:	000006cc 	andi	zero,zero,27
     59c:	000006cc 	andi	zero,zero,27
     5a0:	000006cc 	andi	zero,zero,27
     5a4:	000006cc 	andi	zero,zero,27
     5a8:	000009f4 	movhi	zero,39
     5ac:	07001044 	movi	fp,65
     5b0:	00016b06 	br	b60 <main+0x8b0>
			  {
			   case 28:
			    key = 'A';
				break;
     5b4:	07001084 	movi	fp,66
     5b8:	00016906 	br	b60 <main+0x8b0>
			   case 50:
			    key = 'B';
				break;
     5bc:	070010c4 	movi	fp,67
     5c0:	00016706 	br	b60 <main+0x8b0>
			   case 33:
			    key = 'C';
				break;
     5c4:	07001104 	movi	fp,68
     5c8:	00016506 	br	b60 <main+0x8b0>
			   case 35:
			    key = 'D';
				break;
     5cc:	07001144 	movi	fp,69
     5d0:	00016306 	br	b60 <main+0x8b0>
			   case 36:
			    key = 'E';
				break;
     5d4:	07001184 	movi	fp,70
     5d8:	00016106 	br	b60 <main+0x8b0>
			   case 43:
			    key = 'F';
				break;
     5dc:	070011c4 	movi	fp,71
     5e0:	00015f06 	br	b60 <main+0x8b0>
			   case 52:
			    key = 'G';
				break;
     5e4:	07001204 	movi	fp,72
     5e8:	00015d06 	br	b60 <main+0x8b0>
			   case 51:
			    key = 'H';
				break;
     5ec:	07001244 	movi	fp,73
     5f0:	00015b06 	br	b60 <main+0x8b0>
			   case 67:
			    key = 'I';
				break;
     5f4:	07001284 	movi	fp,74
     5f8:	00015906 	br	b60 <main+0x8b0>
			   case 59:
			    key = 'J';
				break;
     5fc:	070012c4 	movi	fp,75
     600:	00015706 	br	b60 <main+0x8b0>
			   case 66:
			    key = 'K';
				break;
     604:	07001304 	movi	fp,76
     608:	00015506 	br	b60 <main+0x8b0>
			   case 75:
			    key = 'L';
				break;
     60c:	07001344 	movi	fp,77
     610:	00015306 	br	b60 <main+0x8b0>
			   case 58:
			    key = 'M';
				 break;
     614:	07001384 	movi	fp,78
     618:	00015106 	br	b60 <main+0x8b0>
               case 49:
                key = 'N';
                break;
     61c:	070013c4 	movi	fp,79
     620:	00014f06 	br	b60 <main+0x8b0>
			   case 68:
			    key = 'O';
				break;
     624:	07001404 	movi	fp,80
     628:	00014d06 	br	b60 <main+0x8b0>
               case 77:
                key = 'P';
                break;
     62c:	07001444 	movi	fp,81
     630:	00014b06 	br	b60 <main+0x8b0>
               case 21:
                key = 'Q';
                break;
     634:	07001484 	movi	fp,82
     638:	00014906 	br	b60 <main+0x8b0>
               case 45:
                key = 'R';
                break;
     63c:	070014c4 	movi	fp,83
     640:	00014706 	br	b60 <main+0x8b0>
               case 27:
                key = 'S';
                break;
     644:	07001504 	movi	fp,84
     648:	00014506 	br	b60 <main+0x8b0>
               case 44:
                key = 'T';
                break;
     64c:	07001544 	movi	fp,85
     650:	00014306 	br	b60 <main+0x8b0>
               case 60:
                key = 'U';
                break;
     654:	07001584 	movi	fp,86
     658:	00014106 	br	b60 <main+0x8b0>
               case 42:
                key = 'V';
                break;
     65c:	070015c4 	movi	fp,87
     660:	00013f06 	br	b60 <main+0x8b0>
               case 29:
                key = 'W';
                break;
     664:	07001604 	movi	fp,88
     668:	00013d06 	br	b60 <main+0x8b0>
               case 34:
                key = 'X';
				break;
     66c:	07001644 	movi	fp,89
     670:	00013b06 	br	b60 <main+0x8b0>
               case 53:
                key = 'Y';
			    break;
     674:	07001684 	movi	fp,90
     678:	00013906 	br	b60 <main+0x8b0>
			   case 26:
			    key = 'Z';
				break;
     67c:	07000804 	movi	fp,32
     680:	00013706 	br	b60 <main+0x8b0>
			   case 41:
			    key = ' ';
				break;
     684:	07000c04 	movi	fp,48
     688:	00013506 	br	b60 <main+0x8b0>
			   case 69:
			    key = '0';
				break;
     68c:	07000c44 	movi	fp,49
     690:	00013306 	br	b60 <main+0x8b0>
			   case 22:
			    key = '1';
				break;
     694:	07000c84 	movi	fp,50
     698:	00013106 	br	b60 <main+0x8b0>
			   case 30:
			    key = '2';
				break;
     69c:	07000cc4 	movi	fp,51
     6a0:	00012f06 	br	b60 <main+0x8b0>
			   case 38:
			    key = '3';
				break;
     6a4:	07000d04 	movi	fp,52
     6a8:	00012d06 	br	b60 <main+0x8b0>
			   case 37:
			    key = '4';
				break;
     6ac:	07000d44 	movi	fp,53
     6b0:	00012b06 	br	b60 <main+0x8b0>
			   case 46:
			    key = '5';
				break;
     6b4:	07000d84 	movi	fp,54
     6b8:	00012906 	br	b60 <main+0x8b0>
			   case 54:
			    key = '6';
				break;
     6bc:	07000dc4 	movi	fp,55
     6c0:	00012706 	br	b60 <main+0x8b0>
			   case 61:
			    key = '7';
				break;
     6c4:	07000e04 	movi	fp,56
     6c8:	00012506 	br	b60 <main+0x8b0>
			   case 62:
			    key = '8';
				break;
     6cc:	07000a84 	movi	fp,42
     6d0:	00800044 	movi	r2,1
     6d4:	d8832115 	stw	r2,3204(sp)
				key='\a';
				break;
			   default:
			    key = '*';
			 } }
			   if(key2=='1' )
     6d8:	d9832203 	ldbu	r6,3208(sp)
     6dc:	30c03fcc 	andi	r3,r6,255
     6e0:	18c0201c 	xori	r3,r3,128
     6e4:	18ffe004 	addi	r3,r3,-128
     6e8:	00800c44 	movi	r2,49
     6ec:	1880cd1e 	bne	r3,r2,a24 <main+0x774>
			   {
			     switch(byte2)
     6f0:	a0bffac4 	addi	r2,r20,-21
     6f4:	10c03fcc 	andi	r3,r2,255
     6f8:	008010c4 	movi	r2,67
     6fc:	10c04e36 	bltu	r2,r3,838 <main+0x588>
     700:	18c5883a 	add	r2,r3,r3
     704:	1085883a 	add	r2,r2,r2
     708:	00c00034 	movhi	r3,0
     70c:	18c1c704 	addi	r3,r3,1820
     710:	10c5883a 	add	r2,r2,r3
     714:	10800017 	ldw	r2,0(r2)
     718:	1000683a 	jmp	r2
     71c:	00000904 	movi	zero,36
     720:	00000994 	movui	zero,38
     724:	00000838 	rdprs	zero,zero,32
     728:	00000838 	rdprs	zero,zero,32
     72c:	00000838 	rdprs	zero,zero,32
     730:	00000970 	cmpltui	zero,zero,37
     734:	0000091c 	xori	zero,zero,36
     738:	00000844 	movi	zero,33
     73c:	0000094c 	andi	zero,zero,37
     740:	000009a0 	cmpeqi	zero,zero,38
     744:	00000838 	rdprs	zero,zero,32
     748:	00000838 	rdprs	zero,zero,32
     74c:	0000085c 	xori	zero,zero,33
     750:	00000958 	cmpnei	zero,zero,37
     754:	00000868 	cmpgeui	zero,zero,33
     758:	00000874 	movhi	zero,33
     75c:	000009b8 	rdprs	zero,zero,38
     760:	000009ac 	andhi	zero,zero,38
     764:	00000838 	rdprs	zero,zero,32
     768:	00000838 	rdprs	zero,zero,32
     76c:	0000097c 	xorhi	zero,zero,37
     770:	00000940 	call	94 <alt_exception+0x74>
     774:	00000880 	call	88 <alt_exception+0x68>
     778:	00000928 	cmpgeui	zero,zero,36
     77c:	00000910 	cmplti	zero,zero,36
     780:	000009c4 	movi	zero,39
     784:	00000838 	rdprs	zero,zero,32
     788:	00000838 	rdprs	zero,zero,32
     78c:	000008e0 	cmpeqi	zero,zero,35
     790:	00000850 	cmplti	zero,zero,33
     794:	00000898 	cmpnei	zero,zero,34
     798:	0000088c 	andi	zero,zero,34
     79c:	00000964 	muli	zero,zero,37
     7a0:	000009d0 	cmplti	zero,zero,39
     7a4:	00000838 	rdprs	zero,zero,32
     7a8:	00000838 	rdprs	zero,zero,32
     7ac:	00000838 	rdprs	zero,zero,32
     7b0:	000008d4 	movui	zero,35
     7b4:	000008b0 	cmpltui	zero,zero,34
     7b8:	00000934 	movhi	zero,36
     7bc:	000009dc 	xori	zero,zero,39
     7c0:	000009e8 	cmpgeui	zero,zero,39
     7c4:	00000838 	rdprs	zero,zero,32
     7c8:	00000838 	rdprs	zero,zero,32
     7cc:	00000838 	rdprs	zero,zero,32
     7d0:	000008bc 	xorhi	zero,zero,34
     7d4:	000008a4 	muli	zero,zero,34
     7d8:	000008ec 	andhi	zero,zero,35
     7dc:	00000988 	cmpgei	zero,zero,38
     7e0:	0000082c 	andhi	zero,zero,32
     7e4:	00000838 	rdprs	zero,zero,32
     7e8:	00000838 	rdprs	zero,zero,32
     7ec:	00000838 	rdprs	zero,zero,32
     7f0:	00000838 	rdprs	zero,zero,32
     7f4:	000008c8 	cmpgei	zero,zero,35
     7f8:	00000838 	rdprs	zero,zero,32
     7fc:	000008f8 	rdprs	zero,zero,35
     800:	00000838 	rdprs	zero,zero,32
     804:	00000838 	rdprs	zero,zero,32
     808:	00000838 	rdprs	zero,zero,32
     80c:	00000838 	rdprs	zero,zero,32
     810:	00000838 	rdprs	zero,zero,32
     814:	00000838 	rdprs	zero,zero,32
     818:	00000838 	rdprs	zero,zero,32
     81c:	00000838 	rdprs	zero,zero,32
     820:	00000838 	rdprs	zero,zero,32
     824:	00000838 	rdprs	zero,zero,32
     828:	00000a00 	call	a0 <alt_exception+0x80>
     82c:	07000e44 	movi	fp,57
     830:	d8032115 	stw	zero,3204(sp)
     834:	00007b06 	br	a24 <main+0x774>
     838:	07000a84 	movi	fp,42
     83c:	d8032115 	stw	zero,3204(sp)
     840:	00007806 	br	a24 <main+0x774>
     844:	07001844 	movi	fp,97
     848:	d8032115 	stw	zero,3204(sp)
     84c:	00007506 	br	a24 <main+0x774>
			    {
			     case 28:
			     key = 'a';
				 break;
     850:	07001884 	movi	fp,98
     854:	d8032115 	stw	zero,3204(sp)
     858:	00007206 	br	a24 <main+0x774>
			   case 50:
			    key = 'b';
				break;
     85c:	070018c4 	movi	fp,99
     860:	d8032115 	stw	zero,3204(sp)
     864:	00006f06 	br	a24 <main+0x774>
			   case 33:
			    key = 'c';
				break;
     868:	07001904 	movi	fp,100
     86c:	d8032115 	stw	zero,3204(sp)
     870:	00006c06 	br	a24 <main+0x774>
			   case 35:
			    key = 'd';
				break;
     874:	07001944 	movi	fp,101
     878:	d8032115 	stw	zero,3204(sp)
     87c:	00006906 	br	a24 <main+0x774>
			   case 36:
			    key = 'e';
				break;
     880:	07001984 	movi	fp,102
     884:	d8032115 	stw	zero,3204(sp)
     888:	00006606 	br	a24 <main+0x774>
			   case 43:
			    key = 'f';
				break;
     88c:	070019c4 	movi	fp,103
     890:	d8032115 	stw	zero,3204(sp)
     894:	00006306 	br	a24 <main+0x774>
			   case 52:
			    key = 'g';
				break;
     898:	07001a04 	movi	fp,104
     89c:	d8032115 	stw	zero,3204(sp)
     8a0:	00006006 	br	a24 <main+0x774>
			   case 51:
			    key = 'h';
				break;
     8a4:	07001a44 	movi	fp,105
     8a8:	d8032115 	stw	zero,3204(sp)
     8ac:	00005d06 	br	a24 <main+0x774>
			   case 67:
			    key = 'i';
				break;
     8b0:	07001a84 	movi	fp,106
     8b4:	d8032115 	stw	zero,3204(sp)
     8b8:	00005a06 	br	a24 <main+0x774>
			   case 59:
			    key = 'j';
				break;
     8bc:	07001ac4 	movi	fp,107
     8c0:	d8032115 	stw	zero,3204(sp)
     8c4:	00005706 	br	a24 <main+0x774>
			   case 66:
			    key = 'k';
				break;
     8c8:	07001b04 	movi	fp,108
     8cc:	d8032115 	stw	zero,3204(sp)
     8d0:	00005406 	br	a24 <main+0x774>
			   case 75:
			    key = 'l';
				break;
     8d4:	07001b44 	movi	fp,109
     8d8:	d8032115 	stw	zero,3204(sp)
     8dc:	00005106 	br	a24 <main+0x774>
			   case 58:
			    key = 'm';
				 break;
     8e0:	07001b84 	movi	fp,110
     8e4:	d8032115 	stw	zero,3204(sp)
     8e8:	00004e06 	br	a24 <main+0x774>
               case 49:
                key = 'n';
                break;
     8ec:	07001bc4 	movi	fp,111
     8f0:	d8032115 	stw	zero,3204(sp)
     8f4:	00004b06 	br	a24 <main+0x774>
			   case 68:
			    key = 'o';
				break;
     8f8:	07001c04 	movi	fp,112
     8fc:	d8032115 	stw	zero,3204(sp)
     900:	00004806 	br	a24 <main+0x774>
               case 77:
                key = 'p';
                break;
     904:	07001c44 	movi	fp,113
     908:	d8032115 	stw	zero,3204(sp)
     90c:	00004506 	br	a24 <main+0x774>
               case 21:
                key = 'q';
                break;
     910:	07001c84 	movi	fp,114
     914:	d8032115 	stw	zero,3204(sp)
     918:	00004206 	br	a24 <main+0x774>
               case 45:
                key = 'r';
                break;
     91c:	07001cc4 	movi	fp,115
     920:	d8032115 	stw	zero,3204(sp)
     924:	00003f06 	br	a24 <main+0x774>
               case 27:
                key = 's';
                break;
     928:	07001d04 	movi	fp,116
     92c:	d8032115 	stw	zero,3204(sp)
     930:	00003c06 	br	a24 <main+0x774>
               case 44:
                key = 't';
                break;
     934:	07001d44 	movi	fp,117
     938:	d8032115 	stw	zero,3204(sp)
     93c:	00003906 	br	a24 <main+0x774>
               case 60:
                key = 'u';
                break;
     940:	07001d84 	movi	fp,118
     944:	d8032115 	stw	zero,3204(sp)
     948:	00003606 	br	a24 <main+0x774>
               case 42:
                key = 'v';
                break;
     94c:	07001dc4 	movi	fp,119
     950:	d8032115 	stw	zero,3204(sp)
     954:	00003306 	br	a24 <main+0x774>
               case 29:
                key = 'w';
                break;
     958:	07001e04 	movi	fp,120
     95c:	d8032115 	stw	zero,3204(sp)
     960:	00003006 	br	a24 <main+0x774>
               case 34:
                key = 'x';
				break;
     964:	07001e44 	movi	fp,121
     968:	d8032115 	stw	zero,3204(sp)
     96c:	00002d06 	br	a24 <main+0x774>
               case 53:
                key = 'y';
			    break;
     970:	07001e84 	movi	fp,122
     974:	d8032115 	stw	zero,3204(sp)
     978:	00002a06 	br	a24 <main+0x774>
			   case 26:
			    key = 'z';
				break;
     97c:	07000804 	movi	fp,32
     980:	d8032115 	stw	zero,3204(sp)
     984:	00002706 	br	a24 <main+0x774>
			   case 41:
			    key = ' ';
				break;
     988:	07000c04 	movi	fp,48
     98c:	d8032115 	stw	zero,3204(sp)
     990:	00002406 	br	a24 <main+0x774>
			   case 69:
			    key = '0';
				break;
     994:	07000c44 	movi	fp,49
     998:	d8032115 	stw	zero,3204(sp)
     99c:	00002106 	br	a24 <main+0x774>
			   case 22:
			    key = '1';
				break;
     9a0:	07000c84 	movi	fp,50
     9a4:	d8032115 	stw	zero,3204(sp)
     9a8:	00001e06 	br	a24 <main+0x774>
			   case 30:
			    key = '2';
				break;
     9ac:	07000cc4 	movi	fp,51
     9b0:	d8032115 	stw	zero,3204(sp)
     9b4:	00001b06 	br	a24 <main+0x774>
			   case 38:
			    key = '3';
				break;
     9b8:	07000d04 	movi	fp,52
     9bc:	d8032115 	stw	zero,3204(sp)
     9c0:	00001806 	br	a24 <main+0x774>
			   case 37:
			    key = '4';
				break;
     9c4:	07000d44 	movi	fp,53
     9c8:	d8032115 	stw	zero,3204(sp)
     9cc:	00001506 	br	a24 <main+0x774>
			   case 46:
			    key = '5';
				break;
     9d0:	07000d84 	movi	fp,54
     9d4:	d8032115 	stw	zero,3204(sp)
     9d8:	00001206 	br	a24 <main+0x774>
			   case 54:
			    key = '6';
				break;
     9dc:	07000dc4 	movi	fp,55
     9e0:	d8032115 	stw	zero,3204(sp)
     9e4:	00000f06 	br	a24 <main+0x774>
			   case 61:
			    key = '7';
				break;
     9e8:	07000e04 	movi	fp,56
     9ec:	d8032115 	stw	zero,3204(sp)
     9f0:	00000c06 	br	a24 <main+0x774>
			   case 62:
			    key = '8';
				break;
     9f4:	00800044 	movi	r2,1
     9f8:	d8832115 	stw	r2,3204(sp)
     9fc:	070001c4 	movi	fp,7
			   case 70:
			    key = '9';
				break;
				case 88:
				if(flag==0)
     a00:	d8c32117 	ldw	r3,3204(sp)
     a04:	1804c03a 	cmpne	r2,r3,zero
     a08:	1000031e 	bne	r2,zero,a18 <main+0x768>
     a0c:	01800c04 	movi	r6,48
     a10:	d9832205 	stb	r6,3208(sp)
     a14:	00000306 	br	a24 <main+0x774>
     a18:	00800c44 	movi	r2,49
     a1c:	d8832205 	stb	r2,3208(sp)
     a20:	d8032115 	stw	zero,3204(sp)
			 }
			 flag = 0;
			}
			 
		     display_vga[i][count]   = key;
		     display_vga[i][count+1] = '\0';
     a24:	d8c32417 	ldw	r3,3216(sp)
     a28:	19400044 	addi	r5,r3,1
//		    alt_up_char_buffer_string(char_buffer_dev,display_vga, 0, 0); 
             count = count+1;
			 if(count > 70)
     a2c:	00801184 	movi	r2,70
     a30:	11400316 	blt	r2,r5,a40 <main+0x790>
     a34:	282b883a 	mov	r21,r5
     a38:	dd832317 	ldw	r22,3212(sp)
     a3c:	00000306 	br	a4c <main+0x79c>
			 {
			  count = 0;
			  i++;
     a40:	d9832317 	ldw	r6,3212(sp)
     a44:	35800044 	addi	r22,r6,1
     a48:	002b883a 	mov	r21,zero
			 } 
		//	alt_up_char_buffer_string(char_buffer_dev,display_vga, 0, 0);
		  /*  if(i>=0) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[0], 8, 8);
     a4c:	01000044 	movi	r4,1
     a50:	d923883a 	add	r17,sp,r4
			    key = '*';
			 }
			 flag = 0;
			}
			 
		     display_vga[i][count]   = key;
     a54:	04801404 	movi	r18,80
     a58:	d8832317 	ldw	r2,3212(sp)
     a5c:	1487383a 	mul	r3,r2,r18
     a60:	1ec7883a 	add	r3,r3,sp
     a64:	d9832417 	ldw	r6,3216(sp)
     a68:	1985883a 	add	r2,r3,r6
     a6c:	1105883a 	add	r2,r2,r4
     a70:	17000005 	stb	fp,0(r2)
		     display_vga[i][count+1] = '\0';
     a74:	1947883a 	add	r3,r3,r5
     a78:	1907883a 	add	r3,r3,r4
     a7c:	18000005 	stb	zero,0(r3)
			 {
			  count = 0;
			  i++;
			 } 
		//	alt_up_char_buffer_string(char_buffer_dev,display_vga, 0, 0);
		  /*  if(i>=0) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[0], 8, 8);
     a80:	01c00204 	movi	r7,8
     a84:	9809883a 	mov	r4,r19
     a88:	880b883a 	mov	r5,r17
     a8c:	380d883a 	mov	r6,r7
     a90:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
          /*  if(i>=1) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[1], 4, 10);
     a94:	04000104 	movi	r16,4
     a98:	9809883a 	mov	r4,r19
     a9c:	8c8b883a 	add	r5,r17,r18
     aa0:	800d883a 	mov	r6,r16
     aa4:	01c00284 	movi	r7,10
     aa8:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
          /*  if(i>=2)*/  alt_up_char_buffer_string (char_buffer_dev,display_vga[2], 4, 12);
     aac:	9809883a 	mov	r4,r19
     ab0:	89402804 	addi	r5,r17,160
     ab4:	800d883a 	mov	r6,r16
     ab8:	01c00304 	movi	r7,12
     abc:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
          /*  if(i>=3) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[3], 4, 14);
     ac0:	9809883a 	mov	r4,r19
     ac4:	89403c04 	addi	r5,r17,240
     ac8:	800d883a 	mov	r6,r16
     acc:	01c00384 	movi	r7,14
     ad0:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
          /*  if(i>=4) */ alt_up_char_buffer_string (char_buffer_dev,display_vga[4], 4, 16);
     ad4:	9809883a 	mov	r4,r19
     ad8:	89405004 	addi	r5,r17,320
     adc:	800d883a 	mov	r6,r16
     ae0:	01c00404 	movi	r7,16
     ae4:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
                          alt_up_char_buffer_string (char_buffer_dev,display_vga[5], 4, 18);
     ae8:	9809883a 	mov	r4,r19
     aec:	89406404 	addi	r5,r17,400
     af0:	800d883a 	mov	r6,r16
     af4:	01c00484 	movi	r7,18
     af8:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[6], 4, 20);
     afc:	9809883a 	mov	r4,r19
     b00:	89407804 	addi	r5,r17,480
     b04:	800d883a 	mov	r6,r16
     b08:	01c00504 	movi	r7,20
     b0c:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[7], 4, 22);
     b10:	9809883a 	mov	r4,r19
     b14:	89408c04 	addi	r5,r17,560
     b18:	800d883a 	mov	r6,r16
     b1c:	01c00584 	movi	r7,22
     b20:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[8], 4, 24);
     b24:	9809883a 	mov	r4,r19
     b28:	8940a004 	addi	r5,r17,640
     b2c:	800d883a 	mov	r6,r16
     b30:	01c00604 	movi	r7,24
     b34:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
						  alt_up_char_buffer_string (char_buffer_dev,display_vga[9], 4, 26);
     b38:	9809883a 	mov	r4,r19
     b3c:	8940b404 	addi	r5,r17,720
     b40:	800d883a 	mov	r6,r16
     b44:	01c00684 	movi	r7,26
     b48:	0001e1c0 	call	1e1c <alt_up_char_buffer_string>
     b4c:	a021883a 	mov	r16,r20
     b50:	dd432415 	stw	r21,3216(sp)
     b54:	dd832315 	stw	r22,3212(sp)
     b58:	003e2e06 	br	414 <main+0x164>
     b5c:	07000e44 	movi	fp,57
     b60:	00800044 	movi	r2,1
     b64:	d8832115 	stw	r2,3204(sp)
     b68:	003fae06 	br	a24 <main+0x774>
				// mouse inserted; initialize sending of data
				(void) alt_up_ps2_write_data_byte (PS2_dev, 0xF4); 
		}  
	  }	   
	}
}
     b6c:	00bfffc4 	movi	r2,-1
     b70:	dfc32e17 	ldw	ra,3256(sp)
     b74:	df032d17 	ldw	fp,3252(sp)
     b78:	ddc32c17 	ldw	r23,3248(sp)
     b7c:	dd832b17 	ldw	r22,3244(sp)
     b80:	dd432a17 	ldw	r21,3240(sp)
     b84:	dd032917 	ldw	r20,3236(sp)
     b88:	dcc32817 	ldw	r19,3232(sp)
     b8c:	dc832717 	ldw	r18,3228(sp)
     b90:	dc432617 	ldw	r17,3224(sp)
     b94:	dc032517 	ldw	r16,3220(sp)
     b98:	dec32f04 	addi	sp,sp,3260
     b9c:	f800283a 	ret

00000ba0 <memcpy>:
     ba0:	01c003c4 	movi	r7,15
     ba4:	2007883a 	mov	r3,r4
     ba8:	3980032e 	bgeu	r7,r6,bb8 <memcpy+0x18>
     bac:	2904b03a 	or	r2,r5,r4
     bb0:	108000cc 	andi	r2,r2,3
     bb4:	10000926 	beq	r2,zero,bdc <memcpy+0x3c>
     bb8:	30000626 	beq	r6,zero,bd4 <memcpy+0x34>
     bbc:	30cd883a 	add	r6,r6,r3
     bc0:	28800003 	ldbu	r2,0(r5)
     bc4:	29400044 	addi	r5,r5,1
     bc8:	18800005 	stb	r2,0(r3)
     bcc:	18c00044 	addi	r3,r3,1
     bd0:	30fffb1e 	bne	r6,r3,bc0 <memcpy+0x20>
     bd4:	2005883a 	mov	r2,r4
     bd8:	f800283a 	ret
     bdc:	3811883a 	mov	r8,r7
     be0:	200f883a 	mov	r7,r4
     be4:	28c00017 	ldw	r3,0(r5)
     be8:	31bffc04 	addi	r6,r6,-16
     bec:	38c00015 	stw	r3,0(r7)
     bf0:	28800117 	ldw	r2,4(r5)
     bf4:	38800115 	stw	r2,4(r7)
     bf8:	28c00217 	ldw	r3,8(r5)
     bfc:	38c00215 	stw	r3,8(r7)
     c00:	28800317 	ldw	r2,12(r5)
     c04:	29400404 	addi	r5,r5,16
     c08:	38800315 	stw	r2,12(r7)
     c0c:	39c00404 	addi	r7,r7,16
     c10:	41bff436 	bltu	r8,r6,be4 <memcpy+0x44>
     c14:	008000c4 	movi	r2,3
     c18:	1180072e 	bgeu	r2,r6,c38 <memcpy+0x98>
     c1c:	1007883a 	mov	r3,r2
     c20:	28800017 	ldw	r2,0(r5)
     c24:	31bfff04 	addi	r6,r6,-4
     c28:	29400104 	addi	r5,r5,4
     c2c:	38800015 	stw	r2,0(r7)
     c30:	39c00104 	addi	r7,r7,4
     c34:	19bffa36 	bltu	r3,r6,c20 <memcpy+0x80>
     c38:	3807883a 	mov	r3,r7
     c3c:	003fde06 	br	bb8 <memcpy+0x18>

00000c40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     c40:	deffff04 	addi	sp,sp,-4
     c44:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     c48:	01000034 	movhi	r4,0
     c4c:	211dd904 	addi	r4,r4,30564
     c50:	00c00034 	movhi	r3,0
     c54:	18d6a204 	addi	r3,r3,23176

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     c58:	20c00926 	beq	r4,r3,c80 <alt_load+0x40>
     c5c:	01800034 	movhi	r6,0
     c60:	319dd904 	addi	r6,r6,30564
  {
    while( to != end )
     c64:	19800626 	beq	r3,r6,c80 <alt_load+0x40>
     c68:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     c6c:	20800017 	ldw	r2,0(r4)
     c70:	18800015 	stw	r2,0(r3)
     c74:	1947883a 	add	r3,r3,r5
     c78:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     c7c:	30fffb1e 	bne	r6,r3,c6c <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     c80:	01000034 	movhi	r4,0
     c84:	21000804 	addi	r4,r4,32
     c88:	00c00034 	movhi	r3,0
     c8c:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     c90:	20c00926 	beq	r4,r3,cb8 <alt_load+0x78>
     c94:	01800034 	movhi	r6,0
     c98:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     c9c:	19800626 	beq	r3,r6,cb8 <alt_load+0x78>
     ca0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     ca4:	20800017 	ldw	r2,0(r4)
     ca8:	18800015 	stw	r2,0(r3)
     cac:	1947883a 	add	r3,r3,r5
     cb0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     cb4:	30fffb1e 	bne	r6,r3,ca4 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     cb8:	01000034 	movhi	r4,0
     cbc:	2115ee04 	addi	r4,r4,22456
     cc0:	00c00034 	movhi	r3,0
     cc4:	18d5ee04 	addi	r3,r3,22456

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     cc8:	20c00926 	beq	r4,r3,cf0 <alt_load+0xb0>
     ccc:	01800034 	movhi	r6,0
     cd0:	3196a204 	addi	r6,r6,23176
  {
    while( to != end )
     cd4:	19800626 	beq	r3,r6,cf0 <alt_load+0xb0>
     cd8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     cdc:	20800017 	ldw	r2,0(r4)
     ce0:	18800015 	stw	r2,0(r3)
     ce4:	1947883a 	add	r3,r3,r5
     ce8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     cec:	30fffb1e 	bne	r6,r3,cdc <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     cf0:	0002b540 	call	2b54 <alt_dcache_flush_all>
  alt_icache_flush_all();
     cf4:	0002c400 	call	2c40 <alt_icache_flush_all>
}
     cf8:	dfc00017 	ldw	ra,0(sp)
     cfc:	dec00104 	addi	sp,sp,4
     d00:	f800283a 	ret

00000d04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     d04:	defffe04 	addi	sp,sp,-8
     d08:	dfc00115 	stw	ra,4(sp)
     d0c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     d10:	0009883a 	mov	r4,zero
     d14:	0000f580 	call	f58 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     d18:	0000f780 	call	f78 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     d1c:	01800034 	movhi	r6,0
     d20:	31966a04 	addi	r6,r6,22952
     d24:	3009883a 	mov	r4,r6
     d28:	300b883a 	mov	r5,r6
     d2c:	0002cc40 	call	2cc4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     d30:	d1274517 	ldw	r4,-25324(gp)
     d34:	d1674617 	ldw	r5,-25320(gp)
     d38:	d1a74717 	ldw	r6,-25316(gp)
     d3c:	00002b00 	call	2b0 <main>
     d40:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     d44:	01000044 	movi	r4,1
     d48:	0002a780 	call	2a78 <close>
  exit (result);
     d4c:	8009883a 	mov	r4,r16
     d50:	00032040 	call	3204 <exit>

00000d54 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     d54:	defff804 	addi	sp,sp,-32
     d58:	dfc00415 	stw	ra,16(sp)
     d5c:	dc800315 	stw	r18,12(sp)
     d60:	dc400215 	stw	r17,8(sp)
     d64:	dc000115 	stw	r16,4(sp)
     d68:	d9400515 	stw	r5,20(sp)
     d6c:	d9800615 	stw	r6,24(sp)
     d70:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     d74:	d8800504 	addi	r2,sp,20
     d78:	d8800015 	stw	r2,0(sp)
     d7c:	2023883a 	mov	r17,r4
     d80:	00005d06 	br	ef8 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     d84:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     d88:	21003fcc 	andi	r4,r4,255
     d8c:	2100201c 	xori	r4,r4,128
     d90:	213fe004 	addi	r4,r4,-128
     d94:	00800944 	movi	r2,37
     d98:	20800226 	beq	r4,r2,da4 <alt_printf+0x50>
        {
            alt_putchar(c);
     d9c:	0000f300 	call	f30 <alt_putchar>
     da0:	00005506 	br	ef8 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     da4:	89400003 	ldbu	r5,0(r17)
     da8:	8c400044 	addi	r17,r17,1
     dac:	29003fcc 	andi	r4,r5,255
     db0:	2100201c 	xori	r4,r4,128
     db4:	213fe004 	addi	r4,r4,-128
     db8:	20005726 	beq	r4,zero,f18 <alt_printf+0x1c4>
            {
                if (c == '%')
     dbc:	00800944 	movi	r2,37
     dc0:	2080021e 	bne	r4,r2,dcc <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     dc4:	0000f300 	call	f30 <alt_putchar>
     dc8:	00004b06 	br	ef8 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     dcc:	28c03fcc 	andi	r3,r5,255
     dd0:	18c0201c 	xori	r3,r3,128
     dd4:	18ffe004 	addi	r3,r3,-128
     dd8:	008018c4 	movi	r2,99
     ddc:	1880061e 	bne	r3,r2,df8 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     de0:	d8c00017 	ldw	r3,0(sp)
     de4:	18800104 	addi	r2,r3,4
     de8:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     dec:	19000017 	ldw	r4,0(r3)
     df0:	0000f300 	call	f30 <alt_putchar>
     df4:	00004006 	br	ef8 <alt_printf+0x1a4>
                }
                else if (c == 'x')
     df8:	28c03fcc 	andi	r3,r5,255
     dfc:	18c0201c 	xori	r3,r3,128
     e00:	18ffe004 	addi	r3,r3,-128
     e04:	00801e04 	movi	r2,120
     e08:	1880231e 	bne	r3,r2,e98 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     e0c:	d8c00017 	ldw	r3,0(sp)
     e10:	18800104 	addi	r2,r3,4
     e14:	d8800015 	stw	r2,0(sp)
     e18:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     e1c:	90000326 	beq	r18,zero,e2c <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     e20:	90bc002c 	andhi	r2,r18,61440
     e24:	10000426 	beq	r2,zero,e38 <alt_printf+0xe4>
     e28:	00003906 	br	f10 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     e2c:	01000c04 	movi	r4,48
     e30:	0000f300 	call	f30 <alt_putchar>
     e34:	00003006 	br	ef8 <alt_printf+0x1a4>
                        continue;
     e38:	04000704 	movi	r16,28
     e3c:	013fff04 	movi	r4,-4
     e40:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     e44:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     e48:	1c04983a 	sll	r2,r3,r16
     e4c:	9084703a 	and	r2,r18,r2
     e50:	103ffc26 	beq	r2,zero,e44 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     e54:	80002816 	blt	r16,zero,ef8 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     e58:	008003c4 	movi	r2,15
     e5c:	1404983a 	sll	r2,r2,r16
     e60:	9084703a 	and	r2,r18,r2
     e64:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     e68:	00800244 	movi	r2,9
     e6c:	10c00236 	bltu	r2,r3,e78 <alt_printf+0x124>
                            c = '0' + digit;
     e70:	19000c04 	addi	r4,r3,48
     e74:	00000106 	br	e7c <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     e78:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     e7c:	21003fcc 	andi	r4,r4,255
     e80:	2100201c 	xori	r4,r4,128
     e84:	213fe004 	addi	r4,r4,-128
     e88:	0000f300 	call	f30 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     e8c:	843fff04 	addi	r16,r16,-4
     e90:	80001916 	blt	r16,zero,ef8 <alt_printf+0x1a4>
     e94:	003ff006 	br	e58 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     e98:	28c03fcc 	andi	r3,r5,255
     e9c:	18c0201c 	xori	r3,r3,128
     ea0:	18ffe004 	addi	r3,r3,-128
     ea4:	00801cc4 	movi	r2,115
     ea8:	1880131e 	bne	r3,r2,ef8 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     eac:	d8800017 	ldw	r2,0(sp)
     eb0:	10c00104 	addi	r3,r2,4
     eb4:	d8c00015 	stw	r3,0(sp)
     eb8:	14000017 	ldw	r16,0(r2)

                    while(*s)
     ebc:	81000003 	ldbu	r4,0(r16)
     ec0:	20803fcc 	andi	r2,r4,255
     ec4:	1080201c 	xori	r2,r2,128
     ec8:	10bfe004 	addi	r2,r2,-128
     ecc:	10000a26 	beq	r2,zero,ef8 <alt_printf+0x1a4>
                      alt_putchar(*s++);
     ed0:	84000044 	addi	r16,r16,1
     ed4:	21003fcc 	andi	r4,r4,255
     ed8:	2100201c 	xori	r4,r4,128
     edc:	213fe004 	addi	r4,r4,-128
     ee0:	0000f300 	call	f30 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     ee4:	81000003 	ldbu	r4,0(r16)
     ee8:	20803fcc 	andi	r2,r4,255
     eec:	1080201c 	xori	r2,r2,128
     ef0:	10bfe004 	addi	r2,r2,-128
     ef4:	103ff61e 	bne	r2,zero,ed0 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     ef8:	89000003 	ldbu	r4,0(r17)
     efc:	20803fcc 	andi	r2,r4,255
     f00:	1080201c 	xori	r2,r2,128
     f04:	10bfe004 	addi	r2,r2,-128
     f08:	103f9e1e 	bne	r2,zero,d84 <alt_printf+0x30>
     f0c:	00000206 	br	f18 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     f10:	04000704 	movi	r16,28
     f14:	003fd006 	br	e58 <alt_printf+0x104>
     f18:	dfc00417 	ldw	ra,16(sp)
     f1c:	dc800317 	ldw	r18,12(sp)
     f20:	dc400217 	ldw	r17,8(sp)
     f24:	dc000117 	ldw	r16,4(sp)
     f28:	dec00804 	addi	sp,sp,32
     f2c:	f800283a 	ret

00000f30 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     f30:	deffff04 	addi	sp,sp,-4
     f34:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     f38:	00800034 	movhi	r2,0
     f3c:	109dd404 	addi	r2,r2,30544
     f40:	10800017 	ldw	r2,0(r2)
     f44:	11400217 	ldw	r5,8(r2)
     f48:	00032b00 	call	32b0 <putc>
#endif
}
     f4c:	dfc00017 	ldw	ra,0(sp)
     f50:	dec00104 	addi	sp,sp,4
     f54:	f800283a 	ret

00000f58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     f58:	deffff04 	addi	sp,sp,-4
     f5c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     f60:	00030980 	call	3098 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     f64:	00800044 	movi	r2,1
     f68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     f6c:	dfc00017 	ldw	ra,0(sp)
     f70:	dec00104 	addi	sp,sp,4
     f74:	f800283a 	ret

00000f78 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     f78:	defffd04 	addi	sp,sp,-12
     f7c:	dfc00215 	stw	ra,8(sp)
     f80:	dc400115 	stw	r17,4(sp)
     f84:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     f88:	04000204 	movi	r16,8
     f8c:	01040034 	movhi	r4,4096
     f90:	21080004 	addi	r4,r4,8192
     f94:	000b883a 	mov	r5,zero
     f98:	000d883a 	mov	r6,zero
     f9c:	800f883a 	mov	r7,r16
     fa0:	00018200 	call	1820 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     fa4:	04400034 	movhi	r17,0
     fa8:	8c56ac04 	addi	r17,r17,23216
     fac:	8809883a 	mov	r4,r17
     fb0:	000b883a 	mov	r5,zero
     fb4:	800d883a 	mov	r6,r16
     fb8:	000131c0 	call	131c <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     fbc:	04000034 	movhi	r16,0
     fc0:	841dcd04 	addi	r16,r16,30516
     fc4:	893ff604 	addi	r4,r17,-40
     fc8:	800b883a 	mov	r5,r16
     fcc:	0002b600 	call	2b60 <alt_dev_llist_insert>
     fd0:	01000034 	movhi	r4,0
     fd4:	211aba04 	addi	r4,r4,27368
     fd8:	800b883a 	mov	r5,r16
     fdc:	0002b600 	call	2b60 <alt_dev_llist_insert>
     fe0:	01000034 	movhi	r4,0
     fe4:	211ac604 	addi	r4,r4,27416
     fe8:	800b883a 	mov	r5,r16
     fec:	0002b600 	call	2b60 <alt_dev_llist_insert>
     ff0:	01000034 	movhi	r4,0
     ff4:	211ad204 	addi	r4,r4,27464
     ff8:	800b883a 	mov	r5,r16
     ffc:	0002b600 	call	2b60 <alt_dev_llist_insert>
    1000:	01000034 	movhi	r4,0
    1004:	211add04 	addi	r4,r4,27508
    1008:	800b883a 	mov	r5,r16
    100c:	0002b600 	call	2b60 <alt_dev_llist_insert>
    1010:	01000034 	movhi	r4,0
    1014:	211ae804 	addi	r4,r4,27552
    1018:	800b883a 	mov	r5,r16
    101c:	0002b600 	call	2b60 <alt_dev_llist_insert>
    1020:	01000034 	movhi	r4,0
    1024:	211af304 	addi	r4,r4,27596
    1028:	800b883a 	mov	r5,r16
    102c:	0002b600 	call	2b60 <alt_dev_llist_insert>
    1030:	01000034 	movhi	r4,0
    1034:	211afe04 	addi	r4,r4,27640
    1038:	800b883a 	mov	r5,r16
    103c:	0002b600 	call	2b60 <alt_dev_llist_insert>
    1040:	01000034 	movhi	r4,0
    1044:	211b0904 	addi	r4,r4,27684
    1048:	800b883a 	mov	r5,r16
    104c:	0002b600 	call	2b60 <alt_dev_llist_insert>
    1050:	01000034 	movhi	r4,0
    1054:	211b1404 	addi	r4,r4,27728
    1058:	800b883a 	mov	r5,r16
    105c:	0002b600 	call	2b60 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    1060:	04400034 	movhi	r17,0
    1064:	8c5b1f04 	addi	r17,r17,27772
    1068:	8809883a 	mov	r4,r17
    106c:	0001b8c0 	call	1b8c <alt_up_ps2_init>
    1070:	8809883a 	mov	r4,r17
    1074:	800b883a 	mov	r5,r16
    1078:	0002b600 	call	2b60 <alt_dev_llist_insert>
    107c:	01000034 	movhi	r4,0
    1080:	211b2d04 	addi	r4,r4,27828
    1084:	800b883a 	mov	r5,r16
    1088:	0002b600 	call	2b60 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    108c:	01000034 	movhi	r4,0
    1090:	211b3804 	addi	r4,r4,27872
    1094:	20800a17 	ldw	r2,40(r4)
    1098:	10800104 	addi	r2,r2,4
    109c:	10c0000b 	ldhu	r3,0(r2)
    10a0:	20c00c15 	stw	r3,48(r4)
    10a4:	10800017 	ldw	r2,0(r2)
    10a8:	100ad43a 	srli	r5,r2,16
    10ac:	21400d15 	stw	r5,52(r4)
    10b0:	00801004 	movi	r2,64
    10b4:	10c00436 	bltu	r2,r3,10c8 <alt_sys_init+0x150>
    10b8:	00800fc4 	movi	r2,63
    10bc:	20800f15 	stw	r2,60(r4)
    10c0:	00800184 	movi	r2,6
    10c4:	20801015 	stw	r2,64(r4)
    10c8:	00800804 	movi	r2,32
    10cc:	11400436 	bltu	r2,r5,10e0 <alt_sys_init+0x168>
    10d0:	00c007c4 	movi	r3,31
    10d4:	00800034 	movhi	r2,0
    10d8:	109b3804 	addi	r2,r2,27872
    10dc:	10c01115 	stw	r3,68(r2)
    10e0:	04000034 	movhi	r16,0
    10e4:	841b3804 	addi	r16,r16,27872
    10e8:	8009883a 	mov	r4,r16
    10ec:	0001f440 	call	1f44 <alt_up_char_buffer_init>
    10f0:	8009883a 	mov	r4,r16
    10f4:	01400034 	movhi	r5,0
    10f8:	295dcd04 	addi	r5,r5,30516
    10fc:	0002b600 	call	2b60 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    1100:	01800034 	movhi	r6,0
    1104:	319b4a04 	addi	r6,r6,27944
    1108:	30c00a17 	ldw	r3,40(r6)
    110c:	18800017 	ldw	r2,0(r3)
    1110:	30800b15 	stw	r2,44(r6)
    1114:	18800117 	ldw	r2,4(r3)
    1118:	30800c15 	stw	r2,48(r6)
    111c:	19000204 	addi	r4,r3,8
    1120:	2080000b 	ldhu	r2,0(r4)
    1124:	30800f15 	stw	r2,60(r6)
    1128:	20800017 	ldw	r2,0(r4)
    112c:	1004d43a 	srli	r2,r2,16
    1130:	30801015 	stw	r2,64(r6)
    1134:	18c00304 	addi	r3,r3,12
    1138:	18800017 	ldw	r2,0(r3)
    113c:	1005d07a 	srai	r2,r2,1
    1140:	01000044 	movi	r4,1
    1144:	1104703a 	and	r2,r2,r4
    1148:	30800d15 	stw	r2,52(r6)
    114c:	18800017 	ldw	r2,0(r3)
    1150:	1005d13a 	srai	r2,r2,4
    1154:	114003cc 	andi	r5,r2,15
    1158:	31400e15 	stw	r5,56(r6)
    115c:	1a000017 	ldw	r8,0(r3)
    1160:	400ed43a 	srli	r7,r8,16
    1164:	2900021e 	bne	r5,r4,1170 <alt_sys_init+0x1f8>
    1168:	30001115 	stw	zero,68(r6)
    116c:	00000b06 	br	119c <alt_sys_init+0x224>
    1170:	00800084 	movi	r2,2
    1174:	2880051e 	bne	r5,r2,118c <alt_sys_init+0x214>
    1178:	00c00044 	movi	r3,1
    117c:	00800034 	movhi	r2,0
    1180:	109b4a04 	addi	r2,r2,27944
    1184:	10c01115 	stw	r3,68(r2)
    1188:	00000406 	br	119c <alt_sys_init+0x224>
    118c:	00c00084 	movi	r3,2
    1190:	00800034 	movhi	r2,0
    1194:	109b4a04 	addi	r2,r2,27944
    1198:	10c01115 	stw	r3,68(r2)
    119c:	01000034 	movhi	r4,0
    11a0:	211b4a04 	addi	r4,r4,27944
    11a4:	38c03fcc 	andi	r3,r7,255
    11a8:	01800804 	movi	r6,32
    11ac:	30c5c83a 	sub	r2,r6,r3
    11b0:	017fffc4 	movi	r5,-1
    11b4:	2884d83a 	srl	r2,r5,r2
    11b8:	20801215 	stw	r2,72(r4)
    11bc:	20801117 	ldw	r2,68(r4)
    11c0:	1887883a 	add	r3,r3,r2
    11c4:	20c01315 	stw	r3,76(r4)
    11c8:	4004d63a 	srli	r2,r8,24
    11cc:	308dc83a 	sub	r6,r6,r2
    11d0:	298ad83a 	srl	r5,r5,r6
    11d4:	21401415 	stw	r5,80(r4)
    11d8:	01400034 	movhi	r5,0
    11dc:	295dcd04 	addi	r5,r5,30516
    11e0:	0002b600 	call	2b60 <alt_dev_llist_insert>
}
    11e4:	dfc00217 	ldw	ra,8(sp)
    11e8:	dc400117 	ldw	r17,4(sp)
    11ec:	dc000017 	ldw	r16,0(sp)
    11f0:	dec00304 	addi	sp,sp,12
    11f4:	f800283a 	ret

000011f8 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    11f8:	deffff04 	addi	sp,sp,-4
    11fc:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1200:	21000017 	ldw	r4,0(r4)
    1204:	21000a04 	addi	r4,r4,40
    1208:	00014c80 	call	14c8 <altera_avalon_jtag_uart_ioctl>
}
    120c:	dfc00017 	ldw	ra,0(sp)
    1210:	dec00104 	addi	sp,sp,4
    1214:	f800283a 	ret

00001218 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1218:	deffff04 	addi	sp,sp,-4
    121c:	dfc00015 	stw	ra,0(sp)
    1220:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1224:	21000017 	ldw	r4,0(r4)
    1228:	21000a04 	addi	r4,r4,40
    122c:	11400217 	ldw	r5,8(r2)
    1230:	00012900 	call	1290 <altera_avalon_jtag_uart_close>
}
    1234:	dfc00017 	ldw	ra,0(sp)
    1238:	dec00104 	addi	sp,sp,4
    123c:	f800283a 	ret

00001240 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1240:	deffff04 	addi	sp,sp,-4
    1244:	dfc00015 	stw	ra,0(sp)
    1248:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    124c:	21000017 	ldw	r4,0(r4)
    1250:	21000a04 	addi	r4,r4,40
    1254:	11c00217 	ldw	r7,8(r2)
    1258:	00016a40 	call	16a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    125c:	dfc00017 	ldw	ra,0(sp)
    1260:	dec00104 	addi	sp,sp,4
    1264:	f800283a 	ret

00001268 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1268:	deffff04 	addi	sp,sp,-4
    126c:	dfc00015 	stw	ra,0(sp)
    1270:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1274:	21000017 	ldw	r4,0(r4)
    1278:	21000a04 	addi	r4,r4,40
    127c:	11c00217 	ldw	r7,8(r2)
    1280:	000153c0 	call	153c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1284:	dfc00017 	ldw	ra,0(sp)
    1288:	dec00104 	addi	sp,sp,4
    128c:	f800283a 	ret

00001290 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1290:	21800c17 	ldw	r6,48(r4)
    1294:	2950000c 	andi	r5,r5,16384
    1298:	280b003a 	cmpeq	r5,r5,zero
    129c:	00000306 	br	12ac <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    12a0:	2800021e 	bne	r5,zero,12ac <altera_avalon_jtag_uart_close+0x1c>
    12a4:	00bffd44 	movi	r2,-11
    12a8:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    12ac:	20800d17 	ldw	r2,52(r4)
    12b0:	11800326 	beq	r2,r6,12c0 <altera_avalon_jtag_uart_close+0x30>
    12b4:	20c00917 	ldw	r3,36(r4)
    12b8:	20800117 	ldw	r2,4(r4)
    12bc:	18bff836 	bltu	r3,r2,12a0 <altera_avalon_jtag_uart_close+0x10>
    12c0:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    12c4:	f800283a 	ret

000012c8 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    12c8:	20800017 	ldw	r2,0(r4)
    12cc:	10c00104 	addi	r3,r2,4
    12d0:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    12d4:	01410004 	movi	r5,1024
    12d8:	1144703a 	and	r2,r2,r5
    12dc:	10000526 	beq	r2,zero,12f4 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    12e0:	20800817 	ldw	r2,32(r4)
    12e4:	1144b03a 	or	r2,r2,r5
    12e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    12ec:	20000915 	stw	zero,36(r4)
    12f0:	00000606 	br	130c <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    12f4:	20c00917 	ldw	r3,36(r4)
    12f8:	00a00034 	movhi	r2,32768
    12fc:	10bfff04 	addi	r2,r2,-4
    1300:	10c00236 	bltu	r2,r3,130c <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    1304:	18800044 	addi	r2,r3,1
    1308:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    130c:	00800074 	movhi	r2,1
    1310:	10a51404 	addi	r2,r2,-27568
    1314:	10800017 	ldw	r2,0(r2)
    1318:	f800283a 	ret

0000131c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    131c:	defffe04 	addi	sp,sp,-8
    1320:	dfc00115 	stw	ra,4(sp)
    1324:	dc000015 	stw	r16,0(sp)
    1328:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    132c:	00c00044 	movi	r3,1
    1330:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1334:	20800017 	ldw	r2,0(r4)
    1338:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    133c:	3009883a 	mov	r4,r6
    1340:	800b883a 	mov	r5,r16
    1344:	01800034 	movhi	r6,0
    1348:	3184e504 	addi	r6,r6,5012
    134c:	0002d5c0 	call	2d5c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1350:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1354:	81000204 	addi	r4,r16,8
    1358:	00800074 	movhi	r2,1
    135c:	10a51404 	addi	r2,r2,-27568
    1360:	11400017 	ldw	r5,0(r2)
    1364:	01800034 	movhi	r6,0
    1368:	3184b204 	addi	r6,r6,4808
    136c:	800f883a 	mov	r7,r16
    1370:	00029e40 	call	29e4 <alt_alarm_start>
    1374:	1000030e 	bge	r2,zero,1384 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1378:	00a00034 	movhi	r2,32768
    137c:	10bfffc4 	addi	r2,r2,-1
    1380:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1384:	dfc00117 	ldw	ra,4(sp)
    1388:	dc000017 	ldw	r16,0(sp)
    138c:	dec00204 	addi	sp,sp,8
    1390:	f800283a 	ret

00001394 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    1394:	22000017 	ldw	r8,0(r4)
    1398:	03800104 	movi	r14,4
    139c:	4399883a 	add	r12,r8,r14
    13a0:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    13a4:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    13a8:	5880c00c 	andi	r2,r11,768
    13ac:	10004526 	beq	r2,zero,14c4 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    13b0:	5880400c 	andi	r2,r11,256
    13b4:	10002126 	beq	r2,zero,143c <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    13b8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    13bc:	10800044 	addi	r2,r2,1
    13c0:	1081ffcc 	andi	r2,r2,2047
    13c4:	20c00b17 	ldw	r3,44(r4)
    13c8:	10c01626 	beq	r2,r3,1424 <altera_avalon_jtag_uart_irq+0x90>
    13cc:	02a00014 	movui	r10,32768
    13d0:	02400e04 	movi	r9,56
    13d4:	01c00044 	movi	r7,1
    13d8:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    13dc:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    13e0:	2a84703a 	and	r2,r5,r10
    13e4:	10000d26 	beq	r2,zero,141c <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    13e8:	20800a17 	ldw	r2,40(r4)
    13ec:	1105883a 	add	r2,r2,r4
    13f0:	1245883a 	add	r2,r2,r9
    13f4:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    13f8:	20800a17 	ldw	r2,40(r4)
    13fc:	11c5883a 	add	r2,r2,r7
    1400:	1184703a 	and	r2,r2,r6
    1404:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1408:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    140c:	11c5883a 	add	r2,r2,r7
    1410:	1184703a 	and	r2,r2,r6
    1414:	20c00b17 	ldw	r3,44(r4)
    1418:	10fff01e 	bne	r2,r3,13dc <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    141c:	2b44703a 	and	r2,r5,r13
    1420:	10000626 	beq	r2,zero,143c <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1424:	20800817 	ldw	r2,32(r4)
    1428:	00ffff84 	movi	r3,-2
    142c:	10c4703a 	and	r2,r2,r3
    1430:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1434:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1438:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    143c:	5880800c 	andi	r2,r11,512
    1440:	103fd826 	beq	r2,zero,13a4 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1444:	5b44703a 	and	r2,r11,r13
    1448:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    144c:	283fd526 	beq	r5,zero,13a4 <altera_avalon_jtag_uart_irq+0x10>
    1450:	20c00d17 	ldw	r3,52(r4)
    1454:	20800c17 	ldw	r2,48(r4)
    1458:	18801126 	beq	r3,r2,14a0 <altera_avalon_jtag_uart_irq+0x10c>
    145c:	02420e04 	movi	r9,2104
    1460:	01800044 	movi	r6,1
    1464:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1468:	20800d17 	ldw	r2,52(r4)
    146c:	1105883a 	add	r2,r2,r4
    1470:	1245883a 	add	r2,r2,r9
    1474:	10800007 	ldb	r2,0(r2)
    1478:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    147c:	20800d17 	ldw	r2,52(r4)
    1480:	1185883a 	add	r2,r2,r6
    1484:	11c4703a 	and	r2,r2,r7
    1488:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    148c:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1490:	283fc426 	beq	r5,zero,13a4 <altera_avalon_jtag_uart_irq+0x10>
    1494:	20c00d17 	ldw	r3,52(r4)
    1498:	20800c17 	ldw	r2,48(r4)
    149c:	18bff21e 	bne	r3,r2,1468 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    14a0:	20c00817 	ldw	r3,32(r4)
    14a4:	00bfff44 	movi	r2,-3
    14a8:	1886703a 	and	r3,r3,r2
    14ac:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14b0:	20800017 	ldw	r2,0(r4)
    14b4:	1385883a 	add	r2,r2,r14
    14b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    14bc:	60800037 	ldwio	r2,0(r12)
    14c0:	003fb806 	br	13a4 <altera_avalon_jtag_uart_irq+0x10>
    14c4:	f800283a 	ret

000014c8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    14c8:	009a8044 	movi	r2,27137
    14cc:	28800326 	beq	r5,r2,14dc <altera_avalon_jtag_uart_ioctl+0x14>
    14d0:	009a8084 	movi	r2,27138
    14d4:	2880171e 	bne	r5,r2,1534 <altera_avalon_jtag_uart_ioctl+0x6c>
    14d8:	00000d06 	br	1510 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    14dc:	20c00117 	ldw	r3,4(r4)
    14e0:	00a00034 	movhi	r2,32768
    14e4:	10bfffc4 	addi	r2,r2,-1
    14e8:	18801226 	beq	r3,r2,1534 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    14ec:	31800017 	ldw	r6,0(r6)
    14f0:	30ffff84 	addi	r3,r6,-2
    14f4:	10bfff44 	addi	r2,r2,-3
    14f8:	10c0022e 	bgeu	r2,r3,1504 <altera_avalon_jtag_uart_ioctl+0x3c>
    14fc:	01a00034 	movhi	r6,32768
    1500:	31bfff84 	addi	r6,r6,-2
    1504:	21800115 	stw	r6,4(r4)
    1508:	0005883a 	mov	r2,zero
    150c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1510:	20c00117 	ldw	r3,4(r4)
    1514:	00a00034 	movhi	r2,32768
    1518:	10bfffc4 	addi	r2,r2,-1
    151c:	18800526 	beq	r3,r2,1534 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1520:	20800917 	ldw	r2,36(r4)
    1524:	10c5803a 	cmpltu	r2,r2,r3
    1528:	30800015 	stw	r2,0(r6)
    152c:	0005883a 	mov	r2,zero
    1530:	f800283a 	ret
    1534:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    1538:	f800283a 	ret

0000153c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    153c:	defff604 	addi	sp,sp,-40
    1540:	dfc00915 	stw	ra,36(sp)
    1544:	df000815 	stw	fp,32(sp)
    1548:	ddc00715 	stw	r23,28(sp)
    154c:	dd800615 	stw	r22,24(sp)
    1550:	dd400515 	stw	r21,20(sp)
    1554:	dd000415 	stw	r20,16(sp)
    1558:	dcc00315 	stw	r19,12(sp)
    155c:	dc800215 	stw	r18,8(sp)
    1560:	dc400115 	stw	r17,4(sp)
    1564:	dc000015 	stw	r16,0(sp)
    1568:	2025883a 	mov	r18,r4
    156c:	282f883a 	mov	r23,r5
    1570:	3027883a 	mov	r19,r6
    1574:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1578:	0180220e 	bge	zero,r6,1604 <altera_avalon_jtag_uart_read+0xc8>
    157c:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1580:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    1584:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    1588:	b4400236 	bltu	r22,r17,1594 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    158c:	b461c83a 	sub	r16,r22,r17
    1590:	00000206 	br	159c <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1594:	00820004 	movi	r2,2048
    1598:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    159c:	80000d26 	beq	r16,zero,15d4 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    15a0:	9829883a 	mov	r20,r19
    15a4:	9c001d36 	bltu	r19,r16,161c <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    15a8:	91400e04 	addi	r5,r18,56
    15ac:	a809883a 	mov	r4,r21
    15b0:	2c4b883a 	add	r5,r5,r17
    15b4:	800d883a 	mov	r6,r16
    15b8:	0000ba00 	call	ba0 <memcpy>
      ptr   += n;
    15bc:	ac2b883a 	add	r21,r21,r16
      space -= n;
    15c0:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    15c4:	8445883a 	add	r2,r16,r17
    15c8:	1081ffcc 	andi	r2,r2,2047
    15cc:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    15d0:	04ffeb16 	blt	zero,r19,1580 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    15d4:	adc01c1e 	bne	r21,r23,1648 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    15d8:	e090000c 	andi	r2,fp,16384
    15dc:	10000d1e 	bne	r2,zero,1614 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    15e0:	90800a17 	ldw	r2,40(r18)
    15e4:	b080031e 	bne	r22,r2,15f4 <altera_avalon_jtag_uart_read+0xb8>
    15e8:	90c00917 	ldw	r3,36(r18)
    15ec:	90800117 	ldw	r2,4(r18)
    15f0:	18bffb36 	bltu	r3,r2,15e0 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    15f4:	90800a17 	ldw	r2,40(r18)
    15f8:	b0800426 	beq	r22,r2,160c <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    15fc:	04c0030e 	bge	zero,r19,160c <altera_avalon_jtag_uart_read+0xd0>
    1600:	003fde06 	br	157c <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    1604:	3890000c 	andi	r2,r7,16384
    1608:	1000021e 	bne	r2,zero,1614 <altera_avalon_jtag_uart_read+0xd8>
    160c:	00bffec4 	movi	r2,-5
    1610:	00001806 	br	1674 <altera_avalon_jtag_uart_read+0x138>
    1614:	00bffd44 	movi	r2,-11
    1618:	00001606 	br	1674 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    161c:	91400e04 	addi	r5,r18,56
    1620:	a809883a 	mov	r4,r21
    1624:	894b883a 	add	r5,r17,r5
    1628:	980d883a 	mov	r6,r19
    162c:	0000ba00 	call	ba0 <memcpy>
      ptr   += n;
    1630:	aceb883a 	add	r21,r21,r19
      space -= n;
    1634:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1638:	a445883a 	add	r2,r20,r17
    163c:	1081ffcc 	andi	r2,r2,2047
    1640:	90800b15 	stw	r2,44(r18)
    1644:	003fe306 	br	15d4 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1648:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    164c:	00bfff84 	movi	r2,-2
    1650:	2084703a 	and	r2,r4,r2
    1654:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1658:	90800817 	ldw	r2,32(r18)
    165c:	10800054 	ori	r2,r2,1
    1660:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1664:	90c00017 	ldw	r3,0(r18)
    1668:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    166c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    1670:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    1674:	dfc00917 	ldw	ra,36(sp)
    1678:	df000817 	ldw	fp,32(sp)
    167c:	ddc00717 	ldw	r23,28(sp)
    1680:	dd800617 	ldw	r22,24(sp)
    1684:	dd400517 	ldw	r21,20(sp)
    1688:	dd000417 	ldw	r20,16(sp)
    168c:	dcc00317 	ldw	r19,12(sp)
    1690:	dc800217 	ldw	r18,8(sp)
    1694:	dc400117 	ldw	r17,4(sp)
    1698:	dc000017 	ldw	r16,0(sp)
    169c:	dec00a04 	addi	sp,sp,40
    16a0:	f800283a 	ret

000016a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    16a4:	defff804 	addi	sp,sp,-32
    16a8:	dfc00715 	stw	ra,28(sp)
    16ac:	dd800615 	stw	r22,24(sp)
    16b0:	dd400515 	stw	r21,20(sp)
    16b4:	dd000415 	stw	r20,16(sp)
    16b8:	dcc00315 	stw	r19,12(sp)
    16bc:	dc800215 	stw	r18,8(sp)
    16c0:	dc400115 	stw	r17,4(sp)
    16c4:	dc000015 	stw	r16,0(sp)
    16c8:	2021883a 	mov	r16,r4
    16cc:	282d883a 	mov	r22,r5
    16d0:	3011883a 	mov	r8,r6
    16d4:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    16d8:	01800616 	blt	zero,r6,16f4 <altera_avalon_jtag_uart_write+0x50>
    16dc:	2829883a 	mov	r20,r5
    16e0:	00002106 	br	1768 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    16e4:	a585c83a 	sub	r2,r20,r22
    16e8:	00004306 	br	17f8 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    16ec:	00bffd44 	movi	r2,-11
    16f0:	00004106 	br	17f8 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    16f4:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    16f8:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    16fc:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    1700:	9140032e 	bgeu	r18,r5,1710 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1704:	2c85c83a 	sub	r2,r5,r18
    1708:	11bfffc4 	addi	r6,r2,-1
    170c:	00000606 	br	1728 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    1710:	28000326 	beq	r5,zero,1720 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1714:	00820004 	movi	r2,2048
    1718:	148dc83a 	sub	r6,r2,r18
    171c:	00000206 	br	1728 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1720:	0081ffc4 	movi	r2,2047
    1724:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    1728:	30002626 	beq	r6,zero,17c4 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    172c:	4027883a 	mov	r19,r8
    1730:	3023883a 	mov	r17,r6
    1734:	4180012e 	bgeu	r8,r6,173c <altera_avalon_jtag_uart_write+0x98>
    1738:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    173c:	81020e04 	addi	r4,r16,2104
    1740:	2489883a 	add	r4,r4,r18
    1744:	a00b883a 	mov	r5,r20
    1748:	880d883a 	mov	r6,r17
    174c:	0000ba00 	call	ba0 <memcpy>
      ptr   += n;
    1750:	a469883a 	add	r20,r20,r17
      count -= n;
    1754:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1758:	9445883a 	add	r2,r18,r17
    175c:	1081ffcc 	andi	r2,r2,2047
    1760:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1764:	023fe416 	blt	zero,r8,16f8 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1768:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    176c:	00bfff84 	movi	r2,-2
    1770:	2084703a 	and	r2,r4,r2
    1774:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1778:	80800817 	ldw	r2,32(r16)
    177c:	10800094 	ori	r2,r2,2
    1780:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1784:	80c00017 	ldw	r3,0(r16)
    1788:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    178c:	2001703a 	wrctl	status,r4
    1790:	00000706 	br	17b0 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1794:	80800d17 	ldw	r2,52(r16)
    1798:	1140031e 	bne	r2,r5,17a8 <altera_avalon_jtag_uart_write+0x104>
    179c:	80c00917 	ldw	r3,36(r16)
    17a0:	80800117 	ldw	r2,4(r16)
    17a4:	18bffb36 	bltu	r3,r2,1794 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    17a8:	80800d17 	ldw	r2,52(r16)
    17ac:	117fed1e 	bne	r2,r5,1764 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    17b0:	b53fcc1e 	bne	r22,r20,16e4 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    17b4:	a890000c 	andi	r2,r21,16384
    17b8:	103fcc1e 	bne	r2,zero,16ec <altera_avalon_jtag_uart_write+0x48>
    17bc:	00bffec4 	movi	r2,-5
    17c0:	00000d06 	br	17f8 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    17c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17c8:	00bfff84 	movi	r2,-2
    17cc:	2084703a 	and	r2,r4,r2
    17d0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    17d4:	80800817 	ldw	r2,32(r16)
    17d8:	10800094 	ori	r2,r2,2
    17dc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    17e0:	80c00017 	ldw	r3,0(r16)
    17e4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17e8:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    17ec:	a890000c 	andi	r2,r21,16384
    17f0:	103fe826 	beq	r2,zero,1794 <altera_avalon_jtag_uart_write+0xf0>
    17f4:	003fee06 	br	17b0 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    17f8:	dfc00717 	ldw	ra,28(sp)
    17fc:	dd800617 	ldw	r22,24(sp)
    1800:	dd400517 	ldw	r21,20(sp)
    1804:	dd000417 	ldw	r20,16(sp)
    1808:	dcc00317 	ldw	r19,12(sp)
    180c:	dc800217 	ldw	r18,8(sp)
    1810:	dc400117 	ldw	r17,4(sp)
    1814:	dc000017 	ldw	r16,0(sp)
    1818:	dec00804 	addi	sp,sp,32
    181c:	f800283a 	ret

00001820 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1820:	deffff04 	addi	sp,sp,-4
    1824:	dfc00015 	stw	ra,0(sp)
    1828:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    182c:	00c00074 	movhi	r3,1
    1830:	18e51404 	addi	r3,r3,-27568
    1834:	18800017 	ldw	r2,0(r3)
    1838:	1000011e 	bne	r2,zero,1840 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    183c:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1840:	008001c4 	movi	r2,7
    1844:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1848:	3009883a 	mov	r4,r6
    184c:	01800034 	movhi	r6,0
    1850:	31861904 	addi	r6,r6,6244
    1854:	0002d5c0 	call	2d5c <alt_irq_register>
#endif  
}
    1858:	dfc00017 	ldw	ra,0(sp)
    185c:	dec00104 	addi	sp,sp,4
    1860:	f800283a 	ret

00001864 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1864:	defffe04 	addi	sp,sp,-8
    1868:	dfc00115 	stw	ra,4(sp)
    186c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1870:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1874:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1878:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    187c:	00bfff84 	movi	r2,-2
    1880:	8084703a 	and	r2,r16,r2
    1884:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    1888:	0002fec0 	call	2fec <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    188c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    1890:	dfc00117 	ldw	ra,4(sp)
    1894:	dc000017 	ldw	r16,0(sp)
    1898:	dec00204 	addi	sp,sp,8
    189c:	f800283a 	ret

000018a0 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    18a0:	deffff04 	addi	sp,sp,-4
    18a4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    18a8:	01400034 	movhi	r5,0
    18ac:	295dcd04 	addi	r5,r5,30516
    18b0:	0002bd00 	call	2bd0 <alt_find_dev>

  return dev;
}
    18b4:	dfc00017 	ldw	ra,0(sp)
    18b8:	dec00104 	addi	sp,sp,4
    18bc:	f800283a 	ret

000018c0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    18c0:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    18c4:	1004c03a 	cmpne	r2,r2,zero
    18c8:	f800283a 	ret

000018cc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    18cc:	2080004c 	andi	r2,r4,1
    18d0:	f800283a 	ret

000018d4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    18d4:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    18d8:	1004c03a 	cmpne	r2,r2,zero
    18dc:	f800283a 	ret

000018e0 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    18e0:	2004d43a 	srli	r2,r4,16
    18e4:	f800283a 	ret

000018e8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    18e8:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    18ec:	1004c03a 	cmpne	r2,r2,zero
    18f0:	f800283a 	ret

000018f4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    18f4:	20803fcc 	andi	r2,r4,255
    18f8:	f800283a 	ret

000018fc <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    18fc:	deffff04 	addi	sp,sp,-4
    1900:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1904:	01400034 	movhi	r5,0
    1908:	295dcd04 	addi	r5,r5,30516
    190c:	0002bd00 	call	2bd0 <alt_find_dev>

  return dev;
}
    1910:	dfc00017 	ldw	ra,0(sp)
    1914:	dec00104 	addi	sp,sp,4
    1918:	f800283a 	ret

0000191c <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    191c:	defffe04 	addi	sp,sp,-8
    1920:	dfc00115 	stw	ra,4(sp)
    1924:	dc000015 	stw	r16,0(sp)
    1928:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    192c:	81000037 	ldwio	r4,0(r16)
    1930:	00018e00 	call	18e0 <read_num_bytes_available>
    1934:	10bfffcc 	andi	r2,r2,65535
    1938:	103ffc1e 	bne	r2,zero,192c <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    193c:	dfc00117 	ldw	ra,4(sp)
    1940:	dc000017 	ldw	r16,0(sp)
    1944:	dec00204 	addi	sp,sp,8
    1948:	f800283a 	ret

0000194c <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    194c:	defffd04 	addi	sp,sp,-12
    1950:	dfc00215 	stw	ra,8(sp)
    1954:	dc400115 	stw	r17,4(sp)
    1958:	dc000015 	stw	r16,0(sp)
    195c:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1960:	20800a17 	ldw	r2,40(r4)
    1964:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    1968:	8009883a 	mov	r4,r16
    196c:	00018e80 	call	18e8 <read_data_valid>
    1970:	10803fcc 	andi	r2,r2,255
    1974:	1000021e 	bne	r2,zero,1980 <alt_up_ps2_read_data_byte+0x34>
    1978:	00bfffc4 	movi	r2,-1
    197c:	00000406 	br	1990 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    1980:	8009883a 	mov	r4,r16
    1984:	00018f40 	call	18f4 <read_data_byte>
    1988:	88800005 	stb	r2,0(r17)
    198c:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    1990:	dfc00217 	ldw	ra,8(sp)
    1994:	dc400117 	ldw	r17,4(sp)
    1998:	dc000017 	ldw	r16,0(sp)
    199c:	dec00304 	addi	sp,sp,12
    19a0:	f800283a 	ret

000019a4 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    19a4:	defffb04 	addi	sp,sp,-20
    19a8:	dfc00415 	stw	ra,16(sp)
    19ac:	dcc00315 	stw	r19,12(sp)
    19b0:	dc800215 	stw	r18,8(sp)
    19b4:	dc400115 	stw	r17,4(sp)
    19b8:	dc000015 	stw	r16,0(sp)
    19bc:	2025883a 	mov	r18,r4
    19c0:	2827883a 	mov	r19,r5
    19c4:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    19c8:	90800a17 	ldw	r2,40(r18)
    19cc:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    19d0:	8009883a 	mov	r4,r16
    19d4:	00018e80 	call	18e8 <read_data_valid>
    19d8:	10803fcc 	andi	r2,r2,255
    19dc:	10000526 	beq	r2,zero,19f4 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    19e0:	8009883a 	mov	r4,r16
    19e4:	00018f40 	call	18f4 <read_data_byte>
    19e8:	98800005 	stb	r2,0(r19)
    19ec:	0005883a 	mov	r2,zero
    19f0:	00000506 	br	1a08 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    19f4:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    19f8:	90800c17 	ldw	r2,48(r18)
    19fc:	103ff226 	beq	r2,zero,19c8 <alt_up_ps2_read_data_byte_timeout+0x24>
    1a00:	147ff12e 	bgeu	r2,r17,19c8 <alt_up_ps2_read_data_byte_timeout+0x24>
    1a04:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    1a08:	dfc00417 	ldw	ra,16(sp)
    1a0c:	dcc00317 	ldw	r19,12(sp)
    1a10:	dc800217 	ldw	r18,8(sp)
    1a14:	dc400117 	ldw	r17,4(sp)
    1a18:	dc000017 	ldw	r16,0(sp)
    1a1c:	dec00504 	addi	sp,sp,20
    1a20:	f800283a 	ret

00001a24 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1a24:	deffff04 	addi	sp,sp,-4
    1a28:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1a2c:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1a30:	0180010e 	bge	zero,r6,1a38 <alt_up_ps2_read_fd+0x14>
    1a34:	003fff06 	br	1a34 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    1a38:	00019a40 	call	19a4 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1a3c:	1005003a 	cmpeq	r2,r2,zero
    1a40:	dfc00017 	ldw	ra,0(sp)
    1a44:	dec00104 	addi	sp,sp,4
    1a48:	f800283a 	ret

00001a4c <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1a4c:	defffc04 	addi	sp,sp,-16
    1a50:	dfc00315 	stw	ra,12(sp)
    1a54:	dc400215 	stw	r17,8(sp)
    1a58:	dc000115 	stw	r16,4(sp)
    1a5c:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    1a60:	d8000005 	stb	zero,0(sp)
    1a64:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    1a68:	8009883a 	mov	r4,r16
    1a6c:	d80b883a 	mov	r5,sp
    1a70:	00019a40 	call	19a4 <alt_up_ps2_read_data_byte_timeout>
    1a74:	1007883a 	mov	r3,r2
		if ( status == 0)
    1a78:	10803fcc 	andi	r2,r2,255
    1a7c:	1000041e 	bne	r2,zero,1a90 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    1a80:	d8800003 	ldbu	r2,0(sp)
    1a84:	147ff81e 	bne	r2,r17,1a68 <alt_up_ps2_wait_for_ack+0x1c>
    1a88:	0005883a 	mov	r2,zero
    1a8c:	00000106 	br	1a94 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    1a90:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    1a94:	dfc00317 	ldw	ra,12(sp)
    1a98:	dc400217 	ldw	r17,8(sp)
    1a9c:	dc000117 	ldw	r16,4(sp)
    1aa0:	dec00404 	addi	sp,sp,16
    1aa4:	f800283a 	ret

00001aa8 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1aa8:	deffff04 	addi	sp,sp,-4
    1aac:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1ab0:	20800a17 	ldw	r2,40(r4)
    1ab4:	29403fcc 	andi	r5,r5,255
    1ab8:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1abc:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    1ac0:	11000137 	ldwio	r4,4(r2)
    1ac4:	00018d40 	call	18d4 <read_CE_bit>
    1ac8:	10803fcc 	andi	r2,r2,255
    1acc:	10000226 	beq	r2,zero,1ad8 <alt_up_ps2_write_data_byte+0x30>
    1ad0:	00bffec4 	movi	r2,-5
    1ad4:	00000106 	br	1adc <alt_up_ps2_write_data_byte+0x34>
    1ad8:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1adc:	dfc00017 	ldw	ra,0(sp)
    1ae0:	dec00104 	addi	sp,sp,4
    1ae4:	f800283a 	ret

00001ae8 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1ae8:	defffb04 	addi	sp,sp,-20
    1aec:	dfc00415 	stw	ra,16(sp)
    1af0:	dcc00315 	stw	r19,12(sp)
    1af4:	dc800215 	stw	r18,8(sp)
    1af8:	dc400115 	stw	r17,4(sp)
    1afc:	dc000015 	stw	r16,0(sp)
    1b00:	2827883a 	mov	r19,r5
    1b04:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1b08:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1b0c:	01800216 	blt	zero,r6,1b18 <alt_up_ps2_write_fd+0x30>
    1b10:	0021883a 	mov	r16,zero
    1b14:	00000806 	br	1b38 <alt_up_ps2_write_fd+0x50>
    1b18:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1b1c:	9c05883a 	add	r2,r19,r16
    1b20:	8809883a 	mov	r4,r17
    1b24:	11400003 	ldbu	r5,0(r2)
    1b28:	0001aa80 	call	1aa8 <alt_up_ps2_write_data_byte>
		if (status!=0)
    1b2c:	1000021e 	bne	r2,zero,1b38 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    1b30:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1b34:	943ff91e 	bne	r18,r16,1b1c <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    1b38:	8005883a 	mov	r2,r16
    1b3c:	dfc00417 	ldw	ra,16(sp)
    1b40:	dcc00317 	ldw	r19,12(sp)
    1b44:	dc800217 	ldw	r18,8(sp)
    1b48:	dc400117 	ldw	r17,4(sp)
    1b4c:	dc000017 	ldw	r16,0(sp)
    1b50:	dec00504 	addi	sp,sp,20
    1b54:	f800283a 	ret

00001b58 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1b58:	defffe04 	addi	sp,sp,-8
    1b5c:	dfc00115 	stw	ra,4(sp)
    1b60:	dc000015 	stw	r16,0(sp)
    1b64:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1b68:	29403fcc 	andi	r5,r5,255
    1b6c:	0001aa80 	call	1aa8 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    1b70:	1000021e 	bne	r2,zero,1b7c <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1b74:	8009883a 	mov	r4,r16
    1b78:	0001a4c0 	call	1a4c <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    1b7c:	dfc00117 	ldw	ra,4(sp)
    1b80:	dc000017 	ldw	r16,0(sp)
    1b84:	dec00204 	addi	sp,sp,8
    1b88:	f800283a 	ret

00001b8c <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1b8c:	defffd04 	addi	sp,sp,-12
    1b90:	dfc00215 	stw	ra,8(sp)
    1b94:	dc000115 	stw	r16,4(sp)
    1b98:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    1b9c:	01403fc4 	movi	r5,255
    1ba0:	0001b580 	call	1b58 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    1ba4:	1000171e 	bne	r2,zero,1c04 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1ba8:	8009883a 	mov	r4,r16
    1bac:	d80b883a 	mov	r5,sp
    1bb0:	00019a40 	call	19a4 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1bb4:	1000131e 	bne	r2,zero,1c04 <alt_up_ps2_init+0x78>
    1bb8:	d8c00003 	ldbu	r3,0(sp)
    1bbc:	00802a84 	movi	r2,170
    1bc0:	1880101e 	bne	r3,r2,1c04 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1bc4:	8009883a 	mov	r4,r16
    1bc8:	d80b883a 	mov	r5,sp
    1bcc:	00019a40 	call	19a4 <alt_up_ps2_read_data_byte_timeout>
    1bd0:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1bd4:	00bfe304 	movi	r2,-116
    1bd8:	1880031e 	bne	r3,r2,1be8 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1bdc:	00800044 	movi	r2,1
    1be0:	80800d15 	stw	r2,52(r16)
    1be4:	00000706 	br	1c04 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    1be8:	1800061e 	bne	r3,zero,1c04 <alt_up_ps2_init+0x78>
    1bec:	d8800003 	ldbu	r2,0(sp)
    1bf0:	1000041e 	bne	r2,zero,1c04 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1bf4:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1bf8:	8009883a 	mov	r4,r16
    1bfc:	01403d04 	movi	r5,244
    1c00:	0001aa80 	call	1aa8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1c04:	dfc00217 	ldw	ra,8(sp)
    1c08:	dc000117 	ldw	r16,4(sp)
    1c0c:	dec00304 	addi	sp,sp,12
    1c10:	f800283a 	ret

00001c14 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1c14:	20800a17 	ldw	r2,40(r4)
    1c18:	10800104 	addi	r2,r2,4
    1c1c:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1c20:	013fff84 	movi	r4,-2
    1c24:	1906703a 	and	r3,r3,r4
    1c28:	10c00035 	stwio	r3,0(r2)
}
    1c2c:	f800283a 	ret

00001c30 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1c30:	20c00a17 	ldw	r3,40(r4)
    1c34:	18c00104 	addi	r3,r3,4
    1c38:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1c3c:	10800054 	ori	r2,r2,1
    1c40:	18800035 	stwio	r2,0(r3)
}
    1c44:	f800283a 	ret

00001c48 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    1c48:	200495ba 	slli	r2,r4,22
}
    1c4c:	1005d7fa 	srai	r2,r2,31
    1c50:	f800283a 	ret

00001c54 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1c54:	deffff04 	addi	sp,sp,-4
    1c58:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1c5c:	01400034 	movhi	r5,0
    1c60:	295dcd04 	addi	r5,r5,30516
    1c64:	0002bd00 	call	2bd0 <alt_find_dev>

  return dev;
}
    1c68:	dfc00017 	ldw	ra,0(sp)
    1c6c:	dec00104 	addi	sp,sp,4
    1c70:	f800283a 	ret

00001c74 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1c74:	defffd04 	addi	sp,sp,-12
    1c78:	dfc00215 	stw	ra,8(sp)
    1c7c:	dc400115 	stw	r17,4(sp)
    1c80:	dc000015 	stw	r16,0(sp)
    1c84:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1c88:	20800a17 	ldw	r2,40(r4)
    1c8c:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1c90:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1c94:	8009883a 	mov	r4,r16
    1c98:	0001c480 	call	1c48 <alt_up_rs232_check_parity>
    1c9c:	88800005 	stb	r2,0(r17)
    1ca0:	8420000c 	andi	r16,r16,32768
    1ca4:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    1ca8:	80bfffc4 	addi	r2,r16,-1
    1cac:	dfc00217 	ldw	ra,8(sp)
    1cb0:	dc400117 	ldw	r17,4(sp)
    1cb4:	dc000017 	ldw	r16,0(sp)
    1cb8:	dec00304 	addi	sp,sp,12
    1cbc:	f800283a 	ret

00001cc0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1cc0:	defff904 	addi	sp,sp,-28
    1cc4:	dfc00615 	stw	ra,24(sp)
    1cc8:	dd000515 	stw	r20,20(sp)
    1ccc:	dcc00415 	stw	r19,16(sp)
    1cd0:	dc800315 	stw	r18,12(sp)
    1cd4:	dc400215 	stw	r17,8(sp)
    1cd8:	dc000115 	stw	r16,4(sp)
    1cdc:	2821883a 	mov	r16,r5
    1ce0:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1ce4:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1ce8:	3000021e 	bne	r6,zero,1cf4 <alt_up_rs232_read_fd+0x34>
    1cec:	0025883a 	mov	r18,zero
    1cf0:	00000a06 	br	1d1c <alt_up_rs232_read_fd+0x5c>
    1cf4:	0025883a 	mov	r18,zero
    1cf8:	04400044 	movi	r17,1
    1cfc:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1d00:	8461883a 	add	r16,r16,r17
    1d04:	9809883a 	mov	r4,r19
    1d08:	d80d883a 	mov	r6,sp
    1d0c:	0001c740 	call	1c74 <alt_up_rs232_read_data>
    1d10:	1000021e 	bne	r2,zero,1d1c <alt_up_rs232_read_fd+0x5c>
			count++;
    1d14:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1d18:	a4bff81e 	bne	r20,r18,1cfc <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1d1c:	9005883a 	mov	r2,r18
    1d20:	dfc00617 	ldw	ra,24(sp)
    1d24:	dd000517 	ldw	r20,20(sp)
    1d28:	dcc00417 	ldw	r19,16(sp)
    1d2c:	dc800317 	ldw	r18,12(sp)
    1d30:	dc400217 	ldw	r17,8(sp)
    1d34:	dc000117 	ldw	r16,4(sp)
    1d38:	dec00704 	addi	sp,sp,28
    1d3c:	f800283a 	ret

00001d40 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1d40:	20800a17 	ldw	r2,40(r4)
    1d44:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1d48:	1004d43a 	srli	r2,r2,16
    1d4c:	f800283a 	ret

00001d50 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1d50:	20800a17 	ldw	r2,40(r4)
    1d54:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1d58:	29403fcc 	andi	r5,r5,255
    1d5c:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1d60:	0005883a 	mov	r2,zero
    1d64:	f800283a 	ret

00001d68 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1d68:	defffb04 	addi	sp,sp,-20
    1d6c:	dfc00415 	stw	ra,16(sp)
    1d70:	dcc00315 	stw	r19,12(sp)
    1d74:	dc800215 	stw	r18,8(sp)
    1d78:	dc400115 	stw	r17,4(sp)
    1d7c:	dc000015 	stw	r16,0(sp)
    1d80:	2827883a 	mov	r19,r5
    1d84:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1d88:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    1d8c:	3000021e 	bne	r6,zero,1d98 <alt_up_rs232_write_fd+0x30>
    1d90:	0021883a 	mov	r16,zero
    1d94:	00000806 	br	1db8 <alt_up_rs232_write_fd+0x50>
    1d98:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    1d9c:	84c5883a 	add	r2,r16,r19
    1da0:	8809883a 	mov	r4,r17
    1da4:	11400003 	ldbu	r5,0(r2)
    1da8:	0001d500 	call	1d50 <alt_up_rs232_write_data>
    1dac:	1000021e 	bne	r2,zero,1db8 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    1db0:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1db4:	943ff91e 	bne	r18,r16,1d9c <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    1db8:	8005883a 	mov	r2,r16
    1dbc:	dfc00417 	ldw	ra,16(sp)
    1dc0:	dcc00317 	ldw	r19,12(sp)
    1dc4:	dc800217 	ldw	r18,8(sp)
    1dc8:	dc400117 	ldw	r17,4(sp)
    1dcc:	dc000017 	ldw	r16,0(sp)
    1dd0:	dec00504 	addi	sp,sp,20
    1dd4:	f800283a 	ret

00001dd8 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1dd8:	20800a17 	ldw	r2,40(r4)
    1ddc:	10800104 	addi	r2,r2,4
    1de0:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1de4:	013fff84 	movi	r4,-2
    1de8:	1906703a 	and	r3,r3,r4
    1dec:	10c00035 	stwio	r3,0(r2)
}
    1df0:	f800283a 	ret

00001df4 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1df4:	20c00a17 	ldw	r3,40(r4)
    1df8:	18c00104 	addi	r3,r3,4
    1dfc:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1e00:	10800054 	ori	r2,r2,1
    1e04:	18800035 	stwio	r2,0(r3)
}
    1e08:	f800283a 	ret

00001e0c <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1e0c:	20800a17 	ldw	r2,40(r4)
    1e10:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1e14:	10bfffcc 	andi	r2,r2,65535
    1e18:	f800283a 	ret

00001e1c <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1e1c:	20800c17 	ldw	r2,48(r4)
    1e20:	30801c2e 	bgeu	r6,r2,1e94 <alt_up_char_buffer_string+0x78>
    1e24:	20800d17 	ldw	r2,52(r4)
    1e28:	38801a2e 	bgeu	r7,r2,1e94 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1e2c:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    1e30:	28c00003 	ldbu	r3,0(r5)
    1e34:	18803fcc 	andi	r2,r3,255
    1e38:	1080201c 	xori	r2,r2,128
    1e3c:	10bfe004 	addi	r2,r2,-128
    1e40:	10001626 	beq	r2,zero,1e9c <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1e44:	3a04983a 	sll	r2,r7,r8
    1e48:	308f883a 	add	r7,r6,r2
    1e4c:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1e50:	20800b17 	ldw	r2,44(r4)
    1e54:	3885883a 	add	r2,r7,r2
    1e58:	18c03fcc 	andi	r3,r3,255
    1e5c:	18c0201c 	xori	r3,r3,128
    1e60:	18ffe004 	addi	r3,r3,-128
    1e64:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    1e68:	320d883a 	add	r6,r6,r8
    1e6c:	20800c17 	ldw	r2,48(r4)
    1e70:	3080082e 	bgeu	r6,r2,1e94 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    1e74:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1e78:	28c00003 	ldbu	r3,0(r5)
    1e7c:	18803fcc 	andi	r2,r3,255
    1e80:	1080201c 	xori	r2,r2,128
    1e84:	10bfe004 	addi	r2,r2,-128
    1e88:	10000426 	beq	r2,zero,1e9c <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1e8c:	3a0f883a 	add	r7,r7,r8
    1e90:	003fef06 	br	1e50 <alt_up_char_buffer_string+0x34>
    1e94:	00bfffc4 	movi	r2,-1
    1e98:	f800283a 	ret
    1e9c:	0005883a 	mov	r2,zero
	}
	return 0;
}
    1ea0:	f800283a 	ret

00001ea4 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1ea4:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1ea8:	20800c17 	ldw	r2,48(r4)
    1eac:	3080112e 	bgeu	r6,r2,1ef4 <alt_up_char_buffer_draw+0x50>
    1eb0:	20800d17 	ldw	r2,52(r4)
    1eb4:	38800f2e 	bgeu	r7,r2,1ef4 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1eb8:	20c00f17 	ldw	r3,60(r4)
    1ebc:	30c6703a 	and	r3,r6,r3
    1ec0:	20800e17 	ldw	r2,56(r4)
    1ec4:	1886983a 	sll	r3,r3,r2
    1ec8:	20801117 	ldw	r2,68(r4)
    1ecc:	3884703a 	and	r2,r7,r2
    1ed0:	21001017 	ldw	r4,64(r4)
    1ed4:	1104983a 	sll	r2,r2,r4
    1ed8:	1886b03a 	or	r3,r3,r2
    1edc:	40800b17 	ldw	r2,44(r8)
    1ee0:	1887883a 	add	r3,r3,r2
    1ee4:	28803fcc 	andi	r2,r5,255
    1ee8:	18800025 	stbio	r2,0(r3)
    1eec:	0005883a 	mov	r2,zero
    1ef0:	f800283a 	ret

	return 0;
    1ef4:	00bfffc4 	movi	r2,-1
}
    1ef8:	f800283a 	ret

00001efc <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1efc:	20c00a17 	ldw	r3,40(r4)
    1f00:	00800044 	movi	r2,1
    1f04:	188000a5 	stbio	r2,2(r3)
    1f08:	20800a17 	ldw	r2,40(r4)
    1f0c:	10c00084 	addi	r3,r2,2
    1f10:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1f14:	18800023 	ldbuio	r2,0(r3)
    1f18:	1104703a 	and	r2,r2,r4
    1f1c:	103ffd1e 	bne	r2,zero,1f14 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    1f20:	f800283a 	ret

00001f24 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1f24:	deffff04 	addi	sp,sp,-4
    1f28:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1f2c:	01400034 	movhi	r5,0
    1f30:	295dcd04 	addi	r5,r5,30516
    1f34:	0002bd00 	call	2bd0 <alt_find_dev>

  return dev;
}
    1f38:	dfc00017 	ldw	ra,0(sp)
    1f3c:	dec00104 	addi	sp,sp,4
    1f40:	f800283a 	ret

00001f44 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1f44:	defffe04 	addi	sp,sp,-8
    1f48:	dfc00115 	stw	ra,4(sp)
    1f4c:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1f50:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1f54:	80800007 	ldb	r2,0(r16)
    1f58:	10000a26 	beq	r2,zero,1f84 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1f5c:	8009883a 	mov	r4,r16
    1f60:	01400034 	movhi	r5,0
    1f64:	29569704 	addi	r5,r5,23132
    1f68:	000349c0 	call	349c <strcmp>
    1f6c:	1000021e 	bne	r2,zero,1f78 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    1f70:	80000005 	stb	zero,0(r16)
    1f74:	00000306 	br	1f84 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1f78:	84000044 	addi	r16,r16,1
    1f7c:	80800007 	ldb	r2,0(r16)
    1f80:	103ff61e 	bne	r2,zero,1f5c <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    1f84:	dfc00117 	ldw	ra,4(sp)
    1f88:	dc000017 	ldw	r16,0(sp)
    1f8c:	dec00204 	addi	sp,sp,8
    1f90:	f800283a 	ret

00001f94 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    1f94:	da000017 	ldw	r8,0(sp)
    1f98:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    1f9c:	1800051e 	bne	r3,zero,1fb4 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    1fa0:	29c5383a 	mul	r2,r5,r7
    1fa4:	3085883a 	add	r2,r6,r2
    1fa8:	1105883a 	add	r2,r2,r4
    1fac:	12000025 	stbio	r8,0(r2)
    1fb0:	f800283a 	ret
	else if (mode == 1)
    1fb4:	00800044 	movi	r2,1
    1fb8:	1880061e 	bne	r3,r2,1fd4 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    1fbc:	29c5383a 	mul	r2,r5,r7
    1fc0:	3085883a 	add	r2,r6,r2
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1105883a 	add	r2,r2,r4
    1fcc:	1200002d 	sthio	r8,0(r2)
    1fd0:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    1fd4:	29c5383a 	mul	r2,r5,r7
    1fd8:	1185883a 	add	r2,r2,r6
    1fdc:	1085883a 	add	r2,r2,r2
    1fe0:	1085883a 	add	r2,r2,r2
    1fe4:	1105883a 	add	r2,r2,r4
    1fe8:	12000035 	stwio	r8,0(r2)
    1fec:	f800283a 	ret

00001ff0 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    1ff0:	defff304 	addi	sp,sp,-52
    1ff4:	dfc00c15 	stw	ra,48(sp)
    1ff8:	df000b15 	stw	fp,44(sp)
    1ffc:	ddc00a15 	stw	r23,40(sp)
    2000:	dd800915 	stw	r22,36(sp)
    2004:	dd400815 	stw	r21,32(sp)
    2008:	dd000715 	stw	r20,28(sp)
    200c:	dcc00615 	stw	r19,24(sp)
    2010:	dc800515 	stw	r18,20(sp)
    2014:	dc400415 	stw	r17,16(sp)
    2018:	dc000315 	stw	r16,12(sp)
    201c:	3011883a 	mov	r8,r6
    2020:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    2024:	4987c83a 	sub	r3,r9,r6
    2028:	1800010e 	bge	r3,zero,2030 <alt_up_pixel_buffer_dma_draw_line+0x40>
    202c:	00c7c83a 	sub	r3,zero,r3
    2030:	3945c83a 	sub	r2,r7,r5
    2034:	1000010e 	bge	r2,zero,203c <alt_up_pixel_buffer_dma_draw_line+0x4c>
    2038:	0085c83a 	sub	r2,zero,r2
    203c:	10c4803a 	cmplt	r2,r2,r3
    2040:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    2044:	20c00e17 	ldw	r3,56(r4)
    2048:	00800044 	movi	r2,1
    204c:	1880021e 	bne	r3,r2,2058 <alt_up_pixel_buffer_dma_draw_line+0x68>
    2050:	d8000215 	stw	zero,8(sp)
    2054:	00000306 	br	2064 <alt_up_pixel_buffer_dma_draw_line+0x74>
    2058:	18c00098 	cmpnei	r3,r3,2
    205c:	18c00044 	addi	r3,r3,1
    2060:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    2064:	20800d17 	ldw	r2,52(r4)
    2068:	1000061e 	bne	r2,zero,2084 <alt_up_pixel_buffer_dma_draw_line+0x94>
    206c:	20801317 	ldw	r2,76(r4)
    2070:	d8c00217 	ldw	r3,8(sp)
    2074:	10c5c83a 	sub	r2,r2,r3
    2078:	00c00044 	movi	r3,1
    207c:	18ae983a 	sll	r23,r3,r2
    2080:	00000106 	br	2088 <alt_up_pixel_buffer_dma_draw_line+0x98>
    2084:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    2088:	d8c00f17 	ldw	r3,60(sp)
    208c:	00800044 	movi	r2,1
    2090:	1880021e 	bne	r3,r2,209c <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    2094:	25800c17 	ldw	r22,48(r4)
    2098:	00000106 	br	20a0 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    209c:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    20a0:	50000326 	beq	r10,zero,20b0 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    20a4:	400d883a 	mov	r6,r8
    20a8:	4827883a 	mov	r19,r9
    20ac:	00000406 	br	20c0 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    20b0:	280d883a 	mov	r6,r5
    20b4:	400b883a 	mov	r5,r8
    20b8:	3827883a 	mov	r19,r7
    20bc:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    20c0:	9980060e 	bge	r19,r6,20dc <alt_up_pixel_buffer_dma_draw_line+0xec>
    20c4:	9805883a 	mov	r2,r19
    20c8:	3027883a 	mov	r19,r6
    20cc:	100d883a 	mov	r6,r2
    20d0:	3805883a 	mov	r2,r7
    20d4:	280f883a 	mov	r7,r5
    20d8:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    20dc:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    20e0:	3969c83a 	sub	r20,r7,r5
    20e4:	a000010e 	bge	r20,zero,20ec <alt_up_pixel_buffer_dma_draw_line+0xfc>
    20e8:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    20ec:	a804d7fa 	srli	r2,r21,31
    20f0:	1545883a 	add	r2,r2,r21
    20f4:	1005d07a 	srai	r2,r2,1
    20f8:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    20fc:	29c0020e 	bge	r5,r7,2108 <alt_up_pixel_buffer_dma_draw_line+0x118>
    2100:	07000044 	movi	fp,1
    2104:	00000106 	br	210c <alt_up_pixel_buffer_dma_draw_line+0x11c>
    2108:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    210c:	50000226 	beq	r10,zero,2118 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    2110:	9980030e 	bge	r19,r6,2120 <alt_up_pixel_buffer_dma_draw_line+0x130>
    2114:	00002506 	br	21ac <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    2118:	9980130e 	bge	r19,r6,2168 <alt_up_pixel_buffer_dma_draw_line+0x178>
    211c:	00002306 	br	21ac <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    2120:	3021883a 	mov	r16,r6
    2124:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    2128:	d8800e17 	ldw	r2,56(sp)
    212c:	d8800015 	stw	r2,0(sp)
    2130:	d8c00217 	ldw	r3,8(sp)
    2134:	d8c00115 	stw	r3,4(sp)
    2138:	b009883a 	mov	r4,r22
    213c:	b80b883a 	mov	r5,r23
    2140:	900d883a 	mov	r6,r18
    2144:	800f883a 	mov	r7,r16
    2148:	0001f940 	call	1f94 <helper_plot_pixel>
			error = error + deltay;
    214c:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    2150:	0440020e 	bge	zero,r17,215c <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    2154:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    2158:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    215c:	84000044 	addi	r16,r16,1
    2160:	9c001216 	blt	r19,r16,21ac <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    2164:	003ff006 	br	2128 <alt_up_pixel_buffer_dma_draw_line+0x138>
    2168:	3021883a 	mov	r16,r6
    216c:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    2170:	d8800e17 	ldw	r2,56(sp)
    2174:	d8800015 	stw	r2,0(sp)
    2178:	d8c00217 	ldw	r3,8(sp)
    217c:	d8c00115 	stw	r3,4(sp)
    2180:	b009883a 	mov	r4,r22
    2184:	b80b883a 	mov	r5,r23
    2188:	800d883a 	mov	r6,r16
    218c:	900f883a 	mov	r7,r18
    2190:	0001f940 	call	1f94 <helper_plot_pixel>
			error = error + deltay;
    2194:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    2198:	0440020e 	bge	zero,r17,21a4 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    219c:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    21a0:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    21a4:	84000044 	addi	r16,r16,1
    21a8:	9c3ff10e 	bge	r19,r16,2170 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    21ac:	dfc00c17 	ldw	ra,48(sp)
    21b0:	df000b17 	ldw	fp,44(sp)
    21b4:	ddc00a17 	ldw	r23,40(sp)
    21b8:	dd800917 	ldw	r22,36(sp)
    21bc:	dd400817 	ldw	r21,32(sp)
    21c0:	dd000717 	ldw	r20,28(sp)
    21c4:	dcc00617 	ldw	r19,24(sp)
    21c8:	dc800517 	ldw	r18,20(sp)
    21cc:	dc400417 	ldw	r17,16(sp)
    21d0:	dc000317 	ldw	r16,12(sp)
    21d4:	dec00d04 	addi	sp,sp,52
    21d8:	f800283a 	ret

000021dc <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    21dc:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    21e0:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    21e4:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    21e8:	3980022e 	bgeu	r7,r6,21f4 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    21ec:	3011883a 	mov	r8,r6
    21f0:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    21f4:	2a405d2e 	bgeu	r5,r9,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    21f8:	30805c2e 	bgeu	r6,r2,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    21fc:	40800136 	bltu	r8,r2,2204 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    2200:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2204:	d8c00117 	ldw	r3,4(sp)
    2208:	00800044 	movi	r2,1
    220c:	1880021e 	bne	r3,r2,2218 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    2210:	20c00c17 	ldw	r3,48(r4)
    2214:	00000106 	br	221c <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    2218:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    221c:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2220:	20800d17 	ldw	r2,52(r4)
    2224:	1000281e 	bne	r2,zero,22c8 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2228:	22801317 	ldw	r10,76(r4)
    222c:	3284983a 	sll	r2,r6,r10
    2230:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2234:	21000e17 	ldw	r4,56(r4)
    2238:	00800044 	movi	r2,1
    223c:	2080091e 	bne	r4,r2,2264 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    2240:	41804a36 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2244:	1013883a 	mov	r9,r2
    2248:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    224c:	1945883a 	add	r2,r3,r5
    2250:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    2254:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2258:	324d883a 	add	r6,r6,r9
    225c:	41804336 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2260:	003ffa06 	br	224c <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2264:	00800084 	movi	r2,2
    2268:	2080021e 	bne	r4,r2,2274 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    226c:	4180032e 	bgeu	r8,r6,227c <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    2270:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2274:	41800a2e 	bgeu	r8,r6,22a0 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    2278:	f800283a 	ret
    227c:	294b883a 	add	r5,r5,r5
    2280:	02400044 	movi	r9,1
    2284:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    2288:	28c5883a 	add	r2,r5,r3
    228c:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    2290:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2294:	324d883a 	add	r6,r6,r9
    2298:	41803436 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    229c:	003ffa06 	br	2288 <alt_up_pixel_buffer_dma_draw_vline+0xac>
    22a0:	2945883a 	add	r2,r5,r5
    22a4:	108b883a 	add	r5,r2,r2
    22a8:	02400044 	movi	r9,1
    22ac:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    22b0:	28c5883a 	add	r2,r5,r3
    22b4:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    22b8:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    22bc:	324d883a 	add	r6,r6,r9
    22c0:	41802a36 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    22c4:	003ffa06 	br	22b0 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    22c8:	21000e17 	ldw	r4,56(r4)
    22cc:	00800044 	movi	r2,1
    22d0:	20800b1e 	bne	r4,r2,2300 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    22d4:	41802536 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    22d8:	4809883a 	mov	r4,r9
    22dc:	3245383a 	mul	r2,r6,r9
    22e0:	1885883a 	add	r2,r3,r2
    22e4:	1145883a 	add	r2,r2,r5
    22e8:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    22ec:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    22f0:	30cd883a 	add	r6,r6,r3
    22f4:	1105883a 	add	r2,r2,r4
    22f8:	41801c36 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    22fc:	003ffb06 	br	22ec <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2300:	00800084 	movi	r2,2
    2304:	20800c1e 	bne	r4,r2,2338 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2308:	41801836 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    230c:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    2310:	3105383a 	mul	r2,r6,r4
    2314:	1887883a 	add	r3,r3,r2
    2318:	294b883a 	add	r5,r5,r5
    231c:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    2320:	28c5883a 	add	r2,r5,r3
    2324:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    2328:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    232c:	324d883a 	add	r6,r6,r9
    2330:	41800e36 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
    2334:	003ffa06 	br	2320 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2338:	41800c36 	bltu	r8,r6,236c <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    233c:	4a45883a 	add	r2,r9,r9
    2340:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    2344:	3105383a 	mul	r2,r6,r4
    2348:	1887883a 	add	r3,r3,r2
    234c:	2945883a 	add	r2,r5,r5
    2350:	108b883a 	add	r5,r2,r2
    2354:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    2358:	28c5883a 	add	r2,r5,r3
    235c:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    2360:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2364:	324d883a 	add	r6,r6,r9
    2368:	41bffb2e 	bgeu	r8,r6,2358 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    236c:	f800283a 	ret

00002370 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    2370:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    2374:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    2378:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    237c:	3140022e 	bgeu	r6,r5,2388 <alt_up_pixel_buffer_dma_draw_hline+0x18>
    2380:	2813883a 	mov	r9,r5
    2384:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    2388:	2a00552e 	bgeu	r5,r8,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    238c:	3880542e 	bgeu	r7,r2,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    2390:	4a000136 	bltu	r9,r8,2398 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    2394:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2398:	d8c00117 	ldw	r3,4(sp)
    239c:	00800044 	movi	r2,1
    23a0:	1880021e 	bne	r3,r2,23ac <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    23a4:	21800c17 	ldw	r6,48(r4)
    23a8:	00000106 	br	23b0 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    23ac:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    23b0:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    23b4:	20800d17 	ldw	r2,52(r4)
    23b8:	1000231e 	bne	r2,zero,2448 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    23bc:	20801317 	ldw	r2,76(r4)
    23c0:	3884983a 	sll	r2,r7,r2
    23c4:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    23c8:	21000e17 	ldw	r4,56(r4)
    23cc:	00800044 	movi	r2,1
    23d0:	2080081e 	bne	r4,r2,23f4 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    23d4:	49404236 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    23d8:	3945883a 	add	r2,r7,r5
    23dc:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    23e0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    23e4:	290b883a 	add	r5,r5,r4
    23e8:	1105883a 	add	r2,r2,r4
    23ec:	49403c36 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    23f0:	003ffb06 	br	23e0 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    23f4:	00800084 	movi	r2,2
    23f8:	2080021e 	bne	r4,r2,2404 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    23fc:	4940032e 	bgeu	r9,r5,240c <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    2400:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2404:	4940082e 	bgeu	r9,r5,2428 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    2408:	f800283a 	ret
    240c:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    2410:	2945883a 	add	r2,r5,r5
    2414:	11c5883a 	add	r2,r2,r7
    2418:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    241c:	290b883a 	add	r5,r5,r4
    2420:	49402f36 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2424:	003ffa06 	br	2410 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    2428:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    242c:	2945883a 	add	r2,r5,r5
    2430:	1085883a 	add	r2,r2,r2
    2434:	11c5883a 	add	r2,r2,r7
    2438:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    243c:	290b883a 	add	r5,r5,r4
    2440:	49402736 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2444:	003ff906 	br	242c <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2448:	21000e17 	ldw	r4,56(r4)
    244c:	00800044 	movi	r2,1
    2450:	20800a1e 	bne	r4,r2,247c <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    2454:	41c5383a 	mul	r2,r8,r7
    2458:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    245c:	49402036 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2460:	1145883a 	add	r2,r2,r5
    2464:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    2468:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    246c:	290b883a 	add	r5,r5,r4
    2470:	1105883a 	add	r2,r2,r4
    2474:	49401a36 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2478:	003ffb06 	br	2468 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    247c:	00800084 	movi	r2,2
    2480:	20800b1e 	bne	r4,r2,24b0 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    2484:	4205883a 	add	r2,r8,r8
    2488:	3885383a 	mul	r2,r7,r2
    248c:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    2490:	49401336 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    2494:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    2498:	2945883a 	add	r2,r5,r5
    249c:	11c5883a 	add	r2,r2,r7
    24a0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    24a4:	290b883a 	add	r5,r5,r4
    24a8:	49400d36 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24ac:	003ffa06 	br	2498 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    24b0:	4205883a 	add	r2,r8,r8
    24b4:	1085883a 	add	r2,r2,r2
    24b8:	3885383a 	mul	r2,r7,r2
    24bc:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    24c0:	49400736 	bltu	r9,r5,24e0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    24c4:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    24c8:	2945883a 	add	r2,r5,r5
    24cc:	1085883a 	add	r2,r2,r2
    24d0:	11c5883a 	add	r2,r2,r7
    24d4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    24d8:	290b883a 	add	r5,r5,r4
    24dc:	497ffa2e 	bgeu	r9,r5,24c8 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    24e0:	f800283a 	ret

000024e4 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    24e4:	defff604 	addi	sp,sp,-40
    24e8:	dfc00915 	stw	ra,36(sp)
    24ec:	dd800815 	stw	r22,32(sp)
    24f0:	dd400715 	stw	r21,28(sp)
    24f4:	dd000615 	stw	r20,24(sp)
    24f8:	dcc00515 	stw	r19,20(sp)
    24fc:	dc800415 	stw	r18,16(sp)
    2500:	dc400315 	stw	r17,12(sp)
    2504:	dc000215 	stw	r16,8(sp)
    2508:	2029883a 	mov	r20,r4
    250c:	282d883a 	mov	r22,r5
    2510:	302b883a 	mov	r21,r6
    2514:	3825883a 	mov	r18,r7
    2518:	dcc00a17 	ldw	r19,40(sp)
    251c:	dc000b17 	ldw	r16,44(sp)
    2520:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    2524:	dc000015 	stw	r16,0(sp)
    2528:	dc400115 	stw	r17,4(sp)
    252c:	380d883a 	mov	r6,r7
    2530:	a80f883a 	mov	r7,r21
    2534:	00023700 	call	2370 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    2538:	dc000015 	stw	r16,0(sp)
    253c:	dc400115 	stw	r17,4(sp)
    2540:	a009883a 	mov	r4,r20
    2544:	b00b883a 	mov	r5,r22
    2548:	900d883a 	mov	r6,r18
    254c:	980f883a 	mov	r7,r19
    2550:	00023700 	call	2370 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    2554:	dc000015 	stw	r16,0(sp)
    2558:	dc400115 	stw	r17,4(sp)
    255c:	a009883a 	mov	r4,r20
    2560:	b00b883a 	mov	r5,r22
    2564:	a80d883a 	mov	r6,r21
    2568:	980f883a 	mov	r7,r19
    256c:	00021dc0 	call	21dc <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    2570:	dc000015 	stw	r16,0(sp)
    2574:	dc400115 	stw	r17,4(sp)
    2578:	a009883a 	mov	r4,r20
    257c:	900b883a 	mov	r5,r18
    2580:	a80d883a 	mov	r6,r21
    2584:	980f883a 	mov	r7,r19
    2588:	00021dc0 	call	21dc <alt_up_pixel_buffer_dma_draw_vline>
}
    258c:	dfc00917 	ldw	ra,36(sp)
    2590:	dd800817 	ldw	r22,32(sp)
    2594:	dd400717 	ldw	r21,28(sp)
    2598:	dd000617 	ldw	r20,24(sp)
    259c:	dcc00517 	ldw	r19,20(sp)
    25a0:	dc800417 	ldw	r18,16(sp)
    25a4:	dc400317 	ldw	r17,12(sp)
    25a8:	dc000217 	ldw	r16,8(sp)
    25ac:	dec00a04 	addi	sp,sp,40
    25b0:	f800283a 	ret

000025b4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    25b4:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    25b8:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    25bc:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    25c0:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    25c4:	3940022e 	bgeu	r7,r5,25d0 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    25c8:	2811883a 	mov	r8,r5
    25cc:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    25d0:	5980032e 	bgeu	r11,r6,25e0 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    25d4:	5805883a 	mov	r2,r11
    25d8:	3017883a 	mov	r11,r6
    25dc:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    25e0:	2a80842e 	bgeu	r5,r10,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
    25e4:	30c0832e 	bgeu	r6,r3,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    25e8:	42800136 	bltu	r8,r10,25f0 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    25ec:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    25f0:	58c00136 	bltu	r11,r3,25f8 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    25f4:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    25f8:	d8c00217 	ldw	r3,8(sp)
    25fc:	00800044 	movi	r2,1
    2600:	1880021e 	bne	r3,r2,260c <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    2604:	20c00c17 	ldw	r3,48(r4)
    2608:	00000106 	br	2610 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    260c:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2610:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2614:	20800d17 	ldw	r2,52(r4)
    2618:	1000391e 	bne	r2,zero,2700 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    261c:	22801317 	ldw	r10,76(r4)
    2620:	3284983a 	sll	r2,r6,r10
    2624:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2628:	21000e17 	ldw	r4,56(r4)
    262c:	00800044 	movi	r2,1
    2630:	2080101e 	bne	r4,r2,2674 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    2634:	59806f36 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2638:	00000a06 	br	2664 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    263c:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2640:	00800044 	movi	r2,1
    2644:	1887883a 	add	r3,r3,r2
    2648:	2089883a 	add	r4,r4,r2
    264c:	40fffb2e 	bgeu	r8,r3,263c <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2650:	00800044 	movi	r2,1
    2654:	308d883a 	add	r6,r6,r2
    2658:	59806636 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    265c:	1284983a 	sll	r2,r2,r10
    2660:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2664:	417ffa36 	bltu	r8,r5,2650 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    2668:	29c9883a 	add	r4,r5,r7
    266c:	2807883a 	mov	r3,r5
    2670:	003ff206 	br	263c <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2674:	00800084 	movi	r2,2
    2678:	2080021e 	bne	r4,r2,2684 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    267c:	59805d36 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2680:	00000e06 	br	26bc <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2684:	59805b36 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2688:	00001b06 	br	26f8 <alt_up_pixel_buffer_dma_draw_box+0x144>
    268c:	2807883a 	mov	r3,r5
    2690:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    2694:	18c5883a 	add	r2,r3,r3
    2698:	11c5883a 	add	r2,r2,r7
    269c:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    26a0:	1907883a 	add	r3,r3,r4
    26a4:	40fffb2e 	bgeu	r8,r3,2694 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    26a8:	00800044 	movi	r2,1
    26ac:	308d883a 	add	r6,r6,r2
    26b0:	59805036 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    26b4:	1284983a 	sll	r2,r2,r10
    26b8:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    26bc:	417ff32e 	bgeu	r8,r5,268c <alt_up_pixel_buffer_dma_draw_box+0xd8>
    26c0:	003ff906 	br	26a8 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    26c4:	2807883a 	mov	r3,r5
    26c8:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    26cc:	18c5883a 	add	r2,r3,r3
    26d0:	1085883a 	add	r2,r2,r2
    26d4:	11c5883a 	add	r2,r2,r7
    26d8:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    26dc:	1907883a 	add	r3,r3,r4
    26e0:	40fffa2e 	bgeu	r8,r3,26cc <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    26e4:	00800044 	movi	r2,1
    26e8:	308d883a 	add	r6,r6,r2
    26ec:	59804136 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    26f0:	1284983a 	sll	r2,r2,r10
    26f4:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    26f8:	417ff22e 	bgeu	r8,r5,26c4 <alt_up_pixel_buffer_dma_draw_box+0x110>
    26fc:	003ff906 	br	26e4 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2700:	21000e17 	ldw	r4,56(r4)
    2704:	00800044 	movi	r2,1
    2708:	2080121e 	bne	r4,r2,2754 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    270c:	59803936 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2710:	5019883a 	mov	r12,r10
    2714:	3285383a 	mul	r2,r6,r10
    2718:	1885883a 	add	r2,r3,r2
    271c:	114f883a 	add	r7,r2,r5
    2720:	00000806 	br	2744 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2724:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2728:	00800044 	movi	r2,1
    272c:	1887883a 	add	r3,r3,r2
    2730:	2089883a 	add	r4,r4,r2
    2734:	40fffb2e 	bgeu	r8,r3,2724 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2738:	31800044 	addi	r6,r6,1
    273c:	3b0f883a 	add	r7,r7,r12
    2740:	59802c36 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    2744:	417ffc36 	bltu	r8,r5,2738 <alt_up_pixel_buffer_dma_draw_box+0x184>
    2748:	3809883a 	mov	r4,r7
    274c:	2807883a 	mov	r3,r5
    2750:	003ff406 	br	2724 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2754:	00800084 	movi	r2,2
    2758:	2080121e 	bne	r4,r2,27a4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    275c:	59802536 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    2760:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    2764:	3285383a 	mul	r2,r6,r10
    2768:	1889883a 	add	r4,r3,r2
    276c:	03000044 	movi	r12,1
    2770:	00000a06 	br	279c <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    2774:	2807883a 	mov	r3,r5
    2778:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    277c:	18c5883a 	add	r2,r3,r3
    2780:	1105883a 	add	r2,r2,r4
    2784:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2788:	19c7883a 	add	r3,r3,r7
    278c:	40fffb2e 	bgeu	r8,r3,277c <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2790:	330d883a 	add	r6,r6,r12
    2794:	59801736 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    2798:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    279c:	417ff52e 	bgeu	r8,r5,2774 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    27a0:	003ffb06 	br	2790 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    27a4:	59801336 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    27a8:	5285883a 	add	r2,r10,r10
    27ac:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    27b0:	3285383a 	mul	r2,r6,r10
    27b4:	1889883a 	add	r4,r3,r2
    27b8:	03000044 	movi	r12,1
    27bc:	00000b06 	br	27ec <alt_up_pixel_buffer_dma_draw_box+0x238>
    27c0:	2807883a 	mov	r3,r5
    27c4:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    27c8:	18c5883a 	add	r2,r3,r3
    27cc:	1085883a 	add	r2,r2,r2
    27d0:	1105883a 	add	r2,r2,r4
    27d4:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    27d8:	19c7883a 	add	r3,r3,r7
    27dc:	40fffa2e 	bgeu	r8,r3,27c8 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    27e0:	330d883a 	add	r6,r6,r12
    27e4:	59800336 	bltu	r11,r6,27f4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    27e8:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    27ec:	417ff42e 	bgeu	r8,r5,27c0 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    27f0:	003ffb06 	br	27e0 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    27f4:	f800283a 	ret

000027f8 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    27f8:	00800044 	movi	r2,1
    27fc:	2880021e 	bne	r5,r2,2808 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    2800:	21c00c17 	ldw	r7,48(r4)
    2804:	00000106 	br	280c <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    2808:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    280c:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2810:	20c00e17 	ldw	r3,56(r4)
    2814:	00800084 	movi	r2,2
    2818:	1880021e 	bne	r3,r2,2824 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    281c:	294d883a 	add	r6,r5,r5
    2820:	00000206 	br	282c <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    2824:	2945883a 	add	r2,r5,r5
    2828:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    282c:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2830:	20800d17 	ldw	r2,52(r4)
    2834:	1000121e 	bne	r2,zero,2880 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    2838:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    283c:	48001a26 	beq	r9,zero,28a8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2840:	0011883a 	mov	r8,zero
    2844:	3014c03a 	cmpne	r10,r6,zero
    2848:	00000b06 	br	2878 <alt_up_pixel_buffer_dma_clear_screen+0x80>
    284c:	0007883a 	mov	r3,zero
    2850:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    2854:	19c5883a 	add	r2,r3,r7
    2858:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    285c:	1947883a 	add	r3,r3,r5
    2860:	19bffc36 	bltu	r3,r6,2854 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    2864:	00800044 	movi	r2,1
    2868:	4091883a 	add	r8,r8,r2
    286c:	4a000e26 	beq	r9,r8,28a8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    2870:	1104983a 	sll	r2,r2,r4
    2874:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    2878:	503ff41e 	bne	r10,zero,284c <alt_up_pixel_buffer_dma_clear_screen+0x54>
    287c:	003ff906 	br	2864 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    2880:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    2884:	20000826 	beq	r4,zero,28a8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    2888:	0007883a 	mov	r3,zero
    288c:	0005883a 	mov	r2,zero
    2890:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    2894:	3885883a 	add	r2,r7,r2
    2898:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    289c:	1945883a 	add	r2,r3,r5
    28a0:	1007883a 	mov	r3,r2
    28a4:	113ffb36 	bltu	r2,r4,2894 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    28a8:	f800283a 	ret

000028ac <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    28ac:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    28b0:	20c00a17 	ldw	r3,40(r4)
    28b4:	00800044 	movi	r2,1
    28b8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    28bc:	20800b17 	ldw	r2,44(r4)
    28c0:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    28c4:	21400b15 	stw	r5,44(r4)
	return 0;
}
    28c8:	0005883a 	mov	r2,zero
    28cc:	f800283a 	ret

000028d0 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    28d0:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    28d4:	22400f17 	ldw	r9,60(r4)
    28d8:	32402a2e 	bgeu	r6,r9,2984 <alt_up_pixel_buffer_dma_draw+0xb4>
    28dc:	20801017 	ldw	r2,64(r4)
    28e0:	3880282e 	bgeu	r7,r2,2984 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    28e4:	20800d17 	ldw	r2,52(r4)
    28e8:	10000a1e 	bne	r2,zero,2914 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    28ec:	21001217 	ldw	r4,72(r4)
    28f0:	3108703a 	and	r4,r6,r4
    28f4:	40801117 	ldw	r2,68(r8)
    28f8:	2088983a 	sll	r4,r4,r2
    28fc:	40801417 	ldw	r2,80(r8)
    2900:	3884703a 	and	r2,r7,r2
    2904:	40c01317 	ldw	r3,76(r8)
    2908:	10c4983a 	sll	r2,r2,r3
    290c:	2086b03a 	or	r3,r4,r2
    2910:	00000806 	br	2934 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    2914:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    2918:	40c01217 	ldw	r3,72(r8)
    291c:	30c6703a 	and	r3,r6,r3
    2920:	40801417 	ldw	r2,80(r8)
    2924:	3884703a 	and	r2,r7,r2
    2928:	4885383a 	mul	r2,r9,r2
    292c:	10c5883a 	add	r2,r2,r3
    2930:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2934:	42400e17 	ldw	r9,56(r8)
    2938:	00800044 	movi	r2,1
    293c:	4880051e 	bne	r9,r2,2954 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2940:	40800c17 	ldw	r2,48(r8)
    2944:	1885883a 	add	r2,r3,r2
    2948:	11400025 	stbio	r5,0(r2)
    294c:	0005883a 	mov	r2,zero
    2950:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2954:	00800084 	movi	r2,2
    2958:	4880051e 	bne	r9,r2,2970 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    295c:	40800c17 	ldw	r2,48(r8)
    2960:	1885883a 	add	r2,r3,r2
    2964:	1140002d 	sthio	r5,0(r2)
    2968:	0005883a 	mov	r2,zero
    296c:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    2970:	40800c17 	ldw	r2,48(r8)
    2974:	1885883a 	add	r2,r3,r2
    2978:	11400035 	stwio	r5,0(r2)
    297c:	0005883a 	mov	r2,zero
    2980:	f800283a 	ret
    2984:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    2988:	f800283a 	ret

0000298c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    298c:	20800a17 	ldw	r2,40(r4)
    2990:	10800337 	ldwio	r2,12(r2)
}
    2994:	1080004c 	andi	r2,r2,1
    2998:	f800283a 	ret

0000299c <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    299c:	00c00104 	movi	r3,4
    29a0:	20800a17 	ldw	r2,40(r4)
    29a4:	10c5883a 	add	r2,r2,r3
    29a8:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    29ac:	20800a17 	ldw	r2,40(r4)
    29b0:	10c5883a 	add	r2,r2,r3
    29b4:	10800037 	ldwio	r2,0(r2)
    29b8:	20800c15 	stw	r2,48(r4)
	return 0;
}
    29bc:	0005883a 	mov	r2,zero
    29c0:	f800283a 	ret

000029c4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    29c4:	deffff04 	addi	sp,sp,-4
    29c8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    29cc:	01400034 	movhi	r5,0
    29d0:	295dcd04 	addi	r5,r5,30516
    29d4:	0002bd00 	call	2bd0 <alt_find_dev>

  return dev;
}
    29d8:	dfc00017 	ldw	ra,0(sp)
    29dc:	dec00104 	addi	sp,sp,4
    29e0:	f800283a 	ret

000029e4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    29e4:	00800074 	movhi	r2,1
    29e8:	10a51404 	addi	r2,r2,-27568
    29ec:	10800017 	ldw	r2,0(r2)
    29f0:	1000021e 	bne	r2,zero,29fc <alt_alarm_start+0x18>
    29f4:	00bfde84 	movi	r2,-134
    29f8:	f800283a 	ret
  {
    if (alarm)
    29fc:	2000021e 	bne	r4,zero,2a08 <alt_alarm_start+0x24>
    2a00:	00bffa84 	movi	r2,-22
    2a04:	f800283a 	ret
    {
      alarm->callback = callback;
    2a08:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2a0c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a10:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a14:	00bfff84 	movi	r2,-2
    2a18:	3884703a 	and	r2,r7,r2
    2a1c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2a20:	00800074 	movhi	r2,1
    2a24:	10a51504 	addi	r2,r2,-27564
    2a28:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2a2c:	01800044 	movi	r6,1
    2a30:	1985883a 	add	r2,r3,r6
    2a34:	2885883a 	add	r2,r5,r2
    2a38:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2a3c:	10c0022e 	bgeu	r2,r3,2a48 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    2a40:	21800405 	stb	r6,16(r4)
    2a44:	00000106 	br	2a4c <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    2a48:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2a4c:	00800034 	movhi	r2,0
    2a50:	109dd204 	addi	r2,r2,30536
    2a54:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    2a58:	10c00017 	ldw	r3,0(r2)
    2a5c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    2a60:	10c00017 	ldw	r3,0(r2)
    2a64:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    2a68:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2a6c:	3801703a 	wrctl	status,r7
    2a70:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    2a74:	f800283a 	ret

00002a78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2a78:	defffd04 	addi	sp,sp,-12
    2a7c:	dfc00215 	stw	ra,8(sp)
    2a80:	dc400115 	stw	r17,4(sp)
    2a84:	dc000015 	stw	r16,0(sp)
    2a88:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2a8c:	20001c16 	blt	r4,zero,2b00 <close+0x88>
    2a90:	20c00324 	muli	r3,r4,12
    2a94:	00800034 	movhi	r2,0
    2a98:	109b6904 	addi	r2,r2,28068
    2a9c:	1889883a 	add	r4,r3,r2

  if (fd)
    2aa0:	20001726 	beq	r4,zero,2b00 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2aa4:	20800017 	ldw	r2,0(r4)
    2aa8:	10800417 	ldw	r2,16(r2)
    2aac:	10002126 	beq	r2,zero,2b34 <close+0xbc>
    2ab0:	103ee83a 	callr	r2
    2ab4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2ab8:	8009883a 	mov	r4,r16
    2abc:	0002f940 	call	2f94 <alt_release_fd>
    if (rval < 0)
    2ac0:	88000216 	blt	r17,zero,2acc <close+0x54>
    2ac4:	0005883a 	mov	r2,zero
    2ac8:	00001d06 	br	2b40 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2acc:	00800034 	movhi	r2,0
    2ad0:	109dd004 	addi	r2,r2,30528
    2ad4:	10800017 	ldw	r2,0(r2)
    2ad8:	1000031e 	bne	r2,zero,2ae8 <close+0x70>
    2adc:	00c00074 	movhi	r3,1
    2ae0:	18e51604 	addi	r3,r3,-27560
    2ae4:	00000206 	br	2af0 <close+0x78>
    2ae8:	103ee83a 	callr	r2
    2aec:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    2af0:	0445c83a 	sub	r2,zero,r17
    2af4:	18800015 	stw	r2,0(r3)
    2af8:	00bfffc4 	movi	r2,-1
    2afc:	00001006 	br	2b40 <close+0xc8>
    2b00:	00800034 	movhi	r2,0
    2b04:	109dd004 	addi	r2,r2,30528
    2b08:	10800017 	ldw	r2,0(r2)
    2b0c:	1000031e 	bne	r2,zero,2b1c <close+0xa4>
    2b10:	00c00074 	movhi	r3,1
    2b14:	18e51604 	addi	r3,r3,-27560
    2b18:	00000206 	br	2b24 <close+0xac>
    2b1c:	103ee83a 	callr	r2
    2b20:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2b24:	00801444 	movi	r2,81
    2b28:	18800015 	stw	r2,0(r3)
    2b2c:	00bfffc4 	movi	r2,-1
    2b30:	00000306 	br	2b40 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2b34:	8009883a 	mov	r4,r16
    2b38:	0002f940 	call	2f94 <alt_release_fd>
    2b3c:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    2b40:	dfc00217 	ldw	ra,8(sp)
    2b44:	dc400117 	ldw	r17,4(sp)
    2b48:	dc000017 	ldw	r16,0(sp)
    2b4c:	dec00304 	addi	sp,sp,12
    2b50:	f800283a 	ret

00002b54 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2b54:	f800283a 	ret

00002b58 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    2b58:	3005883a 	mov	r2,r6
    2b5c:	f800283a 	ret

00002b60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2b60:	deffff04 	addi	sp,sp,-4
    2b64:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2b68:	20000226 	beq	r4,zero,2b74 <alt_dev_llist_insert+0x14>
    2b6c:	20800217 	ldw	r2,8(r4)
    2b70:	10000d1e 	bne	r2,zero,2ba8 <alt_dev_llist_insert+0x48>
    2b74:	00800034 	movhi	r2,0
    2b78:	109dd004 	addi	r2,r2,30528
    2b7c:	10800017 	ldw	r2,0(r2)
    2b80:	1000031e 	bne	r2,zero,2b90 <alt_dev_llist_insert+0x30>
    2b84:	00c00074 	movhi	r3,1
    2b88:	18e51604 	addi	r3,r3,-27560
    2b8c:	00000206 	br	2b98 <alt_dev_llist_insert+0x38>
    2b90:	103ee83a 	callr	r2
    2b94:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    2b98:	00800584 	movi	r2,22
    2b9c:	18800015 	stw	r2,0(r3)
    2ba0:	00bffa84 	movi	r2,-22
    2ba4:	00000706 	br	2bc4 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2ba8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2bac:	28800017 	ldw	r2,0(r5)
    2bb0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2bb4:	28800017 	ldw	r2,0(r5)
    2bb8:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2bbc:	29000015 	stw	r4,0(r5)
    2bc0:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2bc4:	dfc00017 	ldw	ra,0(sp)
    2bc8:	dec00104 	addi	sp,sp,4
    2bcc:	f800283a 	ret

00002bd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2bd0:	defffb04 	addi	sp,sp,-20
    2bd4:	dfc00415 	stw	ra,16(sp)
    2bd8:	dcc00315 	stw	r19,12(sp)
    2bdc:	dc800215 	stw	r18,8(sp)
    2be0:	dc400115 	stw	r17,4(sp)
    2be4:	dc000015 	stw	r16,0(sp)
    2be8:	2027883a 	mov	r19,r4
    2bec:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    2bf0:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2bf4:	00035580 	call	3558 <strlen>
    2bf8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2bfc:	8c000726 	beq	r17,r16,2c1c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2c00:	89000217 	ldw	r4,8(r17)
    2c04:	980b883a 	mov	r5,r19
    2c08:	900d883a 	mov	r6,r18
    2c0c:	000323c0 	call	323c <memcmp>
    2c10:	10000326 	beq	r2,zero,2c20 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2c14:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2c18:	847ff91e 	bne	r16,r17,2c00 <alt_find_dev+0x30>
    2c1c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    2c20:	8805883a 	mov	r2,r17
    2c24:	dfc00417 	ldw	ra,16(sp)
    2c28:	dcc00317 	ldw	r19,12(sp)
    2c2c:	dc800217 	ldw	r18,8(sp)
    2c30:	dc400117 	ldw	r17,4(sp)
    2c34:	dc000017 	ldw	r16,0(sp)
    2c38:	dec00504 	addi	sp,sp,20
    2c3c:	f800283a 	ret

00002c40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2c40:	deffff04 	addi	sp,sp,-4
    2c44:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2c48:	0009883a 	mov	r4,zero
    2c4c:	01408004 	movi	r5,512
    2c50:	00031c80 	call	31c8 <alt_icache_flush>
#endif
}
    2c54:	dfc00017 	ldw	ra,0(sp)
    2c58:	dec00104 	addi	sp,sp,4
    2c5c:	f800283a 	ret

00002c60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2c60:	defffe04 	addi	sp,sp,-8
    2c64:	dfc00115 	stw	ra,4(sp)
    2c68:	dc000015 	stw	r16,0(sp)
    2c6c:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    2c70:	2809883a 	mov	r4,r5
    2c74:	300b883a 	mov	r5,r6
    2c78:	380d883a 	mov	r6,r7
    2c7c:	0002e180 	call	2e18 <open>
    2c80:	1009883a 	mov	r4,r2

  if (old >= 0)
    2c84:	10000b16 	blt	r2,zero,2cb4 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    2c88:	10c00324 	muli	r3,r2,12
    2c8c:	00800034 	movhi	r2,0
    2c90:	109b6904 	addi	r2,r2,28068
    2c94:	1887883a 	add	r3,r3,r2
    2c98:	18800017 	ldw	r2,0(r3)
    2c9c:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    2ca0:	18800117 	ldw	r2,4(r3)
    2ca4:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2ca8:	18800217 	ldw	r2,8(r3)
    2cac:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    2cb0:	0002f940 	call	2f94 <alt_release_fd>
  }
} 
    2cb4:	dfc00117 	ldw	ra,4(sp)
    2cb8:	dc000017 	ldw	r16,0(sp)
    2cbc:	dec00204 	addi	sp,sp,8
    2cc0:	f800283a 	ret

00002cc4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2cc4:	defffa04 	addi	sp,sp,-24
    2cc8:	dfc00515 	stw	ra,20(sp)
    2ccc:	dd000415 	stw	r20,16(sp)
    2cd0:	dcc00315 	stw	r19,12(sp)
    2cd4:	dc800215 	stw	r18,8(sp)
    2cd8:	dc400115 	stw	r17,4(sp)
    2cdc:	dc000015 	stw	r16,0(sp)
    2ce0:	2005883a 	mov	r2,r4
    2ce4:	2827883a 	mov	r19,r5
    2ce8:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2cec:	04000034 	movhi	r16,0
    2cf0:	841b6c04 	addi	r16,r16,28080
    2cf4:	04800044 	movi	r18,1
    2cf8:	04407fc4 	movi	r17,511
    2cfc:	8009883a 	mov	r4,r16
    2d00:	100b883a 	mov	r5,r2
    2d04:	900d883a 	mov	r6,r18
    2d08:	880f883a 	mov	r7,r17
    2d0c:	0002c600 	call	2c60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2d10:	843ffd04 	addi	r16,r16,-12
    2d14:	8009883a 	mov	r4,r16
    2d18:	980b883a 	mov	r5,r19
    2d1c:	000d883a 	mov	r6,zero
    2d20:	880f883a 	mov	r7,r17
    2d24:	0002c600 	call	2c60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2d28:	81000604 	addi	r4,r16,24
    2d2c:	a00b883a 	mov	r5,r20
    2d30:	900d883a 	mov	r6,r18
    2d34:	880f883a 	mov	r7,r17
    2d38:	0002c600 	call	2c60 <alt_open_fd>
}  
    2d3c:	dfc00517 	ldw	ra,20(sp)
    2d40:	dd000417 	ldw	r20,16(sp)
    2d44:	dcc00317 	ldw	r19,12(sp)
    2d48:	dc800217 	ldw	r18,8(sp)
    2d4c:	dc400117 	ldw	r17,4(sp)
    2d50:	dc000017 	ldw	r16,0(sp)
    2d54:	dec00604 	addi	sp,sp,24
    2d58:	f800283a 	ret

00002d5c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2d5c:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2d60:	008007c4 	movi	r2,31
    2d64:	1100022e 	bgeu	r2,r4,2d70 <alt_irq_register+0x14>
    2d68:	00bffa84 	movi	r2,-22
    2d6c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d70:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d74:	013fff84 	movi	r4,-2
    2d78:	4104703a 	and	r2,r8,r4
    2d7c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2d80:	380490fa 	slli	r2,r7,3
    2d84:	00c00074 	movhi	r3,1
    2d88:	18e52404 	addi	r3,r3,-27504
    2d8c:	10c5883a 	add	r2,r2,r3
    2d90:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2d94:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2d98:	30000e26 	beq	r6,zero,2dd4 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d9c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2da0:	2904703a 	and	r2,r5,r4
    2da4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2da8:	00c00074 	movhi	r3,1
    2dac:	18e51304 	addi	r3,r3,-27572
    2db0:	19000017 	ldw	r4,0(r3)
    2db4:	00800044 	movi	r2,1
    2db8:	11c4983a 	sll	r2,r2,r7
    2dbc:	1104b03a 	or	r2,r2,r4
    2dc0:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2dc4:	18800017 	ldw	r2,0(r3)
    2dc8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2dcc:	2801703a 	wrctl	status,r5
    2dd0:	00000e06 	br	2e0c <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2dd4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2dd8:	00bfff84 	movi	r2,-2
    2ddc:	2884703a 	and	r2,r5,r2
    2de0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2de4:	00c00074 	movhi	r3,1
    2de8:	18e51304 	addi	r3,r3,-27572
    2dec:	19000017 	ldw	r4,0(r3)
    2df0:	00bfff84 	movi	r2,-2
    2df4:	11c4183a 	rol	r2,r2,r7
    2df8:	1104703a 	and	r2,r2,r4
    2dfc:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2e00:	18800017 	ldw	r2,0(r3)
    2e04:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e08:	2801703a 	wrctl	status,r5
    2e0c:	4001703a 	wrctl	status,r8
    2e10:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2e14:	f800283a 	ret

00002e18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2e18:	defff904 	addi	sp,sp,-28
    2e1c:	dfc00615 	stw	ra,24(sp)
    2e20:	dd400515 	stw	r21,20(sp)
    2e24:	dd000415 	stw	r20,16(sp)
    2e28:	dcc00315 	stw	r19,12(sp)
    2e2c:	dc800215 	stw	r18,8(sp)
    2e30:	dc400115 	stw	r17,4(sp)
    2e34:	dc000015 	stw	r16,0(sp)
    2e38:	2029883a 	mov	r20,r4
    2e3c:	2827883a 	mov	r19,r5
    2e40:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2e44:	01400034 	movhi	r5,0
    2e48:	295dcd04 	addi	r5,r5,30516
    2e4c:	0002bd00 	call	2bd0 <alt_find_dev>
    2e50:	1021883a 	mov	r16,r2
    2e54:	10000226 	beq	r2,zero,2e60 <open+0x48>
    2e58:	0025883a 	mov	r18,zero
    2e5c:	00000a06 	br	2e88 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2e60:	a009883a 	mov	r4,r20
    2e64:	00030a00 	call	30a0 <alt_find_file>
    2e68:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2e6c:	1000051e 	bne	r2,zero,2e84 <open+0x6c>
    2e70:	047fffc4 	movi	r17,-1
    2e74:	043ffb44 	movi	r16,-19
    2e78:	00002b06 	br	2f28 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2e7c:	043ffcc4 	movi	r16,-13
    2e80:	00002906 	br	2f28 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2e84:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    2e88:	8009883a 	mov	r4,r16
    2e8c:	000315c0 	call	315c <alt_get_fd>
    2e90:	1023883a 	mov	r17,r2
    2e94:	10003316 	blt	r2,zero,2f64 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    2e98:	10800324 	muli	r2,r2,12
    2e9c:	02000034 	movhi	r8,0
    2ea0:	421b6904 	addi	r8,r8,28068
    2ea4:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2ea8:	00900034 	movhi	r2,16384
    2eac:	10bfffc4 	addi	r2,r2,-1
    2eb0:	9886703a 	and	r3,r19,r2
    2eb4:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2eb8:	9004c03a 	cmpne	r2,r18,zero
    2ebc:	1000121e 	bne	r2,zero,2f08 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2ec0:	18900034 	orhi	r2,r3,16384
    2ec4:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2ec8:	00800034 	movhi	r2,0
    2ecc:	109dcf04 	addi	r2,r2,30524
    2ed0:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2ed4:	21800017 	ldw	r6,0(r4)
    2ed8:	000b883a 	mov	r5,zero
    2edc:	4007883a 	mov	r3,r8
    2ee0:	02400044 	movi	r9,1
    2ee4:	02000304 	movi	r8,12
    2ee8:	18800017 	ldw	r2,0(r3)
    2eec:	1180031e 	bne	r2,r6,2efc <open+0xe4>
    2ef0:	18800217 	ldw	r2,8(r3)
    2ef4:	1000010e 	bge	r2,zero,2efc <open+0xe4>
    2ef8:	193fe01e 	bne	r3,r4,2e7c <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2efc:	2a4b883a 	add	r5,r5,r9
    2f00:	1a07883a 	add	r3,r3,r8
    2f04:	397ff82e 	bgeu	r7,r5,2ee8 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2f08:	80800317 	ldw	r2,12(r16)
    2f0c:	10001726 	beq	r2,zero,2f6c <open+0x154>
    2f10:	a00b883a 	mov	r5,r20
    2f14:	980d883a 	mov	r6,r19
    2f18:	a80f883a 	mov	r7,r21
    2f1c:	103ee83a 	callr	r2
    2f20:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2f24:	1000110e 	bge	r2,zero,2f6c <open+0x154>
  {
    alt_release_fd (index);  
    2f28:	8809883a 	mov	r4,r17
    2f2c:	0002f940 	call	2f94 <alt_release_fd>
    2f30:	00800034 	movhi	r2,0
    2f34:	109dd004 	addi	r2,r2,30528
    2f38:	10800017 	ldw	r2,0(r2)
    2f3c:	1000031e 	bne	r2,zero,2f4c <open+0x134>
    2f40:	00c00074 	movhi	r3,1
    2f44:	18e51604 	addi	r3,r3,-27560
    2f48:	00000206 	br	2f54 <open+0x13c>
    2f4c:	103ee83a 	callr	r2
    2f50:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    2f54:	0405c83a 	sub	r2,zero,r16
    2f58:	18800015 	stw	r2,0(r3)
    2f5c:	047fffc4 	movi	r17,-1
    2f60:	00000206 	br	2f6c <open+0x154>
    2f64:	1021883a 	mov	r16,r2
    2f68:	003fef06 	br	2f28 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    2f6c:	8805883a 	mov	r2,r17
    2f70:	dfc00617 	ldw	ra,24(sp)
    2f74:	dd400517 	ldw	r21,20(sp)
    2f78:	dd000417 	ldw	r20,16(sp)
    2f7c:	dcc00317 	ldw	r19,12(sp)
    2f80:	dc800217 	ldw	r18,8(sp)
    2f84:	dc400117 	ldw	r17,4(sp)
    2f88:	dc000017 	ldw	r16,0(sp)
    2f8c:	dec00704 	addi	sp,sp,28
    2f90:	f800283a 	ret

00002f94 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    2f94:	00800084 	movi	r2,2
    2f98:	1100060e 	bge	r2,r4,2fb4 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    2f9c:	20800324 	muli	r2,r4,12
    2fa0:	00c00034 	movhi	r3,0
    2fa4:	18db6904 	addi	r3,r3,28068
    2fa8:	10c5883a 	add	r2,r2,r3
    2fac:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    2fb0:	10000015 	stw	zero,0(r2)
    2fb4:	f800283a 	ret

00002fb8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2fb8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fbc:	00bfff84 	movi	r2,-2
    2fc0:	2884703a 	and	r2,r5,r2
    2fc4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2fc8:	20c00017 	ldw	r3,0(r4)
    2fcc:	20800117 	ldw	r2,4(r4)
    2fd0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2fd4:	20800117 	ldw	r2,4(r4)
    2fd8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2fdc:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    2fe0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2fe4:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    2fe8:	f800283a 	ret

00002fec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2fec:	defffd04 	addi	sp,sp,-12
    2ff0:	dfc00215 	stw	ra,8(sp)
    2ff4:	dc400115 	stw	r17,4(sp)
    2ff8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2ffc:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3000:	d0a74a17 	ldw	r2,-25304(gp)
    3004:	10800044 	addi	r2,r2,1
    3008:	d0a74a15 	stw	r2,-25304(gp)
    300c:	00001b06 	br	307c <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    3010:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3014:	80800403 	ldbu	r2,16(r16)
    3018:	10000326 	beq	r2,zero,3028 <alt_tick+0x3c>
    301c:	d0a74a17 	ldw	r2,-25304(gp)
    3020:	1000011e 	bne	r2,zero,3028 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    3024:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3028:	d0e74a17 	ldw	r3,-25304(gp)
    302c:	80800217 	ldw	r2,8(r16)
    3030:	18801136 	bltu	r3,r2,3078 <alt_tick+0x8c>
    3034:	80800403 	ldbu	r2,16(r16)
    3038:	10000f1e 	bne	r2,zero,3078 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    303c:	80800317 	ldw	r2,12(r16)
    3040:	81000517 	ldw	r4,20(r16)
    3044:	103ee83a 	callr	r2
    3048:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    304c:	1000031e 	bne	r2,zero,305c <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    3050:	8009883a 	mov	r4,r16
    3054:	0002fb80 	call	2fb8 <alt_alarm_stop>
    3058:	00000706 	br	3078 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    305c:	80800217 	ldw	r2,8(r16)
    3060:	1885883a 	add	r2,r3,r2
    3064:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3068:	d0e74a17 	ldw	r3,-25304(gp)
    306c:	10c0022e 	bgeu	r2,r3,3078 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    3070:	00800044 	movi	r2,1
    3074:	80800405 	stb	r2,16(r16)
    3078:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    307c:	d0a00704 	addi	r2,gp,-32740
    3080:	80bfe31e 	bne	r16,r2,3010 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    3084:	dfc00217 	ldw	ra,8(sp)
    3088:	dc400117 	ldw	r17,4(sp)
    308c:	dc000017 	ldw	r16,0(sp)
    3090:	dec00304 	addi	sp,sp,12
    3094:	f800283a 	ret

00003098 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    3098:	000170fa 	wrctl	ienable,zero
}
    309c:	f800283a 	ret

000030a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    30a0:	defff904 	addi	sp,sp,-28
    30a4:	dfc00615 	stw	ra,24(sp)
    30a8:	dd400515 	stw	r21,20(sp)
    30ac:	dd000415 	stw	r20,16(sp)
    30b0:	dcc00315 	stw	r19,12(sp)
    30b4:	dc800215 	stw	r18,8(sp)
    30b8:	dc400115 	stw	r17,4(sp)
    30bc:	dc000015 	stw	r16,0(sp)
    30c0:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    30c4:	00800034 	movhi	r2,0
    30c8:	109dcb04 	addi	r2,r2,30508
    30cc:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    30d0:	102b883a 	mov	r21,r2
    30d4:	88801626 	beq	r17,r2,3130 <alt_find_file+0x90>
    30d8:	053fffc4 	movi	r20,-1
    30dc:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    30e0:	8c000217 	ldw	r16,8(r17)
    30e4:	8009883a 	mov	r4,r16
    30e8:	00035580 	call	3558 <strlen>
    30ec:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    30f0:	8085883a 	add	r2,r16,r2
    30f4:	1505883a 	add	r2,r2,r20
    30f8:	10800007 	ldb	r2,0(r2)
    30fc:	14c0011e 	bne	r2,r19,3104 <alt_find_file+0x64>
    {
      len -= 1;
    3100:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3104:	1c85883a 	add	r2,r3,r18
    3108:	10800007 	ldb	r2,0(r2)
    310c:	14c00126 	beq	r2,r19,3114 <alt_find_file+0x74>
    3110:	1000051e 	bne	r2,zero,3128 <alt_find_file+0x88>
    3114:	8009883a 	mov	r4,r16
    3118:	900b883a 	mov	r5,r18
    311c:	180d883a 	mov	r6,r3
    3120:	000323c0 	call	323c <memcmp>
    3124:	10000326 	beq	r2,zero,3134 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    3128:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    312c:	8d7fec1e 	bne	r17,r21,30e0 <alt_find_file+0x40>
    3130:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    3134:	8805883a 	mov	r2,r17
    3138:	dfc00617 	ldw	ra,24(sp)
    313c:	dd400517 	ldw	r21,20(sp)
    3140:	dd000417 	ldw	r20,16(sp)
    3144:	dcc00317 	ldw	r19,12(sp)
    3148:	dc800217 	ldw	r18,8(sp)
    314c:	dc400117 	ldw	r17,4(sp)
    3150:	dc000017 	ldw	r16,0(sp)
    3154:	dec00704 	addi	sp,sp,28
    3158:	f800283a 	ret

0000315c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    315c:	000b883a 	mov	r5,zero
    3160:	00c00034 	movhi	r3,0
    3164:	18db6904 	addi	r3,r3,28068
    3168:	02000304 	movi	r8,12
    316c:	02400034 	movhi	r9,0
    3170:	4a5dcf04 	addi	r9,r9,30524
    3174:	01c00044 	movi	r7,1
    3178:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    317c:	18800017 	ldw	r2,0(r3)
    3180:	10000c1e 	bne	r2,zero,31b4 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    3184:	2a05383a 	mul	r2,r5,r8
    3188:	00c00034 	movhi	r3,0
    318c:	18db6904 	addi	r3,r3,28068
    3190:	10c5883a 	add	r2,r2,r3
    3194:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    3198:	48800017 	ldw	r2,0(r9)
    319c:	11400216 	blt	r2,r5,31a8 <alt_get_fd+0x4c>
    31a0:	2805883a 	mov	r2,r5
    31a4:	f800283a 	ret
      {
        alt_max_fd = i;
    31a8:	49400015 	stw	r5,0(r9)
    31ac:	2805883a 	mov	r2,r5
    31b0:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    31b4:	29cb883a 	add	r5,r5,r7
    31b8:	1a07883a 	add	r3,r3,r8
    31bc:	29bfef1e 	bne	r5,r6,317c <alt_get_fd+0x20>
    31c0:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    31c4:	f800283a 	ret

000031c8 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    31c8:	2007883a 	mov	r3,r4
    31cc:	00808004 	movi	r2,512
    31d0:	1140012e 	bgeu	r2,r5,31d8 <alt_icache_flush+0x10>
    31d4:	100b883a 	mov	r5,r2
    31d8:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    31dc:	1940042e 	bgeu	r3,r5,31f0 <alt_icache_flush+0x28>
    31e0:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    31e4:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    31e8:	1887883a 	add	r3,r3,r2
    31ec:	197ffd36 	bltu	r3,r5,31e4 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    31f0:	208007cc 	andi	r2,r4,31
    31f4:	10000126 	beq	r2,zero,31fc <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    31f8:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    31fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3200:	f800283a 	ret

00003204 <exit>:
    3204:	defffe04 	addi	sp,sp,-8
    3208:	000b883a 	mov	r5,zero
    320c:	dc000015 	stw	r16,0(sp)
    3210:	dfc00115 	stw	ra,4(sp)
    3214:	2021883a 	mov	r16,r4
    3218:	00038580 	call	3858 <__call_exitprocs>
    321c:	00800034 	movhi	r2,0
    3220:	109dd504 	addi	r2,r2,30548
    3224:	11000017 	ldw	r4,0(r2)
    3228:	20800f17 	ldw	r2,60(r4)
    322c:	10000126 	beq	r2,zero,3234 <exit+0x30>
    3230:	103ee83a 	callr	r2
    3234:	8009883a 	mov	r4,r16
    3238:	00053c00 	call	53c0 <_exit>

0000323c <memcmp>:
    323c:	00c000c4 	movi	r3,3
    3240:	1980032e 	bgeu	r3,r6,3250 <memcmp+0x14>
    3244:	2144b03a 	or	r2,r4,r5
    3248:	10c4703a 	and	r2,r2,r3
    324c:	10000f26 	beq	r2,zero,328c <memcmp+0x50>
    3250:	31ffffc4 	addi	r7,r6,-1
    3254:	3000061e 	bne	r6,zero,3270 <memcmp+0x34>
    3258:	00000a06 	br	3284 <memcmp+0x48>
    325c:	39ffffc4 	addi	r7,r7,-1
    3260:	00bfffc4 	movi	r2,-1
    3264:	21000044 	addi	r4,r4,1
    3268:	29400044 	addi	r5,r5,1
    326c:	38800526 	beq	r7,r2,3284 <memcmp+0x48>
    3270:	20c00003 	ldbu	r3,0(r4)
    3274:	28800003 	ldbu	r2,0(r5)
    3278:	18bff826 	beq	r3,r2,325c <memcmp+0x20>
    327c:	1885c83a 	sub	r2,r3,r2
    3280:	f800283a 	ret
    3284:	0005883a 	mov	r2,zero
    3288:	f800283a 	ret
    328c:	180f883a 	mov	r7,r3
    3290:	20c00017 	ldw	r3,0(r4)
    3294:	28800017 	ldw	r2,0(r5)
    3298:	18bfed1e 	bne	r3,r2,3250 <memcmp+0x14>
    329c:	31bfff04 	addi	r6,r6,-4
    32a0:	21000104 	addi	r4,r4,4
    32a4:	29400104 	addi	r5,r5,4
    32a8:	39bff936 	bltu	r7,r6,3290 <memcmp+0x54>
    32ac:	003fe806 	br	3250 <memcmp+0x14>

000032b0 <putc>:
    32b0:	defffc04 	addi	sp,sp,-16
    32b4:	dc800215 	stw	r18,8(sp)
    32b8:	04800034 	movhi	r18,0
    32bc:	949dd404 	addi	r18,r18,30544
    32c0:	90c00017 	ldw	r3,0(r18)
    32c4:	dc400115 	stw	r17,4(sp)
    32c8:	dc000015 	stw	r16,0(sp)
    32cc:	dfc00315 	stw	ra,12(sp)
    32d0:	2023883a 	mov	r17,r4
    32d4:	2821883a 	mov	r16,r5
    32d8:	18000226 	beq	r3,zero,32e4 <putc+0x34>
    32dc:	18800e17 	ldw	r2,56(r3)
    32e0:	10001126 	beq	r2,zero,3328 <putc+0x78>
    32e4:	80800217 	ldw	r2,8(r16)
    32e8:	10ffffc4 	addi	r3,r2,-1
    32ec:	80c00215 	stw	r3,8(r16)
    32f0:	18001316 	blt	r3,zero,3340 <putc+0x90>
    32f4:	80800017 	ldw	r2,0(r16)
    32f8:	14400005 	stb	r17,0(r2)
    32fc:	80c00017 	ldw	r3,0(r16)
    3300:	18800044 	addi	r2,r3,1
    3304:	18c00003 	ldbu	r3,0(r3)
    3308:	80800015 	stw	r2,0(r16)
    330c:	1805883a 	mov	r2,r3
    3310:	dfc00317 	ldw	ra,12(sp)
    3314:	dc800217 	ldw	r18,8(sp)
    3318:	dc400117 	ldw	r17,4(sp)
    331c:	dc000017 	ldw	r16,0(sp)
    3320:	dec00404 	addi	sp,sp,16
    3324:	f800283a 	ret
    3328:	1809883a 	mov	r4,r3
    332c:	0003ca00 	call	3ca0 <__sinit>
    3330:	80800217 	ldw	r2,8(r16)
    3334:	10ffffc4 	addi	r3,r2,-1
    3338:	80c00215 	stw	r3,8(r16)
    333c:	183fed0e 	bge	r3,zero,32f4 <putc+0x44>
    3340:	80800617 	ldw	r2,24(r16)
    3344:	18800f16 	blt	r3,r2,3384 <putc+0xd4>
    3348:	80800017 	ldw	r2,0(r16)
    334c:	14400005 	stb	r17,0(r2)
    3350:	81000017 	ldw	r4,0(r16)
    3354:	00800284 	movi	r2,10
    3358:	20c00003 	ldbu	r3,0(r4)
    335c:	18801226 	beq	r3,r2,33a8 <putc+0xf8>
    3360:	20800044 	addi	r2,r4,1
    3364:	80800015 	stw	r2,0(r16)
    3368:	1805883a 	mov	r2,r3
    336c:	dfc00317 	ldw	ra,12(sp)
    3370:	dc800217 	ldw	r18,8(sp)
    3374:	dc400117 	ldw	r17,4(sp)
    3378:	dc000017 	ldw	r16,0(sp)
    337c:	dec00404 	addi	sp,sp,16
    3380:	f800283a 	ret
    3384:	91000017 	ldw	r4,0(r18)
    3388:	880b883a 	mov	r5,r17
    338c:	800d883a 	mov	r6,r16
    3390:	dfc00317 	ldw	ra,12(sp)
    3394:	dc800217 	ldw	r18,8(sp)
    3398:	dc400117 	ldw	r17,4(sp)
    339c:	dc000017 	ldw	r16,0(sp)
    33a0:	dec00404 	addi	sp,sp,16
    33a4:	00035cc1 	jmpi	35cc <__swbuf_r>
    33a8:	91000017 	ldw	r4,0(r18)
    33ac:	180b883a 	mov	r5,r3
    33b0:	003ff606 	br	338c <putc+0xdc>

000033b4 <_putc_r>:
    33b4:	defffc04 	addi	sp,sp,-16
    33b8:	dc400215 	stw	r17,8(sp)
    33bc:	dc000115 	stw	r16,4(sp)
    33c0:	dfc00315 	stw	ra,12(sp)
    33c4:	2021883a 	mov	r16,r4
    33c8:	2823883a 	mov	r17,r5
    33cc:	20000226 	beq	r4,zero,33d8 <_putc_r+0x24>
    33d0:	20800e17 	ldw	r2,56(r4)
    33d4:	10001026 	beq	r2,zero,3418 <_putc_r+0x64>
    33d8:	30800217 	ldw	r2,8(r6)
    33dc:	10ffffc4 	addi	r3,r2,-1
    33e0:	30c00215 	stw	r3,8(r6)
    33e4:	18001316 	blt	r3,zero,3434 <_putc_r+0x80>
    33e8:	30800017 	ldw	r2,0(r6)
    33ec:	14400005 	stb	r17,0(r2)
    33f0:	30c00017 	ldw	r3,0(r6)
    33f4:	18800044 	addi	r2,r3,1
    33f8:	18c00003 	ldbu	r3,0(r3)
    33fc:	30800015 	stw	r2,0(r6)
    3400:	1805883a 	mov	r2,r3
    3404:	dfc00317 	ldw	ra,12(sp)
    3408:	dc400217 	ldw	r17,8(sp)
    340c:	dc000117 	ldw	r16,4(sp)
    3410:	dec00404 	addi	sp,sp,16
    3414:	f800283a 	ret
    3418:	d9800015 	stw	r6,0(sp)
    341c:	0003ca00 	call	3ca0 <__sinit>
    3420:	d9800017 	ldw	r6,0(sp)
    3424:	30800217 	ldw	r2,8(r6)
    3428:	10ffffc4 	addi	r3,r2,-1
    342c:	30c00215 	stw	r3,8(r6)
    3430:	183fed0e 	bge	r3,zero,33e8 <_putc_r+0x34>
    3434:	30800617 	ldw	r2,24(r6)
    3438:	18800e16 	blt	r3,r2,3474 <_putc_r+0xc0>
    343c:	30800017 	ldw	r2,0(r6)
    3440:	14400005 	stb	r17,0(r2)
    3444:	31000017 	ldw	r4,0(r6)
    3448:	00800284 	movi	r2,10
    344c:	20c00003 	ldbu	r3,0(r4)
    3450:	18800f26 	beq	r3,r2,3490 <_putc_r+0xdc>
    3454:	20800044 	addi	r2,r4,1
    3458:	30800015 	stw	r2,0(r6)
    345c:	1805883a 	mov	r2,r3
    3460:	dfc00317 	ldw	ra,12(sp)
    3464:	dc400217 	ldw	r17,8(sp)
    3468:	dc000117 	ldw	r16,4(sp)
    346c:	dec00404 	addi	sp,sp,16
    3470:	f800283a 	ret
    3474:	8009883a 	mov	r4,r16
    3478:	880b883a 	mov	r5,r17
    347c:	dfc00317 	ldw	ra,12(sp)
    3480:	dc400217 	ldw	r17,8(sp)
    3484:	dc000117 	ldw	r16,4(sp)
    3488:	dec00404 	addi	sp,sp,16
    348c:	00035cc1 	jmpi	35cc <__swbuf_r>
    3490:	8009883a 	mov	r4,r16
    3494:	180b883a 	mov	r5,r3
    3498:	003ff806 	br	347c <_putc_r+0xc8>

0000349c <strcmp>:
    349c:	2144b03a 	or	r2,r4,r5
    34a0:	108000cc 	andi	r2,r2,3
    34a4:	10001d1e 	bne	r2,zero,351c <strcmp+0x80>
    34a8:	200f883a 	mov	r7,r4
    34ac:	28800017 	ldw	r2,0(r5)
    34b0:	21000017 	ldw	r4,0(r4)
    34b4:	280d883a 	mov	r6,r5
    34b8:	2080161e 	bne	r4,r2,3514 <strcmp+0x78>
    34bc:	023fbff4 	movhi	r8,65279
    34c0:	423fbfc4 	addi	r8,r8,-257
    34c4:	2207883a 	add	r3,r4,r8
    34c8:	01602074 	movhi	r5,32897
    34cc:	29602004 	addi	r5,r5,-32640
    34d0:	1946703a 	and	r3,r3,r5
    34d4:	0104303a 	nor	r2,zero,r4
    34d8:	10c4703a 	and	r2,r2,r3
    34dc:	10001c1e 	bne	r2,zero,3550 <strcmp+0xb4>
    34e0:	4013883a 	mov	r9,r8
    34e4:	2811883a 	mov	r8,r5
    34e8:	00000106 	br	34f0 <strcmp+0x54>
    34ec:	1800181e 	bne	r3,zero,3550 <strcmp+0xb4>
    34f0:	39c00104 	addi	r7,r7,4
    34f4:	39000017 	ldw	r4,0(r7)
    34f8:	31800104 	addi	r6,r6,4
    34fc:	31400017 	ldw	r5,0(r6)
    3500:	2245883a 	add	r2,r4,r9
    3504:	1204703a 	and	r2,r2,r8
    3508:	0106303a 	nor	r3,zero,r4
    350c:	1886703a 	and	r3,r3,r2
    3510:	217ff626 	beq	r4,r5,34ec <strcmp+0x50>
    3514:	3809883a 	mov	r4,r7
    3518:	300b883a 	mov	r5,r6
    351c:	20c00007 	ldb	r3,0(r4)
    3520:	1800051e 	bne	r3,zero,3538 <strcmp+0x9c>
    3524:	00000606 	br	3540 <strcmp+0xa4>
    3528:	21000044 	addi	r4,r4,1
    352c:	20c00007 	ldb	r3,0(r4)
    3530:	29400044 	addi	r5,r5,1
    3534:	18000226 	beq	r3,zero,3540 <strcmp+0xa4>
    3538:	28800007 	ldb	r2,0(r5)
    353c:	18bffa26 	beq	r3,r2,3528 <strcmp+0x8c>
    3540:	20c00003 	ldbu	r3,0(r4)
    3544:	28800003 	ldbu	r2,0(r5)
    3548:	1885c83a 	sub	r2,r3,r2
    354c:	f800283a 	ret
    3550:	0005883a 	mov	r2,zero
    3554:	f800283a 	ret

00003558 <strlen>:
    3558:	208000cc 	andi	r2,r4,3
    355c:	2011883a 	mov	r8,r4
    3560:	1000161e 	bne	r2,zero,35bc <strlen+0x64>
    3564:	20c00017 	ldw	r3,0(r4)
    3568:	017fbff4 	movhi	r5,65279
    356c:	297fbfc4 	addi	r5,r5,-257
    3570:	01e02074 	movhi	r7,32897
    3574:	39e02004 	addi	r7,r7,-32640
    3578:	1945883a 	add	r2,r3,r5
    357c:	11c4703a 	and	r2,r2,r7
    3580:	00c6303a 	nor	r3,zero,r3
    3584:	1886703a 	and	r3,r3,r2
    3588:	18000c1e 	bne	r3,zero,35bc <strlen+0x64>
    358c:	280d883a 	mov	r6,r5
    3590:	380b883a 	mov	r5,r7
    3594:	21000104 	addi	r4,r4,4
    3598:	20800017 	ldw	r2,0(r4)
    359c:	1187883a 	add	r3,r2,r6
    35a0:	1946703a 	and	r3,r3,r5
    35a4:	0084303a 	nor	r2,zero,r2
    35a8:	10c4703a 	and	r2,r2,r3
    35ac:	103ff926 	beq	r2,zero,3594 <strlen+0x3c>
    35b0:	20800007 	ldb	r2,0(r4)
    35b4:	10000326 	beq	r2,zero,35c4 <strlen+0x6c>
    35b8:	21000044 	addi	r4,r4,1
    35bc:	20800007 	ldb	r2,0(r4)
    35c0:	103ffd1e 	bne	r2,zero,35b8 <strlen+0x60>
    35c4:	2205c83a 	sub	r2,r4,r8
    35c8:	f800283a 	ret

000035cc <__swbuf_r>:
    35cc:	defffc04 	addi	sp,sp,-16
    35d0:	dc400215 	stw	r17,8(sp)
    35d4:	dc000115 	stw	r16,4(sp)
    35d8:	dfc00315 	stw	ra,12(sp)
    35dc:	2023883a 	mov	r17,r4
    35e0:	2821883a 	mov	r16,r5
    35e4:	20000226 	beq	r4,zero,35f0 <__swbuf_r+0x24>
    35e8:	20800e17 	ldw	r2,56(r4)
    35ec:	10002f26 	beq	r2,zero,36ac <__swbuf_r+0xe0>
    35f0:	3080030b 	ldhu	r2,12(r6)
    35f4:	30c00617 	ldw	r3,24(r6)
    35f8:	1080020c 	andi	r2,r2,8
    35fc:	30c00215 	stw	r3,8(r6)
    3600:	10002226 	beq	r2,zero,368c <__swbuf_r+0xc0>
    3604:	30c00417 	ldw	r3,16(r6)
    3608:	18002026 	beq	r3,zero,368c <__swbuf_r+0xc0>
    360c:	31000017 	ldw	r4,0(r6)
    3610:	30800517 	ldw	r2,20(r6)
    3614:	20c7c83a 	sub	r3,r4,r3
    3618:	18802f0e 	bge	r3,r2,36d8 <__swbuf_r+0x10c>
    361c:	19400044 	addi	r5,r3,1
    3620:	30800217 	ldw	r2,8(r6)
    3624:	84003fcc 	andi	r16,r16,255
    3628:	20c00044 	addi	r3,r4,1
    362c:	10bfffc4 	addi	r2,r2,-1
    3630:	30800215 	stw	r2,8(r6)
    3634:	24000005 	stb	r16,0(r4)
    3638:	30800517 	ldw	r2,20(r6)
    363c:	30c00015 	stw	r3,0(r6)
    3640:	11400c26 	beq	r2,r5,3674 <__swbuf_r+0xa8>
    3644:	3080030b 	ldhu	r2,12(r6)
    3648:	1080004c 	andi	r2,r2,1
    364c:	1005003a 	cmpeq	r2,r2,zero
    3650:	10000626 	beq	r2,zero,366c <__swbuf_r+0xa0>
    3654:	8005883a 	mov	r2,r16
    3658:	dfc00317 	ldw	ra,12(sp)
    365c:	dc400217 	ldw	r17,8(sp)
    3660:	dc000117 	ldw	r16,4(sp)
    3664:	dec00404 	addi	sp,sp,16
    3668:	f800283a 	ret
    366c:	00800284 	movi	r2,10
    3670:	80bff81e 	bne	r16,r2,3654 <__swbuf_r+0x88>
    3674:	8809883a 	mov	r4,r17
    3678:	300b883a 	mov	r5,r6
    367c:	0003a080 	call	3a08 <_fflush_r>
    3680:	103ff426 	beq	r2,zero,3654 <__swbuf_r+0x88>
    3684:	043fffc4 	movi	r16,-1
    3688:	003ff206 	br	3654 <__swbuf_r+0x88>
    368c:	300b883a 	mov	r5,r6
    3690:	8809883a 	mov	r4,r17
    3694:	d9800015 	stw	r6,0(sp)
    3698:	00037180 	call	3718 <__swsetup_r>
    369c:	d9800017 	ldw	r6,0(sp)
    36a0:	1000061e 	bne	r2,zero,36bc <__swbuf_r+0xf0>
    36a4:	30c00417 	ldw	r3,16(r6)
    36a8:	003fd806 	br	360c <__swbuf_r+0x40>
    36ac:	d9800015 	stw	r6,0(sp)
    36b0:	0003ca00 	call	3ca0 <__sinit>
    36b4:	d9800017 	ldw	r6,0(sp)
    36b8:	003fcd06 	br	35f0 <__swbuf_r+0x24>
    36bc:	3080030b 	ldhu	r2,12(r6)
    36c0:	00c00244 	movi	r3,9
    36c4:	043fffc4 	movi	r16,-1
    36c8:	10801014 	ori	r2,r2,64
    36cc:	3080030d 	sth	r2,12(r6)
    36d0:	88c00015 	stw	r3,0(r17)
    36d4:	003fdf06 	br	3654 <__swbuf_r+0x88>
    36d8:	300b883a 	mov	r5,r6
    36dc:	8809883a 	mov	r4,r17
    36e0:	d9800015 	stw	r6,0(sp)
    36e4:	0003a080 	call	3a08 <_fflush_r>
    36e8:	d9800017 	ldw	r6,0(sp)
    36ec:	103fe51e 	bne	r2,zero,3684 <__swbuf_r+0xb8>
    36f0:	31000017 	ldw	r4,0(r6)
    36f4:	01400044 	movi	r5,1
    36f8:	003fc906 	br	3620 <__swbuf_r+0x54>

000036fc <__swbuf>:
    36fc:	01800034 	movhi	r6,0
    3700:	319dd404 	addi	r6,r6,30544
    3704:	2007883a 	mov	r3,r4
    3708:	31000017 	ldw	r4,0(r6)
    370c:	280d883a 	mov	r6,r5
    3710:	180b883a 	mov	r5,r3
    3714:	00035cc1 	jmpi	35cc <__swbuf_r>

00003718 <__swsetup_r>:
    3718:	00800034 	movhi	r2,0
    371c:	109dd404 	addi	r2,r2,30544
    3720:	10c00017 	ldw	r3,0(r2)
    3724:	defffd04 	addi	sp,sp,-12
    3728:	dc400115 	stw	r17,4(sp)
    372c:	dc000015 	stw	r16,0(sp)
    3730:	dfc00215 	stw	ra,8(sp)
    3734:	2023883a 	mov	r17,r4
    3738:	2821883a 	mov	r16,r5
    373c:	18000226 	beq	r3,zero,3748 <__swsetup_r+0x30>
    3740:	18800e17 	ldw	r2,56(r3)
    3744:	10001f26 	beq	r2,zero,37c4 <__swsetup_r+0xac>
    3748:	8100030b 	ldhu	r4,12(r16)
    374c:	2080020c 	andi	r2,r4,8
    3750:	10002826 	beq	r2,zero,37f4 <__swsetup_r+0xdc>
    3754:	81400417 	ldw	r5,16(r16)
    3758:	28001d26 	beq	r5,zero,37d0 <__swsetup_r+0xb8>
    375c:	2080004c 	andi	r2,r4,1
    3760:	1005003a 	cmpeq	r2,r2,zero
    3764:	10000b26 	beq	r2,zero,3794 <__swsetup_r+0x7c>
    3768:	2080008c 	andi	r2,r4,2
    376c:	10001226 	beq	r2,zero,37b8 <__swsetup_r+0xa0>
    3770:	0005883a 	mov	r2,zero
    3774:	80800215 	stw	r2,8(r16)
    3778:	28000b26 	beq	r5,zero,37a8 <__swsetup_r+0x90>
    377c:	0005883a 	mov	r2,zero
    3780:	dfc00217 	ldw	ra,8(sp)
    3784:	dc400117 	ldw	r17,4(sp)
    3788:	dc000017 	ldw	r16,0(sp)
    378c:	dec00304 	addi	sp,sp,12
    3790:	f800283a 	ret
    3794:	80800517 	ldw	r2,20(r16)
    3798:	80000215 	stw	zero,8(r16)
    379c:	0085c83a 	sub	r2,zero,r2
    37a0:	80800615 	stw	r2,24(r16)
    37a4:	283ff51e 	bne	r5,zero,377c <__swsetup_r+0x64>
    37a8:	2080200c 	andi	r2,r4,128
    37ac:	103ff326 	beq	r2,zero,377c <__swsetup_r+0x64>
    37b0:	00bfffc4 	movi	r2,-1
    37b4:	003ff206 	br	3780 <__swsetup_r+0x68>
    37b8:	80800517 	ldw	r2,20(r16)
    37bc:	80800215 	stw	r2,8(r16)
    37c0:	003fed06 	br	3778 <__swsetup_r+0x60>
    37c4:	1809883a 	mov	r4,r3
    37c8:	0003ca00 	call	3ca0 <__sinit>
    37cc:	003fde06 	br	3748 <__swsetup_r+0x30>
    37d0:	20c0a00c 	andi	r3,r4,640
    37d4:	00808004 	movi	r2,512
    37d8:	18bfe026 	beq	r3,r2,375c <__swsetup_r+0x44>
    37dc:	8809883a 	mov	r4,r17
    37e0:	800b883a 	mov	r5,r16
    37e4:	00044b80 	call	44b8 <__smakebuf_r>
    37e8:	8100030b 	ldhu	r4,12(r16)
    37ec:	81400417 	ldw	r5,16(r16)
    37f0:	003fda06 	br	375c <__swsetup_r+0x44>
    37f4:	2080040c 	andi	r2,r4,16
    37f8:	103fed26 	beq	r2,zero,37b0 <__swsetup_r+0x98>
    37fc:	2080010c 	andi	r2,r4,4
    3800:	10001226 	beq	r2,zero,384c <__swsetup_r+0x134>
    3804:	81400c17 	ldw	r5,48(r16)
    3808:	28000526 	beq	r5,zero,3820 <__swsetup_r+0x108>
    380c:	80801004 	addi	r2,r16,64
    3810:	28800226 	beq	r5,r2,381c <__swsetup_r+0x104>
    3814:	8809883a 	mov	r4,r17
    3818:	00040240 	call	4024 <_free_r>
    381c:	80000c15 	stw	zero,48(r16)
    3820:	8080030b 	ldhu	r2,12(r16)
    3824:	81400417 	ldw	r5,16(r16)
    3828:	80000115 	stw	zero,4(r16)
    382c:	10bff6cc 	andi	r2,r2,65499
    3830:	8080030d 	sth	r2,12(r16)
    3834:	81400015 	stw	r5,0(r16)
    3838:	8080030b 	ldhu	r2,12(r16)
    383c:	10800214 	ori	r2,r2,8
    3840:	113fffcc 	andi	r4,r2,65535
    3844:	8080030d 	sth	r2,12(r16)
    3848:	003fc306 	br	3758 <__swsetup_r+0x40>
    384c:	81400417 	ldw	r5,16(r16)
    3850:	003ff906 	br	3838 <__swsetup_r+0x120>

00003854 <register_fini>:
    3854:	f800283a 	ret

00003858 <__call_exitprocs>:
    3858:	00800034 	movhi	r2,0
    385c:	109dd504 	addi	r2,r2,30548
    3860:	10800017 	ldw	r2,0(r2)
    3864:	defff304 	addi	sp,sp,-52
    3868:	df000b15 	stw	fp,44(sp)
    386c:	d8800115 	stw	r2,4(sp)
    3870:	00800034 	movhi	r2,0
    3874:	10800004 	addi	r2,r2,0
    3878:	1005003a 	cmpeq	r2,r2,zero
    387c:	d8800215 	stw	r2,8(sp)
    3880:	d8800117 	ldw	r2,4(sp)
    3884:	dd400815 	stw	r21,32(sp)
    3888:	dd000715 	stw	r20,28(sp)
    388c:	10805204 	addi	r2,r2,328
    3890:	dfc00c15 	stw	ra,48(sp)
    3894:	ddc00a15 	stw	r23,40(sp)
    3898:	dd800915 	stw	r22,36(sp)
    389c:	dcc00615 	stw	r19,24(sp)
    38a0:	dc800515 	stw	r18,20(sp)
    38a4:	dc400415 	stw	r17,16(sp)
    38a8:	dc000315 	stw	r16,12(sp)
    38ac:	282b883a 	mov	r21,r5
    38b0:	2039883a 	mov	fp,r4
    38b4:	d8800015 	stw	r2,0(sp)
    38b8:	2829003a 	cmpeq	r20,r5,zero
    38bc:	d8800117 	ldw	r2,4(sp)
    38c0:	14405217 	ldw	r17,328(r2)
    38c4:	88001026 	beq	r17,zero,3908 <__call_exitprocs+0xb0>
    38c8:	ddc00017 	ldw	r23,0(sp)
    38cc:	88800117 	ldw	r2,4(r17)
    38d0:	8c802204 	addi	r18,r17,136
    38d4:	143fffc4 	addi	r16,r2,-1
    38d8:	80000916 	blt	r16,zero,3900 <__call_exitprocs+0xa8>
    38dc:	05bfffc4 	movi	r22,-1
    38e0:	a000151e 	bne	r20,zero,3938 <__call_exitprocs+0xe0>
    38e4:	8409883a 	add	r4,r16,r16
    38e8:	2105883a 	add	r2,r4,r4
    38ec:	1485883a 	add	r2,r2,r18
    38f0:	10c02017 	ldw	r3,128(r2)
    38f4:	a8c01126 	beq	r21,r3,393c <__call_exitprocs+0xe4>
    38f8:	843fffc4 	addi	r16,r16,-1
    38fc:	85bff81e 	bne	r16,r22,38e0 <__call_exitprocs+0x88>
    3900:	d8800217 	ldw	r2,8(sp)
    3904:	10003126 	beq	r2,zero,39cc <__call_exitprocs+0x174>
    3908:	dfc00c17 	ldw	ra,48(sp)
    390c:	df000b17 	ldw	fp,44(sp)
    3910:	ddc00a17 	ldw	r23,40(sp)
    3914:	dd800917 	ldw	r22,36(sp)
    3918:	dd400817 	ldw	r21,32(sp)
    391c:	dd000717 	ldw	r20,28(sp)
    3920:	dcc00617 	ldw	r19,24(sp)
    3924:	dc800517 	ldw	r18,20(sp)
    3928:	dc400417 	ldw	r17,16(sp)
    392c:	dc000317 	ldw	r16,12(sp)
    3930:	dec00d04 	addi	sp,sp,52
    3934:	f800283a 	ret
    3938:	8409883a 	add	r4,r16,r16
    393c:	88c00117 	ldw	r3,4(r17)
    3940:	2105883a 	add	r2,r4,r4
    3944:	1445883a 	add	r2,r2,r17
    3948:	18ffffc4 	addi	r3,r3,-1
    394c:	11800217 	ldw	r6,8(r2)
    3950:	1c001526 	beq	r3,r16,39a8 <__call_exitprocs+0x150>
    3954:	10000215 	stw	zero,8(r2)
    3958:	303fe726 	beq	r6,zero,38f8 <__call_exitprocs+0xa0>
    395c:	00c00044 	movi	r3,1
    3960:	1c06983a 	sll	r3,r3,r16
    3964:	90804017 	ldw	r2,256(r18)
    3968:	8cc00117 	ldw	r19,4(r17)
    396c:	1884703a 	and	r2,r3,r2
    3970:	10001426 	beq	r2,zero,39c4 <__call_exitprocs+0x16c>
    3974:	90804117 	ldw	r2,260(r18)
    3978:	1884703a 	and	r2,r3,r2
    397c:	10000c1e 	bne	r2,zero,39b0 <__call_exitprocs+0x158>
    3980:	2105883a 	add	r2,r4,r4
    3984:	1485883a 	add	r2,r2,r18
    3988:	11400017 	ldw	r5,0(r2)
    398c:	e009883a 	mov	r4,fp
    3990:	303ee83a 	callr	r6
    3994:	88800117 	ldw	r2,4(r17)
    3998:	98bfc81e 	bne	r19,r2,38bc <__call_exitprocs+0x64>
    399c:	b8800017 	ldw	r2,0(r23)
    39a0:	147fd526 	beq	r2,r17,38f8 <__call_exitprocs+0xa0>
    39a4:	003fc506 	br	38bc <__call_exitprocs+0x64>
    39a8:	8c000115 	stw	r16,4(r17)
    39ac:	003fea06 	br	3958 <__call_exitprocs+0x100>
    39b0:	2105883a 	add	r2,r4,r4
    39b4:	1485883a 	add	r2,r2,r18
    39b8:	11000017 	ldw	r4,0(r2)
    39bc:	303ee83a 	callr	r6
    39c0:	003ff406 	br	3994 <__call_exitprocs+0x13c>
    39c4:	303ee83a 	callr	r6
    39c8:	003ff206 	br	3994 <__call_exitprocs+0x13c>
    39cc:	88800117 	ldw	r2,4(r17)
    39d0:	1000081e 	bne	r2,zero,39f4 <__call_exitprocs+0x19c>
    39d4:	89000017 	ldw	r4,0(r17)
    39d8:	20000726 	beq	r4,zero,39f8 <__call_exitprocs+0x1a0>
    39dc:	b9000015 	stw	r4,0(r23)
    39e0:	8809883a 	mov	r4,r17
    39e4:	00000000 	call	0 <__reset>
    39e8:	bc400017 	ldw	r17,0(r23)
    39ec:	883fb71e 	bne	r17,zero,38cc <__call_exitprocs+0x74>
    39f0:	003fc506 	br	3908 <__call_exitprocs+0xb0>
    39f4:	89000017 	ldw	r4,0(r17)
    39f8:	882f883a 	mov	r23,r17
    39fc:	2023883a 	mov	r17,r4
    3a00:	883fb21e 	bne	r17,zero,38cc <__call_exitprocs+0x74>
    3a04:	003fc006 	br	3908 <__call_exitprocs+0xb0>

00003a08 <_fflush_r>:
    3a08:	defffb04 	addi	sp,sp,-20
    3a0c:	dcc00315 	stw	r19,12(sp)
    3a10:	dc800215 	stw	r18,8(sp)
    3a14:	dfc00415 	stw	ra,16(sp)
    3a18:	dc400115 	stw	r17,4(sp)
    3a1c:	dc000015 	stw	r16,0(sp)
    3a20:	2027883a 	mov	r19,r4
    3a24:	2825883a 	mov	r18,r5
    3a28:	20000226 	beq	r4,zero,3a34 <_fflush_r+0x2c>
    3a2c:	20800e17 	ldw	r2,56(r4)
    3a30:	10005626 	beq	r2,zero,3b8c <_fflush_r+0x184>
    3a34:	9100030b 	ldhu	r4,12(r18)
    3a38:	20ffffcc 	andi	r3,r4,65535
    3a3c:	18e0001c 	xori	r3,r3,32768
    3a40:	18e00004 	addi	r3,r3,-32768
    3a44:	1880020c 	andi	r2,r3,8
    3a48:	1000261e 	bne	r2,zero,3ae4 <_fflush_r+0xdc>
    3a4c:	90c00117 	ldw	r3,4(r18)
    3a50:	20820014 	ori	r2,r4,2048
    3a54:	9080030d 	sth	r2,12(r18)
    3a58:	1009883a 	mov	r4,r2
    3a5c:	00c0400e 	bge	zero,r3,3b60 <_fflush_r+0x158>
    3a60:	92000a17 	ldw	r8,40(r18)
    3a64:	40004026 	beq	r8,zero,3b68 <_fflush_r+0x160>
    3a68:	2084000c 	andi	r2,r4,4096
    3a6c:	10005326 	beq	r2,zero,3bbc <_fflush_r+0x1b4>
    3a70:	94001417 	ldw	r16,80(r18)
    3a74:	9080030b 	ldhu	r2,12(r18)
    3a78:	1080010c 	andi	r2,r2,4
    3a7c:	1000481e 	bne	r2,zero,3ba0 <_fflush_r+0x198>
    3a80:	91400717 	ldw	r5,28(r18)
    3a84:	9809883a 	mov	r4,r19
    3a88:	800d883a 	mov	r6,r16
    3a8c:	000f883a 	mov	r7,zero
    3a90:	403ee83a 	callr	r8
    3a94:	8080261e 	bne	r16,r2,3b30 <_fflush_r+0x128>
    3a98:	9080030b 	ldhu	r2,12(r18)
    3a9c:	91000417 	ldw	r4,16(r18)
    3aa0:	90000115 	stw	zero,4(r18)
    3aa4:	10bdffcc 	andi	r2,r2,63487
    3aa8:	10ffffcc 	andi	r3,r2,65535
    3aac:	18c4000c 	andi	r3,r3,4096
    3ab0:	9080030d 	sth	r2,12(r18)
    3ab4:	91000015 	stw	r4,0(r18)
    3ab8:	18002b26 	beq	r3,zero,3b68 <_fflush_r+0x160>
    3abc:	0007883a 	mov	r3,zero
    3ac0:	1805883a 	mov	r2,r3
    3ac4:	94001415 	stw	r16,80(r18)
    3ac8:	dfc00417 	ldw	ra,16(sp)
    3acc:	dcc00317 	ldw	r19,12(sp)
    3ad0:	dc800217 	ldw	r18,8(sp)
    3ad4:	dc400117 	ldw	r17,4(sp)
    3ad8:	dc000017 	ldw	r16,0(sp)
    3adc:	dec00504 	addi	sp,sp,20
    3ae0:	f800283a 	ret
    3ae4:	94400417 	ldw	r17,16(r18)
    3ae8:	88001f26 	beq	r17,zero,3b68 <_fflush_r+0x160>
    3aec:	90800017 	ldw	r2,0(r18)
    3af0:	18c000cc 	andi	r3,r3,3
    3af4:	94400015 	stw	r17,0(r18)
    3af8:	1461c83a 	sub	r16,r2,r17
    3afc:	18002526 	beq	r3,zero,3b94 <_fflush_r+0x18c>
    3b00:	0005883a 	mov	r2,zero
    3b04:	90800215 	stw	r2,8(r18)
    3b08:	0400170e 	bge	zero,r16,3b68 <_fflush_r+0x160>
    3b0c:	90c00917 	ldw	r3,36(r18)
    3b10:	91400717 	ldw	r5,28(r18)
    3b14:	880d883a 	mov	r6,r17
    3b18:	800f883a 	mov	r7,r16
    3b1c:	9809883a 	mov	r4,r19
    3b20:	183ee83a 	callr	r3
    3b24:	88a3883a 	add	r17,r17,r2
    3b28:	80a1c83a 	sub	r16,r16,r2
    3b2c:	00bff616 	blt	zero,r2,3b08 <_fflush_r+0x100>
    3b30:	9080030b 	ldhu	r2,12(r18)
    3b34:	00ffffc4 	movi	r3,-1
    3b38:	10801014 	ori	r2,r2,64
    3b3c:	9080030d 	sth	r2,12(r18)
    3b40:	1805883a 	mov	r2,r3
    3b44:	dfc00417 	ldw	ra,16(sp)
    3b48:	dcc00317 	ldw	r19,12(sp)
    3b4c:	dc800217 	ldw	r18,8(sp)
    3b50:	dc400117 	ldw	r17,4(sp)
    3b54:	dc000017 	ldw	r16,0(sp)
    3b58:	dec00504 	addi	sp,sp,20
    3b5c:	f800283a 	ret
    3b60:	90800f17 	ldw	r2,60(r18)
    3b64:	00bfbe16 	blt	zero,r2,3a60 <_fflush_r+0x58>
    3b68:	0007883a 	mov	r3,zero
    3b6c:	1805883a 	mov	r2,r3
    3b70:	dfc00417 	ldw	ra,16(sp)
    3b74:	dcc00317 	ldw	r19,12(sp)
    3b78:	dc800217 	ldw	r18,8(sp)
    3b7c:	dc400117 	ldw	r17,4(sp)
    3b80:	dc000017 	ldw	r16,0(sp)
    3b84:	dec00504 	addi	sp,sp,20
    3b88:	f800283a 	ret
    3b8c:	0003ca00 	call	3ca0 <__sinit>
    3b90:	003fa806 	br	3a34 <_fflush_r+0x2c>
    3b94:	90800517 	ldw	r2,20(r18)
    3b98:	90800215 	stw	r2,8(r18)
    3b9c:	003fda06 	br	3b08 <_fflush_r+0x100>
    3ba0:	90800117 	ldw	r2,4(r18)
    3ba4:	90c00c17 	ldw	r3,48(r18)
    3ba8:	80a1c83a 	sub	r16,r16,r2
    3bac:	183fb426 	beq	r3,zero,3a80 <_fflush_r+0x78>
    3bb0:	90800f17 	ldw	r2,60(r18)
    3bb4:	80a1c83a 	sub	r16,r16,r2
    3bb8:	003fb106 	br	3a80 <_fflush_r+0x78>
    3bbc:	91400717 	ldw	r5,28(r18)
    3bc0:	9809883a 	mov	r4,r19
    3bc4:	000d883a 	mov	r6,zero
    3bc8:	01c00044 	movi	r7,1
    3bcc:	403ee83a 	callr	r8
    3bd0:	1021883a 	mov	r16,r2
    3bd4:	00bfffc4 	movi	r2,-1
    3bd8:	80800226 	beq	r16,r2,3be4 <_fflush_r+0x1dc>
    3bdc:	92000a17 	ldw	r8,40(r18)
    3be0:	003fa406 	br	3a74 <_fflush_r+0x6c>
    3be4:	98c00017 	ldw	r3,0(r19)
    3be8:	00800744 	movi	r2,29
    3bec:	18bfde26 	beq	r3,r2,3b68 <_fflush_r+0x160>
    3bf0:	9080030b 	ldhu	r2,12(r18)
    3bf4:	8007883a 	mov	r3,r16
    3bf8:	10801014 	ori	r2,r2,64
    3bfc:	9080030d 	sth	r2,12(r18)
    3c00:	003fcf06 	br	3b40 <_fflush_r+0x138>

00003c04 <fflush>:
    3c04:	01400034 	movhi	r5,0
    3c08:	294e8204 	addi	r5,r5,14856
    3c0c:	2007883a 	mov	r3,r4
    3c10:	20000526 	beq	r4,zero,3c28 <fflush+0x24>
    3c14:	00800034 	movhi	r2,0
    3c18:	109dd404 	addi	r2,r2,30544
    3c1c:	11000017 	ldw	r4,0(r2)
    3c20:	180b883a 	mov	r5,r3
    3c24:	0003a081 	jmpi	3a08 <_fflush_r>
    3c28:	00800034 	movhi	r2,0
    3c2c:	109dd504 	addi	r2,r2,30548
    3c30:	11000017 	ldw	r4,0(r2)
    3c34:	00043381 	jmpi	4338 <_fwalk_reent>

00003c38 <std>:
    3c38:	00800034 	movhi	r2,0
    3c3c:	1093a504 	addi	r2,r2,20116
    3c40:	20800b15 	stw	r2,44(r4)
    3c44:	00800034 	movhi	r2,0
    3c48:	1093e004 	addi	r2,r2,20352
    3c4c:	20800815 	stw	r2,32(r4)
    3c50:	00c00034 	movhi	r3,0
    3c54:	18d3c104 	addi	r3,r3,20228
    3c58:	00800034 	movhi	r2,0
    3c5c:	1093a704 	addi	r2,r2,20124
    3c60:	2140030d 	sth	r5,12(r4)
    3c64:	2180038d 	sth	r6,14(r4)
    3c68:	20c00915 	stw	r3,36(r4)
    3c6c:	20800a15 	stw	r2,40(r4)
    3c70:	20000015 	stw	zero,0(r4)
    3c74:	20000115 	stw	zero,4(r4)
    3c78:	20000215 	stw	zero,8(r4)
    3c7c:	20000415 	stw	zero,16(r4)
    3c80:	20000515 	stw	zero,20(r4)
    3c84:	20000615 	stw	zero,24(r4)
    3c88:	21000715 	stw	r4,28(r4)
    3c8c:	f800283a 	ret

00003c90 <__sfp_lock_acquire>:
    3c90:	f800283a 	ret

00003c94 <__sfp_lock_release>:
    3c94:	f800283a 	ret

00003c98 <__sinit_lock_acquire>:
    3c98:	f800283a 	ret

00003c9c <__sinit_lock_release>:
    3c9c:	f800283a 	ret

00003ca0 <__sinit>:
    3ca0:	20800e17 	ldw	r2,56(r4)
    3ca4:	defffd04 	addi	sp,sp,-12
    3ca8:	dc400115 	stw	r17,4(sp)
    3cac:	dc000015 	stw	r16,0(sp)
    3cb0:	dfc00215 	stw	ra,8(sp)
    3cb4:	04400044 	movi	r17,1
    3cb8:	01400104 	movi	r5,4
    3cbc:	000d883a 	mov	r6,zero
    3cc0:	2021883a 	mov	r16,r4
    3cc4:	2200bb04 	addi	r8,r4,748
    3cc8:	200f883a 	mov	r7,r4
    3ccc:	10000526 	beq	r2,zero,3ce4 <__sinit+0x44>
    3cd0:	dfc00217 	ldw	ra,8(sp)
    3cd4:	dc400117 	ldw	r17,4(sp)
    3cd8:	dc000017 	ldw	r16,0(sp)
    3cdc:	dec00304 	addi	sp,sp,12
    3ce0:	f800283a 	ret
    3ce4:	21000117 	ldw	r4,4(r4)
    3ce8:	00800034 	movhi	r2,0
    3cec:	108f6104 	addi	r2,r2,15748
    3cf0:	00c000c4 	movi	r3,3
    3cf4:	80800f15 	stw	r2,60(r16)
    3cf8:	80c0b915 	stw	r3,740(r16)
    3cfc:	8200ba15 	stw	r8,744(r16)
    3d00:	84400e15 	stw	r17,56(r16)
    3d04:	8000b815 	stw	zero,736(r16)
    3d08:	0003c380 	call	3c38 <std>
    3d0c:	81000217 	ldw	r4,8(r16)
    3d10:	880d883a 	mov	r6,r17
    3d14:	800f883a 	mov	r7,r16
    3d18:	01400284 	movi	r5,10
    3d1c:	0003c380 	call	3c38 <std>
    3d20:	81000317 	ldw	r4,12(r16)
    3d24:	800f883a 	mov	r7,r16
    3d28:	01400484 	movi	r5,18
    3d2c:	01800084 	movi	r6,2
    3d30:	dfc00217 	ldw	ra,8(sp)
    3d34:	dc400117 	ldw	r17,4(sp)
    3d38:	dc000017 	ldw	r16,0(sp)
    3d3c:	dec00304 	addi	sp,sp,12
    3d40:	0003c381 	jmpi	3c38 <std>

00003d44 <__fp_lock>:
    3d44:	0005883a 	mov	r2,zero
    3d48:	f800283a 	ret

00003d4c <__fp_unlock>:
    3d4c:	0005883a 	mov	r2,zero
    3d50:	f800283a 	ret

00003d54 <__fp_unlock_all>:
    3d54:	00800034 	movhi	r2,0
    3d58:	109dd404 	addi	r2,r2,30544
    3d5c:	11000017 	ldw	r4,0(r2)
    3d60:	01400034 	movhi	r5,0
    3d64:	294f5304 	addi	r5,r5,15692
    3d68:	00044001 	jmpi	4400 <_fwalk>

00003d6c <__fp_lock_all>:
    3d6c:	00800034 	movhi	r2,0
    3d70:	109dd404 	addi	r2,r2,30544
    3d74:	11000017 	ldw	r4,0(r2)
    3d78:	01400034 	movhi	r5,0
    3d7c:	294f5104 	addi	r5,r5,15684
    3d80:	00044001 	jmpi	4400 <_fwalk>

00003d84 <_cleanup_r>:
    3d84:	01400034 	movhi	r5,0
    3d88:	29547604 	addi	r5,r5,20952
    3d8c:	00044001 	jmpi	4400 <_fwalk>

00003d90 <_cleanup>:
    3d90:	00800034 	movhi	r2,0
    3d94:	109dd504 	addi	r2,r2,30548
    3d98:	11000017 	ldw	r4,0(r2)
    3d9c:	0003d841 	jmpi	3d84 <_cleanup_r>

00003da0 <__sfmoreglue>:
    3da0:	defffc04 	addi	sp,sp,-16
    3da4:	dc400115 	stw	r17,4(sp)
    3da8:	2c401724 	muli	r17,r5,92
    3dac:	dc800215 	stw	r18,8(sp)
    3db0:	2825883a 	mov	r18,r5
    3db4:	89400304 	addi	r5,r17,12
    3db8:	dc000015 	stw	r16,0(sp)
    3dbc:	dfc00315 	stw	ra,12(sp)
    3dc0:	000464c0 	call	464c <_malloc_r>
    3dc4:	0021883a 	mov	r16,zero
    3dc8:	880d883a 	mov	r6,r17
    3dcc:	000b883a 	mov	r5,zero
    3dd0:	10000626 	beq	r2,zero,3dec <__sfmoreglue+0x4c>
    3dd4:	11000304 	addi	r4,r2,12
    3dd8:	14800115 	stw	r18,4(r2)
    3ddc:	10000015 	stw	zero,0(r2)
    3de0:	11000215 	stw	r4,8(r2)
    3de4:	1021883a 	mov	r16,r2
    3de8:	0004d8c0 	call	4d8c <memset>
    3dec:	8005883a 	mov	r2,r16
    3df0:	dfc00317 	ldw	ra,12(sp)
    3df4:	dc800217 	ldw	r18,8(sp)
    3df8:	dc400117 	ldw	r17,4(sp)
    3dfc:	dc000017 	ldw	r16,0(sp)
    3e00:	dec00404 	addi	sp,sp,16
    3e04:	f800283a 	ret

00003e08 <__sfp>:
    3e08:	defffd04 	addi	sp,sp,-12
    3e0c:	00800034 	movhi	r2,0
    3e10:	109dd504 	addi	r2,r2,30548
    3e14:	dc000015 	stw	r16,0(sp)
    3e18:	14000017 	ldw	r16,0(r2)
    3e1c:	dc400115 	stw	r17,4(sp)
    3e20:	dfc00215 	stw	ra,8(sp)
    3e24:	80800e17 	ldw	r2,56(r16)
    3e28:	2023883a 	mov	r17,r4
    3e2c:	10002626 	beq	r2,zero,3ec8 <__sfp+0xc0>
    3e30:	8400b804 	addi	r16,r16,736
    3e34:	80800117 	ldw	r2,4(r16)
    3e38:	81000217 	ldw	r4,8(r16)
    3e3c:	10ffffc4 	addi	r3,r2,-1
    3e40:	18000916 	blt	r3,zero,3e68 <__sfp+0x60>
    3e44:	2080030f 	ldh	r2,12(r4)
    3e48:	10000b26 	beq	r2,zero,3e78 <__sfp+0x70>
    3e4c:	017fffc4 	movi	r5,-1
    3e50:	00000206 	br	3e5c <__sfp+0x54>
    3e54:	2080030f 	ldh	r2,12(r4)
    3e58:	10000726 	beq	r2,zero,3e78 <__sfp+0x70>
    3e5c:	18ffffc4 	addi	r3,r3,-1
    3e60:	21001704 	addi	r4,r4,92
    3e64:	197ffb1e 	bne	r3,r5,3e54 <__sfp+0x4c>
    3e68:	80800017 	ldw	r2,0(r16)
    3e6c:	10001926 	beq	r2,zero,3ed4 <__sfp+0xcc>
    3e70:	1021883a 	mov	r16,r2
    3e74:	003fef06 	br	3e34 <__sfp+0x2c>
    3e78:	00bfffc4 	movi	r2,-1
    3e7c:	00c00044 	movi	r3,1
    3e80:	2080038d 	sth	r2,14(r4)
    3e84:	20c0030d 	sth	r3,12(r4)
    3e88:	20000015 	stw	zero,0(r4)
    3e8c:	20000215 	stw	zero,8(r4)
    3e90:	20000115 	stw	zero,4(r4)
    3e94:	20000415 	stw	zero,16(r4)
    3e98:	20000515 	stw	zero,20(r4)
    3e9c:	20000615 	stw	zero,24(r4)
    3ea0:	20000c15 	stw	zero,48(r4)
    3ea4:	20000d15 	stw	zero,52(r4)
    3ea8:	20001115 	stw	zero,68(r4)
    3eac:	20001215 	stw	zero,72(r4)
    3eb0:	2005883a 	mov	r2,r4
    3eb4:	dfc00217 	ldw	ra,8(sp)
    3eb8:	dc400117 	ldw	r17,4(sp)
    3ebc:	dc000017 	ldw	r16,0(sp)
    3ec0:	dec00304 	addi	sp,sp,12
    3ec4:	f800283a 	ret
    3ec8:	8009883a 	mov	r4,r16
    3ecc:	0003ca00 	call	3ca0 <__sinit>
    3ed0:	003fd706 	br	3e30 <__sfp+0x28>
    3ed4:	8809883a 	mov	r4,r17
    3ed8:	01400104 	movi	r5,4
    3edc:	0003da00 	call	3da0 <__sfmoreglue>
    3ee0:	80800015 	stw	r2,0(r16)
    3ee4:	103fe21e 	bne	r2,zero,3e70 <__sfp+0x68>
    3ee8:	00800304 	movi	r2,12
    3eec:	0009883a 	mov	r4,zero
    3ef0:	88800015 	stw	r2,0(r17)
    3ef4:	003fee06 	br	3eb0 <__sfp+0xa8>

00003ef8 <_malloc_trim_r>:
    3ef8:	defffb04 	addi	sp,sp,-20
    3efc:	dcc00315 	stw	r19,12(sp)
    3f00:	04c00034 	movhi	r19,0
    3f04:	9cdcc904 	addi	r19,r19,29476
    3f08:	dc800215 	stw	r18,8(sp)
    3f0c:	dc400115 	stw	r17,4(sp)
    3f10:	dc000015 	stw	r16,0(sp)
    3f14:	2823883a 	mov	r17,r5
    3f18:	2025883a 	mov	r18,r4
    3f1c:	dfc00415 	stw	ra,16(sp)
    3f20:	00055700 	call	5570 <__malloc_lock>
    3f24:	98800217 	ldw	r2,8(r19)
    3f28:	9009883a 	mov	r4,r18
    3f2c:	000b883a 	mov	r5,zero
    3f30:	10c00117 	ldw	r3,4(r2)
    3f34:	00bfff04 	movi	r2,-4
    3f38:	18a0703a 	and	r16,r3,r2
    3f3c:	8463c83a 	sub	r17,r16,r17
    3f40:	8c43fbc4 	addi	r17,r17,4079
    3f44:	8822d33a 	srli	r17,r17,12
    3f48:	0083ffc4 	movi	r2,4095
    3f4c:	8c7fffc4 	addi	r17,r17,-1
    3f50:	8822933a 	slli	r17,r17,12
    3f54:	1440060e 	bge	r2,r17,3f70 <_malloc_trim_r+0x78>
    3f58:	0004e240 	call	4e24 <_sbrk_r>
    3f5c:	98c00217 	ldw	r3,8(r19)
    3f60:	9009883a 	mov	r4,r18
    3f64:	044bc83a 	sub	r5,zero,r17
    3f68:	80c7883a 	add	r3,r16,r3
    3f6c:	10c00926 	beq	r2,r3,3f94 <_malloc_trim_r+0x9c>
    3f70:	00055740 	call	5574 <__malloc_unlock>
    3f74:	0005883a 	mov	r2,zero
    3f78:	dfc00417 	ldw	ra,16(sp)
    3f7c:	dcc00317 	ldw	r19,12(sp)
    3f80:	dc800217 	ldw	r18,8(sp)
    3f84:	dc400117 	ldw	r17,4(sp)
    3f88:	dc000017 	ldw	r16,0(sp)
    3f8c:	dec00504 	addi	sp,sp,20
    3f90:	f800283a 	ret
    3f94:	9009883a 	mov	r4,r18
    3f98:	0004e240 	call	4e24 <_sbrk_r>
    3f9c:	844dc83a 	sub	r6,r16,r17
    3fa0:	00ffffc4 	movi	r3,-1
    3fa4:	9009883a 	mov	r4,r18
    3fa8:	000b883a 	mov	r5,zero
    3fac:	01c00074 	movhi	r7,1
    3fb0:	39e51a04 	addi	r7,r7,-27544
    3fb4:	31800054 	ori	r6,r6,1
    3fb8:	10c00926 	beq	r2,r3,3fe0 <_malloc_trim_r+0xe8>
    3fbc:	38800017 	ldw	r2,0(r7)
    3fc0:	98c00217 	ldw	r3,8(r19)
    3fc4:	9009883a 	mov	r4,r18
    3fc8:	1445c83a 	sub	r2,r2,r17
    3fcc:	38800015 	stw	r2,0(r7)
    3fd0:	19800115 	stw	r6,4(r3)
    3fd4:	00055740 	call	5574 <__malloc_unlock>
    3fd8:	00800044 	movi	r2,1
    3fdc:	003fe606 	br	3f78 <_malloc_trim_r+0x80>
    3fe0:	0004e240 	call	4e24 <_sbrk_r>
    3fe4:	99800217 	ldw	r6,8(r19)
    3fe8:	100f883a 	mov	r7,r2
    3fec:	9009883a 	mov	r4,r18
    3ff0:	1187c83a 	sub	r3,r2,r6
    3ff4:	008003c4 	movi	r2,15
    3ff8:	19400054 	ori	r5,r3,1
    3ffc:	10ffdc0e 	bge	r2,r3,3f70 <_malloc_trim_r+0x78>
    4000:	00800034 	movhi	r2,0
    4004:	109dd704 	addi	r2,r2,30556
    4008:	10c00017 	ldw	r3,0(r2)
    400c:	00800074 	movhi	r2,1
    4010:	10a51a04 	addi	r2,r2,-27544
    4014:	31400115 	stw	r5,4(r6)
    4018:	38c7c83a 	sub	r3,r7,r3
    401c:	10c00015 	stw	r3,0(r2)
    4020:	003fd306 	br	3f70 <_malloc_trim_r+0x78>

00004024 <_free_r>:
    4024:	defffd04 	addi	sp,sp,-12
    4028:	dc400115 	stw	r17,4(sp)
    402c:	dc000015 	stw	r16,0(sp)
    4030:	dfc00215 	stw	ra,8(sp)
    4034:	2821883a 	mov	r16,r5
    4038:	2023883a 	mov	r17,r4
    403c:	28005a26 	beq	r5,zero,41a8 <_free_r+0x184>
    4040:	00055700 	call	5570 <__malloc_lock>
    4044:	823ffe04 	addi	r8,r16,-8
    4048:	41400117 	ldw	r5,4(r8)
    404c:	00bfff84 	movi	r2,-2
    4050:	02800034 	movhi	r10,0
    4054:	529cc904 	addi	r10,r10,29476
    4058:	288e703a 	and	r7,r5,r2
    405c:	41cd883a 	add	r6,r8,r7
    4060:	30c00117 	ldw	r3,4(r6)
    4064:	51000217 	ldw	r4,8(r10)
    4068:	00bfff04 	movi	r2,-4
    406c:	1892703a 	and	r9,r3,r2
    4070:	5017883a 	mov	r11,r10
    4074:	31006726 	beq	r6,r4,4214 <_free_r+0x1f0>
    4078:	2880004c 	andi	r2,r5,1
    407c:	1005003a 	cmpeq	r2,r2,zero
    4080:	32400115 	stw	r9,4(r6)
    4084:	10001a1e 	bne	r2,zero,40f0 <_free_r+0xcc>
    4088:	000b883a 	mov	r5,zero
    408c:	3247883a 	add	r3,r6,r9
    4090:	18800117 	ldw	r2,4(r3)
    4094:	1080004c 	andi	r2,r2,1
    4098:	1000231e 	bne	r2,zero,4128 <_free_r+0x104>
    409c:	280ac03a 	cmpne	r5,r5,zero
    40a0:	3a4f883a 	add	r7,r7,r9
    40a4:	2800451e 	bne	r5,zero,41bc <_free_r+0x198>
    40a8:	31000217 	ldw	r4,8(r6)
    40ac:	00800034 	movhi	r2,0
    40b0:	109ccb04 	addi	r2,r2,29484
    40b4:	20807b26 	beq	r4,r2,42a4 <_free_r+0x280>
    40b8:	30800317 	ldw	r2,12(r6)
    40bc:	3a07883a 	add	r3,r7,r8
    40c0:	19c00015 	stw	r7,0(r3)
    40c4:	11000215 	stw	r4,8(r2)
    40c8:	20800315 	stw	r2,12(r4)
    40cc:	38800054 	ori	r2,r7,1
    40d0:	40800115 	stw	r2,4(r8)
    40d4:	28001a26 	beq	r5,zero,4140 <_free_r+0x11c>
    40d8:	8809883a 	mov	r4,r17
    40dc:	dfc00217 	ldw	ra,8(sp)
    40e0:	dc400117 	ldw	r17,4(sp)
    40e4:	dc000017 	ldw	r16,0(sp)
    40e8:	dec00304 	addi	sp,sp,12
    40ec:	00055741 	jmpi	5574 <__malloc_unlock>
    40f0:	80bffe17 	ldw	r2,-8(r16)
    40f4:	50c00204 	addi	r3,r10,8
    40f8:	4091c83a 	sub	r8,r8,r2
    40fc:	41000217 	ldw	r4,8(r8)
    4100:	388f883a 	add	r7,r7,r2
    4104:	20c06126 	beq	r4,r3,428c <_free_r+0x268>
    4108:	40800317 	ldw	r2,12(r8)
    410c:	3247883a 	add	r3,r6,r9
    4110:	000b883a 	mov	r5,zero
    4114:	11000215 	stw	r4,8(r2)
    4118:	20800315 	stw	r2,12(r4)
    411c:	18800117 	ldw	r2,4(r3)
    4120:	1080004c 	andi	r2,r2,1
    4124:	103fdd26 	beq	r2,zero,409c <_free_r+0x78>
    4128:	38800054 	ori	r2,r7,1
    412c:	3a07883a 	add	r3,r7,r8
    4130:	280ac03a 	cmpne	r5,r5,zero
    4134:	40800115 	stw	r2,4(r8)
    4138:	19c00015 	stw	r7,0(r3)
    413c:	283fe61e 	bne	r5,zero,40d8 <_free_r+0xb4>
    4140:	00807fc4 	movi	r2,511
    4144:	11c01f2e 	bgeu	r2,r7,41c4 <_free_r+0x1a0>
    4148:	3806d27a 	srli	r3,r7,9
    414c:	1800481e 	bne	r3,zero,4270 <_free_r+0x24c>
    4150:	3804d0fa 	srli	r2,r7,3
    4154:	100690fa 	slli	r3,r2,3
    4158:	1acd883a 	add	r6,r3,r11
    415c:	31400217 	ldw	r5,8(r6)
    4160:	31405926 	beq	r6,r5,42c8 <_free_r+0x2a4>
    4164:	28800117 	ldw	r2,4(r5)
    4168:	00ffff04 	movi	r3,-4
    416c:	10c4703a 	and	r2,r2,r3
    4170:	3880022e 	bgeu	r7,r2,417c <_free_r+0x158>
    4174:	29400217 	ldw	r5,8(r5)
    4178:	317ffa1e 	bne	r6,r5,4164 <_free_r+0x140>
    417c:	29800317 	ldw	r6,12(r5)
    4180:	41800315 	stw	r6,12(r8)
    4184:	41400215 	stw	r5,8(r8)
    4188:	8809883a 	mov	r4,r17
    418c:	2a000315 	stw	r8,12(r5)
    4190:	32000215 	stw	r8,8(r6)
    4194:	dfc00217 	ldw	ra,8(sp)
    4198:	dc400117 	ldw	r17,4(sp)
    419c:	dc000017 	ldw	r16,0(sp)
    41a0:	dec00304 	addi	sp,sp,12
    41a4:	00055741 	jmpi	5574 <__malloc_unlock>
    41a8:	dfc00217 	ldw	ra,8(sp)
    41ac:	dc400117 	ldw	r17,4(sp)
    41b0:	dc000017 	ldw	r16,0(sp)
    41b4:	dec00304 	addi	sp,sp,12
    41b8:	f800283a 	ret
    41bc:	31000217 	ldw	r4,8(r6)
    41c0:	003fbd06 	br	40b8 <_free_r+0x94>
    41c4:	3806d0fa 	srli	r3,r7,3
    41c8:	00800044 	movi	r2,1
    41cc:	51400117 	ldw	r5,4(r10)
    41d0:	180890fa 	slli	r4,r3,3
    41d4:	1807d0ba 	srai	r3,r3,2
    41d8:	22c9883a 	add	r4,r4,r11
    41dc:	21800217 	ldw	r6,8(r4)
    41e0:	10c4983a 	sll	r2,r2,r3
    41e4:	41000315 	stw	r4,12(r8)
    41e8:	41800215 	stw	r6,8(r8)
    41ec:	288ab03a 	or	r5,r5,r2
    41f0:	22000215 	stw	r8,8(r4)
    41f4:	8809883a 	mov	r4,r17
    41f8:	51400115 	stw	r5,4(r10)
    41fc:	32000315 	stw	r8,12(r6)
    4200:	dfc00217 	ldw	ra,8(sp)
    4204:	dc400117 	ldw	r17,4(sp)
    4208:	dc000017 	ldw	r16,0(sp)
    420c:	dec00304 	addi	sp,sp,12
    4210:	00055741 	jmpi	5574 <__malloc_unlock>
    4214:	2880004c 	andi	r2,r5,1
    4218:	3a4d883a 	add	r6,r7,r9
    421c:	1000071e 	bne	r2,zero,423c <_free_r+0x218>
    4220:	80bffe17 	ldw	r2,-8(r16)
    4224:	4091c83a 	sub	r8,r8,r2
    4228:	41000317 	ldw	r4,12(r8)
    422c:	40c00217 	ldw	r3,8(r8)
    4230:	308d883a 	add	r6,r6,r2
    4234:	20c00215 	stw	r3,8(r4)
    4238:	19000315 	stw	r4,12(r3)
    423c:	00800034 	movhi	r2,0
    4240:	109dd604 	addi	r2,r2,30552
    4244:	11000017 	ldw	r4,0(r2)
    4248:	30c00054 	ori	r3,r6,1
    424c:	52000215 	stw	r8,8(r10)
    4250:	40c00115 	stw	r3,4(r8)
    4254:	313fa036 	bltu	r6,r4,40d8 <_free_r+0xb4>
    4258:	00800074 	movhi	r2,1
    425c:	10a51704 	addi	r2,r2,-27556
    4260:	11400017 	ldw	r5,0(r2)
    4264:	8809883a 	mov	r4,r17
    4268:	0003ef80 	call	3ef8 <_malloc_trim_r>
    426c:	003f9a06 	br	40d8 <_free_r+0xb4>
    4270:	00800104 	movi	r2,4
    4274:	10c0072e 	bgeu	r2,r3,4294 <_free_r+0x270>
    4278:	00800504 	movi	r2,20
    427c:	10c01936 	bltu	r2,r3,42e4 <_free_r+0x2c0>
    4280:	188016c4 	addi	r2,r3,91
    4284:	100690fa 	slli	r3,r2,3
    4288:	003fb306 	br	4158 <_free_r+0x134>
    428c:	01400044 	movi	r5,1
    4290:	003f7e06 	br	408c <_free_r+0x68>
    4294:	3804d1ba 	srli	r2,r7,6
    4298:	10800e04 	addi	r2,r2,56
    429c:	100690fa 	slli	r3,r2,3
    42a0:	003fad06 	br	4158 <_free_r+0x134>
    42a4:	22000315 	stw	r8,12(r4)
    42a8:	22000215 	stw	r8,8(r4)
    42ac:	3a05883a 	add	r2,r7,r8
    42b0:	38c00054 	ori	r3,r7,1
    42b4:	11c00015 	stw	r7,0(r2)
    42b8:	41000215 	stw	r4,8(r8)
    42bc:	40c00115 	stw	r3,4(r8)
    42c0:	41000315 	stw	r4,12(r8)
    42c4:	003f8406 	br	40d8 <_free_r+0xb4>
    42c8:	1005d0ba 	srai	r2,r2,2
    42cc:	00c00044 	movi	r3,1
    42d0:	51000117 	ldw	r4,4(r10)
    42d4:	1886983a 	sll	r3,r3,r2
    42d8:	20c8b03a 	or	r4,r4,r3
    42dc:	51000115 	stw	r4,4(r10)
    42e0:	003fa706 	br	4180 <_free_r+0x15c>
    42e4:	00801504 	movi	r2,84
    42e8:	10c00436 	bltu	r2,r3,42fc <_free_r+0x2d8>
    42ec:	3804d33a 	srli	r2,r7,12
    42f0:	10801b84 	addi	r2,r2,110
    42f4:	100690fa 	slli	r3,r2,3
    42f8:	003f9706 	br	4158 <_free_r+0x134>
    42fc:	00805504 	movi	r2,340
    4300:	10c00436 	bltu	r2,r3,4314 <_free_r+0x2f0>
    4304:	3804d3fa 	srli	r2,r7,15
    4308:	10801dc4 	addi	r2,r2,119
    430c:	100690fa 	slli	r3,r2,3
    4310:	003f9106 	br	4158 <_free_r+0x134>
    4314:	00815504 	movi	r2,1364
    4318:	10c0032e 	bgeu	r2,r3,4328 <_free_r+0x304>
    431c:	00801f84 	movi	r2,126
    4320:	00c0fc04 	movi	r3,1008
    4324:	003f8c06 	br	4158 <_free_r+0x134>
    4328:	3804d4ba 	srli	r2,r7,18
    432c:	10801f04 	addi	r2,r2,124
    4330:	100690fa 	slli	r3,r2,3
    4334:	003f8806 	br	4158 <_free_r+0x134>

00004338 <_fwalk_reent>:
    4338:	defff704 	addi	sp,sp,-36
    433c:	dcc00315 	stw	r19,12(sp)
    4340:	24c0b804 	addi	r19,r4,736
    4344:	dd800615 	stw	r22,24(sp)
    4348:	dd400515 	stw	r21,20(sp)
    434c:	dfc00815 	stw	ra,32(sp)
    4350:	ddc00715 	stw	r23,28(sp)
    4354:	dd000415 	stw	r20,16(sp)
    4358:	dc800215 	stw	r18,8(sp)
    435c:	dc400115 	stw	r17,4(sp)
    4360:	dc000015 	stw	r16,0(sp)
    4364:	202b883a 	mov	r21,r4
    4368:	282d883a 	mov	r22,r5
    436c:	0003c900 	call	3c90 <__sfp_lock_acquire>
    4370:	98002126 	beq	r19,zero,43f8 <_fwalk_reent+0xc0>
    4374:	002f883a 	mov	r23,zero
    4378:	9c800117 	ldw	r18,4(r19)
    437c:	9c000217 	ldw	r16,8(r19)
    4380:	90bfffc4 	addi	r2,r18,-1
    4384:	10000d16 	blt	r2,zero,43bc <_fwalk_reent+0x84>
    4388:	0023883a 	mov	r17,zero
    438c:	053fffc4 	movi	r20,-1
    4390:	8080030f 	ldh	r2,12(r16)
    4394:	8c400044 	addi	r17,r17,1
    4398:	10000626 	beq	r2,zero,43b4 <_fwalk_reent+0x7c>
    439c:	8080038f 	ldh	r2,14(r16)
    43a0:	800b883a 	mov	r5,r16
    43a4:	a809883a 	mov	r4,r21
    43a8:	15000226 	beq	r2,r20,43b4 <_fwalk_reent+0x7c>
    43ac:	b03ee83a 	callr	r22
    43b0:	b8aeb03a 	or	r23,r23,r2
    43b4:	84001704 	addi	r16,r16,92
    43b8:	947ff51e 	bne	r18,r17,4390 <_fwalk_reent+0x58>
    43bc:	9cc00017 	ldw	r19,0(r19)
    43c0:	983fed1e 	bne	r19,zero,4378 <_fwalk_reent+0x40>
    43c4:	0003c940 	call	3c94 <__sfp_lock_release>
    43c8:	b805883a 	mov	r2,r23
    43cc:	dfc00817 	ldw	ra,32(sp)
    43d0:	ddc00717 	ldw	r23,28(sp)
    43d4:	dd800617 	ldw	r22,24(sp)
    43d8:	dd400517 	ldw	r21,20(sp)
    43dc:	dd000417 	ldw	r20,16(sp)
    43e0:	dcc00317 	ldw	r19,12(sp)
    43e4:	dc800217 	ldw	r18,8(sp)
    43e8:	dc400117 	ldw	r17,4(sp)
    43ec:	dc000017 	ldw	r16,0(sp)
    43f0:	dec00904 	addi	sp,sp,36
    43f4:	f800283a 	ret
    43f8:	002f883a 	mov	r23,zero
    43fc:	003ff106 	br	43c4 <_fwalk_reent+0x8c>

00004400 <_fwalk>:
    4400:	defff804 	addi	sp,sp,-32
    4404:	dcc00315 	stw	r19,12(sp)
    4408:	24c0b804 	addi	r19,r4,736
    440c:	dd400515 	stw	r21,20(sp)
    4410:	dfc00715 	stw	ra,28(sp)
    4414:	dd800615 	stw	r22,24(sp)
    4418:	dd000415 	stw	r20,16(sp)
    441c:	dc800215 	stw	r18,8(sp)
    4420:	dc400115 	stw	r17,4(sp)
    4424:	dc000015 	stw	r16,0(sp)
    4428:	282b883a 	mov	r21,r5
    442c:	0003c900 	call	3c90 <__sfp_lock_acquire>
    4430:	98001f26 	beq	r19,zero,44b0 <_fwalk+0xb0>
    4434:	002d883a 	mov	r22,zero
    4438:	9c800117 	ldw	r18,4(r19)
    443c:	9c000217 	ldw	r16,8(r19)
    4440:	90bfffc4 	addi	r2,r18,-1
    4444:	10000c16 	blt	r2,zero,4478 <_fwalk+0x78>
    4448:	0023883a 	mov	r17,zero
    444c:	053fffc4 	movi	r20,-1
    4450:	8080030f 	ldh	r2,12(r16)
    4454:	8c400044 	addi	r17,r17,1
    4458:	10000526 	beq	r2,zero,4470 <_fwalk+0x70>
    445c:	8080038f 	ldh	r2,14(r16)
    4460:	8009883a 	mov	r4,r16
    4464:	15000226 	beq	r2,r20,4470 <_fwalk+0x70>
    4468:	a83ee83a 	callr	r21
    446c:	b0acb03a 	or	r22,r22,r2
    4470:	84001704 	addi	r16,r16,92
    4474:	947ff61e 	bne	r18,r17,4450 <_fwalk+0x50>
    4478:	9cc00017 	ldw	r19,0(r19)
    447c:	983fee1e 	bne	r19,zero,4438 <_fwalk+0x38>
    4480:	0003c940 	call	3c94 <__sfp_lock_release>
    4484:	b005883a 	mov	r2,r22
    4488:	dfc00717 	ldw	ra,28(sp)
    448c:	dd800617 	ldw	r22,24(sp)
    4490:	dd400517 	ldw	r21,20(sp)
    4494:	dd000417 	ldw	r20,16(sp)
    4498:	dcc00317 	ldw	r19,12(sp)
    449c:	dc800217 	ldw	r18,8(sp)
    44a0:	dc400117 	ldw	r17,4(sp)
    44a4:	dc000017 	ldw	r16,0(sp)
    44a8:	dec00804 	addi	sp,sp,32
    44ac:	f800283a 	ret
    44b0:	002d883a 	mov	r22,zero
    44b4:	003ff206 	br	4480 <_fwalk+0x80>

000044b8 <__smakebuf_r>:
    44b8:	2880030b 	ldhu	r2,12(r5)
    44bc:	deffed04 	addi	sp,sp,-76
    44c0:	dc401015 	stw	r17,64(sp)
    44c4:	1080008c 	andi	r2,r2,2
    44c8:	dc000f15 	stw	r16,60(sp)
    44cc:	dfc01215 	stw	ra,72(sp)
    44d0:	dc801115 	stw	r18,68(sp)
    44d4:	2821883a 	mov	r16,r5
    44d8:	2023883a 	mov	r17,r4
    44dc:	10000b26 	beq	r2,zero,450c <__smakebuf_r+0x54>
    44e0:	28c010c4 	addi	r3,r5,67
    44e4:	00800044 	movi	r2,1
    44e8:	28800515 	stw	r2,20(r5)
    44ec:	28c00415 	stw	r3,16(r5)
    44f0:	28c00015 	stw	r3,0(r5)
    44f4:	dfc01217 	ldw	ra,72(sp)
    44f8:	dc801117 	ldw	r18,68(sp)
    44fc:	dc401017 	ldw	r17,64(sp)
    4500:	dc000f17 	ldw	r16,60(sp)
    4504:	dec01304 	addi	sp,sp,76
    4508:	f800283a 	ret
    450c:	2940038f 	ldh	r5,14(r5)
    4510:	28002116 	blt	r5,zero,4598 <__smakebuf_r+0xe0>
    4514:	d80d883a 	mov	r6,sp
    4518:	00051ec0 	call	51ec <_fstat_r>
    451c:	10001e16 	blt	r2,zero,4598 <__smakebuf_r+0xe0>
    4520:	d8800117 	ldw	r2,4(sp)
    4524:	00e00014 	movui	r3,32768
    4528:	113c000c 	andi	r4,r2,61440
    452c:	20c03126 	beq	r4,r3,45f4 <__smakebuf_r+0x13c>
    4530:	8080030b 	ldhu	r2,12(r16)
    4534:	00c80004 	movi	r3,8192
    4538:	10820014 	ori	r2,r2,2048
    453c:	8080030d 	sth	r2,12(r16)
    4540:	20c01e26 	beq	r4,r3,45bc <__smakebuf_r+0x104>
    4544:	04810004 	movi	r18,1024
    4548:	8809883a 	mov	r4,r17
    454c:	900b883a 	mov	r5,r18
    4550:	000464c0 	call	464c <_malloc_r>
    4554:	1009883a 	mov	r4,r2
    4558:	10003126 	beq	r2,zero,4620 <__smakebuf_r+0x168>
    455c:	80c0030b 	ldhu	r3,12(r16)
    4560:	00800034 	movhi	r2,0
    4564:	108f6104 	addi	r2,r2,15748
    4568:	88800f15 	stw	r2,60(r17)
    456c:	18c02014 	ori	r3,r3,128
    4570:	84800515 	stw	r18,20(r16)
    4574:	80c0030d 	sth	r3,12(r16)
    4578:	81000415 	stw	r4,16(r16)
    457c:	81000015 	stw	r4,0(r16)
    4580:	dfc01217 	ldw	ra,72(sp)
    4584:	dc801117 	ldw	r18,68(sp)
    4588:	dc401017 	ldw	r17,64(sp)
    458c:	dc000f17 	ldw	r16,60(sp)
    4590:	dec01304 	addi	sp,sp,76
    4594:	f800283a 	ret
    4598:	80c0030b 	ldhu	r3,12(r16)
    459c:	1880200c 	andi	r2,r3,128
    45a0:	10000426 	beq	r2,zero,45b4 <__smakebuf_r+0xfc>
    45a4:	04801004 	movi	r18,64
    45a8:	18820014 	ori	r2,r3,2048
    45ac:	8080030d 	sth	r2,12(r16)
    45b0:	003fe506 	br	4548 <__smakebuf_r+0x90>
    45b4:	04810004 	movi	r18,1024
    45b8:	003ffb06 	br	45a8 <__smakebuf_r+0xf0>
    45bc:	8140038f 	ldh	r5,14(r16)
    45c0:	8809883a 	mov	r4,r17
    45c4:	00052600 	call	5260 <_isatty_r>
    45c8:	103fde26 	beq	r2,zero,4544 <__smakebuf_r+0x8c>
    45cc:	8080030b 	ldhu	r2,12(r16)
    45d0:	80c010c4 	addi	r3,r16,67
    45d4:	04810004 	movi	r18,1024
    45d8:	10800054 	ori	r2,r2,1
    45dc:	8080030d 	sth	r2,12(r16)
    45e0:	00800044 	movi	r2,1
    45e4:	80c00415 	stw	r3,16(r16)
    45e8:	80800515 	stw	r2,20(r16)
    45ec:	80c00015 	stw	r3,0(r16)
    45f0:	003fd506 	br	4548 <__smakebuf_r+0x90>
    45f4:	80c00a17 	ldw	r3,40(r16)
    45f8:	00800034 	movhi	r2,0
    45fc:	1093a704 	addi	r2,r2,20124
    4600:	18bfcb1e 	bne	r3,r2,4530 <__smakebuf_r+0x78>
    4604:	8080030b 	ldhu	r2,12(r16)
    4608:	00c10004 	movi	r3,1024
    460c:	1825883a 	mov	r18,r3
    4610:	10c4b03a 	or	r2,r2,r3
    4614:	8080030d 	sth	r2,12(r16)
    4618:	80c01315 	stw	r3,76(r16)
    461c:	003fca06 	br	4548 <__smakebuf_r+0x90>
    4620:	8100030b 	ldhu	r4,12(r16)
    4624:	2080800c 	andi	r2,r4,512
    4628:	103fb21e 	bne	r2,zero,44f4 <__smakebuf_r+0x3c>
    462c:	80c010c4 	addi	r3,r16,67
    4630:	21000094 	ori	r4,r4,2
    4634:	00800044 	movi	r2,1
    4638:	80800515 	stw	r2,20(r16)
    463c:	8100030d 	sth	r4,12(r16)
    4640:	80c00415 	stw	r3,16(r16)
    4644:	80c00015 	stw	r3,0(r16)
    4648:	003faa06 	br	44f4 <__smakebuf_r+0x3c>

0000464c <_malloc_r>:
    464c:	defff604 	addi	sp,sp,-40
    4650:	28c002c4 	addi	r3,r5,11
    4654:	00800584 	movi	r2,22
    4658:	dc800215 	stw	r18,8(sp)
    465c:	dfc00915 	stw	ra,36(sp)
    4660:	df000815 	stw	fp,32(sp)
    4664:	ddc00715 	stw	r23,28(sp)
    4668:	dd800615 	stw	r22,24(sp)
    466c:	dd400515 	stw	r21,20(sp)
    4670:	dd000415 	stw	r20,16(sp)
    4674:	dcc00315 	stw	r19,12(sp)
    4678:	dc400115 	stw	r17,4(sp)
    467c:	dc000015 	stw	r16,0(sp)
    4680:	2025883a 	mov	r18,r4
    4684:	10c01236 	bltu	r2,r3,46d0 <_malloc_r+0x84>
    4688:	04400404 	movi	r17,16
    468c:	8940142e 	bgeu	r17,r5,46e0 <_malloc_r+0x94>
    4690:	00800304 	movi	r2,12
    4694:	0007883a 	mov	r3,zero
    4698:	90800015 	stw	r2,0(r18)
    469c:	1805883a 	mov	r2,r3
    46a0:	dfc00917 	ldw	ra,36(sp)
    46a4:	df000817 	ldw	fp,32(sp)
    46a8:	ddc00717 	ldw	r23,28(sp)
    46ac:	dd800617 	ldw	r22,24(sp)
    46b0:	dd400517 	ldw	r21,20(sp)
    46b4:	dd000417 	ldw	r20,16(sp)
    46b8:	dcc00317 	ldw	r19,12(sp)
    46bc:	dc800217 	ldw	r18,8(sp)
    46c0:	dc400117 	ldw	r17,4(sp)
    46c4:	dc000017 	ldw	r16,0(sp)
    46c8:	dec00a04 	addi	sp,sp,40
    46cc:	f800283a 	ret
    46d0:	00bffe04 	movi	r2,-8
    46d4:	18a2703a 	and	r17,r3,r2
    46d8:	883fed16 	blt	r17,zero,4690 <_malloc_r+0x44>
    46dc:	897fec36 	bltu	r17,r5,4690 <_malloc_r+0x44>
    46e0:	9009883a 	mov	r4,r18
    46e4:	00055700 	call	5570 <__malloc_lock>
    46e8:	00807dc4 	movi	r2,503
    46ec:	14402b2e 	bgeu	r2,r17,479c <_malloc_r+0x150>
    46f0:	8806d27a 	srli	r3,r17,9
    46f4:	18003f1e 	bne	r3,zero,47f4 <_malloc_r+0x1a8>
    46f8:	880cd0fa 	srli	r6,r17,3
    46fc:	300490fa 	slli	r2,r6,3
    4700:	02c00034 	movhi	r11,0
    4704:	5adcc904 	addi	r11,r11,29476
    4708:	12cb883a 	add	r5,r2,r11
    470c:	2c000317 	ldw	r16,12(r5)
    4710:	580f883a 	mov	r7,r11
    4714:	2c00041e 	bne	r5,r16,4728 <_malloc_r+0xdc>
    4718:	00000a06 	br	4744 <_malloc_r+0xf8>
    471c:	1800860e 	bge	r3,zero,4938 <_malloc_r+0x2ec>
    4720:	84000317 	ldw	r16,12(r16)
    4724:	2c000726 	beq	r5,r16,4744 <_malloc_r+0xf8>
    4728:	80800117 	ldw	r2,4(r16)
    472c:	00ffff04 	movi	r3,-4
    4730:	10c8703a 	and	r4,r2,r3
    4734:	2447c83a 	sub	r3,r4,r17
    4738:	008003c4 	movi	r2,15
    473c:	10fff70e 	bge	r2,r3,471c <_malloc_r+0xd0>
    4740:	31bfffc4 	addi	r6,r6,-1
    4744:	32400044 	addi	r9,r6,1
    4748:	02800034 	movhi	r10,0
    474c:	529ccb04 	addi	r10,r10,29484
    4750:	54000217 	ldw	r16,8(r10)
    4754:	8280a026 	beq	r16,r10,49d8 <_malloc_r+0x38c>
    4758:	80800117 	ldw	r2,4(r16)
    475c:	00ffff04 	movi	r3,-4
    4760:	10ca703a 	and	r5,r2,r3
    4764:	2c4dc83a 	sub	r6,r5,r17
    4768:	008003c4 	movi	r2,15
    476c:	11808316 	blt	r2,r6,497c <_malloc_r+0x330>
    4770:	52800315 	stw	r10,12(r10)
    4774:	52800215 	stw	r10,8(r10)
    4778:	30002916 	blt	r6,zero,4820 <_malloc_r+0x1d4>
    477c:	8147883a 	add	r3,r16,r5
    4780:	18800117 	ldw	r2,4(r3)
    4784:	9009883a 	mov	r4,r18
    4788:	10800054 	ori	r2,r2,1
    478c:	18800115 	stw	r2,4(r3)
    4790:	00055740 	call	5574 <__malloc_unlock>
    4794:	80c00204 	addi	r3,r16,8
    4798:	003fc006 	br	469c <_malloc_r+0x50>
    479c:	02c00034 	movhi	r11,0
    47a0:	5adcc904 	addi	r11,r11,29476
    47a4:	8ac5883a 	add	r2,r17,r11
    47a8:	14000317 	ldw	r16,12(r2)
    47ac:	580f883a 	mov	r7,r11
    47b0:	8806d0fa 	srli	r3,r17,3
    47b4:	14006c26 	beq	r2,r16,4968 <_malloc_r+0x31c>
    47b8:	80c00117 	ldw	r3,4(r16)
    47bc:	00bfff04 	movi	r2,-4
    47c0:	81800317 	ldw	r6,12(r16)
    47c4:	1886703a 	and	r3,r3,r2
    47c8:	80c7883a 	add	r3,r16,r3
    47cc:	18800117 	ldw	r2,4(r3)
    47d0:	81400217 	ldw	r5,8(r16)
    47d4:	9009883a 	mov	r4,r18
    47d8:	10800054 	ori	r2,r2,1
    47dc:	18800115 	stw	r2,4(r3)
    47e0:	31400215 	stw	r5,8(r6)
    47e4:	29800315 	stw	r6,12(r5)
    47e8:	00055740 	call	5574 <__malloc_unlock>
    47ec:	80c00204 	addi	r3,r16,8
    47f0:	003faa06 	br	469c <_malloc_r+0x50>
    47f4:	00800104 	movi	r2,4
    47f8:	10c0052e 	bgeu	r2,r3,4810 <_malloc_r+0x1c4>
    47fc:	00800504 	movi	r2,20
    4800:	10c07836 	bltu	r2,r3,49e4 <_malloc_r+0x398>
    4804:	198016c4 	addi	r6,r3,91
    4808:	300490fa 	slli	r2,r6,3
    480c:	003fbc06 	br	4700 <_malloc_r+0xb4>
    4810:	8804d1ba 	srli	r2,r17,6
    4814:	11800e04 	addi	r6,r2,56
    4818:	300490fa 	slli	r2,r6,3
    481c:	003fb806 	br	4700 <_malloc_r+0xb4>
    4820:	00807fc4 	movi	r2,511
    4824:	1140bb36 	bltu	r2,r5,4b14 <_malloc_r+0x4c8>
    4828:	2806d0fa 	srli	r3,r5,3
    482c:	573ffe04 	addi	fp,r10,-8
    4830:	00800044 	movi	r2,1
    4834:	180890fa 	slli	r4,r3,3
    4838:	1807d0ba 	srai	r3,r3,2
    483c:	e1c00117 	ldw	r7,4(fp)
    4840:	5909883a 	add	r4,r11,r4
    4844:	21400217 	ldw	r5,8(r4)
    4848:	10c4983a 	sll	r2,r2,r3
    484c:	81000315 	stw	r4,12(r16)
    4850:	81400215 	stw	r5,8(r16)
    4854:	388eb03a 	or	r7,r7,r2
    4858:	2c000315 	stw	r16,12(r5)
    485c:	24000215 	stw	r16,8(r4)
    4860:	e1c00115 	stw	r7,4(fp)
    4864:	4807883a 	mov	r3,r9
    4868:	4800cd16 	blt	r9,zero,4ba0 <_malloc_r+0x554>
    486c:	1807d0ba 	srai	r3,r3,2
    4870:	00800044 	movi	r2,1
    4874:	10c8983a 	sll	r4,r2,r3
    4878:	39004436 	bltu	r7,r4,498c <_malloc_r+0x340>
    487c:	21c4703a 	and	r2,r4,r7
    4880:	10000a1e 	bne	r2,zero,48ac <_malloc_r+0x260>
    4884:	2109883a 	add	r4,r4,r4
    4888:	00bfff04 	movi	r2,-4
    488c:	4884703a 	and	r2,r9,r2
    4890:	3906703a 	and	r3,r7,r4
    4894:	12400104 	addi	r9,r2,4
    4898:	1800041e 	bne	r3,zero,48ac <_malloc_r+0x260>
    489c:	2109883a 	add	r4,r4,r4
    48a0:	3904703a 	and	r2,r7,r4
    48a4:	4a400104 	addi	r9,r9,4
    48a8:	103ffc26 	beq	r2,zero,489c <_malloc_r+0x250>
    48ac:	480490fa 	slli	r2,r9,3
    48b0:	4819883a 	mov	r12,r9
    48b4:	023fff04 	movi	r8,-4
    48b8:	589b883a 	add	r13,r11,r2
    48bc:	6807883a 	mov	r3,r13
    48c0:	014003c4 	movi	r5,15
    48c4:	1c000317 	ldw	r16,12(r3)
    48c8:	1c00041e 	bne	r3,r16,48dc <_malloc_r+0x290>
    48cc:	0000a706 	br	4b6c <_malloc_r+0x520>
    48d0:	3000ab0e 	bge	r6,zero,4b80 <_malloc_r+0x534>
    48d4:	84000317 	ldw	r16,12(r16)
    48d8:	1c00a426 	beq	r3,r16,4b6c <_malloc_r+0x520>
    48dc:	80800117 	ldw	r2,4(r16)
    48e0:	1204703a 	and	r2,r2,r8
    48e4:	144dc83a 	sub	r6,r2,r17
    48e8:	29bff90e 	bge	r5,r6,48d0 <_malloc_r+0x284>
    48ec:	81000317 	ldw	r4,12(r16)
    48f0:	80c00217 	ldw	r3,8(r16)
    48f4:	89400054 	ori	r5,r17,1
    48f8:	8445883a 	add	r2,r16,r17
    48fc:	20c00215 	stw	r3,8(r4)
    4900:	19000315 	stw	r4,12(r3)
    4904:	81400115 	stw	r5,4(r16)
    4908:	1187883a 	add	r3,r2,r6
    490c:	31000054 	ori	r4,r6,1
    4910:	50800315 	stw	r2,12(r10)
    4914:	50800215 	stw	r2,8(r10)
    4918:	19800015 	stw	r6,0(r3)
    491c:	11000115 	stw	r4,4(r2)
    4920:	12800215 	stw	r10,8(r2)
    4924:	12800315 	stw	r10,12(r2)
    4928:	9009883a 	mov	r4,r18
    492c:	00055740 	call	5574 <__malloc_unlock>
    4930:	80c00204 	addi	r3,r16,8
    4934:	003f5906 	br	469c <_malloc_r+0x50>
    4938:	8109883a 	add	r4,r16,r4
    493c:	20800117 	ldw	r2,4(r4)
    4940:	80c00217 	ldw	r3,8(r16)
    4944:	81400317 	ldw	r5,12(r16)
    4948:	10800054 	ori	r2,r2,1
    494c:	20800115 	stw	r2,4(r4)
    4950:	28c00215 	stw	r3,8(r5)
    4954:	19400315 	stw	r5,12(r3)
    4958:	9009883a 	mov	r4,r18
    495c:	00055740 	call	5574 <__malloc_unlock>
    4960:	80c00204 	addi	r3,r16,8
    4964:	003f4d06 	br	469c <_malloc_r+0x50>
    4968:	80800204 	addi	r2,r16,8
    496c:	14000317 	ldw	r16,12(r2)
    4970:	143f911e 	bne	r2,r16,47b8 <_malloc_r+0x16c>
    4974:	1a400084 	addi	r9,r3,2
    4978:	003f7306 	br	4748 <_malloc_r+0xfc>
    497c:	88c00054 	ori	r3,r17,1
    4980:	8445883a 	add	r2,r16,r17
    4984:	80c00115 	stw	r3,4(r16)
    4988:	003fdf06 	br	4908 <_malloc_r+0x2bc>
    498c:	e4000217 	ldw	r16,8(fp)
    4990:	00bfff04 	movi	r2,-4
    4994:	80c00117 	ldw	r3,4(r16)
    4998:	802d883a 	mov	r22,r16
    499c:	18aa703a 	and	r21,r3,r2
    49a0:	ac401636 	bltu	r21,r17,49fc <_malloc_r+0x3b0>
    49a4:	ac49c83a 	sub	r4,r21,r17
    49a8:	008003c4 	movi	r2,15
    49ac:	1100130e 	bge	r2,r4,49fc <_malloc_r+0x3b0>
    49b0:	88800054 	ori	r2,r17,1
    49b4:	8447883a 	add	r3,r16,r17
    49b8:	80800115 	stw	r2,4(r16)
    49bc:	20800054 	ori	r2,r4,1
    49c0:	18800115 	stw	r2,4(r3)
    49c4:	e0c00215 	stw	r3,8(fp)
    49c8:	9009883a 	mov	r4,r18
    49cc:	00055740 	call	5574 <__malloc_unlock>
    49d0:	80c00204 	addi	r3,r16,8
    49d4:	003f3106 	br	469c <_malloc_r+0x50>
    49d8:	39c00117 	ldw	r7,4(r7)
    49dc:	573ffe04 	addi	fp,r10,-8
    49e0:	003fa006 	br	4864 <_malloc_r+0x218>
    49e4:	00801504 	movi	r2,84
    49e8:	10c06736 	bltu	r2,r3,4b88 <_malloc_r+0x53c>
    49ec:	8804d33a 	srli	r2,r17,12
    49f0:	11801b84 	addi	r6,r2,110
    49f4:	300490fa 	slli	r2,r6,3
    49f8:	003f4106 	br	4700 <_malloc_r+0xb4>
    49fc:	d0a74c17 	ldw	r2,-25296(gp)
    4a00:	d0e00c17 	ldw	r3,-32720(gp)
    4a04:	053fffc4 	movi	r20,-1
    4a08:	10800404 	addi	r2,r2,16
    4a0c:	88a7883a 	add	r19,r17,r2
    4a10:	1d000326 	beq	r3,r20,4a20 <_malloc_r+0x3d4>
    4a14:	98c3ffc4 	addi	r3,r19,4095
    4a18:	00bc0004 	movi	r2,-4096
    4a1c:	18a6703a 	and	r19,r3,r2
    4a20:	9009883a 	mov	r4,r18
    4a24:	980b883a 	mov	r5,r19
    4a28:	0004e240 	call	4e24 <_sbrk_r>
    4a2c:	1009883a 	mov	r4,r2
    4a30:	15000426 	beq	r2,r20,4a44 <_malloc_r+0x3f8>
    4a34:	854b883a 	add	r5,r16,r21
    4a38:	1029883a 	mov	r20,r2
    4a3c:	11405a2e 	bgeu	r2,r5,4ba8 <_malloc_r+0x55c>
    4a40:	87000c26 	beq	r16,fp,4a74 <_malloc_r+0x428>
    4a44:	e4000217 	ldw	r16,8(fp)
    4a48:	80c00117 	ldw	r3,4(r16)
    4a4c:	00bfff04 	movi	r2,-4
    4a50:	1884703a 	and	r2,r3,r2
    4a54:	14400336 	bltu	r2,r17,4a64 <_malloc_r+0x418>
    4a58:	1449c83a 	sub	r4,r2,r17
    4a5c:	008003c4 	movi	r2,15
    4a60:	113fd316 	blt	r2,r4,49b0 <_malloc_r+0x364>
    4a64:	9009883a 	mov	r4,r18
    4a68:	00055740 	call	5574 <__malloc_unlock>
    4a6c:	0007883a 	mov	r3,zero
    4a70:	003f0a06 	br	469c <_malloc_r+0x50>
    4a74:	05c00074 	movhi	r23,1
    4a78:	bde51a04 	addi	r23,r23,-27544
    4a7c:	b8800017 	ldw	r2,0(r23)
    4a80:	988d883a 	add	r6,r19,r2
    4a84:	b9800015 	stw	r6,0(r23)
    4a88:	d0e00c17 	ldw	r3,-32720(gp)
    4a8c:	00bfffc4 	movi	r2,-1
    4a90:	18808e26 	beq	r3,r2,4ccc <_malloc_r+0x680>
    4a94:	2145c83a 	sub	r2,r4,r5
    4a98:	3085883a 	add	r2,r6,r2
    4a9c:	b8800015 	stw	r2,0(r23)
    4aa0:	20c001cc 	andi	r3,r4,7
    4aa4:	18005f1e 	bne	r3,zero,4c24 <_malloc_r+0x5d8>
    4aa8:	000b883a 	mov	r5,zero
    4aac:	a4c5883a 	add	r2,r20,r19
    4ab0:	1083ffcc 	andi	r2,r2,4095
    4ab4:	00c40004 	movi	r3,4096
    4ab8:	1887c83a 	sub	r3,r3,r2
    4abc:	28e7883a 	add	r19,r5,r3
    4ac0:	9009883a 	mov	r4,r18
    4ac4:	980b883a 	mov	r5,r19
    4ac8:	0004e240 	call	4e24 <_sbrk_r>
    4acc:	1007883a 	mov	r3,r2
    4ad0:	00bfffc4 	movi	r2,-1
    4ad4:	18807a26 	beq	r3,r2,4cc0 <_malloc_r+0x674>
    4ad8:	1d05c83a 	sub	r2,r3,r20
    4adc:	9885883a 	add	r2,r19,r2
    4ae0:	10c00054 	ori	r3,r2,1
    4ae4:	b8800017 	ldw	r2,0(r23)
    4ae8:	a021883a 	mov	r16,r20
    4aec:	a0c00115 	stw	r3,4(r20)
    4af0:	9885883a 	add	r2,r19,r2
    4af4:	b8800015 	stw	r2,0(r23)
    4af8:	e5000215 	stw	r20,8(fp)
    4afc:	b7003626 	beq	r22,fp,4bd8 <_malloc_r+0x58c>
    4b00:	018003c4 	movi	r6,15
    4b04:	35404b36 	bltu	r6,r21,4c34 <_malloc_r+0x5e8>
    4b08:	00800044 	movi	r2,1
    4b0c:	a0800115 	stw	r2,4(r20)
    4b10:	003fcd06 	br	4a48 <_malloc_r+0x3fc>
    4b14:	2808d27a 	srli	r4,r5,9
    4b18:	2000371e 	bne	r4,zero,4bf8 <_malloc_r+0x5ac>
    4b1c:	2808d0fa 	srli	r4,r5,3
    4b20:	200690fa 	slli	r3,r4,3
    4b24:	1ad1883a 	add	r8,r3,r11
    4b28:	41800217 	ldw	r6,8(r8)
    4b2c:	41805b26 	beq	r8,r6,4c9c <_malloc_r+0x650>
    4b30:	30800117 	ldw	r2,4(r6)
    4b34:	00ffff04 	movi	r3,-4
    4b38:	10c4703a 	and	r2,r2,r3
    4b3c:	2880022e 	bgeu	r5,r2,4b48 <_malloc_r+0x4fc>
    4b40:	31800217 	ldw	r6,8(r6)
    4b44:	41bffa1e 	bne	r8,r6,4b30 <_malloc_r+0x4e4>
    4b48:	32000317 	ldw	r8,12(r6)
    4b4c:	39c00117 	ldw	r7,4(r7)
    4b50:	82000315 	stw	r8,12(r16)
    4b54:	81800215 	stw	r6,8(r16)
    4b58:	07000034 	movhi	fp,0
    4b5c:	e71cc904 	addi	fp,fp,29476
    4b60:	34000315 	stw	r16,12(r6)
    4b64:	44000215 	stw	r16,8(r8)
    4b68:	003f3e06 	br	4864 <_malloc_r+0x218>
    4b6c:	63000044 	addi	r12,r12,1
    4b70:	608000cc 	andi	r2,r12,3
    4b74:	10005d26 	beq	r2,zero,4cec <_malloc_r+0x6a0>
    4b78:	18c00204 	addi	r3,r3,8
    4b7c:	003f5106 	br	48c4 <_malloc_r+0x278>
    4b80:	8089883a 	add	r4,r16,r2
    4b84:	003f6d06 	br	493c <_malloc_r+0x2f0>
    4b88:	00805504 	movi	r2,340
    4b8c:	10c02036 	bltu	r2,r3,4c10 <_malloc_r+0x5c4>
    4b90:	8804d3fa 	srli	r2,r17,15
    4b94:	11801dc4 	addi	r6,r2,119
    4b98:	300490fa 	slli	r2,r6,3
    4b9c:	003ed806 	br	4700 <_malloc_r+0xb4>
    4ba0:	48c000c4 	addi	r3,r9,3
    4ba4:	003f3106 	br	486c <_malloc_r+0x220>
    4ba8:	05c00074 	movhi	r23,1
    4bac:	bde51a04 	addi	r23,r23,-27544
    4bb0:	b8800017 	ldw	r2,0(r23)
    4bb4:	988d883a 	add	r6,r19,r2
    4bb8:	b9800015 	stw	r6,0(r23)
    4bbc:	293fb21e 	bne	r5,r4,4a88 <_malloc_r+0x43c>
    4bc0:	2083ffcc 	andi	r2,r4,4095
    4bc4:	103fb01e 	bne	r2,zero,4a88 <_malloc_r+0x43c>
    4bc8:	e4000217 	ldw	r16,8(fp)
    4bcc:	9d45883a 	add	r2,r19,r21
    4bd0:	10800054 	ori	r2,r2,1
    4bd4:	80800115 	stw	r2,4(r16)
    4bd8:	b8c00017 	ldw	r3,0(r23)
    4bdc:	d0a74d17 	ldw	r2,-25292(gp)
    4be0:	10c0012e 	bgeu	r2,r3,4be8 <_malloc_r+0x59c>
    4be4:	d0e74d15 	stw	r3,-25292(gp)
    4be8:	d0a74e17 	ldw	r2,-25288(gp)
    4bec:	10ff962e 	bgeu	r2,r3,4a48 <_malloc_r+0x3fc>
    4bf0:	d0e74e15 	stw	r3,-25288(gp)
    4bf4:	003f9406 	br	4a48 <_malloc_r+0x3fc>
    4bf8:	00800104 	movi	r2,4
    4bfc:	11001e36 	bltu	r2,r4,4c78 <_malloc_r+0x62c>
    4c00:	2804d1ba 	srli	r2,r5,6
    4c04:	11000e04 	addi	r4,r2,56
    4c08:	200690fa 	slli	r3,r4,3
    4c0c:	003fc506 	br	4b24 <_malloc_r+0x4d8>
    4c10:	00815504 	movi	r2,1364
    4c14:	10c01d2e 	bgeu	r2,r3,4c8c <_malloc_r+0x640>
    4c18:	01801f84 	movi	r6,126
    4c1c:	0080fc04 	movi	r2,1008
    4c20:	003eb706 	br	4700 <_malloc_r+0xb4>
    4c24:	00800204 	movi	r2,8
    4c28:	10cbc83a 	sub	r5,r2,r3
    4c2c:	2169883a 	add	r20,r4,r5
    4c30:	003f9e06 	br	4aac <_malloc_r+0x460>
    4c34:	00bffe04 	movi	r2,-8
    4c38:	a93ffd04 	addi	r4,r21,-12
    4c3c:	2088703a 	and	r4,r4,r2
    4c40:	b10b883a 	add	r5,r22,r4
    4c44:	00c00144 	movi	r3,5
    4c48:	28c00215 	stw	r3,8(r5)
    4c4c:	28c00115 	stw	r3,4(r5)
    4c50:	b0800117 	ldw	r2,4(r22)
    4c54:	1080004c 	andi	r2,r2,1
    4c58:	2084b03a 	or	r2,r4,r2
    4c5c:	b0800115 	stw	r2,4(r22)
    4c60:	313fdd2e 	bgeu	r6,r4,4bd8 <_malloc_r+0x58c>
    4c64:	b1400204 	addi	r5,r22,8
    4c68:	9009883a 	mov	r4,r18
    4c6c:	00040240 	call	4024 <_free_r>
    4c70:	e4000217 	ldw	r16,8(fp)
    4c74:	003fd806 	br	4bd8 <_malloc_r+0x58c>
    4c78:	00800504 	movi	r2,20
    4c7c:	11001536 	bltu	r2,r4,4cd4 <_malloc_r+0x688>
    4c80:	210016c4 	addi	r4,r4,91
    4c84:	200690fa 	slli	r3,r4,3
    4c88:	003fa606 	br	4b24 <_malloc_r+0x4d8>
    4c8c:	8804d4ba 	srli	r2,r17,18
    4c90:	11801f04 	addi	r6,r2,124
    4c94:	300490fa 	slli	r2,r6,3
    4c98:	003e9906 	br	4700 <_malloc_r+0xb4>
    4c9c:	2009d0ba 	srai	r4,r4,2
    4ca0:	01400034 	movhi	r5,0
    4ca4:	295cc904 	addi	r5,r5,29476
    4ca8:	00c00044 	movi	r3,1
    4cac:	28800117 	ldw	r2,4(r5)
    4cb0:	1906983a 	sll	r3,r3,r4
    4cb4:	10c4b03a 	or	r2,r2,r3
    4cb8:	28800115 	stw	r2,4(r5)
    4cbc:	003fa306 	br	4b4c <_malloc_r+0x500>
    4cc0:	0027883a 	mov	r19,zero
    4cc4:	00c00044 	movi	r3,1
    4cc8:	003f8606 	br	4ae4 <_malloc_r+0x498>
    4ccc:	d1200c15 	stw	r4,-32720(gp)
    4cd0:	003f7306 	br	4aa0 <_malloc_r+0x454>
    4cd4:	00801504 	movi	r2,84
    4cd8:	11001936 	bltu	r2,r4,4d40 <_malloc_r+0x6f4>
    4cdc:	2804d33a 	srli	r2,r5,12
    4ce0:	11001b84 	addi	r4,r2,110
    4ce4:	200690fa 	slli	r3,r4,3
    4ce8:	003f8e06 	br	4b24 <_malloc_r+0x4d8>
    4cec:	480b883a 	mov	r5,r9
    4cf0:	6807883a 	mov	r3,r13
    4cf4:	288000cc 	andi	r2,r5,3
    4cf8:	18fffe04 	addi	r3,r3,-8
    4cfc:	297fffc4 	addi	r5,r5,-1
    4d00:	10001526 	beq	r2,zero,4d58 <_malloc_r+0x70c>
    4d04:	18800217 	ldw	r2,8(r3)
    4d08:	10fffa26 	beq	r2,r3,4cf4 <_malloc_r+0x6a8>
    4d0c:	2109883a 	add	r4,r4,r4
    4d10:	393f1e36 	bltu	r7,r4,498c <_malloc_r+0x340>
    4d14:	203f1d26 	beq	r4,zero,498c <_malloc_r+0x340>
    4d18:	21c4703a 	and	r2,r4,r7
    4d1c:	10000226 	beq	r2,zero,4d28 <_malloc_r+0x6dc>
    4d20:	6013883a 	mov	r9,r12
    4d24:	003ee106 	br	48ac <_malloc_r+0x260>
    4d28:	2109883a 	add	r4,r4,r4
    4d2c:	3904703a 	and	r2,r7,r4
    4d30:	63000104 	addi	r12,r12,4
    4d34:	103ffc26 	beq	r2,zero,4d28 <_malloc_r+0x6dc>
    4d38:	6013883a 	mov	r9,r12
    4d3c:	003edb06 	br	48ac <_malloc_r+0x260>
    4d40:	00805504 	movi	r2,340
    4d44:	11000836 	bltu	r2,r4,4d68 <_malloc_r+0x71c>
    4d48:	2804d3fa 	srli	r2,r5,15
    4d4c:	11001dc4 	addi	r4,r2,119
    4d50:	200690fa 	slli	r3,r4,3
    4d54:	003f7306 	br	4b24 <_malloc_r+0x4d8>
    4d58:	0104303a 	nor	r2,zero,r4
    4d5c:	388e703a 	and	r7,r7,r2
    4d60:	e1c00115 	stw	r7,4(fp)
    4d64:	003fe906 	br	4d0c <_malloc_r+0x6c0>
    4d68:	00815504 	movi	r2,1364
    4d6c:	1100032e 	bgeu	r2,r4,4d7c <_malloc_r+0x730>
    4d70:	01001f84 	movi	r4,126
    4d74:	00c0fc04 	movi	r3,1008
    4d78:	003f6a06 	br	4b24 <_malloc_r+0x4d8>
    4d7c:	2804d4ba 	srli	r2,r5,18
    4d80:	11001f04 	addi	r4,r2,124
    4d84:	200690fa 	slli	r3,r4,3
    4d88:	003f6606 	br	4b24 <_malloc_r+0x4d8>

00004d8c <memset>:
    4d8c:	008000c4 	movi	r2,3
    4d90:	29403fcc 	andi	r5,r5,255
    4d94:	2007883a 	mov	r3,r4
    4d98:	1180022e 	bgeu	r2,r6,4da4 <memset+0x18>
    4d9c:	2084703a 	and	r2,r4,r2
    4da0:	10000826 	beq	r2,zero,4dc4 <memset+0x38>
    4da4:	30000526 	beq	r6,zero,4dbc <memset+0x30>
    4da8:	2805883a 	mov	r2,r5
    4dac:	30cd883a 	add	r6,r6,r3
    4db0:	18800005 	stb	r2,0(r3)
    4db4:	18c00044 	addi	r3,r3,1
    4db8:	19bffd1e 	bne	r3,r6,4db0 <memset+0x24>
    4dbc:	2005883a 	mov	r2,r4
    4dc0:	f800283a 	ret
    4dc4:	2804923a 	slli	r2,r5,8
    4dc8:	020003c4 	movi	r8,15
    4dcc:	200f883a 	mov	r7,r4
    4dd0:	2884b03a 	or	r2,r5,r2
    4dd4:	1006943a 	slli	r3,r2,16
    4dd8:	10c6b03a 	or	r3,r2,r3
    4ddc:	41800a2e 	bgeu	r8,r6,4e08 <memset+0x7c>
    4de0:	4005883a 	mov	r2,r8
    4de4:	31bffc04 	addi	r6,r6,-16
    4de8:	38c00015 	stw	r3,0(r7)
    4dec:	38c00115 	stw	r3,4(r7)
    4df0:	38c00215 	stw	r3,8(r7)
    4df4:	38c00315 	stw	r3,12(r7)
    4df8:	39c00404 	addi	r7,r7,16
    4dfc:	11bff936 	bltu	r2,r6,4de4 <memset+0x58>
    4e00:	008000c4 	movi	r2,3
    4e04:	1180052e 	bgeu	r2,r6,4e1c <memset+0x90>
    4e08:	31bfff04 	addi	r6,r6,-4
    4e0c:	008000c4 	movi	r2,3
    4e10:	38c00015 	stw	r3,0(r7)
    4e14:	39c00104 	addi	r7,r7,4
    4e18:	11bffb36 	bltu	r2,r6,4e08 <memset+0x7c>
    4e1c:	3807883a 	mov	r3,r7
    4e20:	003fe006 	br	4da4 <memset+0x18>

00004e24 <_sbrk_r>:
    4e24:	defffd04 	addi	sp,sp,-12
    4e28:	dc000015 	stw	r16,0(sp)
    4e2c:	04000074 	movhi	r16,1
    4e30:	84251604 	addi	r16,r16,-27560
    4e34:	dc400115 	stw	r17,4(sp)
    4e38:	80000015 	stw	zero,0(r16)
    4e3c:	2023883a 	mov	r17,r4
    4e40:	2809883a 	mov	r4,r5
    4e44:	dfc00215 	stw	ra,8(sp)
    4e48:	00056700 	call	5670 <sbrk>
    4e4c:	1007883a 	mov	r3,r2
    4e50:	00bfffc4 	movi	r2,-1
    4e54:	18800626 	beq	r3,r2,4e70 <_sbrk_r+0x4c>
    4e58:	1805883a 	mov	r2,r3
    4e5c:	dfc00217 	ldw	ra,8(sp)
    4e60:	dc400117 	ldw	r17,4(sp)
    4e64:	dc000017 	ldw	r16,0(sp)
    4e68:	dec00304 	addi	sp,sp,12
    4e6c:	f800283a 	ret
    4e70:	80800017 	ldw	r2,0(r16)
    4e74:	103ff826 	beq	r2,zero,4e58 <_sbrk_r+0x34>
    4e78:	88800015 	stw	r2,0(r17)
    4e7c:	1805883a 	mov	r2,r3
    4e80:	dfc00217 	ldw	ra,8(sp)
    4e84:	dc400117 	ldw	r17,4(sp)
    4e88:	dc000017 	ldw	r16,0(sp)
    4e8c:	dec00304 	addi	sp,sp,12
    4e90:	f800283a 	ret

00004e94 <__sclose>:
    4e94:	2940038f 	ldh	r5,14(r5)
    4e98:	00050581 	jmpi	5058 <_close_r>

00004e9c <__sseek>:
    4e9c:	defffe04 	addi	sp,sp,-8
    4ea0:	dc000015 	stw	r16,0(sp)
    4ea4:	2821883a 	mov	r16,r5
    4ea8:	2940038f 	ldh	r5,14(r5)
    4eac:	dfc00115 	stw	ra,4(sp)
    4eb0:	00052d00 	call	52d0 <_lseek_r>
    4eb4:	1007883a 	mov	r3,r2
    4eb8:	00bfffc4 	movi	r2,-1
    4ebc:	18800926 	beq	r3,r2,4ee4 <__sseek+0x48>
    4ec0:	8080030b 	ldhu	r2,12(r16)
    4ec4:	80c01415 	stw	r3,80(r16)
    4ec8:	10840014 	ori	r2,r2,4096
    4ecc:	8080030d 	sth	r2,12(r16)
    4ed0:	1805883a 	mov	r2,r3
    4ed4:	dfc00117 	ldw	ra,4(sp)
    4ed8:	dc000017 	ldw	r16,0(sp)
    4edc:	dec00204 	addi	sp,sp,8
    4ee0:	f800283a 	ret
    4ee4:	8080030b 	ldhu	r2,12(r16)
    4ee8:	10bbffcc 	andi	r2,r2,61439
    4eec:	8080030d 	sth	r2,12(r16)
    4ef0:	1805883a 	mov	r2,r3
    4ef4:	dfc00117 	ldw	ra,4(sp)
    4ef8:	dc000017 	ldw	r16,0(sp)
    4efc:	dec00204 	addi	sp,sp,8
    4f00:	f800283a 	ret

00004f04 <__swrite>:
    4f04:	2880030b 	ldhu	r2,12(r5)
    4f08:	defffb04 	addi	sp,sp,-20
    4f0c:	dcc00315 	stw	r19,12(sp)
    4f10:	1080400c 	andi	r2,r2,256
    4f14:	dc800215 	stw	r18,8(sp)
    4f18:	dc400115 	stw	r17,4(sp)
    4f1c:	dc000015 	stw	r16,0(sp)
    4f20:	3027883a 	mov	r19,r6
    4f24:	3825883a 	mov	r18,r7
    4f28:	dfc00415 	stw	ra,16(sp)
    4f2c:	2821883a 	mov	r16,r5
    4f30:	000d883a 	mov	r6,zero
    4f34:	01c00084 	movi	r7,2
    4f38:	2023883a 	mov	r17,r4
    4f3c:	10000226 	beq	r2,zero,4f48 <__swrite+0x44>
    4f40:	2940038f 	ldh	r5,14(r5)
    4f44:	00052d00 	call	52d0 <_lseek_r>
    4f48:	8080030b 	ldhu	r2,12(r16)
    4f4c:	8140038f 	ldh	r5,14(r16)
    4f50:	8809883a 	mov	r4,r17
    4f54:	10bbffcc 	andi	r2,r2,61439
    4f58:	980d883a 	mov	r6,r19
    4f5c:	900f883a 	mov	r7,r18
    4f60:	8080030d 	sth	r2,12(r16)
    4f64:	dfc00417 	ldw	ra,16(sp)
    4f68:	dcc00317 	ldw	r19,12(sp)
    4f6c:	dc800217 	ldw	r18,8(sp)
    4f70:	dc400117 	ldw	r17,4(sp)
    4f74:	dc000017 	ldw	r16,0(sp)
    4f78:	dec00504 	addi	sp,sp,20
    4f7c:	0004fe01 	jmpi	4fe0 <_write_r>

00004f80 <__sread>:
    4f80:	defffe04 	addi	sp,sp,-8
    4f84:	dc000015 	stw	r16,0(sp)
    4f88:	2821883a 	mov	r16,r5
    4f8c:	2940038f 	ldh	r5,14(r5)
    4f90:	dfc00115 	stw	ra,4(sp)
    4f94:	00053480 	call	5348 <_read_r>
    4f98:	1007883a 	mov	r3,r2
    4f9c:	10000816 	blt	r2,zero,4fc0 <__sread+0x40>
    4fa0:	80801417 	ldw	r2,80(r16)
    4fa4:	10c5883a 	add	r2,r2,r3
    4fa8:	80801415 	stw	r2,80(r16)
    4fac:	1805883a 	mov	r2,r3
    4fb0:	dfc00117 	ldw	ra,4(sp)
    4fb4:	dc000017 	ldw	r16,0(sp)
    4fb8:	dec00204 	addi	sp,sp,8
    4fbc:	f800283a 	ret
    4fc0:	8080030b 	ldhu	r2,12(r16)
    4fc4:	10bbffcc 	andi	r2,r2,61439
    4fc8:	8080030d 	sth	r2,12(r16)
    4fcc:	1805883a 	mov	r2,r3
    4fd0:	dfc00117 	ldw	ra,4(sp)
    4fd4:	dc000017 	ldw	r16,0(sp)
    4fd8:	dec00204 	addi	sp,sp,8
    4fdc:	f800283a 	ret

00004fe0 <_write_r>:
    4fe0:	defffd04 	addi	sp,sp,-12
    4fe4:	dc000015 	stw	r16,0(sp)
    4fe8:	04000074 	movhi	r16,1
    4fec:	84251604 	addi	r16,r16,-27560
    4ff0:	dc400115 	stw	r17,4(sp)
    4ff4:	80000015 	stw	zero,0(r16)
    4ff8:	2023883a 	mov	r17,r4
    4ffc:	2809883a 	mov	r4,r5
    5000:	300b883a 	mov	r5,r6
    5004:	380d883a 	mov	r6,r7
    5008:	dfc00215 	stw	ra,8(sp)
    500c:	00056c00 	call	56c0 <write>
    5010:	1007883a 	mov	r3,r2
    5014:	00bfffc4 	movi	r2,-1
    5018:	18800626 	beq	r3,r2,5034 <_write_r+0x54>
    501c:	1805883a 	mov	r2,r3
    5020:	dfc00217 	ldw	ra,8(sp)
    5024:	dc400117 	ldw	r17,4(sp)
    5028:	dc000017 	ldw	r16,0(sp)
    502c:	dec00304 	addi	sp,sp,12
    5030:	f800283a 	ret
    5034:	80800017 	ldw	r2,0(r16)
    5038:	103ff826 	beq	r2,zero,501c <_write_r+0x3c>
    503c:	88800015 	stw	r2,0(r17)
    5040:	1805883a 	mov	r2,r3
    5044:	dfc00217 	ldw	ra,8(sp)
    5048:	dc400117 	ldw	r17,4(sp)
    504c:	dc000017 	ldw	r16,0(sp)
    5050:	dec00304 	addi	sp,sp,12
    5054:	f800283a 	ret

00005058 <_close_r>:
    5058:	defffd04 	addi	sp,sp,-12
    505c:	dc000015 	stw	r16,0(sp)
    5060:	04000074 	movhi	r16,1
    5064:	84251604 	addi	r16,r16,-27560
    5068:	dc400115 	stw	r17,4(sp)
    506c:	80000015 	stw	zero,0(r16)
    5070:	2023883a 	mov	r17,r4
    5074:	2809883a 	mov	r4,r5
    5078:	dfc00215 	stw	ra,8(sp)
    507c:	0002a780 	call	2a78 <close>
    5080:	1007883a 	mov	r3,r2
    5084:	00bfffc4 	movi	r2,-1
    5088:	18800626 	beq	r3,r2,50a4 <_close_r+0x4c>
    508c:	1805883a 	mov	r2,r3
    5090:	dfc00217 	ldw	ra,8(sp)
    5094:	dc400117 	ldw	r17,4(sp)
    5098:	dc000017 	ldw	r16,0(sp)
    509c:	dec00304 	addi	sp,sp,12
    50a0:	f800283a 	ret
    50a4:	80800017 	ldw	r2,0(r16)
    50a8:	103ff826 	beq	r2,zero,508c <_close_r+0x34>
    50ac:	88800015 	stw	r2,0(r17)
    50b0:	1805883a 	mov	r2,r3
    50b4:	dfc00217 	ldw	ra,8(sp)
    50b8:	dc400117 	ldw	r17,4(sp)
    50bc:	dc000017 	ldw	r16,0(sp)
    50c0:	dec00304 	addi	sp,sp,12
    50c4:	f800283a 	ret

000050c8 <_fclose_r>:
    50c8:	defffc04 	addi	sp,sp,-16
    50cc:	dc400115 	stw	r17,4(sp)
    50d0:	dc000015 	stw	r16,0(sp)
    50d4:	dfc00315 	stw	ra,12(sp)
    50d8:	dc800215 	stw	r18,8(sp)
    50dc:	2821883a 	mov	r16,r5
    50e0:	2023883a 	mov	r17,r4
    50e4:	28002926 	beq	r5,zero,518c <_fclose_r+0xc4>
    50e8:	0003c900 	call	3c90 <__sfp_lock_acquire>
    50ec:	88000226 	beq	r17,zero,50f8 <_fclose_r+0x30>
    50f0:	88800e17 	ldw	r2,56(r17)
    50f4:	10002d26 	beq	r2,zero,51ac <_fclose_r+0xe4>
    50f8:	8080030f 	ldh	r2,12(r16)
    50fc:	10002226 	beq	r2,zero,5188 <_fclose_r+0xc0>
    5100:	8809883a 	mov	r4,r17
    5104:	800b883a 	mov	r5,r16
    5108:	0003a080 	call	3a08 <_fflush_r>
    510c:	1025883a 	mov	r18,r2
    5110:	80800b17 	ldw	r2,44(r16)
    5114:	10000426 	beq	r2,zero,5128 <_fclose_r+0x60>
    5118:	81400717 	ldw	r5,28(r16)
    511c:	8809883a 	mov	r4,r17
    5120:	103ee83a 	callr	r2
    5124:	10002a16 	blt	r2,zero,51d0 <_fclose_r+0x108>
    5128:	8080030b 	ldhu	r2,12(r16)
    512c:	1080200c 	andi	r2,r2,128
    5130:	1000231e 	bne	r2,zero,51c0 <_fclose_r+0xf8>
    5134:	81400c17 	ldw	r5,48(r16)
    5138:	28000526 	beq	r5,zero,5150 <_fclose_r+0x88>
    513c:	80801004 	addi	r2,r16,64
    5140:	28800226 	beq	r5,r2,514c <_fclose_r+0x84>
    5144:	8809883a 	mov	r4,r17
    5148:	00040240 	call	4024 <_free_r>
    514c:	80000c15 	stw	zero,48(r16)
    5150:	81401117 	ldw	r5,68(r16)
    5154:	28000326 	beq	r5,zero,5164 <_fclose_r+0x9c>
    5158:	8809883a 	mov	r4,r17
    515c:	00040240 	call	4024 <_free_r>
    5160:	80001115 	stw	zero,68(r16)
    5164:	8000030d 	sth	zero,12(r16)
    5168:	0003c940 	call	3c94 <__sfp_lock_release>
    516c:	9005883a 	mov	r2,r18
    5170:	dfc00317 	ldw	ra,12(sp)
    5174:	dc800217 	ldw	r18,8(sp)
    5178:	dc400117 	ldw	r17,4(sp)
    517c:	dc000017 	ldw	r16,0(sp)
    5180:	dec00404 	addi	sp,sp,16
    5184:	f800283a 	ret
    5188:	0003c940 	call	3c94 <__sfp_lock_release>
    518c:	0025883a 	mov	r18,zero
    5190:	9005883a 	mov	r2,r18
    5194:	dfc00317 	ldw	ra,12(sp)
    5198:	dc800217 	ldw	r18,8(sp)
    519c:	dc400117 	ldw	r17,4(sp)
    51a0:	dc000017 	ldw	r16,0(sp)
    51a4:	dec00404 	addi	sp,sp,16
    51a8:	f800283a 	ret
    51ac:	8809883a 	mov	r4,r17
    51b0:	0003ca00 	call	3ca0 <__sinit>
    51b4:	8080030f 	ldh	r2,12(r16)
    51b8:	103fd11e 	bne	r2,zero,5100 <_fclose_r+0x38>
    51bc:	003ff206 	br	5188 <_fclose_r+0xc0>
    51c0:	81400417 	ldw	r5,16(r16)
    51c4:	8809883a 	mov	r4,r17
    51c8:	00040240 	call	4024 <_free_r>
    51cc:	003fd906 	br	5134 <_fclose_r+0x6c>
    51d0:	04bfffc4 	movi	r18,-1
    51d4:	003fd406 	br	5128 <_fclose_r+0x60>

000051d8 <fclose>:
    51d8:	00800034 	movhi	r2,0
    51dc:	109dd404 	addi	r2,r2,30544
    51e0:	200b883a 	mov	r5,r4
    51e4:	11000017 	ldw	r4,0(r2)
    51e8:	00050c81 	jmpi	50c8 <_fclose_r>

000051ec <_fstat_r>:
    51ec:	defffd04 	addi	sp,sp,-12
    51f0:	dc000015 	stw	r16,0(sp)
    51f4:	04000074 	movhi	r16,1
    51f8:	84251604 	addi	r16,r16,-27560
    51fc:	dc400115 	stw	r17,4(sp)
    5200:	80000015 	stw	zero,0(r16)
    5204:	2023883a 	mov	r17,r4
    5208:	2809883a 	mov	r4,r5
    520c:	300b883a 	mov	r5,r6
    5210:	dfc00215 	stw	ra,8(sp)
    5214:	00053d40 	call	53d4 <fstat>
    5218:	1007883a 	mov	r3,r2
    521c:	00bfffc4 	movi	r2,-1
    5220:	18800626 	beq	r3,r2,523c <_fstat_r+0x50>
    5224:	1805883a 	mov	r2,r3
    5228:	dfc00217 	ldw	ra,8(sp)
    522c:	dc400117 	ldw	r17,4(sp)
    5230:	dc000017 	ldw	r16,0(sp)
    5234:	dec00304 	addi	sp,sp,12
    5238:	f800283a 	ret
    523c:	80800017 	ldw	r2,0(r16)
    5240:	103ff826 	beq	r2,zero,5224 <_fstat_r+0x38>
    5244:	88800015 	stw	r2,0(r17)
    5248:	1805883a 	mov	r2,r3
    524c:	dfc00217 	ldw	ra,8(sp)
    5250:	dc400117 	ldw	r17,4(sp)
    5254:	dc000017 	ldw	r16,0(sp)
    5258:	dec00304 	addi	sp,sp,12
    525c:	f800283a 	ret

00005260 <_isatty_r>:
    5260:	defffd04 	addi	sp,sp,-12
    5264:	dc000015 	stw	r16,0(sp)
    5268:	04000074 	movhi	r16,1
    526c:	84251604 	addi	r16,r16,-27560
    5270:	dc400115 	stw	r17,4(sp)
    5274:	80000015 	stw	zero,0(r16)
    5278:	2023883a 	mov	r17,r4
    527c:	2809883a 	mov	r4,r5
    5280:	dfc00215 	stw	ra,8(sp)
    5284:	00054540 	call	5454 <isatty>
    5288:	1007883a 	mov	r3,r2
    528c:	00bfffc4 	movi	r2,-1
    5290:	18800626 	beq	r3,r2,52ac <_isatty_r+0x4c>
    5294:	1805883a 	mov	r2,r3
    5298:	dfc00217 	ldw	ra,8(sp)
    529c:	dc400117 	ldw	r17,4(sp)
    52a0:	dc000017 	ldw	r16,0(sp)
    52a4:	dec00304 	addi	sp,sp,12
    52a8:	f800283a 	ret
    52ac:	80800017 	ldw	r2,0(r16)
    52b0:	103ff826 	beq	r2,zero,5294 <_isatty_r+0x34>
    52b4:	88800015 	stw	r2,0(r17)
    52b8:	1805883a 	mov	r2,r3
    52bc:	dfc00217 	ldw	ra,8(sp)
    52c0:	dc400117 	ldw	r17,4(sp)
    52c4:	dc000017 	ldw	r16,0(sp)
    52c8:	dec00304 	addi	sp,sp,12
    52cc:	f800283a 	ret

000052d0 <_lseek_r>:
    52d0:	defffd04 	addi	sp,sp,-12
    52d4:	dc000015 	stw	r16,0(sp)
    52d8:	04000074 	movhi	r16,1
    52dc:	84251604 	addi	r16,r16,-27560
    52e0:	dc400115 	stw	r17,4(sp)
    52e4:	80000015 	stw	zero,0(r16)
    52e8:	2023883a 	mov	r17,r4
    52ec:	2809883a 	mov	r4,r5
    52f0:	300b883a 	mov	r5,r6
    52f4:	380d883a 	mov	r6,r7
    52f8:	dfc00215 	stw	ra,8(sp)
    52fc:	00054d80 	call	54d8 <lseek>
    5300:	1007883a 	mov	r3,r2
    5304:	00bfffc4 	movi	r2,-1
    5308:	18800626 	beq	r3,r2,5324 <_lseek_r+0x54>
    530c:	1805883a 	mov	r2,r3
    5310:	dfc00217 	ldw	ra,8(sp)
    5314:	dc400117 	ldw	r17,4(sp)
    5318:	dc000017 	ldw	r16,0(sp)
    531c:	dec00304 	addi	sp,sp,12
    5320:	f800283a 	ret
    5324:	80800017 	ldw	r2,0(r16)
    5328:	103ff826 	beq	r2,zero,530c <_lseek_r+0x3c>
    532c:	88800015 	stw	r2,0(r17)
    5330:	1805883a 	mov	r2,r3
    5334:	dfc00217 	ldw	ra,8(sp)
    5338:	dc400117 	ldw	r17,4(sp)
    533c:	dc000017 	ldw	r16,0(sp)
    5340:	dec00304 	addi	sp,sp,12
    5344:	f800283a 	ret

00005348 <_read_r>:
    5348:	defffd04 	addi	sp,sp,-12
    534c:	dc000015 	stw	r16,0(sp)
    5350:	04000074 	movhi	r16,1
    5354:	84251604 	addi	r16,r16,-27560
    5358:	dc400115 	stw	r17,4(sp)
    535c:	80000015 	stw	zero,0(r16)
    5360:	2023883a 	mov	r17,r4
    5364:	2809883a 	mov	r4,r5
    5368:	300b883a 	mov	r5,r6
    536c:	380d883a 	mov	r6,r7
    5370:	dfc00215 	stw	ra,8(sp)
    5374:	00055780 	call	5578 <read>
    5378:	1007883a 	mov	r3,r2
    537c:	00bfffc4 	movi	r2,-1
    5380:	18800626 	beq	r3,r2,539c <_read_r+0x54>
    5384:	1805883a 	mov	r2,r3
    5388:	dfc00217 	ldw	ra,8(sp)
    538c:	dc400117 	ldw	r17,4(sp)
    5390:	dc000017 	ldw	r16,0(sp)
    5394:	dec00304 	addi	sp,sp,12
    5398:	f800283a 	ret
    539c:	80800017 	ldw	r2,0(r16)
    53a0:	103ff826 	beq	r2,zero,5384 <_read_r+0x3c>
    53a4:	88800015 	stw	r2,0(r17)
    53a8:	1805883a 	mov	r2,r3
    53ac:	dfc00217 	ldw	ra,8(sp)
    53b0:	dc400117 	ldw	r17,4(sp)
    53b4:	dc000017 	ldw	r16,0(sp)
    53b8:	dec00304 	addi	sp,sp,12
    53bc:	f800283a 	ret

000053c0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    53c0:	20000226 	beq	r4,zero,53cc <_exit+0xc>
    ALT_SIM_FAIL();
    53c4:	002af070 	cmpltui	zero,zero,43969
    53c8:	00000106 	br	53d0 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    53cc:	002af0b0 	cmpltui	zero,zero,43970
    53d0:	003fff06 	br	53d0 <_exit+0x10>

000053d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    53d4:	deffff04 	addi	sp,sp,-4
    53d8:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    53dc:	20000e16 	blt	r4,zero,5418 <fstat+0x44>
    53e0:	20c00324 	muli	r3,r4,12
    53e4:	00800034 	movhi	r2,0
    53e8:	109b6904 	addi	r2,r2,28068
    53ec:	1889883a 	add	r4,r3,r2
  
  if (fd)
    53f0:	20000926 	beq	r4,zero,5418 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    53f4:	20800017 	ldw	r2,0(r4)
    53f8:	10800817 	ldw	r2,32(r2)
    53fc:	10000226 	beq	r2,zero,5408 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    5400:	103ee83a 	callr	r2
    5404:	00001006 	br	5448 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5408:	00880004 	movi	r2,8192
    540c:	28800115 	stw	r2,4(r5)
    5410:	0005883a 	mov	r2,zero
    5414:	00000c06 	br	5448 <fstat+0x74>
    5418:	00800034 	movhi	r2,0
    541c:	109dd004 	addi	r2,r2,30528
    5420:	10800017 	ldw	r2,0(r2)
    5424:	1000031e 	bne	r2,zero,5434 <fstat+0x60>
    5428:	00c00074 	movhi	r3,1
    542c:	18e51604 	addi	r3,r3,-27560
    5430:	00000206 	br	543c <fstat+0x68>
    5434:	103ee83a 	callr	r2
    5438:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    543c:	00801444 	movi	r2,81
    5440:	18800015 	stw	r2,0(r3)
    5444:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    5448:	dfc00017 	ldw	ra,0(sp)
    544c:	dec00104 	addi	sp,sp,4
    5450:	f800283a 	ret

00005454 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5454:	defff004 	addi	sp,sp,-64
    5458:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    545c:	20000f16 	blt	r4,zero,549c <isatty+0x48>
    5460:	20c00324 	muli	r3,r4,12
    5464:	00800034 	movhi	r2,0
    5468:	109b6904 	addi	r2,r2,28068
    546c:	1885883a 	add	r2,r3,r2
  
  if (fd)
    5470:	10000a26 	beq	r2,zero,549c <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    5474:	10800017 	ldw	r2,0(r2)
    5478:	10800817 	ldw	r2,32(r2)
    547c:	1000021e 	bne	r2,zero,5488 <isatty+0x34>
    5480:	00800044 	movi	r2,1
    5484:	00001106 	br	54cc <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5488:	d80b883a 	mov	r5,sp
    548c:	00053d40 	call	53d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5490:	d8800117 	ldw	r2,4(sp)
    5494:	10880020 	cmpeqi	r2,r2,8192
    5498:	00000c06 	br	54cc <isatty+0x78>
    549c:	00800034 	movhi	r2,0
    54a0:	109dd004 	addi	r2,r2,30528
    54a4:	10800017 	ldw	r2,0(r2)
    54a8:	1000031e 	bne	r2,zero,54b8 <isatty+0x64>
    54ac:	00c00074 	movhi	r3,1
    54b0:	18e51604 	addi	r3,r3,-27560
    54b4:	00000206 	br	54c0 <isatty+0x6c>
    54b8:	103ee83a 	callr	r2
    54bc:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    54c0:	00801444 	movi	r2,81
    54c4:	18800015 	stw	r2,0(r3)
    54c8:	0005883a 	mov	r2,zero
    return 0;
  }
}
    54cc:	dfc00f17 	ldw	ra,60(sp)
    54d0:	dec01004 	addi	sp,sp,64
    54d4:	f800283a 	ret

000054d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    54d8:	defffe04 	addi	sp,sp,-8
    54dc:	dfc00115 	stw	ra,4(sp)
    54e0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    54e4:	2000020e 	bge	r4,zero,54f0 <lseek+0x18>
    54e8:	043febc4 	movi	r16,-81
    54ec:	00000d06 	br	5524 <lseek+0x4c>
    54f0:	20c00324 	muli	r3,r4,12
    54f4:	00800034 	movhi	r2,0
    54f8:	109b6904 	addi	r2,r2,28068
    54fc:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    5500:	20001526 	beq	r4,zero,5558 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5504:	20800017 	ldw	r2,0(r4)
    5508:	10800717 	ldw	r2,28(r2)
    550c:	1000021e 	bne	r2,zero,5518 <lseek+0x40>
    5510:	043fde84 	movi	r16,-134
    5514:	00000306 	br	5524 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5518:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    551c:	1000100e 	bge	r2,zero,5560 <lseek+0x88>
    5520:	1021883a 	mov	r16,r2
    5524:	00800034 	movhi	r2,0
    5528:	109dd004 	addi	r2,r2,30528
    552c:	10800017 	ldw	r2,0(r2)
    5530:	1000031e 	bne	r2,zero,5540 <lseek+0x68>
    5534:	00c00074 	movhi	r3,1
    5538:	18e51604 	addi	r3,r3,-27560
    553c:	00000206 	br	5548 <lseek+0x70>
    5540:	103ee83a 	callr	r2
    5544:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    5548:	0405c83a 	sub	r2,zero,r16
    554c:	18800015 	stw	r2,0(r3)
    5550:	00bfffc4 	movi	r2,-1
    5554:	00000206 	br	5560 <lseek+0x88>
    5558:	043febc4 	movi	r16,-81
    555c:	003ff106 	br	5524 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    5560:	dfc00117 	ldw	ra,4(sp)
    5564:	dc000017 	ldw	r16,0(sp)
    5568:	dec00204 	addi	sp,sp,8
    556c:	f800283a 	ret

00005570 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    5570:	f800283a 	ret

00005574 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    5574:	f800283a 	ret

00005578 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5578:	defffe04 	addi	sp,sp,-8
    557c:	dfc00115 	stw	ra,4(sp)
    5580:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5584:	20002916 	blt	r4,zero,562c <read+0xb4>
    5588:	20c00324 	muli	r3,r4,12
    558c:	00800034 	movhi	r2,0
    5590:	109b6904 	addi	r2,r2,28068
    5594:	1889883a 	add	r4,r3,r2
  
  if (fd)
    5598:	20002426 	beq	r4,zero,562c <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    559c:	20800217 	ldw	r2,8(r4)
    55a0:	108000cc 	andi	r2,r2,3
    55a4:	00c00044 	movi	r3,1
    55a8:	10c01326 	beq	r2,r3,55f8 <read+0x80>
    55ac:	20800017 	ldw	r2,0(r4)
    55b0:	10800517 	ldw	r2,20(r2)
    55b4:	10001026 	beq	r2,zero,55f8 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    55b8:	103ee83a 	callr	r2
    55bc:	1021883a 	mov	r16,r2
    55c0:	1000260e 	bge	r2,zero,565c <read+0xe4>
    55c4:	00800034 	movhi	r2,0
    55c8:	109dd004 	addi	r2,r2,30528
    55cc:	10800017 	ldw	r2,0(r2)
    55d0:	1000031e 	bne	r2,zero,55e0 <read+0x68>
    55d4:	00c00074 	movhi	r3,1
    55d8:	18e51604 	addi	r3,r3,-27560
    55dc:	00000206 	br	55e8 <read+0x70>
    55e0:	103ee83a 	callr	r2
    55e4:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    55e8:	0405c83a 	sub	r2,zero,r16
    55ec:	18800015 	stw	r2,0(r3)
    55f0:	043fffc4 	movi	r16,-1
    55f4:	00001906 	br	565c <read+0xe4>
    55f8:	00800034 	movhi	r2,0
    55fc:	109dd004 	addi	r2,r2,30528
    5600:	10800017 	ldw	r2,0(r2)
    5604:	1000031e 	bne	r2,zero,5614 <read+0x9c>
    5608:	00c00074 	movhi	r3,1
    560c:	18e51604 	addi	r3,r3,-27560
    5610:	00000206 	br	561c <read+0xa4>
    5614:	103ee83a 	callr	r2
    5618:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    561c:	00800344 	movi	r2,13
    5620:	18800015 	stw	r2,0(r3)
    5624:	043fffc4 	movi	r16,-1
    5628:	00000c06 	br	565c <read+0xe4>
    562c:	00800034 	movhi	r2,0
    5630:	109dd004 	addi	r2,r2,30528
    5634:	10800017 	ldw	r2,0(r2)
    5638:	1000031e 	bne	r2,zero,5648 <read+0xd0>
    563c:	00c00074 	movhi	r3,1
    5640:	18e51604 	addi	r3,r3,-27560
    5644:	00000206 	br	5650 <read+0xd8>
    5648:	103ee83a 	callr	r2
    564c:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5650:	00801444 	movi	r2,81
    5654:	18800015 	stw	r2,0(r3)
    5658:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    565c:	8005883a 	mov	r2,r16
    5660:	dfc00117 	ldw	ra,4(sp)
    5664:	dc000017 	ldw	r16,0(sp)
    5668:	dec00204 	addi	sp,sp,8
    566c:	f800283a 	ret

00005670 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5670:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5674:	00bfff84 	movi	r2,-2
    5678:	2884703a 	and	r2,r5,r2
    567c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5680:	d0a00d17 	ldw	r2,-32716(gp)
    5684:	108000c4 	addi	r2,r2,3
    5688:	00ffff04 	movi	r3,-4
    568c:	10c6703a 	and	r3,r2,r3
    5690:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5694:	1909883a 	add	r4,r3,r4
    5698:	00802034 	movhi	r2,128
    569c:	10800004 	addi	r2,r2,0
    56a0:	1100032e 	bgeu	r2,r4,56b0 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56a4:	2801703a 	wrctl	status,r5
    56a8:	00ffffc4 	movi	r3,-1
    56ac:	00000206 	br	56b8 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    56b0:	d1200d15 	stw	r4,-32716(gp)
    56b4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    56b8:	1805883a 	mov	r2,r3
    56bc:	f800283a 	ret

000056c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    56c0:	defffe04 	addi	sp,sp,-8
    56c4:	dfc00115 	stw	ra,4(sp)
    56c8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    56cc:	20002816 	blt	r4,zero,5770 <write+0xb0>
    56d0:	20c00324 	muli	r3,r4,12
    56d4:	00800034 	movhi	r2,0
    56d8:	109b6904 	addi	r2,r2,28068
    56dc:	1889883a 	add	r4,r3,r2
  
  if (fd)
    56e0:	20002326 	beq	r4,zero,5770 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    56e4:	20800217 	ldw	r2,8(r4)
    56e8:	108000cc 	andi	r2,r2,3
    56ec:	10001326 	beq	r2,zero,573c <write+0x7c>
    56f0:	20800017 	ldw	r2,0(r4)
    56f4:	10800617 	ldw	r2,24(r2)
    56f8:	10001026 	beq	r2,zero,573c <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    56fc:	103ee83a 	callr	r2
    5700:	1021883a 	mov	r16,r2
    5704:	1000260e 	bge	r2,zero,57a0 <write+0xe0>
    5708:	00800034 	movhi	r2,0
    570c:	109dd004 	addi	r2,r2,30528
    5710:	10800017 	ldw	r2,0(r2)
    5714:	1000031e 	bne	r2,zero,5724 <write+0x64>
    5718:	00c00074 	movhi	r3,1
    571c:	18e51604 	addi	r3,r3,-27560
    5720:	00000206 	br	572c <write+0x6c>
    5724:	103ee83a 	callr	r2
    5728:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    572c:	0405c83a 	sub	r2,zero,r16
    5730:	18800015 	stw	r2,0(r3)
    5734:	043fffc4 	movi	r16,-1
    5738:	00001906 	br	57a0 <write+0xe0>
    573c:	00800034 	movhi	r2,0
    5740:	109dd004 	addi	r2,r2,30528
    5744:	10800017 	ldw	r2,0(r2)
    5748:	1000031e 	bne	r2,zero,5758 <write+0x98>
    574c:	00c00074 	movhi	r3,1
    5750:	18e51604 	addi	r3,r3,-27560
    5754:	00000206 	br	5760 <write+0xa0>
    5758:	103ee83a 	callr	r2
    575c:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5760:	00800344 	movi	r2,13
    5764:	18800015 	stw	r2,0(r3)
    5768:	043fffc4 	movi	r16,-1
    576c:	00000c06 	br	57a0 <write+0xe0>
    5770:	00800034 	movhi	r2,0
    5774:	109dd004 	addi	r2,r2,30528
    5778:	10800017 	ldw	r2,0(r2)
    577c:	1000031e 	bne	r2,zero,578c <write+0xcc>
    5780:	00c00074 	movhi	r3,1
    5784:	18e51604 	addi	r3,r3,-27560
    5788:	00000206 	br	5794 <write+0xd4>
    578c:	103ee83a 	callr	r2
    5790:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5794:	00801444 	movi	r2,81
    5798:	18800015 	stw	r2,0(r3)
    579c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    57a0:	8005883a 	mov	r2,r16
    57a4:	dfc00117 	ldw	ra,4(sp)
    57a8:	dc000017 	ldw	r16,0(sp)
    57ac:	dec00204 	addi	sp,sp,8
    57b0:	f800283a 	ret
    57b4:	00003854 	movui	zero,225
