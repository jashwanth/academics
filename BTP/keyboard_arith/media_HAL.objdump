
C:/Users/Jashwanth/Desktop/academics/BTP/keyboard_arith/media_HAL.elf:     file format elf32-littlenios2
C:/Users/Jashwanth/Desktop/academics/BTP/keyboard_arith/media_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ed20 memsz 0x0000ed20 flags r-x
    LOAD off    0x0000fd40 vaddr 0x0000ed40 paddr 0x00010a30 align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x00012720 vaddr 0x00012720 paddr 0x00012720 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e514  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006c4  0000e67c  0000e67c  0000f67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  0000ed40  00010a30  0000fd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00012720  00012720  00012720  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00011a30  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00011a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001975  00000000  00000000  000127d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000252a9  00000000  00000000  00014145  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008c34  00000000  00000000  000393ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015dec  00000000  00000000  00042022  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001aa0  00000000  00000000  00057e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000036d1  00000000  00000000  000598b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000107bf  00000000  00000000  0005cf81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006d740  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000dd0  00000000  00000000  0006d760  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071ccd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00071cd0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071cd3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071cd4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00071cd5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00071cd9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00071cdd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00071ce1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00071cea  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00071cf3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00071cfc  2**0
                  CONTENTS, READONLY
 28 .jdi          00004d54  00000000  00000000  00071d07  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000abe93  00000000  00000000  00076a5b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
0000e67c l    d  .rodata	00000000 .rodata
0000ed40 l    d  .rwdata	00000000 .rwdata
00012720 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_HAL.c
0000e948 l     O .rodata	00000010 C.7.2653
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001e58 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000023dc l     F .text	00000058 __sprint_r
0000eac6 l     O .rodata	00000010 blanks.3452
0000eab6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004440 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005e3c l     F .text	00000058 std
00005f48 l     F .text	00000008 __fp_lock
00005f50 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000ed40 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000109fc l     O .rwdata	00000004 charset
0000eafc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0000ec44 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009fa4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b740 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010a20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f6fc l     O .rwdata	00001060 JTAG_UART
0001075c l     O .rwdata	00000030 AV_Config
0001078c l     O .rwdata	00000030 Audio
000107bc l     O .rwdata	0000002c Expansion_JP1
000107e8 l     O .rwdata	0000002c Expansion_JP2
00010814 l     O .rwdata	0000002c Green_LEDs
00010840 l     O .rwdata	0000002c HEX3_HEX0
0001086c l     O .rwdata	0000002c Pushbuttons
00010898 l     O .rwdata	0000002c Red_LEDs
000108c4 l     O .rwdata	0000002c Slider_Switches
000108f0 l     O .rwdata	00000038 PS2_Port
00010928 l     O .rwdata	0000002c Serial_Port
00010954 l     O .rwdata	00000048 VGA_Char_Buffer
0001099c l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c1d4 l     F .text	00000054 altera_avalon_jtag_uart_timeout
0000c2a0 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c770 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000da88 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e3ec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00007ac0 g     F .text	00000094 _mprec_log10
00007bac g     F .text	00000088 __any_on
000092b8 g     F .text	00000070 _isatty_r
0000ec1c g     O .rodata	00000028 __mprec_tinytens
0000b9a8 g     F .text	00000050 alt_main
000022dc g     F .text	0000008c strcpy
0000d0e8 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
00002154 g     F .text	000000a0 _puts_r
0001277c g     O .bss	00000100 alt_irq
0000cb20 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00009328 g     F .text	00000078 _lseek_r
00010a30 g       *ABS*	00000000 __flash_rwdata_start
0000aac4 g     F .text	00000088 __eqdf2
00001184 g     F .text	00000680 __divdi3
0001287c g       *ABS*	00000000 __alt_heap_start
000020dc g     F .text	00000044 printf
00008d84 g     F .text	00000068 __sseek
00005ea4 g     F .text	000000a4 __sinit
0000e2a0 g     F .text	00000130 __swbuf_r
0000cd28 g     F .text	00000088 alt_up_char_buffer_string
0000c7e0 g     F .text	0000000c read_CE_bit
00006b7c g     F .text	00000084 _setlocale_r
00005fa4 g     F .text	00000068 __sfmoreglue
0000b9fc g     F .text	00000004 __malloc_unlock
0000c8b0 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
0000cbcc g     F .text	00000080 alt_up_rs232_read_fd
0000cdb0 g     F .text	00000058 alt_up_char_buffer_draw
000075d4 g     F .text	000000e0 memmove
00005f94 g     F .text	00000010 _cleanup
00007c34 g     F .text	000000bc _Balloc
0000d7dc g     F .text	000000bc alt_up_pixel_buffer_dma_draw
0000abd4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000d8d0 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009244 g     F .text	00000074 _fstat_r
00012738 g     O .bss	00000004 errno
00012740 g     O .bss	00000004 alt_argv
000189f0 g       *ABS*	00000000 _gp
0000d8a8 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
0000f57c g     O .rwdata	00000180 alt_fd_list
0000d9f8 g     F .text	00000070 alt_find_dev
00001fa4 g     F .text	000000a0 memcpy
0000ce08 g     F .text	00000028 alt_up_char_buffer_clear
00005f88 g     F .text	0000000c _cleanup_r
0000ad6c g     F .text	000000f8 __floatsidf
0000daec g     F .text	00000098 alt_io_redirect
0000ace4 g     F .text	00000088 __ltdf2
0000cb80 g     F .text	0000004c alt_up_rs232_read_data
000021f4 g     F .text	00000014 puts
00007a10 g     F .text	000000b0 __ratio
0000d898 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000c448 g     F .text	00000168 altera_avalon_jtag_uart_read
00002120 g     F .text	00000034 _printf_r
00001f94 g     F .text	00000008 __udivsi3
0000b7c8 g     F .text	00000084 isatty
0000eb2c g     O .rodata	000000c8 __mprec_tens
0000d27c g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00006b58 g     F .text	00000008 __locale_charset
0000dfcc g     F .text	0000003c alt_icache_flush
0001272c g     O .bss	00000004 __malloc_top_pad
000109f8 g     O .rwdata	00000004 __mb_cur_max
00006b60 g     F .text	0000000c _localeconv_r
0000832c g     F .text	0000003c __i2b
0000653c g     F .text	0000049c __sfvwrite_r
00008d0c g     F .text	00000070 _sbrk_r
0000cea0 g     F .text	0000005c helper_plot_pixel
000093a0 g     F .text	00000078 _read_r
0000f140 g     O .rwdata	0000000c __lc_ctype
00010a18 g     O .rwdata	00000004 alt_max_fd
0000cb54 g     F .text	0000000c alt_up_rs232_check_parity
0000b464 g     F .text	00000138 __unpack_d
00009120 g     F .text	00000110 _fclose_r
0000c7ec g     F .text	00000008 read_num_bytes_available
00005e08 g     F .text	00000034 fflush
00012730 g     O .bss	00000004 __malloc_max_sbrked_mem
0000db84 g     F .text	000000bc alt_irq_register
0000c7cc g     F .text	0000000c read_RI_bit
0000a434 g     F .text	00000074 __adddf3
000078f0 g     F .text	00000120 __b2d
0000d704 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
000099f4 g     F .text	000005b0 __umoddi3
0000b910 g     F .text	00000098 lseek
000109f4 g     O .rwdata	00000004 _global_impure_ptr
000086a8 g     F .text	000005f4 _realloc_r
0001287c g       *ABS*	00000000 __bss_end
0000d4c0 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
0000ddf0 g     F .text	000000ac alt_tick
00009418 g     F .text	000005dc __udivdi3
0000ebf4 g     O .rodata	00000028 __mprec_bigtens
00008588 g     F .text	00000120 __s2b
0000af3c g     F .text	00000194 __floatunsidf
00007810 g     F .text	00000060 __mcmp
0000c800 g     F .text	00000008 read_data_byte
00005f70 g     F .text	00000018 __fp_lock_all
0000ddbc g     F .text	00000034 alt_alarm_stop
0000c7d8 g     F .text	00000008 read_RE_bit
00012748 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
0000f554 g     O .rwdata	00000028 alt_dev_null
0000c7ac g     F .text	00000020 alt_up_parallel_port_open_dev
0000c9b4 g     F .text	00000040 alt_up_ps2_write_data_byte
0000d984 g     F .text	00000004 alt_dcache_flush_all
000076dc g     F .text	00000070 __hi0bits
0000d3f0 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
0000ae64 g     F .text	000000d8 __fixdfsi
00010a30 g       *ABS*	00000000 __ram_rwdata_end
00010a10 g     O .rwdata	00000008 alt_dev_list
0000bd70 g     F .text	000000f4 write
0000e1b8 g     F .text	000000e8 _putc_r
0000cefc g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
0000ed40 g       *ABS*	00000000 __ram_rodata_end
0000b748 g     F .text	00000080 fstat
0000cc74 g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00008468 g     F .text	00000120 __pow5mult
00012720 g     O .bss	00000004 __nlocale_changed
00001f9c g     F .text	00000008 __umodsi3
0001287c g       *ABS*	00000000 end
0000c9f4 g     F .text	00000070 alt_up_ps2_write_fd
0000ce50 g     F .text	00000050 alt_up_char_buffer_init
0000c228 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
000001f0 g     F .text	000000c0 HEX_PS2
0000c72c g     F .text	00000044 alt_avalon_timer_sc_init
0000b0d0 g     F .text	00000080 __clzsi2
0000c5b0 g     F .text	0000017c altera_avalon_jtag_uart_write
00005e94 g     F .text	00000004 __sfp_lock_acquire
000074f0 g     F .text	000000e4 memchr
00002434 g     F .text	00001eac ___vfprintf_internal_r
0000227c g     F .text	00000060 _sprintf_r
00006228 g     F .text	00000314 _free_r
0000ba00 g     F .text	000001dc alt_printf
0000e3f0 g     F .text	000001b0 __call_exitprocs
00012724 g     O .bss	00000004 __mlocale_changed
00010a04 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
0001274c g     O .bss	00000004 _alt_tick_rate
00007ff8 g     F .text	0000014c __lshift
00012750 g     O .bss	00000004 _alt_nticks
0000bc04 g     F .text	000000f8 read
0000be84 g     F .text	00000280 alt_sys_init
0000c828 g     F .text	00000030 alt_up_ps2_clear_fifo
0000cc4c g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
000001a4 g     F .text	0000004c VGA_box
00008144 g     F .text	000001e8 __multiply
0000c19c g     F .text	00000038 altera_avalon_jtag_uart_close
0000ed40 g       *ABS*	00000000 __ram_rwdata_start
0000e67c g       *ABS*	00000000 __ram_rodata_start
00012754 g     O .bss	00000028 __malloc_current_mallinfo
00007cf0 g     F .text	0000017c __d2b
0000c174 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000df60 g     F .text	0000006c alt_get_fd
0000b59c g     F .text	000000c8 __fpcmp_parts_d
000090b0 g     F .text	00000070 _close_r
0000e040 g     F .text	00000074 memcmp
0000c124 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
0001287c g       *ABS*	00000000 __alt_stack_base
0000c104 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00004304 g     F .text	0000013c __swsetup_r
0000a86c g     F .text	00000258 __divdf3
0000600c g     F .text	000000f0 __sfp
00007b54 g     F .text	00000058 __copybits
0000f14c g     O .rwdata	00000408 __malloc_av_
00005ea0 g     F .text	00000004 __sinit_lock_release
0000a4a8 g     F .text	000003c4 __muldf3
00008e68 g     F .text	00000060 __sread
0000cce4 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
0000dea4 g     F .text	000000bc alt_find_file
0000d988 g     F .text	00000070 alt_dev_llist_insert
0000b9f8 g     F .text	00000004 __malloc_lock
0000bd20 g     F .text	00000050 sbrk
00005c0c g     F .text	000001fc _fflush_r
00008ffc g     F .text	000000b4 _calloc_r
00012720 g       *ABS*	00000000 __bss_start
00002044 g     F .text	00000098 memset
000002b0 g     F .text	00000e3c main
00012744 g     O .bss	00000004 alt_envp
00012734 g     O .bss	00000004 __malloc_max_total_mem
0000d7b8 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0000ce30 g     F .text	00000020 alt_up_char_buffer_open_dev
0000c14c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
0000e3d0 g     F .text	0000001c __swbuf
00008d7c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009230 g     F .text	00000014 fclose
0000c858 g     F .text	00000058 alt_up_ps2_read_data_byte
00004658 g     F .text	000015b4 _dtoa_r
00006db0 g     F .text	00000740 _malloc_r
00010a1c g     O .rwdata	00000004 alt_errno
00006aa0 g     F .text	000000b8 _fwalk
0000c808 g     F .text	00000020 alt_up_ps2_open_dev
0000e0b4 g     F .text	00000104 putc
00001ed4 g     F .text	00000060 __divsi3
0000ec50 g     O .rodata	00000014 __thenan_df
000060fc g     F .text	0000012c _malloc_trim_r
0000cb3c g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00008ec8 g     F .text	000000bc strcmp
0000e67c g       *ABS*	00000000 __flash_rodata_start
0000cb60 g     F .text	00000020 alt_up_rs232_open_dev
0000ab4c g     F .text	00000088 __nedf2
0000be64 g     F .text	00000020 alt_irq_init
0000bcfc g     F .text	00000024 alt_release_fd
0000c7f4 g     F .text	0000000c read_data_valid
00002208 g     F .text	00000074 sprintf
0000e958 g     O .rodata	00000100 __clz_tab
00012728 g     O .bss	00000004 _PathLocale
0000ca64 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00008f84 g     F .text	00000078 _write_r
00006c00 g     F .text	0000001c setlocale
000109f0 g     O .rwdata	00000004 _impure_ptr
0001273c g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00007870 g     F .text	00000080 __ulp
00008c9c g     F .text	00000040 __isinfd
00005f58 g     F .text	00000018 __fp_unlock_all
00010a08 g     O .rwdata	00000008 alt_fs_list
0000cd00 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0000cc5c g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006b6c g     F .text	00000010 localeconv
00010a30 g       *ABS*	00000000 _edata
0001287c g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
0000c3d4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00008dec g     F .text	0000007c __swrite
00010a00 g     O .rwdata	00000004 __malloc_trim_threshold
0000de9c g     F .text	00000008 altera_nios2_qsys_irq_init
0000e008 g     F .text	00000038 exit
000069d8 g     F .text	000000c8 _fwalk_reent
0000ca98 g     F .text	00000088 alt_up_ps2_init
00007e6c g     F .text	0000018c __mdiff
00001f34 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005e98 g     F .text	00000004 __sfp_lock_release
00001804 g     F .text	00000654 __moddi3
0000e5a0 g     F .text	00000014 _exit
00008cdc g     F .text	00000030 __isnand
0000d8f0 g     F .text	00000094 alt_alarm_start
000010ec g     F .text	00000098 __muldi3
00006c1c g     F .text	00000194 __smakebuf_r
0000c958 g     F .text	0000005c alt_up_ps2_wait_for_ack
00002368 g     F .text	00000074 strlen
0000dc40 g     F .text	0000017c open
0000ac5c g     F .text	00000088 __gedf2
0000bbdc g     F .text	00000028 alt_putchar
0000da68 g     F .text	00000020 alt_icache_flush_all
00010a24 g     O .rwdata	00000004 alt_priority_mask
000042e0 g     F .text	00000024 __vfprintf_internal
0000c930 g     F .text	00000028 alt_up_ps2_read_fd
0000a3b4 g     F .text	00000080 __subdf3
0000774c g     F .text	000000c4 __lo0bits
00010a28 g     O .rwdata	00000008 alt_alarm_list
0000cd18 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
0000b664 g     F .text	000000dc close
0000b84c g     F .text	000000c4 alt_load
0000b150 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00005e9c g     F .text	00000004 __sinit_lock_acquire
00008368 g     F .text	00000100 __multadd
000076b4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00808014 	movui	r2,512
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	8409df04 	addi	r16,r16,10108
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d6a27c14 	ori	gp,gp,35312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     17c:	1089c814 	ori	r2,r2,10016

    movhi r3, %hi(__bss_end)
     180:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     184:	18ca1f14 	ori	r3,r3,10364

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	000b84c0 	call	b84c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	000b9a80 	call	b9a8 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor 
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     1a4:	dac0000b 	ldhu	r11,0(sp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1a8:	39401016 	blt	r7,r5,1ec <VGA_box+0x48>
     1ac:	03000044 	movi	r12,1
     1b0:	00000c06 	br	1e4 <VGA_box+0x40>
     1b4:	2007883a 	mov	r3,r4
     1b8:	2810927a 	slli	r8,r5,9
     1bc:	02820034 	movhi	r10,2048
     1c0:	02400044 	movi	r9,1
	{
		col = x1;
		while (col <= x2)
		{
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     1c4:	40c5883a 	add	r2,r8,r3
     1c8:	1085883a 	add	r2,r2,r2
     1cc:	1285883a 	add	r2,r2,r10
     1d0:	12c0000d 	sth	r11,0(r2)
			++col;
     1d4:	1a47883a 	add	r3,r3,r9

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     1d8:	30fffa0e 	bge	r6,r3,1c4 <VGA_box+0x20>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     1dc:	2b0b883a 	add	r5,r5,r12
     1e0:	39400216 	blt	r7,r5,1ec <VGA_box+0x48>
	{
		col = x1;
		while (col <= x2)
     1e4:	313ff30e 	bge	r6,r4,1b4 <VGA_box+0x10>
     1e8:	003ffc06 	br	1dc <VGA_box+0x38>
     1ec:	f800283a 	ret

000001f0 <HEX_PS2>:

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2)
{
     1f0:	defff704 	addi	sp,sp,-36
     1f4:	dfc00815 	stw	ra,32(sp)
     1f8:	dc800715 	stw	r18,28(sp)
     1fc:	dc400615 	stw	r17,24(sp)
     200:	dc000515 	stw	r16,20(sp)
     204:	2021883a 	mov	r16,r4
     208:	2823883a 	mov	r17,r5
	volatile int * HEX3_HEX0_ptr = (int *) 0x10000020;

	// SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in 
	// a single 7-seg display in the DE1 Media Computer, for the hex digits 0 - F */
	char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
     20c:	04800404 	movi	r18,16
     210:	d809883a 	mov	r4,sp
     214:	01400074 	movhi	r5,1
     218:	297a5204 	addi	r5,r5,-5816
     21c:	900d883a 	mov	r6,r18
     220:	0001fa40 	call	1fa4 <memcpy>
	char	hex_segs[] = { 0, 0, 0, 0};
	int shift_buffer, nibble;
	char code;
	int i;

	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
     224:	84003fcc 	andi	r16,r16,255
     228:	8020923a 	slli	r16,r16,8
     22c:	8c403fcc 	andi	r17,r17,255
     230:	8460b03a 	or	r16,r16,r17
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     234:	00c003c4 	movi	r3,15
     238:	80c4703a 	and	r2,r16,r3
     23c:	d885883a 	add	r2,sp,r2
     240:	10800003 	ldbu	r2,0(r2)
     244:	d8800405 	stb	r2,16(sp)
		shift_buffer = shift_buffer >> 4;
     248:	8005d13a 	srai	r2,r16,4
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     24c:	10c4703a 	and	r2,r2,r3
     250:	d885883a 	add	r2,sp,r2
     254:	10800003 	ldbu	r2,0(r2)
     258:	d8800445 	stb	r2,17(sp)
		shift_buffer = shift_buffer >> 4;
     25c:	8005d23a 	srai	r2,r16,8
	shift_buffer = ((b1 & 0xFF) << 8) | (b2 & (0xFF));
	for ( i = 0; i < 4; ++i )
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
     260:	10c4703a 	and	r2,r2,r3
     264:	d885883a 	add	r2,sp,r2
     268:	10800003 	ldbu	r2,0(r2)
     26c:	d8800485 	stb	r2,18(sp)
     270:	8021d33a 	srai	r16,r16,12
     274:	80e0703a 	and	r16,r16,r3
     278:	dc05883a 	add	r2,sp,r16
     27c:	10800003 	ldbu	r2,0(r2)
     280:	d88004c5 	stb	r2,19(sp)
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
     284:	dc85883a 	add	r2,sp,r18
     288:	10c00017 	ldw	r3,0(r2)
     28c:	00840034 	movhi	r2,4096
     290:	10800804 	addi	r2,r2,32
     294:	10c00015 	stw	r3,0(r2)
}  
     298:	dfc00817 	ldw	ra,32(sp)
     29c:	dc800717 	ldw	r18,28(sp)
     2a0:	dc400617 	ldw	r17,24(sp)
     2a4:	dc000517 	ldw	r16,20(sp)
     2a8:	dec00904 	addi	sp,sp,36
     2ac:	f800283a 	ret

000002b0 <main>:
 * 	   the box
 * 	4. Displays the last two bytes of data received from the PS/2 port 
 * 	   on the HEX displays on the DE1 board
********************************************************************************/
int main(void)
{
     2b0:	defca704 	addi	sp,sp,-3428
     2b4:	dfc35815 	stw	ra,3424(sp)
     2b8:	df035715 	stw	fp,3420(sp)
     2bc:	ddc35615 	stw	r23,3416(sp)
     2c0:	dd835515 	stw	r22,3412(sp)
     2c4:	dd435415 	stw	r21,3408(sp)
     2c8:	dd035315 	stw	r20,3404(sp)
     2cc:	dcc35215 	stw	r19,3400(sp)
     2d0:	dc835115 	stw	r18,3396(sp)
     2d4:	dc435015 	stw	r17,3392(sp)
     2d8:	dc034f15 	stw	r16,3388(sp)
     2dc:	0005883a 	mov	r2,zero
     2e0:	d8834515 	stw	r2,3348(sp)
     2e4:	d8834615 	stw	r2,3352(sp)
	alt_up_parallel_port_dev *green_LEDs_dev;
	alt_up_parallel_port_dev *KEY_dev;
	alt_up_ps2_dev * PS2_dev;
	alt_up_char_buffer_dev * char_buffer_dev;
    alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     2e8:	01000074 	movhi	r4,1
     2ec:	21399f04 	addi	r4,r4,-6532
     2f0:	000d8d00 	call	d8d0 <alt_up_pixel_buffer_dma_open_dev>
     2f4:	1021883a 	mov	r16,r2
	if ( pixel_buffer_dev == NULL)
     2f8:	1000041e 	bne	r2,zero,30c <main+0x5c>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     2fc:	01000074 	movhi	r4,1
     300:	2139a504 	addi	r4,r4,-6508
     304:	000ba000 	call	ba00 <alt_printf>
     308:	00000306 	br	318 <main+0x68>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     30c:	01000074 	movhi	r4,1
     310:	2139b104 	addi	r4,r4,-6460
     314:	000ba000 	call	ba00 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     318:	8009883a 	mov	r4,r16
     31c:	000b883a 	mov	r5,zero
     320:	000d7040 	call	d704 <alt_up_pixel_buffer_dma_clear_screen>
     324:	d8802444 	addi	r2,sp,145
     328:	01001404 	movi	r4,80
     32c:	d8c34444 	addi	r3,sp,3345
	char text_bottom_row[40] = "Media Computer\0";
	char str[100] = "press y to continue\0";
	char display_vga[40][80];
	int count = 0,i = 0,j = 0,init=0;
	for(init=0;init<40;init++)
	 display_vga[init][0] = '\0';
     330:	10000005 	stb	zero,0(r2)
     334:	1105883a 	add	r2,r2,r4
	char text_top_row[40] = "Altera DE1\0";
	char text_bottom_row[40] = "Media Computer\0";
	char str[100] = "press y to continue\0";
	char display_vga[40][80];
	int count = 0,i = 0,j = 0,init=0;
	for(init=0;init<40;init++)
     338:	10fffd1e 	bne	r2,r3,330 <main+0x80>
    KB_CODE_TYPE decode_mode;
	alt_u8 buf;
	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE1\0";
	char text_bottom_row[40] = "Media Computer\0";
	char str[100] = "press y to continue\0";
     33c:	d9000b44 	addi	r4,sp,45
     340:	01400074 	movhi	r5,1
     344:	297a3904 	addi	r5,r5,-5916
     348:	01800544 	movi	r6,21
     34c:	0001fa40 	call	1fa4 <memcpy>
     350:	d9001084 	addi	r4,sp,66
     354:	000b883a 	mov	r5,zero
     358:	018013c4 	movi	r6,79
     35c:	00020440 	call	2044 <memset>
	int count = 0,i = 0,j = 0,init=0;
	for(init=0;init<40;init++)
	 display_vga[init][0] = '\0';
    char key,key2,arith;
	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     360:	01000074 	movhi	r4,1
     364:	2139bc04 	addi	r4,r4,-6416
     368:	000ce300 	call	ce30 <alt_up_char_buffer_open_dev>
     36c:	d8834e15 	stw	r2,3384(sp)
	if ( char_buffer_dev == NULL)
     370:	1000041e 	bne	r2,zero,384 <main+0xd4>
	{
		alt_printf ("Error: could not open character buffer device\n");
     374:	01000074 	movhi	r4,1
     378:	2139c204 	addi	r4,r4,-6392
     37c:	000ba000 	call	ba00 <alt_printf>
     380:	00034d06 	br	10b8 <main+0xe08>
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     384:	01000074 	movhi	r4,1
     388:	2139ce04 	addi	r4,r4,-6344
     38c:	000ba000 	call	ba00 <alt_printf>
	
	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     390:	01000074 	movhi	r4,1
     394:	2139d604 	addi	r4,r4,-6312
     398:	000c8080 	call	c808 <alt_up_ps2_open_dev>
     39c:	102d883a 	mov	r22,r2
	if ( PS2_dev == NULL)
     3a0:	1000041e 	bne	r2,zero,3b4 <main+0x104>
	{
		alt_printf ("Error: could not open PS2 device\n");
     3a4:	01000074 	movhi	r4,1
     3a8:	2139da04 	addi	r4,r4,-6296
     3ac:	000ba000 	call	ba00 <alt_printf>
     3b0:	00034106 	br	10b8 <main+0xe08>
		return -1;
	}
	else
		alt_printf ("Opened PS2 device\n");
     3b4:	01000074 	movhi	r4,1
     3b8:	2139e304 	addi	r4,r4,-6260
     3bc:	000ba000 	call	ba00 <alt_printf>

	// open the pushbutton KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     3c0:	01000074 	movhi	r4,1
     3c4:	2139e804 	addi	r4,r4,-6240
     3c8:	000c7ac0 	call	c7ac <alt_up_parallel_port_open_dev>
	if ( KEY_dev == NULL)
     3cc:	1000041e 	bne	r2,zero,3e0 <main+0x130>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     3d0:	01000074 	movhi	r4,1
     3d4:	2139ed04 	addi	r4,r4,-6220
     3d8:	000ba000 	call	ba00 <alt_printf>
     3dc:	00033606 	br	10b8 <main+0xe08>
		return -1;
	}
	else
		alt_printf ("Opened pushbutton KEY device\n");
     3e0:	01000074 	movhi	r4,1
     3e4:	2139f904 	addi	r4,r4,-6172
     3e8:	000ba000 	call	ba00 <alt_printf>

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     3ec:	01000074 	movhi	r4,1
     3f0:	213a0104 	addi	r4,r4,-6140
     3f4:	000c7ac0 	call	c7ac <alt_up_parallel_port_open_dev>
	if (green_LEDs_dev == NULL)
     3f8:	1000041e 	bne	r2,zero,40c <main+0x15c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     3fc:	01000074 	movhi	r4,1
     400:	213a0504 	addi	r4,r4,-6124
     404:	000ba000 	call	ba00 <alt_printf>
     408:	00032b06 	br	10b8 <main+0xe08>
		return -1;
	}
	else
		alt_printf ("Opened green LEDs device\n");
     40c:	01000074 	movhi	r4,1
     410:	213a1004 	addi	r4,r4,-6080
     414:	000ba000 	call	ba00 <alt_printf>

	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     418:	b009883a 	mov	r4,r22
     41c:	01403fc4 	movi	r5,255
     420:	000c9b40 	call	c9b4 <alt_up_ps2_write_data_byte>
     424:	002f883a 	mov	r23,zero
     428:	0021883a 	mov	r16,zero
     42c:	0029883a 	mov	r20,zero
     430:	002b883a 	mov	r21,zero
     434:	0025883a 	mov	r18,zero
     438:	0027883a 	mov	r19,zero
     43c:	0007883a 	mov	r3,zero
     440:	d8c34c15 	stw	r3,3376(sp)
     444:	d8c34d15 	stw	r3,3380(sp)
     448:	d8c34a15 	stw	r3,3368(sp)
     44c:	d8c34b15 	stw	r3,3372(sp)
     450:	d8c34815 	stw	r3,3360(sp)
     454:	d8c34915 	stw	r3,3364(sp)
     458:	0039883a 	mov	fp,zero
     45c:	00000206 	br	468 <main+0x1b8>
     460:	05fffc04 	movi	r23,-16
     464:	2021883a 	mov	r16,r4
	while(1)
	{
	    
  		if (alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
     468:	b009883a 	mov	r4,r22
     46c:	d9400b04 	addi	r5,sp,44
     470:	000c8580 	call	c858 <alt_up_ps2_read_data_byte>
     474:	10000226 	beq	r2,zero,480 <main+0x1d0>
     478:	8009883a 	mov	r4,r16
     47c:	003ff906 	br	464 <main+0x1b4>
		{
		   
	//		 shift the next data byte into the display 
			byte1 = byte2;
			byte2 = byte3;
			byte3 = PS2_data;
     480:	d9000b03 	ldbu	r4,44(sp)
		//	alt_printf("byte1 is %x byte2 is %x byte3 is %x\n",byte1,byte2,byte3);
            if(byte2==240 && byte1==byte3)
     484:	80c03fcc 	andi	r3,r16,255
     488:	00803c04 	movi	r2,240
     48c:	18800226 	beq	r3,r2,498 <main+0x1e8>
     490:	802f883a 	mov	r23,r16
     494:	003ff306 	br	464 <main+0x1b4>
     498:	b8c03fcc 	andi	r3,r23,255
     49c:	20803fcc 	andi	r2,r4,255
     4a0:	18bfef1e 	bne	r3,r2,460 <main+0x1b0>
            {
			   switch(byte1)
     4a4:	b8bffa84 	addi	r2,r23,-22
     4a8:	10c03fcc 	andi	r3,r2,255
     4ac:	00801984 	movi	r2,102
     4b0:	10c06e36 	bltu	r2,r3,66c <main+0x3bc>
     4b4:	18c5883a 	add	r2,r3,r3
     4b8:	1085883a 	add	r2,r2,r2
     4bc:	00c00034 	movhi	r3,0
     4c0:	18c13404 	addi	r3,r3,1232
     4c4:	10c5883a 	add	r2,r2,r3
     4c8:	10800017 	ldw	r2,0(r2)
     4cc:	1000683a 	jmp	r2
     4d0:	00000848 	cmpgei	zero,zero,33
     4d4:	0000066c 	andhi	zero,zero,25
     4d8:	0000066c 	andhi	zero,zero,25
     4dc:	0000066c 	andhi	zero,zero,25
     4e0:	0000066c 	andhi	zero,zero,25
     4e4:	0000066c 	andhi	zero,zero,25
     4e8:	0000066c 	andhi	zero,zero,25
     4ec:	0000066c 	andhi	zero,zero,25
     4f0:	000008e0 	cmpeqi	zero,zero,35
     4f4:	0000066c 	andhi	zero,zero,25
     4f8:	0000066c 	andhi	zero,zero,25
     4fc:	0000066c 	andhi	zero,zero,25
     500:	0000066c 	andhi	zero,zero,25
     504:	0000066c 	andhi	zero,zero,25
     508:	0000066c 	andhi	zero,zero,25
     50c:	00000a10 	cmplti	zero,zero,40
     510:	00000978 	rdprs	zero,zero,37
     514:	0000066c 	andhi	zero,zero,25
     518:	0000066c 	andhi	zero,zero,25
     51c:	00000678 	rdprs	zero,zero,25
     520:	0000066c 	andhi	zero,zero,25
     524:	0000066c 	andhi	zero,zero,25
     528:	0000066c 	andhi	zero,zero,25
     52c:	0000066c 	andhi	zero,zero,25
     530:	00000aa8 	cmpgeui	zero,zero,42
     534:	0000066c 	andhi	zero,zero,25
     538:	0000066c 	andhi	zero,zero,25
     53c:	0000066c 	andhi	zero,zero,25
     540:	0000066c 	andhi	zero,zero,25
     544:	0000066c 	andhi	zero,zero,25
     548:	0000066c 	andhi	zero,zero,25
     54c:	000010a0 	cmpeqi	zero,zero,66
     550:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     554:	0000066c 	andhi	zero,zero,25
     558:	0000066c 	andhi	zero,zero,25
     55c:	0000066c 	andhi	zero,zero,25
     560:	0000066c 	andhi	zero,zero,25
     564:	0000066c 	andhi	zero,zero,25
     568:	0000066c 	andhi	zero,zero,25
     56c:	00000bd8 	cmpnei	zero,zero,47
     570:	00000c70 	cmpltui	zero,zero,49
     574:	0000066c 	andhi	zero,zero,25
     578:	0000066c 	andhi	zero,zero,25
     57c:	0000066c 	andhi	zero,zero,25
     580:	0000066c 	andhi	zero,zero,25
     584:	0000066c 	andhi	zero,zero,25
     588:	0000066c 	andhi	zero,zero,25
     58c:	000007d8 	cmpnei	zero,zero,31
     590:	00000d08 	cmpgei	zero,zero,52
     594:	0000066c 	andhi	zero,zero,25
     598:	0000066c 	andhi	zero,zero,25
     59c:	0000066c 	andhi	zero,zero,25
     5a0:	000007b0 	cmpltui	zero,zero,30
     5a4:	0000066c 	andhi	zero,zero,25
     5a8:	0000066c 	andhi	zero,zero,25
     5ac:	0000066c 	andhi	zero,zero,25
     5b0:	0000066c 	andhi	zero,zero,25
     5b4:	0000066c 	andhi	zero,zero,25
     5b8:	0000066c 	andhi	zero,zero,25
     5bc:	0000066c 	andhi	zero,zero,25
     5c0:	0000066c 	andhi	zero,zero,25
     5c4:	0000066c 	andhi	zero,zero,25
     5c8:	0000066c 	andhi	zero,zero,25
     5cc:	0000066c 	andhi	zero,zero,25
     5d0:	0000066c 	andhi	zero,zero,25
     5d4:	0000066c 	andhi	zero,zero,25
     5d8:	0000066c 	andhi	zero,zero,25
     5dc:	0000066c 	andhi	zero,zero,25
     5e0:	000006a8 	cmpgeui	zero,zero,26
     5e4:	0000066c 	andhi	zero,zero,25
     5e8:	0000066c 	andhi	zero,zero,25
     5ec:	0000066c 	andhi	zero,zero,25
     5f0:	0000066c 	andhi	zero,zero,25
     5f4:	0000066c 	andhi	zero,zero,25
     5f8:	0000066c 	andhi	zero,zero,25
     5fc:	0000066c 	andhi	zero,zero,25
     600:	0000066c 	andhi	zero,zero,25
     604:	0000066c 	andhi	zero,zero,25
     608:	0000066c 	andhi	zero,zero,25
     60c:	0000066c 	andhi	zero,zero,25
     610:	0000066c 	andhi	zero,zero,25
     614:	0000066c 	andhi	zero,zero,25
     618:	0000066c 	andhi	zero,zero,25
     61c:	0000066c 	andhi	zero,zero,25
     620:	0000066c 	andhi	zero,zero,25
     624:	0000066c 	andhi	zero,zero,25
     628:	0000066c 	andhi	zero,zero,25
     62c:	0000066c 	andhi	zero,zero,25
     630:	0000066c 	andhi	zero,zero,25
     634:	0000066c 	andhi	zero,zero,25
     638:	0000066c 	andhi	zero,zero,25
     63c:	0000066c 	andhi	zero,zero,25
     640:	0000066c 	andhi	zero,zero,25
     644:	0000066c 	andhi	zero,zero,25
     648:	0000066c 	andhi	zero,zero,25
     64c:	0000066c 	andhi	zero,zero,25
     650:	0000066c 	andhi	zero,zero,25
     654:	0000066c 	andhi	zero,zero,25
     658:	0000066c 	andhi	zero,zero,25
     65c:	00000738 	rdprs	zero,zero,28
     660:	0000066c 	andhi	zero,zero,25
     664:	00000760 	cmpeqi	zero,zero,29
     668:	00000788 	cmpgei	zero,zero,30
     66c:	04000044 	movi	r16,1
     670:	0023883a 	mov	r17,zero
     674:	0001c906 	br	d9c <main+0xaec>
			   {
			    case 41:
				printf("space entered\n");
     678:	01000074 	movhi	r4,1
     67c:	213a1704 	addi	r4,r4,-6052
     680:	00021f40 	call	21f4 <puts>
     684:	01000804 	movi	r4,32
     688:	d9034745 	stb	r4,3357(sp)
     68c:	00800044 	movi	r2,1
     690:	d8834a15 	stw	r2,3368(sp)
     694:	0007883a 	mov	r3,zero
     698:	d8c34b15 	stw	r3,3372(sp)
     69c:	0021883a 	mov	r16,zero
     6a0:	0023883a 	mov	r17,zero
     6a4:	0001bd06 	br	d9c <main+0xaec>
                 key = ' ';      // space 
				 flag1 = 1;
				 break;
				case 90:
				 printf("enter pressed\n");
     6a8:	01000074 	movhi	r4,1
     6ac:	213a1b04 	addi	r4,r4,-6036
     6b0:	00021f40 	call	21f4 <puts>
                 break;
				 default:
				   def_flag=1;
				  break;
			   }
			   printf("op1 is %lld op2 is %lld\n",op1,op2);
     6b4:	dcc00015 	stw	r19,0(sp)
     6b8:	900f883a 	mov	r7,r18
     6bc:	01000074 	movhi	r4,1
     6c0:	213a1f04 	addi	r4,r4,-6020
     6c4:	a00b883a 	mov	r5,r20
     6c8:	a80d883a 	mov	r6,r21
     6cc:	00020dc0 	call	20dc <printf>
     6d0:	01000044 	movi	r4,1
     6d4:	d9034815 	stw	r4,3360(sp)
     6d8:	0005883a 	mov	r2,zero
     6dc:	d8834915 	stw	r2,3364(sp)
     6e0:	0021883a 	mov	r16,zero
     6e4:	0023883a 	mov	r17,zero
     6e8:	0001b806 	br	dcc <main+0xb1c>
                 break;
				case 53:
				 op1 =0 , op2 = 0;
				 for(i=0;i<40;i++)
				  for(j=0;j<80;j++)
				   display_vga[i][j]='\0';
     6ec:	20000005 	stb	zero,0(r4)
                 eval_flag = 1;  // enter
                 break;
				case 53:
				 op1 =0 , op2 = 0;
				 for(i=0;i<40;i++)
				  for(j=0;j<80;j++)
     6f0:	01400044 	movi	r5,1
     6f4:	1947883a 	add	r3,r3,r5
     6f8:	2149883a 	add	r4,r4,r5
     6fc:	00801404 	movi	r2,80
     700:	18bffa1e 	bne	r3,r2,6ec <main+0x43c>
				 printf("enter pressed\n");
                 eval_flag = 1;  // enter
                 break;
				case 53:
				 op1 =0 , op2 = 0;
				 for(i=0;i<40;i++)
     704:	e179883a 	add	fp,fp,r5
     708:	00800a04 	movi	r2,40
     70c:	e082651e 	bne	fp,r2,10a4 <main+0xdf4>
				  for(j=0;j<80;j++)
				   display_vga[i][j]='\0';
				  key = '\0'; 
				 alt_up_char_buffer_clear(char_buffer_dev);  
     710:	d9034e17 	ldw	r4,3384(sp)
     714:	000ce080 	call	ce08 <alt_up_char_buffer_clear>
     718:	d8034745 	stb	zero,3357(sp)
     71c:	0029883a 	mov	r20,zero
     720:	002b883a 	mov	r21,zero
     724:	0025883a 	mov	r18,zero
     728:	0027883a 	mov	r19,zero
     72c:	0021883a 	mov	r16,zero
     730:	0023883a 	mov	r17,zero
     734:	00019906 	br	d9c <main+0xaec>
                 break; 
				case 121:
                 key = '+';
                 arith = '+';
				 printf("arith is %c\n",arith);
     738:	04000ac4 	movi	r16,43
     73c:	01000074 	movhi	r4,1
     740:	213a2604 	addi	r4,r4,-5992
     744:	800b883a 	mov	r5,r16
     748:	00020dc0 	call	20dc <printf>
     74c:	dc034745 	stb	r16,3357(sp)
     750:	dc034705 	stb	r16,3356(sp)
     754:	0021883a 	mov	r16,zero
     758:	0023883a 	mov	r17,zero
     75c:	00018f06 	br	d9c <main+0xaec>
                 break; 
                case 123:
				 key = '-';
                 arith = '-';
				 printf("arith is %c\n",arith);
     760:	04000b44 	movi	r16,45
     764:	01000074 	movhi	r4,1
     768:	213a2604 	addi	r4,r4,-5992
     76c:	800b883a 	mov	r5,r16
     770:	00020dc0 	call	20dc <printf>
     774:	dc034745 	stb	r16,3357(sp)
     778:	dc034705 	stb	r16,3356(sp)
     77c:	0021883a 	mov	r16,zero
     780:	0023883a 	mov	r17,zero
     784:	00018506 	br	d9c <main+0xaec>
                 break; 
				case 124:
                 key = '*';
                 arith = '*';
				 printf("arith is %c\n",arith);
     788:	04000a84 	movi	r16,42
     78c:	01000074 	movhi	r4,1
     790:	213a2604 	addi	r4,r4,-5992
     794:	800b883a 	mov	r5,r16
     798:	00020dc0 	call	20dc <printf>
     79c:	dc034745 	stb	r16,3357(sp)
     7a0:	dc034705 	stb	r16,3356(sp)
     7a4:	0021883a 	mov	r16,zero
     7a8:	0023883a 	mov	r17,zero
     7ac:	00017b06 	br	d9c <main+0xaec>
                 break;
				case 74:
			     key = '/';
                 arith = '/';
				 printf("arith is %c\n",arith);
     7b0:	04000bc4 	movi	r16,47
     7b4:	01000074 	movhi	r4,1
     7b8:	213a2604 	addi	r4,r4,-5992
     7bc:	800b883a 	mov	r5,r16
     7c0:	00020dc0 	call	20dc <printf>
     7c4:	dc034745 	stb	r16,3357(sp)
     7c8:	dc034705 	stb	r16,3356(sp)
     7cc:	0021883a 	mov	r16,zero
     7d0:	0023883a 	mov	r17,zero
     7d4:	00017106 	br	d9c <main+0xaec>
                 break;
			    case 69:
				  key = '0';
				  if(flag1==0)
     7d8:	d8c34a17 	ldw	r3,3368(sp)
     7dc:	d9034b17 	ldw	r4,3372(sp)
     7e0:	1904b03a 	or	r2,r3,r4
     7e4:	10000c1e 	bne	r2,zero,818 <main+0x568>
				    op1 = op1*10;
     7e8:	01800284 	movi	r6,10
     7ec:	000f883a 	mov	r7,zero
     7f0:	a009883a 	mov	r4,r20
     7f4:	a80b883a 	mov	r5,r21
     7f8:	00010ec0 	call	10ec <__muldi3>
     7fc:	1029883a 	mov	r20,r2
     800:	182b883a 	mov	r21,r3
     804:	00800c04 	movi	r2,48
     808:	d8834745 	stb	r2,3357(sp)
     80c:	0021883a 	mov	r16,zero
     810:	0023883a 	mov	r17,zero
     814:	00016106 	br	d9c <main+0xaec>
				  else 
				    op2 = op2*10;
     818:	01800284 	movi	r6,10
     81c:	000f883a 	mov	r7,zero
     820:	9009883a 	mov	r4,r18
     824:	980b883a 	mov	r5,r19
     828:	00010ec0 	call	10ec <__muldi3>
     82c:	1025883a 	mov	r18,r2
     830:	1827883a 	mov	r19,r3
     834:	00c00c04 	movi	r3,48
     838:	d8c34745 	stb	r3,3357(sp)
     83c:	0021883a 	mov	r16,zero
     840:	0023883a 	mov	r17,zero
     844:	00015506 	br	d9c <main+0xaec>
				   break;	
			    case 22:
				  key = '1';
                  if(flag1==0)
     848:	d9034a17 	ldw	r4,3368(sp)
     84c:	d8c34b17 	ldw	r3,3372(sp)
     850:	20c4b03a 	or	r2,r4,r3
     854:	1000111e 	bne	r2,zero,89c <main+0x5ec>
				    op1 = op1*10 + 1;
     858:	01800284 	movi	r6,10
     85c:	000f883a 	mov	r7,zero
     860:	a009883a 	mov	r4,r20
     864:	a80b883a 	mov	r5,r21
     868:	00010ec0 	call	10ec <__muldi3>
     86c:	100d883a 	mov	r6,r2
     870:	01000044 	movi	r4,1
     874:	1105883a 	add	r2,r2,r4
     878:	1189803a 	cmpltu	r4,r2,r6
     87c:	20c9883a 	add	r4,r4,r3
     880:	1029883a 	mov	r20,r2
     884:	202b883a 	mov	r21,r4
     888:	01000c44 	movi	r4,49
     88c:	d9034745 	stb	r4,3357(sp)
     890:	0021883a 	mov	r16,zero
     894:	0023883a 	mov	r17,zero
     898:	00014006 	br	d9c <main+0xaec>
				  else 
				    op2 = op2*10 + 1;
     89c:	01800284 	movi	r6,10
     8a0:	000f883a 	mov	r7,zero
     8a4:	9009883a 	mov	r4,r18
     8a8:	980b883a 	mov	r5,r19
     8ac:	00010ec0 	call	10ec <__muldi3>
     8b0:	100d883a 	mov	r6,r2
     8b4:	01000044 	movi	r4,1
     8b8:	1105883a 	add	r2,r2,r4
     8bc:	1189803a 	cmpltu	r4,r2,r6
     8c0:	20c9883a 	add	r4,r4,r3
     8c4:	1025883a 	mov	r18,r2
     8c8:	2027883a 	mov	r19,r4
     8cc:	00800c44 	movi	r2,49
     8d0:	d8834745 	stb	r2,3357(sp)
     8d4:	0021883a 	mov	r16,zero
     8d8:	0023883a 	mov	r17,zero
     8dc:	00012f06 	br	d9c <main+0xaec>
				  break;	
				case 30:
				  key = '2';
				   if(flag1==0)
     8e0:	d8c34a17 	ldw	r3,3368(sp)
     8e4:	d9034b17 	ldw	r4,3372(sp)
     8e8:	1904b03a 	or	r2,r3,r4
     8ec:	1000111e 	bne	r2,zero,934 <main+0x684>
				    op1 = op1*10 + 2;
     8f0:	01800284 	movi	r6,10
     8f4:	000f883a 	mov	r7,zero
     8f8:	a009883a 	mov	r4,r20
     8fc:	a80b883a 	mov	r5,r21
     900:	00010ec0 	call	10ec <__muldi3>
     904:	100d883a 	mov	r6,r2
     908:	01000084 	movi	r4,2
     90c:	1105883a 	add	r2,r2,r4
     910:	1189803a 	cmpltu	r4,r2,r6
     914:	20c9883a 	add	r4,r4,r3
     918:	1029883a 	mov	r20,r2
     91c:	202b883a 	mov	r21,r4
     920:	00800c84 	movi	r2,50
     924:	d8834745 	stb	r2,3357(sp)
     928:	0021883a 	mov	r16,zero
     92c:	0023883a 	mov	r17,zero
     930:	00011a06 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 2;
     934:	01800284 	movi	r6,10
     938:	000f883a 	mov	r7,zero
     93c:	9009883a 	mov	r4,r18
     940:	980b883a 	mov	r5,r19
     944:	00010ec0 	call	10ec <__muldi3>
     948:	100d883a 	mov	r6,r2
     94c:	01000084 	movi	r4,2
     950:	1105883a 	add	r2,r2,r4
     954:	1189803a 	cmpltu	r4,r2,r6
     958:	20c9883a 	add	r4,r4,r3
     95c:	1025883a 	mov	r18,r2
     960:	2027883a 	mov	r19,r4
     964:	00c00c84 	movi	r3,50
     968:	d8c34745 	stb	r3,3357(sp)
     96c:	0021883a 	mov	r16,zero
     970:	0023883a 	mov	r17,zero
     974:	00010906 	br	d9c <main+0xaec>
				 break;
				case 38:
				  key = '3';
				  if(flag1==0)
     978:	d9034a17 	ldw	r4,3368(sp)
     97c:	d8c34b17 	ldw	r3,3372(sp)
     980:	20c4b03a 	or	r2,r4,r3
     984:	1000111e 	bne	r2,zero,9cc <main+0x71c>
				    op1 = op1*10 + 3;
     988:	01800284 	movi	r6,10
     98c:	000f883a 	mov	r7,zero
     990:	a009883a 	mov	r4,r20
     994:	a80b883a 	mov	r5,r21
     998:	00010ec0 	call	10ec <__muldi3>
     99c:	100d883a 	mov	r6,r2
     9a0:	010000c4 	movi	r4,3
     9a4:	1105883a 	add	r2,r2,r4
     9a8:	1189803a 	cmpltu	r4,r2,r6
     9ac:	20c9883a 	add	r4,r4,r3
     9b0:	1029883a 	mov	r20,r2
     9b4:	202b883a 	mov	r21,r4
     9b8:	01000cc4 	movi	r4,51
     9bc:	d9034745 	stb	r4,3357(sp)
     9c0:	0021883a 	mov	r16,zero
     9c4:	0023883a 	mov	r17,zero
     9c8:	0000f406 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 3;
     9cc:	01800284 	movi	r6,10
     9d0:	000f883a 	mov	r7,zero
     9d4:	9009883a 	mov	r4,r18
     9d8:	980b883a 	mov	r5,r19
     9dc:	00010ec0 	call	10ec <__muldi3>
     9e0:	100d883a 	mov	r6,r2
     9e4:	010000c4 	movi	r4,3
     9e8:	1105883a 	add	r2,r2,r4
     9ec:	1189803a 	cmpltu	r4,r2,r6
     9f0:	20c9883a 	add	r4,r4,r3
     9f4:	1025883a 	mov	r18,r2
     9f8:	2027883a 	mov	r19,r4
     9fc:	00800cc4 	movi	r2,51
     a00:	d8834745 	stb	r2,3357(sp)
     a04:	0021883a 	mov	r16,zero
     a08:	0023883a 	mov	r17,zero
     a0c:	0000e306 	br	d9c <main+0xaec>
                 break;
                case 37:
				  key = '4';
				  if(flag1==0)
     a10:	d8c34a17 	ldw	r3,3368(sp)
     a14:	d9034b17 	ldw	r4,3372(sp)
     a18:	1904b03a 	or	r2,r3,r4
     a1c:	1000111e 	bne	r2,zero,a64 <main+0x7b4>
				    op1 = op1*10 + 4;
     a20:	01800284 	movi	r6,10
     a24:	000f883a 	mov	r7,zero
     a28:	a009883a 	mov	r4,r20
     a2c:	a80b883a 	mov	r5,r21
     a30:	00010ec0 	call	10ec <__muldi3>
     a34:	100d883a 	mov	r6,r2
     a38:	01000104 	movi	r4,4
     a3c:	1105883a 	add	r2,r2,r4
     a40:	1189803a 	cmpltu	r4,r2,r6
     a44:	20c9883a 	add	r4,r4,r3
     a48:	1029883a 	mov	r20,r2
     a4c:	202b883a 	mov	r21,r4
     a50:	00800d04 	movi	r2,52
     a54:	d8834745 	stb	r2,3357(sp)
     a58:	0021883a 	mov	r16,zero
     a5c:	0023883a 	mov	r17,zero
     a60:	0000ce06 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 4;
     a64:	01800284 	movi	r6,10
     a68:	000f883a 	mov	r7,zero
     a6c:	9009883a 	mov	r4,r18
     a70:	980b883a 	mov	r5,r19
     a74:	00010ec0 	call	10ec <__muldi3>
     a78:	100d883a 	mov	r6,r2
     a7c:	01000104 	movi	r4,4
     a80:	1105883a 	add	r2,r2,r4
     a84:	1189803a 	cmpltu	r4,r2,r6
     a88:	20c9883a 	add	r4,r4,r3
     a8c:	1025883a 	mov	r18,r2
     a90:	2027883a 	mov	r19,r4
     a94:	00c00d04 	movi	r3,52
     a98:	d8c34745 	stb	r3,3357(sp)
     a9c:	0021883a 	mov	r16,zero
     aa0:	0023883a 	mov	r17,zero
     aa4:	0000bd06 	br	d9c <main+0xaec>
                 break;
                case 46:
				  key = '5';
				  if(flag1==0)
     aa8:	d9034a17 	ldw	r4,3368(sp)
     aac:	d8c34b17 	ldw	r3,3372(sp)
     ab0:	20c4b03a 	or	r2,r4,r3
     ab4:	1000111e 	bne	r2,zero,afc <main+0x84c>
				    op1 = op1*10 + 5;
     ab8:	01800284 	movi	r6,10
     abc:	000f883a 	mov	r7,zero
     ac0:	a009883a 	mov	r4,r20
     ac4:	a80b883a 	mov	r5,r21
     ac8:	00010ec0 	call	10ec <__muldi3>
     acc:	100d883a 	mov	r6,r2
     ad0:	01000144 	movi	r4,5
     ad4:	1105883a 	add	r2,r2,r4
     ad8:	1189803a 	cmpltu	r4,r2,r6
     adc:	20c9883a 	add	r4,r4,r3
     ae0:	1029883a 	mov	r20,r2
     ae4:	202b883a 	mov	r21,r4
     ae8:	01000d44 	movi	r4,53
     aec:	d9034745 	stb	r4,3357(sp)
     af0:	0021883a 	mov	r16,zero
     af4:	0023883a 	mov	r17,zero
     af8:	0000a806 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 5;
     afc:	01800284 	movi	r6,10
     b00:	000f883a 	mov	r7,zero
     b04:	9009883a 	mov	r4,r18
     b08:	980b883a 	mov	r5,r19
     b0c:	00010ec0 	call	10ec <__muldi3>
     b10:	100d883a 	mov	r6,r2
     b14:	01000144 	movi	r4,5
     b18:	1105883a 	add	r2,r2,r4
     b1c:	1189803a 	cmpltu	r4,r2,r6
     b20:	20c9883a 	add	r4,r4,r3
     b24:	1025883a 	mov	r18,r2
     b28:	2027883a 	mov	r19,r4
     b2c:	00800d44 	movi	r2,53
     b30:	d8834745 	stb	r2,3357(sp)
     b34:	0021883a 	mov	r16,zero
     b38:	0023883a 	mov	r17,zero
     b3c:	00009706 	br	d9c <main+0xaec>
                 break;
                case 54:
				  key = '6';
				  if(flag1==0)
     b40:	d8c34a17 	ldw	r3,3368(sp)
     b44:	d9034b17 	ldw	r4,3372(sp)
     b48:	1904b03a 	or	r2,r3,r4
     b4c:	1000111e 	bne	r2,zero,b94 <main+0x8e4>
				    op1 = op1*10 + 6;
     b50:	01800284 	movi	r6,10
     b54:	000f883a 	mov	r7,zero
     b58:	a009883a 	mov	r4,r20
     b5c:	a80b883a 	mov	r5,r21
     b60:	00010ec0 	call	10ec <__muldi3>
     b64:	100d883a 	mov	r6,r2
     b68:	01000184 	movi	r4,6
     b6c:	1105883a 	add	r2,r2,r4
     b70:	1189803a 	cmpltu	r4,r2,r6
     b74:	20c9883a 	add	r4,r4,r3
     b78:	1029883a 	mov	r20,r2
     b7c:	202b883a 	mov	r21,r4
     b80:	00800d84 	movi	r2,54
     b84:	d8834745 	stb	r2,3357(sp)
     b88:	0021883a 	mov	r16,zero
     b8c:	0023883a 	mov	r17,zero
     b90:	00008206 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 6;
     b94:	01800284 	movi	r6,10
     b98:	000f883a 	mov	r7,zero
     b9c:	9009883a 	mov	r4,r18
     ba0:	980b883a 	mov	r5,r19
     ba4:	00010ec0 	call	10ec <__muldi3>
     ba8:	100d883a 	mov	r6,r2
     bac:	01000184 	movi	r4,6
     bb0:	1105883a 	add	r2,r2,r4
     bb4:	1189803a 	cmpltu	r4,r2,r6
     bb8:	20c9883a 	add	r4,r4,r3
     bbc:	1025883a 	mov	r18,r2
     bc0:	2027883a 	mov	r19,r4
     bc4:	00c00d84 	movi	r3,54
     bc8:	d8c34745 	stb	r3,3357(sp)
     bcc:	0021883a 	mov	r16,zero
     bd0:	0023883a 	mov	r17,zero
     bd4:	00007106 	br	d9c <main+0xaec>
                 break;
				case 61:
				  key = '7';
				  if(flag1==0)
     bd8:	d9034a17 	ldw	r4,3368(sp)
     bdc:	d8c34b17 	ldw	r3,3372(sp)
     be0:	20c4b03a 	or	r2,r4,r3
     be4:	1000111e 	bne	r2,zero,c2c <main+0x97c>
				    op1 = op1*10 + 7;
     be8:	01800284 	movi	r6,10
     bec:	000f883a 	mov	r7,zero
     bf0:	a009883a 	mov	r4,r20
     bf4:	a80b883a 	mov	r5,r21
     bf8:	00010ec0 	call	10ec <__muldi3>
     bfc:	100d883a 	mov	r6,r2
     c00:	010001c4 	movi	r4,7
     c04:	1105883a 	add	r2,r2,r4
     c08:	1189803a 	cmpltu	r4,r2,r6
     c0c:	20c9883a 	add	r4,r4,r3
     c10:	1029883a 	mov	r20,r2
     c14:	202b883a 	mov	r21,r4
     c18:	01000dc4 	movi	r4,55
     c1c:	d9034745 	stb	r4,3357(sp)
     c20:	0021883a 	mov	r16,zero
     c24:	0023883a 	mov	r17,zero
     c28:	00005c06 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 7;
     c2c:	01800284 	movi	r6,10
     c30:	000f883a 	mov	r7,zero
     c34:	9009883a 	mov	r4,r18
     c38:	980b883a 	mov	r5,r19
     c3c:	00010ec0 	call	10ec <__muldi3>
     c40:	100d883a 	mov	r6,r2
     c44:	010001c4 	movi	r4,7
     c48:	1105883a 	add	r2,r2,r4
     c4c:	1189803a 	cmpltu	r4,r2,r6
     c50:	20c9883a 	add	r4,r4,r3
     c54:	1025883a 	mov	r18,r2
     c58:	2027883a 	mov	r19,r4
     c5c:	00800dc4 	movi	r2,55
     c60:	d8834745 	stb	r2,3357(sp)
     c64:	0021883a 	mov	r16,zero
     c68:	0023883a 	mov	r17,zero
     c6c:	00004b06 	br	d9c <main+0xaec>
                 break;
				case 62:
				  key = '8';
				  if(flag1==0)
     c70:	d8c34a17 	ldw	r3,3368(sp)
     c74:	d9034b17 	ldw	r4,3372(sp)
     c78:	1904b03a 	or	r2,r3,r4
     c7c:	1000111e 	bne	r2,zero,cc4 <main+0xa14>
				    op1 = op1*10 + 8;
     c80:	01800284 	movi	r6,10
     c84:	000f883a 	mov	r7,zero
     c88:	a009883a 	mov	r4,r20
     c8c:	a80b883a 	mov	r5,r21
     c90:	00010ec0 	call	10ec <__muldi3>
     c94:	100d883a 	mov	r6,r2
     c98:	01000204 	movi	r4,8
     c9c:	1105883a 	add	r2,r2,r4
     ca0:	1189803a 	cmpltu	r4,r2,r6
     ca4:	20c9883a 	add	r4,r4,r3
     ca8:	1029883a 	mov	r20,r2
     cac:	202b883a 	mov	r21,r4
     cb0:	00800e04 	movi	r2,56
     cb4:	d8834745 	stb	r2,3357(sp)
     cb8:	0021883a 	mov	r16,zero
     cbc:	0023883a 	mov	r17,zero
     cc0:	00003606 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 8;
     cc4:	01800284 	movi	r6,10
     cc8:	000f883a 	mov	r7,zero
     ccc:	9009883a 	mov	r4,r18
     cd0:	980b883a 	mov	r5,r19
     cd4:	00010ec0 	call	10ec <__muldi3>
     cd8:	100d883a 	mov	r6,r2
     cdc:	01000204 	movi	r4,8
     ce0:	1105883a 	add	r2,r2,r4
     ce4:	1189803a 	cmpltu	r4,r2,r6
     ce8:	20c9883a 	add	r4,r4,r3
     cec:	1025883a 	mov	r18,r2
     cf0:	2027883a 	mov	r19,r4
     cf4:	00c00e04 	movi	r3,56
     cf8:	d8c34745 	stb	r3,3357(sp)
     cfc:	0021883a 	mov	r16,zero
     d00:	0023883a 	mov	r17,zero
     d04:	00002506 	br	d9c <main+0xaec>
                 break;
				case 70:
				  key = '9';
				  if(flag1==0)
     d08:	d9034a17 	ldw	r4,3368(sp)
     d0c:	d8c34b17 	ldw	r3,3372(sp)
     d10:	20c4b03a 	or	r2,r4,r3
     d14:	1000111e 	bne	r2,zero,d5c <main+0xaac>
				    op1 = op1*10 + 9;
     d18:	01800284 	movi	r6,10
     d1c:	000f883a 	mov	r7,zero
     d20:	a009883a 	mov	r4,r20
     d24:	a80b883a 	mov	r5,r21
     d28:	00010ec0 	call	10ec <__muldi3>
     d2c:	100d883a 	mov	r6,r2
     d30:	01000244 	movi	r4,9
     d34:	1105883a 	add	r2,r2,r4
     d38:	1189803a 	cmpltu	r4,r2,r6
     d3c:	20c9883a 	add	r4,r4,r3
     d40:	1029883a 	mov	r20,r2
     d44:	202b883a 	mov	r21,r4
     d48:	01000e44 	movi	r4,57
     d4c:	d9034745 	stb	r4,3357(sp)
     d50:	0021883a 	mov	r16,zero
     d54:	0023883a 	mov	r17,zero
     d58:	00001006 	br	d9c <main+0xaec>
				   else 
				    op2 = op2*10 + 9;
     d5c:	01800284 	movi	r6,10
     d60:	000f883a 	mov	r7,zero
     d64:	9009883a 	mov	r4,r18
     d68:	980b883a 	mov	r5,r19
     d6c:	00010ec0 	call	10ec <__muldi3>
     d70:	100d883a 	mov	r6,r2
     d74:	01000244 	movi	r4,9
     d78:	1105883a 	add	r2,r2,r4
     d7c:	1189803a 	cmpltu	r4,r2,r6
     d80:	20c9883a 	add	r4,r4,r3
     d84:	1025883a 	mov	r18,r2
     d88:	2027883a 	mov	r19,r4
     d8c:	00800e44 	movi	r2,57
     d90:	d8834745 	stb	r2,3357(sp)
     d94:	0021883a 	mov	r16,zero
     d98:	0023883a 	mov	r17,zero
                 break;
				 default:
				   def_flag=1;
				  break;
			   }
			   printf("op1 is %lld op2 is %lld\n",op1,op2);
     d9c:	dcc00015 	stw	r19,0(sp)
     da0:	900f883a 	mov	r7,r18
     da4:	01000074 	movhi	r4,1
     da8:	213a1f04 	addi	r4,r4,-6020
     dac:	a00b883a 	mov	r5,r20
     db0:	a80d883a 	mov	r6,r21
     db4:	00020dc0 	call	20dc <printf>
            if(eval_flag==1 && flag1==1 && def_flag==0)
     db8:	00800044 	movi	r2,1
     dbc:	d8c34817 	ldw	r3,3360(sp)
     dc0:	1880901e 	bne	r3,r2,1004 <main+0xd54>
     dc4:	d9034917 	ldw	r4,3364(sp)
     dc8:	20008e1e 	bne	r4,zero,1004 <main+0xd54>
     dcc:	00800044 	movi	r2,1
     dd0:	d8c34a17 	ldw	r3,3368(sp)
     dd4:	18808b1e 	bne	r3,r2,1004 <main+0xd54>
     dd8:	d9034b17 	ldw	r4,3372(sp)
     ddc:	2000891e 	bne	r4,zero,1004 <main+0xd54>
     de0:	8444b03a 	or	r2,r16,r17
     de4:	10009f1e 	bne	r2,zero,1064 <main+0xdb4>
            {
			  long long int quoit;
              if(arith=='+')
     de8:	d8834703 	ldbu	r2,3356(sp)
     dec:	10c03fcc 	andi	r3,r2,255
     df0:	18c0201c 	xori	r3,r3,128
     df4:	18ffe004 	addi	r3,r3,-128
     df8:	00800ac4 	movi	r2,43
     dfc:	1880071e 	bne	r3,r2,e1c <main+0xb6c>
               ans = op1+op2;
     e00:	a485883a 	add	r2,r20,r18
     e04:	1509803a 	cmpltu	r4,r2,r20
     e08:	acc7883a 	add	r3,r21,r19
     e0c:	20c9883a 	add	r4,r4,r3
     e10:	d8834c15 	stw	r2,3376(sp)
     e14:	d9034d15 	stw	r4,3380(sp)
     e18:	00001b06 	br	e88 <main+0xbd8>
              if(arith=='-')
     e1c:	d9034703 	ldbu	r4,3356(sp)
     e20:	20c03fcc 	andi	r3,r4,255
     e24:	18c0201c 	xori	r3,r3,128
     e28:	18ffe004 	addi	r3,r3,-128
     e2c:	00800b44 	movi	r2,45
     e30:	1880071e 	bne	r3,r2,e50 <main+0xba0>
               ans = op1-op2;
     e34:	a485c83a 	sub	r2,r20,r18
     e38:	a089803a 	cmpltu	r4,r20,r2
     e3c:	acc7c83a 	sub	r3,r21,r19
     e40:	1909c83a 	sub	r4,r3,r4
     e44:	d8834c15 	stw	r2,3376(sp)
     e48:	d9034d15 	stw	r4,3380(sp)
     e4c:	00000e06 	br	e88 <main+0xbd8>
              if(arith=='*')
     e50:	d8834703 	ldbu	r2,3356(sp)
     e54:	10c03fcc 	andi	r3,r2,255
     e58:	18c0201c 	xori	r3,r3,128
     e5c:	18ffe004 	addi	r3,r3,-128
     e60:	00800a84 	movi	r2,42
     e64:	18800b1e 	bne	r3,r2,e94 <main+0xbe4>
               ans = op1*op2;
     e68:	a009883a 	mov	r4,r20
     e6c:	a80b883a 	mov	r5,r21
     e70:	900d883a 	mov	r6,r18
     e74:	980f883a 	mov	r7,r19
     e78:	00010ec0 	call	10ec <__muldi3>
     e7c:	180b883a 	mov	r5,r3
     e80:	d8834c15 	stw	r2,3376(sp)
     e84:	d9434d15 	stw	r5,3380(sp)
			   quoit = op1%op2;
			  } 
			 // printf("ans is %lld\n",ans);
			  
			  
			  for(i;i<80;i++)
     e88:	008013c4 	movi	r2,79
     e8c:	1700170e 	bge	r2,fp,eec <main+0xc3c>
     e90:	00001d06 	br	f08 <main+0xc58>
               ans = op1+op2;
              if(arith=='-')
               ans = op1-op2;
              if(arith=='*')
               ans = op1*op2;
              if(arith=='/')
     e94:	d9034703 	ldbu	r4,3356(sp)
     e98:	20c03fcc 	andi	r3,r4,255
     e9c:	18c0201c 	xori	r3,r3,128
     ea0:	18ffe004 	addi	r3,r3,-128
     ea4:	00800bc4 	movi	r2,47
     ea8:	18bff71e 	bne	r3,r2,e88 <main+0xbd8>
			  {
               ans = op1/op2;
     eac:	a009883a 	mov	r4,r20
     eb0:	a80b883a 	mov	r5,r21
     eb4:	900d883a 	mov	r6,r18
     eb8:	980f883a 	mov	r7,r19
     ebc:	00011840 	call	1184 <__divdi3>
     ec0:	d8834c15 	stw	r2,3376(sp)
     ec4:	d8c34d15 	stw	r3,3380(sp)
			   quoit = op1%op2;
     ec8:	a009883a 	mov	r4,r20
     ecc:	a80b883a 	mov	r5,r21
     ed0:	900d883a 	mov	r6,r18
     ed4:	980f883a 	mov	r7,r19
     ed8:	00018040 	call	1804 <__moddi3>
     edc:	180b883a 	mov	r5,r3
     ee0:	d8834515 	stw	r2,3348(sp)
     ee4:	d9434615 	stw	r5,3352(sp)
     ee8:	003fe706 	br	e88 <main+0xbd8>
     eec:	d8802444 	addi	r2,sp,145
     ef0:	1705883a 	add	r2,r2,fp
     ef4:	01000044 	movi	r4,1
     ef8:	d8c03844 	addi	r3,sp,225
			  } 
			 // printf("ans is %lld\n",ans);
			  
			  
			  for(i;i<80;i++)
			   display_vga[0][i]='\0';
     efc:	10000005 	stb	zero,0(r2)
     f00:	1105883a 	add	r2,r2,r4
			   quoit = op1%op2;
			  } 
			 // printf("ans is %lld\n",ans);
			  
			  
			  for(i;i<80;i++)
     f04:	10fffd1e 	bne	r2,r3,efc <main+0xc4c>
			   display_vga[0][i]='\0';
			  if(arith!='/')
     f08:	d9034703 	ldbu	r4,3356(sp)
     f0c:	20c03fcc 	andi	r3,r4,255
     f10:	18c0201c 	xori	r3,r3,128
     f14:	18ffe004 	addi	r3,r3,-128
     f18:	00800bc4 	movi	r2,47
     f1c:	18801226 	beq	r3,r2,f68 <main+0xcb8>
			  {
			   sprintf(display_vga[0],"%lld %c %lld = %lld",op1,arith,op2,ans);
     f20:	dc002444 	addi	r16,sp,145
     f24:	d8c00015 	stw	r3,0(sp)
     f28:	dc800115 	stw	r18,4(sp)
     f2c:	dcc00215 	stw	r19,8(sp)
     f30:	d8834c17 	ldw	r2,3376(sp)
     f34:	d8800315 	stw	r2,12(sp)
     f38:	d8c34d17 	ldw	r3,3380(sp)
     f3c:	d8c00415 	stw	r3,16(sp)
     f40:	8009883a 	mov	r4,r16
     f44:	01400074 	movhi	r5,1
     f48:	297a2a04 	addi	r5,r5,-5976
     f4c:	a00d883a 	mov	r6,r20
     f50:	a80f883a 	mov	r7,r21
     f54:	00022080 	call	2208 <sprintf>
			   sprintf(display_vga[1],"%s",str);
     f58:	81001404 	addi	r4,r16,80
     f5c:	d9400b44 	addi	r5,sp,45
     f60:	00022dc0 	call	22dc <strcpy>
     f64:	00001a06 	br	fd0 <main+0xd20>
			  }
              else
              {
			    sprintf(display_vga[0],"%lld %c %lld = %lld %lld mod %lld=%lld",op1,arith,op2,ans,op1,op2,quoit);
     f68:	dc002444 	addi	r16,sp,145
     f6c:	00800bc4 	movi	r2,47
     f70:	d8800015 	stw	r2,0(sp)
     f74:	dc800115 	stw	r18,4(sp)
     f78:	dcc00215 	stw	r19,8(sp)
     f7c:	d9034c17 	ldw	r4,3376(sp)
     f80:	d9000315 	stw	r4,12(sp)
     f84:	d8834d17 	ldw	r2,3380(sp)
     f88:	d8800415 	stw	r2,16(sp)
     f8c:	dd000515 	stw	r20,20(sp)
     f90:	dd400615 	stw	r21,24(sp)
     f94:	dc800715 	stw	r18,28(sp)
     f98:	dcc00815 	stw	r19,32(sp)
     f9c:	d8c34517 	ldw	r3,3348(sp)
     fa0:	d8c00915 	stw	r3,36(sp)
     fa4:	d9034617 	ldw	r4,3352(sp)
     fa8:	d9000a15 	stw	r4,40(sp)
     fac:	8009883a 	mov	r4,r16
     fb0:	01400074 	movhi	r5,1
     fb4:	297a2f04 	addi	r5,r5,-5956
     fb8:	a00d883a 	mov	r6,r20
     fbc:	a80f883a 	mov	r7,r21
     fc0:	00022080 	call	2208 <sprintf>
			    sprintf(display_vga[1],"%s",str);
     fc4:	81001404 	addi	r4,r16,80
     fc8:	d9400b44 	addi	r5,sp,45
     fcc:	00022dc0 	call	22dc <strcpy>
			  i = 0;
			  op1 = 0;
			  op2 = 0; 
              eval_flag=0;
              flag1 = 0;
			   alt_up_char_buffer_clear(char_buffer_dev);
     fd0:	d9034e17 	ldw	r4,3384(sp)
     fd4:	000ce080 	call	ce08 <alt_up_char_buffer_clear>
     fd8:	0029883a 	mov	r20,zero
     fdc:	002b883a 	mov	r21,zero
     fe0:	0025883a 	mov	r18,zero
     fe4:	0027883a 	mov	r19,zero
     fe8:	0005883a 	mov	r2,zero
     fec:	d8834a15 	stw	r2,3368(sp)
     ff0:	d8834b15 	stw	r2,3372(sp)
     ff4:	d8834815 	stw	r2,3360(sp)
     ff8:	d8834915 	stw	r2,3364(sp)
     ffc:	0039883a 	mov	fp,zero
    1000:	00001806 	br	1064 <main+0xdb4>
			   i = 0;
		//	   alt_up_char_buffer_string (char_buffer_dev,display_vga[0], 8, 8);
		//	   alt_up_char_buffer_string (char_buffer_dev,display_vga[1], 8, 10);
			}
            else if(def_flag==0)
    1004:	8444b03a 	or	r2,r16,r17
    1008:	1000161e 	bne	r2,zero,1064 <main+0xdb4>
            {
			     display_vga[0][i] = key;
    100c:	d8802444 	addi	r2,sp,145
    1010:	1707883a 	add	r3,r2,fp
    1014:	d9034743 	ldbu	r4,3357(sp)
    1018:	19000005 	stb	r4,0(r3)
			     i++;
    101c:	e1400044 	addi	r5,fp,1
			     display_vga[0][i] = '\0';
    1020:	1145883a 	add	r2,r2,r5
    1024:	10000005 	stb	zero,0(r2)
			   if(i>65)
    1028:	00801044 	movi	r2,65
    102c:	11400b0e 	bge	r2,r5,105c <main+0xdac>
    1030:	2809883a 	mov	r4,r5
    1034:	d9802444 	addi	r6,sp,145
    1038:	01ffffc4 	movi	r7,-1
    103c:	0710303a 	nor	r8,zero,fp
    1040:	4707883a 	add	r3,r8,fp
			   {
			    for(i;i>=0;i--)
			    display_vga[0][i]='\0';
    1044:	3105883a 	add	r2,r6,r4
    1048:	10000005 	stb	zero,0(r2)
			     display_vga[0][i] = key;
			     i++;
			     display_vga[0][i] = '\0';
			   if(i>65)
			   {
			    for(i;i>=0;i--)
    104c:	21c9883a 	add	r4,r4,r7
    1050:	193ffc1e 	bne	r3,r4,1044 <main+0xd94>
    1054:	4145883a 	add	r2,r8,r5
    1058:	11cb883a 	add	r5,r2,r7
			    display_vga[0][i]='\0';
			   }
               display_vga[1][0]='\0'; 	
    105c:	d8003845 	stb	zero,225(sp)
    1060:	2839883a 	mov	fp,r5
            }
             def_flag = 0;         			
		//	alt_up_char_buffer_string(char_buffer_dev,display_vga, 0, 0);
		  /*  if(i>=0) */     alt_up_char_buffer_string (char_buffer_dev,display_vga[0], 8, 8);
    1064:	dc402444 	addi	r17,sp,145
    1068:	04000204 	movi	r16,8
    106c:	d9034e17 	ldw	r4,3384(sp)
    1070:	880b883a 	mov	r5,r17
    1074:	800d883a 	mov	r6,r16
    1078:	800f883a 	mov	r7,r16
    107c:	000cd280 	call	cd28 <alt_up_char_buffer_string>
          /*  if(i>=1) */     alt_up_char_buffer_string (char_buffer_dev,display_vga[1], 8, 10);
    1080:	d9034e17 	ldw	r4,3384(sp)
    1084:	89401404 	addi	r5,r17,80
    1088:	800d883a 	mov	r6,r16
    108c:	01c00284 	movi	r7,10
    1090:	000cd280 	call	cd28 <alt_up_char_buffer_string>
    1094:	b809883a 	mov	r4,r23
    1098:	05fffc04 	movi	r23,-16
    109c:	003cf106 	br	464 <main+0x1b4>
    10a0:	0039883a 	mov	fp,zero
    10a4:	e0c01424 	muli	r3,fp,80
    10a8:	d8802444 	addi	r2,sp,145
    10ac:	10c9883a 	add	r4,r2,r3
    10b0:	0007883a 	mov	r3,zero
    10b4:	003d8d06 	br	6ec <main+0x43c>
						   // alt_up_char_buffer_string (char_buffer_dev,display_vga[8], 4, 24);
						   // alt_up_char_buffer_string (char_buffer_dev,display_vga[9], 4, 26);
           } 
		}  	   
	}
}
    10b8:	00bfffc4 	movi	r2,-1
    10bc:	dfc35817 	ldw	ra,3424(sp)
    10c0:	df035717 	ldw	fp,3420(sp)
    10c4:	ddc35617 	ldw	r23,3416(sp)
    10c8:	dd835517 	ldw	r22,3412(sp)
    10cc:	dd435417 	ldw	r21,3408(sp)
    10d0:	dd035317 	ldw	r20,3404(sp)
    10d4:	dcc35217 	ldw	r19,3400(sp)
    10d8:	dc835117 	ldw	r18,3396(sp)
    10dc:	dc435017 	ldw	r17,3392(sp)
    10e0:	dc034f17 	ldw	r16,3388(sp)
    10e4:	dec35904 	addi	sp,sp,3428
    10e8:	f800283a 	ret

000010ec <__muldi3>:
    10ec:	2011883a 	mov	r8,r4
    10f0:	427fffcc 	andi	r9,r8,65535
    10f4:	4018d43a 	srli	r12,r8,16
    10f8:	32bfffcc 	andi	r10,r6,65535
    10fc:	3016d43a 	srli	r11,r6,16
    1100:	4a85383a 	mul	r2,r9,r10
    1104:	6295383a 	mul	r10,r12,r10
    1108:	4ad3383a 	mul	r9,r9,r11
    110c:	113fffcc 	andi	r4,r2,65535
    1110:	1004d43a 	srli	r2,r2,16
    1114:	4a93883a 	add	r9,r9,r10
    1118:	3807883a 	mov	r3,r7
    111c:	1245883a 	add	r2,r2,r9
    1120:	280f883a 	mov	r7,r5
    1124:	180b883a 	mov	r5,r3
    1128:	1006943a 	slli	r3,r2,16
    112c:	defffd04 	addi	sp,sp,-12
    1130:	dc800215 	stw	r18,8(sp)
    1134:	1907883a 	add	r3,r3,r4
    1138:	dc400115 	stw	r17,4(sp)
    113c:	dc000015 	stw	r16,0(sp)
    1140:	4165383a 	mul	r18,r8,r5
    1144:	31e3383a 	mul	r17,r6,r7
    1148:	1012d43a 	srli	r9,r2,16
    114c:	62d9383a 	mul	r12,r12,r11
    1150:	181f883a 	mov	r15,r3
    1154:	1280022e 	bgeu	r2,r10,1160 <__muldi3+0x74>
    1158:	00800074 	movhi	r2,1
    115c:	6099883a 	add	r12,r12,r2
    1160:	624d883a 	add	r6,r12,r9
    1164:	9187883a 	add	r3,r18,r6
    1168:	88c7883a 	add	r3,r17,r3
    116c:	7805883a 	mov	r2,r15
    1170:	dc800217 	ldw	r18,8(sp)
    1174:	dc400117 	ldw	r17,4(sp)
    1178:	dc000017 	ldw	r16,0(sp)
    117c:	dec00304 	addi	sp,sp,12
    1180:	f800283a 	ret

00001184 <__divdi3>:
    1184:	deffef04 	addi	sp,sp,-68
    1188:	2005883a 	mov	r2,r4
    118c:	2807883a 	mov	r3,r5
    1190:	dfc01015 	stw	ra,64(sp)
    1194:	df000f15 	stw	fp,60(sp)
    1198:	ddc00e15 	stw	r23,56(sp)
    119c:	dd800d15 	stw	r22,52(sp)
    11a0:	dd400c15 	stw	r21,48(sp)
    11a4:	dd000b15 	stw	r20,44(sp)
    11a8:	dcc00a15 	stw	r19,40(sp)
    11ac:	dc800915 	stw	r18,36(sp)
    11b0:	dc400815 	stw	r17,32(sp)
    11b4:	dc000715 	stw	r16,28(sp)
    11b8:	1019883a 	mov	r12,r2
    11bc:	181b883a 	mov	r13,r3
    11c0:	3015883a 	mov	r10,r6
    11c4:	3817883a 	mov	r11,r7
    11c8:	1800ba16 	blt	r3,zero,14b4 <__divdi3+0x330>
    11cc:	d8000615 	stw	zero,24(sp)
    11d0:	5800ad16 	blt	r11,zero,1488 <__divdi3+0x304>
    11d4:	5021883a 	mov	r16,r10
    11d8:	602f883a 	mov	r23,r12
    11dc:	6829883a 	mov	r20,r13
    11e0:	58003b1e 	bne	r11,zero,12d0 <__divdi3+0x14c>
    11e4:	6a805836 	bltu	r13,r10,1348 <__divdi3+0x1c4>
    11e8:	5000ce26 	beq	r10,zero,1524 <__divdi3+0x3a0>
    11ec:	00bfffd4 	movui	r2,65535
    11f0:	1400ba36 	bltu	r2,r16,14dc <__divdi3+0x358>
    11f4:	00803fc4 	movi	r2,255
    11f8:	14015f36 	bltu	r2,r16,1778 <__divdi3+0x5f4>
    11fc:	000b883a 	mov	r5,zero
    1200:	0005883a 	mov	r2,zero
    1204:	8084d83a 	srl	r2,r16,r2
    1208:	01000074 	movhi	r4,1
    120c:	213a5604 	addi	r4,r4,-5800
    1210:	01800804 	movi	r6,32
    1214:	1105883a 	add	r2,r2,r4
    1218:	10c00003 	ldbu	r3,0(r2)
    121c:	28c7883a 	add	r3,r5,r3
    1220:	30edc83a 	sub	r22,r6,r3
    1224:	b001101e 	bne	r22,zero,1668 <__divdi3+0x4e4>
    1228:	802ad43a 	srli	r21,r16,16
    122c:	01000044 	movi	r4,1
    1230:	a423c83a 	sub	r17,r20,r16
    1234:	873fffcc 	andi	fp,r16,65535
    1238:	d9000315 	stw	r4,12(sp)
    123c:	8809883a 	mov	r4,r17
    1240:	a80b883a 	mov	r5,r21
    1244:	0001f940 	call	1f94 <__udivsi3>
    1248:	8809883a 	mov	r4,r17
    124c:	a80b883a 	mov	r5,r21
    1250:	102d883a 	mov	r22,r2
    1254:	0001f9c0 	call	1f9c <__umodsi3>
    1258:	1004943a 	slli	r2,r2,16
    125c:	b806d43a 	srli	r3,r23,16
    1260:	e5a3383a 	mul	r17,fp,r22
    1264:	10c4b03a 	or	r2,r2,r3
    1268:	1440042e 	bgeu	r2,r17,127c <__divdi3+0xf8>
    126c:	1405883a 	add	r2,r2,r16
    1270:	b5bfffc4 	addi	r22,r22,-1
    1274:	14000136 	bltu	r2,r16,127c <__divdi3+0xf8>
    1278:	14415f36 	bltu	r2,r17,17f8 <__divdi3+0x674>
    127c:	1463c83a 	sub	r17,r2,r17
    1280:	8809883a 	mov	r4,r17
    1284:	a80b883a 	mov	r5,r21
    1288:	0001f940 	call	1f94 <__udivsi3>
    128c:	8809883a 	mov	r4,r17
    1290:	a80b883a 	mov	r5,r21
    1294:	1029883a 	mov	r20,r2
    1298:	0001f9c0 	call	1f9c <__umodsi3>
    129c:	1004943a 	slli	r2,r2,16
    12a0:	e509383a 	mul	r4,fp,r20
    12a4:	b8ffffcc 	andi	r3,r23,65535
    12a8:	10c4b03a 	or	r2,r2,r3
    12ac:	1100042e 	bgeu	r2,r4,12c0 <__divdi3+0x13c>
    12b0:	8085883a 	add	r2,r16,r2
    12b4:	a53fffc4 	addi	r20,r20,-1
    12b8:	14000136 	bltu	r2,r16,12c0 <__divdi3+0x13c>
    12bc:	11014736 	bltu	r2,r4,17dc <__divdi3+0x658>
    12c0:	b004943a 	slli	r2,r22,16
    12c4:	d8c00317 	ldw	r3,12(sp)
    12c8:	a084b03a 	or	r2,r20,r2
    12cc:	00000406 	br	12e0 <__divdi3+0x15c>
    12d0:	5811883a 	mov	r8,r11
    12d4:	6ac0582e 	bgeu	r13,r11,1438 <__divdi3+0x2b4>
    12d8:	0005883a 	mov	r2,zero
    12dc:	0007883a 	mov	r3,zero
    12e0:	1025883a 	mov	r18,r2
    12e4:	100d883a 	mov	r6,r2
    12e8:	d8800617 	ldw	r2,24(sp)
    12ec:	180f883a 	mov	r7,r3
    12f0:	10000726 	beq	r2,zero,1310 <__divdi3+0x18c>
    12f4:	0009883a 	mov	r4,zero
    12f8:	2485c83a 	sub	r2,r4,r18
    12fc:	2089803a 	cmpltu	r4,r4,r2
    1300:	00c7c83a 	sub	r3,zero,r3
    1304:	1909c83a 	sub	r4,r3,r4
    1308:	100d883a 	mov	r6,r2
    130c:	200f883a 	mov	r7,r4
    1310:	3005883a 	mov	r2,r6
    1314:	3807883a 	mov	r3,r7
    1318:	dfc01017 	ldw	ra,64(sp)
    131c:	df000f17 	ldw	fp,60(sp)
    1320:	ddc00e17 	ldw	r23,56(sp)
    1324:	dd800d17 	ldw	r22,52(sp)
    1328:	dd400c17 	ldw	r21,48(sp)
    132c:	dd000b17 	ldw	r20,44(sp)
    1330:	dcc00a17 	ldw	r19,40(sp)
    1334:	dc800917 	ldw	r18,36(sp)
    1338:	dc400817 	ldw	r17,32(sp)
    133c:	dc000717 	ldw	r16,28(sp)
    1340:	dec01104 	addi	sp,sp,68
    1344:	f800283a 	ret
    1348:	00bfffd4 	movui	r2,65535
    134c:	12806f36 	bltu	r2,r10,150c <__divdi3+0x388>
    1350:	00803fc4 	movi	r2,255
    1354:	12810236 	bltu	r2,r10,1760 <__divdi3+0x5dc>
    1358:	000b883a 	mov	r5,zero
    135c:	0005883a 	mov	r2,zero
    1360:	8084d83a 	srl	r2,r16,r2
    1364:	01000074 	movhi	r4,1
    1368:	213a5604 	addi	r4,r4,-5800
    136c:	01800804 	movi	r6,32
    1370:	1105883a 	add	r2,r2,r4
    1374:	10c00003 	ldbu	r3,0(r2)
    1378:	28c7883a 	add	r3,r5,r3
    137c:	30d1c83a 	sub	r8,r6,r3
    1380:	40000626 	beq	r8,zero,139c <__divdi3+0x218>
    1384:	3205c83a 	sub	r2,r6,r8
    1388:	b884d83a 	srl	r2,r23,r2
    138c:	a206983a 	sll	r3,r20,r8
    1390:	ba2e983a 	sll	r23,r23,r8
    1394:	8220983a 	sll	r16,r16,r8
    1398:	18a8b03a 	or	r20,r3,r2
    139c:	802ad43a 	srli	r21,r16,16
    13a0:	a009883a 	mov	r4,r20
    13a4:	873fffcc 	andi	fp,r16,65535
    13a8:	a80b883a 	mov	r5,r21
    13ac:	0001f940 	call	1f94 <__udivsi3>
    13b0:	a009883a 	mov	r4,r20
    13b4:	a80b883a 	mov	r5,r21
    13b8:	102d883a 	mov	r22,r2
    13bc:	0001f9c0 	call	1f9c <__umodsi3>
    13c0:	1004943a 	slli	r2,r2,16
    13c4:	b806d43a 	srli	r3,r23,16
    13c8:	e5a3383a 	mul	r17,fp,r22
    13cc:	10c4b03a 	or	r2,r2,r3
    13d0:	1440042e 	bgeu	r2,r17,13e4 <__divdi3+0x260>
    13d4:	1405883a 	add	r2,r2,r16
    13d8:	b5bfffc4 	addi	r22,r22,-1
    13dc:	14000136 	bltu	r2,r16,13e4 <__divdi3+0x260>
    13e0:	14410236 	bltu	r2,r17,17ec <__divdi3+0x668>
    13e4:	1463c83a 	sub	r17,r2,r17
    13e8:	8809883a 	mov	r4,r17
    13ec:	a80b883a 	mov	r5,r21
    13f0:	0001f940 	call	1f94 <__udivsi3>
    13f4:	8809883a 	mov	r4,r17
    13f8:	a80b883a 	mov	r5,r21
    13fc:	1029883a 	mov	r20,r2
    1400:	0001f9c0 	call	1f9c <__umodsi3>
    1404:	1004943a 	slli	r2,r2,16
    1408:	e509383a 	mul	r4,fp,r20
    140c:	b8ffffcc 	andi	r3,r23,65535
    1410:	10c4b03a 	or	r2,r2,r3
    1414:	1100042e 	bgeu	r2,r4,1428 <__divdi3+0x2a4>
    1418:	8085883a 	add	r2,r16,r2
    141c:	a53fffc4 	addi	r20,r20,-1
    1420:	14000136 	bltu	r2,r16,1428 <__divdi3+0x2a4>
    1424:	1100ef36 	bltu	r2,r4,17e4 <__divdi3+0x660>
    1428:	b004943a 	slli	r2,r22,16
    142c:	0007883a 	mov	r3,zero
    1430:	a084b03a 	or	r2,r20,r2
    1434:	003faa06 	br	12e0 <__divdi3+0x15c>
    1438:	00bfffd4 	movui	r2,65535
    143c:	12c02d36 	bltu	r2,r11,14f4 <__divdi3+0x370>
    1440:	00803fc4 	movi	r2,255
    1444:	12c0cf36 	bltu	r2,r11,1784 <__divdi3+0x600>
    1448:	000b883a 	mov	r5,zero
    144c:	0005883a 	mov	r2,zero
    1450:	4084d83a 	srl	r2,r8,r2
    1454:	01000074 	movhi	r4,1
    1458:	213a5604 	addi	r4,r4,-5800
    145c:	01800804 	movi	r6,32
    1460:	1105883a 	add	r2,r2,r4
    1464:	10c00003 	ldbu	r3,0(r2)
    1468:	28c7883a 	add	r3,r5,r3
    146c:	30f9c83a 	sub	fp,r6,r3
    1470:	e000331e 	bne	fp,zero,1540 <__divdi3+0x3bc>
    1474:	45000136 	bltu	r8,r20,147c <__divdi3+0x2f8>
    1478:	bc3f9736 	bltu	r23,r16,12d8 <__divdi3+0x154>
    147c:	00800044 	movi	r2,1
    1480:	0007883a 	mov	r3,zero
    1484:	003f9606 	br	12e0 <__divdi3+0x15c>
    1488:	0009883a 	mov	r4,zero
    148c:	2285c83a 	sub	r2,r4,r10
    1490:	02c7c83a 	sub	r3,zero,r11
    1494:	2089803a 	cmpltu	r4,r4,r2
    1498:	1909c83a 	sub	r4,r3,r4
    149c:	d8c00617 	ldw	r3,24(sp)
    14a0:	1015883a 	mov	r10,r2
    14a4:	2017883a 	mov	r11,r4
    14a8:	00c6303a 	nor	r3,zero,r3
    14ac:	d8c00615 	stw	r3,24(sp)
    14b0:	003f4806 	br	11d4 <__divdi3+0x50>
    14b4:	0009883a 	mov	r4,zero
    14b8:	2085c83a 	sub	r2,r4,r2
    14bc:	2089803a 	cmpltu	r4,r4,r2
    14c0:	00c7c83a 	sub	r3,zero,r3
    14c4:	1909c83a 	sub	r4,r3,r4
    14c8:	1019883a 	mov	r12,r2
    14cc:	201b883a 	mov	r13,r4
    14d0:	00bfffc4 	movi	r2,-1
    14d4:	d8800615 	stw	r2,24(sp)
    14d8:	003f3d06 	br	11d0 <__divdi3+0x4c>
    14dc:	00804034 	movhi	r2,256
    14e0:	10bfffc4 	addi	r2,r2,-1
    14e4:	1400aa36 	bltu	r2,r16,1790 <__divdi3+0x60c>
    14e8:	01400404 	movi	r5,16
    14ec:	2805883a 	mov	r2,r5
    14f0:	003f4406 	br	1204 <__divdi3+0x80>
    14f4:	00804034 	movhi	r2,256
    14f8:	10bfffc4 	addi	r2,r2,-1
    14fc:	12c09b36 	bltu	r2,r11,176c <__divdi3+0x5e8>
    1500:	01400404 	movi	r5,16
    1504:	2805883a 	mov	r2,r5
    1508:	003fd106 	br	1450 <__divdi3+0x2cc>
    150c:	00804034 	movhi	r2,256
    1510:	10bfffc4 	addi	r2,r2,-1
    1514:	1280a136 	bltu	r2,r10,179c <__divdi3+0x618>
    1518:	01400404 	movi	r5,16
    151c:	2805883a 	mov	r2,r5
    1520:	003f8f06 	br	1360 <__divdi3+0x1dc>
    1524:	01000044 	movi	r4,1
    1528:	000b883a 	mov	r5,zero
    152c:	0001f940 	call	1f94 <__udivsi3>
    1530:	1021883a 	mov	r16,r2
    1534:	00bfffd4 	movui	r2,65535
    1538:	143fe836 	bltu	r2,r16,14dc <__divdi3+0x358>
    153c:	003f2d06 	br	11f4 <__divdi3+0x70>
    1540:	3705c83a 	sub	r2,r6,fp
    1544:	4708983a 	sll	r4,r8,fp
    1548:	8086d83a 	srl	r3,r16,r2
    154c:	a0a2d83a 	srl	r17,r20,r2
    1550:	b884d83a 	srl	r2,r23,r2
    1554:	20eab03a 	or	r21,r4,r3
    1558:	a82cd43a 	srli	r22,r21,16
    155c:	a706983a 	sll	r3,r20,fp
    1560:	8809883a 	mov	r4,r17
    1564:	b00b883a 	mov	r5,r22
    1568:	1886b03a 	or	r3,r3,r2
    156c:	d8c00215 	stw	r3,8(sp)
    1570:	0001f940 	call	1f94 <__udivsi3>
    1574:	8809883a 	mov	r4,r17
    1578:	b00b883a 	mov	r5,r22
    157c:	1029883a 	mov	r20,r2
    1580:	0001f9c0 	call	1f9c <__umodsi3>
    1584:	a8ffffcc 	andi	r3,r21,65535
    1588:	d8c00515 	stw	r3,20(sp)
    158c:	d9000217 	ldw	r4,8(sp)
    1590:	d9400517 	ldw	r5,20(sp)
    1594:	1004943a 	slli	r2,r2,16
    1598:	2006d43a 	srli	r3,r4,16
    159c:	8720983a 	sll	r16,r16,fp
    15a0:	2d23383a 	mul	r17,r5,r20
    15a4:	10c4b03a 	or	r2,r2,r3
    15a8:	dc000015 	stw	r16,0(sp)
    15ac:	1440032e 	bgeu	r2,r17,15bc <__divdi3+0x438>
    15b0:	1545883a 	add	r2,r2,r21
    15b4:	a53fffc4 	addi	r20,r20,-1
    15b8:	1540842e 	bgeu	r2,r21,17cc <__divdi3+0x648>
    15bc:	1463c83a 	sub	r17,r2,r17
    15c0:	8809883a 	mov	r4,r17
    15c4:	b00b883a 	mov	r5,r22
    15c8:	0001f940 	call	1f94 <__udivsi3>
    15cc:	8809883a 	mov	r4,r17
    15d0:	b00b883a 	mov	r5,r22
    15d4:	1021883a 	mov	r16,r2
    15d8:	0001f9c0 	call	1f9c <__umodsi3>
    15dc:	d8c00517 	ldw	r3,20(sp)
    15e0:	d9000217 	ldw	r4,8(sp)
    15e4:	1004943a 	slli	r2,r2,16
    15e8:	1c0f383a 	mul	r7,r3,r16
    15ec:	20ffffcc 	andi	r3,r4,65535
    15f0:	10e2b03a 	or	r17,r2,r3
    15f4:	89c0032e 	bgeu	r17,r7,1604 <__divdi3+0x480>
    15f8:	8d63883a 	add	r17,r17,r21
    15fc:	843fffc4 	addi	r16,r16,-1
    1600:	8d406e2e 	bgeu	r17,r21,17bc <__divdi3+0x638>
    1604:	a008943a 	slli	r4,r20,16
    1608:	d9400017 	ldw	r5,0(sp)
    160c:	89e3c83a 	sub	r17,r17,r7
    1610:	8110b03a 	or	r8,r16,r4
    1614:	280cd43a 	srli	r6,r5,16
    1618:	28ffffcc 	andi	r3,r5,65535
    161c:	40bfffcc 	andi	r2,r8,65535
    1620:	400ad43a 	srli	r5,r8,16
    1624:	10d3383a 	mul	r9,r2,r3
    1628:	1185383a 	mul	r2,r2,r6
    162c:	28c7383a 	mul	r3,r5,r3
    1630:	4808d43a 	srli	r4,r9,16
    1634:	298b383a 	mul	r5,r5,r6
    1638:	10c5883a 	add	r2,r2,r3
    163c:	2089883a 	add	r4,r4,r2
    1640:	20c0022e 	bgeu	r4,r3,164c <__divdi3+0x4c8>
    1644:	00800074 	movhi	r2,1
    1648:	288b883a 	add	r5,r5,r2
    164c:	2004d43a 	srli	r2,r4,16
    1650:	288b883a 	add	r5,r5,r2
    1654:	89403f36 	bltu	r17,r5,1754 <__divdi3+0x5d0>
    1658:	89403926 	beq	r17,r5,1740 <__divdi3+0x5bc>
    165c:	4005883a 	mov	r2,r8
    1660:	0007883a 	mov	r3,zero
    1664:	003f1e06 	br	12e0 <__divdi3+0x15c>
    1668:	85a0983a 	sll	r16,r16,r22
    166c:	3585c83a 	sub	r2,r6,r22
    1670:	a0a2d83a 	srl	r17,r20,r2
    1674:	802ad43a 	srli	r21,r16,16
    1678:	b884d83a 	srl	r2,r23,r2
    167c:	a586983a 	sll	r3,r20,r22
    1680:	8809883a 	mov	r4,r17
    1684:	a80b883a 	mov	r5,r21
    1688:	1886b03a 	or	r3,r3,r2
    168c:	d8c00115 	stw	r3,4(sp)
    1690:	0001f940 	call	1f94 <__udivsi3>
    1694:	8809883a 	mov	r4,r17
    1698:	a80b883a 	mov	r5,r21
    169c:	d8800415 	stw	r2,16(sp)
    16a0:	0001f9c0 	call	1f9c <__umodsi3>
    16a4:	d9400117 	ldw	r5,4(sp)
    16a8:	d9000417 	ldw	r4,16(sp)
    16ac:	1004943a 	slli	r2,r2,16
    16b0:	873fffcc 	andi	fp,r16,65535
    16b4:	2806d43a 	srli	r3,r5,16
    16b8:	e123383a 	mul	r17,fp,r4
    16bc:	10c4b03a 	or	r2,r2,r3
    16c0:	1440042e 	bgeu	r2,r17,16d4 <__divdi3+0x550>
    16c4:	213fffc4 	addi	r4,r4,-1
    16c8:	1405883a 	add	r2,r2,r16
    16cc:	d9000415 	stw	r4,16(sp)
    16d0:	1400352e 	bgeu	r2,r16,17a8 <__divdi3+0x624>
    16d4:	1463c83a 	sub	r17,r2,r17
    16d8:	8809883a 	mov	r4,r17
    16dc:	a80b883a 	mov	r5,r21
    16e0:	0001f940 	call	1f94 <__udivsi3>
    16e4:	8809883a 	mov	r4,r17
    16e8:	a80b883a 	mov	r5,r21
    16ec:	1029883a 	mov	r20,r2
    16f0:	0001f9c0 	call	1f9c <__umodsi3>
    16f4:	d9400117 	ldw	r5,4(sp)
    16f8:	1004943a 	slli	r2,r2,16
    16fc:	e509383a 	mul	r4,fp,r20
    1700:	28ffffcc 	andi	r3,r5,65535
    1704:	10c6b03a 	or	r3,r2,r3
    1708:	1900062e 	bgeu	r3,r4,1724 <__divdi3+0x5a0>
    170c:	1c07883a 	add	r3,r3,r16
    1710:	a53fffc4 	addi	r20,r20,-1
    1714:	1c000336 	bltu	r3,r16,1724 <__divdi3+0x5a0>
    1718:	1900022e 	bgeu	r3,r4,1724 <__divdi3+0x5a0>
    171c:	a53fffc4 	addi	r20,r20,-1
    1720:	1c07883a 	add	r3,r3,r16
    1724:	d9400417 	ldw	r5,16(sp)
    1728:	bdae983a 	sll	r23,r23,r22
    172c:	1923c83a 	sub	r17,r3,r4
    1730:	2804943a 	slli	r2,r5,16
    1734:	a0a8b03a 	or	r20,r20,r2
    1738:	dd000315 	stw	r20,12(sp)
    173c:	003ebf06 	br	123c <__divdi3+0xb8>
    1740:	2004943a 	slli	r2,r4,16
    1744:	bf08983a 	sll	r4,r23,fp
    1748:	48ffffcc 	andi	r3,r9,65535
    174c:	10c5883a 	add	r2,r2,r3
    1750:	20bfc22e 	bgeu	r4,r2,165c <__divdi3+0x4d8>
    1754:	40bfffc4 	addi	r2,r8,-1
    1758:	0007883a 	mov	r3,zero
    175c:	003ee006 	br	12e0 <__divdi3+0x15c>
    1760:	01400204 	movi	r5,8
    1764:	2805883a 	mov	r2,r5
    1768:	003efd06 	br	1360 <__divdi3+0x1dc>
    176c:	01400604 	movi	r5,24
    1770:	2805883a 	mov	r2,r5
    1774:	003f3606 	br	1450 <__divdi3+0x2cc>
    1778:	01400204 	movi	r5,8
    177c:	2805883a 	mov	r2,r5
    1780:	003ea006 	br	1204 <__divdi3+0x80>
    1784:	01400204 	movi	r5,8
    1788:	2805883a 	mov	r2,r5
    178c:	003f3006 	br	1450 <__divdi3+0x2cc>
    1790:	01400604 	movi	r5,24
    1794:	2805883a 	mov	r2,r5
    1798:	003e9a06 	br	1204 <__divdi3+0x80>
    179c:	01400604 	movi	r5,24
    17a0:	2805883a 	mov	r2,r5
    17a4:	003eee06 	br	1360 <__divdi3+0x1dc>
    17a8:	147fca2e 	bgeu	r2,r17,16d4 <__divdi3+0x550>
    17ac:	213fffc4 	addi	r4,r4,-1
    17b0:	1405883a 	add	r2,r2,r16
    17b4:	d9000415 	stw	r4,16(sp)
    17b8:	003fc606 	br	16d4 <__divdi3+0x550>
    17bc:	89ff912e 	bgeu	r17,r7,1604 <__divdi3+0x480>
    17c0:	8d63883a 	add	r17,r17,r21
    17c4:	843fffc4 	addi	r16,r16,-1
    17c8:	003f8e06 	br	1604 <__divdi3+0x480>
    17cc:	147f7b2e 	bgeu	r2,r17,15bc <__divdi3+0x438>
    17d0:	a53fffc4 	addi	r20,r20,-1
    17d4:	1545883a 	add	r2,r2,r21
    17d8:	003f7806 	br	15bc <__divdi3+0x438>
    17dc:	a53fffc4 	addi	r20,r20,-1
    17e0:	003eb706 	br	12c0 <__divdi3+0x13c>
    17e4:	a53fffc4 	addi	r20,r20,-1
    17e8:	003f0f06 	br	1428 <__divdi3+0x2a4>
    17ec:	b5bfffc4 	addi	r22,r22,-1
    17f0:	1405883a 	add	r2,r2,r16
    17f4:	003efb06 	br	13e4 <__divdi3+0x260>
    17f8:	b5bfffc4 	addi	r22,r22,-1
    17fc:	1405883a 	add	r2,r2,r16
    1800:	003e9e06 	br	127c <__divdi3+0xf8>

00001804 <__moddi3>:
    1804:	deffee04 	addi	sp,sp,-72
    1808:	2005883a 	mov	r2,r4
    180c:	2807883a 	mov	r3,r5
    1810:	dfc01115 	stw	ra,68(sp)
    1814:	df001015 	stw	fp,64(sp)
    1818:	ddc00f15 	stw	r23,60(sp)
    181c:	dd800e15 	stw	r22,56(sp)
    1820:	dd400d15 	stw	r21,52(sp)
    1824:	dd000c15 	stw	r20,48(sp)
    1828:	dcc00b15 	stw	r19,44(sp)
    182c:	dc800a15 	stw	r18,40(sp)
    1830:	dc400915 	stw	r17,36(sp)
    1834:	dc000815 	stw	r16,32(sp)
    1838:	1019883a 	mov	r12,r2
    183c:	181b883a 	mov	r13,r3
    1840:	3011883a 	mov	r8,r6
    1844:	3813883a 	mov	r9,r7
    1848:	1800a216 	blt	r3,zero,1ad4 <__moddi3+0x2d0>
    184c:	d8000715 	stw	zero,28(sp)
    1850:	48009816 	blt	r9,zero,1ab4 <__moddi3+0x2b0>
    1854:	4021883a 	mov	r16,r8
    1858:	602d883a 	mov	r22,r12
    185c:	6829883a 	mov	r20,r13
    1860:	48002b1e 	bne	r9,zero,1910 <__moddi3+0x10c>
    1864:	6a005e36 	bltu	r13,r8,19e0 <__moddi3+0x1dc>
    1868:	4000aa26 	beq	r8,zero,1b14 <__moddi3+0x310>
    186c:	00bfffd4 	movui	r2,65535
    1870:	1400a236 	bltu	r2,r16,1afc <__moddi3+0x2f8>
    1874:	00803fc4 	movi	r2,255
    1878:	14015636 	bltu	r2,r16,1dd4 <__moddi3+0x5d0>
    187c:	000b883a 	mov	r5,zero
    1880:	0005883a 	mov	r2,zero
    1884:	8084d83a 	srl	r2,r16,r2
    1888:	01000074 	movhi	r4,1
    188c:	213a5604 	addi	r4,r4,-5800
    1890:	01800804 	movi	r6,32
    1894:	1105883a 	add	r2,r2,r4
    1898:	10c00003 	ldbu	r3,0(r2)
    189c:	28c7883a 	add	r3,r5,r3
    18a0:	30efc83a 	sub	r23,r6,r3
    18a4:	b800b41e 	bne	r23,zero,1b78 <__moddi3+0x374>
    18a8:	802ad43a 	srli	r21,r16,16
    18ac:	a423c83a 	sub	r17,r20,r16
    18b0:	0039883a 	mov	fp,zero
    18b4:	853fffcc 	andi	r20,r16,65535
    18b8:	8809883a 	mov	r4,r17
    18bc:	a80b883a 	mov	r5,r21
    18c0:	0001f940 	call	1f94 <__udivsi3>
    18c4:	8809883a 	mov	r4,r17
    18c8:	a80b883a 	mov	r5,r21
    18cc:	a0a3383a 	mul	r17,r20,r2
    18d0:	0001f9c0 	call	1f9c <__umodsi3>
    18d4:	1004943a 	slli	r2,r2,16
    18d8:	b006d43a 	srli	r3,r22,16
    18dc:	10c4b03a 	or	r2,r2,r3
    18e0:	1440032e 	bgeu	r2,r17,18f0 <__moddi3+0xec>
    18e4:	1405883a 	add	r2,r2,r16
    18e8:	14000136 	bltu	r2,r16,18f0 <__moddi3+0xec>
    18ec:	14415536 	bltu	r2,r17,1e44 <__moddi3+0x640>
    18f0:	1463c83a 	sub	r17,r2,r17
    18f4:	8809883a 	mov	r4,r17
    18f8:	a80b883a 	mov	r5,r21
    18fc:	0001f940 	call	1f94 <__udivsi3>
    1900:	8809883a 	mov	r4,r17
    1904:	a0a3383a 	mul	r17,r20,r2
    1908:	a80b883a 	mov	r5,r21
    190c:	00005b06 	br	1a7c <__moddi3+0x278>
    1910:	480d883a 	mov	r6,r9
    1914:	6a401e2e 	bgeu	r13,r9,1990 <__moddi3+0x18c>
    1918:	db000015 	stw	r12,0(sp)
    191c:	db400115 	stw	r13,4(sp)
    1920:	d8c00717 	ldw	r3,28(sp)
    1924:	1805003a 	cmpeq	r2,r3,zero
    1928:	1000091e 	bne	r2,zero,1950 <__moddi3+0x14c>
    192c:	d9800017 	ldw	r6,0(sp)
    1930:	d9c00117 	ldw	r7,4(sp)
    1934:	0009883a 	mov	r4,zero
    1938:	2185c83a 	sub	r2,r4,r6
    193c:	2089803a 	cmpltu	r4,r4,r2
    1940:	01c7c83a 	sub	r3,zero,r7
    1944:	1909c83a 	sub	r4,r3,r4
    1948:	d8800015 	stw	r2,0(sp)
    194c:	d9000115 	stw	r4,4(sp)
    1950:	d9000017 	ldw	r4,0(sp)
    1954:	d9400117 	ldw	r5,4(sp)
    1958:	2005883a 	mov	r2,r4
    195c:	2807883a 	mov	r3,r5
    1960:	dfc01117 	ldw	ra,68(sp)
    1964:	df001017 	ldw	fp,64(sp)
    1968:	ddc00f17 	ldw	r23,60(sp)
    196c:	dd800e17 	ldw	r22,56(sp)
    1970:	dd400d17 	ldw	r21,52(sp)
    1974:	dd000c17 	ldw	r20,48(sp)
    1978:	dcc00b17 	ldw	r19,44(sp)
    197c:	dc800a17 	ldw	r18,40(sp)
    1980:	dc400917 	ldw	r17,36(sp)
    1984:	dc000817 	ldw	r16,32(sp)
    1988:	dec01204 	addi	sp,sp,72
    198c:	f800283a 	ret
    1990:	00bfffd4 	movui	r2,65535
    1994:	12406c36 	bltu	r2,r9,1b48 <__moddi3+0x344>
    1998:	00803fc4 	movi	r2,255
    199c:	12411036 	bltu	r2,r9,1de0 <__moddi3+0x5dc>
    19a0:	000b883a 	mov	r5,zero
    19a4:	0005883a 	mov	r2,zero
    19a8:	3084d83a 	srl	r2,r6,r2
    19ac:	01000074 	movhi	r4,1
    19b0:	213a5604 	addi	r4,r4,-5800
    19b4:	01c00804 	movi	r7,32
    19b8:	1105883a 	add	r2,r2,r4
    19bc:	10c00003 	ldbu	r3,0(r2)
    19c0:	28c7883a 	add	r3,r5,r3
    19c4:	38ebc83a 	sub	r21,r7,r3
    19c8:	a800971e 	bne	r21,zero,1c28 <__moddi3+0x424>
    19cc:	35006436 	bltu	r6,r20,1b60 <__moddi3+0x35c>
    19d0:	b400632e 	bgeu	r22,r16,1b60 <__moddi3+0x35c>
    19d4:	dd000115 	stw	r20,4(sp)
    19d8:	dd800015 	stw	r22,0(sp)
    19dc:	003fd006 	br	1920 <__moddi3+0x11c>
    19e0:	00bfffd4 	movui	r2,65535
    19e4:	12005236 	bltu	r2,r8,1b30 <__moddi3+0x32c>
    19e8:	00803fc4 	movi	r2,255
    19ec:	1200ff36 	bltu	r2,r8,1dec <__moddi3+0x5e8>
    19f0:	000b883a 	mov	r5,zero
    19f4:	0005883a 	mov	r2,zero
    19f8:	8084d83a 	srl	r2,r16,r2
    19fc:	01000074 	movhi	r4,1
    1a00:	213a5604 	addi	r4,r4,-5800
    1a04:	01800804 	movi	r6,32
    1a08:	1105883a 	add	r2,r2,r4
    1a0c:	10c00003 	ldbu	r3,0(r2)
    1a10:	28c7883a 	add	r3,r5,r3
    1a14:	30c7c83a 	sub	r3,r6,r3
    1a18:	1800d11e 	bne	r3,zero,1d60 <__moddi3+0x55c>
    1a1c:	0039883a 	mov	fp,zero
    1a20:	802ad43a 	srli	r21,r16,16
    1a24:	a009883a 	mov	r4,r20
    1a28:	85ffffcc 	andi	r23,r16,65535
    1a2c:	a80b883a 	mov	r5,r21
    1a30:	0001f940 	call	1f94 <__udivsi3>
    1a34:	a009883a 	mov	r4,r20
    1a38:	a80b883a 	mov	r5,r21
    1a3c:	b8a3383a 	mul	r17,r23,r2
    1a40:	0001f9c0 	call	1f9c <__umodsi3>
    1a44:	1004943a 	slli	r2,r2,16
    1a48:	b006d43a 	srli	r3,r22,16
    1a4c:	10c4b03a 	or	r2,r2,r3
    1a50:	1440032e 	bgeu	r2,r17,1a60 <__moddi3+0x25c>
    1a54:	1405883a 	add	r2,r2,r16
    1a58:	14000136 	bltu	r2,r16,1a60 <__moddi3+0x25c>
    1a5c:	1440f736 	bltu	r2,r17,1e3c <__moddi3+0x638>
    1a60:	1463c83a 	sub	r17,r2,r17
    1a64:	8809883a 	mov	r4,r17
    1a68:	a80b883a 	mov	r5,r21
    1a6c:	0001f940 	call	1f94 <__udivsi3>
    1a70:	8809883a 	mov	r4,r17
    1a74:	b8a3383a 	mul	r17,r23,r2
    1a78:	a80b883a 	mov	r5,r21
    1a7c:	0001f9c0 	call	1f9c <__umodsi3>
    1a80:	1004943a 	slli	r2,r2,16
    1a84:	b0ffffcc 	andi	r3,r22,65535
    1a88:	10c4b03a 	or	r2,r2,r3
    1a8c:	1440042e 	bgeu	r2,r17,1aa0 <__moddi3+0x29c>
    1a90:	1405883a 	add	r2,r2,r16
    1a94:	14000236 	bltu	r2,r16,1aa0 <__moddi3+0x29c>
    1a98:	1440012e 	bgeu	r2,r17,1aa0 <__moddi3+0x29c>
    1a9c:	1405883a 	add	r2,r2,r16
    1aa0:	1445c83a 	sub	r2,r2,r17
    1aa4:	1724d83a 	srl	r18,r2,fp
    1aa8:	d8000115 	stw	zero,4(sp)
    1aac:	dc800015 	stw	r18,0(sp)
    1ab0:	003f9b06 	br	1920 <__moddi3+0x11c>
    1ab4:	0009883a 	mov	r4,zero
    1ab8:	2205c83a 	sub	r2,r4,r8
    1abc:	0247c83a 	sub	r3,zero,r9
    1ac0:	2089803a 	cmpltu	r4,r4,r2
    1ac4:	1909c83a 	sub	r4,r3,r4
    1ac8:	1011883a 	mov	r8,r2
    1acc:	2013883a 	mov	r9,r4
    1ad0:	003f6006 	br	1854 <__moddi3+0x50>
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	2085c83a 	sub	r2,r4,r2
    1adc:	2089803a 	cmpltu	r4,r4,r2
    1ae0:	00c7c83a 	sub	r3,zero,r3
    1ae4:	1909c83a 	sub	r4,r3,r4
    1ae8:	1019883a 	mov	r12,r2
    1aec:	201b883a 	mov	r13,r4
    1af0:	00bfffc4 	movi	r2,-1
    1af4:	d8800715 	stw	r2,28(sp)
    1af8:	003f5506 	br	1850 <__moddi3+0x4c>
    1afc:	00804034 	movhi	r2,256
    1b00:	10bfffc4 	addi	r2,r2,-1
    1b04:	1400b036 	bltu	r2,r16,1dc8 <__moddi3+0x5c4>
    1b08:	01400404 	movi	r5,16
    1b0c:	2805883a 	mov	r2,r5
    1b10:	003f5c06 	br	1884 <__moddi3+0x80>
    1b14:	01000044 	movi	r4,1
    1b18:	000b883a 	mov	r5,zero
    1b1c:	0001f940 	call	1f94 <__udivsi3>
    1b20:	1021883a 	mov	r16,r2
    1b24:	00bfffd4 	movui	r2,65535
    1b28:	143ff436 	bltu	r2,r16,1afc <__moddi3+0x2f8>
    1b2c:	003f5106 	br	1874 <__moddi3+0x70>
    1b30:	00804034 	movhi	r2,256
    1b34:	10bfffc4 	addi	r2,r2,-1
    1b38:	1200af36 	bltu	r2,r8,1df8 <__moddi3+0x5f4>
    1b3c:	01400404 	movi	r5,16
    1b40:	2805883a 	mov	r2,r5
    1b44:	003fac06 	br	19f8 <__moddi3+0x1f4>
    1b48:	00804034 	movhi	r2,256
    1b4c:	10bfffc4 	addi	r2,r2,-1
    1b50:	1240ac36 	bltu	r2,r9,1e04 <__moddi3+0x600>
    1b54:	01400404 	movi	r5,16
    1b58:	2805883a 	mov	r2,r5
    1b5c:	003f9206 	br	19a8 <__moddi3+0x1a4>
    1b60:	b409c83a 	sub	r4,r22,r16
    1b64:	b105803a 	cmpltu	r2,r22,r4
    1b68:	a187c83a 	sub	r3,r20,r6
    1b6c:	18a9c83a 	sub	r20,r3,r2
    1b70:	202d883a 	mov	r22,r4
    1b74:	003f9706 	br	19d4 <__moddi3+0x1d0>
    1b78:	85e0983a 	sll	r16,r16,r23
    1b7c:	35c5c83a 	sub	r2,r6,r23
    1b80:	a0a2d83a 	srl	r17,r20,r2
    1b84:	802ad43a 	srli	r21,r16,16
    1b88:	b084d83a 	srl	r2,r22,r2
    1b8c:	a5c6983a 	sll	r3,r20,r23
    1b90:	8809883a 	mov	r4,r17
    1b94:	a80b883a 	mov	r5,r21
    1b98:	1886b03a 	or	r3,r3,r2
    1b9c:	d8c00315 	stw	r3,12(sp)
    1ba0:	853fffcc 	andi	r20,r16,65535
    1ba4:	0001f940 	call	1f94 <__udivsi3>
    1ba8:	8809883a 	mov	r4,r17
    1bac:	a80b883a 	mov	r5,r21
    1bb0:	a0a3383a 	mul	r17,r20,r2
    1bb4:	0001f9c0 	call	1f9c <__umodsi3>
    1bb8:	d9000317 	ldw	r4,12(sp)
    1bbc:	1004943a 	slli	r2,r2,16
    1bc0:	b839883a 	mov	fp,r23
    1bc4:	2006d43a 	srli	r3,r4,16
    1bc8:	10c4b03a 	or	r2,r2,r3
    1bcc:	1440022e 	bgeu	r2,r17,1bd8 <__moddi3+0x3d4>
    1bd0:	1405883a 	add	r2,r2,r16
    1bd4:	1400962e 	bgeu	r2,r16,1e30 <__moddi3+0x62c>
    1bd8:	1463c83a 	sub	r17,r2,r17
    1bdc:	8809883a 	mov	r4,r17
    1be0:	a80b883a 	mov	r5,r21
    1be4:	0001f940 	call	1f94 <__udivsi3>
    1be8:	8809883a 	mov	r4,r17
    1bec:	a80b883a 	mov	r5,r21
    1bf0:	a0a3383a 	mul	r17,r20,r2
    1bf4:	0001f9c0 	call	1f9c <__umodsi3>
    1bf8:	d9400317 	ldw	r5,12(sp)
    1bfc:	1004943a 	slli	r2,r2,16
    1c00:	28ffffcc 	andi	r3,r5,65535
    1c04:	10c4b03a 	or	r2,r2,r3
    1c08:	1440042e 	bgeu	r2,r17,1c1c <__moddi3+0x418>
    1c0c:	1405883a 	add	r2,r2,r16
    1c10:	14000236 	bltu	r2,r16,1c1c <__moddi3+0x418>
    1c14:	1440012e 	bgeu	r2,r17,1c1c <__moddi3+0x418>
    1c18:	1405883a 	add	r2,r2,r16
    1c1c:	b5ec983a 	sll	r22,r22,r23
    1c20:	1463c83a 	sub	r17,r2,r17
    1c24:	003f2406 	br	18b8 <__moddi3+0xb4>
    1c28:	3d4fc83a 	sub	r7,r7,r21
    1c2c:	3546983a 	sll	r3,r6,r21
    1c30:	81c4d83a 	srl	r2,r16,r7
    1c34:	a1e2d83a 	srl	r17,r20,r7
    1c38:	a54c983a 	sll	r6,r20,r21
    1c3c:	18aeb03a 	or	r23,r3,r2
    1c40:	b828d43a 	srli	r20,r23,16
    1c44:	b1c4d83a 	srl	r2,r22,r7
    1c48:	8809883a 	mov	r4,r17
    1c4c:	a00b883a 	mov	r5,r20
    1c50:	308cb03a 	or	r6,r6,r2
    1c54:	d9c00515 	stw	r7,20(sp)
    1c58:	d9800415 	stw	r6,16(sp)
    1c5c:	0001f940 	call	1f94 <__udivsi3>
    1c60:	8809883a 	mov	r4,r17
    1c64:	a00b883a 	mov	r5,r20
    1c68:	1039883a 	mov	fp,r2
    1c6c:	0001f9c0 	call	1f9c <__umodsi3>
    1c70:	b8ffffcc 	andi	r3,r23,65535
    1c74:	d8c00615 	stw	r3,24(sp)
    1c78:	d9000417 	ldw	r4,16(sp)
    1c7c:	d9400617 	ldw	r5,24(sp)
    1c80:	1004943a 	slli	r2,r2,16
    1c84:	2006d43a 	srli	r3,r4,16
    1c88:	8560983a 	sll	r16,r16,r21
    1c8c:	2f23383a 	mul	r17,r5,fp
    1c90:	10c4b03a 	or	r2,r2,r3
    1c94:	dc000215 	stw	r16,8(sp)
    1c98:	b56c983a 	sll	r22,r22,r21
    1c9c:	1440032e 	bgeu	r2,r17,1cac <__moddi3+0x4a8>
    1ca0:	15c5883a 	add	r2,r2,r23
    1ca4:	e73fffc4 	addi	fp,fp,-1
    1ca8:	15c05d2e 	bgeu	r2,r23,1e20 <__moddi3+0x61c>
    1cac:	1463c83a 	sub	r17,r2,r17
    1cb0:	8809883a 	mov	r4,r17
    1cb4:	a00b883a 	mov	r5,r20
    1cb8:	0001f940 	call	1f94 <__udivsi3>
    1cbc:	8809883a 	mov	r4,r17
    1cc0:	a00b883a 	mov	r5,r20
    1cc4:	1021883a 	mov	r16,r2
    1cc8:	0001f9c0 	call	1f9c <__umodsi3>
    1ccc:	d8c00617 	ldw	r3,24(sp)
    1cd0:	d9000417 	ldw	r4,16(sp)
    1cd4:	1004943a 	slli	r2,r2,16
    1cd8:	1c0f383a 	mul	r7,r3,r16
    1cdc:	20ffffcc 	andi	r3,r4,65535
    1ce0:	10e2b03a 	or	r17,r2,r3
    1ce4:	89c0032e 	bgeu	r17,r7,1cf4 <__moddi3+0x4f0>
    1ce8:	8de3883a 	add	r17,r17,r23
    1cec:	843fffc4 	addi	r16,r16,-1
    1cf0:	8dc0472e 	bgeu	r17,r23,1e10 <__moddi3+0x60c>
    1cf4:	e004943a 	slli	r2,fp,16
    1cf8:	d9400217 	ldw	r5,8(sp)
    1cfc:	89e3c83a 	sub	r17,r17,r7
    1d00:	8084b03a 	or	r2,r16,r2
    1d04:	28ffffcc 	andi	r3,r5,65535
    1d08:	280cd43a 	srli	r6,r5,16
    1d0c:	100ad43a 	srli	r5,r2,16
    1d10:	10bfffcc 	andi	r2,r2,65535
    1d14:	10d1383a 	mul	r8,r2,r3
    1d18:	28c7383a 	mul	r3,r5,r3
    1d1c:	1185383a 	mul	r2,r2,r6
    1d20:	4008d43a 	srli	r4,r8,16
    1d24:	298b383a 	mul	r5,r5,r6
    1d28:	10c5883a 	add	r2,r2,r3
    1d2c:	2089883a 	add	r4,r4,r2
    1d30:	20c0022e 	bgeu	r4,r3,1d3c <__moddi3+0x538>
    1d34:	00800074 	movhi	r2,1
    1d38:	288b883a 	add	r5,r5,r2
    1d3c:	2004d43a 	srli	r2,r4,16
    1d40:	2008943a 	slli	r4,r4,16
    1d44:	40ffffcc 	andi	r3,r8,65535
    1d48:	288b883a 	add	r5,r5,r2
    1d4c:	20c9883a 	add	r4,r4,r3
    1d50:	89400b36 	bltu	r17,r5,1d80 <__moddi3+0x57c>
    1d54:	89403d26 	beq	r17,r5,1e4c <__moddi3+0x648>
    1d58:	894bc83a 	sub	r5,r17,r5
    1d5c:	00000f06 	br	1d9c <__moddi3+0x598>
    1d60:	30c5c83a 	sub	r2,r6,r3
    1d64:	1839883a 	mov	fp,r3
    1d68:	b084d83a 	srl	r2,r22,r2
    1d6c:	a0c6983a 	sll	r3,r20,r3
    1d70:	8720983a 	sll	r16,r16,fp
    1d74:	b72c983a 	sll	r22,r22,fp
    1d78:	18a8b03a 	or	r20,r3,r2
    1d7c:	003f2806 	br	1a20 <__moddi3+0x21c>
    1d80:	d8c00217 	ldw	r3,8(sp)
    1d84:	20c5c83a 	sub	r2,r4,r3
    1d88:	2089803a 	cmpltu	r4,r4,r2
    1d8c:	2dc7c83a 	sub	r3,r5,r23
    1d90:	1907c83a 	sub	r3,r3,r4
    1d94:	88cbc83a 	sub	r5,r17,r3
    1d98:	1009883a 	mov	r4,r2
    1d9c:	b105c83a 	sub	r2,r22,r4
    1da0:	b087803a 	cmpltu	r3,r22,r2
    1da4:	28c7c83a 	sub	r3,r5,r3
    1da8:	d9400517 	ldw	r5,20(sp)
    1dac:	1544d83a 	srl	r2,r2,r21
    1db0:	1948983a 	sll	r4,r3,r5
    1db4:	1d46d83a 	srl	r3,r3,r21
    1db8:	20a4b03a 	or	r18,r4,r2
    1dbc:	d8c00115 	stw	r3,4(sp)
    1dc0:	dc800015 	stw	r18,0(sp)
    1dc4:	003ed606 	br	1920 <__moddi3+0x11c>
    1dc8:	01400604 	movi	r5,24
    1dcc:	2805883a 	mov	r2,r5
    1dd0:	003eac06 	br	1884 <__moddi3+0x80>
    1dd4:	01400204 	movi	r5,8
    1dd8:	2805883a 	mov	r2,r5
    1ddc:	003ea906 	br	1884 <__moddi3+0x80>
    1de0:	01400204 	movi	r5,8
    1de4:	2805883a 	mov	r2,r5
    1de8:	003eef06 	br	19a8 <__moddi3+0x1a4>
    1dec:	01400204 	movi	r5,8
    1df0:	2805883a 	mov	r2,r5
    1df4:	003f0006 	br	19f8 <__moddi3+0x1f4>
    1df8:	01400604 	movi	r5,24
    1dfc:	2805883a 	mov	r2,r5
    1e00:	003efd06 	br	19f8 <__moddi3+0x1f4>
    1e04:	01400604 	movi	r5,24
    1e08:	2805883a 	mov	r2,r5
    1e0c:	003ee606 	br	19a8 <__moddi3+0x1a4>
    1e10:	89ffb82e 	bgeu	r17,r7,1cf4 <__moddi3+0x4f0>
    1e14:	843fffc4 	addi	r16,r16,-1
    1e18:	8de3883a 	add	r17,r17,r23
    1e1c:	003fb506 	br	1cf4 <__moddi3+0x4f0>
    1e20:	147fa22e 	bgeu	r2,r17,1cac <__moddi3+0x4a8>
    1e24:	e73fffc4 	addi	fp,fp,-1
    1e28:	15c5883a 	add	r2,r2,r23
    1e2c:	003f9f06 	br	1cac <__moddi3+0x4a8>
    1e30:	147f692e 	bgeu	r2,r17,1bd8 <__moddi3+0x3d4>
    1e34:	1405883a 	add	r2,r2,r16
    1e38:	003f6706 	br	1bd8 <__moddi3+0x3d4>
    1e3c:	1405883a 	add	r2,r2,r16
    1e40:	003f0706 	br	1a60 <__moddi3+0x25c>
    1e44:	1405883a 	add	r2,r2,r16
    1e48:	003ea906 	br	18f0 <__moddi3+0xec>
    1e4c:	b13fcc36 	bltu	r22,r4,1d80 <__moddi3+0x57c>
    1e50:	000b883a 	mov	r5,zero
    1e54:	003fd106 	br	1d9c <__moddi3+0x598>

00001e58 <udivmodsi4>:
    1e58:	29001b2e 	bgeu	r5,r4,1ec8 <udivmodsi4+0x70>
    1e5c:	28001a16 	blt	r5,zero,1ec8 <udivmodsi4+0x70>
    1e60:	00800044 	movi	r2,1
    1e64:	0007883a 	mov	r3,zero
    1e68:	01c007c4 	movi	r7,31
    1e6c:	00000306 	br	1e7c <udivmodsi4+0x24>
    1e70:	19c01326 	beq	r3,r7,1ec0 <udivmodsi4+0x68>
    1e74:	18c00044 	addi	r3,r3,1
    1e78:	28000416 	blt	r5,zero,1e8c <udivmodsi4+0x34>
    1e7c:	294b883a 	add	r5,r5,r5
    1e80:	1085883a 	add	r2,r2,r2
    1e84:	293ffa36 	bltu	r5,r4,1e70 <udivmodsi4+0x18>
    1e88:	10000d26 	beq	r2,zero,1ec0 <udivmodsi4+0x68>
    1e8c:	0007883a 	mov	r3,zero
    1e90:	21400236 	bltu	r4,r5,1e9c <udivmodsi4+0x44>
    1e94:	2149c83a 	sub	r4,r4,r5
    1e98:	1886b03a 	or	r3,r3,r2
    1e9c:	1004d07a 	srli	r2,r2,1
    1ea0:	280ad07a 	srli	r5,r5,1
    1ea4:	103ffa1e 	bne	r2,zero,1e90 <udivmodsi4+0x38>
    1ea8:	30000226 	beq	r6,zero,1eb4 <udivmodsi4+0x5c>
    1eac:	2005883a 	mov	r2,r4
    1eb0:	f800283a 	ret
    1eb4:	1809883a 	mov	r4,r3
    1eb8:	2005883a 	mov	r2,r4
    1ebc:	f800283a 	ret
    1ec0:	0007883a 	mov	r3,zero
    1ec4:	003ff806 	br	1ea8 <udivmodsi4+0x50>
    1ec8:	00800044 	movi	r2,1
    1ecc:	0007883a 	mov	r3,zero
    1ed0:	003fef06 	br	1e90 <udivmodsi4+0x38>

00001ed4 <__divsi3>:
    1ed4:	defffe04 	addi	sp,sp,-8
    1ed8:	dc000015 	stw	r16,0(sp)
    1edc:	dfc00115 	stw	ra,4(sp)
    1ee0:	0021883a 	mov	r16,zero
    1ee4:	20000c16 	blt	r4,zero,1f18 <__divsi3+0x44>
    1ee8:	000d883a 	mov	r6,zero
    1eec:	28000e16 	blt	r5,zero,1f28 <__divsi3+0x54>
    1ef0:	0001e580 	call	1e58 <udivmodsi4>
    1ef4:	1007883a 	mov	r3,r2
    1ef8:	8005003a 	cmpeq	r2,r16,zero
    1efc:	1000011e 	bne	r2,zero,1f04 <__divsi3+0x30>
    1f00:	00c7c83a 	sub	r3,zero,r3
    1f04:	1805883a 	mov	r2,r3
    1f08:	dfc00117 	ldw	ra,4(sp)
    1f0c:	dc000017 	ldw	r16,0(sp)
    1f10:	dec00204 	addi	sp,sp,8
    1f14:	f800283a 	ret
    1f18:	0109c83a 	sub	r4,zero,r4
    1f1c:	04000044 	movi	r16,1
    1f20:	000d883a 	mov	r6,zero
    1f24:	283ff20e 	bge	r5,zero,1ef0 <__divsi3+0x1c>
    1f28:	014bc83a 	sub	r5,zero,r5
    1f2c:	8021003a 	cmpeq	r16,r16,zero
    1f30:	003fef06 	br	1ef0 <__divsi3+0x1c>

00001f34 <__modsi3>:
    1f34:	deffff04 	addi	sp,sp,-4
    1f38:	dfc00015 	stw	ra,0(sp)
    1f3c:	01800044 	movi	r6,1
    1f40:	2807883a 	mov	r3,r5
    1f44:	20000416 	blt	r4,zero,1f58 <__modsi3+0x24>
    1f48:	28000c16 	blt	r5,zero,1f7c <__modsi3+0x48>
    1f4c:	dfc00017 	ldw	ra,0(sp)
    1f50:	dec00104 	addi	sp,sp,4
    1f54:	0001e581 	jmpi	1e58 <udivmodsi4>
    1f58:	0109c83a 	sub	r4,zero,r4
    1f5c:	28000b16 	blt	r5,zero,1f8c <__modsi3+0x58>
    1f60:	180b883a 	mov	r5,r3
    1f64:	01800044 	movi	r6,1
    1f68:	0001e580 	call	1e58 <udivmodsi4>
    1f6c:	0085c83a 	sub	r2,zero,r2
    1f70:	dfc00017 	ldw	ra,0(sp)
    1f74:	dec00104 	addi	sp,sp,4
    1f78:	f800283a 	ret
    1f7c:	014bc83a 	sub	r5,zero,r5
    1f80:	dfc00017 	ldw	ra,0(sp)
    1f84:	dec00104 	addi	sp,sp,4
    1f88:	0001e581 	jmpi	1e58 <udivmodsi4>
    1f8c:	0147c83a 	sub	r3,zero,r5
    1f90:	003ff306 	br	1f60 <__modsi3+0x2c>

00001f94 <__udivsi3>:
    1f94:	000d883a 	mov	r6,zero
    1f98:	0001e581 	jmpi	1e58 <udivmodsi4>

00001f9c <__umodsi3>:
    1f9c:	01800044 	movi	r6,1
    1fa0:	0001e581 	jmpi	1e58 <udivmodsi4>

00001fa4 <memcpy>:
    1fa4:	01c003c4 	movi	r7,15
    1fa8:	2007883a 	mov	r3,r4
    1fac:	3980032e 	bgeu	r7,r6,1fbc <memcpy+0x18>
    1fb0:	2904b03a 	or	r2,r5,r4
    1fb4:	108000cc 	andi	r2,r2,3
    1fb8:	10000926 	beq	r2,zero,1fe0 <memcpy+0x3c>
    1fbc:	30000626 	beq	r6,zero,1fd8 <memcpy+0x34>
    1fc0:	30cd883a 	add	r6,r6,r3
    1fc4:	28800003 	ldbu	r2,0(r5)
    1fc8:	29400044 	addi	r5,r5,1
    1fcc:	18800005 	stb	r2,0(r3)
    1fd0:	18c00044 	addi	r3,r3,1
    1fd4:	30fffb1e 	bne	r6,r3,1fc4 <memcpy+0x20>
    1fd8:	2005883a 	mov	r2,r4
    1fdc:	f800283a 	ret
    1fe0:	3811883a 	mov	r8,r7
    1fe4:	200f883a 	mov	r7,r4
    1fe8:	28c00017 	ldw	r3,0(r5)
    1fec:	31bffc04 	addi	r6,r6,-16
    1ff0:	38c00015 	stw	r3,0(r7)
    1ff4:	28800117 	ldw	r2,4(r5)
    1ff8:	38800115 	stw	r2,4(r7)
    1ffc:	28c00217 	ldw	r3,8(r5)
    2000:	38c00215 	stw	r3,8(r7)
    2004:	28800317 	ldw	r2,12(r5)
    2008:	29400404 	addi	r5,r5,16
    200c:	38800315 	stw	r2,12(r7)
    2010:	39c00404 	addi	r7,r7,16
    2014:	41bff436 	bltu	r8,r6,1fe8 <memcpy+0x44>
    2018:	008000c4 	movi	r2,3
    201c:	1180072e 	bgeu	r2,r6,203c <memcpy+0x98>
    2020:	1007883a 	mov	r3,r2
    2024:	28800017 	ldw	r2,0(r5)
    2028:	31bfff04 	addi	r6,r6,-4
    202c:	29400104 	addi	r5,r5,4
    2030:	38800015 	stw	r2,0(r7)
    2034:	39c00104 	addi	r7,r7,4
    2038:	19bffa36 	bltu	r3,r6,2024 <memcpy+0x80>
    203c:	3807883a 	mov	r3,r7
    2040:	003fde06 	br	1fbc <memcpy+0x18>

00002044 <memset>:
    2044:	008000c4 	movi	r2,3
    2048:	29403fcc 	andi	r5,r5,255
    204c:	2007883a 	mov	r3,r4
    2050:	1180022e 	bgeu	r2,r6,205c <memset+0x18>
    2054:	2084703a 	and	r2,r4,r2
    2058:	10000826 	beq	r2,zero,207c <memset+0x38>
    205c:	30000526 	beq	r6,zero,2074 <memset+0x30>
    2060:	2805883a 	mov	r2,r5
    2064:	30cd883a 	add	r6,r6,r3
    2068:	18800005 	stb	r2,0(r3)
    206c:	18c00044 	addi	r3,r3,1
    2070:	19bffd1e 	bne	r3,r6,2068 <memset+0x24>
    2074:	2005883a 	mov	r2,r4
    2078:	f800283a 	ret
    207c:	2804923a 	slli	r2,r5,8
    2080:	020003c4 	movi	r8,15
    2084:	200f883a 	mov	r7,r4
    2088:	2884b03a 	or	r2,r5,r2
    208c:	1006943a 	slli	r3,r2,16
    2090:	10c6b03a 	or	r3,r2,r3
    2094:	41800a2e 	bgeu	r8,r6,20c0 <memset+0x7c>
    2098:	4005883a 	mov	r2,r8
    209c:	31bffc04 	addi	r6,r6,-16
    20a0:	38c00015 	stw	r3,0(r7)
    20a4:	38c00115 	stw	r3,4(r7)
    20a8:	38c00215 	stw	r3,8(r7)
    20ac:	38c00315 	stw	r3,12(r7)
    20b0:	39c00404 	addi	r7,r7,16
    20b4:	11bff936 	bltu	r2,r6,209c <memset+0x58>
    20b8:	008000c4 	movi	r2,3
    20bc:	1180052e 	bgeu	r2,r6,20d4 <memset+0x90>
    20c0:	31bfff04 	addi	r6,r6,-4
    20c4:	008000c4 	movi	r2,3
    20c8:	38c00015 	stw	r3,0(r7)
    20cc:	39c00104 	addi	r7,r7,4
    20d0:	11bffb36 	bltu	r2,r6,20c0 <memset+0x7c>
    20d4:	3807883a 	mov	r3,r7
    20d8:	003fe006 	br	205c <memset+0x18>

000020dc <printf>:
    20dc:	defffb04 	addi	sp,sp,-20
    20e0:	dfc00115 	stw	ra,4(sp)
    20e4:	d9400215 	stw	r5,8(sp)
    20e8:	d9800315 	stw	r6,12(sp)
    20ec:	d9c00415 	stw	r7,16(sp)
    20f0:	00800074 	movhi	r2,1
    20f4:	10827c04 	addi	r2,r2,2544
    20f8:	10c00017 	ldw	r3,0(r2)
    20fc:	200b883a 	mov	r5,r4
    2100:	d8800204 	addi	r2,sp,8
    2104:	19000217 	ldw	r4,8(r3)
    2108:	100d883a 	mov	r6,r2
    210c:	d8800015 	stw	r2,0(sp)
    2110:	00042e00 	call	42e0 <__vfprintf_internal>
    2114:	dfc00117 	ldw	ra,4(sp)
    2118:	dec00504 	addi	sp,sp,20
    211c:	f800283a 	ret

00002120 <_printf_r>:
    2120:	defffc04 	addi	sp,sp,-16
    2124:	dfc00115 	stw	ra,4(sp)
    2128:	d9800215 	stw	r6,8(sp)
    212c:	d9c00315 	stw	r7,12(sp)
    2130:	280d883a 	mov	r6,r5
    2134:	21400217 	ldw	r5,8(r4)
    2138:	d8c00204 	addi	r3,sp,8
    213c:	180f883a 	mov	r7,r3
    2140:	d8c00015 	stw	r3,0(sp)
    2144:	00024340 	call	2434 <___vfprintf_internal_r>
    2148:	dfc00117 	ldw	ra,4(sp)
    214c:	dec00404 	addi	sp,sp,16
    2150:	f800283a 	ret

00002154 <_puts_r>:
    2154:	defff604 	addi	sp,sp,-40
    2158:	dc400715 	stw	r17,28(sp)
    215c:	2023883a 	mov	r17,r4
    2160:	2809883a 	mov	r4,r5
    2164:	dfc00915 	stw	ra,36(sp)
    2168:	dcc00815 	stw	r19,32(sp)
    216c:	2827883a 	mov	r19,r5
    2170:	00023680 	call	2368 <strlen>
    2174:	89400217 	ldw	r5,8(r17)
    2178:	00c00074 	movhi	r3,1
    217c:	18f9e204 	addi	r3,r3,-6264
    2180:	01c00044 	movi	r7,1
    2184:	12000044 	addi	r8,r2,1
    2188:	d8c00515 	stw	r3,20(sp)
    218c:	d9c00615 	stw	r7,24(sp)
    2190:	d8c00304 	addi	r3,sp,12
    2194:	01c00084 	movi	r7,2
    2198:	8809883a 	mov	r4,r17
    219c:	d80d883a 	mov	r6,sp
    21a0:	d8c00015 	stw	r3,0(sp)
    21a4:	dcc00315 	stw	r19,12(sp)
    21a8:	da000215 	stw	r8,8(sp)
    21ac:	d9c00115 	stw	r7,4(sp)
    21b0:	d8800415 	stw	r2,16(sp)
    21b4:	000653c0 	call	653c <__sfvwrite_r>
    21b8:	00ffffc4 	movi	r3,-1
    21bc:	10000626 	beq	r2,zero,21d8 <_puts_r+0x84>
    21c0:	1805883a 	mov	r2,r3
    21c4:	dfc00917 	ldw	ra,36(sp)
    21c8:	dcc00817 	ldw	r19,32(sp)
    21cc:	dc400717 	ldw	r17,28(sp)
    21d0:	dec00a04 	addi	sp,sp,40
    21d4:	f800283a 	ret
    21d8:	00c00284 	movi	r3,10
    21dc:	1805883a 	mov	r2,r3
    21e0:	dfc00917 	ldw	ra,36(sp)
    21e4:	dcc00817 	ldw	r19,32(sp)
    21e8:	dc400717 	ldw	r17,28(sp)
    21ec:	dec00a04 	addi	sp,sp,40
    21f0:	f800283a 	ret

000021f4 <puts>:
    21f4:	00800074 	movhi	r2,1
    21f8:	10827c04 	addi	r2,r2,2544
    21fc:	200b883a 	mov	r5,r4
    2200:	11000017 	ldw	r4,0(r2)
    2204:	00021541 	jmpi	2154 <_puts_r>

00002208 <sprintf>:
    2208:	deffe504 	addi	sp,sp,-108
    220c:	2013883a 	mov	r9,r4
    2210:	dfc01815 	stw	ra,96(sp)
    2214:	d9801915 	stw	r6,100(sp)
    2218:	d9c01a15 	stw	r7,104(sp)
    221c:	d8801904 	addi	r2,sp,100
    2220:	d8800015 	stw	r2,0(sp)
    2224:	00800074 	movhi	r2,1
    2228:	10827c04 	addi	r2,r2,2544
    222c:	11000017 	ldw	r4,0(r2)
    2230:	d9c00017 	ldw	r7,0(sp)
    2234:	00808204 	movi	r2,520
    2238:	00e00034 	movhi	r3,32768
    223c:	18ffffc4 	addi	r3,r3,-1
    2240:	280d883a 	mov	r6,r5
    2244:	d880040d 	sth	r2,16(sp)
    2248:	d9400104 	addi	r5,sp,4
    224c:	00bfffc4 	movi	r2,-1
    2250:	d8c00615 	stw	r3,24(sp)
    2254:	d8c00315 	stw	r3,12(sp)
    2258:	da400515 	stw	r9,20(sp)
    225c:	d880048d 	sth	r2,18(sp)
    2260:	da400115 	stw	r9,4(sp)
    2264:	00024340 	call	2434 <___vfprintf_internal_r>
    2268:	d8c00117 	ldw	r3,4(sp)
    226c:	18000005 	stb	zero,0(r3)
    2270:	dfc01817 	ldw	ra,96(sp)
    2274:	dec01b04 	addi	sp,sp,108
    2278:	f800283a 	ret

0000227c <_sprintf_r>:
    227c:	deffe604 	addi	sp,sp,-104
    2280:	2813883a 	mov	r9,r5
    2284:	dfc01815 	stw	ra,96(sp)
    2288:	d9c01915 	stw	r7,100(sp)
    228c:	d8801904 	addi	r2,sp,100
    2290:	d8800015 	stw	r2,0(sp)
    2294:	100f883a 	mov	r7,r2
    2298:	00808204 	movi	r2,520
    229c:	00e00034 	movhi	r3,32768
    22a0:	18ffffc4 	addi	r3,r3,-1
    22a4:	d880040d 	sth	r2,16(sp)
    22a8:	d9400104 	addi	r5,sp,4
    22ac:	00bfffc4 	movi	r2,-1
    22b0:	d8c00615 	stw	r3,24(sp)
    22b4:	d8c00315 	stw	r3,12(sp)
    22b8:	da400515 	stw	r9,20(sp)
    22bc:	d880048d 	sth	r2,18(sp)
    22c0:	da400115 	stw	r9,4(sp)
    22c4:	00024340 	call	2434 <___vfprintf_internal_r>
    22c8:	d8c00117 	ldw	r3,4(sp)
    22cc:	18000005 	stb	zero,0(r3)
    22d0:	dfc01817 	ldw	ra,96(sp)
    22d4:	dec01a04 	addi	sp,sp,104
    22d8:	f800283a 	ret

000022dc <strcpy>:
    22dc:	2904b03a 	or	r2,r5,r4
    22e0:	108000cc 	andi	r2,r2,3
    22e4:	10000826 	beq	r2,zero,2308 <strcpy+0x2c>
    22e8:	2007883a 	mov	r3,r4
    22ec:	28800003 	ldbu	r2,0(r5)
    22f0:	29400044 	addi	r5,r5,1
    22f4:	18800005 	stb	r2,0(r3)
    22f8:	18c00044 	addi	r3,r3,1
    22fc:	103ffb1e 	bne	r2,zero,22ec <strcpy+0x10>
    2300:	2005883a 	mov	r2,r4
    2304:	f800283a 	ret
    2308:	29800017 	ldw	r6,0(r5)
    230c:	023fbff4 	movhi	r8,65279
    2310:	423fbfc4 	addi	r8,r8,-257
    2314:	02a02074 	movhi	r10,32897
    2318:	52a02004 	addi	r10,r10,-32640
    231c:	3205883a 	add	r2,r6,r8
    2320:	0186303a 	nor	r3,zero,r6
    2324:	10c4703a 	and	r2,r2,r3
    2328:	1284703a 	and	r2,r2,r10
    232c:	200f883a 	mov	r7,r4
    2330:	10000b1e 	bne	r2,zero,2360 <strcpy+0x84>
    2334:	4013883a 	mov	r9,r8
    2338:	5011883a 	mov	r8,r10
    233c:	39800015 	stw	r6,0(r7)
    2340:	29400104 	addi	r5,r5,4
    2344:	29800017 	ldw	r6,0(r5)
    2348:	39c00104 	addi	r7,r7,4
    234c:	3245883a 	add	r2,r6,r9
    2350:	0186303a 	nor	r3,zero,r6
    2354:	10c4703a 	and	r2,r2,r3
    2358:	1204703a 	and	r2,r2,r8
    235c:	103ff726 	beq	r2,zero,233c <strcpy+0x60>
    2360:	3807883a 	mov	r3,r7
    2364:	003fe106 	br	22ec <strcpy+0x10>

00002368 <strlen>:
    2368:	208000cc 	andi	r2,r4,3
    236c:	2011883a 	mov	r8,r4
    2370:	1000161e 	bne	r2,zero,23cc <strlen+0x64>
    2374:	20c00017 	ldw	r3,0(r4)
    2378:	017fbff4 	movhi	r5,65279
    237c:	297fbfc4 	addi	r5,r5,-257
    2380:	01e02074 	movhi	r7,32897
    2384:	39e02004 	addi	r7,r7,-32640
    2388:	1945883a 	add	r2,r3,r5
    238c:	11c4703a 	and	r2,r2,r7
    2390:	00c6303a 	nor	r3,zero,r3
    2394:	1886703a 	and	r3,r3,r2
    2398:	18000c1e 	bne	r3,zero,23cc <strlen+0x64>
    239c:	280d883a 	mov	r6,r5
    23a0:	380b883a 	mov	r5,r7
    23a4:	21000104 	addi	r4,r4,4
    23a8:	20800017 	ldw	r2,0(r4)
    23ac:	1187883a 	add	r3,r2,r6
    23b0:	1946703a 	and	r3,r3,r5
    23b4:	0084303a 	nor	r2,zero,r2
    23b8:	10c4703a 	and	r2,r2,r3
    23bc:	103ff926 	beq	r2,zero,23a4 <strlen+0x3c>
    23c0:	20800007 	ldb	r2,0(r4)
    23c4:	10000326 	beq	r2,zero,23d4 <strlen+0x6c>
    23c8:	21000044 	addi	r4,r4,1
    23cc:	20800007 	ldb	r2,0(r4)
    23d0:	103ffd1e 	bne	r2,zero,23c8 <strlen+0x60>
    23d4:	2205c83a 	sub	r2,r4,r8
    23d8:	f800283a 	ret

000023dc <__sprint_r>:
    23dc:	30800217 	ldw	r2,8(r6)
    23e0:	defffe04 	addi	sp,sp,-8
    23e4:	dc000015 	stw	r16,0(sp)
    23e8:	dfc00115 	stw	ra,4(sp)
    23ec:	3021883a 	mov	r16,r6
    23f0:	0007883a 	mov	r3,zero
    23f4:	1000061e 	bne	r2,zero,2410 <__sprint_r+0x34>
    23f8:	1805883a 	mov	r2,r3
    23fc:	30000115 	stw	zero,4(r6)
    2400:	dfc00117 	ldw	ra,4(sp)
    2404:	dc000017 	ldw	r16,0(sp)
    2408:	dec00204 	addi	sp,sp,8
    240c:	f800283a 	ret
    2410:	000653c0 	call	653c <__sfvwrite_r>
    2414:	1007883a 	mov	r3,r2
    2418:	1805883a 	mov	r2,r3
    241c:	80000115 	stw	zero,4(r16)
    2420:	80000215 	stw	zero,8(r16)
    2424:	dfc00117 	ldw	ra,4(sp)
    2428:	dc000017 	ldw	r16,0(sp)
    242c:	dec00204 	addi	sp,sp,8
    2430:	f800283a 	ret

00002434 <___vfprintf_internal_r>:
    2434:	defea404 	addi	sp,sp,-1392
    2438:	dd815815 	stw	r22,1376(sp)
    243c:	dc015215 	stw	r16,1352(sp)
    2440:	d9c15115 	stw	r7,1348(sp)
    2444:	dfc15b15 	stw	ra,1388(sp)
    2448:	df015a15 	stw	fp,1384(sp)
    244c:	ddc15915 	stw	r23,1380(sp)
    2450:	dd415715 	stw	r21,1372(sp)
    2454:	dd015615 	stw	r20,1368(sp)
    2458:	dcc15515 	stw	r19,1364(sp)
    245c:	dc815415 	stw	r18,1360(sp)
    2460:	dc415315 	stw	r17,1356(sp)
    2464:	282d883a 	mov	r22,r5
    2468:	3021883a 	mov	r16,r6
    246c:	d9014f15 	stw	r4,1340(sp)
    2470:	0006b600 	call	6b60 <_localeconv_r>
    2474:	10800017 	ldw	r2,0(r2)
    2478:	d9c15117 	ldw	r7,1348(sp)
    247c:	d8814915 	stw	r2,1316(sp)
    2480:	d8814f17 	ldw	r2,1340(sp)
    2484:	10000226 	beq	r2,zero,2490 <___vfprintf_internal_r+0x5c>
    2488:	10800e17 	ldw	r2,56(r2)
    248c:	10020d26 	beq	r2,zero,2cc4 <___vfprintf_internal_r+0x890>
    2490:	b080030b 	ldhu	r2,12(r22)
    2494:	1080020c 	andi	r2,r2,8
    2498:	10020e26 	beq	r2,zero,2cd4 <___vfprintf_internal_r+0x8a0>
    249c:	b0800417 	ldw	r2,16(r22)
    24a0:	10020c26 	beq	r2,zero,2cd4 <___vfprintf_internal_r+0x8a0>
    24a4:	b200030b 	ldhu	r8,12(r22)
    24a8:	00800284 	movi	r2,10
    24ac:	40c0068c 	andi	r3,r8,26
    24b0:	18802f1e 	bne	r3,r2,2570 <___vfprintf_internal_r+0x13c>
    24b4:	b080038f 	ldh	r2,14(r22)
    24b8:	10002d16 	blt	r2,zero,2570 <___vfprintf_internal_r+0x13c>
    24bc:	b240038b 	ldhu	r9,14(r22)
    24c0:	b2800717 	ldw	r10,28(r22)
    24c4:	b2c00917 	ldw	r11,36(r22)
    24c8:	d9014f17 	ldw	r4,1340(sp)
    24cc:	dc402904 	addi	r17,sp,164
    24d0:	d8804004 	addi	r2,sp,256
    24d4:	00c10004 	movi	r3,1024
    24d8:	423fff4c 	andi	r8,r8,65533
    24dc:	800d883a 	mov	r6,r16
    24e0:	880b883a 	mov	r5,r17
    24e4:	da002c0d 	sth	r8,176(sp)
    24e8:	da402c8d 	sth	r9,178(sp)
    24ec:	da803015 	stw	r10,192(sp)
    24f0:	dac03215 	stw	r11,200(sp)
    24f4:	d8802d15 	stw	r2,180(sp)
    24f8:	d8c02e15 	stw	r3,184(sp)
    24fc:	d8802915 	stw	r2,164(sp)
    2500:	d8c02b15 	stw	r3,172(sp)
    2504:	d8002f15 	stw	zero,188(sp)
    2508:	00024340 	call	2434 <___vfprintf_internal_r>
    250c:	d8814b15 	stw	r2,1324(sp)
    2510:	10000416 	blt	r2,zero,2524 <___vfprintf_internal_r+0xf0>
    2514:	d9014f17 	ldw	r4,1340(sp)
    2518:	880b883a 	mov	r5,r17
    251c:	0005c0c0 	call	5c0c <_fflush_r>
    2520:	1002321e 	bne	r2,zero,2dec <___vfprintf_internal_r+0x9b8>
    2524:	d8802c0b 	ldhu	r2,176(sp)
    2528:	1080100c 	andi	r2,r2,64
    252c:	10000326 	beq	r2,zero,253c <___vfprintf_internal_r+0x108>
    2530:	b080030b 	ldhu	r2,12(r22)
    2534:	10801014 	ori	r2,r2,64
    2538:	b080030d 	sth	r2,12(r22)
    253c:	d8814b17 	ldw	r2,1324(sp)
    2540:	dfc15b17 	ldw	ra,1388(sp)
    2544:	df015a17 	ldw	fp,1384(sp)
    2548:	ddc15917 	ldw	r23,1380(sp)
    254c:	dd815817 	ldw	r22,1376(sp)
    2550:	dd415717 	ldw	r21,1372(sp)
    2554:	dd015617 	ldw	r20,1368(sp)
    2558:	dcc15517 	ldw	r19,1364(sp)
    255c:	dc815417 	ldw	r18,1360(sp)
    2560:	dc415317 	ldw	r17,1356(sp)
    2564:	dc015217 	ldw	r16,1352(sp)
    2568:	dec15c04 	addi	sp,sp,1392
    256c:	f800283a 	ret
    2570:	0005883a 	mov	r2,zero
    2574:	0007883a 	mov	r3,zero
    2578:	dd401904 	addi	r21,sp,100
    257c:	d8814215 	stw	r2,1288(sp)
    2580:	802f883a 	mov	r23,r16
    2584:	d8c14315 	stw	r3,1292(sp)
    2588:	d8014b15 	stw	zero,1324(sp)
    258c:	d8014815 	stw	zero,1312(sp)
    2590:	d8014415 	stw	zero,1296(sp)
    2594:	d8014715 	stw	zero,1308(sp)
    2598:	dd400c15 	stw	r21,48(sp)
    259c:	d8000e15 	stw	zero,56(sp)
    25a0:	d8000d15 	stw	zero,52(sp)
    25a4:	b8800007 	ldb	r2,0(r23)
    25a8:	10001926 	beq	r2,zero,2610 <___vfprintf_internal_r+0x1dc>
    25ac:	00c00944 	movi	r3,37
    25b0:	10c01726 	beq	r2,r3,2610 <___vfprintf_internal_r+0x1dc>
    25b4:	b821883a 	mov	r16,r23
    25b8:	00000106 	br	25c0 <___vfprintf_internal_r+0x18c>
    25bc:	10c00326 	beq	r2,r3,25cc <___vfprintf_internal_r+0x198>
    25c0:	84000044 	addi	r16,r16,1
    25c4:	80800007 	ldb	r2,0(r16)
    25c8:	103ffc1e 	bne	r2,zero,25bc <___vfprintf_internal_r+0x188>
    25cc:	85e7c83a 	sub	r19,r16,r23
    25d0:	98000e26 	beq	r19,zero,260c <___vfprintf_internal_r+0x1d8>
    25d4:	dc800e17 	ldw	r18,56(sp)
    25d8:	dc400d17 	ldw	r17,52(sp)
    25dc:	008001c4 	movi	r2,7
    25e0:	94e5883a 	add	r18,r18,r19
    25e4:	8c400044 	addi	r17,r17,1
    25e8:	adc00015 	stw	r23,0(r21)
    25ec:	dc800e15 	stw	r18,56(sp)
    25f0:	acc00115 	stw	r19,4(r21)
    25f4:	dc400d15 	stw	r17,52(sp)
    25f8:	14428b16 	blt	r2,r17,3028 <___vfprintf_internal_r+0xbf4>
    25fc:	ad400204 	addi	r21,r21,8
    2600:	d9014b17 	ldw	r4,1324(sp)
    2604:	24c9883a 	add	r4,r4,r19
    2608:	d9014b15 	stw	r4,1324(sp)
    260c:	802f883a 	mov	r23,r16
    2610:	b8800007 	ldb	r2,0(r23)
    2614:	10013c26 	beq	r2,zero,2b08 <___vfprintf_internal_r+0x6d4>
    2618:	bdc00044 	addi	r23,r23,1
    261c:	d8000405 	stb	zero,16(sp)
    2620:	b8c00007 	ldb	r3,0(r23)
    2624:	04ffffc4 	movi	r19,-1
    2628:	d8014c15 	stw	zero,1328(sp)
    262c:	d8014a15 	stw	zero,1320(sp)
    2630:	d8c14d15 	stw	r3,1332(sp)
    2634:	bdc00044 	addi	r23,r23,1
    2638:	d9414d17 	ldw	r5,1332(sp)
    263c:	00801604 	movi	r2,88
    2640:	28fff804 	addi	r3,r5,-32
    2644:	10c06036 	bltu	r2,r3,27c8 <___vfprintf_internal_r+0x394>
    2648:	18c5883a 	add	r2,r3,r3
    264c:	1085883a 	add	r2,r2,r2
    2650:	00c00034 	movhi	r3,0
    2654:	18c99904 	addi	r3,r3,9828
    2658:	10c5883a 	add	r2,r2,r3
    265c:	11000017 	ldw	r4,0(r2)
    2660:	2000683a 	jmp	r4
    2664:	000035d8 	cmpnei	zero,zero,215
    2668:	000027c8 	cmpgei	zero,zero,159
    266c:	000027c8 	cmpgei	zero,zero,159
    2670:	000035c4 	movi	zero,215
    2674:	000027c8 	cmpgei	zero,zero,159
    2678:	000027c8 	cmpgei	zero,zero,159
    267c:	000027c8 	cmpgei	zero,zero,159
    2680:	000027c8 	cmpgei	zero,zero,159
    2684:	000027c8 	cmpgei	zero,zero,159
    2688:	000027c8 	cmpgei	zero,zero,159
    268c:	000033a4 	muli	zero,zero,206
    2690:	000035b4 	movhi	zero,214
    2694:	000027c8 	cmpgei	zero,zero,159
    2698:	000033bc 	xorhi	zero,zero,206
    269c:	00003650 	cmplti	zero,zero,217
    26a0:	000027c8 	cmpgei	zero,zero,159
    26a4:	0000363c 	xorhi	zero,zero,216
    26a8:	00003604 	movi	zero,216
    26ac:	00003604 	movi	zero,216
    26b0:	00003604 	movi	zero,216
    26b4:	00003604 	movi	zero,216
    26b8:	00003604 	movi	zero,216
    26bc:	00003604 	movi	zero,216
    26c0:	00003604 	movi	zero,216
    26c4:	00003604 	movi	zero,216
    26c8:	00003604 	movi	zero,216
    26cc:	000027c8 	cmpgei	zero,zero,159
    26d0:	000027c8 	cmpgei	zero,zero,159
    26d4:	000027c8 	cmpgei	zero,zero,159
    26d8:	000027c8 	cmpgei	zero,zero,159
    26dc:	000027c8 	cmpgei	zero,zero,159
    26e0:	000027c8 	cmpgei	zero,zero,159
    26e4:	000027c8 	cmpgei	zero,zero,159
    26e8:	000027c8 	cmpgei	zero,zero,159
    26ec:	000027c8 	cmpgei	zero,zero,159
    26f0:	000027c8 	cmpgei	zero,zero,159
    26f4:	00002e20 	cmpeqi	zero,zero,184
    26f8:	0000348c 	andi	zero,zero,210
    26fc:	000027c8 	cmpgei	zero,zero,159
    2700:	0000348c 	andi	zero,zero,210
    2704:	000027c8 	cmpgei	zero,zero,159
    2708:	000027c8 	cmpgei	zero,zero,159
    270c:	000027c8 	cmpgei	zero,zero,159
    2710:	000027c8 	cmpgei	zero,zero,159
    2714:	000035f0 	cmpltui	zero,zero,215
    2718:	000027c8 	cmpgei	zero,zero,159
    271c:	000027c8 	cmpgei	zero,zero,159
    2720:	00002ed4 	movui	zero,187
    2724:	000027c8 	cmpgei	zero,zero,159
    2728:	000027c8 	cmpgei	zero,zero,159
    272c:	000027c8 	cmpgei	zero,zero,159
    2730:	000027c8 	cmpgei	zero,zero,159
    2734:	000027c8 	cmpgei	zero,zero,159
    2738:	00002f20 	cmpeqi	zero,zero,188
    273c:	000027c8 	cmpgei	zero,zero,159
    2740:	000027c8 	cmpgei	zero,zero,159
    2744:	00003540 	call	354 <main+0xa4>
    2748:	000027c8 	cmpgei	zero,zero,159
    274c:	000027c8 	cmpgei	zero,zero,159
    2750:	000027c8 	cmpgei	zero,zero,159
    2754:	000027c8 	cmpgei	zero,zero,159
    2758:	000027c8 	cmpgei	zero,zero,159
    275c:	000027c8 	cmpgei	zero,zero,159
    2760:	000027c8 	cmpgei	zero,zero,159
    2764:	000027c8 	cmpgei	zero,zero,159
    2768:	000027c8 	cmpgei	zero,zero,159
    276c:	000027c8 	cmpgei	zero,zero,159
    2770:	00003514 	movui	zero,212
    2774:	00002e2c 	andhi	zero,zero,184
    2778:	0000348c 	andi	zero,zero,210
    277c:	0000348c 	andi	zero,zero,210
    2780:	0000348c 	andi	zero,zero,210
    2784:	00003478 	rdprs	zero,zero,209
    2788:	00002e2c 	andhi	zero,zero,184
    278c:	000027c8 	cmpgei	zero,zero,159
    2790:	000027c8 	cmpgei	zero,zero,159
    2794:	00003400 	call	340 <main+0x90>
    2798:	000027c8 	cmpgei	zero,zero,159
    279c:	000033d0 	cmplti	zero,zero,207
    27a0:	00002ee0 	cmpeqi	zero,zero,187
    27a4:	00003430 	cmpltui	zero,zero,208
    27a8:	0000341c 	xori	zero,zero,208
    27ac:	000027c8 	cmpgei	zero,zero,159
    27b0:	000036ac 	andhi	zero,zero,218
    27b4:	000027c8 	cmpgei	zero,zero,159
    27b8:	00002f2c 	andhi	zero,zero,188
    27bc:	000027c8 	cmpgei	zero,zero,159
    27c0:	000027c8 	cmpgei	zero,zero,159
    27c4:	000035a4 	muli	zero,zero,214
    27c8:	d9014d17 	ldw	r4,1332(sp)
    27cc:	2000ce26 	beq	r4,zero,2b08 <___vfprintf_internal_r+0x6d4>
    27d0:	01400044 	movi	r5,1
    27d4:	d9800f04 	addi	r6,sp,60
    27d8:	d9c14015 	stw	r7,1280(sp)
    27dc:	d9414515 	stw	r5,1300(sp)
    27e0:	d9814115 	stw	r6,1284(sp)
    27e4:	280f883a 	mov	r7,r5
    27e8:	d9000f05 	stb	r4,60(sp)
    27ec:	d8000405 	stb	zero,16(sp)
    27f0:	d8014615 	stw	zero,1304(sp)
    27f4:	d8c14c17 	ldw	r3,1328(sp)
    27f8:	1880008c 	andi	r2,r3,2
    27fc:	1005003a 	cmpeq	r2,r2,zero
    2800:	d8815015 	stw	r2,1344(sp)
    2804:	1000031e 	bne	r2,zero,2814 <___vfprintf_internal_r+0x3e0>
    2808:	d9014517 	ldw	r4,1300(sp)
    280c:	21000084 	addi	r4,r4,2
    2810:	d9014515 	stw	r4,1300(sp)
    2814:	d9414c17 	ldw	r5,1328(sp)
    2818:	2940210c 	andi	r5,r5,132
    281c:	d9414e15 	stw	r5,1336(sp)
    2820:	28002d1e 	bne	r5,zero,28d8 <___vfprintf_internal_r+0x4a4>
    2824:	d9814a17 	ldw	r6,1320(sp)
    2828:	d8814517 	ldw	r2,1300(sp)
    282c:	30a1c83a 	sub	r16,r6,r2
    2830:	0400290e 	bge	zero,r16,28d8 <___vfprintf_internal_r+0x4a4>
    2834:	00800404 	movi	r2,16
    2838:	1404580e 	bge	r2,r16,399c <___vfprintf_internal_r+0x1568>
    283c:	dc800e17 	ldw	r18,56(sp)
    2840:	dc400d17 	ldw	r17,52(sp)
    2844:	1027883a 	mov	r19,r2
    2848:	07000074 	movhi	fp,1
    284c:	e73ab184 	addi	fp,fp,-5434
    2850:	050001c4 	movi	r20,7
    2854:	00000306 	br	2864 <___vfprintf_internal_r+0x430>
    2858:	843ffc04 	addi	r16,r16,-16
    285c:	ad400204 	addi	r21,r21,8
    2860:	9c00130e 	bge	r19,r16,28b0 <___vfprintf_internal_r+0x47c>
    2864:	94800404 	addi	r18,r18,16
    2868:	8c400044 	addi	r17,r17,1
    286c:	af000015 	stw	fp,0(r21)
    2870:	acc00115 	stw	r19,4(r21)
    2874:	dc800e15 	stw	r18,56(sp)
    2878:	dc400d15 	stw	r17,52(sp)
    287c:	a47ff60e 	bge	r20,r17,2858 <___vfprintf_internal_r+0x424>
    2880:	d9014f17 	ldw	r4,1340(sp)
    2884:	b00b883a 	mov	r5,r22
    2888:	d9800c04 	addi	r6,sp,48
    288c:	d9c15115 	stw	r7,1348(sp)
    2890:	00023dc0 	call	23dc <__sprint_r>
    2894:	d9c15117 	ldw	r7,1348(sp)
    2898:	10009e1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    289c:	843ffc04 	addi	r16,r16,-16
    28a0:	dc800e17 	ldw	r18,56(sp)
    28a4:	dc400d17 	ldw	r17,52(sp)
    28a8:	dd401904 	addi	r21,sp,100
    28ac:	9c3fed16 	blt	r19,r16,2864 <___vfprintf_internal_r+0x430>
    28b0:	9425883a 	add	r18,r18,r16
    28b4:	8c400044 	addi	r17,r17,1
    28b8:	008001c4 	movi	r2,7
    28bc:	af000015 	stw	fp,0(r21)
    28c0:	ac000115 	stw	r16,4(r21)
    28c4:	dc800e15 	stw	r18,56(sp)
    28c8:	dc400d15 	stw	r17,52(sp)
    28cc:	1441f516 	blt	r2,r17,30a4 <___vfprintf_internal_r+0xc70>
    28d0:	ad400204 	addi	r21,r21,8
    28d4:	00000206 	br	28e0 <___vfprintf_internal_r+0x4ac>
    28d8:	dc800e17 	ldw	r18,56(sp)
    28dc:	dc400d17 	ldw	r17,52(sp)
    28e0:	d8800407 	ldb	r2,16(sp)
    28e4:	10000b26 	beq	r2,zero,2914 <___vfprintf_internal_r+0x4e0>
    28e8:	00800044 	movi	r2,1
    28ec:	94800044 	addi	r18,r18,1
    28f0:	8c400044 	addi	r17,r17,1
    28f4:	a8800115 	stw	r2,4(r21)
    28f8:	d8c00404 	addi	r3,sp,16
    28fc:	008001c4 	movi	r2,7
    2900:	a8c00015 	stw	r3,0(r21)
    2904:	dc800e15 	stw	r18,56(sp)
    2908:	dc400d15 	stw	r17,52(sp)
    290c:	1441da16 	blt	r2,r17,3078 <___vfprintf_internal_r+0xc44>
    2910:	ad400204 	addi	r21,r21,8
    2914:	d9015017 	ldw	r4,1344(sp)
    2918:	20000b1e 	bne	r4,zero,2948 <___vfprintf_internal_r+0x514>
    291c:	d8800444 	addi	r2,sp,17
    2920:	94800084 	addi	r18,r18,2
    2924:	8c400044 	addi	r17,r17,1
    2928:	a8800015 	stw	r2,0(r21)
    292c:	00c00084 	movi	r3,2
    2930:	008001c4 	movi	r2,7
    2934:	a8c00115 	stw	r3,4(r21)
    2938:	dc800e15 	stw	r18,56(sp)
    293c:	dc400d15 	stw	r17,52(sp)
    2940:	1441c216 	blt	r2,r17,304c <___vfprintf_internal_r+0xc18>
    2944:	ad400204 	addi	r21,r21,8
    2948:	d9414e17 	ldw	r5,1336(sp)
    294c:	00802004 	movi	r2,128
    2950:	2880b126 	beq	r5,r2,2c18 <___vfprintf_internal_r+0x7e4>
    2954:	d8c14617 	ldw	r3,1304(sp)
    2958:	19e1c83a 	sub	r16,r3,r7
    295c:	0400260e 	bge	zero,r16,29f8 <___vfprintf_internal_r+0x5c4>
    2960:	00800404 	movi	r2,16
    2964:	1403c90e 	bge	r2,r16,388c <___vfprintf_internal_r+0x1458>
    2968:	1027883a 	mov	r19,r2
    296c:	07000074 	movhi	fp,1
    2970:	e73aad84 	addi	fp,fp,-5450
    2974:	050001c4 	movi	r20,7
    2978:	00000306 	br	2988 <___vfprintf_internal_r+0x554>
    297c:	843ffc04 	addi	r16,r16,-16
    2980:	ad400204 	addi	r21,r21,8
    2984:	9c00130e 	bge	r19,r16,29d4 <___vfprintf_internal_r+0x5a0>
    2988:	94800404 	addi	r18,r18,16
    298c:	8c400044 	addi	r17,r17,1
    2990:	af000015 	stw	fp,0(r21)
    2994:	acc00115 	stw	r19,4(r21)
    2998:	dc800e15 	stw	r18,56(sp)
    299c:	dc400d15 	stw	r17,52(sp)
    29a0:	a47ff60e 	bge	r20,r17,297c <___vfprintf_internal_r+0x548>
    29a4:	d9014f17 	ldw	r4,1340(sp)
    29a8:	b00b883a 	mov	r5,r22
    29ac:	d9800c04 	addi	r6,sp,48
    29b0:	d9c15115 	stw	r7,1348(sp)
    29b4:	00023dc0 	call	23dc <__sprint_r>
    29b8:	d9c15117 	ldw	r7,1348(sp)
    29bc:	1000551e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    29c0:	843ffc04 	addi	r16,r16,-16
    29c4:	dc800e17 	ldw	r18,56(sp)
    29c8:	dc400d17 	ldw	r17,52(sp)
    29cc:	dd401904 	addi	r21,sp,100
    29d0:	9c3fed16 	blt	r19,r16,2988 <___vfprintf_internal_r+0x554>
    29d4:	9425883a 	add	r18,r18,r16
    29d8:	8c400044 	addi	r17,r17,1
    29dc:	008001c4 	movi	r2,7
    29e0:	af000015 	stw	fp,0(r21)
    29e4:	ac000115 	stw	r16,4(r21)
    29e8:	dc800e15 	stw	r18,56(sp)
    29ec:	dc400d15 	stw	r17,52(sp)
    29f0:	14418216 	blt	r2,r17,2ffc <___vfprintf_internal_r+0xbc8>
    29f4:	ad400204 	addi	r21,r21,8
    29f8:	d9014c17 	ldw	r4,1328(sp)
    29fc:	2080400c 	andi	r2,r4,256
    2a00:	10004a1e 	bne	r2,zero,2b2c <___vfprintf_internal_r+0x6f8>
    2a04:	d9414117 	ldw	r5,1284(sp)
    2a08:	91e5883a 	add	r18,r18,r7
    2a0c:	8c400044 	addi	r17,r17,1
    2a10:	008001c4 	movi	r2,7
    2a14:	a9400015 	stw	r5,0(r21)
    2a18:	a9c00115 	stw	r7,4(r21)
    2a1c:	dc800e15 	stw	r18,56(sp)
    2a20:	dc400d15 	stw	r17,52(sp)
    2a24:	14416716 	blt	r2,r17,2fc4 <___vfprintf_internal_r+0xb90>
    2a28:	a8c00204 	addi	r3,r21,8
    2a2c:	d9814c17 	ldw	r6,1328(sp)
    2a30:	3080010c 	andi	r2,r6,4
    2a34:	10002826 	beq	r2,zero,2ad8 <___vfprintf_internal_r+0x6a4>
    2a38:	d8814a17 	ldw	r2,1320(sp)
    2a3c:	d9014517 	ldw	r4,1300(sp)
    2a40:	1121c83a 	sub	r16,r2,r4
    2a44:	0400240e 	bge	zero,r16,2ad8 <___vfprintf_internal_r+0x6a4>
    2a48:	00800404 	movi	r2,16
    2a4c:	14044f0e 	bge	r2,r16,3b8c <___vfprintf_internal_r+0x1758>
    2a50:	dc400d17 	ldw	r17,52(sp)
    2a54:	1027883a 	mov	r19,r2
    2a58:	07000074 	movhi	fp,1
    2a5c:	e73ab184 	addi	fp,fp,-5434
    2a60:	050001c4 	movi	r20,7
    2a64:	00000306 	br	2a74 <___vfprintf_internal_r+0x640>
    2a68:	843ffc04 	addi	r16,r16,-16
    2a6c:	18c00204 	addi	r3,r3,8
    2a70:	9c00110e 	bge	r19,r16,2ab8 <___vfprintf_internal_r+0x684>
    2a74:	94800404 	addi	r18,r18,16
    2a78:	8c400044 	addi	r17,r17,1
    2a7c:	1f000015 	stw	fp,0(r3)
    2a80:	1cc00115 	stw	r19,4(r3)
    2a84:	dc800e15 	stw	r18,56(sp)
    2a88:	dc400d15 	stw	r17,52(sp)
    2a8c:	a47ff60e 	bge	r20,r17,2a68 <___vfprintf_internal_r+0x634>
    2a90:	d9014f17 	ldw	r4,1340(sp)
    2a94:	b00b883a 	mov	r5,r22
    2a98:	d9800c04 	addi	r6,sp,48
    2a9c:	00023dc0 	call	23dc <__sprint_r>
    2aa0:	10001c1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    2aa4:	843ffc04 	addi	r16,r16,-16
    2aa8:	dc800e17 	ldw	r18,56(sp)
    2aac:	dc400d17 	ldw	r17,52(sp)
    2ab0:	d8c01904 	addi	r3,sp,100
    2ab4:	9c3fef16 	blt	r19,r16,2a74 <___vfprintf_internal_r+0x640>
    2ab8:	9425883a 	add	r18,r18,r16
    2abc:	8c400044 	addi	r17,r17,1
    2ac0:	008001c4 	movi	r2,7
    2ac4:	1f000015 	stw	fp,0(r3)
    2ac8:	1c000115 	stw	r16,4(r3)
    2acc:	dc800e15 	stw	r18,56(sp)
    2ad0:	dc400d15 	stw	r17,52(sp)
    2ad4:	1440cb16 	blt	r2,r17,2e04 <___vfprintf_internal_r+0x9d0>
    2ad8:	d8814a17 	ldw	r2,1320(sp)
    2adc:	d9414517 	ldw	r5,1300(sp)
    2ae0:	1140010e 	bge	r2,r5,2ae8 <___vfprintf_internal_r+0x6b4>
    2ae4:	2805883a 	mov	r2,r5
    2ae8:	d9814b17 	ldw	r6,1324(sp)
    2aec:	308d883a 	add	r6,r6,r2
    2af0:	d9814b15 	stw	r6,1324(sp)
    2af4:	90013b1e 	bne	r18,zero,2fe4 <___vfprintf_internal_r+0xbb0>
    2af8:	d9c14017 	ldw	r7,1280(sp)
    2afc:	dd401904 	addi	r21,sp,100
    2b00:	d8000d15 	stw	zero,52(sp)
    2b04:	003ea706 	br	25a4 <___vfprintf_internal_r+0x170>
    2b08:	d8800e17 	ldw	r2,56(sp)
    2b0c:	10053f1e 	bne	r2,zero,400c <___vfprintf_internal_r+0x1bd8>
    2b10:	d8000d15 	stw	zero,52(sp)
    2b14:	b080030b 	ldhu	r2,12(r22)
    2b18:	1080100c 	andi	r2,r2,64
    2b1c:	103e8726 	beq	r2,zero,253c <___vfprintf_internal_r+0x108>
    2b20:	00bfffc4 	movi	r2,-1
    2b24:	d8814b15 	stw	r2,1324(sp)
    2b28:	003e8406 	br	253c <___vfprintf_internal_r+0x108>
    2b2c:	d9814d17 	ldw	r6,1332(sp)
    2b30:	00801944 	movi	r2,101
    2b34:	11806e16 	blt	r2,r6,2cf0 <___vfprintf_internal_r+0x8bc>
    2b38:	d9414717 	ldw	r5,1308(sp)
    2b3c:	00c00044 	movi	r3,1
    2b40:	1943430e 	bge	r3,r5,3850 <___vfprintf_internal_r+0x141c>
    2b44:	d8814117 	ldw	r2,1284(sp)
    2b48:	94800044 	addi	r18,r18,1
    2b4c:	8c400044 	addi	r17,r17,1
    2b50:	a8800015 	stw	r2,0(r21)
    2b54:	008001c4 	movi	r2,7
    2b58:	a8c00115 	stw	r3,4(r21)
    2b5c:	dc800e15 	stw	r18,56(sp)
    2b60:	dc400d15 	stw	r17,52(sp)
    2b64:	1441ca16 	blt	r2,r17,3290 <___vfprintf_internal_r+0xe5c>
    2b68:	a8c00204 	addi	r3,r21,8
    2b6c:	d9014917 	ldw	r4,1316(sp)
    2b70:	00800044 	movi	r2,1
    2b74:	94800044 	addi	r18,r18,1
    2b78:	8c400044 	addi	r17,r17,1
    2b7c:	18800115 	stw	r2,4(r3)
    2b80:	008001c4 	movi	r2,7
    2b84:	19000015 	stw	r4,0(r3)
    2b88:	dc800e15 	stw	r18,56(sp)
    2b8c:	dc400d15 	stw	r17,52(sp)
    2b90:	1441b616 	blt	r2,r17,326c <___vfprintf_internal_r+0xe38>
    2b94:	1cc00204 	addi	r19,r3,8
    2b98:	d9014217 	ldw	r4,1288(sp)
    2b9c:	d9414317 	ldw	r5,1292(sp)
    2ba0:	000d883a 	mov	r6,zero
    2ba4:	000f883a 	mov	r7,zero
    2ba8:	000ab4c0 	call	ab4c <__nedf2>
    2bac:	10017426 	beq	r2,zero,3180 <___vfprintf_internal_r+0xd4c>
    2bb0:	d9414717 	ldw	r5,1308(sp)
    2bb4:	d9814117 	ldw	r6,1284(sp)
    2bb8:	8c400044 	addi	r17,r17,1
    2bbc:	2c85883a 	add	r2,r5,r18
    2bc0:	14bfffc4 	addi	r18,r2,-1
    2bc4:	28bfffc4 	addi	r2,r5,-1
    2bc8:	30c00044 	addi	r3,r6,1
    2bcc:	98800115 	stw	r2,4(r19)
    2bd0:	008001c4 	movi	r2,7
    2bd4:	98c00015 	stw	r3,0(r19)
    2bd8:	dc800e15 	stw	r18,56(sp)
    2bdc:	dc400d15 	stw	r17,52(sp)
    2be0:	14418e16 	blt	r2,r17,321c <___vfprintf_internal_r+0xde8>
    2be4:	9cc00204 	addi	r19,r19,8
    2be8:	d9414817 	ldw	r5,1312(sp)
    2bec:	d8800804 	addi	r2,sp,32
    2bf0:	8c400044 	addi	r17,r17,1
    2bf4:	9165883a 	add	r18,r18,r5
    2bf8:	98800015 	stw	r2,0(r19)
    2bfc:	008001c4 	movi	r2,7
    2c00:	99400115 	stw	r5,4(r19)
    2c04:	dc800e15 	stw	r18,56(sp)
    2c08:	dc400d15 	stw	r17,52(sp)
    2c0c:	1440ed16 	blt	r2,r17,2fc4 <___vfprintf_internal_r+0xb90>
    2c10:	98c00204 	addi	r3,r19,8
    2c14:	003f8506 	br	2a2c <___vfprintf_internal_r+0x5f8>
    2c18:	d9814a17 	ldw	r6,1320(sp)
    2c1c:	d8814517 	ldw	r2,1300(sp)
    2c20:	30a1c83a 	sub	r16,r6,r2
    2c24:	043f4b0e 	bge	zero,r16,2954 <___vfprintf_internal_r+0x520>
    2c28:	00800404 	movi	r2,16
    2c2c:	1404340e 	bge	r2,r16,3d00 <___vfprintf_internal_r+0x18cc>
    2c30:	1027883a 	mov	r19,r2
    2c34:	07000074 	movhi	fp,1
    2c38:	e73aad84 	addi	fp,fp,-5450
    2c3c:	050001c4 	movi	r20,7
    2c40:	00000306 	br	2c50 <___vfprintf_internal_r+0x81c>
    2c44:	843ffc04 	addi	r16,r16,-16
    2c48:	ad400204 	addi	r21,r21,8
    2c4c:	9c00130e 	bge	r19,r16,2c9c <___vfprintf_internal_r+0x868>
    2c50:	94800404 	addi	r18,r18,16
    2c54:	8c400044 	addi	r17,r17,1
    2c58:	af000015 	stw	fp,0(r21)
    2c5c:	acc00115 	stw	r19,4(r21)
    2c60:	dc800e15 	stw	r18,56(sp)
    2c64:	dc400d15 	stw	r17,52(sp)
    2c68:	a47ff60e 	bge	r20,r17,2c44 <___vfprintf_internal_r+0x810>
    2c6c:	d9014f17 	ldw	r4,1340(sp)
    2c70:	b00b883a 	mov	r5,r22
    2c74:	d9800c04 	addi	r6,sp,48
    2c78:	d9c15115 	stw	r7,1348(sp)
    2c7c:	00023dc0 	call	23dc <__sprint_r>
    2c80:	d9c15117 	ldw	r7,1348(sp)
    2c84:	103fa31e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    2c88:	843ffc04 	addi	r16,r16,-16
    2c8c:	dc800e17 	ldw	r18,56(sp)
    2c90:	dc400d17 	ldw	r17,52(sp)
    2c94:	dd401904 	addi	r21,sp,100
    2c98:	9c3fed16 	blt	r19,r16,2c50 <___vfprintf_internal_r+0x81c>
    2c9c:	9425883a 	add	r18,r18,r16
    2ca0:	8c400044 	addi	r17,r17,1
    2ca4:	008001c4 	movi	r2,7
    2ca8:	af000015 	stw	fp,0(r21)
    2cac:	ac000115 	stw	r16,4(r21)
    2cb0:	dc800e15 	stw	r18,56(sp)
    2cb4:	dc400d15 	stw	r17,52(sp)
    2cb8:	14416116 	blt	r2,r17,3240 <___vfprintf_internal_r+0xe0c>
    2cbc:	ad400204 	addi	r21,r21,8
    2cc0:	003f2406 	br	2954 <___vfprintf_internal_r+0x520>
    2cc4:	d9014f17 	ldw	r4,1340(sp)
    2cc8:	0005ea40 	call	5ea4 <__sinit>
    2ccc:	d9c15117 	ldw	r7,1348(sp)
    2cd0:	003def06 	br	2490 <___vfprintf_internal_r+0x5c>
    2cd4:	d9014f17 	ldw	r4,1340(sp)
    2cd8:	b00b883a 	mov	r5,r22
    2cdc:	d9c15115 	stw	r7,1348(sp)
    2ce0:	00043040 	call	4304 <__swsetup_r>
    2ce4:	d9c15117 	ldw	r7,1348(sp)
    2ce8:	103dee26 	beq	r2,zero,24a4 <___vfprintf_internal_r+0x70>
    2cec:	003f8c06 	br	2b20 <___vfprintf_internal_r+0x6ec>
    2cf0:	d9014217 	ldw	r4,1288(sp)
    2cf4:	d9414317 	ldw	r5,1292(sp)
    2cf8:	000d883a 	mov	r6,zero
    2cfc:	000f883a 	mov	r7,zero
    2d00:	000aac40 	call	aac4 <__eqdf2>
    2d04:	1000f21e 	bne	r2,zero,30d0 <___vfprintf_internal_r+0xc9c>
    2d08:	00800074 	movhi	r2,1
    2d0c:	10baad04 	addi	r2,r2,-5452
    2d10:	94800044 	addi	r18,r18,1
    2d14:	8c400044 	addi	r17,r17,1
    2d18:	a8800015 	stw	r2,0(r21)
    2d1c:	00c00044 	movi	r3,1
    2d20:	008001c4 	movi	r2,7
    2d24:	a8c00115 	stw	r3,4(r21)
    2d28:	dc800e15 	stw	r18,56(sp)
    2d2c:	dc400d15 	stw	r17,52(sp)
    2d30:	1442fa16 	blt	r2,r17,391c <___vfprintf_internal_r+0x14e8>
    2d34:	a8c00204 	addi	r3,r21,8
    2d38:	d8800517 	ldw	r2,20(sp)
    2d3c:	d9014717 	ldw	r4,1308(sp)
    2d40:	11015c0e 	bge	r2,r4,32b4 <___vfprintf_internal_r+0xe80>
    2d44:	dc400d17 	ldw	r17,52(sp)
    2d48:	d9814917 	ldw	r6,1316(sp)
    2d4c:	00800044 	movi	r2,1
    2d50:	94800044 	addi	r18,r18,1
    2d54:	8c400044 	addi	r17,r17,1
    2d58:	18800115 	stw	r2,4(r3)
    2d5c:	008001c4 	movi	r2,7
    2d60:	19800015 	stw	r6,0(r3)
    2d64:	dc800e15 	stw	r18,56(sp)
    2d68:	dc400d15 	stw	r17,52(sp)
    2d6c:	14431016 	blt	r2,r17,39b0 <___vfprintf_internal_r+0x157c>
    2d70:	18c00204 	addi	r3,r3,8
    2d74:	d8814717 	ldw	r2,1308(sp)
    2d78:	143fffc4 	addi	r16,r2,-1
    2d7c:	043f2b0e 	bge	zero,r16,2a2c <___vfprintf_internal_r+0x5f8>
    2d80:	00800404 	movi	r2,16
    2d84:	1402a20e 	bge	r2,r16,3810 <___vfprintf_internal_r+0x13dc>
    2d88:	dc400d17 	ldw	r17,52(sp)
    2d8c:	1027883a 	mov	r19,r2
    2d90:	07000074 	movhi	fp,1
    2d94:	e73aad84 	addi	fp,fp,-5450
    2d98:	050001c4 	movi	r20,7
    2d9c:	00000306 	br	2dac <___vfprintf_internal_r+0x978>
    2da0:	18c00204 	addi	r3,r3,8
    2da4:	843ffc04 	addi	r16,r16,-16
    2da8:	9c029c0e 	bge	r19,r16,381c <___vfprintf_internal_r+0x13e8>
    2dac:	94800404 	addi	r18,r18,16
    2db0:	8c400044 	addi	r17,r17,1
    2db4:	1f000015 	stw	fp,0(r3)
    2db8:	1cc00115 	stw	r19,4(r3)
    2dbc:	dc800e15 	stw	r18,56(sp)
    2dc0:	dc400d15 	stw	r17,52(sp)
    2dc4:	a47ff60e 	bge	r20,r17,2da0 <___vfprintf_internal_r+0x96c>
    2dc8:	d9014f17 	ldw	r4,1340(sp)
    2dcc:	b00b883a 	mov	r5,r22
    2dd0:	d9800c04 	addi	r6,sp,48
    2dd4:	00023dc0 	call	23dc <__sprint_r>
    2dd8:	103f4e1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    2ddc:	dc800e17 	ldw	r18,56(sp)
    2de0:	dc400d17 	ldw	r17,52(sp)
    2de4:	d8c01904 	addi	r3,sp,100
    2de8:	003fee06 	br	2da4 <___vfprintf_internal_r+0x970>
    2dec:	d8802c0b 	ldhu	r2,176(sp)
    2df0:	00ffffc4 	movi	r3,-1
    2df4:	d8c14b15 	stw	r3,1324(sp)
    2df8:	1080100c 	andi	r2,r2,64
    2dfc:	103dcc1e 	bne	r2,zero,2530 <___vfprintf_internal_r+0xfc>
    2e00:	003dce06 	br	253c <___vfprintf_internal_r+0x108>
    2e04:	d9014f17 	ldw	r4,1340(sp)
    2e08:	b00b883a 	mov	r5,r22
    2e0c:	d9800c04 	addi	r6,sp,48
    2e10:	00023dc0 	call	23dc <__sprint_r>
    2e14:	103f3f1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    2e18:	dc800e17 	ldw	r18,56(sp)
    2e1c:	003f2e06 	br	2ad8 <___vfprintf_internal_r+0x6a4>
    2e20:	d9414c17 	ldw	r5,1328(sp)
    2e24:	29400414 	ori	r5,r5,16
    2e28:	d9414c15 	stw	r5,1328(sp)
    2e2c:	d9814c17 	ldw	r6,1328(sp)
    2e30:	3080080c 	andi	r2,r6,32
    2e34:	10014f1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0xf40>
    2e38:	d8c14c17 	ldw	r3,1328(sp)
    2e3c:	1880040c 	andi	r2,r3,16
    2e40:	1002ea1e 	bne	r2,zero,39ec <___vfprintf_internal_r+0x15b8>
    2e44:	d9014c17 	ldw	r4,1328(sp)
    2e48:	2080100c 	andi	r2,r4,64
    2e4c:	1002e726 	beq	r2,zero,39ec <___vfprintf_internal_r+0x15b8>
    2e50:	3880000f 	ldh	r2,0(r7)
    2e54:	39c00104 	addi	r7,r7,4
    2e58:	d9c14015 	stw	r7,1280(sp)
    2e5c:	1023d7fa 	srai	r17,r2,31
    2e60:	1021883a 	mov	r16,r2
    2e64:	88037216 	blt	r17,zero,3c30 <___vfprintf_internal_r+0x17fc>
    2e68:	01000044 	movi	r4,1
    2e6c:	98000416 	blt	r19,zero,2e80 <___vfprintf_internal_r+0xa4c>
    2e70:	d8c14c17 	ldw	r3,1328(sp)
    2e74:	00bfdfc4 	movi	r2,-129
    2e78:	1886703a 	and	r3,r3,r2
    2e7c:	d8c14c15 	stw	r3,1328(sp)
    2e80:	8444b03a 	or	r2,r16,r17
    2e84:	1002261e 	bne	r2,zero,3720 <___vfprintf_internal_r+0x12ec>
    2e88:	9802251e 	bne	r19,zero,3720 <___vfprintf_internal_r+0x12ec>
    2e8c:	20803fcc 	andi	r2,r4,255
    2e90:	10029b26 	beq	r2,zero,3900 <___vfprintf_internal_r+0x14cc>
    2e94:	d8c01904 	addi	r3,sp,100
    2e98:	dd000f04 	addi	r20,sp,60
    2e9c:	d8c14115 	stw	r3,1284(sp)
    2ea0:	d8c14117 	ldw	r3,1284(sp)
    2ea4:	dcc14515 	stw	r19,1300(sp)
    2ea8:	a0c5c83a 	sub	r2,r20,r3
    2eac:	11c00a04 	addi	r7,r2,40
    2eb0:	99c0010e 	bge	r19,r7,2eb8 <___vfprintf_internal_r+0xa84>
    2eb4:	d9c14515 	stw	r7,1300(sp)
    2eb8:	dcc14615 	stw	r19,1304(sp)
    2ebc:	d8800407 	ldb	r2,16(sp)
    2ec0:	103e4c26 	beq	r2,zero,27f4 <___vfprintf_internal_r+0x3c0>
    2ec4:	d8814517 	ldw	r2,1300(sp)
    2ec8:	10800044 	addi	r2,r2,1
    2ecc:	d8814515 	stw	r2,1300(sp)
    2ed0:	003e4806 	br	27f4 <___vfprintf_internal_r+0x3c0>
    2ed4:	d9814c17 	ldw	r6,1328(sp)
    2ed8:	31800414 	ori	r6,r6,16
    2edc:	d9814c15 	stw	r6,1328(sp)
    2ee0:	d8c14c17 	ldw	r3,1328(sp)
    2ee4:	1880080c 	andi	r2,r3,32
    2ee8:	1001271e 	bne	r2,zero,3388 <___vfprintf_internal_r+0xf54>
    2eec:	d9414c17 	ldw	r5,1328(sp)
    2ef0:	2880040c 	andi	r2,r5,16
    2ef4:	1002b61e 	bne	r2,zero,39d0 <___vfprintf_internal_r+0x159c>
    2ef8:	d9814c17 	ldw	r6,1328(sp)
    2efc:	3080100c 	andi	r2,r6,64
    2f00:	1002b326 	beq	r2,zero,39d0 <___vfprintf_internal_r+0x159c>
    2f04:	3c00000b 	ldhu	r16,0(r7)
    2f08:	0009883a 	mov	r4,zero
    2f0c:	39c00104 	addi	r7,r7,4
    2f10:	0023883a 	mov	r17,zero
    2f14:	d9c14015 	stw	r7,1280(sp)
    2f18:	d8000405 	stb	zero,16(sp)
    2f1c:	003fd306 	br	2e6c <___vfprintf_internal_r+0xa38>
    2f20:	d9014c17 	ldw	r4,1328(sp)
    2f24:	21000414 	ori	r4,r4,16
    2f28:	d9014c15 	stw	r4,1328(sp)
    2f2c:	d9414c17 	ldw	r5,1328(sp)
    2f30:	2880080c 	andi	r2,r5,32
    2f34:	1001081e 	bne	r2,zero,3358 <___vfprintf_internal_r+0xf24>
    2f38:	d8c14c17 	ldw	r3,1328(sp)
    2f3c:	1880040c 	andi	r2,r3,16
    2f40:	1002b01e 	bne	r2,zero,3a04 <___vfprintf_internal_r+0x15d0>
    2f44:	d9014c17 	ldw	r4,1328(sp)
    2f48:	2080100c 	andi	r2,r4,64
    2f4c:	1002ad26 	beq	r2,zero,3a04 <___vfprintf_internal_r+0x15d0>
    2f50:	3c00000b 	ldhu	r16,0(r7)
    2f54:	01000044 	movi	r4,1
    2f58:	39c00104 	addi	r7,r7,4
    2f5c:	0023883a 	mov	r17,zero
    2f60:	d9c14015 	stw	r7,1280(sp)
    2f64:	d8000405 	stb	zero,16(sp)
    2f68:	003fc006 	br	2e6c <___vfprintf_internal_r+0xa38>
    2f6c:	d9014f17 	ldw	r4,1340(sp)
    2f70:	b00b883a 	mov	r5,r22
    2f74:	d9800c04 	addi	r6,sp,48
    2f78:	00023dc0 	call	23dc <__sprint_r>
    2f7c:	103ee51e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    2f80:	dc800e17 	ldw	r18,56(sp)
    2f84:	d8c01904 	addi	r3,sp,100
    2f88:	d9814c17 	ldw	r6,1328(sp)
    2f8c:	3080004c 	andi	r2,r6,1
    2f90:	1005003a 	cmpeq	r2,r2,zero
    2f94:	103ea51e 	bne	r2,zero,2a2c <___vfprintf_internal_r+0x5f8>
    2f98:	00800044 	movi	r2,1
    2f9c:	dc400d17 	ldw	r17,52(sp)
    2fa0:	18800115 	stw	r2,4(r3)
    2fa4:	d8814917 	ldw	r2,1316(sp)
    2fa8:	94800044 	addi	r18,r18,1
    2fac:	8c400044 	addi	r17,r17,1
    2fb0:	18800015 	stw	r2,0(r3)
    2fb4:	008001c4 	movi	r2,7
    2fb8:	dc800e15 	stw	r18,56(sp)
    2fbc:	dc400d15 	stw	r17,52(sp)
    2fc0:	14421e0e 	bge	r2,r17,383c <___vfprintf_internal_r+0x1408>
    2fc4:	d9014f17 	ldw	r4,1340(sp)
    2fc8:	b00b883a 	mov	r5,r22
    2fcc:	d9800c04 	addi	r6,sp,48
    2fd0:	00023dc0 	call	23dc <__sprint_r>
    2fd4:	103ecf1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    2fd8:	dc800e17 	ldw	r18,56(sp)
    2fdc:	d8c01904 	addi	r3,sp,100
    2fe0:	003e9206 	br	2a2c <___vfprintf_internal_r+0x5f8>
    2fe4:	d9014f17 	ldw	r4,1340(sp)
    2fe8:	b00b883a 	mov	r5,r22
    2fec:	d9800c04 	addi	r6,sp,48
    2ff0:	00023dc0 	call	23dc <__sprint_r>
    2ff4:	103ec026 	beq	r2,zero,2af8 <___vfprintf_internal_r+0x6c4>
    2ff8:	003ec606 	br	2b14 <___vfprintf_internal_r+0x6e0>
    2ffc:	d9014f17 	ldw	r4,1340(sp)
    3000:	b00b883a 	mov	r5,r22
    3004:	d9800c04 	addi	r6,sp,48
    3008:	d9c15115 	stw	r7,1348(sp)
    300c:	00023dc0 	call	23dc <__sprint_r>
    3010:	d9c15117 	ldw	r7,1348(sp)
    3014:	103ebf1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3018:	dc800e17 	ldw	r18,56(sp)
    301c:	dc400d17 	ldw	r17,52(sp)
    3020:	dd401904 	addi	r21,sp,100
    3024:	003e7406 	br	29f8 <___vfprintf_internal_r+0x5c4>
    3028:	d9014f17 	ldw	r4,1340(sp)
    302c:	b00b883a 	mov	r5,r22
    3030:	d9800c04 	addi	r6,sp,48
    3034:	d9c15115 	stw	r7,1348(sp)
    3038:	00023dc0 	call	23dc <__sprint_r>
    303c:	d9c15117 	ldw	r7,1348(sp)
    3040:	103eb41e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3044:	dd401904 	addi	r21,sp,100
    3048:	003d6d06 	br	2600 <___vfprintf_internal_r+0x1cc>
    304c:	d9014f17 	ldw	r4,1340(sp)
    3050:	b00b883a 	mov	r5,r22
    3054:	d9800c04 	addi	r6,sp,48
    3058:	d9c15115 	stw	r7,1348(sp)
    305c:	00023dc0 	call	23dc <__sprint_r>
    3060:	d9c15117 	ldw	r7,1348(sp)
    3064:	103eab1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3068:	dc800e17 	ldw	r18,56(sp)
    306c:	dc400d17 	ldw	r17,52(sp)
    3070:	dd401904 	addi	r21,sp,100
    3074:	003e3406 	br	2948 <___vfprintf_internal_r+0x514>
    3078:	d9014f17 	ldw	r4,1340(sp)
    307c:	b00b883a 	mov	r5,r22
    3080:	d9800c04 	addi	r6,sp,48
    3084:	d9c15115 	stw	r7,1348(sp)
    3088:	00023dc0 	call	23dc <__sprint_r>
    308c:	d9c15117 	ldw	r7,1348(sp)
    3090:	103ea01e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3094:	dc800e17 	ldw	r18,56(sp)
    3098:	dc400d17 	ldw	r17,52(sp)
    309c:	dd401904 	addi	r21,sp,100
    30a0:	003e1c06 	br	2914 <___vfprintf_internal_r+0x4e0>
    30a4:	d9014f17 	ldw	r4,1340(sp)
    30a8:	b00b883a 	mov	r5,r22
    30ac:	d9800c04 	addi	r6,sp,48
    30b0:	d9c15115 	stw	r7,1348(sp)
    30b4:	00023dc0 	call	23dc <__sprint_r>
    30b8:	d9c15117 	ldw	r7,1348(sp)
    30bc:	103e951e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    30c0:	dc800e17 	ldw	r18,56(sp)
    30c4:	dc400d17 	ldw	r17,52(sp)
    30c8:	dd401904 	addi	r21,sp,100
    30cc:	003e0406 	br	28e0 <___vfprintf_internal_r+0x4ac>
    30d0:	d9000517 	ldw	r4,20(sp)
    30d4:	0102520e 	bge	zero,r4,3a20 <___vfprintf_internal_r+0x15ec>
    30d8:	d9814717 	ldw	r6,1308(sp)
    30dc:	21807a16 	blt	r4,r6,32c8 <___vfprintf_internal_r+0xe94>
    30e0:	d8814117 	ldw	r2,1284(sp)
    30e4:	91a5883a 	add	r18,r18,r6
    30e8:	8c400044 	addi	r17,r17,1
    30ec:	a8800015 	stw	r2,0(r21)
    30f0:	008001c4 	movi	r2,7
    30f4:	a9800115 	stw	r6,4(r21)
    30f8:	dc800e15 	stw	r18,56(sp)
    30fc:	dc400d15 	stw	r17,52(sp)
    3100:	1442f616 	blt	r2,r17,3cdc <___vfprintf_internal_r+0x18a8>
    3104:	a8c00204 	addi	r3,r21,8
    3108:	d9414717 	ldw	r5,1308(sp)
    310c:	2161c83a 	sub	r16,r4,r5
    3110:	043f9d0e 	bge	zero,r16,2f88 <___vfprintf_internal_r+0xb54>
    3114:	00800404 	movi	r2,16
    3118:	1402130e 	bge	r2,r16,3968 <___vfprintf_internal_r+0x1534>
    311c:	dc400d17 	ldw	r17,52(sp)
    3120:	1027883a 	mov	r19,r2
    3124:	07000074 	movhi	fp,1
    3128:	e73aad84 	addi	fp,fp,-5450
    312c:	050001c4 	movi	r20,7
    3130:	00000306 	br	3140 <___vfprintf_internal_r+0xd0c>
    3134:	18c00204 	addi	r3,r3,8
    3138:	843ffc04 	addi	r16,r16,-16
    313c:	9c020d0e 	bge	r19,r16,3974 <___vfprintf_internal_r+0x1540>
    3140:	94800404 	addi	r18,r18,16
    3144:	8c400044 	addi	r17,r17,1
    3148:	1f000015 	stw	fp,0(r3)
    314c:	1cc00115 	stw	r19,4(r3)
    3150:	dc800e15 	stw	r18,56(sp)
    3154:	dc400d15 	stw	r17,52(sp)
    3158:	a47ff60e 	bge	r20,r17,3134 <___vfprintf_internal_r+0xd00>
    315c:	d9014f17 	ldw	r4,1340(sp)
    3160:	b00b883a 	mov	r5,r22
    3164:	d9800c04 	addi	r6,sp,48
    3168:	00023dc0 	call	23dc <__sprint_r>
    316c:	103e691e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3170:	dc800e17 	ldw	r18,56(sp)
    3174:	dc400d17 	ldw	r17,52(sp)
    3178:	d8c01904 	addi	r3,sp,100
    317c:	003fee06 	br	3138 <___vfprintf_internal_r+0xd04>
    3180:	d8814717 	ldw	r2,1308(sp)
    3184:	143fffc4 	addi	r16,r2,-1
    3188:	043e970e 	bge	zero,r16,2be8 <___vfprintf_internal_r+0x7b4>
    318c:	00800404 	movi	r2,16
    3190:	1400180e 	bge	r2,r16,31f4 <___vfprintf_internal_r+0xdc0>
    3194:	1029883a 	mov	r20,r2
    3198:	07000074 	movhi	fp,1
    319c:	e73aad84 	addi	fp,fp,-5450
    31a0:	054001c4 	movi	r21,7
    31a4:	00000306 	br	31b4 <___vfprintf_internal_r+0xd80>
    31a8:	9cc00204 	addi	r19,r19,8
    31ac:	843ffc04 	addi	r16,r16,-16
    31b0:	a400120e 	bge	r20,r16,31fc <___vfprintf_internal_r+0xdc8>
    31b4:	94800404 	addi	r18,r18,16
    31b8:	8c400044 	addi	r17,r17,1
    31bc:	9f000015 	stw	fp,0(r19)
    31c0:	9d000115 	stw	r20,4(r19)
    31c4:	dc800e15 	stw	r18,56(sp)
    31c8:	dc400d15 	stw	r17,52(sp)
    31cc:	ac7ff60e 	bge	r21,r17,31a8 <___vfprintf_internal_r+0xd74>
    31d0:	d9014f17 	ldw	r4,1340(sp)
    31d4:	b00b883a 	mov	r5,r22
    31d8:	d9800c04 	addi	r6,sp,48
    31dc:	00023dc0 	call	23dc <__sprint_r>
    31e0:	103e4c1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    31e4:	dc800e17 	ldw	r18,56(sp)
    31e8:	dc400d17 	ldw	r17,52(sp)
    31ec:	dcc01904 	addi	r19,sp,100
    31f0:	003fee06 	br	31ac <___vfprintf_internal_r+0xd78>
    31f4:	07000074 	movhi	fp,1
    31f8:	e73aad84 	addi	fp,fp,-5450
    31fc:	9425883a 	add	r18,r18,r16
    3200:	8c400044 	addi	r17,r17,1
    3204:	008001c4 	movi	r2,7
    3208:	9f000015 	stw	fp,0(r19)
    320c:	9c000115 	stw	r16,4(r19)
    3210:	dc800e15 	stw	r18,56(sp)
    3214:	dc400d15 	stw	r17,52(sp)
    3218:	147e720e 	bge	r2,r17,2be4 <___vfprintf_internal_r+0x7b0>
    321c:	d9014f17 	ldw	r4,1340(sp)
    3220:	b00b883a 	mov	r5,r22
    3224:	d9800c04 	addi	r6,sp,48
    3228:	00023dc0 	call	23dc <__sprint_r>
    322c:	103e391e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3230:	dc800e17 	ldw	r18,56(sp)
    3234:	dc400d17 	ldw	r17,52(sp)
    3238:	dcc01904 	addi	r19,sp,100
    323c:	003e6a06 	br	2be8 <___vfprintf_internal_r+0x7b4>
    3240:	d9014f17 	ldw	r4,1340(sp)
    3244:	b00b883a 	mov	r5,r22
    3248:	d9800c04 	addi	r6,sp,48
    324c:	d9c15115 	stw	r7,1348(sp)
    3250:	00023dc0 	call	23dc <__sprint_r>
    3254:	d9c15117 	ldw	r7,1348(sp)
    3258:	103e2e1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    325c:	dc800e17 	ldw	r18,56(sp)
    3260:	dc400d17 	ldw	r17,52(sp)
    3264:	dd401904 	addi	r21,sp,100
    3268:	003dba06 	br	2954 <___vfprintf_internal_r+0x520>
    326c:	d9014f17 	ldw	r4,1340(sp)
    3270:	b00b883a 	mov	r5,r22
    3274:	d9800c04 	addi	r6,sp,48
    3278:	00023dc0 	call	23dc <__sprint_r>
    327c:	103e251e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3280:	dc800e17 	ldw	r18,56(sp)
    3284:	dc400d17 	ldw	r17,52(sp)
    3288:	dcc01904 	addi	r19,sp,100
    328c:	003e4206 	br	2b98 <___vfprintf_internal_r+0x764>
    3290:	d9014f17 	ldw	r4,1340(sp)
    3294:	b00b883a 	mov	r5,r22
    3298:	d9800c04 	addi	r6,sp,48
    329c:	00023dc0 	call	23dc <__sprint_r>
    32a0:	103e1c1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    32a4:	dc800e17 	ldw	r18,56(sp)
    32a8:	dc400d17 	ldw	r17,52(sp)
    32ac:	d8c01904 	addi	r3,sp,100
    32b0:	003e2e06 	br	2b6c <___vfprintf_internal_r+0x738>
    32b4:	d9414c17 	ldw	r5,1328(sp)
    32b8:	2880004c 	andi	r2,r5,1
    32bc:	1005003a 	cmpeq	r2,r2,zero
    32c0:	103dda1e 	bne	r2,zero,2a2c <___vfprintf_internal_r+0x5f8>
    32c4:	003e9f06 	br	2d44 <___vfprintf_internal_r+0x910>
    32c8:	d8c14117 	ldw	r3,1284(sp)
    32cc:	9125883a 	add	r18,r18,r4
    32d0:	8c400044 	addi	r17,r17,1
    32d4:	008001c4 	movi	r2,7
    32d8:	a8c00015 	stw	r3,0(r21)
    32dc:	a9000115 	stw	r4,4(r21)
    32e0:	dc800e15 	stw	r18,56(sp)
    32e4:	dc400d15 	stw	r17,52(sp)
    32e8:	14426616 	blt	r2,r17,3c84 <___vfprintf_internal_r+0x1850>
    32ec:	a8c00204 	addi	r3,r21,8
    32f0:	d9414917 	ldw	r5,1316(sp)
    32f4:	00800044 	movi	r2,1
    32f8:	94800044 	addi	r18,r18,1
    32fc:	8c400044 	addi	r17,r17,1
    3300:	18800115 	stw	r2,4(r3)
    3304:	008001c4 	movi	r2,7
    3308:	19400015 	stw	r5,0(r3)
    330c:	dc800e15 	stw	r18,56(sp)
    3310:	dc400d15 	stw	r17,52(sp)
    3314:	2021883a 	mov	r16,r4
    3318:	14425016 	blt	r2,r17,3c5c <___vfprintf_internal_r+0x1828>
    331c:	19400204 	addi	r5,r3,8
    3320:	d9814717 	ldw	r6,1308(sp)
    3324:	8c400044 	addi	r17,r17,1
    3328:	dc400d15 	stw	r17,52(sp)
    332c:	3107c83a 	sub	r3,r6,r4
    3330:	d9014117 	ldw	r4,1284(sp)
    3334:	90e5883a 	add	r18,r18,r3
    3338:	28c00115 	stw	r3,4(r5)
    333c:	8105883a 	add	r2,r16,r4
    3340:	28800015 	stw	r2,0(r5)
    3344:	008001c4 	movi	r2,7
    3348:	dc800e15 	stw	r18,56(sp)
    334c:	147f1d16 	blt	r2,r17,2fc4 <___vfprintf_internal_r+0xb90>
    3350:	28c00204 	addi	r3,r5,8
    3354:	003db506 	br	2a2c <___vfprintf_internal_r+0x5f8>
    3358:	3c000017 	ldw	r16,0(r7)
    335c:	3c400117 	ldw	r17,4(r7)
    3360:	39800204 	addi	r6,r7,8
    3364:	01000044 	movi	r4,1
    3368:	d9814015 	stw	r6,1280(sp)
    336c:	d8000405 	stb	zero,16(sp)
    3370:	003ebe06 	br	2e6c <___vfprintf_internal_r+0xa38>
    3374:	3c000017 	ldw	r16,0(r7)
    3378:	3c400117 	ldw	r17,4(r7)
    337c:	38800204 	addi	r2,r7,8
    3380:	d8814015 	stw	r2,1280(sp)
    3384:	003eb706 	br	2e64 <___vfprintf_internal_r+0xa30>
    3388:	3c000017 	ldw	r16,0(r7)
    338c:	3c400117 	ldw	r17,4(r7)
    3390:	39000204 	addi	r4,r7,8
    3394:	d9014015 	stw	r4,1280(sp)
    3398:	0009883a 	mov	r4,zero
    339c:	d8000405 	stb	zero,16(sp)
    33a0:	003eb206 	br	2e6c <___vfprintf_internal_r+0xa38>
    33a4:	38c00017 	ldw	r3,0(r7)
    33a8:	39c00104 	addi	r7,r7,4
    33ac:	d8c14a15 	stw	r3,1320(sp)
    33b0:	1800d10e 	bge	r3,zero,36f8 <___vfprintf_internal_r+0x12c4>
    33b4:	00c7c83a 	sub	r3,zero,r3
    33b8:	d8c14a15 	stw	r3,1320(sp)
    33bc:	d9014c17 	ldw	r4,1328(sp)
    33c0:	b8c00007 	ldb	r3,0(r23)
    33c4:	21000114 	ori	r4,r4,4
    33c8:	d9014c15 	stw	r4,1328(sp)
    33cc:	003c9806 	br	2630 <___vfprintf_internal_r+0x1fc>
    33d0:	d9814c17 	ldw	r6,1328(sp)
    33d4:	3080080c 	andi	r2,r6,32
    33d8:	1001f026 	beq	r2,zero,3b9c <___vfprintf_internal_r+0x1768>
    33dc:	d9014b17 	ldw	r4,1324(sp)
    33e0:	38800017 	ldw	r2,0(r7)
    33e4:	39c00104 	addi	r7,r7,4
    33e8:	d9c14015 	stw	r7,1280(sp)
    33ec:	2007d7fa 	srai	r3,r4,31
    33f0:	d9c14017 	ldw	r7,1280(sp)
    33f4:	11000015 	stw	r4,0(r2)
    33f8:	10c00115 	stw	r3,4(r2)
    33fc:	003c6906 	br	25a4 <___vfprintf_internal_r+0x170>
    3400:	b8c00007 	ldb	r3,0(r23)
    3404:	00801b04 	movi	r2,108
    3408:	18824f26 	beq	r3,r2,3d48 <___vfprintf_internal_r+0x1914>
    340c:	d9414c17 	ldw	r5,1328(sp)
    3410:	29400414 	ori	r5,r5,16
    3414:	d9414c15 	stw	r5,1328(sp)
    3418:	003c8506 	br	2630 <___vfprintf_internal_r+0x1fc>
    341c:	d9814c17 	ldw	r6,1328(sp)
    3420:	b8c00007 	ldb	r3,0(r23)
    3424:	31800814 	ori	r6,r6,32
    3428:	d9814c15 	stw	r6,1328(sp)
    342c:	003c8006 	br	2630 <___vfprintf_internal_r+0x1fc>
    3430:	d8814c17 	ldw	r2,1328(sp)
    3434:	3c000017 	ldw	r16,0(r7)
    3438:	00c01e04 	movi	r3,120
    343c:	10800094 	ori	r2,r2,2
    3440:	d8814c15 	stw	r2,1328(sp)
    3444:	39c00104 	addi	r7,r7,4
    3448:	01400074 	movhi	r5,1
    344c:	297a9604 	addi	r5,r5,-5544
    3450:	00800c04 	movi	r2,48
    3454:	0023883a 	mov	r17,zero
    3458:	01000084 	movi	r4,2
    345c:	d9c14015 	stw	r7,1280(sp)
    3460:	d8c14d15 	stw	r3,1332(sp)
    3464:	d9414415 	stw	r5,1296(sp)
    3468:	d8800445 	stb	r2,17(sp)
    346c:	d8c00485 	stb	r3,18(sp)
    3470:	d8000405 	stb	zero,16(sp)
    3474:	003e7d06 	br	2e6c <___vfprintf_internal_r+0xa38>
    3478:	d8814c17 	ldw	r2,1328(sp)
    347c:	b8c00007 	ldb	r3,0(r23)
    3480:	10801014 	ori	r2,r2,64
    3484:	d8814c15 	stw	r2,1328(sp)
    3488:	003c6906 	br	2630 <___vfprintf_internal_r+0x1fc>
    348c:	d9414c17 	ldw	r5,1328(sp)
    3490:	2880020c 	andi	r2,r5,8
    3494:	1001df26 	beq	r2,zero,3c14 <___vfprintf_internal_r+0x17e0>
    3498:	39800017 	ldw	r6,0(r7)
    349c:	38800204 	addi	r2,r7,8
    34a0:	d8814015 	stw	r2,1280(sp)
    34a4:	d9814215 	stw	r6,1288(sp)
    34a8:	39c00117 	ldw	r7,4(r7)
    34ac:	d9c14315 	stw	r7,1292(sp)
    34b0:	d9014217 	ldw	r4,1288(sp)
    34b4:	d9414317 	ldw	r5,1292(sp)
    34b8:	0008c9c0 	call	8c9c <__isinfd>
    34bc:	10021726 	beq	r2,zero,3d1c <___vfprintf_internal_r+0x18e8>
    34c0:	d9014217 	ldw	r4,1288(sp)
    34c4:	d9414317 	ldw	r5,1292(sp)
    34c8:	000d883a 	mov	r6,zero
    34cc:	000f883a 	mov	r7,zero
    34d0:	000ace40 	call	ace4 <__ltdf2>
    34d4:	1002ca16 	blt	r2,zero,4000 <___vfprintf_internal_r+0x1bcc>
    34d8:	d9414d17 	ldw	r5,1332(sp)
    34dc:	008011c4 	movi	r2,71
    34e0:	11420a16 	blt	r2,r5,3d0c <___vfprintf_internal_r+0x18d8>
    34e4:	01800074 	movhi	r6,1
    34e8:	31ba9b04 	addi	r6,r6,-5524
    34ec:	d9814115 	stw	r6,1284(sp)
    34f0:	d9014c17 	ldw	r4,1328(sp)
    34f4:	00c000c4 	movi	r3,3
    34f8:	00bfdfc4 	movi	r2,-129
    34fc:	2088703a 	and	r4,r4,r2
    3500:	180f883a 	mov	r7,r3
    3504:	d8c14515 	stw	r3,1300(sp)
    3508:	d9014c15 	stw	r4,1328(sp)
    350c:	d8014615 	stw	zero,1304(sp)
    3510:	003e6a06 	br	2ebc <___vfprintf_internal_r+0xa88>
    3514:	38800017 	ldw	r2,0(r7)
    3518:	00c00044 	movi	r3,1
    351c:	39c00104 	addi	r7,r7,4
    3520:	d9c14015 	stw	r7,1280(sp)
    3524:	d9000f04 	addi	r4,sp,60
    3528:	180f883a 	mov	r7,r3
    352c:	d8c14515 	stw	r3,1300(sp)
    3530:	d9014115 	stw	r4,1284(sp)
    3534:	d8800f05 	stb	r2,60(sp)
    3538:	d8000405 	stb	zero,16(sp)
    353c:	003cac06 	br	27f0 <___vfprintf_internal_r+0x3bc>
    3540:	01400074 	movhi	r5,1
    3544:	297aa104 	addi	r5,r5,-5500
    3548:	d9414415 	stw	r5,1296(sp)
    354c:	d9814c17 	ldw	r6,1328(sp)
    3550:	3080080c 	andi	r2,r6,32
    3554:	1000f926 	beq	r2,zero,393c <___vfprintf_internal_r+0x1508>
    3558:	3c000017 	ldw	r16,0(r7)
    355c:	3c400117 	ldw	r17,4(r7)
    3560:	38800204 	addi	r2,r7,8
    3564:	d8814015 	stw	r2,1280(sp)
    3568:	d9414c17 	ldw	r5,1328(sp)
    356c:	2880004c 	andi	r2,r5,1
    3570:	1005003a 	cmpeq	r2,r2,zero
    3574:	1000b31e 	bne	r2,zero,3844 <___vfprintf_internal_r+0x1410>
    3578:	8444b03a 	or	r2,r16,r17
    357c:	1000b126 	beq	r2,zero,3844 <___vfprintf_internal_r+0x1410>
    3580:	d9814d17 	ldw	r6,1332(sp)
    3584:	29400094 	ori	r5,r5,2
    3588:	00800c04 	movi	r2,48
    358c:	01000084 	movi	r4,2
    3590:	d9414c15 	stw	r5,1328(sp)
    3594:	d8800445 	stb	r2,17(sp)
    3598:	d9800485 	stb	r6,18(sp)
    359c:	d8000405 	stb	zero,16(sp)
    35a0:	003e3206 	br	2e6c <___vfprintf_internal_r+0xa38>
    35a4:	01800074 	movhi	r6,1
    35a8:	31ba9604 	addi	r6,r6,-5544
    35ac:	d9814415 	stw	r6,1296(sp)
    35b0:	003fe606 	br	354c <___vfprintf_internal_r+0x1118>
    35b4:	00800ac4 	movi	r2,43
    35b8:	d8800405 	stb	r2,16(sp)
    35bc:	b8c00007 	ldb	r3,0(r23)
    35c0:	003c1b06 	br	2630 <___vfprintf_internal_r+0x1fc>
    35c4:	d8814c17 	ldw	r2,1328(sp)
    35c8:	b8c00007 	ldb	r3,0(r23)
    35cc:	10800054 	ori	r2,r2,1
    35d0:	d8814c15 	stw	r2,1328(sp)
    35d4:	003c1606 	br	2630 <___vfprintf_internal_r+0x1fc>
    35d8:	d8800407 	ldb	r2,16(sp)
    35dc:	1000461e 	bne	r2,zero,36f8 <___vfprintf_internal_r+0x12c4>
    35e0:	00800804 	movi	r2,32
    35e4:	d8800405 	stb	r2,16(sp)
    35e8:	b8c00007 	ldb	r3,0(r23)
    35ec:	003c1006 	br	2630 <___vfprintf_internal_r+0x1fc>
    35f0:	d9814c17 	ldw	r6,1328(sp)
    35f4:	b8c00007 	ldb	r3,0(r23)
    35f8:	31800214 	ori	r6,r6,8
    35fc:	d9814c15 	stw	r6,1328(sp)
    3600:	003c0b06 	br	2630 <___vfprintf_internal_r+0x1fc>
    3604:	0007883a 	mov	r3,zero
    3608:	01000244 	movi	r4,9
    360c:	188002a4 	muli	r2,r3,10
    3610:	b8c00007 	ldb	r3,0(r23)
    3614:	d9814d17 	ldw	r6,1332(sp)
    3618:	bdc00044 	addi	r23,r23,1
    361c:	d8c14d15 	stw	r3,1332(sp)
    3620:	d9414d17 	ldw	r5,1332(sp)
    3624:	3085883a 	add	r2,r6,r2
    3628:	10fff404 	addi	r3,r2,-48
    362c:	28bff404 	addi	r2,r5,-48
    3630:	20bff62e 	bgeu	r4,r2,360c <___vfprintf_internal_r+0x11d8>
    3634:	d8c14a15 	stw	r3,1320(sp)
    3638:	003bff06 	br	2638 <___vfprintf_internal_r+0x204>
    363c:	d9414c17 	ldw	r5,1328(sp)
    3640:	b8c00007 	ldb	r3,0(r23)
    3644:	29402014 	ori	r5,r5,128
    3648:	d9414c15 	stw	r5,1328(sp)
    364c:	003bf806 	br	2630 <___vfprintf_internal_r+0x1fc>
    3650:	b8c00007 	ldb	r3,0(r23)
    3654:	00800a84 	movi	r2,42
    3658:	bdc00044 	addi	r23,r23,1
    365c:	18831526 	beq	r3,r2,42b4 <___vfprintf_internal_r+0x1e80>
    3660:	d8c14d15 	stw	r3,1332(sp)
    3664:	18bff404 	addi	r2,r3,-48
    3668:	00c00244 	movi	r3,9
    366c:	18827836 	bltu	r3,r2,4050 <___vfprintf_internal_r+0x1c1c>
    3670:	000d883a 	mov	r6,zero
    3674:	308002a4 	muli	r2,r6,10
    3678:	b9800007 	ldb	r6,0(r23)
    367c:	d9414d17 	ldw	r5,1332(sp)
    3680:	bdc00044 	addi	r23,r23,1
    3684:	d9814d15 	stw	r6,1332(sp)
    3688:	d9014d17 	ldw	r4,1332(sp)
    368c:	1145883a 	add	r2,r2,r5
    3690:	11bff404 	addi	r6,r2,-48
    3694:	20bff404 	addi	r2,r4,-48
    3698:	18bff62e 	bgeu	r3,r2,3674 <___vfprintf_internal_r+0x1240>
    369c:	3027883a 	mov	r19,r6
    36a0:	303be50e 	bge	r6,zero,2638 <___vfprintf_internal_r+0x204>
    36a4:	04ffffc4 	movi	r19,-1
    36a8:	003be306 	br	2638 <___vfprintf_internal_r+0x204>
    36ac:	d8000405 	stb	zero,16(sp)
    36b0:	39800017 	ldw	r6,0(r7)
    36b4:	39c00104 	addi	r7,r7,4
    36b8:	d9c14015 	stw	r7,1280(sp)
    36bc:	d9814115 	stw	r6,1284(sp)
    36c0:	3001c926 	beq	r6,zero,3de8 <___vfprintf_internal_r+0x19b4>
    36c4:	98000e16 	blt	r19,zero,3700 <___vfprintf_internal_r+0x12cc>
    36c8:	d9014117 	ldw	r4,1284(sp)
    36cc:	000b883a 	mov	r5,zero
    36d0:	980d883a 	mov	r6,r19
    36d4:	00074f00 	call	74f0 <memchr>
    36d8:	10025926 	beq	r2,zero,4040 <___vfprintf_internal_r+0x1c0c>
    36dc:	d8c14117 	ldw	r3,1284(sp)
    36e0:	10cfc83a 	sub	r7,r2,r3
    36e4:	99c19e16 	blt	r19,r7,3d60 <___vfprintf_internal_r+0x192c>
    36e8:	d9c14515 	stw	r7,1300(sp)
    36ec:	38000916 	blt	r7,zero,3714 <___vfprintf_internal_r+0x12e0>
    36f0:	d8014615 	stw	zero,1304(sp)
    36f4:	003df106 	br	2ebc <___vfprintf_internal_r+0xa88>
    36f8:	b8c00007 	ldb	r3,0(r23)
    36fc:	003bcc06 	br	2630 <___vfprintf_internal_r+0x1fc>
    3700:	d9014117 	ldw	r4,1284(sp)
    3704:	00023680 	call	2368 <strlen>
    3708:	d8814515 	stw	r2,1300(sp)
    370c:	100f883a 	mov	r7,r2
    3710:	103ff70e 	bge	r2,zero,36f0 <___vfprintf_internal_r+0x12bc>
    3714:	d8014515 	stw	zero,1300(sp)
    3718:	d8014615 	stw	zero,1304(sp)
    371c:	003de706 	br	2ebc <___vfprintf_internal_r+0xa88>
    3720:	20c03fcc 	andi	r3,r4,255
    3724:	00800044 	movi	r2,1
    3728:	18802d26 	beq	r3,r2,37e0 <___vfprintf_internal_r+0x13ac>
    372c:	18800e36 	bltu	r3,r2,3768 <___vfprintf_internal_r+0x1334>
    3730:	00800084 	movi	r2,2
    3734:	1880fa26 	beq	r3,r2,3b20 <___vfprintf_internal_r+0x16ec>
    3738:	01000074 	movhi	r4,1
    373c:	213aa604 	addi	r4,r4,-5480
    3740:	00023680 	call	2368 <strlen>
    3744:	100f883a 	mov	r7,r2
    3748:	dcc14515 	stw	r19,1300(sp)
    374c:	9880010e 	bge	r19,r2,3754 <___vfprintf_internal_r+0x1320>
    3750:	d8814515 	stw	r2,1300(sp)
    3754:	00800074 	movhi	r2,1
    3758:	10baa604 	addi	r2,r2,-5480
    375c:	dcc14615 	stw	r19,1304(sp)
    3760:	d8814115 	stw	r2,1284(sp)
    3764:	003dd506 	br	2ebc <___vfprintf_internal_r+0xa88>
    3768:	d9401904 	addi	r5,sp,100
    376c:	dd000f04 	addi	r20,sp,60
    3770:	d9414115 	stw	r5,1284(sp)
    3774:	880a977a 	slli	r5,r17,29
    3778:	d9814117 	ldw	r6,1284(sp)
    377c:	8004d0fa 	srli	r2,r16,3
    3780:	8806d0fa 	srli	r3,r17,3
    3784:	810001cc 	andi	r4,r16,7
    3788:	2884b03a 	or	r2,r5,r2
    378c:	31bfffc4 	addi	r6,r6,-1
    3790:	21000c04 	addi	r4,r4,48
    3794:	d9814115 	stw	r6,1284(sp)
    3798:	10cab03a 	or	r5,r2,r3
    379c:	31000005 	stb	r4,0(r6)
    37a0:	1021883a 	mov	r16,r2
    37a4:	1823883a 	mov	r17,r3
    37a8:	283ff21e 	bne	r5,zero,3774 <___vfprintf_internal_r+0x1340>
    37ac:	d8c14c17 	ldw	r3,1328(sp)
    37b0:	1880004c 	andi	r2,r3,1
    37b4:	1005003a 	cmpeq	r2,r2,zero
    37b8:	103db91e 	bne	r2,zero,2ea0 <___vfprintf_internal_r+0xa6c>
    37bc:	20803fcc 	andi	r2,r4,255
    37c0:	1080201c 	xori	r2,r2,128
    37c4:	10bfe004 	addi	r2,r2,-128
    37c8:	00c00c04 	movi	r3,48
    37cc:	10fdb426 	beq	r2,r3,2ea0 <___vfprintf_internal_r+0xa6c>
    37d0:	31bfffc4 	addi	r6,r6,-1
    37d4:	d9814115 	stw	r6,1284(sp)
    37d8:	30c00005 	stb	r3,0(r6)
    37dc:	003db006 	br	2ea0 <___vfprintf_internal_r+0xa6c>
    37e0:	88800068 	cmpgeui	r2,r17,1
    37e4:	10002c1e 	bne	r2,zero,3898 <___vfprintf_internal_r+0x1464>
    37e8:	8800021e 	bne	r17,zero,37f4 <___vfprintf_internal_r+0x13c0>
    37ec:	00800244 	movi	r2,9
    37f0:	14002936 	bltu	r2,r16,3898 <___vfprintf_internal_r+0x1464>
    37f4:	d90018c4 	addi	r4,sp,99
    37f8:	dd000f04 	addi	r20,sp,60
    37fc:	d9014115 	stw	r4,1284(sp)
    3800:	d9014117 	ldw	r4,1284(sp)
    3804:	80800c04 	addi	r2,r16,48
    3808:	20800005 	stb	r2,0(r4)
    380c:	003da406 	br	2ea0 <___vfprintf_internal_r+0xa6c>
    3810:	dc400d17 	ldw	r17,52(sp)
    3814:	07000074 	movhi	fp,1
    3818:	e73aad84 	addi	fp,fp,-5450
    381c:	9425883a 	add	r18,r18,r16
    3820:	8c400044 	addi	r17,r17,1
    3824:	008001c4 	movi	r2,7
    3828:	1f000015 	stw	fp,0(r3)
    382c:	1c000115 	stw	r16,4(r3)
    3830:	dc800e15 	stw	r18,56(sp)
    3834:	dc400d15 	stw	r17,52(sp)
    3838:	147de216 	blt	r2,r17,2fc4 <___vfprintf_internal_r+0xb90>
    383c:	18c00204 	addi	r3,r3,8
    3840:	003c7a06 	br	2a2c <___vfprintf_internal_r+0x5f8>
    3844:	01000084 	movi	r4,2
    3848:	d8000405 	stb	zero,16(sp)
    384c:	003d8706 	br	2e6c <___vfprintf_internal_r+0xa38>
    3850:	d9814c17 	ldw	r6,1328(sp)
    3854:	30c4703a 	and	r2,r6,r3
    3858:	1005003a 	cmpeq	r2,r2,zero
    385c:	103cb926 	beq	r2,zero,2b44 <___vfprintf_internal_r+0x710>
    3860:	d9014117 	ldw	r4,1284(sp)
    3864:	94800044 	addi	r18,r18,1
    3868:	8c400044 	addi	r17,r17,1
    386c:	008001c4 	movi	r2,7
    3870:	a9000015 	stw	r4,0(r21)
    3874:	a8c00115 	stw	r3,4(r21)
    3878:	dc800e15 	stw	r18,56(sp)
    387c:	dc400d15 	stw	r17,52(sp)
    3880:	147e6616 	blt	r2,r17,321c <___vfprintf_internal_r+0xde8>
    3884:	acc00204 	addi	r19,r21,8
    3888:	003cd706 	br	2be8 <___vfprintf_internal_r+0x7b4>
    388c:	07000074 	movhi	fp,1
    3890:	e73aad84 	addi	fp,fp,-5450
    3894:	003c4f06 	br	29d4 <___vfprintf_internal_r+0x5a0>
    3898:	dd000f04 	addi	r20,sp,60
    389c:	dc801904 	addi	r18,sp,100
    38a0:	8009883a 	mov	r4,r16
    38a4:	880b883a 	mov	r5,r17
    38a8:	01800284 	movi	r6,10
    38ac:	000f883a 	mov	r7,zero
    38b0:	00099f40 	call	99f4 <__umoddi3>
    38b4:	12000c04 	addi	r8,r2,48
    38b8:	94bfffc4 	addi	r18,r18,-1
    38bc:	8009883a 	mov	r4,r16
    38c0:	880b883a 	mov	r5,r17
    38c4:	01800284 	movi	r6,10
    38c8:	000f883a 	mov	r7,zero
    38cc:	92000005 	stb	r8,0(r18)
    38d0:	00094180 	call	9418 <__udivdi3>
    38d4:	1009883a 	mov	r4,r2
    38d8:	1021883a 	mov	r16,r2
    38dc:	18800068 	cmpgeui	r2,r3,1
    38e0:	1823883a 	mov	r17,r3
    38e4:	103fee1e 	bne	r2,zero,38a0 <___vfprintf_internal_r+0x146c>
    38e8:	1800021e 	bne	r3,zero,38f4 <___vfprintf_internal_r+0x14c0>
    38ec:	00800244 	movi	r2,9
    38f0:	113feb36 	bltu	r2,r4,38a0 <___vfprintf_internal_r+0x146c>
    38f4:	94bfffc4 	addi	r18,r18,-1
    38f8:	dc814115 	stw	r18,1284(sp)
    38fc:	003fc006 	br	3800 <___vfprintf_internal_r+0x13cc>
    3900:	d9014c17 	ldw	r4,1328(sp)
    3904:	2080004c 	andi	r2,r4,1
    3908:	10009a1e 	bne	r2,zero,3b74 <___vfprintf_internal_r+0x1740>
    390c:	d9401904 	addi	r5,sp,100
    3910:	dd000f04 	addi	r20,sp,60
    3914:	d9414115 	stw	r5,1284(sp)
    3918:	003d6106 	br	2ea0 <___vfprintf_internal_r+0xa6c>
    391c:	d9014f17 	ldw	r4,1340(sp)
    3920:	b00b883a 	mov	r5,r22
    3924:	d9800c04 	addi	r6,sp,48
    3928:	00023dc0 	call	23dc <__sprint_r>
    392c:	103c791e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3930:	dc800e17 	ldw	r18,56(sp)
    3934:	d8c01904 	addi	r3,sp,100
    3938:	003cff06 	br	2d38 <___vfprintf_internal_r+0x904>
    393c:	d8c14c17 	ldw	r3,1328(sp)
    3940:	1880040c 	andi	r2,r3,16
    3944:	1000711e 	bne	r2,zero,3b0c <___vfprintf_internal_r+0x16d8>
    3948:	d9014c17 	ldw	r4,1328(sp)
    394c:	2080100c 	andi	r2,r4,64
    3950:	10006e26 	beq	r2,zero,3b0c <___vfprintf_internal_r+0x16d8>
    3954:	3c00000b 	ldhu	r16,0(r7)
    3958:	0023883a 	mov	r17,zero
    395c:	39c00104 	addi	r7,r7,4
    3960:	d9c14015 	stw	r7,1280(sp)
    3964:	003f0006 	br	3568 <___vfprintf_internal_r+0x1134>
    3968:	dc400d17 	ldw	r17,52(sp)
    396c:	07000074 	movhi	fp,1
    3970:	e73aad84 	addi	fp,fp,-5450
    3974:	9425883a 	add	r18,r18,r16
    3978:	8c400044 	addi	r17,r17,1
    397c:	008001c4 	movi	r2,7
    3980:	1f000015 	stw	fp,0(r3)
    3984:	1c000115 	stw	r16,4(r3)
    3988:	dc800e15 	stw	r18,56(sp)
    398c:	dc400d15 	stw	r17,52(sp)
    3990:	147d7616 	blt	r2,r17,2f6c <___vfprintf_internal_r+0xb38>
    3994:	18c00204 	addi	r3,r3,8
    3998:	003d7b06 	br	2f88 <___vfprintf_internal_r+0xb54>
    399c:	dc800e17 	ldw	r18,56(sp)
    39a0:	dc400d17 	ldw	r17,52(sp)
    39a4:	07000074 	movhi	fp,1
    39a8:	e73ab184 	addi	fp,fp,-5434
    39ac:	003bc006 	br	28b0 <___vfprintf_internal_r+0x47c>
    39b0:	d9014f17 	ldw	r4,1340(sp)
    39b4:	b00b883a 	mov	r5,r22
    39b8:	d9800c04 	addi	r6,sp,48
    39bc:	00023dc0 	call	23dc <__sprint_r>
    39c0:	103c541e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    39c4:	dc800e17 	ldw	r18,56(sp)
    39c8:	d8c01904 	addi	r3,sp,100
    39cc:	003ce906 	br	2d74 <___vfprintf_internal_r+0x940>
    39d0:	3c000017 	ldw	r16,0(r7)
    39d4:	0009883a 	mov	r4,zero
    39d8:	39c00104 	addi	r7,r7,4
    39dc:	0023883a 	mov	r17,zero
    39e0:	d9c14015 	stw	r7,1280(sp)
    39e4:	d8000405 	stb	zero,16(sp)
    39e8:	003d2006 	br	2e6c <___vfprintf_internal_r+0xa38>
    39ec:	38800017 	ldw	r2,0(r7)
    39f0:	39c00104 	addi	r7,r7,4
    39f4:	d9c14015 	stw	r7,1280(sp)
    39f8:	1023d7fa 	srai	r17,r2,31
    39fc:	1021883a 	mov	r16,r2
    3a00:	003d1806 	br	2e64 <___vfprintf_internal_r+0xa30>
    3a04:	3c000017 	ldw	r16,0(r7)
    3a08:	01000044 	movi	r4,1
    3a0c:	39c00104 	addi	r7,r7,4
    3a10:	0023883a 	mov	r17,zero
    3a14:	d9c14015 	stw	r7,1280(sp)
    3a18:	d8000405 	stb	zero,16(sp)
    3a1c:	003d1306 	br	2e6c <___vfprintf_internal_r+0xa38>
    3a20:	00800074 	movhi	r2,1
    3a24:	10baad04 	addi	r2,r2,-5452
    3a28:	94800044 	addi	r18,r18,1
    3a2c:	8c400044 	addi	r17,r17,1
    3a30:	a8800015 	stw	r2,0(r21)
    3a34:	00c00044 	movi	r3,1
    3a38:	008001c4 	movi	r2,7
    3a3c:	a8c00115 	stw	r3,4(r21)
    3a40:	dc800e15 	stw	r18,56(sp)
    3a44:	dc400d15 	stw	r17,52(sp)
    3a48:	1440ca16 	blt	r2,r17,3d74 <___vfprintf_internal_r+0x1940>
    3a4c:	a8c00204 	addi	r3,r21,8
    3a50:	2000061e 	bne	r4,zero,3a6c <___vfprintf_internal_r+0x1638>
    3a54:	d9414717 	ldw	r5,1308(sp)
    3a58:	2800041e 	bne	r5,zero,3a6c <___vfprintf_internal_r+0x1638>
    3a5c:	d9814c17 	ldw	r6,1328(sp)
    3a60:	3080004c 	andi	r2,r6,1
    3a64:	1005003a 	cmpeq	r2,r2,zero
    3a68:	103bf01e 	bne	r2,zero,2a2c <___vfprintf_internal_r+0x5f8>
    3a6c:	00800044 	movi	r2,1
    3a70:	dc400d17 	ldw	r17,52(sp)
    3a74:	18800115 	stw	r2,4(r3)
    3a78:	d8814917 	ldw	r2,1316(sp)
    3a7c:	94800044 	addi	r18,r18,1
    3a80:	8c400044 	addi	r17,r17,1
    3a84:	18800015 	stw	r2,0(r3)
    3a88:	008001c4 	movi	r2,7
    3a8c:	dc800e15 	stw	r18,56(sp)
    3a90:	dc400d15 	stw	r17,52(sp)
    3a94:	1440ca16 	blt	r2,r17,3dc0 <___vfprintf_internal_r+0x198c>
    3a98:	18c00204 	addi	r3,r3,8
    3a9c:	0121c83a 	sub	r16,zero,r4
    3aa0:	0400500e 	bge	zero,r16,3be4 <___vfprintf_internal_r+0x17b0>
    3aa4:	00800404 	movi	r2,16
    3aa8:	1400800e 	bge	r2,r16,3cac <___vfprintf_internal_r+0x1878>
    3aac:	1027883a 	mov	r19,r2
    3ab0:	07000074 	movhi	fp,1
    3ab4:	e73aad84 	addi	fp,fp,-5450
    3ab8:	050001c4 	movi	r20,7
    3abc:	00000306 	br	3acc <___vfprintf_internal_r+0x1698>
    3ac0:	18c00204 	addi	r3,r3,8
    3ac4:	843ffc04 	addi	r16,r16,-16
    3ac8:	9c007a0e 	bge	r19,r16,3cb4 <___vfprintf_internal_r+0x1880>
    3acc:	94800404 	addi	r18,r18,16
    3ad0:	8c400044 	addi	r17,r17,1
    3ad4:	1f000015 	stw	fp,0(r3)
    3ad8:	1cc00115 	stw	r19,4(r3)
    3adc:	dc800e15 	stw	r18,56(sp)
    3ae0:	dc400d15 	stw	r17,52(sp)
    3ae4:	a47ff60e 	bge	r20,r17,3ac0 <___vfprintf_internal_r+0x168c>
    3ae8:	d9014f17 	ldw	r4,1340(sp)
    3aec:	b00b883a 	mov	r5,r22
    3af0:	d9800c04 	addi	r6,sp,48
    3af4:	00023dc0 	call	23dc <__sprint_r>
    3af8:	103c061e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3afc:	dc800e17 	ldw	r18,56(sp)
    3b00:	dc400d17 	ldw	r17,52(sp)
    3b04:	d8c01904 	addi	r3,sp,100
    3b08:	003fee06 	br	3ac4 <___vfprintf_internal_r+0x1690>
    3b0c:	3c000017 	ldw	r16,0(r7)
    3b10:	0023883a 	mov	r17,zero
    3b14:	39c00104 	addi	r7,r7,4
    3b18:	d9c14015 	stw	r7,1280(sp)
    3b1c:	003e9206 	br	3568 <___vfprintf_internal_r+0x1134>
    3b20:	d9401904 	addi	r5,sp,100
    3b24:	dd000f04 	addi	r20,sp,60
    3b28:	d9414115 	stw	r5,1284(sp)
    3b2c:	d9814417 	ldw	r6,1296(sp)
    3b30:	880a973a 	slli	r5,r17,28
    3b34:	8004d13a 	srli	r2,r16,4
    3b38:	810003cc 	andi	r4,r16,15
    3b3c:	3109883a 	add	r4,r6,r4
    3b40:	2884b03a 	or	r2,r5,r2
    3b44:	21400003 	ldbu	r5,0(r4)
    3b48:	d9014117 	ldw	r4,1284(sp)
    3b4c:	8806d13a 	srli	r3,r17,4
    3b50:	1021883a 	mov	r16,r2
    3b54:	213fffc4 	addi	r4,r4,-1
    3b58:	d9014115 	stw	r4,1284(sp)
    3b5c:	d9814117 	ldw	r6,1284(sp)
    3b60:	10c8b03a 	or	r4,r2,r3
    3b64:	1823883a 	mov	r17,r3
    3b68:	31400005 	stb	r5,0(r6)
    3b6c:	203fef1e 	bne	r4,zero,3b2c <___vfprintf_internal_r+0x16f8>
    3b70:	003ccb06 	br	2ea0 <___vfprintf_internal_r+0xa6c>
    3b74:	00800c04 	movi	r2,48
    3b78:	d98018c4 	addi	r6,sp,99
    3b7c:	dd000f04 	addi	r20,sp,60
    3b80:	d88018c5 	stb	r2,99(sp)
    3b84:	d9814115 	stw	r6,1284(sp)
    3b88:	003cc506 	br	2ea0 <___vfprintf_internal_r+0xa6c>
    3b8c:	dc400d17 	ldw	r17,52(sp)
    3b90:	07000074 	movhi	fp,1
    3b94:	e73ab184 	addi	fp,fp,-5434
    3b98:	003bc706 	br	2ab8 <___vfprintf_internal_r+0x684>
    3b9c:	d9414c17 	ldw	r5,1328(sp)
    3ba0:	2880040c 	andi	r2,r5,16
    3ba4:	10007c26 	beq	r2,zero,3d98 <___vfprintf_internal_r+0x1964>
    3ba8:	38800017 	ldw	r2,0(r7)
    3bac:	39c00104 	addi	r7,r7,4
    3bb0:	d9c14015 	stw	r7,1280(sp)
    3bb4:	d9814b17 	ldw	r6,1324(sp)
    3bb8:	d9c14017 	ldw	r7,1280(sp)
    3bbc:	11800015 	stw	r6,0(r2)
    3bc0:	003a7806 	br	25a4 <___vfprintf_internal_r+0x170>
    3bc4:	d9014f17 	ldw	r4,1340(sp)
    3bc8:	b00b883a 	mov	r5,r22
    3bcc:	d9800c04 	addi	r6,sp,48
    3bd0:	00023dc0 	call	23dc <__sprint_r>
    3bd4:	103bcf1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3bd8:	dc800e17 	ldw	r18,56(sp)
    3bdc:	dc400d17 	ldw	r17,52(sp)
    3be0:	d8c01904 	addi	r3,sp,100
    3be4:	d9014717 	ldw	r4,1308(sp)
    3be8:	d9414117 	ldw	r5,1284(sp)
    3bec:	8c400044 	addi	r17,r17,1
    3bf0:	9125883a 	add	r18,r18,r4
    3bf4:	008001c4 	movi	r2,7
    3bf8:	19400015 	stw	r5,0(r3)
    3bfc:	19000115 	stw	r4,4(r3)
    3c00:	dc800e15 	stw	r18,56(sp)
    3c04:	dc400d15 	stw	r17,52(sp)
    3c08:	147cee16 	blt	r2,r17,2fc4 <___vfprintf_internal_r+0xb90>
    3c0c:	18c00204 	addi	r3,r3,8
    3c10:	003b8606 	br	2a2c <___vfprintf_internal_r+0x5f8>
    3c14:	38c00017 	ldw	r3,0(r7)
    3c18:	39000204 	addi	r4,r7,8
    3c1c:	d9014015 	stw	r4,1280(sp)
    3c20:	d8c14215 	stw	r3,1288(sp)
    3c24:	39c00117 	ldw	r7,4(r7)
    3c28:	d9c14315 	stw	r7,1292(sp)
    3c2c:	003e2006 	br	34b0 <___vfprintf_internal_r+0x107c>
    3c30:	0005883a 	mov	r2,zero
    3c34:	1409c83a 	sub	r4,r2,r16
    3c38:	1105803a 	cmpltu	r2,r2,r4
    3c3c:	044bc83a 	sub	r5,zero,r17
    3c40:	2885c83a 	sub	r2,r5,r2
    3c44:	2021883a 	mov	r16,r4
    3c48:	1023883a 	mov	r17,r2
    3c4c:	01000044 	movi	r4,1
    3c50:	00800b44 	movi	r2,45
    3c54:	d8800405 	stb	r2,16(sp)
    3c58:	003c8406 	br	2e6c <___vfprintf_internal_r+0xa38>
    3c5c:	d9014f17 	ldw	r4,1340(sp)
    3c60:	b00b883a 	mov	r5,r22
    3c64:	d9800c04 	addi	r6,sp,48
    3c68:	00023dc0 	call	23dc <__sprint_r>
    3c6c:	103ba91e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3c70:	dc800e17 	ldw	r18,56(sp)
    3c74:	dc400d17 	ldw	r17,52(sp)
    3c78:	d9000517 	ldw	r4,20(sp)
    3c7c:	d9401904 	addi	r5,sp,100
    3c80:	003da706 	br	3320 <___vfprintf_internal_r+0xeec>
    3c84:	d9014f17 	ldw	r4,1340(sp)
    3c88:	b00b883a 	mov	r5,r22
    3c8c:	d9800c04 	addi	r6,sp,48
    3c90:	00023dc0 	call	23dc <__sprint_r>
    3c94:	103b9f1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3c98:	dc800e17 	ldw	r18,56(sp)
    3c9c:	dc400d17 	ldw	r17,52(sp)
    3ca0:	d9000517 	ldw	r4,20(sp)
    3ca4:	d8c01904 	addi	r3,sp,100
    3ca8:	003d9106 	br	32f0 <___vfprintf_internal_r+0xebc>
    3cac:	07000074 	movhi	fp,1
    3cb0:	e73aad84 	addi	fp,fp,-5450
    3cb4:	9425883a 	add	r18,r18,r16
    3cb8:	8c400044 	addi	r17,r17,1
    3cbc:	008001c4 	movi	r2,7
    3cc0:	1f000015 	stw	fp,0(r3)
    3cc4:	1c000115 	stw	r16,4(r3)
    3cc8:	dc800e15 	stw	r18,56(sp)
    3ccc:	dc400d15 	stw	r17,52(sp)
    3cd0:	147fbc16 	blt	r2,r17,3bc4 <___vfprintf_internal_r+0x1790>
    3cd4:	18c00204 	addi	r3,r3,8
    3cd8:	003fc206 	br	3be4 <___vfprintf_internal_r+0x17b0>
    3cdc:	d9014f17 	ldw	r4,1340(sp)
    3ce0:	b00b883a 	mov	r5,r22
    3ce4:	d9800c04 	addi	r6,sp,48
    3ce8:	00023dc0 	call	23dc <__sprint_r>
    3cec:	103b891e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3cf0:	dc800e17 	ldw	r18,56(sp)
    3cf4:	d9000517 	ldw	r4,20(sp)
    3cf8:	d8c01904 	addi	r3,sp,100
    3cfc:	003d0206 	br	3108 <___vfprintf_internal_r+0xcd4>
    3d00:	07000074 	movhi	fp,1
    3d04:	e73aad84 	addi	fp,fp,-5450
    3d08:	003be406 	br	2c9c <___vfprintf_internal_r+0x868>
    3d0c:	00800074 	movhi	r2,1
    3d10:	10ba9c04 	addi	r2,r2,-5520
    3d14:	d8814115 	stw	r2,1284(sp)
    3d18:	003df506 	br	34f0 <___vfprintf_internal_r+0x10bc>
    3d1c:	d9014217 	ldw	r4,1288(sp)
    3d20:	d9414317 	ldw	r5,1292(sp)
    3d24:	0008cdc0 	call	8cdc <__isnand>
    3d28:	10003926 	beq	r2,zero,3e10 <___vfprintf_internal_r+0x19dc>
    3d2c:	d9414d17 	ldw	r5,1332(sp)
    3d30:	008011c4 	movi	r2,71
    3d34:	1140ce16 	blt	r2,r5,4070 <___vfprintf_internal_r+0x1c3c>
    3d38:	01800074 	movhi	r6,1
    3d3c:	31ba9d04 	addi	r6,r6,-5516
    3d40:	d9814115 	stw	r6,1284(sp)
    3d44:	003dea06 	br	34f0 <___vfprintf_internal_r+0x10bc>
    3d48:	d9014c17 	ldw	r4,1328(sp)
    3d4c:	bdc00044 	addi	r23,r23,1
    3d50:	b8c00007 	ldb	r3,0(r23)
    3d54:	21000814 	ori	r4,r4,32
    3d58:	d9014c15 	stw	r4,1328(sp)
    3d5c:	003a3406 	br	2630 <___vfprintf_internal_r+0x1fc>
    3d60:	dcc14515 	stw	r19,1300(sp)
    3d64:	98011016 	blt	r19,zero,41a8 <___vfprintf_internal_r+0x1d74>
    3d68:	980f883a 	mov	r7,r19
    3d6c:	d8014615 	stw	zero,1304(sp)
    3d70:	003c5206 	br	2ebc <___vfprintf_internal_r+0xa88>
    3d74:	d9014f17 	ldw	r4,1340(sp)
    3d78:	b00b883a 	mov	r5,r22
    3d7c:	d9800c04 	addi	r6,sp,48
    3d80:	00023dc0 	call	23dc <__sprint_r>
    3d84:	103b631e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3d88:	dc800e17 	ldw	r18,56(sp)
    3d8c:	d9000517 	ldw	r4,20(sp)
    3d90:	d8c01904 	addi	r3,sp,100
    3d94:	003f2e06 	br	3a50 <___vfprintf_internal_r+0x161c>
    3d98:	d8c14c17 	ldw	r3,1328(sp)
    3d9c:	1880100c 	andi	r2,r3,64
    3da0:	1000a026 	beq	r2,zero,4024 <___vfprintf_internal_r+0x1bf0>
    3da4:	38800017 	ldw	r2,0(r7)
    3da8:	39c00104 	addi	r7,r7,4
    3dac:	d9c14015 	stw	r7,1280(sp)
    3db0:	d9014b17 	ldw	r4,1324(sp)
    3db4:	d9c14017 	ldw	r7,1280(sp)
    3db8:	1100000d 	sth	r4,0(r2)
    3dbc:	0039f906 	br	25a4 <___vfprintf_internal_r+0x170>
    3dc0:	d9014f17 	ldw	r4,1340(sp)
    3dc4:	b00b883a 	mov	r5,r22
    3dc8:	d9800c04 	addi	r6,sp,48
    3dcc:	00023dc0 	call	23dc <__sprint_r>
    3dd0:	103b501e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    3dd4:	dc800e17 	ldw	r18,56(sp)
    3dd8:	dc400d17 	ldw	r17,52(sp)
    3ddc:	d9000517 	ldw	r4,20(sp)
    3de0:	d8c01904 	addi	r3,sp,100
    3de4:	003f2d06 	br	3a9c <___vfprintf_internal_r+0x1668>
    3de8:	00800184 	movi	r2,6
    3dec:	14c09a36 	bltu	r2,r19,4058 <___vfprintf_internal_r+0x1c24>
    3df0:	dcc14515 	stw	r19,1300(sp)
    3df4:	9800010e 	bge	r19,zero,3dfc <___vfprintf_internal_r+0x19c8>
    3df8:	d8014515 	stw	zero,1300(sp)
    3dfc:	00800074 	movhi	r2,1
    3e00:	10ba9f04 	addi	r2,r2,-5508
    3e04:	980f883a 	mov	r7,r19
    3e08:	d8814115 	stw	r2,1284(sp)
    3e0c:	003a7806 	br	27f0 <___vfprintf_internal_r+0x3bc>
    3e10:	00bfffc4 	movi	r2,-1
    3e14:	9880e226 	beq	r19,r2,41a0 <___vfprintf_internal_r+0x1d6c>
    3e18:	d9414d17 	ldw	r5,1332(sp)
    3e1c:	008019c4 	movi	r2,103
    3e20:	2880dc26 	beq	r5,r2,4194 <___vfprintf_internal_r+0x1d60>
    3e24:	008011c4 	movi	r2,71
    3e28:	2880da26 	beq	r5,r2,4194 <___vfprintf_internal_r+0x1d60>
    3e2c:	d9414c17 	ldw	r5,1328(sp)
    3e30:	d9014317 	ldw	r4,1292(sp)
    3e34:	d9814217 	ldw	r6,1288(sp)
    3e38:	29404014 	ori	r5,r5,256
    3e3c:	d9414c15 	stw	r5,1328(sp)
    3e40:	2000cc16 	blt	r4,zero,4174 <___vfprintf_internal_r+0x1d40>
    3e44:	3021883a 	mov	r16,r6
    3e48:	2023883a 	mov	r17,r4
    3e4c:	0039883a 	mov	fp,zero
    3e50:	d9414d17 	ldw	r5,1332(sp)
    3e54:	00801984 	movi	r2,102
    3e58:	2880b726 	beq	r5,r2,4138 <___vfprintf_internal_r+0x1d04>
    3e5c:	00801184 	movi	r2,70
    3e60:	2880b526 	beq	r5,r2,4138 <___vfprintf_internal_r+0x1d04>
    3e64:	00801944 	movi	r2,101
    3e68:	2880c826 	beq	r5,r2,418c <___vfprintf_internal_r+0x1d58>
    3e6c:	00801144 	movi	r2,69
    3e70:	2880c626 	beq	r5,r2,418c <___vfprintf_internal_r+0x1d58>
    3e74:	9829883a 	mov	r20,r19
    3e78:	d9014f17 	ldw	r4,1340(sp)
    3e7c:	d8800504 	addi	r2,sp,20
    3e80:	880d883a 	mov	r6,r17
    3e84:	d8800115 	stw	r2,4(sp)
    3e88:	d8c00604 	addi	r3,sp,24
    3e8c:	d8800704 	addi	r2,sp,28
    3e90:	800b883a 	mov	r5,r16
    3e94:	01c00084 	movi	r7,2
    3e98:	d8c00215 	stw	r3,8(sp)
    3e9c:	d8800315 	stw	r2,12(sp)
    3ea0:	dd000015 	stw	r20,0(sp)
    3ea4:	00046580 	call	4658 <_dtoa_r>
    3ea8:	d9814d17 	ldw	r6,1332(sp)
    3eac:	d8814115 	stw	r2,1284(sp)
    3eb0:	008019c4 	movi	r2,103
    3eb4:	30809526 	beq	r6,r2,410c <___vfprintf_internal_r+0x1cd8>
    3eb8:	d8c14d17 	ldw	r3,1332(sp)
    3ebc:	008011c4 	movi	r2,71
    3ec0:	18809226 	beq	r3,r2,410c <___vfprintf_internal_r+0x1cd8>
    3ec4:	d9414117 	ldw	r5,1284(sp)
    3ec8:	d9814d17 	ldw	r6,1332(sp)
    3ecc:	00801984 	movi	r2,102
    3ed0:	2d25883a 	add	r18,r5,r20
    3ed4:	30808626 	beq	r6,r2,40f0 <___vfprintf_internal_r+0x1cbc>
    3ed8:	00801184 	movi	r2,70
    3edc:	30808426 	beq	r6,r2,40f0 <___vfprintf_internal_r+0x1cbc>
    3ee0:	000d883a 	mov	r6,zero
    3ee4:	000f883a 	mov	r7,zero
    3ee8:	880b883a 	mov	r5,r17
    3eec:	8009883a 	mov	r4,r16
    3ef0:	000aac40 	call	aac4 <__eqdf2>
    3ef4:	1000751e 	bne	r2,zero,40cc <___vfprintf_internal_r+0x1c98>
    3ef8:	9005883a 	mov	r2,r18
    3efc:	dc800715 	stw	r18,28(sp)
    3f00:	d9014117 	ldw	r4,1284(sp)
    3f04:	d9414d17 	ldw	r5,1332(sp)
    3f08:	00c019c4 	movi	r3,103
    3f0c:	1125c83a 	sub	r18,r2,r4
    3f10:	28c06826 	beq	r5,r3,40b4 <___vfprintf_internal_r+0x1c80>
    3f14:	008011c4 	movi	r2,71
    3f18:	28806626 	beq	r5,r2,40b4 <___vfprintf_internal_r+0x1c80>
    3f1c:	d9000517 	ldw	r4,20(sp)
    3f20:	d8c14d17 	ldw	r3,1332(sp)
    3f24:	00801944 	movi	r2,101
    3f28:	10c05516 	blt	r2,r3,4080 <___vfprintf_internal_r+0x1c4c>
    3f2c:	213fffc4 	addi	r4,r4,-1
    3f30:	d9000515 	stw	r4,20(sp)
    3f34:	d8c00805 	stb	r3,32(sp)
    3f38:	2021883a 	mov	r16,r4
    3f3c:	2000c116 	blt	r4,zero,4244 <___vfprintf_internal_r+0x1e10>
    3f40:	00800ac4 	movi	r2,43
    3f44:	d8800845 	stb	r2,33(sp)
    3f48:	00800244 	movi	r2,9
    3f4c:	1400af0e 	bge	r2,r16,420c <___vfprintf_internal_r+0x1dd8>
    3f50:	1027883a 	mov	r19,r2
    3f54:	dc400b84 	addi	r17,sp,46
    3f58:	8009883a 	mov	r4,r16
    3f5c:	01400284 	movi	r5,10
    3f60:	0001f340 	call	1f34 <__modsi3>
    3f64:	10800c04 	addi	r2,r2,48
    3f68:	8c7fffc4 	addi	r17,r17,-1
    3f6c:	8009883a 	mov	r4,r16
    3f70:	01400284 	movi	r5,10
    3f74:	88800005 	stb	r2,0(r17)
    3f78:	0001ed40 	call	1ed4 <__divsi3>
    3f7c:	1021883a 	mov	r16,r2
    3f80:	98bff516 	blt	r19,r2,3f58 <___vfprintf_internal_r+0x1b24>
    3f84:	10c00c04 	addi	r3,r2,48
    3f88:	d88009c4 	addi	r2,sp,39
    3f8c:	108001c4 	addi	r2,r2,7
    3f90:	897fffc4 	addi	r5,r17,-1
    3f94:	88ffffc5 	stb	r3,-1(r17)
    3f98:	2880a72e 	bgeu	r5,r2,4238 <___vfprintf_internal_r+0x1e04>
    3f9c:	1009883a 	mov	r4,r2
    3fa0:	d9800804 	addi	r6,sp,32
    3fa4:	d8c00884 	addi	r3,sp,34
    3fa8:	28800003 	ldbu	r2,0(r5)
    3fac:	29400044 	addi	r5,r5,1
    3fb0:	18800005 	stb	r2,0(r3)
    3fb4:	18c00044 	addi	r3,r3,1
    3fb8:	293ffb36 	bltu	r5,r4,3fa8 <___vfprintf_internal_r+0x1b74>
    3fbc:	1987c83a 	sub	r3,r3,r6
    3fc0:	00800044 	movi	r2,1
    3fc4:	d8c14815 	stw	r3,1312(sp)
    3fc8:	90cf883a 	add	r7,r18,r3
    3fcc:	1480960e 	bge	r2,r18,4228 <___vfprintf_internal_r+0x1df4>
    3fd0:	39c00044 	addi	r7,r7,1
    3fd4:	d9c14515 	stw	r7,1300(sp)
    3fd8:	38003416 	blt	r7,zero,40ac <___vfprintf_internal_r+0x1c78>
    3fdc:	e0803fcc 	andi	r2,fp,255
    3fe0:	1080201c 	xori	r2,r2,128
    3fe4:	10bfe004 	addi	r2,r2,-128
    3fe8:	10004e26 	beq	r2,zero,4124 <___vfprintf_internal_r+0x1cf0>
    3fec:	00800b44 	movi	r2,45
    3ff0:	dc814715 	stw	r18,1308(sp)
    3ff4:	d8014615 	stw	zero,1304(sp)
    3ff8:	d8800405 	stb	r2,16(sp)
    3ffc:	003bb106 	br	2ec4 <___vfprintf_internal_r+0xa90>
    4000:	00800b44 	movi	r2,45
    4004:	d8800405 	stb	r2,16(sp)
    4008:	003d3306 	br	34d8 <___vfprintf_internal_r+0x10a4>
    400c:	d9014f17 	ldw	r4,1340(sp)
    4010:	b00b883a 	mov	r5,r22
    4014:	d9800c04 	addi	r6,sp,48
    4018:	00023dc0 	call	23dc <__sprint_r>
    401c:	103abd1e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x6e0>
    4020:	003abb06 	br	2b10 <___vfprintf_internal_r+0x6dc>
    4024:	38800017 	ldw	r2,0(r7)
    4028:	39c00104 	addi	r7,r7,4
    402c:	d9c14015 	stw	r7,1280(sp)
    4030:	d9414b17 	ldw	r5,1324(sp)
    4034:	d9c14017 	ldw	r7,1280(sp)
    4038:	11400015 	stw	r5,0(r2)
    403c:	00395906 	br	25a4 <___vfprintf_internal_r+0x170>
    4040:	980f883a 	mov	r7,r19
    4044:	dcc14515 	stw	r19,1300(sp)
    4048:	d8014615 	stw	zero,1304(sp)
    404c:	003b9b06 	br	2ebc <___vfprintf_internal_r+0xa88>
    4050:	0027883a 	mov	r19,zero
    4054:	00397806 	br	2638 <___vfprintf_internal_r+0x204>
    4058:	00c00074 	movhi	r3,1
    405c:	18fa9f04 	addi	r3,r3,-5508
    4060:	100f883a 	mov	r7,r2
    4064:	d8814515 	stw	r2,1300(sp)
    4068:	d8c14115 	stw	r3,1284(sp)
    406c:	0039e006 	br	27f0 <___vfprintf_internal_r+0x3bc>
    4070:	00800074 	movhi	r2,1
    4074:	10ba9e04 	addi	r2,r2,-5512
    4078:	d8814115 	stw	r2,1284(sp)
    407c:	003d1c06 	br	34f0 <___vfprintf_internal_r+0x10bc>
    4080:	d9414d17 	ldw	r5,1332(sp)
    4084:	00801984 	movi	r2,102
    4088:	28804926 	beq	r5,r2,41b0 <___vfprintf_internal_r+0x1d7c>
    408c:	200f883a 	mov	r7,r4
    4090:	24805716 	blt	r4,r18,41f0 <___vfprintf_internal_r+0x1dbc>
    4094:	d9414c17 	ldw	r5,1328(sp)
    4098:	2880004c 	andi	r2,r5,1
    409c:	10000126 	beq	r2,zero,40a4 <___vfprintf_internal_r+0x1c70>
    40a0:	21c00044 	addi	r7,r4,1
    40a4:	d9c14515 	stw	r7,1300(sp)
    40a8:	383fcc0e 	bge	r7,zero,3fdc <___vfprintf_internal_r+0x1ba8>
    40ac:	d8014515 	stw	zero,1300(sp)
    40b0:	003fca06 	br	3fdc <___vfprintf_internal_r+0x1ba8>
    40b4:	d9000517 	ldw	r4,20(sp)
    40b8:	00bfff04 	movi	r2,-4
    40bc:	1100480e 	bge	r2,r4,41e0 <___vfprintf_internal_r+0x1dac>
    40c0:	99004716 	blt	r19,r4,41e0 <___vfprintf_internal_r+0x1dac>
    40c4:	d8c14d15 	stw	r3,1332(sp)
    40c8:	003ff006 	br	408c <___vfprintf_internal_r+0x1c58>
    40cc:	d8800717 	ldw	r2,28(sp)
    40d0:	14bf8b2e 	bgeu	r2,r18,3f00 <___vfprintf_internal_r+0x1acc>
    40d4:	9007883a 	mov	r3,r18
    40d8:	01000c04 	movi	r4,48
    40dc:	11000005 	stb	r4,0(r2)
    40e0:	10800044 	addi	r2,r2,1
    40e4:	d8800715 	stw	r2,28(sp)
    40e8:	18bffc1e 	bne	r3,r2,40dc <___vfprintf_internal_r+0x1ca8>
    40ec:	003f8406 	br	3f00 <___vfprintf_internal_r+0x1acc>
    40f0:	d8814117 	ldw	r2,1284(sp)
    40f4:	10c00007 	ldb	r3,0(r2)
    40f8:	00800c04 	movi	r2,48
    40fc:	18805b26 	beq	r3,r2,426c <___vfprintf_internal_r+0x1e38>
    4100:	d9000517 	ldw	r4,20(sp)
    4104:	9125883a 	add	r18,r18,r4
    4108:	003f7506 	br	3ee0 <___vfprintf_internal_r+0x1aac>
    410c:	d9014c17 	ldw	r4,1328(sp)
    4110:	2080004c 	andi	r2,r4,1
    4114:	1005003a 	cmpeq	r2,r2,zero
    4118:	103f6a26 	beq	r2,zero,3ec4 <___vfprintf_internal_r+0x1a90>
    411c:	d8800717 	ldw	r2,28(sp)
    4120:	003f7706 	br	3f00 <___vfprintf_internal_r+0x1acc>
    4124:	d9c14515 	stw	r7,1300(sp)
    4128:	38004d16 	blt	r7,zero,4260 <___vfprintf_internal_r+0x1e2c>
    412c:	dc814715 	stw	r18,1308(sp)
    4130:	d8014615 	stw	zero,1304(sp)
    4134:	003b6106 	br	2ebc <___vfprintf_internal_r+0xa88>
    4138:	d9014f17 	ldw	r4,1340(sp)
    413c:	d8800504 	addi	r2,sp,20
    4140:	d8800115 	stw	r2,4(sp)
    4144:	d8c00604 	addi	r3,sp,24
    4148:	d8800704 	addi	r2,sp,28
    414c:	800b883a 	mov	r5,r16
    4150:	880d883a 	mov	r6,r17
    4154:	01c000c4 	movi	r7,3
    4158:	d8c00215 	stw	r3,8(sp)
    415c:	d8800315 	stw	r2,12(sp)
    4160:	dcc00015 	stw	r19,0(sp)
    4164:	9829883a 	mov	r20,r19
    4168:	00046580 	call	4658 <_dtoa_r>
    416c:	d8814115 	stw	r2,1284(sp)
    4170:	003f5106 	br	3eb8 <___vfprintf_internal_r+0x1a84>
    4174:	d8c14217 	ldw	r3,1288(sp)
    4178:	d9014317 	ldw	r4,1292(sp)
    417c:	07000b44 	movi	fp,45
    4180:	1821883a 	mov	r16,r3
    4184:	2460003c 	xorhi	r17,r4,32768
    4188:	003f3106 	br	3e50 <___vfprintf_internal_r+0x1a1c>
    418c:	9d000044 	addi	r20,r19,1
    4190:	003f3906 	br	3e78 <___vfprintf_internal_r+0x1a44>
    4194:	983f251e 	bne	r19,zero,3e2c <___vfprintf_internal_r+0x19f8>
    4198:	04c00044 	movi	r19,1
    419c:	003f2306 	br	3e2c <___vfprintf_internal_r+0x19f8>
    41a0:	04c00184 	movi	r19,6
    41a4:	003f2106 	br	3e2c <___vfprintf_internal_r+0x19f8>
    41a8:	d8014515 	stw	zero,1300(sp)
    41ac:	003eee06 	br	3d68 <___vfprintf_internal_r+0x1934>
    41b0:	200f883a 	mov	r7,r4
    41b4:	0100370e 	bge	zero,r4,4294 <___vfprintf_internal_r+0x1e60>
    41b8:	9800031e 	bne	r19,zero,41c8 <___vfprintf_internal_r+0x1d94>
    41bc:	d9814c17 	ldw	r6,1328(sp)
    41c0:	3080004c 	andi	r2,r6,1
    41c4:	103fb726 	beq	r2,zero,40a4 <___vfprintf_internal_r+0x1c70>
    41c8:	20800044 	addi	r2,r4,1
    41cc:	98a7883a 	add	r19,r19,r2
    41d0:	dcc14515 	stw	r19,1300(sp)
    41d4:	980f883a 	mov	r7,r19
    41d8:	983f800e 	bge	r19,zero,3fdc <___vfprintf_internal_r+0x1ba8>
    41dc:	003fb306 	br	40ac <___vfprintf_internal_r+0x1c78>
    41e0:	d9814d17 	ldw	r6,1332(sp)
    41e4:	31bfff84 	addi	r6,r6,-2
    41e8:	d9814d15 	stw	r6,1332(sp)
    41ec:	003f4c06 	br	3f20 <___vfprintf_internal_r+0x1aec>
    41f0:	0100180e 	bge	zero,r4,4254 <___vfprintf_internal_r+0x1e20>
    41f4:	00800044 	movi	r2,1
    41f8:	1485883a 	add	r2,r2,r18
    41fc:	d8814515 	stw	r2,1300(sp)
    4200:	100f883a 	mov	r7,r2
    4204:	103f750e 	bge	r2,zero,3fdc <___vfprintf_internal_r+0x1ba8>
    4208:	003fa806 	br	40ac <___vfprintf_internal_r+0x1c78>
    420c:	80c00c04 	addi	r3,r16,48
    4210:	00800c04 	movi	r2,48
    4214:	d8c008c5 	stb	r3,35(sp)
    4218:	d9800804 	addi	r6,sp,32
    421c:	d8c00904 	addi	r3,sp,36
    4220:	d8800885 	stb	r2,34(sp)
    4224:	003f6506 	br	3fbc <___vfprintf_internal_r+0x1b88>
    4228:	d9014c17 	ldw	r4,1328(sp)
    422c:	2084703a 	and	r2,r4,r2
    4230:	103f9c26 	beq	r2,zero,40a4 <___vfprintf_internal_r+0x1c70>
    4234:	003f6606 	br	3fd0 <___vfprintf_internal_r+0x1b9c>
    4238:	d9800804 	addi	r6,sp,32
    423c:	d8c00884 	addi	r3,sp,34
    4240:	003f5e06 	br	3fbc <___vfprintf_internal_r+0x1b88>
    4244:	00800b44 	movi	r2,45
    4248:	0121c83a 	sub	r16,zero,r4
    424c:	d8800845 	stb	r2,33(sp)
    4250:	003f3d06 	br	3f48 <___vfprintf_internal_r+0x1b14>
    4254:	00800084 	movi	r2,2
    4258:	1105c83a 	sub	r2,r2,r4
    425c:	003fe606 	br	41f8 <___vfprintf_internal_r+0x1dc4>
    4260:	d8014515 	stw	zero,1300(sp)
    4264:	dc814715 	stw	r18,1308(sp)
    4268:	003fb106 	br	4130 <___vfprintf_internal_r+0x1cfc>
    426c:	000d883a 	mov	r6,zero
    4270:	000f883a 	mov	r7,zero
    4274:	8009883a 	mov	r4,r16
    4278:	880b883a 	mov	r5,r17
    427c:	000ab4c0 	call	ab4c <__nedf2>
    4280:	103f9f26 	beq	r2,zero,4100 <___vfprintf_internal_r+0x1ccc>
    4284:	00800044 	movi	r2,1
    4288:	1509c83a 	sub	r4,r2,r20
    428c:	d9000515 	stw	r4,20(sp)
    4290:	003f9b06 	br	4100 <___vfprintf_internal_r+0x1ccc>
    4294:	98000d1e 	bne	r19,zero,42cc <___vfprintf_internal_r+0x1e98>
    4298:	d8c14c17 	ldw	r3,1328(sp)
    429c:	1880004c 	andi	r2,r3,1
    42a0:	10000a1e 	bne	r2,zero,42cc <___vfprintf_internal_r+0x1e98>
    42a4:	01000044 	movi	r4,1
    42a8:	200f883a 	mov	r7,r4
    42ac:	d9014515 	stw	r4,1300(sp)
    42b0:	003f4a06 	br	3fdc <___vfprintf_internal_r+0x1ba8>
    42b4:	3cc00017 	ldw	r19,0(r7)
    42b8:	39c00104 	addi	r7,r7,4
    42bc:	983d0e0e 	bge	r19,zero,36f8 <___vfprintf_internal_r+0x12c4>
    42c0:	b8c00007 	ldb	r3,0(r23)
    42c4:	04ffffc4 	movi	r19,-1
    42c8:	0038d906 	br	2630 <___vfprintf_internal_r+0x1fc>
    42cc:	9cc00084 	addi	r19,r19,2
    42d0:	dcc14515 	stw	r19,1300(sp)
    42d4:	980f883a 	mov	r7,r19
    42d8:	983f400e 	bge	r19,zero,3fdc <___vfprintf_internal_r+0x1ba8>
    42dc:	003f7306 	br	40ac <___vfprintf_internal_r+0x1c78>

000042e0 <__vfprintf_internal>:
    42e0:	00800074 	movhi	r2,1
    42e4:	10827c04 	addi	r2,r2,2544
    42e8:	2013883a 	mov	r9,r4
    42ec:	11000017 	ldw	r4,0(r2)
    42f0:	2805883a 	mov	r2,r5
    42f4:	300f883a 	mov	r7,r6
    42f8:	480b883a 	mov	r5,r9
    42fc:	100d883a 	mov	r6,r2
    4300:	00024341 	jmpi	2434 <___vfprintf_internal_r>

00004304 <__swsetup_r>:
    4304:	00800074 	movhi	r2,1
    4308:	10827c04 	addi	r2,r2,2544
    430c:	10c00017 	ldw	r3,0(r2)
    4310:	defffd04 	addi	sp,sp,-12
    4314:	dc400115 	stw	r17,4(sp)
    4318:	dc000015 	stw	r16,0(sp)
    431c:	dfc00215 	stw	ra,8(sp)
    4320:	2023883a 	mov	r17,r4
    4324:	2821883a 	mov	r16,r5
    4328:	18000226 	beq	r3,zero,4334 <__swsetup_r+0x30>
    432c:	18800e17 	ldw	r2,56(r3)
    4330:	10001f26 	beq	r2,zero,43b0 <__swsetup_r+0xac>
    4334:	8100030b 	ldhu	r4,12(r16)
    4338:	2080020c 	andi	r2,r4,8
    433c:	10002826 	beq	r2,zero,43e0 <__swsetup_r+0xdc>
    4340:	81400417 	ldw	r5,16(r16)
    4344:	28001d26 	beq	r5,zero,43bc <__swsetup_r+0xb8>
    4348:	2080004c 	andi	r2,r4,1
    434c:	1005003a 	cmpeq	r2,r2,zero
    4350:	10000b26 	beq	r2,zero,4380 <__swsetup_r+0x7c>
    4354:	2080008c 	andi	r2,r4,2
    4358:	10001226 	beq	r2,zero,43a4 <__swsetup_r+0xa0>
    435c:	0005883a 	mov	r2,zero
    4360:	80800215 	stw	r2,8(r16)
    4364:	28000b26 	beq	r5,zero,4394 <__swsetup_r+0x90>
    4368:	0005883a 	mov	r2,zero
    436c:	dfc00217 	ldw	ra,8(sp)
    4370:	dc400117 	ldw	r17,4(sp)
    4374:	dc000017 	ldw	r16,0(sp)
    4378:	dec00304 	addi	sp,sp,12
    437c:	f800283a 	ret
    4380:	80800517 	ldw	r2,20(r16)
    4384:	80000215 	stw	zero,8(r16)
    4388:	0085c83a 	sub	r2,zero,r2
    438c:	80800615 	stw	r2,24(r16)
    4390:	283ff51e 	bne	r5,zero,4368 <__swsetup_r+0x64>
    4394:	2080200c 	andi	r2,r4,128
    4398:	103ff326 	beq	r2,zero,4368 <__swsetup_r+0x64>
    439c:	00bfffc4 	movi	r2,-1
    43a0:	003ff206 	br	436c <__swsetup_r+0x68>
    43a4:	80800517 	ldw	r2,20(r16)
    43a8:	80800215 	stw	r2,8(r16)
    43ac:	003fed06 	br	4364 <__swsetup_r+0x60>
    43b0:	1809883a 	mov	r4,r3
    43b4:	0005ea40 	call	5ea4 <__sinit>
    43b8:	003fde06 	br	4334 <__swsetup_r+0x30>
    43bc:	20c0a00c 	andi	r3,r4,640
    43c0:	00808004 	movi	r2,512
    43c4:	18bfe026 	beq	r3,r2,4348 <__swsetup_r+0x44>
    43c8:	8809883a 	mov	r4,r17
    43cc:	800b883a 	mov	r5,r16
    43d0:	0006c1c0 	call	6c1c <__smakebuf_r>
    43d4:	8100030b 	ldhu	r4,12(r16)
    43d8:	81400417 	ldw	r5,16(r16)
    43dc:	003fda06 	br	4348 <__swsetup_r+0x44>
    43e0:	2080040c 	andi	r2,r4,16
    43e4:	103fed26 	beq	r2,zero,439c <__swsetup_r+0x98>
    43e8:	2080010c 	andi	r2,r4,4
    43ec:	10001226 	beq	r2,zero,4438 <__swsetup_r+0x134>
    43f0:	81400c17 	ldw	r5,48(r16)
    43f4:	28000526 	beq	r5,zero,440c <__swsetup_r+0x108>
    43f8:	80801004 	addi	r2,r16,64
    43fc:	28800226 	beq	r5,r2,4408 <__swsetup_r+0x104>
    4400:	8809883a 	mov	r4,r17
    4404:	00062280 	call	6228 <_free_r>
    4408:	80000c15 	stw	zero,48(r16)
    440c:	8080030b 	ldhu	r2,12(r16)
    4410:	81400417 	ldw	r5,16(r16)
    4414:	80000115 	stw	zero,4(r16)
    4418:	10bff6cc 	andi	r2,r2,65499
    441c:	8080030d 	sth	r2,12(r16)
    4420:	81400015 	stw	r5,0(r16)
    4424:	8080030b 	ldhu	r2,12(r16)
    4428:	10800214 	ori	r2,r2,8
    442c:	113fffcc 	andi	r4,r2,65535
    4430:	8080030d 	sth	r2,12(r16)
    4434:	003fc306 	br	4344 <__swsetup_r+0x40>
    4438:	81400417 	ldw	r5,16(r16)
    443c:	003ff906 	br	4424 <__swsetup_r+0x120>

00004440 <quorem>:
    4440:	28c00417 	ldw	r3,16(r5)
    4444:	20800417 	ldw	r2,16(r4)
    4448:	defff604 	addi	sp,sp,-40
    444c:	ddc00715 	stw	r23,28(sp)
    4450:	dd400515 	stw	r21,20(sp)
    4454:	dfc00915 	stw	ra,36(sp)
    4458:	df000815 	stw	fp,32(sp)
    445c:	dd800615 	stw	r22,24(sp)
    4460:	dd000415 	stw	r20,16(sp)
    4464:	dcc00315 	stw	r19,12(sp)
    4468:	dc800215 	stw	r18,8(sp)
    446c:	dc400115 	stw	r17,4(sp)
    4470:	dc000015 	stw	r16,0(sp)
    4474:	202f883a 	mov	r23,r4
    4478:	282b883a 	mov	r21,r5
    447c:	10c07416 	blt	r2,r3,4650 <quorem+0x210>
    4480:	1c7fffc4 	addi	r17,r3,-1
    4484:	8c45883a 	add	r2,r17,r17
    4488:	1085883a 	add	r2,r2,r2
    448c:	2c000504 	addi	r16,r5,20
    4490:	24c00504 	addi	r19,r4,20
    4494:	14ed883a 	add	r22,r2,r19
    4498:	80a5883a 	add	r18,r16,r2
    449c:	b7000017 	ldw	fp,0(r22)
    44a0:	91400017 	ldw	r5,0(r18)
    44a4:	e009883a 	mov	r4,fp
    44a8:	29400044 	addi	r5,r5,1
    44ac:	0001f940 	call	1f94 <__udivsi3>
    44b0:	1029883a 	mov	r20,r2
    44b4:	10003c1e 	bne	r2,zero,45a8 <quorem+0x168>
    44b8:	a80b883a 	mov	r5,r21
    44bc:	b809883a 	mov	r4,r23
    44c0:	00078100 	call	7810 <__mcmp>
    44c4:	10002b16 	blt	r2,zero,4574 <quorem+0x134>
    44c8:	a5000044 	addi	r20,r20,1
    44cc:	980f883a 	mov	r7,r19
    44d0:	0011883a 	mov	r8,zero
    44d4:	0009883a 	mov	r4,zero
    44d8:	81400017 	ldw	r5,0(r16)
    44dc:	38c00017 	ldw	r3,0(r7)
    44e0:	84000104 	addi	r16,r16,4
    44e4:	28bfffcc 	andi	r2,r5,65535
    44e8:	2085883a 	add	r2,r4,r2
    44ec:	11bfffcc 	andi	r6,r2,65535
    44f0:	193fffcc 	andi	r4,r3,65535
    44f4:	1004d43a 	srli	r2,r2,16
    44f8:	280ad43a 	srli	r5,r5,16
    44fc:	2189c83a 	sub	r4,r4,r6
    4500:	2209883a 	add	r4,r4,r8
    4504:	1806d43a 	srli	r3,r3,16
    4508:	288b883a 	add	r5,r5,r2
    450c:	200dd43a 	srai	r6,r4,16
    4510:	28bfffcc 	andi	r2,r5,65535
    4514:	1887c83a 	sub	r3,r3,r2
    4518:	1987883a 	add	r3,r3,r6
    451c:	3900000d 	sth	r4,0(r7)
    4520:	38c0008d 	sth	r3,2(r7)
    4524:	2808d43a 	srli	r4,r5,16
    4528:	39c00104 	addi	r7,r7,4
    452c:	1811d43a 	srai	r8,r3,16
    4530:	943fe92e 	bgeu	r18,r16,44d8 <quorem+0x98>
    4534:	8c45883a 	add	r2,r17,r17
    4538:	1085883a 	add	r2,r2,r2
    453c:	9885883a 	add	r2,r19,r2
    4540:	10c00017 	ldw	r3,0(r2)
    4544:	18000b1e 	bne	r3,zero,4574 <quorem+0x134>
    4548:	113fff04 	addi	r4,r2,-4
    454c:	9900082e 	bgeu	r19,r4,4570 <quorem+0x130>
    4550:	10bfff17 	ldw	r2,-4(r2)
    4554:	10000326 	beq	r2,zero,4564 <quorem+0x124>
    4558:	00000506 	br	4570 <quorem+0x130>
    455c:	20800017 	ldw	r2,0(r4)
    4560:	1000031e 	bne	r2,zero,4570 <quorem+0x130>
    4564:	213fff04 	addi	r4,r4,-4
    4568:	8c7fffc4 	addi	r17,r17,-1
    456c:	993ffb36 	bltu	r19,r4,455c <quorem+0x11c>
    4570:	bc400415 	stw	r17,16(r23)
    4574:	a005883a 	mov	r2,r20
    4578:	dfc00917 	ldw	ra,36(sp)
    457c:	df000817 	ldw	fp,32(sp)
    4580:	ddc00717 	ldw	r23,28(sp)
    4584:	dd800617 	ldw	r22,24(sp)
    4588:	dd400517 	ldw	r21,20(sp)
    458c:	dd000417 	ldw	r20,16(sp)
    4590:	dcc00317 	ldw	r19,12(sp)
    4594:	dc800217 	ldw	r18,8(sp)
    4598:	dc400117 	ldw	r17,4(sp)
    459c:	dc000017 	ldw	r16,0(sp)
    45a0:	dec00a04 	addi	sp,sp,40
    45a4:	f800283a 	ret
    45a8:	980f883a 	mov	r7,r19
    45ac:	8011883a 	mov	r8,r16
    45b0:	0013883a 	mov	r9,zero
    45b4:	000d883a 	mov	r6,zero
    45b8:	40c00017 	ldw	r3,0(r8)
    45bc:	39000017 	ldw	r4,0(r7)
    45c0:	42000104 	addi	r8,r8,4
    45c4:	18bfffcc 	andi	r2,r3,65535
    45c8:	a085383a 	mul	r2,r20,r2
    45cc:	1806d43a 	srli	r3,r3,16
    45d0:	217fffcc 	andi	r5,r4,65535
    45d4:	3085883a 	add	r2,r6,r2
    45d8:	11bfffcc 	andi	r6,r2,65535
    45dc:	a0c7383a 	mul	r3,r20,r3
    45e0:	1004d43a 	srli	r2,r2,16
    45e4:	298bc83a 	sub	r5,r5,r6
    45e8:	2a4b883a 	add	r5,r5,r9
    45ec:	2008d43a 	srli	r4,r4,16
    45f0:	1887883a 	add	r3,r3,r2
    45f4:	280dd43a 	srai	r6,r5,16
    45f8:	18bfffcc 	andi	r2,r3,65535
    45fc:	2089c83a 	sub	r4,r4,r2
    4600:	2189883a 	add	r4,r4,r6
    4604:	3900008d 	sth	r4,2(r7)
    4608:	3940000d 	sth	r5,0(r7)
    460c:	180cd43a 	srli	r6,r3,16
    4610:	39c00104 	addi	r7,r7,4
    4614:	2013d43a 	srai	r9,r4,16
    4618:	923fe72e 	bgeu	r18,r8,45b8 <quorem+0x178>
    461c:	e03fa61e 	bne	fp,zero,44b8 <quorem+0x78>
    4620:	b0ffff04 	addi	r3,r22,-4
    4624:	98c0082e 	bgeu	r19,r3,4648 <quorem+0x208>
    4628:	b0bfff17 	ldw	r2,-4(r22)
    462c:	10000326 	beq	r2,zero,463c <quorem+0x1fc>
    4630:	00000506 	br	4648 <quorem+0x208>
    4634:	18800017 	ldw	r2,0(r3)
    4638:	1000031e 	bne	r2,zero,4648 <quorem+0x208>
    463c:	18ffff04 	addi	r3,r3,-4
    4640:	8c7fffc4 	addi	r17,r17,-1
    4644:	98fffb36 	bltu	r19,r3,4634 <quorem+0x1f4>
    4648:	bc400415 	stw	r17,16(r23)
    464c:	003f9a06 	br	44b8 <quorem+0x78>
    4650:	0005883a 	mov	r2,zero
    4654:	003fc806 	br	4578 <quorem+0x138>

00004658 <_dtoa_r>:
    4658:	22001017 	ldw	r8,64(r4)
    465c:	deffda04 	addi	sp,sp,-152
    4660:	dd402115 	stw	r21,132(sp)
    4664:	dd002015 	stw	r20,128(sp)
    4668:	dc801e15 	stw	r18,120(sp)
    466c:	dc401d15 	stw	r17,116(sp)
    4670:	dfc02515 	stw	ra,148(sp)
    4674:	df002415 	stw	fp,144(sp)
    4678:	ddc02315 	stw	r23,140(sp)
    467c:	dd802215 	stw	r22,136(sp)
    4680:	dcc01f15 	stw	r19,124(sp)
    4684:	dc001c15 	stw	r16,112(sp)
    4688:	d9001615 	stw	r4,88(sp)
    468c:	3023883a 	mov	r17,r6
    4690:	2829883a 	mov	r20,r5
    4694:	d9c01715 	stw	r7,92(sp)
    4698:	dc802817 	ldw	r18,160(sp)
    469c:	302b883a 	mov	r21,r6
    46a0:	40000a26 	beq	r8,zero,46cc <_dtoa_r+0x74>
    46a4:	20801117 	ldw	r2,68(r4)
    46a8:	400b883a 	mov	r5,r8
    46ac:	40800115 	stw	r2,4(r8)
    46b0:	20c01117 	ldw	r3,68(r4)
    46b4:	00800044 	movi	r2,1
    46b8:	10c4983a 	sll	r2,r2,r3
    46bc:	40800215 	stw	r2,8(r8)
    46c0:	00076b40 	call	76b4 <_Bfree>
    46c4:	d8c01617 	ldw	r3,88(sp)
    46c8:	18001015 	stw	zero,64(r3)
    46cc:	8800a316 	blt	r17,zero,495c <_dtoa_r+0x304>
    46d0:	90000015 	stw	zero,0(r18)
    46d4:	a8dffc2c 	andhi	r3,r21,32752
    46d8:	009ffc34 	movhi	r2,32752
    46dc:	18809126 	beq	r3,r2,4924 <_dtoa_r+0x2cc>
    46e0:	000d883a 	mov	r6,zero
    46e4:	000f883a 	mov	r7,zero
    46e8:	a009883a 	mov	r4,r20
    46ec:	a80b883a 	mov	r5,r21
    46f0:	dd001215 	stw	r20,72(sp)
    46f4:	dd401315 	stw	r21,76(sp)
    46f8:	000ab4c0 	call	ab4c <__nedf2>
    46fc:	1000171e 	bne	r2,zero,475c <_dtoa_r+0x104>
    4700:	d9802717 	ldw	r6,156(sp)
    4704:	00800044 	movi	r2,1
    4708:	30800015 	stw	r2,0(r6)
    470c:	d8802917 	ldw	r2,164(sp)
    4710:	10029b26 	beq	r2,zero,5180 <_dtoa_r+0xb28>
    4714:	d9002917 	ldw	r4,164(sp)
    4718:	00800074 	movhi	r2,1
    471c:	10baad44 	addi	r2,r2,-5451
    4720:	10ffffc4 	addi	r3,r2,-1
    4724:	20800015 	stw	r2,0(r4)
    4728:	1805883a 	mov	r2,r3
    472c:	dfc02517 	ldw	ra,148(sp)
    4730:	df002417 	ldw	fp,144(sp)
    4734:	ddc02317 	ldw	r23,140(sp)
    4738:	dd802217 	ldw	r22,136(sp)
    473c:	dd402117 	ldw	r21,132(sp)
    4740:	dd002017 	ldw	r20,128(sp)
    4744:	dcc01f17 	ldw	r19,124(sp)
    4748:	dc801e17 	ldw	r18,120(sp)
    474c:	dc401d17 	ldw	r17,116(sp)
    4750:	dc001c17 	ldw	r16,112(sp)
    4754:	dec02604 	addi	sp,sp,152
    4758:	f800283a 	ret
    475c:	d9001617 	ldw	r4,88(sp)
    4760:	d9401217 	ldw	r5,72(sp)
    4764:	d8800104 	addi	r2,sp,4
    4768:	a80d883a 	mov	r6,r21
    476c:	d9c00204 	addi	r7,sp,8
    4770:	d8800015 	stw	r2,0(sp)
    4774:	0007cf00 	call	7cf0 <__d2b>
    4778:	d8800715 	stw	r2,28(sp)
    477c:	a804d53a 	srli	r2,r21,20
    4780:	1101ffcc 	andi	r4,r2,2047
    4784:	20008626 	beq	r4,zero,49a0 <_dtoa_r+0x348>
    4788:	d8c01217 	ldw	r3,72(sp)
    478c:	00800434 	movhi	r2,16
    4790:	10bfffc4 	addi	r2,r2,-1
    4794:	ddc00117 	ldw	r23,4(sp)
    4798:	a884703a 	and	r2,r21,r2
    479c:	1811883a 	mov	r8,r3
    47a0:	124ffc34 	orhi	r9,r2,16368
    47a4:	25bf0044 	addi	r22,r4,-1023
    47a8:	d8000815 	stw	zero,32(sp)
    47ac:	0005883a 	mov	r2,zero
    47b0:	00cffe34 	movhi	r3,16376
    47b4:	480b883a 	mov	r5,r9
    47b8:	4009883a 	mov	r4,r8
    47bc:	180f883a 	mov	r7,r3
    47c0:	100d883a 	mov	r6,r2
    47c4:	000a3b40 	call	a3b4 <__subdf3>
    47c8:	0218dbf4 	movhi	r8,25455
    47cc:	4210d844 	addi	r8,r8,17249
    47d0:	024ff4f4 	movhi	r9,16339
    47d4:	4a61e9c4 	addi	r9,r9,-30809
    47d8:	480f883a 	mov	r7,r9
    47dc:	400d883a 	mov	r6,r8
    47e0:	180b883a 	mov	r5,r3
    47e4:	1009883a 	mov	r4,r2
    47e8:	000a4a80 	call	a4a8 <__muldf3>
    47ec:	0222d874 	movhi	r8,35681
    47f0:	42322cc4 	addi	r8,r8,-14157
    47f4:	024ff1f4 	movhi	r9,16327
    47f8:	4a628a04 	addi	r9,r9,-30168
    47fc:	480f883a 	mov	r7,r9
    4800:	400d883a 	mov	r6,r8
    4804:	180b883a 	mov	r5,r3
    4808:	1009883a 	mov	r4,r2
    480c:	000a4340 	call	a434 <__adddf3>
    4810:	b009883a 	mov	r4,r22
    4814:	1021883a 	mov	r16,r2
    4818:	1823883a 	mov	r17,r3
    481c:	000ad6c0 	call	ad6c <__floatsidf>
    4820:	021427f4 	movhi	r8,20639
    4824:	421e7ec4 	addi	r8,r8,31227
    4828:	024ff4f4 	movhi	r9,16339
    482c:	4a5104c4 	addi	r9,r9,17427
    4830:	480f883a 	mov	r7,r9
    4834:	400d883a 	mov	r6,r8
    4838:	180b883a 	mov	r5,r3
    483c:	1009883a 	mov	r4,r2
    4840:	000a4a80 	call	a4a8 <__muldf3>
    4844:	180f883a 	mov	r7,r3
    4848:	880b883a 	mov	r5,r17
    484c:	100d883a 	mov	r6,r2
    4850:	8009883a 	mov	r4,r16
    4854:	000a4340 	call	a434 <__adddf3>
    4858:	1009883a 	mov	r4,r2
    485c:	180b883a 	mov	r5,r3
    4860:	1021883a 	mov	r16,r2
    4864:	1823883a 	mov	r17,r3
    4868:	000ae640 	call	ae64 <__fixdfsi>
    486c:	000d883a 	mov	r6,zero
    4870:	000f883a 	mov	r7,zero
    4874:	8009883a 	mov	r4,r16
    4878:	880b883a 	mov	r5,r17
    487c:	d8800d15 	stw	r2,52(sp)
    4880:	000ace40 	call	ace4 <__ltdf2>
    4884:	10031716 	blt	r2,zero,54e4 <_dtoa_r+0xe8c>
    4888:	d8c00d17 	ldw	r3,52(sp)
    488c:	00800584 	movi	r2,22
    4890:	10c1482e 	bgeu	r2,r3,4db4 <_dtoa_r+0x75c>
    4894:	01000044 	movi	r4,1
    4898:	d9000c15 	stw	r4,48(sp)
    489c:	bd85c83a 	sub	r2,r23,r22
    48a0:	11bfffc4 	addi	r6,r2,-1
    48a4:	30030b16 	blt	r6,zero,54d4 <_dtoa_r+0xe7c>
    48a8:	d9800a15 	stw	r6,40(sp)
    48ac:	d8001115 	stw	zero,68(sp)
    48b0:	d8c00d17 	ldw	r3,52(sp)
    48b4:	1802ff16 	blt	r3,zero,54b4 <_dtoa_r+0xe5c>
    48b8:	d9000a17 	ldw	r4,40(sp)
    48bc:	d8c00915 	stw	r3,36(sp)
    48c0:	d8001015 	stw	zero,64(sp)
    48c4:	20c9883a 	add	r4,r4,r3
    48c8:	d9000a15 	stw	r4,40(sp)
    48cc:	d9001717 	ldw	r4,92(sp)
    48d0:	00800244 	movi	r2,9
    48d4:	11004636 	bltu	r2,r4,49f0 <_dtoa_r+0x398>
    48d8:	00800144 	movi	r2,5
    48dc:	11020416 	blt	r2,r4,50f0 <_dtoa_r+0xa98>
    48e0:	04400044 	movi	r17,1
    48e4:	d8c01717 	ldw	r3,92(sp)
    48e8:	00800144 	movi	r2,5
    48ec:	10c1ed36 	bltu	r2,r3,50a4 <_dtoa_r+0xa4c>
    48f0:	18c5883a 	add	r2,r3,r3
    48f4:	1085883a 	add	r2,r2,r2
    48f8:	00c00034 	movhi	r3,0
    48fc:	18d24304 	addi	r3,r3,18700
    4900:	10c5883a 	add	r2,r2,r3
    4904:	11000017 	ldw	r4,0(r2)
    4908:	2000683a 	jmp	r4
    490c:	000049f8 	rdprs	zero,zero,295
    4910:	000049f8 	rdprs	zero,zero,295
    4914:	000053f8 	rdprs	zero,zero,335
    4918:	000053d0 	cmplti	zero,zero,335
    491c:	00005414 	movui	zero,336
    4920:	00005420 	cmpeqi	zero,zero,336
    4924:	d9002717 	ldw	r4,156(sp)
    4928:	0089c3c4 	movi	r2,9999
    492c:	20800015 	stw	r2,0(r4)
    4930:	a0001026 	beq	r20,zero,4974 <_dtoa_r+0x31c>
    4934:	00c00074 	movhi	r3,1
    4938:	18fab904 	addi	r3,r3,-5404
    493c:	d9802917 	ldw	r6,164(sp)
    4940:	303f7926 	beq	r6,zero,4728 <_dtoa_r+0xd0>
    4944:	188000c7 	ldb	r2,3(r3)
    4948:	190000c4 	addi	r4,r3,3
    494c:	1000101e 	bne	r2,zero,4990 <_dtoa_r+0x338>
    4950:	d8802917 	ldw	r2,164(sp)
    4954:	11000015 	stw	r4,0(r2)
    4958:	003f7306 	br	4728 <_dtoa_r+0xd0>
    495c:	00a00034 	movhi	r2,32768
    4960:	10bfffc4 	addi	r2,r2,-1
    4964:	00c00044 	movi	r3,1
    4968:	88aa703a 	and	r21,r17,r2
    496c:	90c00015 	stw	r3,0(r18)
    4970:	003f5806 	br	46d4 <_dtoa_r+0x7c>
    4974:	00800434 	movhi	r2,16
    4978:	10bfffc4 	addi	r2,r2,-1
    497c:	a884703a 	and	r2,r21,r2
    4980:	103fec1e 	bne	r2,zero,4934 <_dtoa_r+0x2dc>
    4984:	00c00074 	movhi	r3,1
    4988:	18fab604 	addi	r3,r3,-5416
    498c:	003feb06 	br	493c <_dtoa_r+0x2e4>
    4990:	d8802917 	ldw	r2,164(sp)
    4994:	19000204 	addi	r4,r3,8
    4998:	11000015 	stw	r4,0(r2)
    499c:	003f6206 	br	4728 <_dtoa_r+0xd0>
    49a0:	ddc00117 	ldw	r23,4(sp)
    49a4:	d8800217 	ldw	r2,8(sp)
    49a8:	01000804 	movi	r4,32
    49ac:	b8c10c84 	addi	r3,r23,1074
    49b0:	18a3883a 	add	r17,r3,r2
    49b4:	2441b80e 	bge	r4,r17,5098 <_dtoa_r+0xa40>
    49b8:	00c01004 	movi	r3,64
    49bc:	1c47c83a 	sub	r3,r3,r17
    49c0:	88bff804 	addi	r2,r17,-32
    49c4:	a8c6983a 	sll	r3,r21,r3
    49c8:	a084d83a 	srl	r2,r20,r2
    49cc:	1888b03a 	or	r4,r3,r2
    49d0:	000af3c0 	call	af3c <__floatunsidf>
    49d4:	1011883a 	mov	r8,r2
    49d8:	00bf8434 	movhi	r2,65040
    49dc:	01000044 	movi	r4,1
    49e0:	10d3883a 	add	r9,r2,r3
    49e4:	8dbef344 	addi	r22,r17,-1075
    49e8:	d9000815 	stw	r4,32(sp)
    49ec:	003f6f06 	br	47ac <_dtoa_r+0x154>
    49f0:	d8001715 	stw	zero,92(sp)
    49f4:	04400044 	movi	r17,1
    49f8:	00bfffc4 	movi	r2,-1
    49fc:	00c00044 	movi	r3,1
    4a00:	d8800e15 	stw	r2,56(sp)
    4a04:	d8002615 	stw	zero,152(sp)
    4a08:	d8800f15 	stw	r2,60(sp)
    4a0c:	d8c00b15 	stw	r3,44(sp)
    4a10:	1021883a 	mov	r16,r2
    4a14:	d8801617 	ldw	r2,88(sp)
    4a18:	10001115 	stw	zero,68(r2)
    4a1c:	d8801617 	ldw	r2,88(sp)
    4a20:	11401117 	ldw	r5,68(r2)
    4a24:	1009883a 	mov	r4,r2
    4a28:	0007c340 	call	7c34 <_Balloc>
    4a2c:	d8c01617 	ldw	r3,88(sp)
    4a30:	d8800515 	stw	r2,20(sp)
    4a34:	18801015 	stw	r2,64(r3)
    4a38:	00800384 	movi	r2,14
    4a3c:	14006836 	bltu	r2,r16,4be0 <_dtoa_r+0x588>
    4a40:	8805003a 	cmpeq	r2,r17,zero
    4a44:	1000661e 	bne	r2,zero,4be0 <_dtoa_r+0x588>
    4a48:	d9000d17 	ldw	r4,52(sp)
    4a4c:	0102300e 	bge	zero,r4,5310 <_dtoa_r+0xcb8>
    4a50:	208003cc 	andi	r2,r4,15
    4a54:	100490fa 	slli	r2,r2,3
    4a58:	2025d13a 	srai	r18,r4,4
    4a5c:	00c00074 	movhi	r3,1
    4a60:	18facb04 	addi	r3,r3,-5332
    4a64:	10c5883a 	add	r2,r2,r3
    4a68:	90c0040c 	andi	r3,r18,16
    4a6c:	14000017 	ldw	r16,0(r2)
    4a70:	14400117 	ldw	r17,4(r2)
    4a74:	18036a1e 	bne	r3,zero,5820 <_dtoa_r+0x11c8>
    4a78:	05800084 	movi	r22,2
    4a7c:	90001026 	beq	r18,zero,4ac0 <_dtoa_r+0x468>
    4a80:	04c00074 	movhi	r19,1
    4a84:	9cfafd04 	addi	r19,r19,-5132
    4a88:	9080004c 	andi	r2,r18,1
    4a8c:	1005003a 	cmpeq	r2,r2,zero
    4a90:	1000081e 	bne	r2,zero,4ab4 <_dtoa_r+0x45c>
    4a94:	99800017 	ldw	r6,0(r19)
    4a98:	99c00117 	ldw	r7,4(r19)
    4a9c:	880b883a 	mov	r5,r17
    4aa0:	8009883a 	mov	r4,r16
    4aa4:	000a4a80 	call	a4a8 <__muldf3>
    4aa8:	1021883a 	mov	r16,r2
    4aac:	b5800044 	addi	r22,r22,1
    4ab0:	1823883a 	mov	r17,r3
    4ab4:	9025d07a 	srai	r18,r18,1
    4ab8:	9cc00204 	addi	r19,r19,8
    4abc:	903ff21e 	bne	r18,zero,4a88 <_dtoa_r+0x430>
    4ac0:	a80b883a 	mov	r5,r21
    4ac4:	a009883a 	mov	r4,r20
    4ac8:	880f883a 	mov	r7,r17
    4acc:	800d883a 	mov	r6,r16
    4ad0:	000a86c0 	call	a86c <__divdf3>
    4ad4:	1029883a 	mov	r20,r2
    4ad8:	182b883a 	mov	r21,r3
    4adc:	d8c00c17 	ldw	r3,48(sp)
    4ae0:	1805003a 	cmpeq	r2,r3,zero
    4ae4:	1000081e 	bne	r2,zero,4b08 <_dtoa_r+0x4b0>
    4ae8:	0005883a 	mov	r2,zero
    4aec:	00cffc34 	movhi	r3,16368
    4af0:	180f883a 	mov	r7,r3
    4af4:	a009883a 	mov	r4,r20
    4af8:	a80b883a 	mov	r5,r21
    4afc:	100d883a 	mov	r6,r2
    4b00:	000ace40 	call	ace4 <__ltdf2>
    4b04:	1003fe16 	blt	r2,zero,5b00 <_dtoa_r+0x14a8>
    4b08:	b009883a 	mov	r4,r22
    4b0c:	000ad6c0 	call	ad6c <__floatsidf>
    4b10:	180b883a 	mov	r5,r3
    4b14:	1009883a 	mov	r4,r2
    4b18:	a00d883a 	mov	r6,r20
    4b1c:	a80f883a 	mov	r7,r21
    4b20:	000a4a80 	call	a4a8 <__muldf3>
    4b24:	0011883a 	mov	r8,zero
    4b28:	02500734 	movhi	r9,16412
    4b2c:	1009883a 	mov	r4,r2
    4b30:	180b883a 	mov	r5,r3
    4b34:	480f883a 	mov	r7,r9
    4b38:	400d883a 	mov	r6,r8
    4b3c:	000a4340 	call	a434 <__adddf3>
    4b40:	d9000f17 	ldw	r4,60(sp)
    4b44:	102d883a 	mov	r22,r2
    4b48:	00bf3034 	movhi	r2,64704
    4b4c:	18b9883a 	add	fp,r3,r2
    4b50:	e02f883a 	mov	r23,fp
    4b54:	20028f1e 	bne	r4,zero,5594 <_dtoa_r+0xf3c>
    4b58:	0005883a 	mov	r2,zero
    4b5c:	00d00534 	movhi	r3,16404
    4b60:	a009883a 	mov	r4,r20
    4b64:	a80b883a 	mov	r5,r21
    4b68:	180f883a 	mov	r7,r3
    4b6c:	100d883a 	mov	r6,r2
    4b70:	000a3b40 	call	a3b4 <__subdf3>
    4b74:	1009883a 	mov	r4,r2
    4b78:	e00f883a 	mov	r7,fp
    4b7c:	180b883a 	mov	r5,r3
    4b80:	b00d883a 	mov	r6,r22
    4b84:	1025883a 	mov	r18,r2
    4b88:	1827883a 	mov	r19,r3
    4b8c:	000abd40 	call	abd4 <__gtdf2>
    4b90:	00834f16 	blt	zero,r2,58d0 <_dtoa_r+0x1278>
    4b94:	e0e0003c 	xorhi	r3,fp,32768
    4b98:	9009883a 	mov	r4,r18
    4b9c:	980b883a 	mov	r5,r19
    4ba0:	180f883a 	mov	r7,r3
    4ba4:	b00d883a 	mov	r6,r22
    4ba8:	000ace40 	call	ace4 <__ltdf2>
    4bac:	1000080e 	bge	r2,zero,4bd0 <_dtoa_r+0x578>
    4bb0:	0027883a 	mov	r19,zero
    4bb4:	0025883a 	mov	r18,zero
    4bb8:	d8802617 	ldw	r2,152(sp)
    4bbc:	df000517 	ldw	fp,20(sp)
    4bc0:	d8000615 	stw	zero,24(sp)
    4bc4:	0084303a 	nor	r2,zero,r2
    4bc8:	d8800d15 	stw	r2,52(sp)
    4bcc:	00019b06 	br	523c <_dtoa_r+0xbe4>
    4bd0:	d9801217 	ldw	r6,72(sp)
    4bd4:	d8801317 	ldw	r2,76(sp)
    4bd8:	3029883a 	mov	r20,r6
    4bdc:	102b883a 	mov	r21,r2
    4be0:	d8c00217 	ldw	r3,8(sp)
    4be4:	18008516 	blt	r3,zero,4dfc <_dtoa_r+0x7a4>
    4be8:	d9000d17 	ldw	r4,52(sp)
    4bec:	00800384 	movi	r2,14
    4bf0:	11008216 	blt	r2,r4,4dfc <_dtoa_r+0x7a4>
    4bf4:	200490fa 	slli	r2,r4,3
    4bf8:	d9802617 	ldw	r6,152(sp)
    4bfc:	00c00074 	movhi	r3,1
    4c00:	18facb04 	addi	r3,r3,-5332
    4c04:	10c5883a 	add	r2,r2,r3
    4c08:	14800017 	ldw	r18,0(r2)
    4c0c:	14c00117 	ldw	r19,4(r2)
    4c10:	30031e16 	blt	r6,zero,588c <_dtoa_r+0x1234>
    4c14:	d9000517 	ldw	r4,20(sp)
    4c18:	d8c00f17 	ldw	r3,60(sp)
    4c1c:	a823883a 	mov	r17,r21
    4c20:	a021883a 	mov	r16,r20
    4c24:	192b883a 	add	r21,r3,r4
    4c28:	2039883a 	mov	fp,r4
    4c2c:	00000f06 	br	4c6c <_dtoa_r+0x614>
    4c30:	0005883a 	mov	r2,zero
    4c34:	00d00934 	movhi	r3,16420
    4c38:	5009883a 	mov	r4,r10
    4c3c:	580b883a 	mov	r5,r11
    4c40:	180f883a 	mov	r7,r3
    4c44:	100d883a 	mov	r6,r2
    4c48:	000a4a80 	call	a4a8 <__muldf3>
    4c4c:	180b883a 	mov	r5,r3
    4c50:	000d883a 	mov	r6,zero
    4c54:	000f883a 	mov	r7,zero
    4c58:	1009883a 	mov	r4,r2
    4c5c:	1021883a 	mov	r16,r2
    4c60:	1823883a 	mov	r17,r3
    4c64:	000ab4c0 	call	ab4c <__nedf2>
    4c68:	10004526 	beq	r2,zero,4d80 <_dtoa_r+0x728>
    4c6c:	900d883a 	mov	r6,r18
    4c70:	980f883a 	mov	r7,r19
    4c74:	8009883a 	mov	r4,r16
    4c78:	880b883a 	mov	r5,r17
    4c7c:	000a86c0 	call	a86c <__divdf3>
    4c80:	180b883a 	mov	r5,r3
    4c84:	1009883a 	mov	r4,r2
    4c88:	000ae640 	call	ae64 <__fixdfsi>
    4c8c:	1009883a 	mov	r4,r2
    4c90:	1029883a 	mov	r20,r2
    4c94:	000ad6c0 	call	ad6c <__floatsidf>
    4c98:	180f883a 	mov	r7,r3
    4c9c:	9009883a 	mov	r4,r18
    4ca0:	980b883a 	mov	r5,r19
    4ca4:	100d883a 	mov	r6,r2
    4ca8:	000a4a80 	call	a4a8 <__muldf3>
    4cac:	180f883a 	mov	r7,r3
    4cb0:	880b883a 	mov	r5,r17
    4cb4:	8009883a 	mov	r4,r16
    4cb8:	100d883a 	mov	r6,r2
    4cbc:	000a3b40 	call	a3b4 <__subdf3>
    4cc0:	1015883a 	mov	r10,r2
    4cc4:	a0800c04 	addi	r2,r20,48
    4cc8:	e0800005 	stb	r2,0(fp)
    4ccc:	e7000044 	addi	fp,fp,1
    4cd0:	1817883a 	mov	r11,r3
    4cd4:	e57fd61e 	bne	fp,r21,4c30 <_dtoa_r+0x5d8>
    4cd8:	500d883a 	mov	r6,r10
    4cdc:	180f883a 	mov	r7,r3
    4ce0:	5009883a 	mov	r4,r10
    4ce4:	180b883a 	mov	r5,r3
    4ce8:	000a4340 	call	a434 <__adddf3>
    4cec:	100d883a 	mov	r6,r2
    4cf0:	9009883a 	mov	r4,r18
    4cf4:	980b883a 	mov	r5,r19
    4cf8:	180f883a 	mov	r7,r3
    4cfc:	1021883a 	mov	r16,r2
    4d00:	1823883a 	mov	r17,r3
    4d04:	000ace40 	call	ace4 <__ltdf2>
    4d08:	10000816 	blt	r2,zero,4d2c <_dtoa_r+0x6d4>
    4d0c:	980b883a 	mov	r5,r19
    4d10:	800d883a 	mov	r6,r16
    4d14:	880f883a 	mov	r7,r17
    4d18:	9009883a 	mov	r4,r18
    4d1c:	000aac40 	call	aac4 <__eqdf2>
    4d20:	1000171e 	bne	r2,zero,4d80 <_dtoa_r+0x728>
    4d24:	a080004c 	andi	r2,r20,1
    4d28:	10001526 	beq	r2,zero,4d80 <_dtoa_r+0x728>
    4d2c:	d8800d17 	ldw	r2,52(sp)
    4d30:	d8800415 	stw	r2,16(sp)
    4d34:	e009883a 	mov	r4,fp
    4d38:	213fffc4 	addi	r4,r4,-1
    4d3c:	20c00007 	ldb	r3,0(r4)
    4d40:	00800e44 	movi	r2,57
    4d44:	1880081e 	bne	r3,r2,4d68 <_dtoa_r+0x710>
    4d48:	d8800517 	ldw	r2,20(sp)
    4d4c:	113ffa1e 	bne	r2,r4,4d38 <_dtoa_r+0x6e0>
    4d50:	d8c00417 	ldw	r3,16(sp)
    4d54:	d9800517 	ldw	r6,20(sp)
    4d58:	00800c04 	movi	r2,48
    4d5c:	18c00044 	addi	r3,r3,1
    4d60:	d8c00415 	stw	r3,16(sp)
    4d64:	30800005 	stb	r2,0(r6)
    4d68:	20800003 	ldbu	r2,0(r4)
    4d6c:	d8c00417 	ldw	r3,16(sp)
    4d70:	27000044 	addi	fp,r4,1
    4d74:	10800044 	addi	r2,r2,1
    4d78:	d8c00d15 	stw	r3,52(sp)
    4d7c:	20800005 	stb	r2,0(r4)
    4d80:	d9001617 	ldw	r4,88(sp)
    4d84:	d9400717 	ldw	r5,28(sp)
    4d88:	00076b40 	call	76b4 <_Bfree>
    4d8c:	e0000005 	stb	zero,0(fp)
    4d90:	d9800d17 	ldw	r6,52(sp)
    4d94:	d8c02717 	ldw	r3,156(sp)
    4d98:	d9002917 	ldw	r4,164(sp)
    4d9c:	30800044 	addi	r2,r6,1
    4da0:	18800015 	stw	r2,0(r3)
    4da4:	20029c26 	beq	r4,zero,5818 <_dtoa_r+0x11c0>
    4da8:	d8c00517 	ldw	r3,20(sp)
    4dac:	27000015 	stw	fp,0(r4)
    4db0:	003e5d06 	br	4728 <_dtoa_r+0xd0>
    4db4:	d9800d17 	ldw	r6,52(sp)
    4db8:	00c00074 	movhi	r3,1
    4dbc:	18facb04 	addi	r3,r3,-5332
    4dc0:	d9001217 	ldw	r4,72(sp)
    4dc4:	300490fa 	slli	r2,r6,3
    4dc8:	d9401317 	ldw	r5,76(sp)
    4dcc:	10c5883a 	add	r2,r2,r3
    4dd0:	12000017 	ldw	r8,0(r2)
    4dd4:	12400117 	ldw	r9,4(r2)
    4dd8:	400d883a 	mov	r6,r8
    4ddc:	480f883a 	mov	r7,r9
    4de0:	000ace40 	call	ace4 <__ltdf2>
    4de4:	1000030e 	bge	r2,zero,4df4 <_dtoa_r+0x79c>
    4de8:	d8800d17 	ldw	r2,52(sp)
    4dec:	10bfffc4 	addi	r2,r2,-1
    4df0:	d8800d15 	stw	r2,52(sp)
    4df4:	d8000c15 	stw	zero,48(sp)
    4df8:	003ea806 	br	489c <_dtoa_r+0x244>
    4dfc:	d9000b17 	ldw	r4,44(sp)
    4e00:	202cc03a 	cmpne	r22,r4,zero
    4e04:	b000c71e 	bne	r22,zero,5124 <_dtoa_r+0xacc>
    4e08:	dc001117 	ldw	r16,68(sp)
    4e0c:	dc801017 	ldw	r18,64(sp)
    4e10:	0027883a 	mov	r19,zero
    4e14:	04000b0e 	bge	zero,r16,4e44 <_dtoa_r+0x7ec>
    4e18:	d8c00a17 	ldw	r3,40(sp)
    4e1c:	00c0090e 	bge	zero,r3,4e44 <_dtoa_r+0x7ec>
    4e20:	8005883a 	mov	r2,r16
    4e24:	1c011316 	blt	r3,r16,5274 <_dtoa_r+0xc1c>
    4e28:	d9000a17 	ldw	r4,40(sp)
    4e2c:	d9801117 	ldw	r6,68(sp)
    4e30:	80a1c83a 	sub	r16,r16,r2
    4e34:	2089c83a 	sub	r4,r4,r2
    4e38:	308dc83a 	sub	r6,r6,r2
    4e3c:	d9000a15 	stw	r4,40(sp)
    4e40:	d9801115 	stw	r6,68(sp)
    4e44:	d8801017 	ldw	r2,64(sp)
    4e48:	0080150e 	bge	zero,r2,4ea0 <_dtoa_r+0x848>
    4e4c:	d8c00b17 	ldw	r3,44(sp)
    4e50:	1805003a 	cmpeq	r2,r3,zero
    4e54:	1001c91e 	bne	r2,zero,557c <_dtoa_r+0xf24>
    4e58:	04800e0e 	bge	zero,r18,4e94 <_dtoa_r+0x83c>
    4e5c:	d9001617 	ldw	r4,88(sp)
    4e60:	980b883a 	mov	r5,r19
    4e64:	900d883a 	mov	r6,r18
    4e68:	00084680 	call	8468 <__pow5mult>
    4e6c:	d9001617 	ldw	r4,88(sp)
    4e70:	d9800717 	ldw	r6,28(sp)
    4e74:	100b883a 	mov	r5,r2
    4e78:	1027883a 	mov	r19,r2
    4e7c:	00081440 	call	8144 <__multiply>
    4e80:	d9001617 	ldw	r4,88(sp)
    4e84:	d9400717 	ldw	r5,28(sp)
    4e88:	1023883a 	mov	r17,r2
    4e8c:	00076b40 	call	76b4 <_Bfree>
    4e90:	dc400715 	stw	r17,28(sp)
    4e94:	d9001017 	ldw	r4,64(sp)
    4e98:	248dc83a 	sub	r6,r4,r18
    4e9c:	30010e1e 	bne	r6,zero,52d8 <_dtoa_r+0xc80>
    4ea0:	d9001617 	ldw	r4,88(sp)
    4ea4:	04400044 	movi	r17,1
    4ea8:	880b883a 	mov	r5,r17
    4eac:	000832c0 	call	832c <__i2b>
    4eb0:	d9800917 	ldw	r6,36(sp)
    4eb4:	1025883a 	mov	r18,r2
    4eb8:	0180040e 	bge	zero,r6,4ecc <_dtoa_r+0x874>
    4ebc:	d9001617 	ldw	r4,88(sp)
    4ec0:	100b883a 	mov	r5,r2
    4ec4:	00084680 	call	8468 <__pow5mult>
    4ec8:	1025883a 	mov	r18,r2
    4ecc:	d8801717 	ldw	r2,92(sp)
    4ed0:	8880f30e 	bge	r17,r2,52a0 <_dtoa_r+0xc48>
    4ed4:	0023883a 	mov	r17,zero
    4ed8:	d9800917 	ldw	r6,36(sp)
    4edc:	30019e1e 	bne	r6,zero,5558 <_dtoa_r+0xf00>
    4ee0:	00c00044 	movi	r3,1
    4ee4:	d9000a17 	ldw	r4,40(sp)
    4ee8:	20c5883a 	add	r2,r4,r3
    4eec:	10c007cc 	andi	r3,r2,31
    4ef0:	1800841e 	bne	r3,zero,5104 <_dtoa_r+0xaac>
    4ef4:	00800704 	movi	r2,28
    4ef8:	d9000a17 	ldw	r4,40(sp)
    4efc:	d9801117 	ldw	r6,68(sp)
    4f00:	80a1883a 	add	r16,r16,r2
    4f04:	2089883a 	add	r4,r4,r2
    4f08:	308d883a 	add	r6,r6,r2
    4f0c:	d9000a15 	stw	r4,40(sp)
    4f10:	d9801115 	stw	r6,68(sp)
    4f14:	d8801117 	ldw	r2,68(sp)
    4f18:	0080050e 	bge	zero,r2,4f30 <_dtoa_r+0x8d8>
    4f1c:	d9400717 	ldw	r5,28(sp)
    4f20:	d9001617 	ldw	r4,88(sp)
    4f24:	100d883a 	mov	r6,r2
    4f28:	0007ff80 	call	7ff8 <__lshift>
    4f2c:	d8800715 	stw	r2,28(sp)
    4f30:	d8c00a17 	ldw	r3,40(sp)
    4f34:	00c0050e 	bge	zero,r3,4f4c <_dtoa_r+0x8f4>
    4f38:	d9001617 	ldw	r4,88(sp)
    4f3c:	900b883a 	mov	r5,r18
    4f40:	180d883a 	mov	r6,r3
    4f44:	0007ff80 	call	7ff8 <__lshift>
    4f48:	1025883a 	mov	r18,r2
    4f4c:	d9000c17 	ldw	r4,48(sp)
    4f50:	2005003a 	cmpeq	r2,r4,zero
    4f54:	10016f26 	beq	r2,zero,5514 <_dtoa_r+0xebc>
    4f58:	d9000f17 	ldw	r4,60(sp)
    4f5c:	0102170e 	bge	zero,r4,57bc <_dtoa_r+0x1164>
    4f60:	d9800b17 	ldw	r6,44(sp)
    4f64:	3005003a 	cmpeq	r2,r6,zero
    4f68:	1000881e 	bne	r2,zero,518c <_dtoa_r+0xb34>
    4f6c:	0400050e 	bge	zero,r16,4f84 <_dtoa_r+0x92c>
    4f70:	d9001617 	ldw	r4,88(sp)
    4f74:	980b883a 	mov	r5,r19
    4f78:	800d883a 	mov	r6,r16
    4f7c:	0007ff80 	call	7ff8 <__lshift>
    4f80:	1027883a 	mov	r19,r2
    4f84:	8804c03a 	cmpne	r2,r17,zero
    4f88:	1002541e 	bne	r2,zero,58dc <_dtoa_r+0x1284>
    4f8c:	980b883a 	mov	r5,r19
    4f90:	dd800517 	ldw	r22,20(sp)
    4f94:	dcc00615 	stw	r19,24(sp)
    4f98:	a700004c 	andi	fp,r20,1
    4f9c:	2827883a 	mov	r19,r5
    4fa0:	d9000717 	ldw	r4,28(sp)
    4fa4:	900b883a 	mov	r5,r18
    4fa8:	00044400 	call	4440 <quorem>
    4fac:	d9000717 	ldw	r4,28(sp)
    4fb0:	d9400617 	ldw	r5,24(sp)
    4fb4:	1023883a 	mov	r17,r2
    4fb8:	8dc00c04 	addi	r23,r17,48
    4fbc:	00078100 	call	7810 <__mcmp>
    4fc0:	d9001617 	ldw	r4,88(sp)
    4fc4:	900b883a 	mov	r5,r18
    4fc8:	980d883a 	mov	r6,r19
    4fcc:	1029883a 	mov	r20,r2
    4fd0:	0007e6c0 	call	7e6c <__mdiff>
    4fd4:	102b883a 	mov	r21,r2
    4fd8:	10800317 	ldw	r2,12(r2)
    4fdc:	1001281e 	bne	r2,zero,5480 <_dtoa_r+0xe28>
    4fe0:	d9000717 	ldw	r4,28(sp)
    4fe4:	a80b883a 	mov	r5,r21
    4fe8:	00078100 	call	7810 <__mcmp>
    4fec:	d9001617 	ldw	r4,88(sp)
    4ff0:	1021883a 	mov	r16,r2
    4ff4:	a80b883a 	mov	r5,r21
    4ff8:	00076b40 	call	76b4 <_Bfree>
    4ffc:	8000041e 	bne	r16,zero,5010 <_dtoa_r+0x9b8>
    5000:	d8801717 	ldw	r2,92(sp)
    5004:	1000021e 	bne	r2,zero,5010 <_dtoa_r+0x9b8>
    5008:	e004c03a 	cmpne	r2,fp,zero
    500c:	10011726 	beq	r2,zero,546c <_dtoa_r+0xe14>
    5010:	a0010616 	blt	r20,zero,542c <_dtoa_r+0xdd4>
    5014:	a000041e 	bne	r20,zero,5028 <_dtoa_r+0x9d0>
    5018:	d8c01717 	ldw	r3,92(sp)
    501c:	1800021e 	bne	r3,zero,5028 <_dtoa_r+0x9d0>
    5020:	e004c03a 	cmpne	r2,fp,zero
    5024:	10010126 	beq	r2,zero,542c <_dtoa_r+0xdd4>
    5028:	04023d16 	blt	zero,r16,5920 <_dtoa_r+0x12c8>
    502c:	b5c00005 	stb	r23,0(r22)
    5030:	d9800517 	ldw	r6,20(sp)
    5034:	d9000f17 	ldw	r4,60(sp)
    5038:	b5800044 	addi	r22,r22,1
    503c:	3105883a 	add	r2,r6,r4
    5040:	b0806526 	beq	r22,r2,51d8 <_dtoa_r+0xb80>
    5044:	d9400717 	ldw	r5,28(sp)
    5048:	d9001617 	ldw	r4,88(sp)
    504c:	01800284 	movi	r6,10
    5050:	000f883a 	mov	r7,zero
    5054:	00083680 	call	8368 <__multadd>
    5058:	d8800715 	stw	r2,28(sp)
    505c:	d8800617 	ldw	r2,24(sp)
    5060:	14c10c26 	beq	r2,r19,5494 <_dtoa_r+0xe3c>
    5064:	d9400617 	ldw	r5,24(sp)
    5068:	d9001617 	ldw	r4,88(sp)
    506c:	01800284 	movi	r6,10
    5070:	000f883a 	mov	r7,zero
    5074:	00083680 	call	8368 <__multadd>
    5078:	d9001617 	ldw	r4,88(sp)
    507c:	980b883a 	mov	r5,r19
    5080:	01800284 	movi	r6,10
    5084:	000f883a 	mov	r7,zero
    5088:	d8800615 	stw	r2,24(sp)
    508c:	00083680 	call	8368 <__multadd>
    5090:	1027883a 	mov	r19,r2
    5094:	003fc206 	br	4fa0 <_dtoa_r+0x948>
    5098:	2445c83a 	sub	r2,r4,r17
    509c:	a088983a 	sll	r4,r20,r2
    50a0:	003e4b06 	br	49d0 <_dtoa_r+0x378>
    50a4:	01bfffc4 	movi	r6,-1
    50a8:	00800044 	movi	r2,1
    50ac:	d9800e15 	stw	r6,56(sp)
    50b0:	d9800f15 	stw	r6,60(sp)
    50b4:	d8800b15 	stw	r2,44(sp)
    50b8:	d8c01617 	ldw	r3,88(sp)
    50bc:	008005c4 	movi	r2,23
    50c0:	18001115 	stw	zero,68(r3)
    50c4:	1580082e 	bgeu	r2,r22,50e8 <_dtoa_r+0xa90>
    50c8:	00c00104 	movi	r3,4
    50cc:	0009883a 	mov	r4,zero
    50d0:	18c7883a 	add	r3,r3,r3
    50d4:	18800504 	addi	r2,r3,20
    50d8:	21000044 	addi	r4,r4,1
    50dc:	b0bffc2e 	bgeu	r22,r2,50d0 <_dtoa_r+0xa78>
    50e0:	d9801617 	ldw	r6,88(sp)
    50e4:	31001115 	stw	r4,68(r6)
    50e8:	dc000f17 	ldw	r16,60(sp)
    50ec:	003e4b06 	br	4a1c <_dtoa_r+0x3c4>
    50f0:	d9801717 	ldw	r6,92(sp)
    50f4:	0023883a 	mov	r17,zero
    50f8:	31bfff04 	addi	r6,r6,-4
    50fc:	d9801715 	stw	r6,92(sp)
    5100:	003df806 	br	48e4 <_dtoa_r+0x28c>
    5104:	00800804 	movi	r2,32
    5108:	10c9c83a 	sub	r4,r2,r3
    510c:	00c00104 	movi	r3,4
    5110:	19005a16 	blt	r3,r4,527c <_dtoa_r+0xc24>
    5114:	008000c4 	movi	r2,3
    5118:	113f7e16 	blt	r2,r4,4f14 <_dtoa_r+0x8bc>
    511c:	20800704 	addi	r2,r4,28
    5120:	003f7506 	br	4ef8 <_dtoa_r+0x8a0>
    5124:	d9801717 	ldw	r6,92(sp)
    5128:	00800044 	movi	r2,1
    512c:	1180a10e 	bge	r2,r6,53b4 <_dtoa_r+0xd5c>
    5130:	d9800f17 	ldw	r6,60(sp)
    5134:	d8c01017 	ldw	r3,64(sp)
    5138:	30bfffc4 	addi	r2,r6,-1
    513c:	1881c616 	blt	r3,r2,5858 <_dtoa_r+0x1200>
    5140:	18a5c83a 	sub	r18,r3,r2
    5144:	d8800f17 	ldw	r2,60(sp)
    5148:	10026216 	blt	r2,zero,5ad4 <_dtoa_r+0x147c>
    514c:	dc001117 	ldw	r16,68(sp)
    5150:	1007883a 	mov	r3,r2
    5154:	d9800a17 	ldw	r6,40(sp)
    5158:	d8801117 	ldw	r2,68(sp)
    515c:	d9001617 	ldw	r4,88(sp)
    5160:	30cd883a 	add	r6,r6,r3
    5164:	10c5883a 	add	r2,r2,r3
    5168:	01400044 	movi	r5,1
    516c:	d9800a15 	stw	r6,40(sp)
    5170:	d8801115 	stw	r2,68(sp)
    5174:	000832c0 	call	832c <__i2b>
    5178:	1027883a 	mov	r19,r2
    517c:	003f2506 	br	4e14 <_dtoa_r+0x7bc>
    5180:	00c00074 	movhi	r3,1
    5184:	18faad04 	addi	r3,r3,-5452
    5188:	003d6706 	br	4728 <_dtoa_r+0xd0>
    518c:	dd800517 	ldw	r22,20(sp)
    5190:	04000044 	movi	r16,1
    5194:	00000706 	br	51b4 <_dtoa_r+0xb5c>
    5198:	d9400717 	ldw	r5,28(sp)
    519c:	d9001617 	ldw	r4,88(sp)
    51a0:	01800284 	movi	r6,10
    51a4:	000f883a 	mov	r7,zero
    51a8:	00083680 	call	8368 <__multadd>
    51ac:	d8800715 	stw	r2,28(sp)
    51b0:	84000044 	addi	r16,r16,1
    51b4:	d9000717 	ldw	r4,28(sp)
    51b8:	900b883a 	mov	r5,r18
    51bc:	00044400 	call	4440 <quorem>
    51c0:	15c00c04 	addi	r23,r2,48
    51c4:	b5c00005 	stb	r23,0(r22)
    51c8:	d8c00f17 	ldw	r3,60(sp)
    51cc:	b5800044 	addi	r22,r22,1
    51d0:	80fff116 	blt	r16,r3,5198 <_dtoa_r+0xb40>
    51d4:	d8000615 	stw	zero,24(sp)
    51d8:	d9400717 	ldw	r5,28(sp)
    51dc:	d9001617 	ldw	r4,88(sp)
    51e0:	01800044 	movi	r6,1
    51e4:	0007ff80 	call	7ff8 <__lshift>
    51e8:	1009883a 	mov	r4,r2
    51ec:	900b883a 	mov	r5,r18
    51f0:	d8800715 	stw	r2,28(sp)
    51f4:	00078100 	call	7810 <__mcmp>
    51f8:	00803c0e 	bge	zero,r2,52ec <_dtoa_r+0xc94>
    51fc:	b009883a 	mov	r4,r22
    5200:	213fffc4 	addi	r4,r4,-1
    5204:	21400003 	ldbu	r5,0(r4)
    5208:	00800e44 	movi	r2,57
    520c:	28c03fcc 	andi	r3,r5,255
    5210:	18c0201c 	xori	r3,r3,128
    5214:	18ffe004 	addi	r3,r3,-128
    5218:	1881981e 	bne	r3,r2,587c <_dtoa_r+0x1224>
    521c:	d9800517 	ldw	r6,20(sp)
    5220:	21bff71e 	bne	r4,r6,5200 <_dtoa_r+0xba8>
    5224:	d8800d17 	ldw	r2,52(sp)
    5228:	37000044 	addi	fp,r6,1
    522c:	10800044 	addi	r2,r2,1
    5230:	d8800d15 	stw	r2,52(sp)
    5234:	00800c44 	movi	r2,49
    5238:	30800005 	stb	r2,0(r6)
    523c:	d9001617 	ldw	r4,88(sp)
    5240:	900b883a 	mov	r5,r18
    5244:	00076b40 	call	76b4 <_Bfree>
    5248:	983ecd26 	beq	r19,zero,4d80 <_dtoa_r+0x728>
    524c:	d8c00617 	ldw	r3,24(sp)
    5250:	18000426 	beq	r3,zero,5264 <_dtoa_r+0xc0c>
    5254:	1cc00326 	beq	r3,r19,5264 <_dtoa_r+0xc0c>
    5258:	d9001617 	ldw	r4,88(sp)
    525c:	180b883a 	mov	r5,r3
    5260:	00076b40 	call	76b4 <_Bfree>
    5264:	d9001617 	ldw	r4,88(sp)
    5268:	980b883a 	mov	r5,r19
    526c:	00076b40 	call	76b4 <_Bfree>
    5270:	003ec306 	br	4d80 <_dtoa_r+0x728>
    5274:	1805883a 	mov	r2,r3
    5278:	003eeb06 	br	4e28 <_dtoa_r+0x7d0>
    527c:	d9800a17 	ldw	r6,40(sp)
    5280:	d8c01117 	ldw	r3,68(sp)
    5284:	20bfff04 	addi	r2,r4,-4
    5288:	308d883a 	add	r6,r6,r2
    528c:	1887883a 	add	r3,r3,r2
    5290:	80a1883a 	add	r16,r16,r2
    5294:	d9800a15 	stw	r6,40(sp)
    5298:	d8c01115 	stw	r3,68(sp)
    529c:	003f1d06 	br	4f14 <_dtoa_r+0x8bc>
    52a0:	a03f0c1e 	bne	r20,zero,4ed4 <_dtoa_r+0x87c>
    52a4:	00800434 	movhi	r2,16
    52a8:	10bfffc4 	addi	r2,r2,-1
    52ac:	a884703a 	and	r2,r21,r2
    52b0:	103f081e 	bne	r2,zero,4ed4 <_dtoa_r+0x87c>
    52b4:	a89ffc2c 	andhi	r2,r21,32752
    52b8:	103f0626 	beq	r2,zero,4ed4 <_dtoa_r+0x87c>
    52bc:	d8c01117 	ldw	r3,68(sp)
    52c0:	d9000a17 	ldw	r4,40(sp)
    52c4:	18c00044 	addi	r3,r3,1
    52c8:	21000044 	addi	r4,r4,1
    52cc:	d8c01115 	stw	r3,68(sp)
    52d0:	d9000a15 	stw	r4,40(sp)
    52d4:	003f0006 	br	4ed8 <_dtoa_r+0x880>
    52d8:	d9400717 	ldw	r5,28(sp)
    52dc:	d9001617 	ldw	r4,88(sp)
    52e0:	00084680 	call	8468 <__pow5mult>
    52e4:	d8800715 	stw	r2,28(sp)
    52e8:	003eed06 	br	4ea0 <_dtoa_r+0x848>
    52ec:	1000021e 	bne	r2,zero,52f8 <_dtoa_r+0xca0>
    52f0:	b880004c 	andi	r2,r23,1
    52f4:	103fc11e 	bne	r2,zero,51fc <_dtoa_r+0xba4>
    52f8:	b5bfffc4 	addi	r22,r22,-1
    52fc:	b0c00007 	ldb	r3,0(r22)
    5300:	00800c04 	movi	r2,48
    5304:	18bffc26 	beq	r3,r2,52f8 <_dtoa_r+0xca0>
    5308:	b7000044 	addi	fp,r22,1
    530c:	003fcb06 	br	523c <_dtoa_r+0xbe4>
    5310:	d9800d17 	ldw	r6,52(sp)
    5314:	018fc83a 	sub	r7,zero,r6
    5318:	3801f726 	beq	r7,zero,5af8 <_dtoa_r+0x14a0>
    531c:	398003cc 	andi	r6,r7,15
    5320:	300c90fa 	slli	r6,r6,3
    5324:	01400074 	movhi	r5,1
    5328:	297acb04 	addi	r5,r5,-5332
    532c:	d9001217 	ldw	r4,72(sp)
    5330:	314d883a 	add	r6,r6,r5
    5334:	30c00117 	ldw	r3,4(r6)
    5338:	30800017 	ldw	r2,0(r6)
    533c:	d9401317 	ldw	r5,76(sp)
    5340:	3821d13a 	srai	r16,r7,4
    5344:	100d883a 	mov	r6,r2
    5348:	180f883a 	mov	r7,r3
    534c:	000a4a80 	call	a4a8 <__muldf3>
    5350:	1011883a 	mov	r8,r2
    5354:	1813883a 	mov	r9,r3
    5358:	1029883a 	mov	r20,r2
    535c:	182b883a 	mov	r21,r3
    5360:	8001e526 	beq	r16,zero,5af8 <_dtoa_r+0x14a0>
    5364:	05800084 	movi	r22,2
    5368:	04400074 	movhi	r17,1
    536c:	8c7afd04 	addi	r17,r17,-5132
    5370:	8080004c 	andi	r2,r16,1
    5374:	1005003a 	cmpeq	r2,r2,zero
    5378:	1000081e 	bne	r2,zero,539c <_dtoa_r+0xd44>
    537c:	89800017 	ldw	r6,0(r17)
    5380:	89c00117 	ldw	r7,4(r17)
    5384:	480b883a 	mov	r5,r9
    5388:	4009883a 	mov	r4,r8
    538c:	000a4a80 	call	a4a8 <__muldf3>
    5390:	1011883a 	mov	r8,r2
    5394:	b5800044 	addi	r22,r22,1
    5398:	1813883a 	mov	r9,r3
    539c:	8021d07a 	srai	r16,r16,1
    53a0:	8c400204 	addi	r17,r17,8
    53a4:	803ff21e 	bne	r16,zero,5370 <_dtoa_r+0xd18>
    53a8:	4029883a 	mov	r20,r8
    53ac:	482b883a 	mov	r21,r9
    53b0:	003dca06 	br	4adc <_dtoa_r+0x484>
    53b4:	d9000817 	ldw	r4,32(sp)
    53b8:	2005003a 	cmpeq	r2,r4,zero
    53bc:	1001f61e 	bne	r2,zero,5b98 <_dtoa_r+0x1540>
    53c0:	dc001117 	ldw	r16,68(sp)
    53c4:	dc801017 	ldw	r18,64(sp)
    53c8:	18c10cc4 	addi	r3,r3,1075
    53cc:	003f6106 	br	5154 <_dtoa_r+0xafc>
    53d0:	d8000b15 	stw	zero,44(sp)
    53d4:	d9802617 	ldw	r6,152(sp)
    53d8:	d8c00d17 	ldw	r3,52(sp)
    53dc:	30800044 	addi	r2,r6,1
    53e0:	18ad883a 	add	r22,r3,r2
    53e4:	b13fffc4 	addi	r4,r22,-1
    53e8:	d9000e15 	stw	r4,56(sp)
    53ec:	0581f60e 	bge	zero,r22,5bc8 <_dtoa_r+0x1570>
    53f0:	dd800f15 	stw	r22,60(sp)
    53f4:	003f3006 	br	50b8 <_dtoa_r+0xa60>
    53f8:	d8000b15 	stw	zero,44(sp)
    53fc:	d9002617 	ldw	r4,152(sp)
    5400:	0101eb0e 	bge	zero,r4,5bb0 <_dtoa_r+0x1558>
    5404:	202d883a 	mov	r22,r4
    5408:	d9000e15 	stw	r4,56(sp)
    540c:	d9000f15 	stw	r4,60(sp)
    5410:	003f2906 	br	50b8 <_dtoa_r+0xa60>
    5414:	01800044 	movi	r6,1
    5418:	d9800b15 	stw	r6,44(sp)
    541c:	003ff706 	br	53fc <_dtoa_r+0xda4>
    5420:	01000044 	movi	r4,1
    5424:	d9000b15 	stw	r4,44(sp)
    5428:	003fea06 	br	53d4 <_dtoa_r+0xd7c>
    542c:	04000c0e 	bge	zero,r16,5460 <_dtoa_r+0xe08>
    5430:	d9400717 	ldw	r5,28(sp)
    5434:	d9001617 	ldw	r4,88(sp)
    5438:	01800044 	movi	r6,1
    543c:	0007ff80 	call	7ff8 <__lshift>
    5440:	1009883a 	mov	r4,r2
    5444:	900b883a 	mov	r5,r18
    5448:	d8800715 	stw	r2,28(sp)
    544c:	00078100 	call	7810 <__mcmp>
    5450:	0081e00e 	bge	zero,r2,5bd4 <_dtoa_r+0x157c>
    5454:	bdc00044 	addi	r23,r23,1
    5458:	00800e84 	movi	r2,58
    545c:	b881a226 	beq	r23,r2,5ae8 <_dtoa_r+0x1490>
    5460:	b7000044 	addi	fp,r22,1
    5464:	b5c00005 	stb	r23,0(r22)
    5468:	003f7406 	br	523c <_dtoa_r+0xbe4>
    546c:	00800e44 	movi	r2,57
    5470:	b8819d26 	beq	r23,r2,5ae8 <_dtoa_r+0x1490>
    5474:	053ffa0e 	bge	zero,r20,5460 <_dtoa_r+0xe08>
    5478:	8dc00c44 	addi	r23,r17,49
    547c:	003ff806 	br	5460 <_dtoa_r+0xe08>
    5480:	d9001617 	ldw	r4,88(sp)
    5484:	a80b883a 	mov	r5,r21
    5488:	04000044 	movi	r16,1
    548c:	00076b40 	call	76b4 <_Bfree>
    5490:	003edf06 	br	5010 <_dtoa_r+0x9b8>
    5494:	d9001617 	ldw	r4,88(sp)
    5498:	980b883a 	mov	r5,r19
    549c:	01800284 	movi	r6,10
    54a0:	000f883a 	mov	r7,zero
    54a4:	00083680 	call	8368 <__multadd>
    54a8:	1027883a 	mov	r19,r2
    54ac:	d8800615 	stw	r2,24(sp)
    54b0:	003ebb06 	br	4fa0 <_dtoa_r+0x948>
    54b4:	d9801117 	ldw	r6,68(sp)
    54b8:	d8800d17 	ldw	r2,52(sp)
    54bc:	d8000915 	stw	zero,36(sp)
    54c0:	308dc83a 	sub	r6,r6,r2
    54c4:	0087c83a 	sub	r3,zero,r2
    54c8:	d9801115 	stw	r6,68(sp)
    54cc:	d8c01015 	stw	r3,64(sp)
    54d0:	003cfe06 	br	48cc <_dtoa_r+0x274>
    54d4:	018dc83a 	sub	r6,zero,r6
    54d8:	d9801115 	stw	r6,68(sp)
    54dc:	d8000a15 	stw	zero,40(sp)
    54e0:	003cf306 	br	48b0 <_dtoa_r+0x258>
    54e4:	d9000d17 	ldw	r4,52(sp)
    54e8:	000ad6c0 	call	ad6c <__floatsidf>
    54ec:	880b883a 	mov	r5,r17
    54f0:	8009883a 	mov	r4,r16
    54f4:	180f883a 	mov	r7,r3
    54f8:	100d883a 	mov	r6,r2
    54fc:	000ab4c0 	call	ab4c <__nedf2>
    5500:	103ce126 	beq	r2,zero,4888 <_dtoa_r+0x230>
    5504:	d9800d17 	ldw	r6,52(sp)
    5508:	31bfffc4 	addi	r6,r6,-1
    550c:	d9800d15 	stw	r6,52(sp)
    5510:	003cdd06 	br	4888 <_dtoa_r+0x230>
    5514:	d9000717 	ldw	r4,28(sp)
    5518:	900b883a 	mov	r5,r18
    551c:	00078100 	call	7810 <__mcmp>
    5520:	103e8d0e 	bge	r2,zero,4f58 <_dtoa_r+0x900>
    5524:	d9400717 	ldw	r5,28(sp)
    5528:	d9001617 	ldw	r4,88(sp)
    552c:	01800284 	movi	r6,10
    5530:	000f883a 	mov	r7,zero
    5534:	00083680 	call	8368 <__multadd>
    5538:	d9800d17 	ldw	r6,52(sp)
    553c:	d8800715 	stw	r2,28(sp)
    5540:	31bfffc4 	addi	r6,r6,-1
    5544:	d9800d15 	stw	r6,52(sp)
    5548:	b001a71e 	bne	r22,zero,5be8 <_dtoa_r+0x1590>
    554c:	d8800e17 	ldw	r2,56(sp)
    5550:	d8800f15 	stw	r2,60(sp)
    5554:	003e8006 	br	4f58 <_dtoa_r+0x900>
    5558:	90800417 	ldw	r2,16(r18)
    555c:	1085883a 	add	r2,r2,r2
    5560:	1085883a 	add	r2,r2,r2
    5564:	1485883a 	add	r2,r2,r18
    5568:	11000417 	ldw	r4,16(r2)
    556c:	00076dc0 	call	76dc <__hi0bits>
    5570:	00c00804 	movi	r3,32
    5574:	1887c83a 	sub	r3,r3,r2
    5578:	003e5a06 	br	4ee4 <_dtoa_r+0x88c>
    557c:	d9400717 	ldw	r5,28(sp)
    5580:	d9801017 	ldw	r6,64(sp)
    5584:	d9001617 	ldw	r4,88(sp)
    5588:	00084680 	call	8468 <__pow5mult>
    558c:	d8800715 	stw	r2,28(sp)
    5590:	003e4306 	br	4ea0 <_dtoa_r+0x848>
    5594:	d9800f17 	ldw	r6,60(sp)
    5598:	d8800d17 	ldw	r2,52(sp)
    559c:	d9800315 	stw	r6,12(sp)
    55a0:	d8800415 	stw	r2,16(sp)
    55a4:	d8c00b17 	ldw	r3,44(sp)
    55a8:	1805003a 	cmpeq	r2,r3,zero
    55ac:	1000e21e 	bne	r2,zero,5938 <_dtoa_r+0x12e0>
    55b0:	d9000317 	ldw	r4,12(sp)
    55b4:	0005883a 	mov	r2,zero
    55b8:	00cff834 	movhi	r3,16352
    55bc:	200c90fa 	slli	r6,r4,3
    55c0:	01000074 	movhi	r4,1
    55c4:	213acb04 	addi	r4,r4,-5332
    55c8:	180b883a 	mov	r5,r3
    55cc:	310d883a 	add	r6,r6,r4
    55d0:	327fff17 	ldw	r9,-4(r6)
    55d4:	323ffe17 	ldw	r8,-8(r6)
    55d8:	1009883a 	mov	r4,r2
    55dc:	480f883a 	mov	r7,r9
    55e0:	400d883a 	mov	r6,r8
    55e4:	000a86c0 	call	a86c <__divdf3>
    55e8:	180b883a 	mov	r5,r3
    55ec:	b00d883a 	mov	r6,r22
    55f0:	b80f883a 	mov	r7,r23
    55f4:	1009883a 	mov	r4,r2
    55f8:	000a3b40 	call	a3b4 <__subdf3>
    55fc:	a80b883a 	mov	r5,r21
    5600:	a009883a 	mov	r4,r20
    5604:	d8c01915 	stw	r3,100(sp)
    5608:	d8801815 	stw	r2,96(sp)
    560c:	000ae640 	call	ae64 <__fixdfsi>
    5610:	1009883a 	mov	r4,r2
    5614:	1027883a 	mov	r19,r2
    5618:	000ad6c0 	call	ad6c <__floatsidf>
    561c:	a80b883a 	mov	r5,r21
    5620:	a009883a 	mov	r4,r20
    5624:	180f883a 	mov	r7,r3
    5628:	100d883a 	mov	r6,r2
    562c:	000a3b40 	call	a3b4 <__subdf3>
    5630:	d9801817 	ldw	r6,96(sp)
    5634:	1823883a 	mov	r17,r3
    5638:	d8801415 	stw	r2,80(sp)
    563c:	302d883a 	mov	r22,r6
    5640:	d9800517 	ldw	r6,20(sp)
    5644:	9cc00c04 	addi	r19,r19,48
    5648:	dc401515 	stw	r17,84(sp)
    564c:	d8c01917 	ldw	r3,100(sp)
    5650:	34c00005 	stb	r19,0(r6)
    5654:	d8800517 	ldw	r2,20(sp)
    5658:	d9401917 	ldw	r5,100(sp)
    565c:	d9801417 	ldw	r6,80(sp)
    5660:	b009883a 	mov	r4,r22
    5664:	880f883a 	mov	r7,r17
    5668:	182f883a 	mov	r23,r3
    566c:	17000044 	addi	fp,r2,1
    5670:	000abd40 	call	abd4 <__gtdf2>
    5674:	00804e16 	blt	zero,r2,57b0 <_dtoa_r+0x1158>
    5678:	d9801417 	ldw	r6,80(sp)
    567c:	0005883a 	mov	r2,zero
    5680:	00cffc34 	movhi	r3,16368
    5684:	180b883a 	mov	r5,r3
    5688:	880f883a 	mov	r7,r17
    568c:	1009883a 	mov	r4,r2
    5690:	000a3b40 	call	a3b4 <__subdf3>
    5694:	d9401917 	ldw	r5,100(sp)
    5698:	180f883a 	mov	r7,r3
    569c:	b009883a 	mov	r4,r22
    56a0:	100d883a 	mov	r6,r2
    56a4:	000abd40 	call	abd4 <__gtdf2>
    56a8:	00bda216 	blt	zero,r2,4d34 <_dtoa_r+0x6dc>
    56ac:	d8c00317 	ldw	r3,12(sp)
    56b0:	00800044 	movi	r2,1
    56b4:	10c01216 	blt	r2,r3,5700 <_dtoa_r+0x10a8>
    56b8:	003d4506 	br	4bd0 <_dtoa_r+0x578>
    56bc:	d9801417 	ldw	r6,80(sp)
    56c0:	0005883a 	mov	r2,zero
    56c4:	00cffc34 	movhi	r3,16368
    56c8:	180b883a 	mov	r5,r3
    56cc:	880f883a 	mov	r7,r17
    56d0:	1009883a 	mov	r4,r2
    56d4:	000a3b40 	call	a3b4 <__subdf3>
    56d8:	d9c01b17 	ldw	r7,108(sp)
    56dc:	180b883a 	mov	r5,r3
    56e0:	1009883a 	mov	r4,r2
    56e4:	b00d883a 	mov	r6,r22
    56e8:	000ace40 	call	ace4 <__ltdf2>
    56ec:	103d9116 	blt	r2,zero,4d34 <_dtoa_r+0x6dc>
    56f0:	d9800517 	ldw	r6,20(sp)
    56f4:	d9000317 	ldw	r4,12(sp)
    56f8:	3105883a 	add	r2,r6,r4
    56fc:	e0bd3426 	beq	fp,r2,4bd0 <_dtoa_r+0x578>
    5700:	04500934 	movhi	r17,16420
    5704:	0021883a 	mov	r16,zero
    5708:	b80b883a 	mov	r5,r23
    570c:	b009883a 	mov	r4,r22
    5710:	800d883a 	mov	r6,r16
    5714:	880f883a 	mov	r7,r17
    5718:	000a4a80 	call	a4a8 <__muldf3>
    571c:	d9401517 	ldw	r5,84(sp)
    5720:	d9001417 	ldw	r4,80(sp)
    5724:	880f883a 	mov	r7,r17
    5728:	000d883a 	mov	r6,zero
    572c:	d8801a15 	stw	r2,104(sp)
    5730:	d8c01b15 	stw	r3,108(sp)
    5734:	000a4a80 	call	a4a8 <__muldf3>
    5738:	180b883a 	mov	r5,r3
    573c:	1009883a 	mov	r4,r2
    5740:	1823883a 	mov	r17,r3
    5744:	1021883a 	mov	r16,r2
    5748:	000ae640 	call	ae64 <__fixdfsi>
    574c:	1009883a 	mov	r4,r2
    5750:	102b883a 	mov	r21,r2
    5754:	000ad6c0 	call	ad6c <__floatsidf>
    5758:	880b883a 	mov	r5,r17
    575c:	8009883a 	mov	r4,r16
    5760:	180f883a 	mov	r7,r3
    5764:	100d883a 	mov	r6,r2
    5768:	000a3b40 	call	a3b4 <__subdf3>
    576c:	1021883a 	mov	r16,r2
    5770:	d9001b17 	ldw	r4,108(sp)
    5774:	1823883a 	mov	r17,r3
    5778:	dc001415 	stw	r16,80(sp)
    577c:	ad400c04 	addi	r21,r21,48
    5780:	dc401515 	stw	r17,84(sp)
    5784:	d8801a17 	ldw	r2,104(sp)
    5788:	e5400005 	stb	r21,0(fp)
    578c:	202f883a 	mov	r23,r4
    5790:	d9c01b17 	ldw	r7,108(sp)
    5794:	d9001417 	ldw	r4,80(sp)
    5798:	880b883a 	mov	r5,r17
    579c:	100d883a 	mov	r6,r2
    57a0:	102d883a 	mov	r22,r2
    57a4:	e7000044 	addi	fp,fp,1
    57a8:	000ace40 	call	ace4 <__ltdf2>
    57ac:	103fc30e 	bge	r2,zero,56bc <_dtoa_r+0x1064>
    57b0:	d9000417 	ldw	r4,16(sp)
    57b4:	d9000d15 	stw	r4,52(sp)
    57b8:	003d7106 	br	4d80 <_dtoa_r+0x728>
    57bc:	d9801717 	ldw	r6,92(sp)
    57c0:	00800084 	movi	r2,2
    57c4:	11bde60e 	bge	r2,r6,4f60 <_dtoa_r+0x908>
    57c8:	203cfb1e 	bne	r4,zero,4bb8 <_dtoa_r+0x560>
    57cc:	d9001617 	ldw	r4,88(sp)
    57d0:	900b883a 	mov	r5,r18
    57d4:	01800144 	movi	r6,5
    57d8:	000f883a 	mov	r7,zero
    57dc:	00083680 	call	8368 <__multadd>
    57e0:	d9000717 	ldw	r4,28(sp)
    57e4:	100b883a 	mov	r5,r2
    57e8:	1025883a 	mov	r18,r2
    57ec:	00078100 	call	7810 <__mcmp>
    57f0:	00bcf10e 	bge	zero,r2,4bb8 <_dtoa_r+0x560>
    57f4:	d8c00d17 	ldw	r3,52(sp)
    57f8:	d9000517 	ldw	r4,20(sp)
    57fc:	d8000615 	stw	zero,24(sp)
    5800:	18c00044 	addi	r3,r3,1
    5804:	d8c00d15 	stw	r3,52(sp)
    5808:	00800c44 	movi	r2,49
    580c:	27000044 	addi	fp,r4,1
    5810:	20800005 	stb	r2,0(r4)
    5814:	003e8906 	br	523c <_dtoa_r+0xbe4>
    5818:	d8c00517 	ldw	r3,20(sp)
    581c:	003bc206 	br	4728 <_dtoa_r+0xd0>
    5820:	01800074 	movhi	r6,1
    5824:	31bafd04 	addi	r6,r6,-5132
    5828:	30c00917 	ldw	r3,36(r6)
    582c:	30800817 	ldw	r2,32(r6)
    5830:	d9001217 	ldw	r4,72(sp)
    5834:	d9401317 	ldw	r5,76(sp)
    5838:	180f883a 	mov	r7,r3
    583c:	100d883a 	mov	r6,r2
    5840:	000a86c0 	call	a86c <__divdf3>
    5844:	948003cc 	andi	r18,r18,15
    5848:	058000c4 	movi	r22,3
    584c:	1029883a 	mov	r20,r2
    5850:	182b883a 	mov	r21,r3
    5854:	003c8906 	br	4a7c <_dtoa_r+0x424>
    5858:	d9001017 	ldw	r4,64(sp)
    585c:	d9800917 	ldw	r6,36(sp)
    5860:	0025883a 	mov	r18,zero
    5864:	1105c83a 	sub	r2,r2,r4
    5868:	2089883a 	add	r4,r4,r2
    586c:	308d883a 	add	r6,r6,r2
    5870:	d9001015 	stw	r4,64(sp)
    5874:	d9800915 	stw	r6,36(sp)
    5878:	003e3206 	br	5144 <_dtoa_r+0xaec>
    587c:	28800044 	addi	r2,r5,1
    5880:	27000044 	addi	fp,r4,1
    5884:	20800005 	stb	r2,0(r4)
    5888:	003e6c06 	br	523c <_dtoa_r+0xbe4>
    588c:	d8800f17 	ldw	r2,60(sp)
    5890:	00bce016 	blt	zero,r2,4c14 <_dtoa_r+0x5bc>
    5894:	d9800f17 	ldw	r6,60(sp)
    5898:	303cc51e 	bne	r6,zero,4bb0 <_dtoa_r+0x558>
    589c:	0005883a 	mov	r2,zero
    58a0:	00d00534 	movhi	r3,16404
    58a4:	980b883a 	mov	r5,r19
    58a8:	180f883a 	mov	r7,r3
    58ac:	9009883a 	mov	r4,r18
    58b0:	100d883a 	mov	r6,r2
    58b4:	000a4a80 	call	a4a8 <__muldf3>
    58b8:	180b883a 	mov	r5,r3
    58bc:	a80f883a 	mov	r7,r21
    58c0:	1009883a 	mov	r4,r2
    58c4:	a00d883a 	mov	r6,r20
    58c8:	000ac5c0 	call	ac5c <__gedf2>
    58cc:	103cb80e 	bge	r2,zero,4bb0 <_dtoa_r+0x558>
    58d0:	0027883a 	mov	r19,zero
    58d4:	0025883a 	mov	r18,zero
    58d8:	003fc606 	br	57f4 <_dtoa_r+0x119c>
    58dc:	99400117 	ldw	r5,4(r19)
    58e0:	d9001617 	ldw	r4,88(sp)
    58e4:	0007c340 	call	7c34 <_Balloc>
    58e8:	99800417 	ldw	r6,16(r19)
    58ec:	11000304 	addi	r4,r2,12
    58f0:	99400304 	addi	r5,r19,12
    58f4:	318d883a 	add	r6,r6,r6
    58f8:	318d883a 	add	r6,r6,r6
    58fc:	31800204 	addi	r6,r6,8
    5900:	1023883a 	mov	r17,r2
    5904:	0001fa40 	call	1fa4 <memcpy>
    5908:	d9001617 	ldw	r4,88(sp)
    590c:	880b883a 	mov	r5,r17
    5910:	01800044 	movi	r6,1
    5914:	0007ff80 	call	7ff8 <__lshift>
    5918:	100b883a 	mov	r5,r2
    591c:	003d9c06 	br	4f90 <_dtoa_r+0x938>
    5920:	00800e44 	movi	r2,57
    5924:	b8807026 	beq	r23,r2,5ae8 <_dtoa_r+0x1490>
    5928:	b8800044 	addi	r2,r23,1
    592c:	b7000044 	addi	fp,r22,1
    5930:	b0800005 	stb	r2,0(r22)
    5934:	003e4106 	br	523c <_dtoa_r+0xbe4>
    5938:	d8800317 	ldw	r2,12(sp)
    593c:	01800074 	movhi	r6,1
    5940:	31bacb04 	addi	r6,r6,-5332
    5944:	b009883a 	mov	r4,r22
    5948:	100e90fa 	slli	r7,r2,3
    594c:	b80b883a 	mov	r5,r23
    5950:	398f883a 	add	r7,r7,r6
    5954:	38bffe17 	ldw	r2,-8(r7)
    5958:	d9800517 	ldw	r6,20(sp)
    595c:	38ffff17 	ldw	r3,-4(r7)
    5960:	37000044 	addi	fp,r6,1
    5964:	180f883a 	mov	r7,r3
    5968:	100d883a 	mov	r6,r2
    596c:	000a4a80 	call	a4a8 <__muldf3>
    5970:	a80b883a 	mov	r5,r21
    5974:	a009883a 	mov	r4,r20
    5978:	182f883a 	mov	r23,r3
    597c:	102d883a 	mov	r22,r2
    5980:	000ae640 	call	ae64 <__fixdfsi>
    5984:	1009883a 	mov	r4,r2
    5988:	1027883a 	mov	r19,r2
    598c:	000ad6c0 	call	ad6c <__floatsidf>
    5990:	a80b883a 	mov	r5,r21
    5994:	a009883a 	mov	r4,r20
    5998:	180f883a 	mov	r7,r3
    599c:	100d883a 	mov	r6,r2
    59a0:	000a3b40 	call	a3b4 <__subdf3>
    59a4:	180b883a 	mov	r5,r3
    59a8:	d8c00517 	ldw	r3,20(sp)
    59ac:	9cc00c04 	addi	r19,r19,48
    59b0:	1009883a 	mov	r4,r2
    59b4:	1cc00005 	stb	r19,0(r3)
    59b8:	2021883a 	mov	r16,r4
    59bc:	d9000317 	ldw	r4,12(sp)
    59c0:	00800044 	movi	r2,1
    59c4:	2823883a 	mov	r17,r5
    59c8:	20802226 	beq	r4,r2,5a54 <_dtoa_r+0x13fc>
    59cc:	1029883a 	mov	r20,r2
    59d0:	0005883a 	mov	r2,zero
    59d4:	00d00934 	movhi	r3,16420
    59d8:	180f883a 	mov	r7,r3
    59dc:	100d883a 	mov	r6,r2
    59e0:	880b883a 	mov	r5,r17
    59e4:	8009883a 	mov	r4,r16
    59e8:	000a4a80 	call	a4a8 <__muldf3>
    59ec:	180b883a 	mov	r5,r3
    59f0:	1009883a 	mov	r4,r2
    59f4:	1823883a 	mov	r17,r3
    59f8:	1021883a 	mov	r16,r2
    59fc:	000ae640 	call	ae64 <__fixdfsi>
    5a00:	1009883a 	mov	r4,r2
    5a04:	102b883a 	mov	r21,r2
    5a08:	000ad6c0 	call	ad6c <__floatsidf>
    5a0c:	880b883a 	mov	r5,r17
    5a10:	8009883a 	mov	r4,r16
    5a14:	180f883a 	mov	r7,r3
    5a18:	100d883a 	mov	r6,r2
    5a1c:	000a3b40 	call	a3b4 <__subdf3>
    5a20:	180b883a 	mov	r5,r3
    5a24:	d8c00517 	ldw	r3,20(sp)
    5a28:	1009883a 	mov	r4,r2
    5a2c:	ad400c04 	addi	r21,r21,48
    5a30:	1d05883a 	add	r2,r3,r20
    5a34:	15400005 	stb	r21,0(r2)
    5a38:	2021883a 	mov	r16,r4
    5a3c:	d9000317 	ldw	r4,12(sp)
    5a40:	a5000044 	addi	r20,r20,1
    5a44:	2823883a 	mov	r17,r5
    5a48:	a13fe11e 	bne	r20,r4,59d0 <_dtoa_r+0x1378>
    5a4c:	e505883a 	add	r2,fp,r20
    5a50:	173fffc4 	addi	fp,r2,-1
    5a54:	0025883a 	mov	r18,zero
    5a58:	04cff834 	movhi	r19,16352
    5a5c:	b009883a 	mov	r4,r22
    5a60:	b80b883a 	mov	r5,r23
    5a64:	900d883a 	mov	r6,r18
    5a68:	980f883a 	mov	r7,r19
    5a6c:	000a4340 	call	a434 <__adddf3>
    5a70:	180b883a 	mov	r5,r3
    5a74:	1009883a 	mov	r4,r2
    5a78:	800d883a 	mov	r6,r16
    5a7c:	880f883a 	mov	r7,r17
    5a80:	000ace40 	call	ace4 <__ltdf2>
    5a84:	103cab16 	blt	r2,zero,4d34 <_dtoa_r+0x6dc>
    5a88:	0009883a 	mov	r4,zero
    5a8c:	980b883a 	mov	r5,r19
    5a90:	b80f883a 	mov	r7,r23
    5a94:	b00d883a 	mov	r6,r22
    5a98:	000a3b40 	call	a3b4 <__subdf3>
    5a9c:	180b883a 	mov	r5,r3
    5aa0:	880f883a 	mov	r7,r17
    5aa4:	1009883a 	mov	r4,r2
    5aa8:	800d883a 	mov	r6,r16
    5aac:	000abd40 	call	abd4 <__gtdf2>
    5ab0:	00bc470e 	bge	zero,r2,4bd0 <_dtoa_r+0x578>
    5ab4:	00c00c04 	movi	r3,48
    5ab8:	e73fffc4 	addi	fp,fp,-1
    5abc:	e0800007 	ldb	r2,0(fp)
    5ac0:	10fffd26 	beq	r2,r3,5ab8 <_dtoa_r+0x1460>
    5ac4:	d9800417 	ldw	r6,16(sp)
    5ac8:	e7000044 	addi	fp,fp,1
    5acc:	d9800d15 	stw	r6,52(sp)
    5ad0:	003cab06 	br	4d80 <_dtoa_r+0x728>
    5ad4:	d8c00f17 	ldw	r3,60(sp)
    5ad8:	d9001117 	ldw	r4,68(sp)
    5adc:	20e1c83a 	sub	r16,r4,r3
    5ae0:	0007883a 	mov	r3,zero
    5ae4:	003d9b06 	br	5154 <_dtoa_r+0xafc>
    5ae8:	00800e44 	movi	r2,57
    5aec:	b0800005 	stb	r2,0(r22)
    5af0:	b5800044 	addi	r22,r22,1
    5af4:	003dc106 	br	51fc <_dtoa_r+0xba4>
    5af8:	05800084 	movi	r22,2
    5afc:	003bf706 	br	4adc <_dtoa_r+0x484>
    5b00:	d9000f17 	ldw	r4,60(sp)
    5b04:	013c000e 	bge	zero,r4,4b08 <_dtoa_r+0x4b0>
    5b08:	d9800e17 	ldw	r6,56(sp)
    5b0c:	01bc300e 	bge	zero,r6,4bd0 <_dtoa_r+0x578>
    5b10:	0005883a 	mov	r2,zero
    5b14:	00d00934 	movhi	r3,16420
    5b18:	a80b883a 	mov	r5,r21
    5b1c:	180f883a 	mov	r7,r3
    5b20:	a009883a 	mov	r4,r20
    5b24:	100d883a 	mov	r6,r2
    5b28:	000a4a80 	call	a4a8 <__muldf3>
    5b2c:	b1000044 	addi	r4,r22,1
    5b30:	1021883a 	mov	r16,r2
    5b34:	1823883a 	mov	r17,r3
    5b38:	000ad6c0 	call	ad6c <__floatsidf>
    5b3c:	880b883a 	mov	r5,r17
    5b40:	8009883a 	mov	r4,r16
    5b44:	180f883a 	mov	r7,r3
    5b48:	100d883a 	mov	r6,r2
    5b4c:	000a4a80 	call	a4a8 <__muldf3>
    5b50:	0011883a 	mov	r8,zero
    5b54:	02500734 	movhi	r9,16412
    5b58:	180b883a 	mov	r5,r3
    5b5c:	480f883a 	mov	r7,r9
    5b60:	1009883a 	mov	r4,r2
    5b64:	400d883a 	mov	r6,r8
    5b68:	000a4340 	call	a434 <__adddf3>
    5b6c:	102d883a 	mov	r22,r2
    5b70:	00bf3034 	movhi	r2,64704
    5b74:	10ef883a 	add	r23,r2,r3
    5b78:	d8800d17 	ldw	r2,52(sp)
    5b7c:	d8c00e17 	ldw	r3,56(sp)
    5b80:	8029883a 	mov	r20,r16
    5b84:	10bfffc4 	addi	r2,r2,-1
    5b88:	882b883a 	mov	r21,r17
    5b8c:	d8800415 	stw	r2,16(sp)
    5b90:	d8c00315 	stw	r3,12(sp)
    5b94:	003e8306 	br	55a4 <_dtoa_r+0xf4c>
    5b98:	d8800117 	ldw	r2,4(sp)
    5b9c:	dc001117 	ldw	r16,68(sp)
    5ba0:	dc801017 	ldw	r18,64(sp)
    5ba4:	00c00d84 	movi	r3,54
    5ba8:	1887c83a 	sub	r3,r3,r2
    5bac:	003d6906 	br	5154 <_dtoa_r+0xafc>
    5bb0:	01800044 	movi	r6,1
    5bb4:	3021883a 	mov	r16,r6
    5bb8:	d9800f15 	stw	r6,60(sp)
    5bbc:	d9802615 	stw	r6,152(sp)
    5bc0:	d9800e15 	stw	r6,56(sp)
    5bc4:	003b9306 	br	4a14 <_dtoa_r+0x3bc>
    5bc8:	b021883a 	mov	r16,r22
    5bcc:	dd800f15 	stw	r22,60(sp)
    5bd0:	003b9006 	br	4a14 <_dtoa_r+0x3bc>
    5bd4:	103e221e 	bne	r2,zero,5460 <_dtoa_r+0xe08>
    5bd8:	b880004c 	andi	r2,r23,1
    5bdc:	1005003a 	cmpeq	r2,r2,zero
    5be0:	103e1f1e 	bne	r2,zero,5460 <_dtoa_r+0xe08>
    5be4:	003e1b06 	br	5454 <_dtoa_r+0xdfc>
    5be8:	d9001617 	ldw	r4,88(sp)
    5bec:	980b883a 	mov	r5,r19
    5bf0:	01800284 	movi	r6,10
    5bf4:	000f883a 	mov	r7,zero
    5bf8:	00083680 	call	8368 <__multadd>
    5bfc:	d8c00e17 	ldw	r3,56(sp)
    5c00:	1027883a 	mov	r19,r2
    5c04:	d8c00f15 	stw	r3,60(sp)
    5c08:	003cd306 	br	4f58 <_dtoa_r+0x900>

00005c0c <_fflush_r>:
    5c0c:	defffb04 	addi	sp,sp,-20
    5c10:	dcc00315 	stw	r19,12(sp)
    5c14:	dc800215 	stw	r18,8(sp)
    5c18:	dfc00415 	stw	ra,16(sp)
    5c1c:	dc400115 	stw	r17,4(sp)
    5c20:	dc000015 	stw	r16,0(sp)
    5c24:	2027883a 	mov	r19,r4
    5c28:	2825883a 	mov	r18,r5
    5c2c:	20000226 	beq	r4,zero,5c38 <_fflush_r+0x2c>
    5c30:	20800e17 	ldw	r2,56(r4)
    5c34:	10005626 	beq	r2,zero,5d90 <_fflush_r+0x184>
    5c38:	9100030b 	ldhu	r4,12(r18)
    5c3c:	20ffffcc 	andi	r3,r4,65535
    5c40:	18e0001c 	xori	r3,r3,32768
    5c44:	18e00004 	addi	r3,r3,-32768
    5c48:	1880020c 	andi	r2,r3,8
    5c4c:	1000261e 	bne	r2,zero,5ce8 <_fflush_r+0xdc>
    5c50:	90c00117 	ldw	r3,4(r18)
    5c54:	20820014 	ori	r2,r4,2048
    5c58:	9080030d 	sth	r2,12(r18)
    5c5c:	1009883a 	mov	r4,r2
    5c60:	00c0400e 	bge	zero,r3,5d64 <_fflush_r+0x158>
    5c64:	92000a17 	ldw	r8,40(r18)
    5c68:	40004026 	beq	r8,zero,5d6c <_fflush_r+0x160>
    5c6c:	2084000c 	andi	r2,r4,4096
    5c70:	10005326 	beq	r2,zero,5dc0 <_fflush_r+0x1b4>
    5c74:	94001417 	ldw	r16,80(r18)
    5c78:	9080030b 	ldhu	r2,12(r18)
    5c7c:	1080010c 	andi	r2,r2,4
    5c80:	1000481e 	bne	r2,zero,5da4 <_fflush_r+0x198>
    5c84:	91400717 	ldw	r5,28(r18)
    5c88:	9809883a 	mov	r4,r19
    5c8c:	800d883a 	mov	r6,r16
    5c90:	000f883a 	mov	r7,zero
    5c94:	403ee83a 	callr	r8
    5c98:	8080261e 	bne	r16,r2,5d34 <_fflush_r+0x128>
    5c9c:	9080030b 	ldhu	r2,12(r18)
    5ca0:	91000417 	ldw	r4,16(r18)
    5ca4:	90000115 	stw	zero,4(r18)
    5ca8:	10bdffcc 	andi	r2,r2,63487
    5cac:	10ffffcc 	andi	r3,r2,65535
    5cb0:	18c4000c 	andi	r3,r3,4096
    5cb4:	9080030d 	sth	r2,12(r18)
    5cb8:	91000015 	stw	r4,0(r18)
    5cbc:	18002b26 	beq	r3,zero,5d6c <_fflush_r+0x160>
    5cc0:	0007883a 	mov	r3,zero
    5cc4:	1805883a 	mov	r2,r3
    5cc8:	94001415 	stw	r16,80(r18)
    5ccc:	dfc00417 	ldw	ra,16(sp)
    5cd0:	dcc00317 	ldw	r19,12(sp)
    5cd4:	dc800217 	ldw	r18,8(sp)
    5cd8:	dc400117 	ldw	r17,4(sp)
    5cdc:	dc000017 	ldw	r16,0(sp)
    5ce0:	dec00504 	addi	sp,sp,20
    5ce4:	f800283a 	ret
    5ce8:	94400417 	ldw	r17,16(r18)
    5cec:	88001f26 	beq	r17,zero,5d6c <_fflush_r+0x160>
    5cf0:	90800017 	ldw	r2,0(r18)
    5cf4:	18c000cc 	andi	r3,r3,3
    5cf8:	94400015 	stw	r17,0(r18)
    5cfc:	1461c83a 	sub	r16,r2,r17
    5d00:	18002526 	beq	r3,zero,5d98 <_fflush_r+0x18c>
    5d04:	0005883a 	mov	r2,zero
    5d08:	90800215 	stw	r2,8(r18)
    5d0c:	0400170e 	bge	zero,r16,5d6c <_fflush_r+0x160>
    5d10:	90c00917 	ldw	r3,36(r18)
    5d14:	91400717 	ldw	r5,28(r18)
    5d18:	880d883a 	mov	r6,r17
    5d1c:	800f883a 	mov	r7,r16
    5d20:	9809883a 	mov	r4,r19
    5d24:	183ee83a 	callr	r3
    5d28:	88a3883a 	add	r17,r17,r2
    5d2c:	80a1c83a 	sub	r16,r16,r2
    5d30:	00bff616 	blt	zero,r2,5d0c <_fflush_r+0x100>
    5d34:	9080030b 	ldhu	r2,12(r18)
    5d38:	00ffffc4 	movi	r3,-1
    5d3c:	10801014 	ori	r2,r2,64
    5d40:	9080030d 	sth	r2,12(r18)
    5d44:	1805883a 	mov	r2,r3
    5d48:	dfc00417 	ldw	ra,16(sp)
    5d4c:	dcc00317 	ldw	r19,12(sp)
    5d50:	dc800217 	ldw	r18,8(sp)
    5d54:	dc400117 	ldw	r17,4(sp)
    5d58:	dc000017 	ldw	r16,0(sp)
    5d5c:	dec00504 	addi	sp,sp,20
    5d60:	f800283a 	ret
    5d64:	90800f17 	ldw	r2,60(r18)
    5d68:	00bfbe16 	blt	zero,r2,5c64 <_fflush_r+0x58>
    5d6c:	0007883a 	mov	r3,zero
    5d70:	1805883a 	mov	r2,r3
    5d74:	dfc00417 	ldw	ra,16(sp)
    5d78:	dcc00317 	ldw	r19,12(sp)
    5d7c:	dc800217 	ldw	r18,8(sp)
    5d80:	dc400117 	ldw	r17,4(sp)
    5d84:	dc000017 	ldw	r16,0(sp)
    5d88:	dec00504 	addi	sp,sp,20
    5d8c:	f800283a 	ret
    5d90:	0005ea40 	call	5ea4 <__sinit>
    5d94:	003fa806 	br	5c38 <_fflush_r+0x2c>
    5d98:	90800517 	ldw	r2,20(r18)
    5d9c:	90800215 	stw	r2,8(r18)
    5da0:	003fda06 	br	5d0c <_fflush_r+0x100>
    5da4:	90800117 	ldw	r2,4(r18)
    5da8:	90c00c17 	ldw	r3,48(r18)
    5dac:	80a1c83a 	sub	r16,r16,r2
    5db0:	183fb426 	beq	r3,zero,5c84 <_fflush_r+0x78>
    5db4:	90800f17 	ldw	r2,60(r18)
    5db8:	80a1c83a 	sub	r16,r16,r2
    5dbc:	003fb106 	br	5c84 <_fflush_r+0x78>
    5dc0:	91400717 	ldw	r5,28(r18)
    5dc4:	9809883a 	mov	r4,r19
    5dc8:	000d883a 	mov	r6,zero
    5dcc:	01c00044 	movi	r7,1
    5dd0:	403ee83a 	callr	r8
    5dd4:	1021883a 	mov	r16,r2
    5dd8:	00bfffc4 	movi	r2,-1
    5ddc:	80800226 	beq	r16,r2,5de8 <_fflush_r+0x1dc>
    5de0:	92000a17 	ldw	r8,40(r18)
    5de4:	003fa406 	br	5c78 <_fflush_r+0x6c>
    5de8:	98c00017 	ldw	r3,0(r19)
    5dec:	00800744 	movi	r2,29
    5df0:	18bfde26 	beq	r3,r2,5d6c <_fflush_r+0x160>
    5df4:	9080030b 	ldhu	r2,12(r18)
    5df8:	8007883a 	mov	r3,r16
    5dfc:	10801014 	ori	r2,r2,64
    5e00:	9080030d 	sth	r2,12(r18)
    5e04:	003fcf06 	br	5d44 <_fflush_r+0x138>

00005e08 <fflush>:
    5e08:	01400034 	movhi	r5,0
    5e0c:	29570304 	addi	r5,r5,23564
    5e10:	2007883a 	mov	r3,r4
    5e14:	20000526 	beq	r4,zero,5e2c <fflush+0x24>
    5e18:	00800074 	movhi	r2,1
    5e1c:	10827c04 	addi	r2,r2,2544
    5e20:	11000017 	ldw	r4,0(r2)
    5e24:	180b883a 	mov	r5,r3
    5e28:	0005c0c1 	jmpi	5c0c <_fflush_r>
    5e2c:	00800074 	movhi	r2,1
    5e30:	10827d04 	addi	r2,r2,2548
    5e34:	11000017 	ldw	r4,0(r2)
    5e38:	00069d81 	jmpi	69d8 <_fwalk_reent>

00005e3c <std>:
    5e3c:	00800074 	movhi	r2,1
    5e40:	10a35f04 	addi	r2,r2,-29316
    5e44:	20800b15 	stw	r2,44(r4)
    5e48:	00800074 	movhi	r2,1
    5e4c:	10a39a04 	addi	r2,r2,-29080
    5e50:	20800815 	stw	r2,32(r4)
    5e54:	00c00074 	movhi	r3,1
    5e58:	18e37b04 	addi	r3,r3,-29204
    5e5c:	00800074 	movhi	r2,1
    5e60:	10a36104 	addi	r2,r2,-29308
    5e64:	2140030d 	sth	r5,12(r4)
    5e68:	2180038d 	sth	r6,14(r4)
    5e6c:	20c00915 	stw	r3,36(r4)
    5e70:	20800a15 	stw	r2,40(r4)
    5e74:	20000015 	stw	zero,0(r4)
    5e78:	20000115 	stw	zero,4(r4)
    5e7c:	20000215 	stw	zero,8(r4)
    5e80:	20000415 	stw	zero,16(r4)
    5e84:	20000515 	stw	zero,20(r4)
    5e88:	20000615 	stw	zero,24(r4)
    5e8c:	21000715 	stw	r4,28(r4)
    5e90:	f800283a 	ret

00005e94 <__sfp_lock_acquire>:
    5e94:	f800283a 	ret

00005e98 <__sfp_lock_release>:
    5e98:	f800283a 	ret

00005e9c <__sinit_lock_acquire>:
    5e9c:	f800283a 	ret

00005ea0 <__sinit_lock_release>:
    5ea0:	f800283a 	ret

00005ea4 <__sinit>:
    5ea4:	20800e17 	ldw	r2,56(r4)
    5ea8:	defffd04 	addi	sp,sp,-12
    5eac:	dc400115 	stw	r17,4(sp)
    5eb0:	dc000015 	stw	r16,0(sp)
    5eb4:	dfc00215 	stw	ra,8(sp)
    5eb8:	04400044 	movi	r17,1
    5ebc:	01400104 	movi	r5,4
    5ec0:	000d883a 	mov	r6,zero
    5ec4:	2021883a 	mov	r16,r4
    5ec8:	2200bb04 	addi	r8,r4,748
    5ecc:	200f883a 	mov	r7,r4
    5ed0:	10000526 	beq	r2,zero,5ee8 <__sinit+0x44>
    5ed4:	dfc00217 	ldw	ra,8(sp)
    5ed8:	dc400117 	ldw	r17,4(sp)
    5edc:	dc000017 	ldw	r16,0(sp)
    5ee0:	dec00304 	addi	sp,sp,12
    5ee4:	f800283a 	ret
    5ee8:	21000117 	ldw	r4,4(r4)
    5eec:	00800034 	movhi	r2,0
    5ef0:	1097e204 	addi	r2,r2,24456
    5ef4:	00c000c4 	movi	r3,3
    5ef8:	80800f15 	stw	r2,60(r16)
    5efc:	80c0b915 	stw	r3,740(r16)
    5f00:	8200ba15 	stw	r8,744(r16)
    5f04:	84400e15 	stw	r17,56(r16)
    5f08:	8000b815 	stw	zero,736(r16)
    5f0c:	0005e3c0 	call	5e3c <std>
    5f10:	81000217 	ldw	r4,8(r16)
    5f14:	880d883a 	mov	r6,r17
    5f18:	800f883a 	mov	r7,r16
    5f1c:	01400284 	movi	r5,10
    5f20:	0005e3c0 	call	5e3c <std>
    5f24:	81000317 	ldw	r4,12(r16)
    5f28:	800f883a 	mov	r7,r16
    5f2c:	01400484 	movi	r5,18
    5f30:	01800084 	movi	r6,2
    5f34:	dfc00217 	ldw	ra,8(sp)
    5f38:	dc400117 	ldw	r17,4(sp)
    5f3c:	dc000017 	ldw	r16,0(sp)
    5f40:	dec00304 	addi	sp,sp,12
    5f44:	0005e3c1 	jmpi	5e3c <std>

00005f48 <__fp_lock>:
    5f48:	0005883a 	mov	r2,zero
    5f4c:	f800283a 	ret

00005f50 <__fp_unlock>:
    5f50:	0005883a 	mov	r2,zero
    5f54:	f800283a 	ret

00005f58 <__fp_unlock_all>:
    5f58:	00800074 	movhi	r2,1
    5f5c:	10827c04 	addi	r2,r2,2544
    5f60:	11000017 	ldw	r4,0(r2)
    5f64:	01400034 	movhi	r5,0
    5f68:	2957d404 	addi	r5,r5,24400
    5f6c:	0006aa01 	jmpi	6aa0 <_fwalk>

00005f70 <__fp_lock_all>:
    5f70:	00800074 	movhi	r2,1
    5f74:	10827c04 	addi	r2,r2,2544
    5f78:	11000017 	ldw	r4,0(r2)
    5f7c:	01400034 	movhi	r5,0
    5f80:	2957d204 	addi	r5,r5,24392
    5f84:	0006aa01 	jmpi	6aa0 <_fwalk>

00005f88 <_cleanup_r>:
    5f88:	01400074 	movhi	r5,1
    5f8c:	29648c04 	addi	r5,r5,-28112
    5f90:	0006aa01 	jmpi	6aa0 <_fwalk>

00005f94 <_cleanup>:
    5f94:	00800074 	movhi	r2,1
    5f98:	10827d04 	addi	r2,r2,2548
    5f9c:	11000017 	ldw	r4,0(r2)
    5fa0:	0005f881 	jmpi	5f88 <_cleanup_r>

00005fa4 <__sfmoreglue>:
    5fa4:	defffc04 	addi	sp,sp,-16
    5fa8:	dc400115 	stw	r17,4(sp)
    5fac:	2c401724 	muli	r17,r5,92
    5fb0:	dc800215 	stw	r18,8(sp)
    5fb4:	2825883a 	mov	r18,r5
    5fb8:	89400304 	addi	r5,r17,12
    5fbc:	dc000015 	stw	r16,0(sp)
    5fc0:	dfc00315 	stw	ra,12(sp)
    5fc4:	0006db00 	call	6db0 <_malloc_r>
    5fc8:	0021883a 	mov	r16,zero
    5fcc:	880d883a 	mov	r6,r17
    5fd0:	000b883a 	mov	r5,zero
    5fd4:	10000626 	beq	r2,zero,5ff0 <__sfmoreglue+0x4c>
    5fd8:	11000304 	addi	r4,r2,12
    5fdc:	14800115 	stw	r18,4(r2)
    5fe0:	10000015 	stw	zero,0(r2)
    5fe4:	11000215 	stw	r4,8(r2)
    5fe8:	1021883a 	mov	r16,r2
    5fec:	00020440 	call	2044 <memset>
    5ff0:	8005883a 	mov	r2,r16
    5ff4:	dfc00317 	ldw	ra,12(sp)
    5ff8:	dc800217 	ldw	r18,8(sp)
    5ffc:	dc400117 	ldw	r17,4(sp)
    6000:	dc000017 	ldw	r16,0(sp)
    6004:	dec00404 	addi	sp,sp,16
    6008:	f800283a 	ret

0000600c <__sfp>:
    600c:	defffd04 	addi	sp,sp,-12
    6010:	00800074 	movhi	r2,1
    6014:	10827d04 	addi	r2,r2,2548
    6018:	dc000015 	stw	r16,0(sp)
    601c:	14000017 	ldw	r16,0(r2)
    6020:	dc400115 	stw	r17,4(sp)
    6024:	dfc00215 	stw	ra,8(sp)
    6028:	80800e17 	ldw	r2,56(r16)
    602c:	2023883a 	mov	r17,r4
    6030:	10002626 	beq	r2,zero,60cc <__sfp+0xc0>
    6034:	8400b804 	addi	r16,r16,736
    6038:	80800117 	ldw	r2,4(r16)
    603c:	81000217 	ldw	r4,8(r16)
    6040:	10ffffc4 	addi	r3,r2,-1
    6044:	18000916 	blt	r3,zero,606c <__sfp+0x60>
    6048:	2080030f 	ldh	r2,12(r4)
    604c:	10000b26 	beq	r2,zero,607c <__sfp+0x70>
    6050:	017fffc4 	movi	r5,-1
    6054:	00000206 	br	6060 <__sfp+0x54>
    6058:	2080030f 	ldh	r2,12(r4)
    605c:	10000726 	beq	r2,zero,607c <__sfp+0x70>
    6060:	18ffffc4 	addi	r3,r3,-1
    6064:	21001704 	addi	r4,r4,92
    6068:	197ffb1e 	bne	r3,r5,6058 <__sfp+0x4c>
    606c:	80800017 	ldw	r2,0(r16)
    6070:	10001926 	beq	r2,zero,60d8 <__sfp+0xcc>
    6074:	1021883a 	mov	r16,r2
    6078:	003fef06 	br	6038 <__sfp+0x2c>
    607c:	00bfffc4 	movi	r2,-1
    6080:	00c00044 	movi	r3,1
    6084:	2080038d 	sth	r2,14(r4)
    6088:	20c0030d 	sth	r3,12(r4)
    608c:	20000015 	stw	zero,0(r4)
    6090:	20000215 	stw	zero,8(r4)
    6094:	20000115 	stw	zero,4(r4)
    6098:	20000415 	stw	zero,16(r4)
    609c:	20000515 	stw	zero,20(r4)
    60a0:	20000615 	stw	zero,24(r4)
    60a4:	20000c15 	stw	zero,48(r4)
    60a8:	20000d15 	stw	zero,52(r4)
    60ac:	20001115 	stw	zero,68(r4)
    60b0:	20001215 	stw	zero,72(r4)
    60b4:	2005883a 	mov	r2,r4
    60b8:	dfc00217 	ldw	ra,8(sp)
    60bc:	dc400117 	ldw	r17,4(sp)
    60c0:	dc000017 	ldw	r16,0(sp)
    60c4:	dec00304 	addi	sp,sp,12
    60c8:	f800283a 	ret
    60cc:	8009883a 	mov	r4,r16
    60d0:	0005ea40 	call	5ea4 <__sinit>
    60d4:	003fd706 	br	6034 <__sfp+0x28>
    60d8:	8809883a 	mov	r4,r17
    60dc:	01400104 	movi	r5,4
    60e0:	0005fa40 	call	5fa4 <__sfmoreglue>
    60e4:	80800015 	stw	r2,0(r16)
    60e8:	103fe21e 	bne	r2,zero,6074 <__sfp+0x68>
    60ec:	00800304 	movi	r2,12
    60f0:	0009883a 	mov	r4,zero
    60f4:	88800015 	stw	r2,0(r17)
    60f8:	003fee06 	br	60b4 <__sfp+0xa8>

000060fc <_malloc_trim_r>:
    60fc:	defffb04 	addi	sp,sp,-20
    6100:	dcc00315 	stw	r19,12(sp)
    6104:	04c00074 	movhi	r19,1
    6108:	9cfc5304 	addi	r19,r19,-3764
    610c:	dc800215 	stw	r18,8(sp)
    6110:	dc400115 	stw	r17,4(sp)
    6114:	dc000015 	stw	r16,0(sp)
    6118:	2823883a 	mov	r17,r5
    611c:	2025883a 	mov	r18,r4
    6120:	dfc00415 	stw	ra,16(sp)
    6124:	000b9f80 	call	b9f8 <__malloc_lock>
    6128:	98800217 	ldw	r2,8(r19)
    612c:	9009883a 	mov	r4,r18
    6130:	000b883a 	mov	r5,zero
    6134:	10c00117 	ldw	r3,4(r2)
    6138:	00bfff04 	movi	r2,-4
    613c:	18a0703a 	and	r16,r3,r2
    6140:	8463c83a 	sub	r17,r16,r17
    6144:	8c43fbc4 	addi	r17,r17,4079
    6148:	8822d33a 	srli	r17,r17,12
    614c:	0083ffc4 	movi	r2,4095
    6150:	8c7fffc4 	addi	r17,r17,-1
    6154:	8822933a 	slli	r17,r17,12
    6158:	1440060e 	bge	r2,r17,6174 <_malloc_trim_r+0x78>
    615c:	0008d0c0 	call	8d0c <_sbrk_r>
    6160:	98c00217 	ldw	r3,8(r19)
    6164:	9009883a 	mov	r4,r18
    6168:	044bc83a 	sub	r5,zero,r17
    616c:	80c7883a 	add	r3,r16,r3
    6170:	10c00926 	beq	r2,r3,6198 <_malloc_trim_r+0x9c>
    6174:	000b9fc0 	call	b9fc <__malloc_unlock>
    6178:	0005883a 	mov	r2,zero
    617c:	dfc00417 	ldw	ra,16(sp)
    6180:	dcc00317 	ldw	r19,12(sp)
    6184:	dc800217 	ldw	r18,8(sp)
    6188:	dc400117 	ldw	r17,4(sp)
    618c:	dc000017 	ldw	r16,0(sp)
    6190:	dec00504 	addi	sp,sp,20
    6194:	f800283a 	ret
    6198:	9009883a 	mov	r4,r18
    619c:	0008d0c0 	call	8d0c <_sbrk_r>
    61a0:	844dc83a 	sub	r6,r16,r17
    61a4:	00ffffc4 	movi	r3,-1
    61a8:	9009883a 	mov	r4,r18
    61ac:	000b883a 	mov	r5,zero
    61b0:	01c00074 	movhi	r7,1
    61b4:	39c9d504 	addi	r7,r7,10068
    61b8:	31800054 	ori	r6,r6,1
    61bc:	10c00926 	beq	r2,r3,61e4 <_malloc_trim_r+0xe8>
    61c0:	38800017 	ldw	r2,0(r7)
    61c4:	98c00217 	ldw	r3,8(r19)
    61c8:	9009883a 	mov	r4,r18
    61cc:	1445c83a 	sub	r2,r2,r17
    61d0:	38800015 	stw	r2,0(r7)
    61d4:	19800115 	stw	r6,4(r3)
    61d8:	000b9fc0 	call	b9fc <__malloc_unlock>
    61dc:	00800044 	movi	r2,1
    61e0:	003fe606 	br	617c <_malloc_trim_r+0x80>
    61e4:	0008d0c0 	call	8d0c <_sbrk_r>
    61e8:	99800217 	ldw	r6,8(r19)
    61ec:	100f883a 	mov	r7,r2
    61f0:	9009883a 	mov	r4,r18
    61f4:	1187c83a 	sub	r3,r2,r6
    61f8:	008003c4 	movi	r2,15
    61fc:	19400054 	ori	r5,r3,1
    6200:	10ffdc0e 	bge	r2,r3,6174 <_malloc_trim_r+0x78>
    6204:	00800074 	movhi	r2,1
    6208:	10828104 	addi	r2,r2,2564
    620c:	10c00017 	ldw	r3,0(r2)
    6210:	00800074 	movhi	r2,1
    6214:	1089d504 	addi	r2,r2,10068
    6218:	31400115 	stw	r5,4(r6)
    621c:	38c7c83a 	sub	r3,r7,r3
    6220:	10c00015 	stw	r3,0(r2)
    6224:	003fd306 	br	6174 <_malloc_trim_r+0x78>

00006228 <_free_r>:
    6228:	defffd04 	addi	sp,sp,-12
    622c:	dc400115 	stw	r17,4(sp)
    6230:	dc000015 	stw	r16,0(sp)
    6234:	dfc00215 	stw	ra,8(sp)
    6238:	2821883a 	mov	r16,r5
    623c:	2023883a 	mov	r17,r4
    6240:	28005a26 	beq	r5,zero,63ac <_free_r+0x184>
    6244:	000b9f80 	call	b9f8 <__malloc_lock>
    6248:	823ffe04 	addi	r8,r16,-8
    624c:	41400117 	ldw	r5,4(r8)
    6250:	00bfff84 	movi	r2,-2
    6254:	02800074 	movhi	r10,1
    6258:	52bc5304 	addi	r10,r10,-3764
    625c:	288e703a 	and	r7,r5,r2
    6260:	41cd883a 	add	r6,r8,r7
    6264:	30c00117 	ldw	r3,4(r6)
    6268:	51000217 	ldw	r4,8(r10)
    626c:	00bfff04 	movi	r2,-4
    6270:	1892703a 	and	r9,r3,r2
    6274:	5017883a 	mov	r11,r10
    6278:	31006726 	beq	r6,r4,6418 <_free_r+0x1f0>
    627c:	2880004c 	andi	r2,r5,1
    6280:	1005003a 	cmpeq	r2,r2,zero
    6284:	32400115 	stw	r9,4(r6)
    6288:	10001a1e 	bne	r2,zero,62f4 <_free_r+0xcc>
    628c:	000b883a 	mov	r5,zero
    6290:	3247883a 	add	r3,r6,r9
    6294:	18800117 	ldw	r2,4(r3)
    6298:	1080004c 	andi	r2,r2,1
    629c:	1000231e 	bne	r2,zero,632c <_free_r+0x104>
    62a0:	280ac03a 	cmpne	r5,r5,zero
    62a4:	3a4f883a 	add	r7,r7,r9
    62a8:	2800451e 	bne	r5,zero,63c0 <_free_r+0x198>
    62ac:	31000217 	ldw	r4,8(r6)
    62b0:	00800074 	movhi	r2,1
    62b4:	10bc5504 	addi	r2,r2,-3756
    62b8:	20807b26 	beq	r4,r2,64a8 <_free_r+0x280>
    62bc:	30800317 	ldw	r2,12(r6)
    62c0:	3a07883a 	add	r3,r7,r8
    62c4:	19c00015 	stw	r7,0(r3)
    62c8:	11000215 	stw	r4,8(r2)
    62cc:	20800315 	stw	r2,12(r4)
    62d0:	38800054 	ori	r2,r7,1
    62d4:	40800115 	stw	r2,4(r8)
    62d8:	28001a26 	beq	r5,zero,6344 <_free_r+0x11c>
    62dc:	8809883a 	mov	r4,r17
    62e0:	dfc00217 	ldw	ra,8(sp)
    62e4:	dc400117 	ldw	r17,4(sp)
    62e8:	dc000017 	ldw	r16,0(sp)
    62ec:	dec00304 	addi	sp,sp,12
    62f0:	000b9fc1 	jmpi	b9fc <__malloc_unlock>
    62f4:	80bffe17 	ldw	r2,-8(r16)
    62f8:	50c00204 	addi	r3,r10,8
    62fc:	4091c83a 	sub	r8,r8,r2
    6300:	41000217 	ldw	r4,8(r8)
    6304:	388f883a 	add	r7,r7,r2
    6308:	20c06126 	beq	r4,r3,6490 <_free_r+0x268>
    630c:	40800317 	ldw	r2,12(r8)
    6310:	3247883a 	add	r3,r6,r9
    6314:	000b883a 	mov	r5,zero
    6318:	11000215 	stw	r4,8(r2)
    631c:	20800315 	stw	r2,12(r4)
    6320:	18800117 	ldw	r2,4(r3)
    6324:	1080004c 	andi	r2,r2,1
    6328:	103fdd26 	beq	r2,zero,62a0 <_free_r+0x78>
    632c:	38800054 	ori	r2,r7,1
    6330:	3a07883a 	add	r3,r7,r8
    6334:	280ac03a 	cmpne	r5,r5,zero
    6338:	40800115 	stw	r2,4(r8)
    633c:	19c00015 	stw	r7,0(r3)
    6340:	283fe61e 	bne	r5,zero,62dc <_free_r+0xb4>
    6344:	00807fc4 	movi	r2,511
    6348:	11c01f2e 	bgeu	r2,r7,63c8 <_free_r+0x1a0>
    634c:	3806d27a 	srli	r3,r7,9
    6350:	1800481e 	bne	r3,zero,6474 <_free_r+0x24c>
    6354:	3804d0fa 	srli	r2,r7,3
    6358:	100690fa 	slli	r3,r2,3
    635c:	1acd883a 	add	r6,r3,r11
    6360:	31400217 	ldw	r5,8(r6)
    6364:	31405926 	beq	r6,r5,64cc <_free_r+0x2a4>
    6368:	28800117 	ldw	r2,4(r5)
    636c:	00ffff04 	movi	r3,-4
    6370:	10c4703a 	and	r2,r2,r3
    6374:	3880022e 	bgeu	r7,r2,6380 <_free_r+0x158>
    6378:	29400217 	ldw	r5,8(r5)
    637c:	317ffa1e 	bne	r6,r5,6368 <_free_r+0x140>
    6380:	29800317 	ldw	r6,12(r5)
    6384:	41800315 	stw	r6,12(r8)
    6388:	41400215 	stw	r5,8(r8)
    638c:	8809883a 	mov	r4,r17
    6390:	2a000315 	stw	r8,12(r5)
    6394:	32000215 	stw	r8,8(r6)
    6398:	dfc00217 	ldw	ra,8(sp)
    639c:	dc400117 	ldw	r17,4(sp)
    63a0:	dc000017 	ldw	r16,0(sp)
    63a4:	dec00304 	addi	sp,sp,12
    63a8:	000b9fc1 	jmpi	b9fc <__malloc_unlock>
    63ac:	dfc00217 	ldw	ra,8(sp)
    63b0:	dc400117 	ldw	r17,4(sp)
    63b4:	dc000017 	ldw	r16,0(sp)
    63b8:	dec00304 	addi	sp,sp,12
    63bc:	f800283a 	ret
    63c0:	31000217 	ldw	r4,8(r6)
    63c4:	003fbd06 	br	62bc <_free_r+0x94>
    63c8:	3806d0fa 	srli	r3,r7,3
    63cc:	00800044 	movi	r2,1
    63d0:	51400117 	ldw	r5,4(r10)
    63d4:	180890fa 	slli	r4,r3,3
    63d8:	1807d0ba 	srai	r3,r3,2
    63dc:	22c9883a 	add	r4,r4,r11
    63e0:	21800217 	ldw	r6,8(r4)
    63e4:	10c4983a 	sll	r2,r2,r3
    63e8:	41000315 	stw	r4,12(r8)
    63ec:	41800215 	stw	r6,8(r8)
    63f0:	288ab03a 	or	r5,r5,r2
    63f4:	22000215 	stw	r8,8(r4)
    63f8:	8809883a 	mov	r4,r17
    63fc:	51400115 	stw	r5,4(r10)
    6400:	32000315 	stw	r8,12(r6)
    6404:	dfc00217 	ldw	ra,8(sp)
    6408:	dc400117 	ldw	r17,4(sp)
    640c:	dc000017 	ldw	r16,0(sp)
    6410:	dec00304 	addi	sp,sp,12
    6414:	000b9fc1 	jmpi	b9fc <__malloc_unlock>
    6418:	2880004c 	andi	r2,r5,1
    641c:	3a4d883a 	add	r6,r7,r9
    6420:	1000071e 	bne	r2,zero,6440 <_free_r+0x218>
    6424:	80bffe17 	ldw	r2,-8(r16)
    6428:	4091c83a 	sub	r8,r8,r2
    642c:	41000317 	ldw	r4,12(r8)
    6430:	40c00217 	ldw	r3,8(r8)
    6434:	308d883a 	add	r6,r6,r2
    6438:	20c00215 	stw	r3,8(r4)
    643c:	19000315 	stw	r4,12(r3)
    6440:	00800074 	movhi	r2,1
    6444:	10828004 	addi	r2,r2,2560
    6448:	11000017 	ldw	r4,0(r2)
    644c:	30c00054 	ori	r3,r6,1
    6450:	52000215 	stw	r8,8(r10)
    6454:	40c00115 	stw	r3,4(r8)
    6458:	313fa036 	bltu	r6,r4,62dc <_free_r+0xb4>
    645c:	00800074 	movhi	r2,1
    6460:	1089cb04 	addi	r2,r2,10028
    6464:	11400017 	ldw	r5,0(r2)
    6468:	8809883a 	mov	r4,r17
    646c:	00060fc0 	call	60fc <_malloc_trim_r>
    6470:	003f9a06 	br	62dc <_free_r+0xb4>
    6474:	00800104 	movi	r2,4
    6478:	10c0072e 	bgeu	r2,r3,6498 <_free_r+0x270>
    647c:	00800504 	movi	r2,20
    6480:	10c01936 	bltu	r2,r3,64e8 <_free_r+0x2c0>
    6484:	188016c4 	addi	r2,r3,91
    6488:	100690fa 	slli	r3,r2,3
    648c:	003fb306 	br	635c <_free_r+0x134>
    6490:	01400044 	movi	r5,1
    6494:	003f7e06 	br	6290 <_free_r+0x68>
    6498:	3804d1ba 	srli	r2,r7,6
    649c:	10800e04 	addi	r2,r2,56
    64a0:	100690fa 	slli	r3,r2,3
    64a4:	003fad06 	br	635c <_free_r+0x134>
    64a8:	22000315 	stw	r8,12(r4)
    64ac:	22000215 	stw	r8,8(r4)
    64b0:	3a05883a 	add	r2,r7,r8
    64b4:	38c00054 	ori	r3,r7,1
    64b8:	11c00015 	stw	r7,0(r2)
    64bc:	41000215 	stw	r4,8(r8)
    64c0:	40c00115 	stw	r3,4(r8)
    64c4:	41000315 	stw	r4,12(r8)
    64c8:	003f8406 	br	62dc <_free_r+0xb4>
    64cc:	1005d0ba 	srai	r2,r2,2
    64d0:	00c00044 	movi	r3,1
    64d4:	51000117 	ldw	r4,4(r10)
    64d8:	1886983a 	sll	r3,r3,r2
    64dc:	20c8b03a 	or	r4,r4,r3
    64e0:	51000115 	stw	r4,4(r10)
    64e4:	003fa706 	br	6384 <_free_r+0x15c>
    64e8:	00801504 	movi	r2,84
    64ec:	10c00436 	bltu	r2,r3,6500 <_free_r+0x2d8>
    64f0:	3804d33a 	srli	r2,r7,12
    64f4:	10801b84 	addi	r2,r2,110
    64f8:	100690fa 	slli	r3,r2,3
    64fc:	003f9706 	br	635c <_free_r+0x134>
    6500:	00805504 	movi	r2,340
    6504:	10c00436 	bltu	r2,r3,6518 <_free_r+0x2f0>
    6508:	3804d3fa 	srli	r2,r7,15
    650c:	10801dc4 	addi	r2,r2,119
    6510:	100690fa 	slli	r3,r2,3
    6514:	003f9106 	br	635c <_free_r+0x134>
    6518:	00815504 	movi	r2,1364
    651c:	10c0032e 	bgeu	r2,r3,652c <_free_r+0x304>
    6520:	00801f84 	movi	r2,126
    6524:	00c0fc04 	movi	r3,1008
    6528:	003f8c06 	br	635c <_free_r+0x134>
    652c:	3804d4ba 	srli	r2,r7,18
    6530:	10801f04 	addi	r2,r2,124
    6534:	100690fa 	slli	r3,r2,3
    6538:	003f8806 	br	635c <_free_r+0x134>

0000653c <__sfvwrite_r>:
    653c:	30800217 	ldw	r2,8(r6)
    6540:	defff504 	addi	sp,sp,-44
    6544:	df000915 	stw	fp,36(sp)
    6548:	dd800715 	stw	r22,28(sp)
    654c:	dc800315 	stw	r18,12(sp)
    6550:	dfc00a15 	stw	ra,40(sp)
    6554:	ddc00815 	stw	r23,32(sp)
    6558:	dd400615 	stw	r21,24(sp)
    655c:	dd000515 	stw	r20,20(sp)
    6560:	dcc00415 	stw	r19,16(sp)
    6564:	dc400215 	stw	r17,8(sp)
    6568:	dc000115 	stw	r16,4(sp)
    656c:	302d883a 	mov	r22,r6
    6570:	2039883a 	mov	fp,r4
    6574:	2825883a 	mov	r18,r5
    6578:	10001c26 	beq	r2,zero,65ec <__sfvwrite_r+0xb0>
    657c:	29c0030b 	ldhu	r7,12(r5)
    6580:	3880020c 	andi	r2,r7,8
    6584:	10002726 	beq	r2,zero,6624 <__sfvwrite_r+0xe8>
    6588:	28800417 	ldw	r2,16(r5)
    658c:	10002526 	beq	r2,zero,6624 <__sfvwrite_r+0xe8>
    6590:	3880008c 	andi	r2,r7,2
    6594:	b5400017 	ldw	r21,0(r22)
    6598:	10002826 	beq	r2,zero,663c <__sfvwrite_r+0x100>
    659c:	0021883a 	mov	r16,zero
    65a0:	0023883a 	mov	r17,zero
    65a4:	880d883a 	mov	r6,r17
    65a8:	e009883a 	mov	r4,fp
    65ac:	00810004 	movi	r2,1024
    65b0:	80006e26 	beq	r16,zero,676c <__sfvwrite_r+0x230>
    65b4:	800f883a 	mov	r7,r16
    65b8:	91400717 	ldw	r5,28(r18)
    65bc:	1400012e 	bgeu	r2,r16,65c4 <__sfvwrite_r+0x88>
    65c0:	100f883a 	mov	r7,r2
    65c4:	90c00917 	ldw	r3,36(r18)
    65c8:	183ee83a 	callr	r3
    65cc:	1007883a 	mov	r3,r2
    65d0:	80a1c83a 	sub	r16,r16,r2
    65d4:	88a3883a 	add	r17,r17,r2
    65d8:	00806d0e 	bge	zero,r2,6790 <__sfvwrite_r+0x254>
    65dc:	b0800217 	ldw	r2,8(r22)
    65e0:	10c5c83a 	sub	r2,r2,r3
    65e4:	b0800215 	stw	r2,8(r22)
    65e8:	103fee1e 	bne	r2,zero,65a4 <__sfvwrite_r+0x68>
    65ec:	0009883a 	mov	r4,zero
    65f0:	2005883a 	mov	r2,r4
    65f4:	dfc00a17 	ldw	ra,40(sp)
    65f8:	df000917 	ldw	fp,36(sp)
    65fc:	ddc00817 	ldw	r23,32(sp)
    6600:	dd800717 	ldw	r22,28(sp)
    6604:	dd400617 	ldw	r21,24(sp)
    6608:	dd000517 	ldw	r20,20(sp)
    660c:	dcc00417 	ldw	r19,16(sp)
    6610:	dc800317 	ldw	r18,12(sp)
    6614:	dc400217 	ldw	r17,8(sp)
    6618:	dc000117 	ldw	r16,4(sp)
    661c:	dec00b04 	addi	sp,sp,44
    6620:	f800283a 	ret
    6624:	00043040 	call	4304 <__swsetup_r>
    6628:	1000e41e 	bne	r2,zero,69bc <__sfvwrite_r+0x480>
    662c:	91c0030b 	ldhu	r7,12(r18)
    6630:	b5400017 	ldw	r21,0(r22)
    6634:	3880008c 	andi	r2,r7,2
    6638:	103fd81e 	bne	r2,zero,659c <__sfvwrite_r+0x60>
    663c:	3880004c 	andi	r2,r7,1
    6640:	1005003a 	cmpeq	r2,r2,zero
    6644:	10005726 	beq	r2,zero,67a4 <__sfvwrite_r+0x268>
    6648:	0029883a 	mov	r20,zero
    664c:	002f883a 	mov	r23,zero
    6650:	a0004226 	beq	r20,zero,675c <__sfvwrite_r+0x220>
    6654:	3880800c 	andi	r2,r7,512
    6658:	94000217 	ldw	r16,8(r18)
    665c:	10008b26 	beq	r2,zero,688c <__sfvwrite_r+0x350>
    6660:	800d883a 	mov	r6,r16
    6664:	a400a536 	bltu	r20,r16,68fc <__sfvwrite_r+0x3c0>
    6668:	3881200c 	andi	r2,r7,1152
    666c:	10002726 	beq	r2,zero,670c <__sfvwrite_r+0x1d0>
    6670:	90800517 	ldw	r2,20(r18)
    6674:	92000417 	ldw	r8,16(r18)
    6678:	91400017 	ldw	r5,0(r18)
    667c:	1087883a 	add	r3,r2,r2
    6680:	1887883a 	add	r3,r3,r2
    6684:	1808d7fa 	srli	r4,r3,31
    6688:	2a21c83a 	sub	r16,r5,r8
    668c:	80800044 	addi	r2,r16,1
    6690:	20c9883a 	add	r4,r4,r3
    6694:	2027d07a 	srai	r19,r4,1
    6698:	a085883a 	add	r2,r20,r2
    669c:	980d883a 	mov	r6,r19
    66a0:	9880022e 	bgeu	r19,r2,66ac <__sfvwrite_r+0x170>
    66a4:	1027883a 	mov	r19,r2
    66a8:	100d883a 	mov	r6,r2
    66ac:	3881000c 	andi	r2,r7,1024
    66b0:	1000b826 	beq	r2,zero,6994 <__sfvwrite_r+0x458>
    66b4:	300b883a 	mov	r5,r6
    66b8:	e009883a 	mov	r4,fp
    66bc:	0006db00 	call	6db0 <_malloc_r>
    66c0:	10003126 	beq	r2,zero,6788 <__sfvwrite_r+0x24c>
    66c4:	91400417 	ldw	r5,16(r18)
    66c8:	1009883a 	mov	r4,r2
    66cc:	800d883a 	mov	r6,r16
    66d0:	1023883a 	mov	r17,r2
    66d4:	0001fa40 	call	1fa4 <memcpy>
    66d8:	90c0030b 	ldhu	r3,12(r18)
    66dc:	00beffc4 	movi	r2,-1025
    66e0:	1886703a 	and	r3,r3,r2
    66e4:	18c02014 	ori	r3,r3,128
    66e8:	90c0030d 	sth	r3,12(r18)
    66ec:	9c07c83a 	sub	r3,r19,r16
    66f0:	8c05883a 	add	r2,r17,r16
    66f4:	a00d883a 	mov	r6,r20
    66f8:	a021883a 	mov	r16,r20
    66fc:	90800015 	stw	r2,0(r18)
    6700:	90c00215 	stw	r3,8(r18)
    6704:	94400415 	stw	r17,16(r18)
    6708:	94c00515 	stw	r19,20(r18)
    670c:	91000017 	ldw	r4,0(r18)
    6710:	b80b883a 	mov	r5,r23
    6714:	a023883a 	mov	r17,r20
    6718:	00075d40 	call	75d4 <memmove>
    671c:	90c00217 	ldw	r3,8(r18)
    6720:	90800017 	ldw	r2,0(r18)
    6724:	a027883a 	mov	r19,r20
    6728:	1c07c83a 	sub	r3,r3,r16
    672c:	1405883a 	add	r2,r2,r16
    6730:	90c00215 	stw	r3,8(r18)
    6734:	a021883a 	mov	r16,r20
    6738:	90800015 	stw	r2,0(r18)
    673c:	b0800217 	ldw	r2,8(r22)
    6740:	1405c83a 	sub	r2,r2,r16
    6744:	b0800215 	stw	r2,8(r22)
    6748:	103fa826 	beq	r2,zero,65ec <__sfvwrite_r+0xb0>
    674c:	a469c83a 	sub	r20,r20,r17
    6750:	91c0030b 	ldhu	r7,12(r18)
    6754:	bcef883a 	add	r23,r23,r19
    6758:	a03fbe1e 	bne	r20,zero,6654 <__sfvwrite_r+0x118>
    675c:	adc00017 	ldw	r23,0(r21)
    6760:	ad000117 	ldw	r20,4(r21)
    6764:	ad400204 	addi	r21,r21,8
    6768:	003fb906 	br	6650 <__sfvwrite_r+0x114>
    676c:	ac400017 	ldw	r17,0(r21)
    6770:	ac000117 	ldw	r16,4(r21)
    6774:	ad400204 	addi	r21,r21,8
    6778:	003f8a06 	br	65a4 <__sfvwrite_r+0x68>
    677c:	91400417 	ldw	r5,16(r18)
    6780:	e009883a 	mov	r4,fp
    6784:	00062280 	call	6228 <_free_r>
    6788:	00800304 	movi	r2,12
    678c:	e0800015 	stw	r2,0(fp)
    6790:	9080030b 	ldhu	r2,12(r18)
    6794:	013fffc4 	movi	r4,-1
    6798:	10801014 	ori	r2,r2,64
    679c:	9080030d 	sth	r2,12(r18)
    67a0:	003f9306 	br	65f0 <__sfvwrite_r+0xb4>
    67a4:	0027883a 	mov	r19,zero
    67a8:	002f883a 	mov	r23,zero
    67ac:	d8000015 	stw	zero,0(sp)
    67b0:	0029883a 	mov	r20,zero
    67b4:	98001e26 	beq	r19,zero,6830 <__sfvwrite_r+0x2f4>
    67b8:	d8c00017 	ldw	r3,0(sp)
    67bc:	1804c03a 	cmpne	r2,r3,zero
    67c0:	10005e26 	beq	r2,zero,693c <__sfvwrite_r+0x400>
    67c4:	9821883a 	mov	r16,r19
    67c8:	a4c0012e 	bgeu	r20,r19,67d0 <__sfvwrite_r+0x294>
    67cc:	a021883a 	mov	r16,r20
    67d0:	91000017 	ldw	r4,0(r18)
    67d4:	90800417 	ldw	r2,16(r18)
    67d8:	91800217 	ldw	r6,8(r18)
    67dc:	91c00517 	ldw	r7,20(r18)
    67e0:	1100022e 	bgeu	r2,r4,67ec <__sfvwrite_r+0x2b0>
    67e4:	31e3883a 	add	r17,r6,r7
    67e8:	8c001616 	blt	r17,r16,6844 <__sfvwrite_r+0x308>
    67ec:	81c03816 	blt	r16,r7,68d0 <__sfvwrite_r+0x394>
    67f0:	90c00917 	ldw	r3,36(r18)
    67f4:	91400717 	ldw	r5,28(r18)
    67f8:	e009883a 	mov	r4,fp
    67fc:	b80d883a 	mov	r6,r23
    6800:	183ee83a 	callr	r3
    6804:	1023883a 	mov	r17,r2
    6808:	00bfe10e 	bge	zero,r2,6790 <__sfvwrite_r+0x254>
    680c:	a469c83a 	sub	r20,r20,r17
    6810:	a0001826 	beq	r20,zero,6874 <__sfvwrite_r+0x338>
    6814:	b0800217 	ldw	r2,8(r22)
    6818:	1445c83a 	sub	r2,r2,r17
    681c:	b0800215 	stw	r2,8(r22)
    6820:	103f7226 	beq	r2,zero,65ec <__sfvwrite_r+0xb0>
    6824:	9c67c83a 	sub	r19,r19,r17
    6828:	bc6f883a 	add	r23,r23,r17
    682c:	983fe21e 	bne	r19,zero,67b8 <__sfvwrite_r+0x27c>
    6830:	adc00017 	ldw	r23,0(r21)
    6834:	acc00117 	ldw	r19,4(r21)
    6838:	ad400204 	addi	r21,r21,8
    683c:	d8000015 	stw	zero,0(sp)
    6840:	003fdc06 	br	67b4 <__sfvwrite_r+0x278>
    6844:	b80b883a 	mov	r5,r23
    6848:	880d883a 	mov	r6,r17
    684c:	00075d40 	call	75d4 <memmove>
    6850:	90c00017 	ldw	r3,0(r18)
    6854:	e009883a 	mov	r4,fp
    6858:	900b883a 	mov	r5,r18
    685c:	1c47883a 	add	r3,r3,r17
    6860:	90c00015 	stw	r3,0(r18)
    6864:	0005c0c0 	call	5c0c <_fflush_r>
    6868:	103fc91e 	bne	r2,zero,6790 <__sfvwrite_r+0x254>
    686c:	a469c83a 	sub	r20,r20,r17
    6870:	a03fe81e 	bne	r20,zero,6814 <__sfvwrite_r+0x2d8>
    6874:	e009883a 	mov	r4,fp
    6878:	900b883a 	mov	r5,r18
    687c:	0005c0c0 	call	5c0c <_fflush_r>
    6880:	103fc31e 	bne	r2,zero,6790 <__sfvwrite_r+0x254>
    6884:	d8000015 	stw	zero,0(sp)
    6888:	003fe206 	br	6814 <__sfvwrite_r+0x2d8>
    688c:	91000017 	ldw	r4,0(r18)
    6890:	90800417 	ldw	r2,16(r18)
    6894:	1100022e 	bgeu	r2,r4,68a0 <__sfvwrite_r+0x364>
    6898:	8023883a 	mov	r17,r16
    689c:	85003136 	bltu	r16,r20,6964 <__sfvwrite_r+0x428>
    68a0:	91c00517 	ldw	r7,20(r18)
    68a4:	a1c01836 	bltu	r20,r7,6908 <__sfvwrite_r+0x3cc>
    68a8:	90c00917 	ldw	r3,36(r18)
    68ac:	91400717 	ldw	r5,28(r18)
    68b0:	e009883a 	mov	r4,fp
    68b4:	b80d883a 	mov	r6,r23
    68b8:	183ee83a 	callr	r3
    68bc:	1021883a 	mov	r16,r2
    68c0:	00bfb30e 	bge	zero,r2,6790 <__sfvwrite_r+0x254>
    68c4:	1023883a 	mov	r17,r2
    68c8:	1027883a 	mov	r19,r2
    68cc:	003f9b06 	br	673c <__sfvwrite_r+0x200>
    68d0:	b80b883a 	mov	r5,r23
    68d4:	800d883a 	mov	r6,r16
    68d8:	00075d40 	call	75d4 <memmove>
    68dc:	90c00217 	ldw	r3,8(r18)
    68e0:	90800017 	ldw	r2,0(r18)
    68e4:	8023883a 	mov	r17,r16
    68e8:	1c07c83a 	sub	r3,r3,r16
    68ec:	1405883a 	add	r2,r2,r16
    68f0:	90c00215 	stw	r3,8(r18)
    68f4:	90800015 	stw	r2,0(r18)
    68f8:	003fc406 	br	680c <__sfvwrite_r+0x2d0>
    68fc:	a00d883a 	mov	r6,r20
    6900:	a021883a 	mov	r16,r20
    6904:	003f8106 	br	670c <__sfvwrite_r+0x1d0>
    6908:	b80b883a 	mov	r5,r23
    690c:	a00d883a 	mov	r6,r20
    6910:	00075d40 	call	75d4 <memmove>
    6914:	90c00217 	ldw	r3,8(r18)
    6918:	90800017 	ldw	r2,0(r18)
    691c:	a021883a 	mov	r16,r20
    6920:	1d07c83a 	sub	r3,r3,r20
    6924:	1505883a 	add	r2,r2,r20
    6928:	a023883a 	mov	r17,r20
    692c:	a027883a 	mov	r19,r20
    6930:	90c00215 	stw	r3,8(r18)
    6934:	90800015 	stw	r2,0(r18)
    6938:	003f8006 	br	673c <__sfvwrite_r+0x200>
    693c:	b809883a 	mov	r4,r23
    6940:	01400284 	movi	r5,10
    6944:	980d883a 	mov	r6,r19
    6948:	00074f00 	call	74f0 <memchr>
    694c:	10001726 	beq	r2,zero,69ac <__sfvwrite_r+0x470>
    6950:	15c5c83a 	sub	r2,r2,r23
    6954:	15000044 	addi	r20,r2,1
    6958:	00800044 	movi	r2,1
    695c:	d8800015 	stw	r2,0(sp)
    6960:	003f9806 	br	67c4 <__sfvwrite_r+0x288>
    6964:	b80b883a 	mov	r5,r23
    6968:	800d883a 	mov	r6,r16
    696c:	00075d40 	call	75d4 <memmove>
    6970:	90c00017 	ldw	r3,0(r18)
    6974:	e009883a 	mov	r4,fp
    6978:	900b883a 	mov	r5,r18
    697c:	1c07883a 	add	r3,r3,r16
    6980:	90c00015 	stw	r3,0(r18)
    6984:	8027883a 	mov	r19,r16
    6988:	0005c0c0 	call	5c0c <_fflush_r>
    698c:	103f6b26 	beq	r2,zero,673c <__sfvwrite_r+0x200>
    6990:	003f7f06 	br	6790 <__sfvwrite_r+0x254>
    6994:	400b883a 	mov	r5,r8
    6998:	e009883a 	mov	r4,fp
    699c:	00086a80 	call	86a8 <_realloc_r>
    69a0:	103f7626 	beq	r2,zero,677c <__sfvwrite_r+0x240>
    69a4:	1023883a 	mov	r17,r2
    69a8:	003f5006 	br	66ec <__sfvwrite_r+0x1b0>
    69ac:	00c00044 	movi	r3,1
    69b0:	9d000044 	addi	r20,r19,1
    69b4:	d8c00015 	stw	r3,0(sp)
    69b8:	003f8206 	br	67c4 <__sfvwrite_r+0x288>
    69bc:	9080030b 	ldhu	r2,12(r18)
    69c0:	00c00244 	movi	r3,9
    69c4:	013fffc4 	movi	r4,-1
    69c8:	10801014 	ori	r2,r2,64
    69cc:	9080030d 	sth	r2,12(r18)
    69d0:	e0c00015 	stw	r3,0(fp)
    69d4:	003f0606 	br	65f0 <__sfvwrite_r+0xb4>

000069d8 <_fwalk_reent>:
    69d8:	defff704 	addi	sp,sp,-36
    69dc:	dcc00315 	stw	r19,12(sp)
    69e0:	24c0b804 	addi	r19,r4,736
    69e4:	dd800615 	stw	r22,24(sp)
    69e8:	dd400515 	stw	r21,20(sp)
    69ec:	dfc00815 	stw	ra,32(sp)
    69f0:	ddc00715 	stw	r23,28(sp)
    69f4:	dd000415 	stw	r20,16(sp)
    69f8:	dc800215 	stw	r18,8(sp)
    69fc:	dc400115 	stw	r17,4(sp)
    6a00:	dc000015 	stw	r16,0(sp)
    6a04:	202b883a 	mov	r21,r4
    6a08:	282d883a 	mov	r22,r5
    6a0c:	0005e940 	call	5e94 <__sfp_lock_acquire>
    6a10:	98002126 	beq	r19,zero,6a98 <_fwalk_reent+0xc0>
    6a14:	002f883a 	mov	r23,zero
    6a18:	9c800117 	ldw	r18,4(r19)
    6a1c:	9c000217 	ldw	r16,8(r19)
    6a20:	90bfffc4 	addi	r2,r18,-1
    6a24:	10000d16 	blt	r2,zero,6a5c <_fwalk_reent+0x84>
    6a28:	0023883a 	mov	r17,zero
    6a2c:	053fffc4 	movi	r20,-1
    6a30:	8080030f 	ldh	r2,12(r16)
    6a34:	8c400044 	addi	r17,r17,1
    6a38:	10000626 	beq	r2,zero,6a54 <_fwalk_reent+0x7c>
    6a3c:	8080038f 	ldh	r2,14(r16)
    6a40:	800b883a 	mov	r5,r16
    6a44:	a809883a 	mov	r4,r21
    6a48:	15000226 	beq	r2,r20,6a54 <_fwalk_reent+0x7c>
    6a4c:	b03ee83a 	callr	r22
    6a50:	b8aeb03a 	or	r23,r23,r2
    6a54:	84001704 	addi	r16,r16,92
    6a58:	947ff51e 	bne	r18,r17,6a30 <_fwalk_reent+0x58>
    6a5c:	9cc00017 	ldw	r19,0(r19)
    6a60:	983fed1e 	bne	r19,zero,6a18 <_fwalk_reent+0x40>
    6a64:	0005e980 	call	5e98 <__sfp_lock_release>
    6a68:	b805883a 	mov	r2,r23
    6a6c:	dfc00817 	ldw	ra,32(sp)
    6a70:	ddc00717 	ldw	r23,28(sp)
    6a74:	dd800617 	ldw	r22,24(sp)
    6a78:	dd400517 	ldw	r21,20(sp)
    6a7c:	dd000417 	ldw	r20,16(sp)
    6a80:	dcc00317 	ldw	r19,12(sp)
    6a84:	dc800217 	ldw	r18,8(sp)
    6a88:	dc400117 	ldw	r17,4(sp)
    6a8c:	dc000017 	ldw	r16,0(sp)
    6a90:	dec00904 	addi	sp,sp,36
    6a94:	f800283a 	ret
    6a98:	002f883a 	mov	r23,zero
    6a9c:	003ff106 	br	6a64 <_fwalk_reent+0x8c>

00006aa0 <_fwalk>:
    6aa0:	defff804 	addi	sp,sp,-32
    6aa4:	dcc00315 	stw	r19,12(sp)
    6aa8:	24c0b804 	addi	r19,r4,736
    6aac:	dd400515 	stw	r21,20(sp)
    6ab0:	dfc00715 	stw	ra,28(sp)
    6ab4:	dd800615 	stw	r22,24(sp)
    6ab8:	dd000415 	stw	r20,16(sp)
    6abc:	dc800215 	stw	r18,8(sp)
    6ac0:	dc400115 	stw	r17,4(sp)
    6ac4:	dc000015 	stw	r16,0(sp)
    6ac8:	282b883a 	mov	r21,r5
    6acc:	0005e940 	call	5e94 <__sfp_lock_acquire>
    6ad0:	98001f26 	beq	r19,zero,6b50 <_fwalk+0xb0>
    6ad4:	002d883a 	mov	r22,zero
    6ad8:	9c800117 	ldw	r18,4(r19)
    6adc:	9c000217 	ldw	r16,8(r19)
    6ae0:	90bfffc4 	addi	r2,r18,-1
    6ae4:	10000c16 	blt	r2,zero,6b18 <_fwalk+0x78>
    6ae8:	0023883a 	mov	r17,zero
    6aec:	053fffc4 	movi	r20,-1
    6af0:	8080030f 	ldh	r2,12(r16)
    6af4:	8c400044 	addi	r17,r17,1
    6af8:	10000526 	beq	r2,zero,6b10 <_fwalk+0x70>
    6afc:	8080038f 	ldh	r2,14(r16)
    6b00:	8009883a 	mov	r4,r16
    6b04:	15000226 	beq	r2,r20,6b10 <_fwalk+0x70>
    6b08:	a83ee83a 	callr	r21
    6b0c:	b0acb03a 	or	r22,r22,r2
    6b10:	84001704 	addi	r16,r16,92
    6b14:	947ff61e 	bne	r18,r17,6af0 <_fwalk+0x50>
    6b18:	9cc00017 	ldw	r19,0(r19)
    6b1c:	983fee1e 	bne	r19,zero,6ad8 <_fwalk+0x38>
    6b20:	0005e980 	call	5e98 <__sfp_lock_release>
    6b24:	b005883a 	mov	r2,r22
    6b28:	dfc00717 	ldw	ra,28(sp)
    6b2c:	dd800617 	ldw	r22,24(sp)
    6b30:	dd400517 	ldw	r21,20(sp)
    6b34:	dd000417 	ldw	r20,16(sp)
    6b38:	dcc00317 	ldw	r19,12(sp)
    6b3c:	dc800217 	ldw	r18,8(sp)
    6b40:	dc400117 	ldw	r17,4(sp)
    6b44:	dc000017 	ldw	r16,0(sp)
    6b48:	dec00804 	addi	sp,sp,32
    6b4c:	f800283a 	ret
    6b50:	002d883a 	mov	r22,zero
    6b54:	003ff206 	br	6b20 <_fwalk+0x80>

00006b58 <__locale_charset>:
    6b58:	d0a00317 	ldw	r2,-32756(gp)
    6b5c:	f800283a 	ret

00006b60 <_localeconv_r>:
    6b60:	00800074 	movhi	r2,1
    6b64:	10babf04 	addi	r2,r2,-5380
    6b68:	f800283a 	ret

00006b6c <localeconv>:
    6b6c:	00800074 	movhi	r2,1
    6b70:	10827c04 	addi	r2,r2,2544
    6b74:	11000017 	ldw	r4,0(r2)
    6b78:	0006b601 	jmpi	6b60 <_localeconv_r>

00006b7c <_setlocale_r>:
    6b7c:	defffc04 	addi	sp,sp,-16
    6b80:	00c00074 	movhi	r3,1
    6b84:	18faba04 	addi	r3,r3,-5400
    6b88:	dc800215 	stw	r18,8(sp)
    6b8c:	dc400115 	stw	r17,4(sp)
    6b90:	dc000015 	stw	r16,0(sp)
    6b94:	2023883a 	mov	r17,r4
    6b98:	2825883a 	mov	r18,r5
    6b9c:	dfc00315 	stw	ra,12(sp)
    6ba0:	3021883a 	mov	r16,r6
    6ba4:	3009883a 	mov	r4,r6
    6ba8:	180b883a 	mov	r5,r3
    6bac:	30000926 	beq	r6,zero,6bd4 <_setlocale_r+0x58>
    6bb0:	0008ec80 	call	8ec8 <strcmp>
    6bb4:	8009883a 	mov	r4,r16
    6bb8:	01400074 	movhi	r5,1
    6bbc:	297a2904 	addi	r5,r5,-5980
    6bc0:	10000b1e 	bne	r2,zero,6bf0 <_setlocale_r+0x74>
    6bc4:	8c000d15 	stw	r16,52(r17)
    6bc8:	8c800c15 	stw	r18,48(r17)
    6bcc:	00c00074 	movhi	r3,1
    6bd0:	18faba04 	addi	r3,r3,-5400
    6bd4:	1805883a 	mov	r2,r3
    6bd8:	dfc00317 	ldw	ra,12(sp)
    6bdc:	dc800217 	ldw	r18,8(sp)
    6be0:	dc400117 	ldw	r17,4(sp)
    6be4:	dc000017 	ldw	r16,0(sp)
    6be8:	dec00404 	addi	sp,sp,16
    6bec:	f800283a 	ret
    6bf0:	0008ec80 	call	8ec8 <strcmp>
    6bf4:	0007883a 	mov	r3,zero
    6bf8:	103ff226 	beq	r2,zero,6bc4 <_setlocale_r+0x48>
    6bfc:	003ff506 	br	6bd4 <_setlocale_r+0x58>

00006c00 <setlocale>:
    6c00:	01800074 	movhi	r6,1
    6c04:	31827c04 	addi	r6,r6,2544
    6c08:	2007883a 	mov	r3,r4
    6c0c:	31000017 	ldw	r4,0(r6)
    6c10:	280d883a 	mov	r6,r5
    6c14:	180b883a 	mov	r5,r3
    6c18:	0006b7c1 	jmpi	6b7c <_setlocale_r>

00006c1c <__smakebuf_r>:
    6c1c:	2880030b 	ldhu	r2,12(r5)
    6c20:	deffed04 	addi	sp,sp,-76
    6c24:	dc401015 	stw	r17,64(sp)
    6c28:	1080008c 	andi	r2,r2,2
    6c2c:	dc000f15 	stw	r16,60(sp)
    6c30:	dfc01215 	stw	ra,72(sp)
    6c34:	dc801115 	stw	r18,68(sp)
    6c38:	2821883a 	mov	r16,r5
    6c3c:	2023883a 	mov	r17,r4
    6c40:	10000b26 	beq	r2,zero,6c70 <__smakebuf_r+0x54>
    6c44:	28c010c4 	addi	r3,r5,67
    6c48:	00800044 	movi	r2,1
    6c4c:	28800515 	stw	r2,20(r5)
    6c50:	28c00415 	stw	r3,16(r5)
    6c54:	28c00015 	stw	r3,0(r5)
    6c58:	dfc01217 	ldw	ra,72(sp)
    6c5c:	dc801117 	ldw	r18,68(sp)
    6c60:	dc401017 	ldw	r17,64(sp)
    6c64:	dc000f17 	ldw	r16,60(sp)
    6c68:	dec01304 	addi	sp,sp,76
    6c6c:	f800283a 	ret
    6c70:	2940038f 	ldh	r5,14(r5)
    6c74:	28002116 	blt	r5,zero,6cfc <__smakebuf_r+0xe0>
    6c78:	d80d883a 	mov	r6,sp
    6c7c:	00092440 	call	9244 <_fstat_r>
    6c80:	10001e16 	blt	r2,zero,6cfc <__smakebuf_r+0xe0>
    6c84:	d8800117 	ldw	r2,4(sp)
    6c88:	00e00014 	movui	r3,32768
    6c8c:	113c000c 	andi	r4,r2,61440
    6c90:	20c03126 	beq	r4,r3,6d58 <__smakebuf_r+0x13c>
    6c94:	8080030b 	ldhu	r2,12(r16)
    6c98:	00c80004 	movi	r3,8192
    6c9c:	10820014 	ori	r2,r2,2048
    6ca0:	8080030d 	sth	r2,12(r16)
    6ca4:	20c01e26 	beq	r4,r3,6d20 <__smakebuf_r+0x104>
    6ca8:	04810004 	movi	r18,1024
    6cac:	8809883a 	mov	r4,r17
    6cb0:	900b883a 	mov	r5,r18
    6cb4:	0006db00 	call	6db0 <_malloc_r>
    6cb8:	1009883a 	mov	r4,r2
    6cbc:	10003126 	beq	r2,zero,6d84 <__smakebuf_r+0x168>
    6cc0:	80c0030b 	ldhu	r3,12(r16)
    6cc4:	00800034 	movhi	r2,0
    6cc8:	1097e204 	addi	r2,r2,24456
    6ccc:	88800f15 	stw	r2,60(r17)
    6cd0:	18c02014 	ori	r3,r3,128
    6cd4:	84800515 	stw	r18,20(r16)
    6cd8:	80c0030d 	sth	r3,12(r16)
    6cdc:	81000415 	stw	r4,16(r16)
    6ce0:	81000015 	stw	r4,0(r16)
    6ce4:	dfc01217 	ldw	ra,72(sp)
    6ce8:	dc801117 	ldw	r18,68(sp)
    6cec:	dc401017 	ldw	r17,64(sp)
    6cf0:	dc000f17 	ldw	r16,60(sp)
    6cf4:	dec01304 	addi	sp,sp,76
    6cf8:	f800283a 	ret
    6cfc:	80c0030b 	ldhu	r3,12(r16)
    6d00:	1880200c 	andi	r2,r3,128
    6d04:	10000426 	beq	r2,zero,6d18 <__smakebuf_r+0xfc>
    6d08:	04801004 	movi	r18,64
    6d0c:	18820014 	ori	r2,r3,2048
    6d10:	8080030d 	sth	r2,12(r16)
    6d14:	003fe506 	br	6cac <__smakebuf_r+0x90>
    6d18:	04810004 	movi	r18,1024
    6d1c:	003ffb06 	br	6d0c <__smakebuf_r+0xf0>
    6d20:	8140038f 	ldh	r5,14(r16)
    6d24:	8809883a 	mov	r4,r17
    6d28:	00092b80 	call	92b8 <_isatty_r>
    6d2c:	103fde26 	beq	r2,zero,6ca8 <__smakebuf_r+0x8c>
    6d30:	8080030b 	ldhu	r2,12(r16)
    6d34:	80c010c4 	addi	r3,r16,67
    6d38:	04810004 	movi	r18,1024
    6d3c:	10800054 	ori	r2,r2,1
    6d40:	8080030d 	sth	r2,12(r16)
    6d44:	00800044 	movi	r2,1
    6d48:	80c00415 	stw	r3,16(r16)
    6d4c:	80800515 	stw	r2,20(r16)
    6d50:	80c00015 	stw	r3,0(r16)
    6d54:	003fd506 	br	6cac <__smakebuf_r+0x90>
    6d58:	80c00a17 	ldw	r3,40(r16)
    6d5c:	00800074 	movhi	r2,1
    6d60:	10a36104 	addi	r2,r2,-29308
    6d64:	18bfcb1e 	bne	r3,r2,6c94 <__smakebuf_r+0x78>
    6d68:	8080030b 	ldhu	r2,12(r16)
    6d6c:	00c10004 	movi	r3,1024
    6d70:	1825883a 	mov	r18,r3
    6d74:	10c4b03a 	or	r2,r2,r3
    6d78:	8080030d 	sth	r2,12(r16)
    6d7c:	80c01315 	stw	r3,76(r16)
    6d80:	003fca06 	br	6cac <__smakebuf_r+0x90>
    6d84:	8100030b 	ldhu	r4,12(r16)
    6d88:	2080800c 	andi	r2,r4,512
    6d8c:	103fb21e 	bne	r2,zero,6c58 <__smakebuf_r+0x3c>
    6d90:	80c010c4 	addi	r3,r16,67
    6d94:	21000094 	ori	r4,r4,2
    6d98:	00800044 	movi	r2,1
    6d9c:	80800515 	stw	r2,20(r16)
    6da0:	8100030d 	sth	r4,12(r16)
    6da4:	80c00415 	stw	r3,16(r16)
    6da8:	80c00015 	stw	r3,0(r16)
    6dac:	003faa06 	br	6c58 <__smakebuf_r+0x3c>

00006db0 <_malloc_r>:
    6db0:	defff604 	addi	sp,sp,-40
    6db4:	28c002c4 	addi	r3,r5,11
    6db8:	00800584 	movi	r2,22
    6dbc:	dc800215 	stw	r18,8(sp)
    6dc0:	dfc00915 	stw	ra,36(sp)
    6dc4:	df000815 	stw	fp,32(sp)
    6dc8:	ddc00715 	stw	r23,28(sp)
    6dcc:	dd800615 	stw	r22,24(sp)
    6dd0:	dd400515 	stw	r21,20(sp)
    6dd4:	dd000415 	stw	r20,16(sp)
    6dd8:	dcc00315 	stw	r19,12(sp)
    6ddc:	dc400115 	stw	r17,4(sp)
    6de0:	dc000015 	stw	r16,0(sp)
    6de4:	2025883a 	mov	r18,r4
    6de8:	10c01236 	bltu	r2,r3,6e34 <_malloc_r+0x84>
    6dec:	04400404 	movi	r17,16
    6df0:	8940142e 	bgeu	r17,r5,6e44 <_malloc_r+0x94>
    6df4:	00800304 	movi	r2,12
    6df8:	0007883a 	mov	r3,zero
    6dfc:	90800015 	stw	r2,0(r18)
    6e00:	1805883a 	mov	r2,r3
    6e04:	dfc00917 	ldw	ra,36(sp)
    6e08:	df000817 	ldw	fp,32(sp)
    6e0c:	ddc00717 	ldw	r23,28(sp)
    6e10:	dd800617 	ldw	r22,24(sp)
    6e14:	dd400517 	ldw	r21,20(sp)
    6e18:	dd000417 	ldw	r20,16(sp)
    6e1c:	dcc00317 	ldw	r19,12(sp)
    6e20:	dc800217 	ldw	r18,8(sp)
    6e24:	dc400117 	ldw	r17,4(sp)
    6e28:	dc000017 	ldw	r16,0(sp)
    6e2c:	dec00a04 	addi	sp,sp,40
    6e30:	f800283a 	ret
    6e34:	00bffe04 	movi	r2,-8
    6e38:	18a2703a 	and	r17,r3,r2
    6e3c:	883fed16 	blt	r17,zero,6df4 <_malloc_r+0x44>
    6e40:	897fec36 	bltu	r17,r5,6df4 <_malloc_r+0x44>
    6e44:	9009883a 	mov	r4,r18
    6e48:	000b9f80 	call	b9f8 <__malloc_lock>
    6e4c:	00807dc4 	movi	r2,503
    6e50:	14402b2e 	bgeu	r2,r17,6f00 <_malloc_r+0x150>
    6e54:	8806d27a 	srli	r3,r17,9
    6e58:	18003f1e 	bne	r3,zero,6f58 <_malloc_r+0x1a8>
    6e5c:	880cd0fa 	srli	r6,r17,3
    6e60:	300490fa 	slli	r2,r6,3
    6e64:	02c00074 	movhi	r11,1
    6e68:	5afc5304 	addi	r11,r11,-3764
    6e6c:	12cb883a 	add	r5,r2,r11
    6e70:	2c000317 	ldw	r16,12(r5)
    6e74:	580f883a 	mov	r7,r11
    6e78:	2c00041e 	bne	r5,r16,6e8c <_malloc_r+0xdc>
    6e7c:	00000a06 	br	6ea8 <_malloc_r+0xf8>
    6e80:	1800860e 	bge	r3,zero,709c <_malloc_r+0x2ec>
    6e84:	84000317 	ldw	r16,12(r16)
    6e88:	2c000726 	beq	r5,r16,6ea8 <_malloc_r+0xf8>
    6e8c:	80800117 	ldw	r2,4(r16)
    6e90:	00ffff04 	movi	r3,-4
    6e94:	10c8703a 	and	r4,r2,r3
    6e98:	2447c83a 	sub	r3,r4,r17
    6e9c:	008003c4 	movi	r2,15
    6ea0:	10fff70e 	bge	r2,r3,6e80 <_malloc_r+0xd0>
    6ea4:	31bfffc4 	addi	r6,r6,-1
    6ea8:	32400044 	addi	r9,r6,1
    6eac:	02800074 	movhi	r10,1
    6eb0:	52bc5504 	addi	r10,r10,-3756
    6eb4:	54000217 	ldw	r16,8(r10)
    6eb8:	8280a026 	beq	r16,r10,713c <_malloc_r+0x38c>
    6ebc:	80800117 	ldw	r2,4(r16)
    6ec0:	00ffff04 	movi	r3,-4
    6ec4:	10ca703a 	and	r5,r2,r3
    6ec8:	2c4dc83a 	sub	r6,r5,r17
    6ecc:	008003c4 	movi	r2,15
    6ed0:	11808316 	blt	r2,r6,70e0 <_malloc_r+0x330>
    6ed4:	52800315 	stw	r10,12(r10)
    6ed8:	52800215 	stw	r10,8(r10)
    6edc:	30002916 	blt	r6,zero,6f84 <_malloc_r+0x1d4>
    6ee0:	8147883a 	add	r3,r16,r5
    6ee4:	18800117 	ldw	r2,4(r3)
    6ee8:	9009883a 	mov	r4,r18
    6eec:	10800054 	ori	r2,r2,1
    6ef0:	18800115 	stw	r2,4(r3)
    6ef4:	000b9fc0 	call	b9fc <__malloc_unlock>
    6ef8:	80c00204 	addi	r3,r16,8
    6efc:	003fc006 	br	6e00 <_malloc_r+0x50>
    6f00:	02c00074 	movhi	r11,1
    6f04:	5afc5304 	addi	r11,r11,-3764
    6f08:	8ac5883a 	add	r2,r17,r11
    6f0c:	14000317 	ldw	r16,12(r2)
    6f10:	580f883a 	mov	r7,r11
    6f14:	8806d0fa 	srli	r3,r17,3
    6f18:	14006c26 	beq	r2,r16,70cc <_malloc_r+0x31c>
    6f1c:	80c00117 	ldw	r3,4(r16)
    6f20:	00bfff04 	movi	r2,-4
    6f24:	81800317 	ldw	r6,12(r16)
    6f28:	1886703a 	and	r3,r3,r2
    6f2c:	80c7883a 	add	r3,r16,r3
    6f30:	18800117 	ldw	r2,4(r3)
    6f34:	81400217 	ldw	r5,8(r16)
    6f38:	9009883a 	mov	r4,r18
    6f3c:	10800054 	ori	r2,r2,1
    6f40:	18800115 	stw	r2,4(r3)
    6f44:	31400215 	stw	r5,8(r6)
    6f48:	29800315 	stw	r6,12(r5)
    6f4c:	000b9fc0 	call	b9fc <__malloc_unlock>
    6f50:	80c00204 	addi	r3,r16,8
    6f54:	003faa06 	br	6e00 <_malloc_r+0x50>
    6f58:	00800104 	movi	r2,4
    6f5c:	10c0052e 	bgeu	r2,r3,6f74 <_malloc_r+0x1c4>
    6f60:	00800504 	movi	r2,20
    6f64:	10c07836 	bltu	r2,r3,7148 <_malloc_r+0x398>
    6f68:	198016c4 	addi	r6,r3,91
    6f6c:	300490fa 	slli	r2,r6,3
    6f70:	003fbc06 	br	6e64 <_malloc_r+0xb4>
    6f74:	8804d1ba 	srli	r2,r17,6
    6f78:	11800e04 	addi	r6,r2,56
    6f7c:	300490fa 	slli	r2,r6,3
    6f80:	003fb806 	br	6e64 <_malloc_r+0xb4>
    6f84:	00807fc4 	movi	r2,511
    6f88:	1140bb36 	bltu	r2,r5,7278 <_malloc_r+0x4c8>
    6f8c:	2806d0fa 	srli	r3,r5,3
    6f90:	573ffe04 	addi	fp,r10,-8
    6f94:	00800044 	movi	r2,1
    6f98:	180890fa 	slli	r4,r3,3
    6f9c:	1807d0ba 	srai	r3,r3,2
    6fa0:	e1c00117 	ldw	r7,4(fp)
    6fa4:	5909883a 	add	r4,r11,r4
    6fa8:	21400217 	ldw	r5,8(r4)
    6fac:	10c4983a 	sll	r2,r2,r3
    6fb0:	81000315 	stw	r4,12(r16)
    6fb4:	81400215 	stw	r5,8(r16)
    6fb8:	388eb03a 	or	r7,r7,r2
    6fbc:	2c000315 	stw	r16,12(r5)
    6fc0:	24000215 	stw	r16,8(r4)
    6fc4:	e1c00115 	stw	r7,4(fp)
    6fc8:	4807883a 	mov	r3,r9
    6fcc:	4800cd16 	blt	r9,zero,7304 <_malloc_r+0x554>
    6fd0:	1807d0ba 	srai	r3,r3,2
    6fd4:	00800044 	movi	r2,1
    6fd8:	10c8983a 	sll	r4,r2,r3
    6fdc:	39004436 	bltu	r7,r4,70f0 <_malloc_r+0x340>
    6fe0:	21c4703a 	and	r2,r4,r7
    6fe4:	10000a1e 	bne	r2,zero,7010 <_malloc_r+0x260>
    6fe8:	2109883a 	add	r4,r4,r4
    6fec:	00bfff04 	movi	r2,-4
    6ff0:	4884703a 	and	r2,r9,r2
    6ff4:	3906703a 	and	r3,r7,r4
    6ff8:	12400104 	addi	r9,r2,4
    6ffc:	1800041e 	bne	r3,zero,7010 <_malloc_r+0x260>
    7000:	2109883a 	add	r4,r4,r4
    7004:	3904703a 	and	r2,r7,r4
    7008:	4a400104 	addi	r9,r9,4
    700c:	103ffc26 	beq	r2,zero,7000 <_malloc_r+0x250>
    7010:	480490fa 	slli	r2,r9,3
    7014:	4819883a 	mov	r12,r9
    7018:	023fff04 	movi	r8,-4
    701c:	589b883a 	add	r13,r11,r2
    7020:	6807883a 	mov	r3,r13
    7024:	014003c4 	movi	r5,15
    7028:	1c000317 	ldw	r16,12(r3)
    702c:	1c00041e 	bne	r3,r16,7040 <_malloc_r+0x290>
    7030:	0000a706 	br	72d0 <_malloc_r+0x520>
    7034:	3000ab0e 	bge	r6,zero,72e4 <_malloc_r+0x534>
    7038:	84000317 	ldw	r16,12(r16)
    703c:	1c00a426 	beq	r3,r16,72d0 <_malloc_r+0x520>
    7040:	80800117 	ldw	r2,4(r16)
    7044:	1204703a 	and	r2,r2,r8
    7048:	144dc83a 	sub	r6,r2,r17
    704c:	29bff90e 	bge	r5,r6,7034 <_malloc_r+0x284>
    7050:	81000317 	ldw	r4,12(r16)
    7054:	80c00217 	ldw	r3,8(r16)
    7058:	89400054 	ori	r5,r17,1
    705c:	8445883a 	add	r2,r16,r17
    7060:	20c00215 	stw	r3,8(r4)
    7064:	19000315 	stw	r4,12(r3)
    7068:	81400115 	stw	r5,4(r16)
    706c:	1187883a 	add	r3,r2,r6
    7070:	31000054 	ori	r4,r6,1
    7074:	50800315 	stw	r2,12(r10)
    7078:	50800215 	stw	r2,8(r10)
    707c:	19800015 	stw	r6,0(r3)
    7080:	11000115 	stw	r4,4(r2)
    7084:	12800215 	stw	r10,8(r2)
    7088:	12800315 	stw	r10,12(r2)
    708c:	9009883a 	mov	r4,r18
    7090:	000b9fc0 	call	b9fc <__malloc_unlock>
    7094:	80c00204 	addi	r3,r16,8
    7098:	003f5906 	br	6e00 <_malloc_r+0x50>
    709c:	8109883a 	add	r4,r16,r4
    70a0:	20800117 	ldw	r2,4(r4)
    70a4:	80c00217 	ldw	r3,8(r16)
    70a8:	81400317 	ldw	r5,12(r16)
    70ac:	10800054 	ori	r2,r2,1
    70b0:	20800115 	stw	r2,4(r4)
    70b4:	28c00215 	stw	r3,8(r5)
    70b8:	19400315 	stw	r5,12(r3)
    70bc:	9009883a 	mov	r4,r18
    70c0:	000b9fc0 	call	b9fc <__malloc_unlock>
    70c4:	80c00204 	addi	r3,r16,8
    70c8:	003f4d06 	br	6e00 <_malloc_r+0x50>
    70cc:	80800204 	addi	r2,r16,8
    70d0:	14000317 	ldw	r16,12(r2)
    70d4:	143f911e 	bne	r2,r16,6f1c <_malloc_r+0x16c>
    70d8:	1a400084 	addi	r9,r3,2
    70dc:	003f7306 	br	6eac <_malloc_r+0xfc>
    70e0:	88c00054 	ori	r3,r17,1
    70e4:	8445883a 	add	r2,r16,r17
    70e8:	80c00115 	stw	r3,4(r16)
    70ec:	003fdf06 	br	706c <_malloc_r+0x2bc>
    70f0:	e4000217 	ldw	r16,8(fp)
    70f4:	00bfff04 	movi	r2,-4
    70f8:	80c00117 	ldw	r3,4(r16)
    70fc:	802d883a 	mov	r22,r16
    7100:	18aa703a 	and	r21,r3,r2
    7104:	ac401636 	bltu	r21,r17,7160 <_malloc_r+0x3b0>
    7108:	ac49c83a 	sub	r4,r21,r17
    710c:	008003c4 	movi	r2,15
    7110:	1100130e 	bge	r2,r4,7160 <_malloc_r+0x3b0>
    7114:	88800054 	ori	r2,r17,1
    7118:	8447883a 	add	r3,r16,r17
    711c:	80800115 	stw	r2,4(r16)
    7120:	20800054 	ori	r2,r4,1
    7124:	18800115 	stw	r2,4(r3)
    7128:	e0c00215 	stw	r3,8(fp)
    712c:	9009883a 	mov	r4,r18
    7130:	000b9fc0 	call	b9fc <__malloc_unlock>
    7134:	80c00204 	addi	r3,r16,8
    7138:	003f3106 	br	6e00 <_malloc_r+0x50>
    713c:	39c00117 	ldw	r7,4(r7)
    7140:	573ffe04 	addi	fp,r10,-8
    7144:	003fa006 	br	6fc8 <_malloc_r+0x218>
    7148:	00801504 	movi	r2,84
    714c:	10c06736 	bltu	r2,r3,72ec <_malloc_r+0x53c>
    7150:	8804d33a 	srli	r2,r17,12
    7154:	11801b84 	addi	r6,r2,110
    7158:	300490fa 	slli	r2,r6,3
    715c:	003f4106 	br	6e64 <_malloc_r+0xb4>
    7160:	d0a74f17 	ldw	r2,-25284(gp)
    7164:	d0e00517 	ldw	r3,-32748(gp)
    7168:	053fffc4 	movi	r20,-1
    716c:	10800404 	addi	r2,r2,16
    7170:	88a7883a 	add	r19,r17,r2
    7174:	1d000326 	beq	r3,r20,7184 <_malloc_r+0x3d4>
    7178:	98c3ffc4 	addi	r3,r19,4095
    717c:	00bc0004 	movi	r2,-4096
    7180:	18a6703a 	and	r19,r3,r2
    7184:	9009883a 	mov	r4,r18
    7188:	980b883a 	mov	r5,r19
    718c:	0008d0c0 	call	8d0c <_sbrk_r>
    7190:	1009883a 	mov	r4,r2
    7194:	15000426 	beq	r2,r20,71a8 <_malloc_r+0x3f8>
    7198:	854b883a 	add	r5,r16,r21
    719c:	1029883a 	mov	r20,r2
    71a0:	11405a2e 	bgeu	r2,r5,730c <_malloc_r+0x55c>
    71a4:	87000c26 	beq	r16,fp,71d8 <_malloc_r+0x428>
    71a8:	e4000217 	ldw	r16,8(fp)
    71ac:	80c00117 	ldw	r3,4(r16)
    71b0:	00bfff04 	movi	r2,-4
    71b4:	1884703a 	and	r2,r3,r2
    71b8:	14400336 	bltu	r2,r17,71c8 <_malloc_r+0x418>
    71bc:	1449c83a 	sub	r4,r2,r17
    71c0:	008003c4 	movi	r2,15
    71c4:	113fd316 	blt	r2,r4,7114 <_malloc_r+0x364>
    71c8:	9009883a 	mov	r4,r18
    71cc:	000b9fc0 	call	b9fc <__malloc_unlock>
    71d0:	0007883a 	mov	r3,zero
    71d4:	003f0a06 	br	6e00 <_malloc_r+0x50>
    71d8:	05c00074 	movhi	r23,1
    71dc:	bdc9d504 	addi	r23,r23,10068
    71e0:	b8800017 	ldw	r2,0(r23)
    71e4:	988d883a 	add	r6,r19,r2
    71e8:	b9800015 	stw	r6,0(r23)
    71ec:	d0e00517 	ldw	r3,-32748(gp)
    71f0:	00bfffc4 	movi	r2,-1
    71f4:	18808e26 	beq	r3,r2,7430 <_malloc_r+0x680>
    71f8:	2145c83a 	sub	r2,r4,r5
    71fc:	3085883a 	add	r2,r6,r2
    7200:	b8800015 	stw	r2,0(r23)
    7204:	20c001cc 	andi	r3,r4,7
    7208:	18005f1e 	bne	r3,zero,7388 <_malloc_r+0x5d8>
    720c:	000b883a 	mov	r5,zero
    7210:	a4c5883a 	add	r2,r20,r19
    7214:	1083ffcc 	andi	r2,r2,4095
    7218:	00c40004 	movi	r3,4096
    721c:	1887c83a 	sub	r3,r3,r2
    7220:	28e7883a 	add	r19,r5,r3
    7224:	9009883a 	mov	r4,r18
    7228:	980b883a 	mov	r5,r19
    722c:	0008d0c0 	call	8d0c <_sbrk_r>
    7230:	1007883a 	mov	r3,r2
    7234:	00bfffc4 	movi	r2,-1
    7238:	18807a26 	beq	r3,r2,7424 <_malloc_r+0x674>
    723c:	1d05c83a 	sub	r2,r3,r20
    7240:	9885883a 	add	r2,r19,r2
    7244:	10c00054 	ori	r3,r2,1
    7248:	b8800017 	ldw	r2,0(r23)
    724c:	a021883a 	mov	r16,r20
    7250:	a0c00115 	stw	r3,4(r20)
    7254:	9885883a 	add	r2,r19,r2
    7258:	b8800015 	stw	r2,0(r23)
    725c:	e5000215 	stw	r20,8(fp)
    7260:	b7003626 	beq	r22,fp,733c <_malloc_r+0x58c>
    7264:	018003c4 	movi	r6,15
    7268:	35404b36 	bltu	r6,r21,7398 <_malloc_r+0x5e8>
    726c:	00800044 	movi	r2,1
    7270:	a0800115 	stw	r2,4(r20)
    7274:	003fcd06 	br	71ac <_malloc_r+0x3fc>
    7278:	2808d27a 	srli	r4,r5,9
    727c:	2000371e 	bne	r4,zero,735c <_malloc_r+0x5ac>
    7280:	2808d0fa 	srli	r4,r5,3
    7284:	200690fa 	slli	r3,r4,3
    7288:	1ad1883a 	add	r8,r3,r11
    728c:	41800217 	ldw	r6,8(r8)
    7290:	41805b26 	beq	r8,r6,7400 <_malloc_r+0x650>
    7294:	30800117 	ldw	r2,4(r6)
    7298:	00ffff04 	movi	r3,-4
    729c:	10c4703a 	and	r2,r2,r3
    72a0:	2880022e 	bgeu	r5,r2,72ac <_malloc_r+0x4fc>
    72a4:	31800217 	ldw	r6,8(r6)
    72a8:	41bffa1e 	bne	r8,r6,7294 <_malloc_r+0x4e4>
    72ac:	32000317 	ldw	r8,12(r6)
    72b0:	39c00117 	ldw	r7,4(r7)
    72b4:	82000315 	stw	r8,12(r16)
    72b8:	81800215 	stw	r6,8(r16)
    72bc:	07000074 	movhi	fp,1
    72c0:	e73c5304 	addi	fp,fp,-3764
    72c4:	34000315 	stw	r16,12(r6)
    72c8:	44000215 	stw	r16,8(r8)
    72cc:	003f3e06 	br	6fc8 <_malloc_r+0x218>
    72d0:	63000044 	addi	r12,r12,1
    72d4:	608000cc 	andi	r2,r12,3
    72d8:	10005d26 	beq	r2,zero,7450 <_malloc_r+0x6a0>
    72dc:	18c00204 	addi	r3,r3,8
    72e0:	003f5106 	br	7028 <_malloc_r+0x278>
    72e4:	8089883a 	add	r4,r16,r2
    72e8:	003f6d06 	br	70a0 <_malloc_r+0x2f0>
    72ec:	00805504 	movi	r2,340
    72f0:	10c02036 	bltu	r2,r3,7374 <_malloc_r+0x5c4>
    72f4:	8804d3fa 	srli	r2,r17,15
    72f8:	11801dc4 	addi	r6,r2,119
    72fc:	300490fa 	slli	r2,r6,3
    7300:	003ed806 	br	6e64 <_malloc_r+0xb4>
    7304:	48c000c4 	addi	r3,r9,3
    7308:	003f3106 	br	6fd0 <_malloc_r+0x220>
    730c:	05c00074 	movhi	r23,1
    7310:	bdc9d504 	addi	r23,r23,10068
    7314:	b8800017 	ldw	r2,0(r23)
    7318:	988d883a 	add	r6,r19,r2
    731c:	b9800015 	stw	r6,0(r23)
    7320:	293fb21e 	bne	r5,r4,71ec <_malloc_r+0x43c>
    7324:	2083ffcc 	andi	r2,r4,4095
    7328:	103fb01e 	bne	r2,zero,71ec <_malloc_r+0x43c>
    732c:	e4000217 	ldw	r16,8(fp)
    7330:	9d45883a 	add	r2,r19,r21
    7334:	10800054 	ori	r2,r2,1
    7338:	80800115 	stw	r2,4(r16)
    733c:	b8c00017 	ldw	r3,0(r23)
    7340:	d0a75017 	ldw	r2,-25280(gp)
    7344:	10c0012e 	bgeu	r2,r3,734c <_malloc_r+0x59c>
    7348:	d0e75015 	stw	r3,-25280(gp)
    734c:	d0a75117 	ldw	r2,-25276(gp)
    7350:	10ff962e 	bgeu	r2,r3,71ac <_malloc_r+0x3fc>
    7354:	d0e75115 	stw	r3,-25276(gp)
    7358:	003f9406 	br	71ac <_malloc_r+0x3fc>
    735c:	00800104 	movi	r2,4
    7360:	11001e36 	bltu	r2,r4,73dc <_malloc_r+0x62c>
    7364:	2804d1ba 	srli	r2,r5,6
    7368:	11000e04 	addi	r4,r2,56
    736c:	200690fa 	slli	r3,r4,3
    7370:	003fc506 	br	7288 <_malloc_r+0x4d8>
    7374:	00815504 	movi	r2,1364
    7378:	10c01d2e 	bgeu	r2,r3,73f0 <_malloc_r+0x640>
    737c:	01801f84 	movi	r6,126
    7380:	0080fc04 	movi	r2,1008
    7384:	003eb706 	br	6e64 <_malloc_r+0xb4>
    7388:	00800204 	movi	r2,8
    738c:	10cbc83a 	sub	r5,r2,r3
    7390:	2169883a 	add	r20,r4,r5
    7394:	003f9e06 	br	7210 <_malloc_r+0x460>
    7398:	00bffe04 	movi	r2,-8
    739c:	a93ffd04 	addi	r4,r21,-12
    73a0:	2088703a 	and	r4,r4,r2
    73a4:	b10b883a 	add	r5,r22,r4
    73a8:	00c00144 	movi	r3,5
    73ac:	28c00215 	stw	r3,8(r5)
    73b0:	28c00115 	stw	r3,4(r5)
    73b4:	b0800117 	ldw	r2,4(r22)
    73b8:	1080004c 	andi	r2,r2,1
    73bc:	2084b03a 	or	r2,r4,r2
    73c0:	b0800115 	stw	r2,4(r22)
    73c4:	313fdd2e 	bgeu	r6,r4,733c <_malloc_r+0x58c>
    73c8:	b1400204 	addi	r5,r22,8
    73cc:	9009883a 	mov	r4,r18
    73d0:	00062280 	call	6228 <_free_r>
    73d4:	e4000217 	ldw	r16,8(fp)
    73d8:	003fd806 	br	733c <_malloc_r+0x58c>
    73dc:	00800504 	movi	r2,20
    73e0:	11001536 	bltu	r2,r4,7438 <_malloc_r+0x688>
    73e4:	210016c4 	addi	r4,r4,91
    73e8:	200690fa 	slli	r3,r4,3
    73ec:	003fa606 	br	7288 <_malloc_r+0x4d8>
    73f0:	8804d4ba 	srli	r2,r17,18
    73f4:	11801f04 	addi	r6,r2,124
    73f8:	300490fa 	slli	r2,r6,3
    73fc:	003e9906 	br	6e64 <_malloc_r+0xb4>
    7400:	2009d0ba 	srai	r4,r4,2
    7404:	01400074 	movhi	r5,1
    7408:	297c5304 	addi	r5,r5,-3764
    740c:	00c00044 	movi	r3,1
    7410:	28800117 	ldw	r2,4(r5)
    7414:	1906983a 	sll	r3,r3,r4
    7418:	10c4b03a 	or	r2,r2,r3
    741c:	28800115 	stw	r2,4(r5)
    7420:	003fa306 	br	72b0 <_malloc_r+0x500>
    7424:	0027883a 	mov	r19,zero
    7428:	00c00044 	movi	r3,1
    742c:	003f8606 	br	7248 <_malloc_r+0x498>
    7430:	d1200515 	stw	r4,-32748(gp)
    7434:	003f7306 	br	7204 <_malloc_r+0x454>
    7438:	00801504 	movi	r2,84
    743c:	11001936 	bltu	r2,r4,74a4 <_malloc_r+0x6f4>
    7440:	2804d33a 	srli	r2,r5,12
    7444:	11001b84 	addi	r4,r2,110
    7448:	200690fa 	slli	r3,r4,3
    744c:	003f8e06 	br	7288 <_malloc_r+0x4d8>
    7450:	480b883a 	mov	r5,r9
    7454:	6807883a 	mov	r3,r13
    7458:	288000cc 	andi	r2,r5,3
    745c:	18fffe04 	addi	r3,r3,-8
    7460:	297fffc4 	addi	r5,r5,-1
    7464:	10001526 	beq	r2,zero,74bc <_malloc_r+0x70c>
    7468:	18800217 	ldw	r2,8(r3)
    746c:	10fffa26 	beq	r2,r3,7458 <_malloc_r+0x6a8>
    7470:	2109883a 	add	r4,r4,r4
    7474:	393f1e36 	bltu	r7,r4,70f0 <_malloc_r+0x340>
    7478:	203f1d26 	beq	r4,zero,70f0 <_malloc_r+0x340>
    747c:	21c4703a 	and	r2,r4,r7
    7480:	10000226 	beq	r2,zero,748c <_malloc_r+0x6dc>
    7484:	6013883a 	mov	r9,r12
    7488:	003ee106 	br	7010 <_malloc_r+0x260>
    748c:	2109883a 	add	r4,r4,r4
    7490:	3904703a 	and	r2,r7,r4
    7494:	63000104 	addi	r12,r12,4
    7498:	103ffc26 	beq	r2,zero,748c <_malloc_r+0x6dc>
    749c:	6013883a 	mov	r9,r12
    74a0:	003edb06 	br	7010 <_malloc_r+0x260>
    74a4:	00805504 	movi	r2,340
    74a8:	11000836 	bltu	r2,r4,74cc <_malloc_r+0x71c>
    74ac:	2804d3fa 	srli	r2,r5,15
    74b0:	11001dc4 	addi	r4,r2,119
    74b4:	200690fa 	slli	r3,r4,3
    74b8:	003f7306 	br	7288 <_malloc_r+0x4d8>
    74bc:	0104303a 	nor	r2,zero,r4
    74c0:	388e703a 	and	r7,r7,r2
    74c4:	e1c00115 	stw	r7,4(fp)
    74c8:	003fe906 	br	7470 <_malloc_r+0x6c0>
    74cc:	00815504 	movi	r2,1364
    74d0:	1100032e 	bgeu	r2,r4,74e0 <_malloc_r+0x730>
    74d4:	01001f84 	movi	r4,126
    74d8:	00c0fc04 	movi	r3,1008
    74dc:	003f6a06 	br	7288 <_malloc_r+0x4d8>
    74e0:	2804d4ba 	srli	r2,r5,18
    74e4:	11001f04 	addi	r4,r2,124
    74e8:	200690fa 	slli	r3,r4,3
    74ec:	003f6606 	br	7288 <_malloc_r+0x4d8>

000074f0 <memchr>:
    74f0:	008000c4 	movi	r2,3
    74f4:	29403fcc 	andi	r5,r5,255
    74f8:	2007883a 	mov	r3,r4
    74fc:	1180022e 	bgeu	r2,r6,7508 <memchr+0x18>
    7500:	2084703a 	and	r2,r4,r2
    7504:	10000b26 	beq	r2,zero,7534 <memchr+0x44>
    7508:	313fffc4 	addi	r4,r6,-1
    750c:	3000051e 	bne	r6,zero,7524 <memchr+0x34>
    7510:	00002c06 	br	75c4 <memchr+0xd4>
    7514:	213fffc4 	addi	r4,r4,-1
    7518:	00bfffc4 	movi	r2,-1
    751c:	18c00044 	addi	r3,r3,1
    7520:	20802826 	beq	r4,r2,75c4 <memchr+0xd4>
    7524:	18800003 	ldbu	r2,0(r3)
    7528:	28bffa1e 	bne	r5,r2,7514 <memchr+0x24>
    752c:	1805883a 	mov	r2,r3
    7530:	f800283a 	ret
    7534:	0011883a 	mov	r8,zero
    7538:	0007883a 	mov	r3,zero
    753c:	01c00104 	movi	r7,4
    7540:	4004923a 	slli	r2,r8,8
    7544:	18c00044 	addi	r3,r3,1
    7548:	1151883a 	add	r8,r2,r5
    754c:	19fffc1e 	bne	r3,r7,7540 <memchr+0x50>
    7550:	02bfbff4 	movhi	r10,65279
    7554:	52bfbfc4 	addi	r10,r10,-257
    7558:	02602074 	movhi	r9,32897
    755c:	4a602004 	addi	r9,r9,-32640
    7560:	02c000c4 	movi	r11,3
    7564:	20800017 	ldw	r2,0(r4)
    7568:	31bfff04 	addi	r6,r6,-4
    756c:	200f883a 	mov	r7,r4
    7570:	1204f03a 	xor	r2,r2,r8
    7574:	1287883a 	add	r3,r2,r10
    7578:	1a46703a 	and	r3,r3,r9
    757c:	0084303a 	nor	r2,zero,r2
    7580:	10c4703a 	and	r2,r2,r3
    7584:	10000b26 	beq	r2,zero,75b4 <memchr+0xc4>
    7588:	20800003 	ldbu	r2,0(r4)
    758c:	28800f26 	beq	r5,r2,75cc <memchr+0xdc>
    7590:	20800043 	ldbu	r2,1(r4)
    7594:	21c00044 	addi	r7,r4,1
    7598:	28800c26 	beq	r5,r2,75cc <memchr+0xdc>
    759c:	20800083 	ldbu	r2,2(r4)
    75a0:	21c00084 	addi	r7,r4,2
    75a4:	28800926 	beq	r5,r2,75cc <memchr+0xdc>
    75a8:	208000c3 	ldbu	r2,3(r4)
    75ac:	21c000c4 	addi	r7,r4,3
    75b0:	28800626 	beq	r5,r2,75cc <memchr+0xdc>
    75b4:	21000104 	addi	r4,r4,4
    75b8:	59bfea36 	bltu	r11,r6,7564 <memchr+0x74>
    75bc:	2007883a 	mov	r3,r4
    75c0:	003fd106 	br	7508 <memchr+0x18>
    75c4:	0005883a 	mov	r2,zero
    75c8:	f800283a 	ret
    75cc:	3805883a 	mov	r2,r7
    75d0:	f800283a 	ret

000075d4 <memmove>:
    75d4:	2807883a 	mov	r3,r5
    75d8:	2011883a 	mov	r8,r4
    75dc:	29000c2e 	bgeu	r5,r4,7610 <memmove+0x3c>
    75e0:	298f883a 	add	r7,r5,r6
    75e4:	21c00a2e 	bgeu	r4,r7,7610 <memmove+0x3c>
    75e8:	30000726 	beq	r6,zero,7608 <memmove+0x34>
    75ec:	2187883a 	add	r3,r4,r6
    75f0:	198dc83a 	sub	r6,r3,r6
    75f4:	39ffffc4 	addi	r7,r7,-1
    75f8:	38800003 	ldbu	r2,0(r7)
    75fc:	18ffffc4 	addi	r3,r3,-1
    7600:	18800005 	stb	r2,0(r3)
    7604:	19bffb1e 	bne	r3,r6,75f4 <memmove+0x20>
    7608:	2005883a 	mov	r2,r4
    760c:	f800283a 	ret
    7610:	01c003c4 	movi	r7,15
    7614:	39800a36 	bltu	r7,r6,7640 <memmove+0x6c>
    7618:	303ffb26 	beq	r6,zero,7608 <memmove+0x34>
    761c:	400f883a 	mov	r7,r8
    7620:	320d883a 	add	r6,r6,r8
    7624:	28800003 	ldbu	r2,0(r5)
    7628:	29400044 	addi	r5,r5,1
    762c:	38800005 	stb	r2,0(r7)
    7630:	39c00044 	addi	r7,r7,1
    7634:	39bffb1e 	bne	r7,r6,7624 <memmove+0x50>
    7638:	2005883a 	mov	r2,r4
    763c:	f800283a 	ret
    7640:	1904b03a 	or	r2,r3,r4
    7644:	108000cc 	andi	r2,r2,3
    7648:	103ff31e 	bne	r2,zero,7618 <memmove+0x44>
    764c:	3811883a 	mov	r8,r7
    7650:	180b883a 	mov	r5,r3
    7654:	200f883a 	mov	r7,r4
    7658:	28c00017 	ldw	r3,0(r5)
    765c:	31bffc04 	addi	r6,r6,-16
    7660:	38c00015 	stw	r3,0(r7)
    7664:	28800117 	ldw	r2,4(r5)
    7668:	38800115 	stw	r2,4(r7)
    766c:	28c00217 	ldw	r3,8(r5)
    7670:	38c00215 	stw	r3,8(r7)
    7674:	28800317 	ldw	r2,12(r5)
    7678:	29400404 	addi	r5,r5,16
    767c:	38800315 	stw	r2,12(r7)
    7680:	39c00404 	addi	r7,r7,16
    7684:	41bff436 	bltu	r8,r6,7658 <memmove+0x84>
    7688:	008000c4 	movi	r2,3
    768c:	1180072e 	bgeu	r2,r6,76ac <memmove+0xd8>
    7690:	1007883a 	mov	r3,r2
    7694:	28800017 	ldw	r2,0(r5)
    7698:	31bfff04 	addi	r6,r6,-4
    769c:	29400104 	addi	r5,r5,4
    76a0:	38800015 	stw	r2,0(r7)
    76a4:	39c00104 	addi	r7,r7,4
    76a8:	19bffa36 	bltu	r3,r6,7694 <memmove+0xc0>
    76ac:	3811883a 	mov	r8,r7
    76b0:	003fd906 	br	7618 <memmove+0x44>

000076b4 <_Bfree>:
    76b4:	28000826 	beq	r5,zero,76d8 <_Bfree+0x24>
    76b8:	28800117 	ldw	r2,4(r5)
    76bc:	21001317 	ldw	r4,76(r4)
    76c0:	1085883a 	add	r2,r2,r2
    76c4:	1085883a 	add	r2,r2,r2
    76c8:	1105883a 	add	r2,r2,r4
    76cc:	10c00017 	ldw	r3,0(r2)
    76d0:	28c00015 	stw	r3,0(r5)
    76d4:	11400015 	stw	r5,0(r2)
    76d8:	f800283a 	ret

000076dc <__hi0bits>:
    76dc:	20bfffec 	andhi	r2,r4,65535
    76e0:	10001426 	beq	r2,zero,7734 <__hi0bits+0x58>
    76e4:	0007883a 	mov	r3,zero
    76e8:	20bfc02c 	andhi	r2,r4,65280
    76ec:	1000021e 	bne	r2,zero,76f8 <__hi0bits+0x1c>
    76f0:	2008923a 	slli	r4,r4,8
    76f4:	18c00204 	addi	r3,r3,8
    76f8:	20bc002c 	andhi	r2,r4,61440
    76fc:	1000021e 	bne	r2,zero,7708 <__hi0bits+0x2c>
    7700:	2008913a 	slli	r4,r4,4
    7704:	18c00104 	addi	r3,r3,4
    7708:	20b0002c 	andhi	r2,r4,49152
    770c:	1000031e 	bne	r2,zero,771c <__hi0bits+0x40>
    7710:	2105883a 	add	r2,r4,r4
    7714:	18c00084 	addi	r3,r3,2
    7718:	1089883a 	add	r4,r2,r2
    771c:	20000316 	blt	r4,zero,772c <__hi0bits+0x50>
    7720:	2090002c 	andhi	r2,r4,16384
    7724:	10000626 	beq	r2,zero,7740 <__hi0bits+0x64>
    7728:	18c00044 	addi	r3,r3,1
    772c:	1805883a 	mov	r2,r3
    7730:	f800283a 	ret
    7734:	2008943a 	slli	r4,r4,16
    7738:	00c00404 	movi	r3,16
    773c:	003fea06 	br	76e8 <__hi0bits+0xc>
    7740:	00c00804 	movi	r3,32
    7744:	1805883a 	mov	r2,r3
    7748:	f800283a 	ret

0000774c <__lo0bits>:
    774c:	20c00017 	ldw	r3,0(r4)
    7750:	188001cc 	andi	r2,r3,7
    7754:	10000a26 	beq	r2,zero,7780 <__lo0bits+0x34>
    7758:	1880004c 	andi	r2,r3,1
    775c:	1005003a 	cmpeq	r2,r2,zero
    7760:	10002126 	beq	r2,zero,77e8 <__lo0bits+0x9c>
    7764:	1880008c 	andi	r2,r3,2
    7768:	1000251e 	bne	r2,zero,7800 <__lo0bits+0xb4>
    776c:	1804d0ba 	srli	r2,r3,2
    7770:	01400084 	movi	r5,2
    7774:	20800015 	stw	r2,0(r4)
    7778:	2805883a 	mov	r2,r5
    777c:	f800283a 	ret
    7780:	18bfffcc 	andi	r2,r3,65535
    7784:	10001526 	beq	r2,zero,77dc <__lo0bits+0x90>
    7788:	000b883a 	mov	r5,zero
    778c:	18803fcc 	andi	r2,r3,255
    7790:	1000021e 	bne	r2,zero,779c <__lo0bits+0x50>
    7794:	1806d23a 	srli	r3,r3,8
    7798:	29400204 	addi	r5,r5,8
    779c:	188003cc 	andi	r2,r3,15
    77a0:	1000021e 	bne	r2,zero,77ac <__lo0bits+0x60>
    77a4:	1806d13a 	srli	r3,r3,4
    77a8:	29400104 	addi	r5,r5,4
    77ac:	188000cc 	andi	r2,r3,3
    77b0:	1000021e 	bne	r2,zero,77bc <__lo0bits+0x70>
    77b4:	1806d0ba 	srli	r3,r3,2
    77b8:	29400084 	addi	r5,r5,2
    77bc:	1880004c 	andi	r2,r3,1
    77c0:	1000031e 	bne	r2,zero,77d0 <__lo0bits+0x84>
    77c4:	1806d07a 	srli	r3,r3,1
    77c8:	18000a26 	beq	r3,zero,77f4 <__lo0bits+0xa8>
    77cc:	29400044 	addi	r5,r5,1
    77d0:	2805883a 	mov	r2,r5
    77d4:	20c00015 	stw	r3,0(r4)
    77d8:	f800283a 	ret
    77dc:	1806d43a 	srli	r3,r3,16
    77e0:	01400404 	movi	r5,16
    77e4:	003fe906 	br	778c <__lo0bits+0x40>
    77e8:	000b883a 	mov	r5,zero
    77ec:	2805883a 	mov	r2,r5
    77f0:	f800283a 	ret
    77f4:	01400804 	movi	r5,32
    77f8:	2805883a 	mov	r2,r5
    77fc:	f800283a 	ret
    7800:	1804d07a 	srli	r2,r3,1
    7804:	01400044 	movi	r5,1
    7808:	20800015 	stw	r2,0(r4)
    780c:	003fda06 	br	7778 <__lo0bits+0x2c>

00007810 <__mcmp>:
    7810:	20800417 	ldw	r2,16(r4)
    7814:	28c00417 	ldw	r3,16(r5)
    7818:	10cfc83a 	sub	r7,r2,r3
    781c:	38000c1e 	bne	r7,zero,7850 <__mcmp+0x40>
    7820:	18c5883a 	add	r2,r3,r3
    7824:	1085883a 	add	r2,r2,r2
    7828:	10c00504 	addi	r3,r2,20
    782c:	21000504 	addi	r4,r4,20
    7830:	28cb883a 	add	r5,r5,r3
    7834:	2085883a 	add	r2,r4,r2
    7838:	10bfff04 	addi	r2,r2,-4
    783c:	297fff04 	addi	r5,r5,-4
    7840:	11800017 	ldw	r6,0(r2)
    7844:	28c00017 	ldw	r3,0(r5)
    7848:	30c0031e 	bne	r6,r3,7858 <__mcmp+0x48>
    784c:	20bffa36 	bltu	r4,r2,7838 <__mcmp+0x28>
    7850:	3805883a 	mov	r2,r7
    7854:	f800283a 	ret
    7858:	30c00336 	bltu	r6,r3,7868 <__mcmp+0x58>
    785c:	01c00044 	movi	r7,1
    7860:	3805883a 	mov	r2,r7
    7864:	f800283a 	ret
    7868:	01ffffc4 	movi	r7,-1
    786c:	003ff806 	br	7850 <__mcmp+0x40>

00007870 <__ulp>:
    7870:	295ffc2c 	andhi	r5,r5,32752
    7874:	013f3034 	movhi	r4,64704
    7878:	290b883a 	add	r5,r5,r4
    787c:	0145c83a 	sub	r2,zero,r5
    7880:	1007d53a 	srai	r3,r2,20
    7884:	000d883a 	mov	r6,zero
    7888:	0140040e 	bge	zero,r5,789c <__ulp+0x2c>
    788c:	280f883a 	mov	r7,r5
    7890:	3807883a 	mov	r3,r7
    7894:	3005883a 	mov	r2,r6
    7898:	f800283a 	ret
    789c:	008004c4 	movi	r2,19
    78a0:	193ffb04 	addi	r4,r3,-20
    78a4:	10c00c0e 	bge	r2,r3,78d8 <__ulp+0x68>
    78a8:	008007c4 	movi	r2,31
    78ac:	1107c83a 	sub	r3,r2,r4
    78b0:	00800784 	movi	r2,30
    78b4:	01400044 	movi	r5,1
    78b8:	11000216 	blt	r2,r4,78c4 <__ulp+0x54>
    78bc:	00800044 	movi	r2,1
    78c0:	10ca983a 	sll	r5,r2,r3
    78c4:	000f883a 	mov	r7,zero
    78c8:	280d883a 	mov	r6,r5
    78cc:	3807883a 	mov	r3,r7
    78d0:	3005883a 	mov	r2,r6
    78d4:	f800283a 	ret
    78d8:	00800234 	movhi	r2,8
    78dc:	10cfd83a 	sra	r7,r2,r3
    78e0:	000d883a 	mov	r6,zero
    78e4:	3005883a 	mov	r2,r6
    78e8:	3807883a 	mov	r3,r7
    78ec:	f800283a 	ret

000078f0 <__b2d>:
    78f0:	20800417 	ldw	r2,16(r4)
    78f4:	defff904 	addi	sp,sp,-28
    78f8:	dd000415 	stw	r20,16(sp)
    78fc:	1085883a 	add	r2,r2,r2
    7900:	25000504 	addi	r20,r4,20
    7904:	1085883a 	add	r2,r2,r2
    7908:	dc000015 	stw	r16,0(sp)
    790c:	a0a1883a 	add	r16,r20,r2
    7910:	dd400515 	stw	r21,20(sp)
    7914:	857fff17 	ldw	r21,-4(r16)
    7918:	dc400115 	stw	r17,4(sp)
    791c:	dfc00615 	stw	ra,24(sp)
    7920:	a809883a 	mov	r4,r21
    7924:	2823883a 	mov	r17,r5
    7928:	dcc00315 	stw	r19,12(sp)
    792c:	dc800215 	stw	r18,8(sp)
    7930:	00076dc0 	call	76dc <__hi0bits>
    7934:	100b883a 	mov	r5,r2
    7938:	00800804 	movi	r2,32
    793c:	1145c83a 	sub	r2,r2,r5
    7940:	88800015 	stw	r2,0(r17)
    7944:	00800284 	movi	r2,10
    7948:	80ffff04 	addi	r3,r16,-4
    794c:	11401416 	blt	r2,r5,79a0 <__b2d+0xb0>
    7950:	008002c4 	movi	r2,11
    7954:	1149c83a 	sub	r4,r2,r5
    7958:	a0c02736 	bltu	r20,r3,79f8 <__b2d+0x108>
    795c:	000d883a 	mov	r6,zero
    7960:	28800544 	addi	r2,r5,21
    7964:	a906d83a 	srl	r3,r21,r4
    7968:	a884983a 	sll	r2,r21,r2
    796c:	1ccffc34 	orhi	r19,r3,16368
    7970:	11a4b03a 	or	r18,r2,r6
    7974:	9005883a 	mov	r2,r18
    7978:	9807883a 	mov	r3,r19
    797c:	dfc00617 	ldw	ra,24(sp)
    7980:	dd400517 	ldw	r21,20(sp)
    7984:	dd000417 	ldw	r20,16(sp)
    7988:	dcc00317 	ldw	r19,12(sp)
    798c:	dc800217 	ldw	r18,8(sp)
    7990:	dc400117 	ldw	r17,4(sp)
    7994:	dc000017 	ldw	r16,0(sp)
    7998:	dec00704 	addi	sp,sp,28
    799c:	f800283a 	ret
    79a0:	a0c00e36 	bltu	r20,r3,79dc <__b2d+0xec>
    79a4:	293ffd44 	addi	r4,r5,-11
    79a8:	000d883a 	mov	r6,zero
    79ac:	20000f26 	beq	r4,zero,79ec <__b2d+0xfc>
    79b0:	00800804 	movi	r2,32
    79b4:	110bc83a 	sub	r5,r2,r4
    79b8:	a0c01236 	bltu	r20,r3,7a04 <__b2d+0x114>
    79bc:	000f883a 	mov	r7,zero
    79c0:	a904983a 	sll	r2,r21,r4
    79c4:	3146d83a 	srl	r3,r6,r5
    79c8:	3108983a 	sll	r4,r6,r4
    79cc:	108ffc34 	orhi	r2,r2,16368
    79d0:	18a6b03a 	or	r19,r3,r2
    79d4:	3924b03a 	or	r18,r7,r4
    79d8:	003fe606 	br	7974 <__b2d+0x84>
    79dc:	293ffd44 	addi	r4,r5,-11
    79e0:	81bffe17 	ldw	r6,-8(r16)
    79e4:	80fffe04 	addi	r3,r16,-8
    79e8:	203ff11e 	bne	r4,zero,79b0 <__b2d+0xc0>
    79ec:	accffc34 	orhi	r19,r21,16368
    79f0:	3025883a 	mov	r18,r6
    79f4:	003fdf06 	br	7974 <__b2d+0x84>
    79f8:	18bfff17 	ldw	r2,-4(r3)
    79fc:	110cd83a 	srl	r6,r2,r4
    7a00:	003fd706 	br	7960 <__b2d+0x70>
    7a04:	18bfff17 	ldw	r2,-4(r3)
    7a08:	114ed83a 	srl	r7,r2,r5
    7a0c:	003fec06 	br	79c0 <__b2d+0xd0>

00007a10 <__ratio>:
    7a10:	defff904 	addi	sp,sp,-28
    7a14:	dc400215 	stw	r17,8(sp)
    7a18:	2823883a 	mov	r17,r5
    7a1c:	d80b883a 	mov	r5,sp
    7a20:	dfc00615 	stw	ra,24(sp)
    7a24:	dd000515 	stw	r20,20(sp)
    7a28:	dcc00415 	stw	r19,16(sp)
    7a2c:	dc800315 	stw	r18,12(sp)
    7a30:	2025883a 	mov	r18,r4
    7a34:	00078f00 	call	78f0 <__b2d>
    7a38:	8809883a 	mov	r4,r17
    7a3c:	d9400104 	addi	r5,sp,4
    7a40:	1027883a 	mov	r19,r2
    7a44:	1829883a 	mov	r20,r3
    7a48:	00078f00 	call	78f0 <__b2d>
    7a4c:	89000417 	ldw	r4,16(r17)
    7a50:	91c00417 	ldw	r7,16(r18)
    7a54:	d9800117 	ldw	r6,4(sp)
    7a58:	180b883a 	mov	r5,r3
    7a5c:	390fc83a 	sub	r7,r7,r4
    7a60:	1009883a 	mov	r4,r2
    7a64:	d8800017 	ldw	r2,0(sp)
    7a68:	380e917a 	slli	r7,r7,5
    7a6c:	2011883a 	mov	r8,r4
    7a70:	1185c83a 	sub	r2,r2,r6
    7a74:	11c5883a 	add	r2,r2,r7
    7a78:	1006953a 	slli	r3,r2,20
    7a7c:	2813883a 	mov	r9,r5
    7a80:	00800d0e 	bge	zero,r2,7ab8 <__ratio+0xa8>
    7a84:	1d29883a 	add	r20,r3,r20
    7a88:	a00b883a 	mov	r5,r20
    7a8c:	480f883a 	mov	r7,r9
    7a90:	9809883a 	mov	r4,r19
    7a94:	400d883a 	mov	r6,r8
    7a98:	000a86c0 	call	a86c <__divdf3>
    7a9c:	dfc00617 	ldw	ra,24(sp)
    7aa0:	dd000517 	ldw	r20,20(sp)
    7aa4:	dcc00417 	ldw	r19,16(sp)
    7aa8:	dc800317 	ldw	r18,12(sp)
    7aac:	dc400217 	ldw	r17,8(sp)
    7ab0:	dec00704 	addi	sp,sp,28
    7ab4:	f800283a 	ret
    7ab8:	28d3c83a 	sub	r9,r5,r3
    7abc:	003ff206 	br	7a88 <__ratio+0x78>

00007ac0 <_mprec_log10>:
    7ac0:	defffe04 	addi	sp,sp,-8
    7ac4:	008005c4 	movi	r2,23
    7ac8:	dc000015 	stw	r16,0(sp)
    7acc:	dfc00115 	stw	ra,4(sp)
    7ad0:	2021883a 	mov	r16,r4
    7ad4:	11000c16 	blt	r2,r4,7b08 <_mprec_log10+0x48>
    7ad8:	200490fa 	slli	r2,r4,3
    7adc:	00c00074 	movhi	r3,1
    7ae0:	18facb04 	addi	r3,r3,-5332
    7ae4:	10c5883a 	add	r2,r2,r3
    7ae8:	12400117 	ldw	r9,4(r2)
    7aec:	12000017 	ldw	r8,0(r2)
    7af0:	4807883a 	mov	r3,r9
    7af4:	4005883a 	mov	r2,r8
    7af8:	dfc00117 	ldw	ra,4(sp)
    7afc:	dc000017 	ldw	r16,0(sp)
    7b00:	dec00204 	addi	sp,sp,8
    7b04:	f800283a 	ret
    7b08:	0011883a 	mov	r8,zero
    7b0c:	024ffc34 	movhi	r9,16368
    7b10:	0005883a 	mov	r2,zero
    7b14:	00d00934 	movhi	r3,16420
    7b18:	480b883a 	mov	r5,r9
    7b1c:	4009883a 	mov	r4,r8
    7b20:	180f883a 	mov	r7,r3
    7b24:	100d883a 	mov	r6,r2
    7b28:	000a4a80 	call	a4a8 <__muldf3>
    7b2c:	843fffc4 	addi	r16,r16,-1
    7b30:	1011883a 	mov	r8,r2
    7b34:	1813883a 	mov	r9,r3
    7b38:	803ff51e 	bne	r16,zero,7b10 <_mprec_log10+0x50>
    7b3c:	4005883a 	mov	r2,r8
    7b40:	4807883a 	mov	r3,r9
    7b44:	dfc00117 	ldw	ra,4(sp)
    7b48:	dc000017 	ldw	r16,0(sp)
    7b4c:	dec00204 	addi	sp,sp,8
    7b50:	f800283a 	ret

00007b54 <__copybits>:
    7b54:	297fffc4 	addi	r5,r5,-1
    7b58:	30800417 	ldw	r2,16(r6)
    7b5c:	280bd17a 	srai	r5,r5,5
    7b60:	31800504 	addi	r6,r6,20
    7b64:	1085883a 	add	r2,r2,r2
    7b68:	294b883a 	add	r5,r5,r5
    7b6c:	294b883a 	add	r5,r5,r5
    7b70:	1085883a 	add	r2,r2,r2
    7b74:	290b883a 	add	r5,r5,r4
    7b78:	3087883a 	add	r3,r6,r2
    7b7c:	29400104 	addi	r5,r5,4
    7b80:	30c0052e 	bgeu	r6,r3,7b98 <__copybits+0x44>
    7b84:	30800017 	ldw	r2,0(r6)
    7b88:	31800104 	addi	r6,r6,4
    7b8c:	20800015 	stw	r2,0(r4)
    7b90:	21000104 	addi	r4,r4,4
    7b94:	30fffb36 	bltu	r6,r3,7b84 <__copybits+0x30>
    7b98:	2140032e 	bgeu	r4,r5,7ba8 <__copybits+0x54>
    7b9c:	20000015 	stw	zero,0(r4)
    7ba0:	21000104 	addi	r4,r4,4
    7ba4:	217ffd36 	bltu	r4,r5,7b9c <__copybits+0x48>
    7ba8:	f800283a 	ret

00007bac <__any_on>:
    7bac:	20800417 	ldw	r2,16(r4)
    7bb0:	2807d17a 	srai	r3,r5,5
    7bb4:	21000504 	addi	r4,r4,20
    7bb8:	10c00d0e 	bge	r2,r3,7bf0 <__any_on+0x44>
    7bbc:	1085883a 	add	r2,r2,r2
    7bc0:	1085883a 	add	r2,r2,r2
    7bc4:	208d883a 	add	r6,r4,r2
    7bc8:	2180182e 	bgeu	r4,r6,7c2c <__any_on+0x80>
    7bcc:	30bfff17 	ldw	r2,-4(r6)
    7bd0:	30ffff04 	addi	r3,r6,-4
    7bd4:	1000041e 	bne	r2,zero,7be8 <__any_on+0x3c>
    7bd8:	20c0142e 	bgeu	r4,r3,7c2c <__any_on+0x80>
    7bdc:	18ffff04 	addi	r3,r3,-4
    7be0:	18800017 	ldw	r2,0(r3)
    7be4:	103ffc26 	beq	r2,zero,7bd8 <__any_on+0x2c>
    7be8:	00800044 	movi	r2,1
    7bec:	f800283a 	ret
    7bf0:	18800a0e 	bge	r3,r2,7c1c <__any_on+0x70>
    7bf4:	294007cc 	andi	r5,r5,31
    7bf8:	28000826 	beq	r5,zero,7c1c <__any_on+0x70>
    7bfc:	18c5883a 	add	r2,r3,r3
    7c00:	1085883a 	add	r2,r2,r2
    7c04:	208d883a 	add	r6,r4,r2
    7c08:	30c00017 	ldw	r3,0(r6)
    7c0c:	1944d83a 	srl	r2,r3,r5
    7c10:	1144983a 	sll	r2,r2,r5
    7c14:	18bff41e 	bne	r3,r2,7be8 <__any_on+0x3c>
    7c18:	003feb06 	br	7bc8 <__any_on+0x1c>
    7c1c:	18c5883a 	add	r2,r3,r3
    7c20:	1085883a 	add	r2,r2,r2
    7c24:	208d883a 	add	r6,r4,r2
    7c28:	003fe706 	br	7bc8 <__any_on+0x1c>
    7c2c:	0005883a 	mov	r2,zero
    7c30:	f800283a 	ret

00007c34 <_Balloc>:
    7c34:	20c01317 	ldw	r3,76(r4)
    7c38:	defffb04 	addi	sp,sp,-20
    7c3c:	dcc00315 	stw	r19,12(sp)
    7c40:	dc800215 	stw	r18,8(sp)
    7c44:	dfc00415 	stw	ra,16(sp)
    7c48:	2825883a 	mov	r18,r5
    7c4c:	dc400115 	stw	r17,4(sp)
    7c50:	dc000015 	stw	r16,0(sp)
    7c54:	2027883a 	mov	r19,r4
    7c58:	01800404 	movi	r6,16
    7c5c:	01400104 	movi	r5,4
    7c60:	18001726 	beq	r3,zero,7cc0 <_Balloc+0x8c>
    7c64:	01400044 	movi	r5,1
    7c68:	9485883a 	add	r2,r18,r18
    7c6c:	2ca2983a 	sll	r17,r5,r18
    7c70:	1085883a 	add	r2,r2,r2
    7c74:	10c7883a 	add	r3,r2,r3
    7c78:	1c000017 	ldw	r16,0(r3)
    7c7c:	8c4d883a 	add	r6,r17,r17
    7c80:	318d883a 	add	r6,r6,r6
    7c84:	9809883a 	mov	r4,r19
    7c88:	31800504 	addi	r6,r6,20
    7c8c:	80001226 	beq	r16,zero,7cd8 <_Balloc+0xa4>
    7c90:	80800017 	ldw	r2,0(r16)
    7c94:	18800015 	stw	r2,0(r3)
    7c98:	80000415 	stw	zero,16(r16)
    7c9c:	80000315 	stw	zero,12(r16)
    7ca0:	8005883a 	mov	r2,r16
    7ca4:	dfc00417 	ldw	ra,16(sp)
    7ca8:	dcc00317 	ldw	r19,12(sp)
    7cac:	dc800217 	ldw	r18,8(sp)
    7cb0:	dc400117 	ldw	r17,4(sp)
    7cb4:	dc000017 	ldw	r16,0(sp)
    7cb8:	dec00504 	addi	sp,sp,20
    7cbc:	f800283a 	ret
    7cc0:	0008ffc0 	call	8ffc <_calloc_r>
    7cc4:	1007883a 	mov	r3,r2
    7cc8:	0021883a 	mov	r16,zero
    7ccc:	98801315 	stw	r2,76(r19)
    7cd0:	103fe41e 	bne	r2,zero,7c64 <_Balloc+0x30>
    7cd4:	003ff206 	br	7ca0 <_Balloc+0x6c>
    7cd8:	0008ffc0 	call	8ffc <_calloc_r>
    7cdc:	103ff026 	beq	r2,zero,7ca0 <_Balloc+0x6c>
    7ce0:	1021883a 	mov	r16,r2
    7ce4:	14800115 	stw	r18,4(r2)
    7ce8:	14400215 	stw	r17,8(r2)
    7cec:	003fea06 	br	7c98 <_Balloc+0x64>

00007cf0 <__d2b>:
    7cf0:	defff504 	addi	sp,sp,-44
    7cf4:	dcc00515 	stw	r19,20(sp)
    7cf8:	04c00044 	movi	r19,1
    7cfc:	dc000215 	stw	r16,8(sp)
    7d00:	2821883a 	mov	r16,r5
    7d04:	980b883a 	mov	r5,r19
    7d08:	ddc00915 	stw	r23,36(sp)
    7d0c:	dd800815 	stw	r22,32(sp)
    7d10:	dd400715 	stw	r21,28(sp)
    7d14:	dd000615 	stw	r20,24(sp)
    7d18:	dc800415 	stw	r18,16(sp)
    7d1c:	dc400315 	stw	r17,12(sp)
    7d20:	dfc00a15 	stw	ra,40(sp)
    7d24:	3023883a 	mov	r17,r6
    7d28:	382d883a 	mov	r22,r7
    7d2c:	ddc00b17 	ldw	r23,44(sp)
    7d30:	0007c340 	call	7c34 <_Balloc>
    7d34:	1025883a 	mov	r18,r2
    7d38:	00a00034 	movhi	r2,32768
    7d3c:	10bfffc4 	addi	r2,r2,-1
    7d40:	8888703a 	and	r4,r17,r2
    7d44:	202ad53a 	srli	r21,r4,20
    7d48:	00800434 	movhi	r2,16
    7d4c:	10bfffc4 	addi	r2,r2,-1
    7d50:	8886703a 	and	r3,r17,r2
    7d54:	a829003a 	cmpeq	r20,r21,zero
    7d58:	800b883a 	mov	r5,r16
    7d5c:	d8c00115 	stw	r3,4(sp)
    7d60:	94000504 	addi	r16,r18,20
    7d64:	a000021e 	bne	r20,zero,7d70 <__d2b+0x80>
    7d68:	18c00434 	orhi	r3,r3,16
    7d6c:	d8c00115 	stw	r3,4(sp)
    7d70:	28002726 	beq	r5,zero,7e10 <__d2b+0x120>
    7d74:	d809883a 	mov	r4,sp
    7d78:	d9400015 	stw	r5,0(sp)
    7d7c:	000774c0 	call	774c <__lo0bits>
    7d80:	100d883a 	mov	r6,r2
    7d84:	10003526 	beq	r2,zero,7e5c <__d2b+0x16c>
    7d88:	d8c00117 	ldw	r3,4(sp)
    7d8c:	00800804 	movi	r2,32
    7d90:	1185c83a 	sub	r2,r2,r6
    7d94:	d9000017 	ldw	r4,0(sp)
    7d98:	1886983a 	sll	r3,r3,r2
    7d9c:	1906b03a 	or	r3,r3,r4
    7da0:	90c00515 	stw	r3,20(r18)
    7da4:	d8c00117 	ldw	r3,4(sp)
    7da8:	1986d83a 	srl	r3,r3,r6
    7dac:	d8c00115 	stw	r3,4(sp)
    7db0:	180b003a 	cmpeq	r5,r3,zero
    7db4:	00800084 	movi	r2,2
    7db8:	114bc83a 	sub	r5,r2,r5
    7dbc:	80c00115 	stw	r3,4(r16)
    7dc0:	91400415 	stw	r5,16(r18)
    7dc4:	a0001a1e 	bne	r20,zero,7e30 <__d2b+0x140>
    7dc8:	3545883a 	add	r2,r6,r21
    7dcc:	10bef344 	addi	r2,r2,-1075
    7dd0:	00c00d44 	movi	r3,53
    7dd4:	b0800015 	stw	r2,0(r22)
    7dd8:	1987c83a 	sub	r3,r3,r6
    7ddc:	b8c00015 	stw	r3,0(r23)
    7de0:	9005883a 	mov	r2,r18
    7de4:	dfc00a17 	ldw	ra,40(sp)
    7de8:	ddc00917 	ldw	r23,36(sp)
    7dec:	dd800817 	ldw	r22,32(sp)
    7df0:	dd400717 	ldw	r21,28(sp)
    7df4:	dd000617 	ldw	r20,24(sp)
    7df8:	dcc00517 	ldw	r19,20(sp)
    7dfc:	dc800417 	ldw	r18,16(sp)
    7e00:	dc400317 	ldw	r17,12(sp)
    7e04:	dc000217 	ldw	r16,8(sp)
    7e08:	dec00b04 	addi	sp,sp,44
    7e0c:	f800283a 	ret
    7e10:	d9000104 	addi	r4,sp,4
    7e14:	000774c0 	call	774c <__lo0bits>
    7e18:	11800804 	addi	r6,r2,32
    7e1c:	d8800117 	ldw	r2,4(sp)
    7e20:	94c00415 	stw	r19,16(r18)
    7e24:	980b883a 	mov	r5,r19
    7e28:	90800515 	stw	r2,20(r18)
    7e2c:	a03fe626 	beq	r20,zero,7dc8 <__d2b+0xd8>
    7e30:	2945883a 	add	r2,r5,r5
    7e34:	1085883a 	add	r2,r2,r2
    7e38:	1405883a 	add	r2,r2,r16
    7e3c:	113fff17 	ldw	r4,-4(r2)
    7e40:	30fef384 	addi	r3,r6,-1074
    7e44:	2820917a 	slli	r16,r5,5
    7e48:	b0c00015 	stw	r3,0(r22)
    7e4c:	00076dc0 	call	76dc <__hi0bits>
    7e50:	80a1c83a 	sub	r16,r16,r2
    7e54:	bc000015 	stw	r16,0(r23)
    7e58:	003fe106 	br	7de0 <__d2b+0xf0>
    7e5c:	d8800017 	ldw	r2,0(sp)
    7e60:	90800515 	stw	r2,20(r18)
    7e64:	d8c00117 	ldw	r3,4(sp)
    7e68:	003fd106 	br	7db0 <__d2b+0xc0>

00007e6c <__mdiff>:
    7e6c:	defffb04 	addi	sp,sp,-20
    7e70:	dc000015 	stw	r16,0(sp)
    7e74:	2821883a 	mov	r16,r5
    7e78:	dc800215 	stw	r18,8(sp)
    7e7c:	300b883a 	mov	r5,r6
    7e80:	2025883a 	mov	r18,r4
    7e84:	8009883a 	mov	r4,r16
    7e88:	dc400115 	stw	r17,4(sp)
    7e8c:	dfc00415 	stw	ra,16(sp)
    7e90:	dcc00315 	stw	r19,12(sp)
    7e94:	3023883a 	mov	r17,r6
    7e98:	00078100 	call	7810 <__mcmp>
    7e9c:	10004226 	beq	r2,zero,7fa8 <__mdiff+0x13c>
    7ea0:	10005016 	blt	r2,zero,7fe4 <__mdiff+0x178>
    7ea4:	0027883a 	mov	r19,zero
    7ea8:	81400117 	ldw	r5,4(r16)
    7eac:	9009883a 	mov	r4,r18
    7eb0:	0007c340 	call	7c34 <_Balloc>
    7eb4:	1019883a 	mov	r12,r2
    7eb8:	82800417 	ldw	r10,16(r16)
    7ebc:	88800417 	ldw	r2,16(r17)
    7ec0:	81800504 	addi	r6,r16,20
    7ec4:	5287883a 	add	r3,r10,r10
    7ec8:	1085883a 	add	r2,r2,r2
    7ecc:	18c7883a 	add	r3,r3,r3
    7ed0:	1085883a 	add	r2,r2,r2
    7ed4:	8a000504 	addi	r8,r17,20
    7ed8:	64c00315 	stw	r19,12(r12)
    7edc:	30db883a 	add	r13,r6,r3
    7ee0:	4097883a 	add	r11,r8,r2
    7ee4:	61c00504 	addi	r7,r12,20
    7ee8:	0013883a 	mov	r9,zero
    7eec:	31000017 	ldw	r4,0(r6)
    7ef0:	41400017 	ldw	r5,0(r8)
    7ef4:	42000104 	addi	r8,r8,4
    7ef8:	20bfffcc 	andi	r2,r4,65535
    7efc:	28ffffcc 	andi	r3,r5,65535
    7f00:	10c5c83a 	sub	r2,r2,r3
    7f04:	1245883a 	add	r2,r2,r9
    7f08:	2008d43a 	srli	r4,r4,16
    7f0c:	280ad43a 	srli	r5,r5,16
    7f10:	1007d43a 	srai	r3,r2,16
    7f14:	3880000d 	sth	r2,0(r7)
    7f18:	2149c83a 	sub	r4,r4,r5
    7f1c:	20c9883a 	add	r4,r4,r3
    7f20:	3900008d 	sth	r4,2(r7)
    7f24:	31800104 	addi	r6,r6,4
    7f28:	39c00104 	addi	r7,r7,4
    7f2c:	2013d43a 	srai	r9,r4,16
    7f30:	42ffee36 	bltu	r8,r11,7eec <__mdiff+0x80>
    7f34:	33400c2e 	bgeu	r6,r13,7f68 <__mdiff+0xfc>
    7f38:	30800017 	ldw	r2,0(r6)
    7f3c:	31800104 	addi	r6,r6,4
    7f40:	10ffffcc 	andi	r3,r2,65535
    7f44:	1a47883a 	add	r3,r3,r9
    7f48:	1004d43a 	srli	r2,r2,16
    7f4c:	1809d43a 	srai	r4,r3,16
    7f50:	38c0000d 	sth	r3,0(r7)
    7f54:	1105883a 	add	r2,r2,r4
    7f58:	3880008d 	sth	r2,2(r7)
    7f5c:	1013d43a 	srai	r9,r2,16
    7f60:	39c00104 	addi	r7,r7,4
    7f64:	337ff436 	bltu	r6,r13,7f38 <__mdiff+0xcc>
    7f68:	38bfff17 	ldw	r2,-4(r7)
    7f6c:	38ffff04 	addi	r3,r7,-4
    7f70:	1000041e 	bne	r2,zero,7f84 <__mdiff+0x118>
    7f74:	18ffff04 	addi	r3,r3,-4
    7f78:	18800017 	ldw	r2,0(r3)
    7f7c:	52bfffc4 	addi	r10,r10,-1
    7f80:	103ffc26 	beq	r2,zero,7f74 <__mdiff+0x108>
    7f84:	6005883a 	mov	r2,r12
    7f88:	62800415 	stw	r10,16(r12)
    7f8c:	dfc00417 	ldw	ra,16(sp)
    7f90:	dcc00317 	ldw	r19,12(sp)
    7f94:	dc800217 	ldw	r18,8(sp)
    7f98:	dc400117 	ldw	r17,4(sp)
    7f9c:	dc000017 	ldw	r16,0(sp)
    7fa0:	dec00504 	addi	sp,sp,20
    7fa4:	f800283a 	ret
    7fa8:	9009883a 	mov	r4,r18
    7fac:	000b883a 	mov	r5,zero
    7fb0:	0007c340 	call	7c34 <_Balloc>
    7fb4:	1019883a 	mov	r12,r2
    7fb8:	00800044 	movi	r2,1
    7fbc:	60800415 	stw	r2,16(r12)
    7fc0:	6005883a 	mov	r2,r12
    7fc4:	60000515 	stw	zero,20(r12)
    7fc8:	dfc00417 	ldw	ra,16(sp)
    7fcc:	dcc00317 	ldw	r19,12(sp)
    7fd0:	dc800217 	ldw	r18,8(sp)
    7fd4:	dc400117 	ldw	r17,4(sp)
    7fd8:	dc000017 	ldw	r16,0(sp)
    7fdc:	dec00504 	addi	sp,sp,20
    7fe0:	f800283a 	ret
    7fe4:	880d883a 	mov	r6,r17
    7fe8:	04c00044 	movi	r19,1
    7fec:	8023883a 	mov	r17,r16
    7ff0:	3021883a 	mov	r16,r6
    7ff4:	003fac06 	br	7ea8 <__mdiff+0x3c>

00007ff8 <__lshift>:
    7ff8:	defff904 	addi	sp,sp,-28
    7ffc:	28800417 	ldw	r2,16(r5)
    8000:	dc000015 	stw	r16,0(sp)
    8004:	3021d17a 	srai	r16,r6,5
    8008:	28c00217 	ldw	r3,8(r5)
    800c:	10800044 	addi	r2,r2,1
    8010:	dc400115 	stw	r17,4(sp)
    8014:	80a3883a 	add	r17,r16,r2
    8018:	dd400515 	stw	r21,20(sp)
    801c:	dd000415 	stw	r20,16(sp)
    8020:	dc800215 	stw	r18,8(sp)
    8024:	dfc00615 	stw	ra,24(sp)
    8028:	2825883a 	mov	r18,r5
    802c:	dcc00315 	stw	r19,12(sp)
    8030:	3029883a 	mov	r20,r6
    8034:	202b883a 	mov	r21,r4
    8038:	29400117 	ldw	r5,4(r5)
    803c:	1c40030e 	bge	r3,r17,804c <__lshift+0x54>
    8040:	18c7883a 	add	r3,r3,r3
    8044:	29400044 	addi	r5,r5,1
    8048:	1c7ffd16 	blt	r3,r17,8040 <__lshift+0x48>
    804c:	a809883a 	mov	r4,r21
    8050:	0007c340 	call	7c34 <_Balloc>
    8054:	1027883a 	mov	r19,r2
    8058:	11400504 	addi	r5,r2,20
    805c:	0400090e 	bge	zero,r16,8084 <__lshift+0x8c>
    8060:	2805883a 	mov	r2,r5
    8064:	0007883a 	mov	r3,zero
    8068:	18c00044 	addi	r3,r3,1
    806c:	10000015 	stw	zero,0(r2)
    8070:	10800104 	addi	r2,r2,4
    8074:	80fffc1e 	bne	r16,r3,8068 <__lshift+0x70>
    8078:	8405883a 	add	r2,r16,r16
    807c:	1085883a 	add	r2,r2,r2
    8080:	288b883a 	add	r5,r5,r2
    8084:	90800417 	ldw	r2,16(r18)
    8088:	91000504 	addi	r4,r18,20
    808c:	a18007cc 	andi	r6,r20,31
    8090:	1085883a 	add	r2,r2,r2
    8094:	1085883a 	add	r2,r2,r2
    8098:	208f883a 	add	r7,r4,r2
    809c:	30001e26 	beq	r6,zero,8118 <__lshift+0x120>
    80a0:	00800804 	movi	r2,32
    80a4:	1191c83a 	sub	r8,r2,r6
    80a8:	0007883a 	mov	r3,zero
    80ac:	20800017 	ldw	r2,0(r4)
    80b0:	1184983a 	sll	r2,r2,r6
    80b4:	1884b03a 	or	r2,r3,r2
    80b8:	28800015 	stw	r2,0(r5)
    80bc:	20c00017 	ldw	r3,0(r4)
    80c0:	21000104 	addi	r4,r4,4
    80c4:	29400104 	addi	r5,r5,4
    80c8:	1a06d83a 	srl	r3,r3,r8
    80cc:	21fff736 	bltu	r4,r7,80ac <__lshift+0xb4>
    80d0:	28c00015 	stw	r3,0(r5)
    80d4:	18000126 	beq	r3,zero,80dc <__lshift+0xe4>
    80d8:	8c400044 	addi	r17,r17,1
    80dc:	88bfffc4 	addi	r2,r17,-1
    80e0:	98800415 	stw	r2,16(r19)
    80e4:	a809883a 	mov	r4,r21
    80e8:	900b883a 	mov	r5,r18
    80ec:	00076b40 	call	76b4 <_Bfree>
    80f0:	9805883a 	mov	r2,r19
    80f4:	dfc00617 	ldw	ra,24(sp)
    80f8:	dd400517 	ldw	r21,20(sp)
    80fc:	dd000417 	ldw	r20,16(sp)
    8100:	dcc00317 	ldw	r19,12(sp)
    8104:	dc800217 	ldw	r18,8(sp)
    8108:	dc400117 	ldw	r17,4(sp)
    810c:	dc000017 	ldw	r16,0(sp)
    8110:	dec00704 	addi	sp,sp,28
    8114:	f800283a 	ret
    8118:	20800017 	ldw	r2,0(r4)
    811c:	21000104 	addi	r4,r4,4
    8120:	28800015 	stw	r2,0(r5)
    8124:	29400104 	addi	r5,r5,4
    8128:	21ffec2e 	bgeu	r4,r7,80dc <__lshift+0xe4>
    812c:	20800017 	ldw	r2,0(r4)
    8130:	21000104 	addi	r4,r4,4
    8134:	28800015 	stw	r2,0(r5)
    8138:	29400104 	addi	r5,r5,4
    813c:	21fff636 	bltu	r4,r7,8118 <__lshift+0x120>
    8140:	003fe606 	br	80dc <__lshift+0xe4>

00008144 <__multiply>:
    8144:	defff904 	addi	sp,sp,-28
    8148:	dcc00315 	stw	r19,12(sp)
    814c:	dc800215 	stw	r18,8(sp)
    8150:	2cc00417 	ldw	r19,16(r5)
    8154:	34800417 	ldw	r18,16(r6)
    8158:	dd000415 	stw	r20,16(sp)
    815c:	dc400115 	stw	r17,4(sp)
    8160:	dfc00615 	stw	ra,24(sp)
    8164:	dd400515 	stw	r21,20(sp)
    8168:	dc000015 	stw	r16,0(sp)
    816c:	2823883a 	mov	r17,r5
    8170:	3029883a 	mov	r20,r6
    8174:	9c80040e 	bge	r19,r18,8188 <__multiply+0x44>
    8178:	9027883a 	mov	r19,r18
    817c:	2c800417 	ldw	r18,16(r5)
    8180:	2829883a 	mov	r20,r5
    8184:	3023883a 	mov	r17,r6
    8188:	88800217 	ldw	r2,8(r17)
    818c:	9ca1883a 	add	r16,r19,r18
    8190:	89400117 	ldw	r5,4(r17)
    8194:	1400010e 	bge	r2,r16,819c <__multiply+0x58>
    8198:	29400044 	addi	r5,r5,1
    819c:	0007c340 	call	7c34 <_Balloc>
    81a0:	102b883a 	mov	r21,r2
    81a4:	8405883a 	add	r2,r16,r16
    81a8:	1085883a 	add	r2,r2,r2
    81ac:	a9000504 	addi	r4,r21,20
    81b0:	209d883a 	add	r14,r4,r2
    81b4:	2380042e 	bgeu	r4,r14,81c8 <__multiply+0x84>
    81b8:	2005883a 	mov	r2,r4
    81bc:	10000015 	stw	zero,0(r2)
    81c0:	10800104 	addi	r2,r2,4
    81c4:	13bffd36 	bltu	r2,r14,81bc <__multiply+0x78>
    81c8:	9485883a 	add	r2,r18,r18
    81cc:	9cc7883a 	add	r3,r19,r19
    81d0:	a1800504 	addi	r6,r20,20
    81d4:	1085883a 	add	r2,r2,r2
    81d8:	8b400504 	addi	r13,r17,20
    81dc:	18c7883a 	add	r3,r3,r3
    81e0:	309f883a 	add	r15,r6,r2
    81e4:	68d7883a 	add	r11,r13,r3
    81e8:	33c03b2e 	bgeu	r6,r15,82d8 <__multiply+0x194>
    81ec:	2019883a 	mov	r12,r4
    81f0:	30800017 	ldw	r2,0(r6)
    81f4:	127fffcc 	andi	r9,r2,65535
    81f8:	48001826 	beq	r9,zero,825c <__multiply+0x118>
    81fc:	6811883a 	mov	r8,r13
    8200:	600f883a 	mov	r7,r12
    8204:	0015883a 	mov	r10,zero
    8208:	40c00017 	ldw	r3,0(r8)
    820c:	39400017 	ldw	r5,0(r7)
    8210:	42000104 	addi	r8,r8,4
    8214:	193fffcc 	andi	r4,r3,65535
    8218:	4909383a 	mul	r4,r9,r4
    821c:	1806d43a 	srli	r3,r3,16
    8220:	28bfffcc 	andi	r2,r5,65535
    8224:	5085883a 	add	r2,r10,r2
    8228:	2089883a 	add	r4,r4,r2
    822c:	48c7383a 	mul	r3,r9,r3
    8230:	280ad43a 	srli	r5,r5,16
    8234:	2004d43a 	srli	r2,r4,16
    8238:	3900000d 	sth	r4,0(r7)
    823c:	1947883a 	add	r3,r3,r5
    8240:	10c5883a 	add	r2,r2,r3
    8244:	3880008d 	sth	r2,2(r7)
    8248:	1014d43a 	srli	r10,r2,16
    824c:	39c00104 	addi	r7,r7,4
    8250:	42ffed36 	bltu	r8,r11,8208 <__multiply+0xc4>
    8254:	3a800015 	stw	r10,0(r7)
    8258:	30800017 	ldw	r2,0(r6)
    825c:	1012d43a 	srli	r9,r2,16
    8260:	48001926 	beq	r9,zero,82c8 <__multiply+0x184>
    8264:	60800017 	ldw	r2,0(r12)
    8268:	6811883a 	mov	r8,r13
    826c:	600f883a 	mov	r7,r12
    8270:	0015883a 	mov	r10,zero
    8274:	100b883a 	mov	r5,r2
    8278:	41000017 	ldw	r4,0(r8)
    827c:	2806d43a 	srli	r3,r5,16
    8280:	3880000d 	sth	r2,0(r7)
    8284:	20bfffcc 	andi	r2,r4,65535
    8288:	4885383a 	mul	r2,r9,r2
    828c:	50c7883a 	add	r3,r10,r3
    8290:	2008d43a 	srli	r4,r4,16
    8294:	10c5883a 	add	r2,r2,r3
    8298:	3880008d 	sth	r2,2(r7)
    829c:	39c00104 	addi	r7,r7,4
    82a0:	39400017 	ldw	r5,0(r7)
    82a4:	4909383a 	mul	r4,r9,r4
    82a8:	1004d43a 	srli	r2,r2,16
    82ac:	28ffffcc 	andi	r3,r5,65535
    82b0:	20c9883a 	add	r4,r4,r3
    82b4:	1105883a 	add	r2,r2,r4
    82b8:	42000104 	addi	r8,r8,4
    82bc:	1014d43a 	srli	r10,r2,16
    82c0:	42ffed36 	bltu	r8,r11,8278 <__multiply+0x134>
    82c4:	38800015 	stw	r2,0(r7)
    82c8:	31800104 	addi	r6,r6,4
    82cc:	33c0022e 	bgeu	r6,r15,82d8 <__multiply+0x194>
    82d0:	63000104 	addi	r12,r12,4
    82d4:	003fc606 	br	81f0 <__multiply+0xac>
    82d8:	0400090e 	bge	zero,r16,8300 <__multiply+0x1bc>
    82dc:	70bfff17 	ldw	r2,-4(r14)
    82e0:	70ffff04 	addi	r3,r14,-4
    82e4:	10000326 	beq	r2,zero,82f4 <__multiply+0x1b0>
    82e8:	00000506 	br	8300 <__multiply+0x1bc>
    82ec:	18800017 	ldw	r2,0(r3)
    82f0:	1000031e 	bne	r2,zero,8300 <__multiply+0x1bc>
    82f4:	843fffc4 	addi	r16,r16,-1
    82f8:	18ffff04 	addi	r3,r3,-4
    82fc:	803ffb1e 	bne	r16,zero,82ec <__multiply+0x1a8>
    8300:	a805883a 	mov	r2,r21
    8304:	ac000415 	stw	r16,16(r21)
    8308:	dfc00617 	ldw	ra,24(sp)
    830c:	dd400517 	ldw	r21,20(sp)
    8310:	dd000417 	ldw	r20,16(sp)
    8314:	dcc00317 	ldw	r19,12(sp)
    8318:	dc800217 	ldw	r18,8(sp)
    831c:	dc400117 	ldw	r17,4(sp)
    8320:	dc000017 	ldw	r16,0(sp)
    8324:	dec00704 	addi	sp,sp,28
    8328:	f800283a 	ret

0000832c <__i2b>:
    832c:	defffd04 	addi	sp,sp,-12
    8330:	dc000015 	stw	r16,0(sp)
    8334:	04000044 	movi	r16,1
    8338:	dc800115 	stw	r18,4(sp)
    833c:	2825883a 	mov	r18,r5
    8340:	800b883a 	mov	r5,r16
    8344:	dfc00215 	stw	ra,8(sp)
    8348:	0007c340 	call	7c34 <_Balloc>
    834c:	14000415 	stw	r16,16(r2)
    8350:	14800515 	stw	r18,20(r2)
    8354:	dfc00217 	ldw	ra,8(sp)
    8358:	dc800117 	ldw	r18,4(sp)
    835c:	dc000017 	ldw	r16,0(sp)
    8360:	dec00304 	addi	sp,sp,12
    8364:	f800283a 	ret

00008368 <__multadd>:
    8368:	defffa04 	addi	sp,sp,-24
    836c:	dc800215 	stw	r18,8(sp)
    8370:	2c800417 	ldw	r18,16(r5)
    8374:	dd000415 	stw	r20,16(sp)
    8378:	dcc00315 	stw	r19,12(sp)
    837c:	dc000015 	stw	r16,0(sp)
    8380:	dfc00515 	stw	ra,20(sp)
    8384:	3821883a 	mov	r16,r7
    8388:	dc400115 	stw	r17,4(sp)
    838c:	2827883a 	mov	r19,r5
    8390:	2029883a 	mov	r20,r4
    8394:	2a000504 	addi	r8,r5,20
    8398:	000f883a 	mov	r7,zero
    839c:	40800017 	ldw	r2,0(r8)
    83a0:	39c00044 	addi	r7,r7,1
    83a4:	10ffffcc 	andi	r3,r2,65535
    83a8:	1987383a 	mul	r3,r3,r6
    83ac:	1004d43a 	srli	r2,r2,16
    83b0:	1c07883a 	add	r3,r3,r16
    83b4:	180ad43a 	srli	r5,r3,16
    83b8:	1185383a 	mul	r2,r2,r6
    83bc:	18ffffcc 	andi	r3,r3,65535
    83c0:	1145883a 	add	r2,r2,r5
    83c4:	1008943a 	slli	r4,r2,16
    83c8:	1020d43a 	srli	r16,r2,16
    83cc:	20c9883a 	add	r4,r4,r3
    83d0:	41000015 	stw	r4,0(r8)
    83d4:	42000104 	addi	r8,r8,4
    83d8:	3cbff016 	blt	r7,r18,839c <__multadd+0x34>
    83dc:	80000826 	beq	r16,zero,8400 <__multadd+0x98>
    83e0:	98800217 	ldw	r2,8(r19)
    83e4:	90800f0e 	bge	r18,r2,8424 <__multadd+0xbc>
    83e8:	9485883a 	add	r2,r18,r18
    83ec:	1085883a 	add	r2,r2,r2
    83f0:	14c5883a 	add	r2,r2,r19
    83f4:	90c00044 	addi	r3,r18,1
    83f8:	14000515 	stw	r16,20(r2)
    83fc:	98c00415 	stw	r3,16(r19)
    8400:	9805883a 	mov	r2,r19
    8404:	dfc00517 	ldw	ra,20(sp)
    8408:	dd000417 	ldw	r20,16(sp)
    840c:	dcc00317 	ldw	r19,12(sp)
    8410:	dc800217 	ldw	r18,8(sp)
    8414:	dc400117 	ldw	r17,4(sp)
    8418:	dc000017 	ldw	r16,0(sp)
    841c:	dec00604 	addi	sp,sp,24
    8420:	f800283a 	ret
    8424:	99400117 	ldw	r5,4(r19)
    8428:	a009883a 	mov	r4,r20
    842c:	29400044 	addi	r5,r5,1
    8430:	0007c340 	call	7c34 <_Balloc>
    8434:	99800417 	ldw	r6,16(r19)
    8438:	99400304 	addi	r5,r19,12
    843c:	11000304 	addi	r4,r2,12
    8440:	318d883a 	add	r6,r6,r6
    8444:	318d883a 	add	r6,r6,r6
    8448:	31800204 	addi	r6,r6,8
    844c:	1023883a 	mov	r17,r2
    8450:	0001fa40 	call	1fa4 <memcpy>
    8454:	980b883a 	mov	r5,r19
    8458:	a009883a 	mov	r4,r20
    845c:	00076b40 	call	76b4 <_Bfree>
    8460:	8827883a 	mov	r19,r17
    8464:	003fe006 	br	83e8 <__multadd+0x80>

00008468 <__pow5mult>:
    8468:	defffa04 	addi	sp,sp,-24
    846c:	308000cc 	andi	r2,r6,3
    8470:	dd000415 	stw	r20,16(sp)
    8474:	dcc00315 	stw	r19,12(sp)
    8478:	dc000015 	stw	r16,0(sp)
    847c:	dfc00515 	stw	ra,20(sp)
    8480:	dc800215 	stw	r18,8(sp)
    8484:	dc400115 	stw	r17,4(sp)
    8488:	3021883a 	mov	r16,r6
    848c:	2027883a 	mov	r19,r4
    8490:	2829883a 	mov	r20,r5
    8494:	10002b1e 	bne	r2,zero,8544 <__pow5mult+0xdc>
    8498:	8025d0ba 	srai	r18,r16,2
    849c:	90001b26 	beq	r18,zero,850c <__pow5mult+0xa4>
    84a0:	9c001217 	ldw	r16,72(r19)
    84a4:	8000081e 	bne	r16,zero,84c8 <__pow5mult+0x60>
    84a8:	00003006 	br	856c <__pow5mult+0x104>
    84ac:	800b883a 	mov	r5,r16
    84b0:	800d883a 	mov	r6,r16
    84b4:	9809883a 	mov	r4,r19
    84b8:	90001426 	beq	r18,zero,850c <__pow5mult+0xa4>
    84bc:	80800017 	ldw	r2,0(r16)
    84c0:	10001b26 	beq	r2,zero,8530 <__pow5mult+0xc8>
    84c4:	1021883a 	mov	r16,r2
    84c8:	9080004c 	andi	r2,r18,1
    84cc:	1005003a 	cmpeq	r2,r2,zero
    84d0:	9025d07a 	srai	r18,r18,1
    84d4:	800d883a 	mov	r6,r16
    84d8:	9809883a 	mov	r4,r19
    84dc:	a00b883a 	mov	r5,r20
    84e0:	103ff21e 	bne	r2,zero,84ac <__pow5mult+0x44>
    84e4:	00081440 	call	8144 <__multiply>
    84e8:	a00b883a 	mov	r5,r20
    84ec:	9809883a 	mov	r4,r19
    84f0:	1023883a 	mov	r17,r2
    84f4:	00076b40 	call	76b4 <_Bfree>
    84f8:	8829883a 	mov	r20,r17
    84fc:	800b883a 	mov	r5,r16
    8500:	800d883a 	mov	r6,r16
    8504:	9809883a 	mov	r4,r19
    8508:	903fec1e 	bne	r18,zero,84bc <__pow5mult+0x54>
    850c:	a005883a 	mov	r2,r20
    8510:	dfc00517 	ldw	ra,20(sp)
    8514:	dd000417 	ldw	r20,16(sp)
    8518:	dcc00317 	ldw	r19,12(sp)
    851c:	dc800217 	ldw	r18,8(sp)
    8520:	dc400117 	ldw	r17,4(sp)
    8524:	dc000017 	ldw	r16,0(sp)
    8528:	dec00604 	addi	sp,sp,24
    852c:	f800283a 	ret
    8530:	00081440 	call	8144 <__multiply>
    8534:	80800015 	stw	r2,0(r16)
    8538:	1021883a 	mov	r16,r2
    853c:	10000015 	stw	zero,0(r2)
    8540:	003fe106 	br	84c8 <__pow5mult+0x60>
    8544:	1085883a 	add	r2,r2,r2
    8548:	00c00074 	movhi	r3,1
    854c:	18fb1104 	addi	r3,r3,-5052
    8550:	1085883a 	add	r2,r2,r2
    8554:	10c5883a 	add	r2,r2,r3
    8558:	11bfff17 	ldw	r6,-4(r2)
    855c:	000f883a 	mov	r7,zero
    8560:	00083680 	call	8368 <__multadd>
    8564:	1029883a 	mov	r20,r2
    8568:	003fcb06 	br	8498 <__pow5mult+0x30>
    856c:	9809883a 	mov	r4,r19
    8570:	01409c44 	movi	r5,625
    8574:	000832c0 	call	832c <__i2b>
    8578:	98801215 	stw	r2,72(r19)
    857c:	1021883a 	mov	r16,r2
    8580:	10000015 	stw	zero,0(r2)
    8584:	003fd006 	br	84c8 <__pow5mult+0x60>

00008588 <__s2b>:
    8588:	defff904 	addi	sp,sp,-28
    858c:	dcc00315 	stw	r19,12(sp)
    8590:	dc800215 	stw	r18,8(sp)
    8594:	2827883a 	mov	r19,r5
    8598:	2025883a 	mov	r18,r4
    859c:	01400244 	movi	r5,9
    85a0:	39000204 	addi	r4,r7,8
    85a4:	dd000415 	stw	r20,16(sp)
    85a8:	dc400115 	stw	r17,4(sp)
    85ac:	dfc00615 	stw	ra,24(sp)
    85b0:	dd400515 	stw	r21,20(sp)
    85b4:	dc000015 	stw	r16,0(sp)
    85b8:	3829883a 	mov	r20,r7
    85bc:	3023883a 	mov	r17,r6
    85c0:	0001ed40 	call	1ed4 <__divsi3>
    85c4:	00c00044 	movi	r3,1
    85c8:	1880350e 	bge	r3,r2,86a0 <__s2b+0x118>
    85cc:	000b883a 	mov	r5,zero
    85d0:	18c7883a 	add	r3,r3,r3
    85d4:	29400044 	addi	r5,r5,1
    85d8:	18bffd16 	blt	r3,r2,85d0 <__s2b+0x48>
    85dc:	9009883a 	mov	r4,r18
    85e0:	0007c340 	call	7c34 <_Balloc>
    85e4:	1011883a 	mov	r8,r2
    85e8:	d8800717 	ldw	r2,28(sp)
    85ec:	00c00044 	movi	r3,1
    85f0:	01800244 	movi	r6,9
    85f4:	40800515 	stw	r2,20(r8)
    85f8:	40c00415 	stw	r3,16(r8)
    85fc:	3440260e 	bge	r6,r17,8698 <__s2b+0x110>
    8600:	3021883a 	mov	r16,r6
    8604:	99ab883a 	add	r21,r19,r6
    8608:	9c05883a 	add	r2,r19,r16
    860c:	11c00007 	ldb	r7,0(r2)
    8610:	400b883a 	mov	r5,r8
    8614:	9009883a 	mov	r4,r18
    8618:	39fff404 	addi	r7,r7,-48
    861c:	01800284 	movi	r6,10
    8620:	00083680 	call	8368 <__multadd>
    8624:	84000044 	addi	r16,r16,1
    8628:	1011883a 	mov	r8,r2
    862c:	8c3ff61e 	bne	r17,r16,8608 <__s2b+0x80>
    8630:	ac45883a 	add	r2,r21,r17
    8634:	117ffe04 	addi	r5,r2,-8
    8638:	880d883a 	mov	r6,r17
    863c:	35000c0e 	bge	r6,r20,8670 <__s2b+0xe8>
    8640:	a185c83a 	sub	r2,r20,r6
    8644:	2821883a 	mov	r16,r5
    8648:	28a3883a 	add	r17,r5,r2
    864c:	81c00007 	ldb	r7,0(r16)
    8650:	400b883a 	mov	r5,r8
    8654:	9009883a 	mov	r4,r18
    8658:	39fff404 	addi	r7,r7,-48
    865c:	01800284 	movi	r6,10
    8660:	00083680 	call	8368 <__multadd>
    8664:	84000044 	addi	r16,r16,1
    8668:	1011883a 	mov	r8,r2
    866c:	847ff71e 	bne	r16,r17,864c <__s2b+0xc4>
    8670:	4005883a 	mov	r2,r8
    8674:	dfc00617 	ldw	ra,24(sp)
    8678:	dd400517 	ldw	r21,20(sp)
    867c:	dd000417 	ldw	r20,16(sp)
    8680:	dcc00317 	ldw	r19,12(sp)
    8684:	dc800217 	ldw	r18,8(sp)
    8688:	dc400117 	ldw	r17,4(sp)
    868c:	dc000017 	ldw	r16,0(sp)
    8690:	dec00704 	addi	sp,sp,28
    8694:	f800283a 	ret
    8698:	99400284 	addi	r5,r19,10
    869c:	003fe706 	br	863c <__s2b+0xb4>
    86a0:	000b883a 	mov	r5,zero
    86a4:	003fcd06 	br	85dc <__s2b+0x54>

000086a8 <_realloc_r>:
    86a8:	defff404 	addi	sp,sp,-48
    86ac:	dd800815 	stw	r22,32(sp)
    86b0:	dc800415 	stw	r18,16(sp)
    86b4:	dc400315 	stw	r17,12(sp)
    86b8:	dfc00b15 	stw	ra,44(sp)
    86bc:	df000a15 	stw	fp,40(sp)
    86c0:	ddc00915 	stw	r23,36(sp)
    86c4:	dd400715 	stw	r21,28(sp)
    86c8:	dd000615 	stw	r20,24(sp)
    86cc:	dcc00515 	stw	r19,20(sp)
    86d0:	dc000215 	stw	r16,8(sp)
    86d4:	2825883a 	mov	r18,r5
    86d8:	3023883a 	mov	r17,r6
    86dc:	202d883a 	mov	r22,r4
    86e0:	2800c926 	beq	r5,zero,8a08 <_realloc_r+0x360>
    86e4:	000b9f80 	call	b9f8 <__malloc_lock>
    86e8:	943ffe04 	addi	r16,r18,-8
    86ec:	88c002c4 	addi	r3,r17,11
    86f0:	00800584 	movi	r2,22
    86f4:	82000117 	ldw	r8,4(r16)
    86f8:	10c01b2e 	bgeu	r2,r3,8768 <_realloc_r+0xc0>
    86fc:	00bffe04 	movi	r2,-8
    8700:	188e703a 	and	r7,r3,r2
    8704:	3839883a 	mov	fp,r7
    8708:	38001a16 	blt	r7,zero,8774 <_realloc_r+0xcc>
    870c:	e4401936 	bltu	fp,r17,8774 <_realloc_r+0xcc>
    8710:	013fff04 	movi	r4,-4
    8714:	4126703a 	and	r19,r8,r4
    8718:	99c02616 	blt	r19,r7,87b4 <_realloc_r+0x10c>
    871c:	802b883a 	mov	r21,r16
    8720:	9829883a 	mov	r20,r19
    8724:	84000204 	addi	r16,r16,8
    8728:	a80f883a 	mov	r7,r21
    872c:	a70dc83a 	sub	r6,r20,fp
    8730:	008003c4 	movi	r2,15
    8734:	1180c136 	bltu	r2,r6,8a3c <_realloc_r+0x394>
    8738:	38800117 	ldw	r2,4(r7)
    873c:	a549883a 	add	r4,r20,r21
    8740:	1080004c 	andi	r2,r2,1
    8744:	a084b03a 	or	r2,r20,r2
    8748:	38800115 	stw	r2,4(r7)
    874c:	20c00117 	ldw	r3,4(r4)
    8750:	18c00054 	ori	r3,r3,1
    8754:	20c00115 	stw	r3,4(r4)
    8758:	b009883a 	mov	r4,r22
    875c:	000b9fc0 	call	b9fc <__malloc_unlock>
    8760:	8023883a 	mov	r17,r16
    8764:	00000606 	br	8780 <_realloc_r+0xd8>
    8768:	01c00404 	movi	r7,16
    876c:	3839883a 	mov	fp,r7
    8770:	e47fe72e 	bgeu	fp,r17,8710 <_realloc_r+0x68>
    8774:	00800304 	movi	r2,12
    8778:	0023883a 	mov	r17,zero
    877c:	b0800015 	stw	r2,0(r22)
    8780:	8805883a 	mov	r2,r17
    8784:	dfc00b17 	ldw	ra,44(sp)
    8788:	df000a17 	ldw	fp,40(sp)
    878c:	ddc00917 	ldw	r23,36(sp)
    8790:	dd800817 	ldw	r22,32(sp)
    8794:	dd400717 	ldw	r21,28(sp)
    8798:	dd000617 	ldw	r20,24(sp)
    879c:	dcc00517 	ldw	r19,20(sp)
    87a0:	dc800417 	ldw	r18,16(sp)
    87a4:	dc400317 	ldw	r17,12(sp)
    87a8:	dc000217 	ldw	r16,8(sp)
    87ac:	dec00c04 	addi	sp,sp,48
    87b0:	f800283a 	ret
    87b4:	00800074 	movhi	r2,1
    87b8:	10bc5304 	addi	r2,r2,-3764
    87bc:	12400217 	ldw	r9,8(r2)
    87c0:	84cd883a 	add	r6,r16,r19
    87c4:	802b883a 	mov	r21,r16
    87c8:	3240b926 	beq	r6,r9,8ab0 <_realloc_r+0x408>
    87cc:	31400117 	ldw	r5,4(r6)
    87d0:	00bfff84 	movi	r2,-2
    87d4:	2884703a 	and	r2,r5,r2
    87d8:	1185883a 	add	r2,r2,r6
    87dc:	10c00117 	ldw	r3,4(r2)
    87e0:	18c0004c 	andi	r3,r3,1
    87e4:	1807003a 	cmpeq	r3,r3,zero
    87e8:	1800a326 	beq	r3,zero,8a78 <_realloc_r+0x3d0>
    87ec:	2908703a 	and	r4,r5,r4
    87f0:	9929883a 	add	r20,r19,r4
    87f4:	a1c0a30e 	bge	r20,r7,8a84 <_realloc_r+0x3dc>
    87f8:	4080004c 	andi	r2,r8,1
    87fc:	1000551e 	bne	r2,zero,8954 <_realloc_r+0x2ac>
    8800:	80800017 	ldw	r2,0(r16)
    8804:	80afc83a 	sub	r23,r16,r2
    8808:	b8c00117 	ldw	r3,4(r23)
    880c:	00bfff04 	movi	r2,-4
    8810:	1884703a 	and	r2,r3,r2
    8814:	30002e26 	beq	r6,zero,88d0 <_realloc_r+0x228>
    8818:	3240b926 	beq	r6,r9,8b00 <_realloc_r+0x458>
    881c:	98a9883a 	add	r20,r19,r2
    8820:	2509883a 	add	r4,r4,r20
    8824:	d9000015 	stw	r4,0(sp)
    8828:	21c02a16 	blt	r4,r7,88d4 <_realloc_r+0x22c>
    882c:	30800317 	ldw	r2,12(r6)
    8830:	30c00217 	ldw	r3,8(r6)
    8834:	01400904 	movi	r5,36
    8838:	99bfff04 	addi	r6,r19,-4
    883c:	18800315 	stw	r2,12(r3)
    8840:	10c00215 	stw	r3,8(r2)
    8844:	b9000317 	ldw	r4,12(r23)
    8848:	b8800217 	ldw	r2,8(r23)
    884c:	b82b883a 	mov	r21,r23
    8850:	bc000204 	addi	r16,r23,8
    8854:	20800215 	stw	r2,8(r4)
    8858:	11000315 	stw	r4,12(r2)
    885c:	2980e436 	bltu	r5,r6,8bf0 <_realloc_r+0x548>
    8860:	008004c4 	movi	r2,19
    8864:	9009883a 	mov	r4,r18
    8868:	8011883a 	mov	r8,r16
    886c:	11800f2e 	bgeu	r2,r6,88ac <_realloc_r+0x204>
    8870:	90800017 	ldw	r2,0(r18)
    8874:	ba000404 	addi	r8,r23,16
    8878:	91000204 	addi	r4,r18,8
    887c:	b8800215 	stw	r2,8(r23)
    8880:	90c00117 	ldw	r3,4(r18)
    8884:	008006c4 	movi	r2,27
    8888:	b8c00315 	stw	r3,12(r23)
    888c:	1180072e 	bgeu	r2,r6,88ac <_realloc_r+0x204>
    8890:	90c00217 	ldw	r3,8(r18)
    8894:	ba000604 	addi	r8,r23,24
    8898:	91000404 	addi	r4,r18,16
    889c:	b8c00415 	stw	r3,16(r23)
    88a0:	90800317 	ldw	r2,12(r18)
    88a4:	b8800515 	stw	r2,20(r23)
    88a8:	3140e726 	beq	r6,r5,8c48 <_realloc_r+0x5a0>
    88ac:	20800017 	ldw	r2,0(r4)
    88b0:	dd000017 	ldw	r20,0(sp)
    88b4:	b80f883a 	mov	r7,r23
    88b8:	40800015 	stw	r2,0(r8)
    88bc:	20c00117 	ldw	r3,4(r4)
    88c0:	40c00115 	stw	r3,4(r8)
    88c4:	20800217 	ldw	r2,8(r4)
    88c8:	40800215 	stw	r2,8(r8)
    88cc:	003f9706 	br	872c <_realloc_r+0x84>
    88d0:	98a9883a 	add	r20,r19,r2
    88d4:	a1c01f16 	blt	r20,r7,8954 <_realloc_r+0x2ac>
    88d8:	b8c00317 	ldw	r3,12(r23)
    88dc:	b8800217 	ldw	r2,8(r23)
    88e0:	99bfff04 	addi	r6,r19,-4
    88e4:	01400904 	movi	r5,36
    88e8:	b82b883a 	mov	r21,r23
    88ec:	18800215 	stw	r2,8(r3)
    88f0:	10c00315 	stw	r3,12(r2)
    88f4:	bc000204 	addi	r16,r23,8
    88f8:	2980c336 	bltu	r5,r6,8c08 <_realloc_r+0x560>
    88fc:	008004c4 	movi	r2,19
    8900:	9009883a 	mov	r4,r18
    8904:	8011883a 	mov	r8,r16
    8908:	11800f2e 	bgeu	r2,r6,8948 <_realloc_r+0x2a0>
    890c:	90800017 	ldw	r2,0(r18)
    8910:	ba000404 	addi	r8,r23,16
    8914:	91000204 	addi	r4,r18,8
    8918:	b8800215 	stw	r2,8(r23)
    891c:	90c00117 	ldw	r3,4(r18)
    8920:	008006c4 	movi	r2,27
    8924:	b8c00315 	stw	r3,12(r23)
    8928:	1180072e 	bgeu	r2,r6,8948 <_realloc_r+0x2a0>
    892c:	90c00217 	ldw	r3,8(r18)
    8930:	ba000604 	addi	r8,r23,24
    8934:	91000404 	addi	r4,r18,16
    8938:	b8c00415 	stw	r3,16(r23)
    893c:	90800317 	ldw	r2,12(r18)
    8940:	b8800515 	stw	r2,20(r23)
    8944:	3140c726 	beq	r6,r5,8c64 <_realloc_r+0x5bc>
    8948:	20800017 	ldw	r2,0(r4)
    894c:	b80f883a 	mov	r7,r23
    8950:	003fd906 	br	88b8 <_realloc_r+0x210>
    8954:	880b883a 	mov	r5,r17
    8958:	b009883a 	mov	r4,r22
    895c:	0006db00 	call	6db0 <_malloc_r>
    8960:	1023883a 	mov	r17,r2
    8964:	10002526 	beq	r2,zero,89fc <_realloc_r+0x354>
    8968:	80800117 	ldw	r2,4(r16)
    896c:	00ffff84 	movi	r3,-2
    8970:	893ffe04 	addi	r4,r17,-8
    8974:	10c4703a 	and	r2,r2,r3
    8978:	8085883a 	add	r2,r16,r2
    897c:	20809526 	beq	r4,r2,8bd4 <_realloc_r+0x52c>
    8980:	99bfff04 	addi	r6,r19,-4
    8984:	01c00904 	movi	r7,36
    8988:	39804536 	bltu	r7,r6,8aa0 <_realloc_r+0x3f8>
    898c:	008004c4 	movi	r2,19
    8990:	9009883a 	mov	r4,r18
    8994:	880b883a 	mov	r5,r17
    8998:	11800f2e 	bgeu	r2,r6,89d8 <_realloc_r+0x330>
    899c:	90800017 	ldw	r2,0(r18)
    89a0:	89400204 	addi	r5,r17,8
    89a4:	91000204 	addi	r4,r18,8
    89a8:	88800015 	stw	r2,0(r17)
    89ac:	90c00117 	ldw	r3,4(r18)
    89b0:	008006c4 	movi	r2,27
    89b4:	88c00115 	stw	r3,4(r17)
    89b8:	1180072e 	bgeu	r2,r6,89d8 <_realloc_r+0x330>
    89bc:	90c00217 	ldw	r3,8(r18)
    89c0:	89400404 	addi	r5,r17,16
    89c4:	91000404 	addi	r4,r18,16
    89c8:	88c00215 	stw	r3,8(r17)
    89cc:	90800317 	ldw	r2,12(r18)
    89d0:	88800315 	stw	r2,12(r17)
    89d4:	31c09126 	beq	r6,r7,8c1c <_realloc_r+0x574>
    89d8:	20800017 	ldw	r2,0(r4)
    89dc:	28800015 	stw	r2,0(r5)
    89e0:	20c00117 	ldw	r3,4(r4)
    89e4:	28c00115 	stw	r3,4(r5)
    89e8:	20800217 	ldw	r2,8(r4)
    89ec:	28800215 	stw	r2,8(r5)
    89f0:	900b883a 	mov	r5,r18
    89f4:	b009883a 	mov	r4,r22
    89f8:	00062280 	call	6228 <_free_r>
    89fc:	b009883a 	mov	r4,r22
    8a00:	000b9fc0 	call	b9fc <__malloc_unlock>
    8a04:	003f5e06 	br	8780 <_realloc_r+0xd8>
    8a08:	300b883a 	mov	r5,r6
    8a0c:	dfc00b17 	ldw	ra,44(sp)
    8a10:	df000a17 	ldw	fp,40(sp)
    8a14:	ddc00917 	ldw	r23,36(sp)
    8a18:	dd800817 	ldw	r22,32(sp)
    8a1c:	dd400717 	ldw	r21,28(sp)
    8a20:	dd000617 	ldw	r20,24(sp)
    8a24:	dcc00517 	ldw	r19,20(sp)
    8a28:	dc800417 	ldw	r18,16(sp)
    8a2c:	dc400317 	ldw	r17,12(sp)
    8a30:	dc000217 	ldw	r16,8(sp)
    8a34:	dec00c04 	addi	sp,sp,48
    8a38:	0006db01 	jmpi	6db0 <_malloc_r>
    8a3c:	38800117 	ldw	r2,4(r7)
    8a40:	e54b883a 	add	r5,fp,r21
    8a44:	31000054 	ori	r4,r6,1
    8a48:	1080004c 	andi	r2,r2,1
    8a4c:	1704b03a 	or	r2,r2,fp
    8a50:	38800115 	stw	r2,4(r7)
    8a54:	29000115 	stw	r4,4(r5)
    8a58:	2987883a 	add	r3,r5,r6
    8a5c:	18800117 	ldw	r2,4(r3)
    8a60:	29400204 	addi	r5,r5,8
    8a64:	b009883a 	mov	r4,r22
    8a68:	10800054 	ori	r2,r2,1
    8a6c:	18800115 	stw	r2,4(r3)
    8a70:	00062280 	call	6228 <_free_r>
    8a74:	003f3806 	br	8758 <_realloc_r+0xb0>
    8a78:	000d883a 	mov	r6,zero
    8a7c:	0009883a 	mov	r4,zero
    8a80:	003f5d06 	br	87f8 <_realloc_r+0x150>
    8a84:	30c00217 	ldw	r3,8(r6)
    8a88:	30800317 	ldw	r2,12(r6)
    8a8c:	800f883a 	mov	r7,r16
    8a90:	84000204 	addi	r16,r16,8
    8a94:	10c00215 	stw	r3,8(r2)
    8a98:	18800315 	stw	r2,12(r3)
    8a9c:	003f2306 	br	872c <_realloc_r+0x84>
    8aa0:	8809883a 	mov	r4,r17
    8aa4:	900b883a 	mov	r5,r18
    8aa8:	00075d40 	call	75d4 <memmove>
    8aac:	003fd006 	br	89f0 <_realloc_r+0x348>
    8ab0:	30800117 	ldw	r2,4(r6)
    8ab4:	e0c00404 	addi	r3,fp,16
    8ab8:	1108703a 	and	r4,r2,r4
    8abc:	9905883a 	add	r2,r19,r4
    8ac0:	10ff4d16 	blt	r2,r3,87f8 <_realloc_r+0x150>
    8ac4:	1705c83a 	sub	r2,r2,fp
    8ac8:	870b883a 	add	r5,r16,fp
    8acc:	10800054 	ori	r2,r2,1
    8ad0:	28800115 	stw	r2,4(r5)
    8ad4:	80c00117 	ldw	r3,4(r16)
    8ad8:	00800074 	movhi	r2,1
    8adc:	10bc5304 	addi	r2,r2,-3764
    8ae0:	b009883a 	mov	r4,r22
    8ae4:	18c0004c 	andi	r3,r3,1
    8ae8:	e0c6b03a 	or	r3,fp,r3
    8aec:	11400215 	stw	r5,8(r2)
    8af0:	80c00115 	stw	r3,4(r16)
    8af4:	000b9fc0 	call	b9fc <__malloc_unlock>
    8af8:	84400204 	addi	r17,r16,8
    8afc:	003f2006 	br	8780 <_realloc_r+0xd8>
    8b00:	98a9883a 	add	r20,r19,r2
    8b04:	2509883a 	add	r4,r4,r20
    8b08:	e0800404 	addi	r2,fp,16
    8b0c:	d9000115 	stw	r4,4(sp)
    8b10:	20bf7016 	blt	r4,r2,88d4 <_realloc_r+0x22c>
    8b14:	b8c00317 	ldw	r3,12(r23)
    8b18:	b8800217 	ldw	r2,8(r23)
    8b1c:	99bfff04 	addi	r6,r19,-4
    8b20:	01400904 	movi	r5,36
    8b24:	18800215 	stw	r2,8(r3)
    8b28:	10c00315 	stw	r3,12(r2)
    8b2c:	bc400204 	addi	r17,r23,8
    8b30:	29804136 	bltu	r5,r6,8c38 <_realloc_r+0x590>
    8b34:	008004c4 	movi	r2,19
    8b38:	9009883a 	mov	r4,r18
    8b3c:	880f883a 	mov	r7,r17
    8b40:	11800f2e 	bgeu	r2,r6,8b80 <_realloc_r+0x4d8>
    8b44:	90800017 	ldw	r2,0(r18)
    8b48:	b9c00404 	addi	r7,r23,16
    8b4c:	91000204 	addi	r4,r18,8
    8b50:	b8800215 	stw	r2,8(r23)
    8b54:	90c00117 	ldw	r3,4(r18)
    8b58:	008006c4 	movi	r2,27
    8b5c:	b8c00315 	stw	r3,12(r23)
    8b60:	1180072e 	bgeu	r2,r6,8b80 <_realloc_r+0x4d8>
    8b64:	90c00217 	ldw	r3,8(r18)
    8b68:	b9c00604 	addi	r7,r23,24
    8b6c:	91000404 	addi	r4,r18,16
    8b70:	b8c00415 	stw	r3,16(r23)
    8b74:	90800317 	ldw	r2,12(r18)
    8b78:	b8800515 	stw	r2,20(r23)
    8b7c:	31404026 	beq	r6,r5,8c80 <_realloc_r+0x5d8>
    8b80:	20800017 	ldw	r2,0(r4)
    8b84:	38800015 	stw	r2,0(r7)
    8b88:	20c00117 	ldw	r3,4(r4)
    8b8c:	38c00115 	stw	r3,4(r7)
    8b90:	20800217 	ldw	r2,8(r4)
    8b94:	38800215 	stw	r2,8(r7)
    8b98:	d8c00117 	ldw	r3,4(sp)
    8b9c:	bf0b883a 	add	r5,r23,fp
    8ba0:	b009883a 	mov	r4,r22
    8ba4:	1f05c83a 	sub	r2,r3,fp
    8ba8:	10800054 	ori	r2,r2,1
    8bac:	28800115 	stw	r2,4(r5)
    8bb0:	b8c00117 	ldw	r3,4(r23)
    8bb4:	00800074 	movhi	r2,1
    8bb8:	10bc5304 	addi	r2,r2,-3764
    8bbc:	11400215 	stw	r5,8(r2)
    8bc0:	18c0004c 	andi	r3,r3,1
    8bc4:	e0c6b03a 	or	r3,fp,r3
    8bc8:	b8c00115 	stw	r3,4(r23)
    8bcc:	000b9fc0 	call	b9fc <__malloc_unlock>
    8bd0:	003eeb06 	br	8780 <_realloc_r+0xd8>
    8bd4:	20800117 	ldw	r2,4(r4)
    8bd8:	00ffff04 	movi	r3,-4
    8bdc:	800f883a 	mov	r7,r16
    8be0:	10c4703a 	and	r2,r2,r3
    8be4:	98a9883a 	add	r20,r19,r2
    8be8:	84000204 	addi	r16,r16,8
    8bec:	003ecf06 	br	872c <_realloc_r+0x84>
    8bf0:	900b883a 	mov	r5,r18
    8bf4:	8009883a 	mov	r4,r16
    8bf8:	00075d40 	call	75d4 <memmove>
    8bfc:	dd000017 	ldw	r20,0(sp)
    8c00:	b80f883a 	mov	r7,r23
    8c04:	003ec906 	br	872c <_realloc_r+0x84>
    8c08:	900b883a 	mov	r5,r18
    8c0c:	8009883a 	mov	r4,r16
    8c10:	00075d40 	call	75d4 <memmove>
    8c14:	b80f883a 	mov	r7,r23
    8c18:	003ec406 	br	872c <_realloc_r+0x84>
    8c1c:	90c00417 	ldw	r3,16(r18)
    8c20:	89400604 	addi	r5,r17,24
    8c24:	91000604 	addi	r4,r18,24
    8c28:	88c00415 	stw	r3,16(r17)
    8c2c:	90800517 	ldw	r2,20(r18)
    8c30:	88800515 	stw	r2,20(r17)
    8c34:	003f6806 	br	89d8 <_realloc_r+0x330>
    8c38:	900b883a 	mov	r5,r18
    8c3c:	8809883a 	mov	r4,r17
    8c40:	00075d40 	call	75d4 <memmove>
    8c44:	003fd406 	br	8b98 <_realloc_r+0x4f0>
    8c48:	90c00417 	ldw	r3,16(r18)
    8c4c:	91000604 	addi	r4,r18,24
    8c50:	ba000804 	addi	r8,r23,32
    8c54:	b8c00615 	stw	r3,24(r23)
    8c58:	90800517 	ldw	r2,20(r18)
    8c5c:	b8800715 	stw	r2,28(r23)
    8c60:	003f1206 	br	88ac <_realloc_r+0x204>
    8c64:	90c00417 	ldw	r3,16(r18)
    8c68:	91000604 	addi	r4,r18,24
    8c6c:	ba000804 	addi	r8,r23,32
    8c70:	b8c00615 	stw	r3,24(r23)
    8c74:	90800517 	ldw	r2,20(r18)
    8c78:	b8800715 	stw	r2,28(r23)
    8c7c:	003f3206 	br	8948 <_realloc_r+0x2a0>
    8c80:	90c00417 	ldw	r3,16(r18)
    8c84:	91000604 	addi	r4,r18,24
    8c88:	b9c00804 	addi	r7,r23,32
    8c8c:	b8c00615 	stw	r3,24(r23)
    8c90:	90800517 	ldw	r2,20(r18)
    8c94:	b8800715 	stw	r2,28(r23)
    8c98:	003fb906 	br	8b80 <_realloc_r+0x4d8>

00008c9c <__isinfd>:
    8c9c:	200d883a 	mov	r6,r4
    8ca0:	0109c83a 	sub	r4,zero,r4
    8ca4:	2188b03a 	or	r4,r4,r6
    8ca8:	2008d7fa 	srli	r4,r4,31
    8cac:	00a00034 	movhi	r2,32768
    8cb0:	10bfffc4 	addi	r2,r2,-1
    8cb4:	1144703a 	and	r2,r2,r5
    8cb8:	2088b03a 	or	r4,r4,r2
    8cbc:	009ffc34 	movhi	r2,32752
    8cc0:	1105c83a 	sub	r2,r2,r4
    8cc4:	0087c83a 	sub	r3,zero,r2
    8cc8:	10c4b03a 	or	r2,r2,r3
    8ccc:	1004d7fa 	srli	r2,r2,31
    8cd0:	00c00044 	movi	r3,1
    8cd4:	1885c83a 	sub	r2,r3,r2
    8cd8:	f800283a 	ret

00008cdc <__isnand>:
    8cdc:	200d883a 	mov	r6,r4
    8ce0:	0109c83a 	sub	r4,zero,r4
    8ce4:	2188b03a 	or	r4,r4,r6
    8ce8:	2008d7fa 	srli	r4,r4,31
    8cec:	00a00034 	movhi	r2,32768
    8cf0:	10bfffc4 	addi	r2,r2,-1
    8cf4:	1144703a 	and	r2,r2,r5
    8cf8:	2088b03a 	or	r4,r4,r2
    8cfc:	009ffc34 	movhi	r2,32752
    8d00:	1105c83a 	sub	r2,r2,r4
    8d04:	1004d7fa 	srli	r2,r2,31
    8d08:	f800283a 	ret

00008d0c <_sbrk_r>:
    8d0c:	defffd04 	addi	sp,sp,-12
    8d10:	dc000015 	stw	r16,0(sp)
    8d14:	04000074 	movhi	r16,1
    8d18:	8409ce04 	addi	r16,r16,10040
    8d1c:	dc400115 	stw	r17,4(sp)
    8d20:	80000015 	stw	zero,0(r16)
    8d24:	2023883a 	mov	r17,r4
    8d28:	2809883a 	mov	r4,r5
    8d2c:	dfc00215 	stw	ra,8(sp)
    8d30:	000bd200 	call	bd20 <sbrk>
    8d34:	1007883a 	mov	r3,r2
    8d38:	00bfffc4 	movi	r2,-1
    8d3c:	18800626 	beq	r3,r2,8d58 <_sbrk_r+0x4c>
    8d40:	1805883a 	mov	r2,r3
    8d44:	dfc00217 	ldw	ra,8(sp)
    8d48:	dc400117 	ldw	r17,4(sp)
    8d4c:	dc000017 	ldw	r16,0(sp)
    8d50:	dec00304 	addi	sp,sp,12
    8d54:	f800283a 	ret
    8d58:	80800017 	ldw	r2,0(r16)
    8d5c:	103ff826 	beq	r2,zero,8d40 <_sbrk_r+0x34>
    8d60:	88800015 	stw	r2,0(r17)
    8d64:	1805883a 	mov	r2,r3
    8d68:	dfc00217 	ldw	ra,8(sp)
    8d6c:	dc400117 	ldw	r17,4(sp)
    8d70:	dc000017 	ldw	r16,0(sp)
    8d74:	dec00304 	addi	sp,sp,12
    8d78:	f800283a 	ret

00008d7c <__sclose>:
    8d7c:	2940038f 	ldh	r5,14(r5)
    8d80:	00090b01 	jmpi	90b0 <_close_r>

00008d84 <__sseek>:
    8d84:	defffe04 	addi	sp,sp,-8
    8d88:	dc000015 	stw	r16,0(sp)
    8d8c:	2821883a 	mov	r16,r5
    8d90:	2940038f 	ldh	r5,14(r5)
    8d94:	dfc00115 	stw	ra,4(sp)
    8d98:	00093280 	call	9328 <_lseek_r>
    8d9c:	1007883a 	mov	r3,r2
    8da0:	00bfffc4 	movi	r2,-1
    8da4:	18800926 	beq	r3,r2,8dcc <__sseek+0x48>
    8da8:	8080030b 	ldhu	r2,12(r16)
    8dac:	80c01415 	stw	r3,80(r16)
    8db0:	10840014 	ori	r2,r2,4096
    8db4:	8080030d 	sth	r2,12(r16)
    8db8:	1805883a 	mov	r2,r3
    8dbc:	dfc00117 	ldw	ra,4(sp)
    8dc0:	dc000017 	ldw	r16,0(sp)
    8dc4:	dec00204 	addi	sp,sp,8
    8dc8:	f800283a 	ret
    8dcc:	8080030b 	ldhu	r2,12(r16)
    8dd0:	10bbffcc 	andi	r2,r2,61439
    8dd4:	8080030d 	sth	r2,12(r16)
    8dd8:	1805883a 	mov	r2,r3
    8ddc:	dfc00117 	ldw	ra,4(sp)
    8de0:	dc000017 	ldw	r16,0(sp)
    8de4:	dec00204 	addi	sp,sp,8
    8de8:	f800283a 	ret

00008dec <__swrite>:
    8dec:	2880030b 	ldhu	r2,12(r5)
    8df0:	defffb04 	addi	sp,sp,-20
    8df4:	dcc00315 	stw	r19,12(sp)
    8df8:	1080400c 	andi	r2,r2,256
    8dfc:	dc800215 	stw	r18,8(sp)
    8e00:	dc400115 	stw	r17,4(sp)
    8e04:	dc000015 	stw	r16,0(sp)
    8e08:	3027883a 	mov	r19,r6
    8e0c:	3825883a 	mov	r18,r7
    8e10:	dfc00415 	stw	ra,16(sp)
    8e14:	2821883a 	mov	r16,r5
    8e18:	000d883a 	mov	r6,zero
    8e1c:	01c00084 	movi	r7,2
    8e20:	2023883a 	mov	r17,r4
    8e24:	10000226 	beq	r2,zero,8e30 <__swrite+0x44>
    8e28:	2940038f 	ldh	r5,14(r5)
    8e2c:	00093280 	call	9328 <_lseek_r>
    8e30:	8080030b 	ldhu	r2,12(r16)
    8e34:	8140038f 	ldh	r5,14(r16)
    8e38:	8809883a 	mov	r4,r17
    8e3c:	10bbffcc 	andi	r2,r2,61439
    8e40:	980d883a 	mov	r6,r19
    8e44:	900f883a 	mov	r7,r18
    8e48:	8080030d 	sth	r2,12(r16)
    8e4c:	dfc00417 	ldw	ra,16(sp)
    8e50:	dcc00317 	ldw	r19,12(sp)
    8e54:	dc800217 	ldw	r18,8(sp)
    8e58:	dc400117 	ldw	r17,4(sp)
    8e5c:	dc000017 	ldw	r16,0(sp)
    8e60:	dec00504 	addi	sp,sp,20
    8e64:	0008f841 	jmpi	8f84 <_write_r>

00008e68 <__sread>:
    8e68:	defffe04 	addi	sp,sp,-8
    8e6c:	dc000015 	stw	r16,0(sp)
    8e70:	2821883a 	mov	r16,r5
    8e74:	2940038f 	ldh	r5,14(r5)
    8e78:	dfc00115 	stw	ra,4(sp)
    8e7c:	00093a00 	call	93a0 <_read_r>
    8e80:	1007883a 	mov	r3,r2
    8e84:	10000816 	blt	r2,zero,8ea8 <__sread+0x40>
    8e88:	80801417 	ldw	r2,80(r16)
    8e8c:	10c5883a 	add	r2,r2,r3
    8e90:	80801415 	stw	r2,80(r16)
    8e94:	1805883a 	mov	r2,r3
    8e98:	dfc00117 	ldw	ra,4(sp)
    8e9c:	dc000017 	ldw	r16,0(sp)
    8ea0:	dec00204 	addi	sp,sp,8
    8ea4:	f800283a 	ret
    8ea8:	8080030b 	ldhu	r2,12(r16)
    8eac:	10bbffcc 	andi	r2,r2,61439
    8eb0:	8080030d 	sth	r2,12(r16)
    8eb4:	1805883a 	mov	r2,r3
    8eb8:	dfc00117 	ldw	ra,4(sp)
    8ebc:	dc000017 	ldw	r16,0(sp)
    8ec0:	dec00204 	addi	sp,sp,8
    8ec4:	f800283a 	ret

00008ec8 <strcmp>:
    8ec8:	2144b03a 	or	r2,r4,r5
    8ecc:	108000cc 	andi	r2,r2,3
    8ed0:	10001d1e 	bne	r2,zero,8f48 <strcmp+0x80>
    8ed4:	200f883a 	mov	r7,r4
    8ed8:	28800017 	ldw	r2,0(r5)
    8edc:	21000017 	ldw	r4,0(r4)
    8ee0:	280d883a 	mov	r6,r5
    8ee4:	2080161e 	bne	r4,r2,8f40 <strcmp+0x78>
    8ee8:	023fbff4 	movhi	r8,65279
    8eec:	423fbfc4 	addi	r8,r8,-257
    8ef0:	2207883a 	add	r3,r4,r8
    8ef4:	01602074 	movhi	r5,32897
    8ef8:	29602004 	addi	r5,r5,-32640
    8efc:	1946703a 	and	r3,r3,r5
    8f00:	0104303a 	nor	r2,zero,r4
    8f04:	10c4703a 	and	r2,r2,r3
    8f08:	10001c1e 	bne	r2,zero,8f7c <strcmp+0xb4>
    8f0c:	4013883a 	mov	r9,r8
    8f10:	2811883a 	mov	r8,r5
    8f14:	00000106 	br	8f1c <strcmp+0x54>
    8f18:	1800181e 	bne	r3,zero,8f7c <strcmp+0xb4>
    8f1c:	39c00104 	addi	r7,r7,4
    8f20:	39000017 	ldw	r4,0(r7)
    8f24:	31800104 	addi	r6,r6,4
    8f28:	31400017 	ldw	r5,0(r6)
    8f2c:	2245883a 	add	r2,r4,r9
    8f30:	1204703a 	and	r2,r2,r8
    8f34:	0106303a 	nor	r3,zero,r4
    8f38:	1886703a 	and	r3,r3,r2
    8f3c:	217ff626 	beq	r4,r5,8f18 <strcmp+0x50>
    8f40:	3809883a 	mov	r4,r7
    8f44:	300b883a 	mov	r5,r6
    8f48:	20c00007 	ldb	r3,0(r4)
    8f4c:	1800051e 	bne	r3,zero,8f64 <strcmp+0x9c>
    8f50:	00000606 	br	8f6c <strcmp+0xa4>
    8f54:	21000044 	addi	r4,r4,1
    8f58:	20c00007 	ldb	r3,0(r4)
    8f5c:	29400044 	addi	r5,r5,1
    8f60:	18000226 	beq	r3,zero,8f6c <strcmp+0xa4>
    8f64:	28800007 	ldb	r2,0(r5)
    8f68:	18bffa26 	beq	r3,r2,8f54 <strcmp+0x8c>
    8f6c:	20c00003 	ldbu	r3,0(r4)
    8f70:	28800003 	ldbu	r2,0(r5)
    8f74:	1885c83a 	sub	r2,r3,r2
    8f78:	f800283a 	ret
    8f7c:	0005883a 	mov	r2,zero
    8f80:	f800283a 	ret

00008f84 <_write_r>:
    8f84:	defffd04 	addi	sp,sp,-12
    8f88:	dc000015 	stw	r16,0(sp)
    8f8c:	04000074 	movhi	r16,1
    8f90:	8409ce04 	addi	r16,r16,10040
    8f94:	dc400115 	stw	r17,4(sp)
    8f98:	80000015 	stw	zero,0(r16)
    8f9c:	2023883a 	mov	r17,r4
    8fa0:	2809883a 	mov	r4,r5
    8fa4:	300b883a 	mov	r5,r6
    8fa8:	380d883a 	mov	r6,r7
    8fac:	dfc00215 	stw	ra,8(sp)
    8fb0:	000bd700 	call	bd70 <write>
    8fb4:	1007883a 	mov	r3,r2
    8fb8:	00bfffc4 	movi	r2,-1
    8fbc:	18800626 	beq	r3,r2,8fd8 <_write_r+0x54>
    8fc0:	1805883a 	mov	r2,r3
    8fc4:	dfc00217 	ldw	ra,8(sp)
    8fc8:	dc400117 	ldw	r17,4(sp)
    8fcc:	dc000017 	ldw	r16,0(sp)
    8fd0:	dec00304 	addi	sp,sp,12
    8fd4:	f800283a 	ret
    8fd8:	80800017 	ldw	r2,0(r16)
    8fdc:	103ff826 	beq	r2,zero,8fc0 <_write_r+0x3c>
    8fe0:	88800015 	stw	r2,0(r17)
    8fe4:	1805883a 	mov	r2,r3
    8fe8:	dfc00217 	ldw	ra,8(sp)
    8fec:	dc400117 	ldw	r17,4(sp)
    8ff0:	dc000017 	ldw	r16,0(sp)
    8ff4:	dec00304 	addi	sp,sp,12
    8ff8:	f800283a 	ret

00008ffc <_calloc_r>:
    8ffc:	298b383a 	mul	r5,r5,r6
    9000:	defffe04 	addi	sp,sp,-8
    9004:	dc000015 	stw	r16,0(sp)
    9008:	dfc00115 	stw	ra,4(sp)
    900c:	0006db00 	call	6db0 <_malloc_r>
    9010:	1021883a 	mov	r16,r2
    9014:	01c00904 	movi	r7,36
    9018:	10000d26 	beq	r2,zero,9050 <_calloc_r+0x54>
    901c:	10ffff17 	ldw	r3,-4(r2)
    9020:	1009883a 	mov	r4,r2
    9024:	00bfff04 	movi	r2,-4
    9028:	1886703a 	and	r3,r3,r2
    902c:	1887883a 	add	r3,r3,r2
    9030:	180d883a 	mov	r6,r3
    9034:	000b883a 	mov	r5,zero
    9038:	38c01736 	bltu	r7,r3,9098 <_calloc_r+0x9c>
    903c:	008004c4 	movi	r2,19
    9040:	10c00836 	bltu	r2,r3,9064 <_calloc_r+0x68>
    9044:	20000215 	stw	zero,8(r4)
    9048:	20000015 	stw	zero,0(r4)
    904c:	20000115 	stw	zero,4(r4)
    9050:	8005883a 	mov	r2,r16
    9054:	dfc00117 	ldw	ra,4(sp)
    9058:	dc000017 	ldw	r16,0(sp)
    905c:	dec00204 	addi	sp,sp,8
    9060:	f800283a 	ret
    9064:	008006c4 	movi	r2,27
    9068:	80000015 	stw	zero,0(r16)
    906c:	80000115 	stw	zero,4(r16)
    9070:	81000204 	addi	r4,r16,8
    9074:	10fff32e 	bgeu	r2,r3,9044 <_calloc_r+0x48>
    9078:	80000215 	stw	zero,8(r16)
    907c:	80000315 	stw	zero,12(r16)
    9080:	81000404 	addi	r4,r16,16
    9084:	19ffef1e 	bne	r3,r7,9044 <_calloc_r+0x48>
    9088:	81000604 	addi	r4,r16,24
    908c:	80000415 	stw	zero,16(r16)
    9090:	80000515 	stw	zero,20(r16)
    9094:	003feb06 	br	9044 <_calloc_r+0x48>
    9098:	00020440 	call	2044 <memset>
    909c:	8005883a 	mov	r2,r16
    90a0:	dfc00117 	ldw	ra,4(sp)
    90a4:	dc000017 	ldw	r16,0(sp)
    90a8:	dec00204 	addi	sp,sp,8
    90ac:	f800283a 	ret

000090b0 <_close_r>:
    90b0:	defffd04 	addi	sp,sp,-12
    90b4:	dc000015 	stw	r16,0(sp)
    90b8:	04000074 	movhi	r16,1
    90bc:	8409ce04 	addi	r16,r16,10040
    90c0:	dc400115 	stw	r17,4(sp)
    90c4:	80000015 	stw	zero,0(r16)
    90c8:	2023883a 	mov	r17,r4
    90cc:	2809883a 	mov	r4,r5
    90d0:	dfc00215 	stw	ra,8(sp)
    90d4:	000b6640 	call	b664 <close>
    90d8:	1007883a 	mov	r3,r2
    90dc:	00bfffc4 	movi	r2,-1
    90e0:	18800626 	beq	r3,r2,90fc <_close_r+0x4c>
    90e4:	1805883a 	mov	r2,r3
    90e8:	dfc00217 	ldw	ra,8(sp)
    90ec:	dc400117 	ldw	r17,4(sp)
    90f0:	dc000017 	ldw	r16,0(sp)
    90f4:	dec00304 	addi	sp,sp,12
    90f8:	f800283a 	ret
    90fc:	80800017 	ldw	r2,0(r16)
    9100:	103ff826 	beq	r2,zero,90e4 <_close_r+0x34>
    9104:	88800015 	stw	r2,0(r17)
    9108:	1805883a 	mov	r2,r3
    910c:	dfc00217 	ldw	ra,8(sp)
    9110:	dc400117 	ldw	r17,4(sp)
    9114:	dc000017 	ldw	r16,0(sp)
    9118:	dec00304 	addi	sp,sp,12
    911c:	f800283a 	ret

00009120 <_fclose_r>:
    9120:	defffc04 	addi	sp,sp,-16
    9124:	dc400115 	stw	r17,4(sp)
    9128:	dc000015 	stw	r16,0(sp)
    912c:	dfc00315 	stw	ra,12(sp)
    9130:	dc800215 	stw	r18,8(sp)
    9134:	2821883a 	mov	r16,r5
    9138:	2023883a 	mov	r17,r4
    913c:	28002926 	beq	r5,zero,91e4 <_fclose_r+0xc4>
    9140:	0005e940 	call	5e94 <__sfp_lock_acquire>
    9144:	88000226 	beq	r17,zero,9150 <_fclose_r+0x30>
    9148:	88800e17 	ldw	r2,56(r17)
    914c:	10002d26 	beq	r2,zero,9204 <_fclose_r+0xe4>
    9150:	8080030f 	ldh	r2,12(r16)
    9154:	10002226 	beq	r2,zero,91e0 <_fclose_r+0xc0>
    9158:	8809883a 	mov	r4,r17
    915c:	800b883a 	mov	r5,r16
    9160:	0005c0c0 	call	5c0c <_fflush_r>
    9164:	1025883a 	mov	r18,r2
    9168:	80800b17 	ldw	r2,44(r16)
    916c:	10000426 	beq	r2,zero,9180 <_fclose_r+0x60>
    9170:	81400717 	ldw	r5,28(r16)
    9174:	8809883a 	mov	r4,r17
    9178:	103ee83a 	callr	r2
    917c:	10002a16 	blt	r2,zero,9228 <_fclose_r+0x108>
    9180:	8080030b 	ldhu	r2,12(r16)
    9184:	1080200c 	andi	r2,r2,128
    9188:	1000231e 	bne	r2,zero,9218 <_fclose_r+0xf8>
    918c:	81400c17 	ldw	r5,48(r16)
    9190:	28000526 	beq	r5,zero,91a8 <_fclose_r+0x88>
    9194:	80801004 	addi	r2,r16,64
    9198:	28800226 	beq	r5,r2,91a4 <_fclose_r+0x84>
    919c:	8809883a 	mov	r4,r17
    91a0:	00062280 	call	6228 <_free_r>
    91a4:	80000c15 	stw	zero,48(r16)
    91a8:	81401117 	ldw	r5,68(r16)
    91ac:	28000326 	beq	r5,zero,91bc <_fclose_r+0x9c>
    91b0:	8809883a 	mov	r4,r17
    91b4:	00062280 	call	6228 <_free_r>
    91b8:	80001115 	stw	zero,68(r16)
    91bc:	8000030d 	sth	zero,12(r16)
    91c0:	0005e980 	call	5e98 <__sfp_lock_release>
    91c4:	9005883a 	mov	r2,r18
    91c8:	dfc00317 	ldw	ra,12(sp)
    91cc:	dc800217 	ldw	r18,8(sp)
    91d0:	dc400117 	ldw	r17,4(sp)
    91d4:	dc000017 	ldw	r16,0(sp)
    91d8:	dec00404 	addi	sp,sp,16
    91dc:	f800283a 	ret
    91e0:	0005e980 	call	5e98 <__sfp_lock_release>
    91e4:	0025883a 	mov	r18,zero
    91e8:	9005883a 	mov	r2,r18
    91ec:	dfc00317 	ldw	ra,12(sp)
    91f0:	dc800217 	ldw	r18,8(sp)
    91f4:	dc400117 	ldw	r17,4(sp)
    91f8:	dc000017 	ldw	r16,0(sp)
    91fc:	dec00404 	addi	sp,sp,16
    9200:	f800283a 	ret
    9204:	8809883a 	mov	r4,r17
    9208:	0005ea40 	call	5ea4 <__sinit>
    920c:	8080030f 	ldh	r2,12(r16)
    9210:	103fd11e 	bne	r2,zero,9158 <_fclose_r+0x38>
    9214:	003ff206 	br	91e0 <_fclose_r+0xc0>
    9218:	81400417 	ldw	r5,16(r16)
    921c:	8809883a 	mov	r4,r17
    9220:	00062280 	call	6228 <_free_r>
    9224:	003fd906 	br	918c <_fclose_r+0x6c>
    9228:	04bfffc4 	movi	r18,-1
    922c:	003fd406 	br	9180 <_fclose_r+0x60>

00009230 <fclose>:
    9230:	00800074 	movhi	r2,1
    9234:	10827c04 	addi	r2,r2,2544
    9238:	200b883a 	mov	r5,r4
    923c:	11000017 	ldw	r4,0(r2)
    9240:	00091201 	jmpi	9120 <_fclose_r>

00009244 <_fstat_r>:
    9244:	defffd04 	addi	sp,sp,-12
    9248:	dc000015 	stw	r16,0(sp)
    924c:	04000074 	movhi	r16,1
    9250:	8409ce04 	addi	r16,r16,10040
    9254:	dc400115 	stw	r17,4(sp)
    9258:	80000015 	stw	zero,0(r16)
    925c:	2023883a 	mov	r17,r4
    9260:	2809883a 	mov	r4,r5
    9264:	300b883a 	mov	r5,r6
    9268:	dfc00215 	stw	ra,8(sp)
    926c:	000b7480 	call	b748 <fstat>
    9270:	1007883a 	mov	r3,r2
    9274:	00bfffc4 	movi	r2,-1
    9278:	18800626 	beq	r3,r2,9294 <_fstat_r+0x50>
    927c:	1805883a 	mov	r2,r3
    9280:	dfc00217 	ldw	ra,8(sp)
    9284:	dc400117 	ldw	r17,4(sp)
    9288:	dc000017 	ldw	r16,0(sp)
    928c:	dec00304 	addi	sp,sp,12
    9290:	f800283a 	ret
    9294:	80800017 	ldw	r2,0(r16)
    9298:	103ff826 	beq	r2,zero,927c <_fstat_r+0x38>
    929c:	88800015 	stw	r2,0(r17)
    92a0:	1805883a 	mov	r2,r3
    92a4:	dfc00217 	ldw	ra,8(sp)
    92a8:	dc400117 	ldw	r17,4(sp)
    92ac:	dc000017 	ldw	r16,0(sp)
    92b0:	dec00304 	addi	sp,sp,12
    92b4:	f800283a 	ret

000092b8 <_isatty_r>:
    92b8:	defffd04 	addi	sp,sp,-12
    92bc:	dc000015 	stw	r16,0(sp)
    92c0:	04000074 	movhi	r16,1
    92c4:	8409ce04 	addi	r16,r16,10040
    92c8:	dc400115 	stw	r17,4(sp)
    92cc:	80000015 	stw	zero,0(r16)
    92d0:	2023883a 	mov	r17,r4
    92d4:	2809883a 	mov	r4,r5
    92d8:	dfc00215 	stw	ra,8(sp)
    92dc:	000b7c80 	call	b7c8 <isatty>
    92e0:	1007883a 	mov	r3,r2
    92e4:	00bfffc4 	movi	r2,-1
    92e8:	18800626 	beq	r3,r2,9304 <_isatty_r+0x4c>
    92ec:	1805883a 	mov	r2,r3
    92f0:	dfc00217 	ldw	ra,8(sp)
    92f4:	dc400117 	ldw	r17,4(sp)
    92f8:	dc000017 	ldw	r16,0(sp)
    92fc:	dec00304 	addi	sp,sp,12
    9300:	f800283a 	ret
    9304:	80800017 	ldw	r2,0(r16)
    9308:	103ff826 	beq	r2,zero,92ec <_isatty_r+0x34>
    930c:	88800015 	stw	r2,0(r17)
    9310:	1805883a 	mov	r2,r3
    9314:	dfc00217 	ldw	ra,8(sp)
    9318:	dc400117 	ldw	r17,4(sp)
    931c:	dc000017 	ldw	r16,0(sp)
    9320:	dec00304 	addi	sp,sp,12
    9324:	f800283a 	ret

00009328 <_lseek_r>:
    9328:	defffd04 	addi	sp,sp,-12
    932c:	dc000015 	stw	r16,0(sp)
    9330:	04000074 	movhi	r16,1
    9334:	8409ce04 	addi	r16,r16,10040
    9338:	dc400115 	stw	r17,4(sp)
    933c:	80000015 	stw	zero,0(r16)
    9340:	2023883a 	mov	r17,r4
    9344:	2809883a 	mov	r4,r5
    9348:	300b883a 	mov	r5,r6
    934c:	380d883a 	mov	r6,r7
    9350:	dfc00215 	stw	ra,8(sp)
    9354:	000b9100 	call	b910 <lseek>
    9358:	1007883a 	mov	r3,r2
    935c:	00bfffc4 	movi	r2,-1
    9360:	18800626 	beq	r3,r2,937c <_lseek_r+0x54>
    9364:	1805883a 	mov	r2,r3
    9368:	dfc00217 	ldw	ra,8(sp)
    936c:	dc400117 	ldw	r17,4(sp)
    9370:	dc000017 	ldw	r16,0(sp)
    9374:	dec00304 	addi	sp,sp,12
    9378:	f800283a 	ret
    937c:	80800017 	ldw	r2,0(r16)
    9380:	103ff826 	beq	r2,zero,9364 <_lseek_r+0x3c>
    9384:	88800015 	stw	r2,0(r17)
    9388:	1805883a 	mov	r2,r3
    938c:	dfc00217 	ldw	ra,8(sp)
    9390:	dc400117 	ldw	r17,4(sp)
    9394:	dc000017 	ldw	r16,0(sp)
    9398:	dec00304 	addi	sp,sp,12
    939c:	f800283a 	ret

000093a0 <_read_r>:
    93a0:	defffd04 	addi	sp,sp,-12
    93a4:	dc000015 	stw	r16,0(sp)
    93a8:	04000074 	movhi	r16,1
    93ac:	8409ce04 	addi	r16,r16,10040
    93b0:	dc400115 	stw	r17,4(sp)
    93b4:	80000015 	stw	zero,0(r16)
    93b8:	2023883a 	mov	r17,r4
    93bc:	2809883a 	mov	r4,r5
    93c0:	300b883a 	mov	r5,r6
    93c4:	380d883a 	mov	r6,r7
    93c8:	dfc00215 	stw	ra,8(sp)
    93cc:	000bc040 	call	bc04 <read>
    93d0:	1007883a 	mov	r3,r2
    93d4:	00bfffc4 	movi	r2,-1
    93d8:	18800626 	beq	r3,r2,93f4 <_read_r+0x54>
    93dc:	1805883a 	mov	r2,r3
    93e0:	dfc00217 	ldw	ra,8(sp)
    93e4:	dc400117 	ldw	r17,4(sp)
    93e8:	dc000017 	ldw	r16,0(sp)
    93ec:	dec00304 	addi	sp,sp,12
    93f0:	f800283a 	ret
    93f4:	80800017 	ldw	r2,0(r16)
    93f8:	103ff826 	beq	r2,zero,93dc <_read_r+0x3c>
    93fc:	88800015 	stw	r2,0(r17)
    9400:	1805883a 	mov	r2,r3
    9404:	dfc00217 	ldw	ra,8(sp)
    9408:	dc400117 	ldw	r17,4(sp)
    940c:	dc000017 	ldw	r16,0(sp)
    9410:	dec00304 	addi	sp,sp,12
    9414:	f800283a 	ret

00009418 <__udivdi3>:
    9418:	defff004 	addi	sp,sp,-64
    941c:	2005883a 	mov	r2,r4
    9420:	3011883a 	mov	r8,r6
    9424:	df000e15 	stw	fp,56(sp)
    9428:	dd000a15 	stw	r20,40(sp)
    942c:	dc000615 	stw	r16,24(sp)
    9430:	dfc00f15 	stw	ra,60(sp)
    9434:	ddc00d15 	stw	r23,52(sp)
    9438:	dd800c15 	stw	r22,48(sp)
    943c:	dd400b15 	stw	r21,44(sp)
    9440:	dcc00915 	stw	r19,36(sp)
    9444:	dc800815 	stw	r18,32(sp)
    9448:	dc400715 	stw	r17,28(sp)
    944c:	4021883a 	mov	r16,r8
    9450:	1039883a 	mov	fp,r2
    9454:	2829883a 	mov	r20,r5
    9458:	38003b1e 	bne	r7,zero,9548 <__udivdi3+0x130>
    945c:	2a005c36 	bltu	r5,r8,95d0 <__udivdi3+0x1b8>
    9460:	4000a626 	beq	r8,zero,96fc <__udivdi3+0x2e4>
    9464:	00bfffd4 	movui	r2,65535
    9468:	14009e36 	bltu	r2,r16,96e4 <__udivdi3+0x2cc>
    946c:	00803fc4 	movi	r2,255
    9470:	14013d36 	bltu	r2,r16,9968 <__udivdi3+0x550>
    9474:	000b883a 	mov	r5,zero
    9478:	0005883a 	mov	r2,zero
    947c:	8084d83a 	srl	r2,r16,r2
    9480:	01000074 	movhi	r4,1
    9484:	213a5604 	addi	r4,r4,-5800
    9488:	01800804 	movi	r6,32
    948c:	1105883a 	add	r2,r2,r4
    9490:	10c00003 	ldbu	r3,0(r2)
    9494:	28c7883a 	add	r3,r5,r3
    9498:	30edc83a 	sub	r22,r6,r3
    949c:	b000ee1e 	bne	r22,zero,9858 <__udivdi3+0x440>
    94a0:	802ad43a 	srli	r21,r16,16
    94a4:	00800044 	movi	r2,1
    94a8:	a423c83a 	sub	r17,r20,r16
    94ac:	85ffffcc 	andi	r23,r16,65535
    94b0:	d8800315 	stw	r2,12(sp)
    94b4:	8809883a 	mov	r4,r17
    94b8:	a80b883a 	mov	r5,r21
    94bc:	0001f940 	call	1f94 <__udivsi3>
    94c0:	8809883a 	mov	r4,r17
    94c4:	a80b883a 	mov	r5,r21
    94c8:	102d883a 	mov	r22,r2
    94cc:	0001f9c0 	call	1f9c <__umodsi3>
    94d0:	1004943a 	slli	r2,r2,16
    94d4:	e006d43a 	srli	r3,fp,16
    94d8:	bda3383a 	mul	r17,r23,r22
    94dc:	10c4b03a 	or	r2,r2,r3
    94e0:	1440042e 	bgeu	r2,r17,94f4 <__udivdi3+0xdc>
    94e4:	1405883a 	add	r2,r2,r16
    94e8:	b5bfffc4 	addi	r22,r22,-1
    94ec:	14000136 	bltu	r2,r16,94f4 <__udivdi3+0xdc>
    94f0:	14413d36 	bltu	r2,r17,99e8 <__udivdi3+0x5d0>
    94f4:	1463c83a 	sub	r17,r2,r17
    94f8:	8809883a 	mov	r4,r17
    94fc:	a80b883a 	mov	r5,r21
    9500:	0001f940 	call	1f94 <__udivsi3>
    9504:	8809883a 	mov	r4,r17
    9508:	a80b883a 	mov	r5,r21
    950c:	1029883a 	mov	r20,r2
    9510:	0001f9c0 	call	1f9c <__umodsi3>
    9514:	1004943a 	slli	r2,r2,16
    9518:	bd09383a 	mul	r4,r23,r20
    951c:	e0ffffcc 	andi	r3,fp,65535
    9520:	10c4b03a 	or	r2,r2,r3
    9524:	1100042e 	bgeu	r2,r4,9538 <__udivdi3+0x120>
    9528:	8085883a 	add	r2,r16,r2
    952c:	a53fffc4 	addi	r20,r20,-1
    9530:	14000136 	bltu	r2,r16,9538 <__udivdi3+0x120>
    9534:	11012036 	bltu	r2,r4,99b8 <__udivdi3+0x5a0>
    9538:	b004943a 	slli	r2,r22,16
    953c:	d9000317 	ldw	r4,12(sp)
    9540:	a084b03a 	or	r2,r20,r2
    9544:	00001506 	br	959c <__udivdi3+0x184>
    9548:	380d883a 	mov	r6,r7
    954c:	29c06236 	bltu	r5,r7,96d8 <__udivdi3+0x2c0>
    9550:	00bfffd4 	movui	r2,65535
    9554:	11c05a36 	bltu	r2,r7,96c0 <__udivdi3+0x2a8>
    9558:	00803fc4 	movi	r2,255
    955c:	11c0fc36 	bltu	r2,r7,9950 <__udivdi3+0x538>
    9560:	000b883a 	mov	r5,zero
    9564:	0005883a 	mov	r2,zero
    9568:	3084d83a 	srl	r2,r6,r2
    956c:	01000074 	movhi	r4,1
    9570:	213a5604 	addi	r4,r4,-5800
    9574:	01c00804 	movi	r7,32
    9578:	1105883a 	add	r2,r2,r4
    957c:	10c00003 	ldbu	r3,0(r2)
    9580:	28c7883a 	add	r3,r5,r3
    9584:	38efc83a 	sub	r23,r7,r3
    9588:	b800691e 	bne	r23,zero,9730 <__udivdi3+0x318>
    958c:	35000136 	bltu	r6,r20,9594 <__udivdi3+0x17c>
    9590:	e4005136 	bltu	fp,r16,96d8 <__udivdi3+0x2c0>
    9594:	00800044 	movi	r2,1
    9598:	0009883a 	mov	r4,zero
    959c:	2007883a 	mov	r3,r4
    95a0:	dfc00f17 	ldw	ra,60(sp)
    95a4:	df000e17 	ldw	fp,56(sp)
    95a8:	ddc00d17 	ldw	r23,52(sp)
    95ac:	dd800c17 	ldw	r22,48(sp)
    95b0:	dd400b17 	ldw	r21,44(sp)
    95b4:	dd000a17 	ldw	r20,40(sp)
    95b8:	dcc00917 	ldw	r19,36(sp)
    95bc:	dc800817 	ldw	r18,32(sp)
    95c0:	dc400717 	ldw	r17,28(sp)
    95c4:	dc000617 	ldw	r16,24(sp)
    95c8:	dec01004 	addi	sp,sp,64
    95cc:	f800283a 	ret
    95d0:	00bfffd4 	movui	r2,65535
    95d4:	12005036 	bltu	r2,r8,9718 <__udivdi3+0x300>
    95d8:	00803fc4 	movi	r2,255
    95dc:	1200e836 	bltu	r2,r8,9980 <__udivdi3+0x568>
    95e0:	000b883a 	mov	r5,zero
    95e4:	0005883a 	mov	r2,zero
    95e8:	8084d83a 	srl	r2,r16,r2
    95ec:	01000074 	movhi	r4,1
    95f0:	213a5604 	addi	r4,r4,-5800
    95f4:	01800804 	movi	r6,32
    95f8:	1105883a 	add	r2,r2,r4
    95fc:	10c00003 	ldbu	r3,0(r2)
    9600:	28c7883a 	add	r3,r5,r3
    9604:	30cbc83a 	sub	r5,r6,r3
    9608:	28000626 	beq	r5,zero,9624 <__udivdi3+0x20c>
    960c:	3145c83a 	sub	r2,r6,r5
    9610:	e084d83a 	srl	r2,fp,r2
    9614:	a146983a 	sll	r3,r20,r5
    9618:	e178983a 	sll	fp,fp,r5
    961c:	8160983a 	sll	r16,r16,r5
    9620:	18a8b03a 	or	r20,r3,r2
    9624:	802ad43a 	srli	r21,r16,16
    9628:	a009883a 	mov	r4,r20
    962c:	85ffffcc 	andi	r23,r16,65535
    9630:	a80b883a 	mov	r5,r21
    9634:	0001f940 	call	1f94 <__udivsi3>
    9638:	a009883a 	mov	r4,r20
    963c:	a80b883a 	mov	r5,r21
    9640:	102d883a 	mov	r22,r2
    9644:	0001f9c0 	call	1f9c <__umodsi3>
    9648:	1004943a 	slli	r2,r2,16
    964c:	e006d43a 	srli	r3,fp,16
    9650:	bda3383a 	mul	r17,r23,r22
    9654:	10c4b03a 	or	r2,r2,r3
    9658:	1440042e 	bgeu	r2,r17,966c <__udivdi3+0x254>
    965c:	1405883a 	add	r2,r2,r16
    9660:	b5bfffc4 	addi	r22,r22,-1
    9664:	14000136 	bltu	r2,r16,966c <__udivdi3+0x254>
    9668:	1440d536 	bltu	r2,r17,99c0 <__udivdi3+0x5a8>
    966c:	1463c83a 	sub	r17,r2,r17
    9670:	8809883a 	mov	r4,r17
    9674:	a80b883a 	mov	r5,r21
    9678:	0001f940 	call	1f94 <__udivsi3>
    967c:	8809883a 	mov	r4,r17
    9680:	a80b883a 	mov	r5,r21
    9684:	1029883a 	mov	r20,r2
    9688:	0001f9c0 	call	1f9c <__umodsi3>
    968c:	1004943a 	slli	r2,r2,16
    9690:	bd09383a 	mul	r4,r23,r20
    9694:	e0ffffcc 	andi	r3,fp,65535
    9698:	10c4b03a 	or	r2,r2,r3
    969c:	1100042e 	bgeu	r2,r4,96b0 <__udivdi3+0x298>
    96a0:	8085883a 	add	r2,r16,r2
    96a4:	a53fffc4 	addi	r20,r20,-1
    96a8:	14000136 	bltu	r2,r16,96b0 <__udivdi3+0x298>
    96ac:	1100c736 	bltu	r2,r4,99cc <__udivdi3+0x5b4>
    96b0:	b004943a 	slli	r2,r22,16
    96b4:	0009883a 	mov	r4,zero
    96b8:	a084b03a 	or	r2,r20,r2
    96bc:	003fb706 	br	959c <__udivdi3+0x184>
    96c0:	00804034 	movhi	r2,256
    96c4:	10bfffc4 	addi	r2,r2,-1
    96c8:	11c0a436 	bltu	r2,r7,995c <__udivdi3+0x544>
    96cc:	01400404 	movi	r5,16
    96d0:	2805883a 	mov	r2,r5
    96d4:	003fa406 	br	9568 <__udivdi3+0x150>
    96d8:	0005883a 	mov	r2,zero
    96dc:	0009883a 	mov	r4,zero
    96e0:	003fae06 	br	959c <__udivdi3+0x184>
    96e4:	00804034 	movhi	r2,256
    96e8:	10bfffc4 	addi	r2,r2,-1
    96ec:	1400a136 	bltu	r2,r16,9974 <__udivdi3+0x55c>
    96f0:	01400404 	movi	r5,16
    96f4:	2805883a 	mov	r2,r5
    96f8:	003f6006 	br	947c <__udivdi3+0x64>
    96fc:	01000044 	movi	r4,1
    9700:	000b883a 	mov	r5,zero
    9704:	0001f940 	call	1f94 <__udivsi3>
    9708:	1021883a 	mov	r16,r2
    970c:	00bfffd4 	movui	r2,65535
    9710:	143ff436 	bltu	r2,r16,96e4 <__udivdi3+0x2cc>
    9714:	003f5506 	br	946c <__udivdi3+0x54>
    9718:	00804034 	movhi	r2,256
    971c:	10bfffc4 	addi	r2,r2,-1
    9720:	12009a36 	bltu	r2,r8,998c <__udivdi3+0x574>
    9724:	01400404 	movi	r5,16
    9728:	2805883a 	mov	r2,r5
    972c:	003fae06 	br	95e8 <__udivdi3+0x1d0>
    9730:	3dc5c83a 	sub	r2,r7,r23
    9734:	35c8983a 	sll	r4,r6,r23
    9738:	8086d83a 	srl	r3,r16,r2
    973c:	a0a2d83a 	srl	r17,r20,r2
    9740:	e084d83a 	srl	r2,fp,r2
    9744:	20eab03a 	or	r21,r4,r3
    9748:	a82cd43a 	srli	r22,r21,16
    974c:	a5c6983a 	sll	r3,r20,r23
    9750:	8809883a 	mov	r4,r17
    9754:	b00b883a 	mov	r5,r22
    9758:	1886b03a 	or	r3,r3,r2
    975c:	d8c00215 	stw	r3,8(sp)
    9760:	0001f940 	call	1f94 <__udivsi3>
    9764:	8809883a 	mov	r4,r17
    9768:	b00b883a 	mov	r5,r22
    976c:	1029883a 	mov	r20,r2
    9770:	0001f9c0 	call	1f9c <__umodsi3>
    9774:	a8ffffcc 	andi	r3,r21,65535
    9778:	d8c00515 	stw	r3,20(sp)
    977c:	d9000217 	ldw	r4,8(sp)
    9780:	d9400517 	ldw	r5,20(sp)
    9784:	1004943a 	slli	r2,r2,16
    9788:	2006d43a 	srli	r3,r4,16
    978c:	85e0983a 	sll	r16,r16,r23
    9790:	2d23383a 	mul	r17,r5,r20
    9794:	10c4b03a 	or	r2,r2,r3
    9798:	dc000015 	stw	r16,0(sp)
    979c:	1440032e 	bgeu	r2,r17,97ac <__udivdi3+0x394>
    97a0:	1545883a 	add	r2,r2,r21
    97a4:	a53fffc4 	addi	r20,r20,-1
    97a8:	15407f2e 	bgeu	r2,r21,99a8 <__udivdi3+0x590>
    97ac:	1463c83a 	sub	r17,r2,r17
    97b0:	8809883a 	mov	r4,r17
    97b4:	b00b883a 	mov	r5,r22
    97b8:	0001f940 	call	1f94 <__udivsi3>
    97bc:	8809883a 	mov	r4,r17
    97c0:	b00b883a 	mov	r5,r22
    97c4:	1021883a 	mov	r16,r2
    97c8:	0001f9c0 	call	1f9c <__umodsi3>
    97cc:	d8c00517 	ldw	r3,20(sp)
    97d0:	d9000217 	ldw	r4,8(sp)
    97d4:	1004943a 	slli	r2,r2,16
    97d8:	1c0f383a 	mul	r7,r3,r16
    97dc:	20ffffcc 	andi	r3,r4,65535
    97e0:	10e2b03a 	or	r17,r2,r3
    97e4:	89c0032e 	bgeu	r17,r7,97f4 <__udivdi3+0x3dc>
    97e8:	8d63883a 	add	r17,r17,r21
    97ec:	843fffc4 	addi	r16,r16,-1
    97f0:	8d40692e 	bgeu	r17,r21,9998 <__udivdi3+0x580>
    97f4:	a008943a 	slli	r4,r20,16
    97f8:	d9400017 	ldw	r5,0(sp)
    97fc:	89e3c83a 	sub	r17,r17,r7
    9800:	8110b03a 	or	r8,r16,r4
    9804:	280cd43a 	srli	r6,r5,16
    9808:	28ffffcc 	andi	r3,r5,65535
    980c:	40bfffcc 	andi	r2,r8,65535
    9810:	400ad43a 	srli	r5,r8,16
    9814:	10d3383a 	mul	r9,r2,r3
    9818:	1185383a 	mul	r2,r2,r6
    981c:	28c7383a 	mul	r3,r5,r3
    9820:	4808d43a 	srli	r4,r9,16
    9824:	298b383a 	mul	r5,r5,r6
    9828:	10c5883a 	add	r2,r2,r3
    982c:	2089883a 	add	r4,r4,r2
    9830:	20c0022e 	bgeu	r4,r3,983c <__udivdi3+0x424>
    9834:	00800074 	movhi	r2,1
    9838:	288b883a 	add	r5,r5,r2
    983c:	2004d43a 	srli	r2,r4,16
    9840:	288b883a 	add	r5,r5,r2
    9844:	89403f36 	bltu	r17,r5,9944 <__udivdi3+0x52c>
    9848:	89403926 	beq	r17,r5,9930 <__udivdi3+0x518>
    984c:	4005883a 	mov	r2,r8
    9850:	0009883a 	mov	r4,zero
    9854:	003f5106 	br	959c <__udivdi3+0x184>
    9858:	85a0983a 	sll	r16,r16,r22
    985c:	3585c83a 	sub	r2,r6,r22
    9860:	a0a2d83a 	srl	r17,r20,r2
    9864:	802ad43a 	srli	r21,r16,16
    9868:	e084d83a 	srl	r2,fp,r2
    986c:	a586983a 	sll	r3,r20,r22
    9870:	8809883a 	mov	r4,r17
    9874:	a80b883a 	mov	r5,r21
    9878:	1886b03a 	or	r3,r3,r2
    987c:	d8c00115 	stw	r3,4(sp)
    9880:	0001f940 	call	1f94 <__udivsi3>
    9884:	8809883a 	mov	r4,r17
    9888:	a80b883a 	mov	r5,r21
    988c:	d8800415 	stw	r2,16(sp)
    9890:	0001f9c0 	call	1f9c <__umodsi3>
    9894:	d9000117 	ldw	r4,4(sp)
    9898:	d9400417 	ldw	r5,16(sp)
    989c:	1004943a 	slli	r2,r2,16
    98a0:	85ffffcc 	andi	r23,r16,65535
    98a4:	2006d43a 	srli	r3,r4,16
    98a8:	b963383a 	mul	r17,r23,r5
    98ac:	10c4b03a 	or	r2,r2,r3
    98b0:	1440042e 	bgeu	r2,r17,98c4 <__udivdi3+0x4ac>
    98b4:	297fffc4 	addi	r5,r5,-1
    98b8:	1405883a 	add	r2,r2,r16
    98bc:	d9400415 	stw	r5,16(sp)
    98c0:	1400442e 	bgeu	r2,r16,99d4 <__udivdi3+0x5bc>
    98c4:	1463c83a 	sub	r17,r2,r17
    98c8:	8809883a 	mov	r4,r17
    98cc:	a80b883a 	mov	r5,r21
    98d0:	0001f940 	call	1f94 <__udivsi3>
    98d4:	8809883a 	mov	r4,r17
    98d8:	a80b883a 	mov	r5,r21
    98dc:	1029883a 	mov	r20,r2
    98e0:	0001f9c0 	call	1f9c <__umodsi3>
    98e4:	d9400117 	ldw	r5,4(sp)
    98e8:	1004943a 	slli	r2,r2,16
    98ec:	bd09383a 	mul	r4,r23,r20
    98f0:	28ffffcc 	andi	r3,r5,65535
    98f4:	10c6b03a 	or	r3,r2,r3
    98f8:	1900062e 	bgeu	r3,r4,9914 <__udivdi3+0x4fc>
    98fc:	1c07883a 	add	r3,r3,r16
    9900:	a53fffc4 	addi	r20,r20,-1
    9904:	1c000336 	bltu	r3,r16,9914 <__udivdi3+0x4fc>
    9908:	1900022e 	bgeu	r3,r4,9914 <__udivdi3+0x4fc>
    990c:	a53fffc4 	addi	r20,r20,-1
    9910:	1c07883a 	add	r3,r3,r16
    9914:	d9400417 	ldw	r5,16(sp)
    9918:	e5b8983a 	sll	fp,fp,r22
    991c:	1923c83a 	sub	r17,r3,r4
    9920:	2804943a 	slli	r2,r5,16
    9924:	a0a8b03a 	or	r20,r20,r2
    9928:	dd000315 	stw	r20,12(sp)
    992c:	003ee106 	br	94b4 <__udivdi3+0x9c>
    9930:	2004943a 	slli	r2,r4,16
    9934:	e5c8983a 	sll	r4,fp,r23
    9938:	48ffffcc 	andi	r3,r9,65535
    993c:	10c5883a 	add	r2,r2,r3
    9940:	20bfc22e 	bgeu	r4,r2,984c <__udivdi3+0x434>
    9944:	40bfffc4 	addi	r2,r8,-1
    9948:	0009883a 	mov	r4,zero
    994c:	003f1306 	br	959c <__udivdi3+0x184>
    9950:	01400204 	movi	r5,8
    9954:	2805883a 	mov	r2,r5
    9958:	003f0306 	br	9568 <__udivdi3+0x150>
    995c:	01400604 	movi	r5,24
    9960:	2805883a 	mov	r2,r5
    9964:	003f0006 	br	9568 <__udivdi3+0x150>
    9968:	01400204 	movi	r5,8
    996c:	2805883a 	mov	r2,r5
    9970:	003ec206 	br	947c <__udivdi3+0x64>
    9974:	01400604 	movi	r5,24
    9978:	2805883a 	mov	r2,r5
    997c:	003ebf06 	br	947c <__udivdi3+0x64>
    9980:	01400204 	movi	r5,8
    9984:	2805883a 	mov	r2,r5
    9988:	003f1706 	br	95e8 <__udivdi3+0x1d0>
    998c:	01400604 	movi	r5,24
    9990:	2805883a 	mov	r2,r5
    9994:	003f1406 	br	95e8 <__udivdi3+0x1d0>
    9998:	89ff962e 	bgeu	r17,r7,97f4 <__udivdi3+0x3dc>
    999c:	8d63883a 	add	r17,r17,r21
    99a0:	843fffc4 	addi	r16,r16,-1
    99a4:	003f9306 	br	97f4 <__udivdi3+0x3dc>
    99a8:	147f802e 	bgeu	r2,r17,97ac <__udivdi3+0x394>
    99ac:	a53fffc4 	addi	r20,r20,-1
    99b0:	1545883a 	add	r2,r2,r21
    99b4:	003f7d06 	br	97ac <__udivdi3+0x394>
    99b8:	a53fffc4 	addi	r20,r20,-1
    99bc:	003ede06 	br	9538 <__udivdi3+0x120>
    99c0:	b5bfffc4 	addi	r22,r22,-1
    99c4:	1405883a 	add	r2,r2,r16
    99c8:	003f2806 	br	966c <__udivdi3+0x254>
    99cc:	a53fffc4 	addi	r20,r20,-1
    99d0:	003f3706 	br	96b0 <__udivdi3+0x298>
    99d4:	147fbb2e 	bgeu	r2,r17,98c4 <__udivdi3+0x4ac>
    99d8:	297fffc4 	addi	r5,r5,-1
    99dc:	1405883a 	add	r2,r2,r16
    99e0:	d9400415 	stw	r5,16(sp)
    99e4:	003fb706 	br	98c4 <__udivdi3+0x4ac>
    99e8:	b5bfffc4 	addi	r22,r22,-1
    99ec:	1405883a 	add	r2,r2,r16
    99f0:	003ec006 	br	94f4 <__udivdi3+0xdc>

000099f4 <__umoddi3>:
    99f4:	defff104 	addi	sp,sp,-60
    99f8:	dd800b15 	stw	r22,44(sp)
    99fc:	dd000915 	stw	r20,36(sp)
    9a00:	dc000515 	stw	r16,20(sp)
    9a04:	dfc00e15 	stw	ra,56(sp)
    9a08:	df000d15 	stw	fp,52(sp)
    9a0c:	ddc00c15 	stw	r23,48(sp)
    9a10:	dd400a15 	stw	r21,40(sp)
    9a14:	dcc00815 	stw	r19,32(sp)
    9a18:	dc800715 	stw	r18,28(sp)
    9a1c:	dc400615 	stw	r17,24(sp)
    9a20:	3021883a 	mov	r16,r6
    9a24:	202d883a 	mov	r22,r4
    9a28:	2829883a 	mov	r20,r5
    9a2c:	38002b1e 	bne	r7,zero,9adc <__umoddi3+0xe8>
    9a30:	29805036 	bltu	r5,r6,9b74 <__umoddi3+0x180>
    9a34:	30008a26 	beq	r6,zero,9c60 <__umoddi3+0x26c>
    9a38:	00bfffd4 	movui	r2,65535
    9a3c:	14008236 	bltu	r2,r16,9c48 <__umoddi3+0x254>
    9a40:	00803fc4 	movi	r2,255
    9a44:	14013636 	bltu	r2,r16,9f20 <__umoddi3+0x52c>
    9a48:	000b883a 	mov	r5,zero
    9a4c:	0005883a 	mov	r2,zero
    9a50:	8084d83a 	srl	r2,r16,r2
    9a54:	01000074 	movhi	r4,1
    9a58:	213a5604 	addi	r4,r4,-5800
    9a5c:	01800804 	movi	r6,32
    9a60:	1105883a 	add	r2,r2,r4
    9a64:	10c00003 	ldbu	r3,0(r2)
    9a68:	28c7883a 	add	r3,r5,r3
    9a6c:	30efc83a 	sub	r23,r6,r3
    9a70:	b800941e 	bne	r23,zero,9cc4 <__umoddi3+0x2d0>
    9a74:	802ad43a 	srli	r21,r16,16
    9a78:	a423c83a 	sub	r17,r20,r16
    9a7c:	0039883a 	mov	fp,zero
    9a80:	853fffcc 	andi	r20,r16,65535
    9a84:	8809883a 	mov	r4,r17
    9a88:	a80b883a 	mov	r5,r21
    9a8c:	0001f940 	call	1f94 <__udivsi3>
    9a90:	8809883a 	mov	r4,r17
    9a94:	a80b883a 	mov	r5,r21
    9a98:	a0a3383a 	mul	r17,r20,r2
    9a9c:	0001f9c0 	call	1f9c <__umodsi3>
    9aa0:	1004943a 	slli	r2,r2,16
    9aa4:	b006d43a 	srli	r3,r22,16
    9aa8:	10c4b03a 	or	r2,r2,r3
    9aac:	1440032e 	bgeu	r2,r17,9abc <__umoddi3+0xc8>
    9ab0:	1405883a 	add	r2,r2,r16
    9ab4:	14000136 	bltu	r2,r16,9abc <__umoddi3+0xc8>
    9ab8:	14413536 	bltu	r2,r17,9f90 <__umoddi3+0x59c>
    9abc:	1463c83a 	sub	r17,r2,r17
    9ac0:	8809883a 	mov	r4,r17
    9ac4:	a80b883a 	mov	r5,r21
    9ac8:	0001f940 	call	1f94 <__udivsi3>
    9acc:	8809883a 	mov	r4,r17
    9ad0:	a0a3383a 	mul	r17,r20,r2
    9ad4:	a80b883a 	mov	r5,r21
    9ad8:	00004d06 	br	9c10 <__umoddi3+0x21c>
    9adc:	380d883a 	mov	r6,r7
    9ae0:	29c0102e 	bgeu	r5,r7,9b24 <__umoddi3+0x130>
    9ae4:	2011883a 	mov	r8,r4
    9ae8:	2813883a 	mov	r9,r5
    9aec:	4005883a 	mov	r2,r8
    9af0:	4807883a 	mov	r3,r9
    9af4:	dfc00e17 	ldw	ra,56(sp)
    9af8:	df000d17 	ldw	fp,52(sp)
    9afc:	ddc00c17 	ldw	r23,48(sp)
    9b00:	dd800b17 	ldw	r22,44(sp)
    9b04:	dd400a17 	ldw	r21,40(sp)
    9b08:	dd000917 	ldw	r20,36(sp)
    9b0c:	dcc00817 	ldw	r19,32(sp)
    9b10:	dc800717 	ldw	r18,28(sp)
    9b14:	dc400617 	ldw	r17,24(sp)
    9b18:	dc000517 	ldw	r16,20(sp)
    9b1c:	dec00f04 	addi	sp,sp,60
    9b20:	f800283a 	ret
    9b24:	00bfffd4 	movui	r2,65535
    9b28:	11c05a36 	bltu	r2,r7,9c94 <__umoddi3+0x2a0>
    9b2c:	00803fc4 	movi	r2,255
    9b30:	11c0fe36 	bltu	r2,r7,9f2c <__umoddi3+0x538>
    9b34:	000b883a 	mov	r5,zero
    9b38:	0005883a 	mov	r2,zero
    9b3c:	3084d83a 	srl	r2,r6,r2
    9b40:	01000074 	movhi	r4,1
    9b44:	213a5604 	addi	r4,r4,-5800
    9b48:	01c00804 	movi	r7,32
    9b4c:	1105883a 	add	r2,r2,r4
    9b50:	10c00003 	ldbu	r3,0(r2)
    9b54:	28c7883a 	add	r3,r5,r3
    9b58:	38ebc83a 	sub	r21,r7,r3
    9b5c:	a800851e 	bne	r21,zero,9d74 <__umoddi3+0x380>
    9b60:	35005236 	bltu	r6,r20,9cac <__umoddi3+0x2b8>
    9b64:	b400512e 	bgeu	r22,r16,9cac <__umoddi3+0x2b8>
    9b68:	b011883a 	mov	r8,r22
    9b6c:	a013883a 	mov	r9,r20
    9b70:	003fde06 	br	9aec <__umoddi3+0xf8>
    9b74:	00bfffd4 	movui	r2,65535
    9b78:	11804036 	bltu	r2,r6,9c7c <__umoddi3+0x288>
    9b7c:	00803fc4 	movi	r2,255
    9b80:	1180ed36 	bltu	r2,r6,9f38 <__umoddi3+0x544>
    9b84:	000b883a 	mov	r5,zero
    9b88:	0005883a 	mov	r2,zero
    9b8c:	8084d83a 	srl	r2,r16,r2
    9b90:	01000074 	movhi	r4,1
    9b94:	213a5604 	addi	r4,r4,-5800
    9b98:	01800804 	movi	r6,32
    9b9c:	1105883a 	add	r2,r2,r4
    9ba0:	10c00003 	ldbu	r3,0(r2)
    9ba4:	28c7883a 	add	r3,r5,r3
    9ba8:	30c7c83a 	sub	r3,r6,r3
    9bac:	1800bf1e 	bne	r3,zero,9eac <__umoddi3+0x4b8>
    9bb0:	0039883a 	mov	fp,zero
    9bb4:	802ad43a 	srli	r21,r16,16
    9bb8:	a009883a 	mov	r4,r20
    9bbc:	85ffffcc 	andi	r23,r16,65535
    9bc0:	a80b883a 	mov	r5,r21
    9bc4:	0001f940 	call	1f94 <__udivsi3>
    9bc8:	a009883a 	mov	r4,r20
    9bcc:	a80b883a 	mov	r5,r21
    9bd0:	b8a3383a 	mul	r17,r23,r2
    9bd4:	0001f9c0 	call	1f9c <__umodsi3>
    9bd8:	1004943a 	slli	r2,r2,16
    9bdc:	b006d43a 	srli	r3,r22,16
    9be0:	10c4b03a 	or	r2,r2,r3
    9be4:	1440032e 	bgeu	r2,r17,9bf4 <__umoddi3+0x200>
    9be8:	1405883a 	add	r2,r2,r16
    9bec:	14000136 	bltu	r2,r16,9bf4 <__umoddi3+0x200>
    9bf0:	1440e536 	bltu	r2,r17,9f88 <__umoddi3+0x594>
    9bf4:	1463c83a 	sub	r17,r2,r17
    9bf8:	8809883a 	mov	r4,r17
    9bfc:	a80b883a 	mov	r5,r21
    9c00:	0001f940 	call	1f94 <__udivsi3>
    9c04:	8809883a 	mov	r4,r17
    9c08:	b8a3383a 	mul	r17,r23,r2
    9c0c:	a80b883a 	mov	r5,r21
    9c10:	0001f9c0 	call	1f9c <__umodsi3>
    9c14:	1004943a 	slli	r2,r2,16
    9c18:	b0ffffcc 	andi	r3,r22,65535
    9c1c:	10c4b03a 	or	r2,r2,r3
    9c20:	1440042e 	bgeu	r2,r17,9c34 <__umoddi3+0x240>
    9c24:	1405883a 	add	r2,r2,r16
    9c28:	14000236 	bltu	r2,r16,9c34 <__umoddi3+0x240>
    9c2c:	1440012e 	bgeu	r2,r17,9c34 <__umoddi3+0x240>
    9c30:	1405883a 	add	r2,r2,r16
    9c34:	1445c83a 	sub	r2,r2,r17
    9c38:	1724d83a 	srl	r18,r2,fp
    9c3c:	0013883a 	mov	r9,zero
    9c40:	9011883a 	mov	r8,r18
    9c44:	003fa906 	br	9aec <__umoddi3+0xf8>
    9c48:	00804034 	movhi	r2,256
    9c4c:	10bfffc4 	addi	r2,r2,-1
    9c50:	1400b036 	bltu	r2,r16,9f14 <__umoddi3+0x520>
    9c54:	01400404 	movi	r5,16
    9c58:	2805883a 	mov	r2,r5
    9c5c:	003f7c06 	br	9a50 <__umoddi3+0x5c>
    9c60:	01000044 	movi	r4,1
    9c64:	000b883a 	mov	r5,zero
    9c68:	0001f940 	call	1f94 <__udivsi3>
    9c6c:	1021883a 	mov	r16,r2
    9c70:	00bfffd4 	movui	r2,65535
    9c74:	143ff436 	bltu	r2,r16,9c48 <__umoddi3+0x254>
    9c78:	003f7106 	br	9a40 <__umoddi3+0x4c>
    9c7c:	00804034 	movhi	r2,256
    9c80:	10bfffc4 	addi	r2,r2,-1
    9c84:	1180af36 	bltu	r2,r6,9f44 <__umoddi3+0x550>
    9c88:	01400404 	movi	r5,16
    9c8c:	2805883a 	mov	r2,r5
    9c90:	003fbe06 	br	9b8c <__umoddi3+0x198>
    9c94:	00804034 	movhi	r2,256
    9c98:	10bfffc4 	addi	r2,r2,-1
    9c9c:	11c0ac36 	bltu	r2,r7,9f50 <__umoddi3+0x55c>
    9ca0:	01400404 	movi	r5,16
    9ca4:	2805883a 	mov	r2,r5
    9ca8:	003fa406 	br	9b3c <__umoddi3+0x148>
    9cac:	b409c83a 	sub	r4,r22,r16
    9cb0:	b105803a 	cmpltu	r2,r22,r4
    9cb4:	a187c83a 	sub	r3,r20,r6
    9cb8:	18a9c83a 	sub	r20,r3,r2
    9cbc:	202d883a 	mov	r22,r4
    9cc0:	003fa906 	br	9b68 <__umoddi3+0x174>
    9cc4:	85e0983a 	sll	r16,r16,r23
    9cc8:	35c5c83a 	sub	r2,r6,r23
    9ccc:	a0a2d83a 	srl	r17,r20,r2
    9cd0:	802ad43a 	srli	r21,r16,16
    9cd4:	b084d83a 	srl	r2,r22,r2
    9cd8:	a5c6983a 	sll	r3,r20,r23
    9cdc:	8809883a 	mov	r4,r17
    9ce0:	a80b883a 	mov	r5,r21
    9ce4:	1886b03a 	or	r3,r3,r2
    9ce8:	d8c00115 	stw	r3,4(sp)
    9cec:	853fffcc 	andi	r20,r16,65535
    9cf0:	0001f940 	call	1f94 <__udivsi3>
    9cf4:	8809883a 	mov	r4,r17
    9cf8:	a80b883a 	mov	r5,r21
    9cfc:	a0a3383a 	mul	r17,r20,r2
    9d00:	0001f9c0 	call	1f9c <__umodsi3>
    9d04:	d9000117 	ldw	r4,4(sp)
    9d08:	1004943a 	slli	r2,r2,16
    9d0c:	b839883a 	mov	fp,r23
    9d10:	2006d43a 	srli	r3,r4,16
    9d14:	10c4b03a 	or	r2,r2,r3
    9d18:	1440022e 	bgeu	r2,r17,9d24 <__umoddi3+0x330>
    9d1c:	1405883a 	add	r2,r2,r16
    9d20:	1400962e 	bgeu	r2,r16,9f7c <__umoddi3+0x588>
    9d24:	1463c83a 	sub	r17,r2,r17
    9d28:	8809883a 	mov	r4,r17
    9d2c:	a80b883a 	mov	r5,r21
    9d30:	0001f940 	call	1f94 <__udivsi3>
    9d34:	8809883a 	mov	r4,r17
    9d38:	a80b883a 	mov	r5,r21
    9d3c:	a0a3383a 	mul	r17,r20,r2
    9d40:	0001f9c0 	call	1f9c <__umodsi3>
    9d44:	d9400117 	ldw	r5,4(sp)
    9d48:	1004943a 	slli	r2,r2,16
    9d4c:	28ffffcc 	andi	r3,r5,65535
    9d50:	10c4b03a 	or	r2,r2,r3
    9d54:	1440042e 	bgeu	r2,r17,9d68 <__umoddi3+0x374>
    9d58:	1405883a 	add	r2,r2,r16
    9d5c:	14000236 	bltu	r2,r16,9d68 <__umoddi3+0x374>
    9d60:	1440012e 	bgeu	r2,r17,9d68 <__umoddi3+0x374>
    9d64:	1405883a 	add	r2,r2,r16
    9d68:	b5ec983a 	sll	r22,r22,r23
    9d6c:	1463c83a 	sub	r17,r2,r17
    9d70:	003f4406 	br	9a84 <__umoddi3+0x90>
    9d74:	3d4fc83a 	sub	r7,r7,r21
    9d78:	3546983a 	sll	r3,r6,r21
    9d7c:	81c4d83a 	srl	r2,r16,r7
    9d80:	a1e2d83a 	srl	r17,r20,r7
    9d84:	a54c983a 	sll	r6,r20,r21
    9d88:	18aeb03a 	or	r23,r3,r2
    9d8c:	b828d43a 	srli	r20,r23,16
    9d90:	b1c4d83a 	srl	r2,r22,r7
    9d94:	8809883a 	mov	r4,r17
    9d98:	a00b883a 	mov	r5,r20
    9d9c:	308cb03a 	or	r6,r6,r2
    9da0:	d9c00315 	stw	r7,12(sp)
    9da4:	d9800215 	stw	r6,8(sp)
    9da8:	0001f940 	call	1f94 <__udivsi3>
    9dac:	8809883a 	mov	r4,r17
    9db0:	a00b883a 	mov	r5,r20
    9db4:	1039883a 	mov	fp,r2
    9db8:	0001f9c0 	call	1f9c <__umodsi3>
    9dbc:	b8ffffcc 	andi	r3,r23,65535
    9dc0:	d8c00415 	stw	r3,16(sp)
    9dc4:	d9000217 	ldw	r4,8(sp)
    9dc8:	d9400417 	ldw	r5,16(sp)
    9dcc:	1004943a 	slli	r2,r2,16
    9dd0:	2006d43a 	srli	r3,r4,16
    9dd4:	8560983a 	sll	r16,r16,r21
    9dd8:	2f23383a 	mul	r17,r5,fp
    9ddc:	10c4b03a 	or	r2,r2,r3
    9de0:	dc000015 	stw	r16,0(sp)
    9de4:	b56c983a 	sll	r22,r22,r21
    9de8:	1440032e 	bgeu	r2,r17,9df8 <__umoddi3+0x404>
    9dec:	15c5883a 	add	r2,r2,r23
    9df0:	e73fffc4 	addi	fp,fp,-1
    9df4:	15c05d2e 	bgeu	r2,r23,9f6c <__umoddi3+0x578>
    9df8:	1463c83a 	sub	r17,r2,r17
    9dfc:	8809883a 	mov	r4,r17
    9e00:	a00b883a 	mov	r5,r20
    9e04:	0001f940 	call	1f94 <__udivsi3>
    9e08:	8809883a 	mov	r4,r17
    9e0c:	a00b883a 	mov	r5,r20
    9e10:	1021883a 	mov	r16,r2
    9e14:	0001f9c0 	call	1f9c <__umodsi3>
    9e18:	d8c00417 	ldw	r3,16(sp)
    9e1c:	d9000217 	ldw	r4,8(sp)
    9e20:	1004943a 	slli	r2,r2,16
    9e24:	1c23383a 	mul	r17,r3,r16
    9e28:	20ffffcc 	andi	r3,r4,65535
    9e2c:	10ceb03a 	or	r7,r2,r3
    9e30:	3c40032e 	bgeu	r7,r17,9e40 <__umoddi3+0x44c>
    9e34:	3dcf883a 	add	r7,r7,r23
    9e38:	843fffc4 	addi	r16,r16,-1
    9e3c:	3dc0472e 	bgeu	r7,r23,9f5c <__umoddi3+0x568>
    9e40:	e004943a 	slli	r2,fp,16
    9e44:	d9400017 	ldw	r5,0(sp)
    9e48:	3c4fc83a 	sub	r7,r7,r17
    9e4c:	8084b03a 	or	r2,r16,r2
    9e50:	28ffffcc 	andi	r3,r5,65535
    9e54:	280cd43a 	srli	r6,r5,16
    9e58:	100ad43a 	srli	r5,r2,16
    9e5c:	10bfffcc 	andi	r2,r2,65535
    9e60:	10d1383a 	mul	r8,r2,r3
    9e64:	28c7383a 	mul	r3,r5,r3
    9e68:	1185383a 	mul	r2,r2,r6
    9e6c:	4008d43a 	srli	r4,r8,16
    9e70:	298b383a 	mul	r5,r5,r6
    9e74:	10c5883a 	add	r2,r2,r3
    9e78:	2089883a 	add	r4,r4,r2
    9e7c:	20c0022e 	bgeu	r4,r3,9e88 <__umoddi3+0x494>
    9e80:	00800074 	movhi	r2,1
    9e84:	288b883a 	add	r5,r5,r2
    9e88:	2004d43a 	srli	r2,r4,16
    9e8c:	2008943a 	slli	r4,r4,16
    9e90:	40ffffcc 	andi	r3,r8,65535
    9e94:	288b883a 	add	r5,r5,r2
    9e98:	20c9883a 	add	r4,r4,r3
    9e9c:	39400b36 	bltu	r7,r5,9ecc <__umoddi3+0x4d8>
    9ea0:	39403d26 	beq	r7,r5,9f98 <__umoddi3+0x5a4>
    9ea4:	394bc83a 	sub	r5,r7,r5
    9ea8:	00000f06 	br	9ee8 <__umoddi3+0x4f4>
    9eac:	30c5c83a 	sub	r2,r6,r3
    9eb0:	1839883a 	mov	fp,r3
    9eb4:	b084d83a 	srl	r2,r22,r2
    9eb8:	a0c6983a 	sll	r3,r20,r3
    9ebc:	8720983a 	sll	r16,r16,fp
    9ec0:	b72c983a 	sll	r22,r22,fp
    9ec4:	18a8b03a 	or	r20,r3,r2
    9ec8:	003f3a06 	br	9bb4 <__umoddi3+0x1c0>
    9ecc:	d8c00017 	ldw	r3,0(sp)
    9ed0:	20c5c83a 	sub	r2,r4,r3
    9ed4:	2089803a 	cmpltu	r4,r4,r2
    9ed8:	2dc7c83a 	sub	r3,r5,r23
    9edc:	1907c83a 	sub	r3,r3,r4
    9ee0:	38cbc83a 	sub	r5,r7,r3
    9ee4:	1009883a 	mov	r4,r2
    9ee8:	b105c83a 	sub	r2,r22,r4
    9eec:	b087803a 	cmpltu	r3,r22,r2
    9ef0:	28c7c83a 	sub	r3,r5,r3
    9ef4:	d9400317 	ldw	r5,12(sp)
    9ef8:	1544d83a 	srl	r2,r2,r21
    9efc:	1948983a 	sll	r4,r3,r5
    9f00:	1d46d83a 	srl	r3,r3,r21
    9f04:	20a4b03a 	or	r18,r4,r2
    9f08:	9011883a 	mov	r8,r18
    9f0c:	1813883a 	mov	r9,r3
    9f10:	003ef606 	br	9aec <__umoddi3+0xf8>
    9f14:	01400604 	movi	r5,24
    9f18:	2805883a 	mov	r2,r5
    9f1c:	003ecc06 	br	9a50 <__umoddi3+0x5c>
    9f20:	01400204 	movi	r5,8
    9f24:	2805883a 	mov	r2,r5
    9f28:	003ec906 	br	9a50 <__umoddi3+0x5c>
    9f2c:	01400204 	movi	r5,8
    9f30:	2805883a 	mov	r2,r5
    9f34:	003f0106 	br	9b3c <__umoddi3+0x148>
    9f38:	01400204 	movi	r5,8
    9f3c:	2805883a 	mov	r2,r5
    9f40:	003f1206 	br	9b8c <__umoddi3+0x198>
    9f44:	01400604 	movi	r5,24
    9f48:	2805883a 	mov	r2,r5
    9f4c:	003f0f06 	br	9b8c <__umoddi3+0x198>
    9f50:	01400604 	movi	r5,24
    9f54:	2805883a 	mov	r2,r5
    9f58:	003ef806 	br	9b3c <__umoddi3+0x148>
    9f5c:	3c7fb82e 	bgeu	r7,r17,9e40 <__umoddi3+0x44c>
    9f60:	843fffc4 	addi	r16,r16,-1
    9f64:	3dcf883a 	add	r7,r7,r23
    9f68:	003fb506 	br	9e40 <__umoddi3+0x44c>
    9f6c:	147fa22e 	bgeu	r2,r17,9df8 <__umoddi3+0x404>
    9f70:	e73fffc4 	addi	fp,fp,-1
    9f74:	15c5883a 	add	r2,r2,r23
    9f78:	003f9f06 	br	9df8 <__umoddi3+0x404>
    9f7c:	147f692e 	bgeu	r2,r17,9d24 <__umoddi3+0x330>
    9f80:	1405883a 	add	r2,r2,r16
    9f84:	003f6706 	br	9d24 <__umoddi3+0x330>
    9f88:	1405883a 	add	r2,r2,r16
    9f8c:	003f1906 	br	9bf4 <__umoddi3+0x200>
    9f90:	1405883a 	add	r2,r2,r16
    9f94:	003ec906 	br	9abc <__umoddi3+0xc8>
    9f98:	b13fcc36 	bltu	r22,r4,9ecc <__umoddi3+0x4d8>
    9f9c:	000b883a 	mov	r5,zero
    9fa0:	003fd106 	br	9ee8 <__umoddi3+0x4f4>

00009fa4 <_fpadd_parts>:
    9fa4:	defff804 	addi	sp,sp,-32
    9fa8:	dcc00315 	stw	r19,12(sp)
    9fac:	2027883a 	mov	r19,r4
    9fb0:	21000017 	ldw	r4,0(r4)
    9fb4:	00c00044 	movi	r3,1
    9fb8:	dd400515 	stw	r21,20(sp)
    9fbc:	dd000415 	stw	r20,16(sp)
    9fc0:	ddc00715 	stw	r23,28(sp)
    9fc4:	dd800615 	stw	r22,24(sp)
    9fc8:	dc800215 	stw	r18,8(sp)
    9fcc:	dc400115 	stw	r17,4(sp)
    9fd0:	dc000015 	stw	r16,0(sp)
    9fd4:	282b883a 	mov	r21,r5
    9fd8:	3029883a 	mov	r20,r6
    9fdc:	1900632e 	bgeu	r3,r4,a16c <_fpadd_parts+0x1c8>
    9fe0:	28800017 	ldw	r2,0(r5)
    9fe4:	1880812e 	bgeu	r3,r2,a1ec <_fpadd_parts+0x248>
    9fe8:	00c00104 	movi	r3,4
    9fec:	20c0dc26 	beq	r4,r3,a360 <_fpadd_parts+0x3bc>
    9ff0:	10c07e26 	beq	r2,r3,a1ec <_fpadd_parts+0x248>
    9ff4:	00c00084 	movi	r3,2
    9ff8:	10c06726 	beq	r2,r3,a198 <_fpadd_parts+0x1f4>
    9ffc:	20c07b26 	beq	r4,r3,a1ec <_fpadd_parts+0x248>
    a000:	9dc00217 	ldw	r23,8(r19)
    a004:	28c00217 	ldw	r3,8(r5)
    a008:	9c400317 	ldw	r17,12(r19)
    a00c:	2bc00317 	ldw	r15,12(r5)
    a010:	b8cdc83a 	sub	r6,r23,r3
    a014:	9c800417 	ldw	r18,16(r19)
    a018:	2c000417 	ldw	r16,16(r5)
    a01c:	3009883a 	mov	r4,r6
    a020:	30009716 	blt	r6,zero,a280 <_fpadd_parts+0x2dc>
    a024:	00800fc4 	movi	r2,63
    a028:	11806b16 	blt	r2,r6,a1d8 <_fpadd_parts+0x234>
    a02c:	0100a40e 	bge	zero,r4,a2c0 <_fpadd_parts+0x31c>
    a030:	35bff804 	addi	r22,r6,-32
    a034:	b000bc16 	blt	r22,zero,a328 <_fpadd_parts+0x384>
    a038:	8596d83a 	srl	r11,r16,r22
    a03c:	0019883a 	mov	r12,zero
    a040:	0013883a 	mov	r9,zero
    a044:	01000044 	movi	r4,1
    a048:	0015883a 	mov	r10,zero
    a04c:	b000be16 	blt	r22,zero,a348 <_fpadd_parts+0x3a4>
    a050:	2590983a 	sll	r8,r4,r22
    a054:	000f883a 	mov	r7,zero
    a058:	00bfffc4 	movi	r2,-1
    a05c:	3889883a 	add	r4,r7,r2
    a060:	408b883a 	add	r5,r8,r2
    a064:	21cd803a 	cmpltu	r6,r4,r7
    a068:	314b883a 	add	r5,r6,r5
    a06c:	7904703a 	and	r2,r15,r4
    a070:	8146703a 	and	r3,r16,r5
    a074:	10c4b03a 	or	r2,r2,r3
    a078:	10000226 	beq	r2,zero,a084 <_fpadd_parts+0xe0>
    a07c:	02400044 	movi	r9,1
    a080:	0015883a 	mov	r10,zero
    a084:	5a5eb03a 	or	r15,r11,r9
    a088:	62a0b03a 	or	r16,r12,r10
    a08c:	99400117 	ldw	r5,4(r19)
    a090:	a8800117 	ldw	r2,4(r21)
    a094:	28806e26 	beq	r5,r2,a250 <_fpadd_parts+0x2ac>
    a098:	28006626 	beq	r5,zero,a234 <_fpadd_parts+0x290>
    a09c:	7c45c83a 	sub	r2,r15,r17
    a0a0:	7889803a 	cmpltu	r4,r15,r2
    a0a4:	8487c83a 	sub	r3,r16,r18
    a0a8:	1909c83a 	sub	r4,r3,r4
    a0ac:	100d883a 	mov	r6,r2
    a0b0:	200f883a 	mov	r7,r4
    a0b4:	38007716 	blt	r7,zero,a294 <_fpadd_parts+0x2f0>
    a0b8:	a5c00215 	stw	r23,8(r20)
    a0bc:	a1c00415 	stw	r7,16(r20)
    a0c0:	a0000115 	stw	zero,4(r20)
    a0c4:	a1800315 	stw	r6,12(r20)
    a0c8:	a2000317 	ldw	r8,12(r20)
    a0cc:	a2400417 	ldw	r9,16(r20)
    a0d0:	00bfffc4 	movi	r2,-1
    a0d4:	408b883a 	add	r5,r8,r2
    a0d8:	2a09803a 	cmpltu	r4,r5,r8
    a0dc:	488d883a 	add	r6,r9,r2
    a0e0:	01c40034 	movhi	r7,4096
    a0e4:	39ffffc4 	addi	r7,r7,-1
    a0e8:	218d883a 	add	r6,r4,r6
    a0ec:	39801736 	bltu	r7,r6,a14c <_fpadd_parts+0x1a8>
    a0f0:	31c06526 	beq	r6,r7,a288 <_fpadd_parts+0x2e4>
    a0f4:	a3000217 	ldw	r12,8(r20)
    a0f8:	4209883a 	add	r4,r8,r8
    a0fc:	00bfffc4 	movi	r2,-1
    a100:	220f803a 	cmpltu	r7,r4,r8
    a104:	4a4b883a 	add	r5,r9,r9
    a108:	394f883a 	add	r7,r7,r5
    a10c:	2095883a 	add	r10,r4,r2
    a110:	3897883a 	add	r11,r7,r2
    a114:	510d803a 	cmpltu	r6,r10,r4
    a118:	6099883a 	add	r12,r12,r2
    a11c:	32d7883a 	add	r11,r6,r11
    a120:	00840034 	movhi	r2,4096
    a124:	10bfffc4 	addi	r2,r2,-1
    a128:	2011883a 	mov	r8,r4
    a12c:	3813883a 	mov	r9,r7
    a130:	a1000315 	stw	r4,12(r20)
    a134:	a1c00415 	stw	r7,16(r20)
    a138:	a3000215 	stw	r12,8(r20)
    a13c:	12c00336 	bltu	r2,r11,a14c <_fpadd_parts+0x1a8>
    a140:	58bfed1e 	bne	r11,r2,a0f8 <_fpadd_parts+0x154>
    a144:	00bfff84 	movi	r2,-2
    a148:	12bfeb2e 	bgeu	r2,r10,a0f8 <_fpadd_parts+0x154>
    a14c:	a2800417 	ldw	r10,16(r20)
    a150:	008000c4 	movi	r2,3
    a154:	00c80034 	movhi	r3,8192
    a158:	18ffffc4 	addi	r3,r3,-1
    a15c:	a2400317 	ldw	r9,12(r20)
    a160:	a0800015 	stw	r2,0(r20)
    a164:	1a802336 	bltu	r3,r10,a1f4 <_fpadd_parts+0x250>
    a168:	a027883a 	mov	r19,r20
    a16c:	9805883a 	mov	r2,r19
    a170:	ddc00717 	ldw	r23,28(sp)
    a174:	dd800617 	ldw	r22,24(sp)
    a178:	dd400517 	ldw	r21,20(sp)
    a17c:	dd000417 	ldw	r20,16(sp)
    a180:	dcc00317 	ldw	r19,12(sp)
    a184:	dc800217 	ldw	r18,8(sp)
    a188:	dc400117 	ldw	r17,4(sp)
    a18c:	dc000017 	ldw	r16,0(sp)
    a190:	dec00804 	addi	sp,sp,32
    a194:	f800283a 	ret
    a198:	20fff41e 	bne	r4,r3,a16c <_fpadd_parts+0x1c8>
    a19c:	31000015 	stw	r4,0(r6)
    a1a0:	98800117 	ldw	r2,4(r19)
    a1a4:	30800115 	stw	r2,4(r6)
    a1a8:	98c00217 	ldw	r3,8(r19)
    a1ac:	30c00215 	stw	r3,8(r6)
    a1b0:	98800317 	ldw	r2,12(r19)
    a1b4:	30800315 	stw	r2,12(r6)
    a1b8:	98c00417 	ldw	r3,16(r19)
    a1bc:	30c00415 	stw	r3,16(r6)
    a1c0:	98800117 	ldw	r2,4(r19)
    a1c4:	28c00117 	ldw	r3,4(r5)
    a1c8:	3027883a 	mov	r19,r6
    a1cc:	10c4703a 	and	r2,r2,r3
    a1d0:	30800115 	stw	r2,4(r6)
    a1d4:	003fe506 	br	a16c <_fpadd_parts+0x1c8>
    a1d8:	1dc02616 	blt	r3,r23,a274 <_fpadd_parts+0x2d0>
    a1dc:	0023883a 	mov	r17,zero
    a1e0:	182f883a 	mov	r23,r3
    a1e4:	0025883a 	mov	r18,zero
    a1e8:	003fa806 	br	a08c <_fpadd_parts+0xe8>
    a1ec:	a827883a 	mov	r19,r21
    a1f0:	003fde06 	br	a16c <_fpadd_parts+0x1c8>
    a1f4:	01800044 	movi	r6,1
    a1f8:	500497fa 	slli	r2,r10,31
    a1fc:	4808d07a 	srli	r4,r9,1
    a200:	518ad83a 	srl	r5,r10,r6
    a204:	a2000217 	ldw	r8,8(r20)
    a208:	1108b03a 	or	r4,r2,r4
    a20c:	0007883a 	mov	r3,zero
    a210:	4984703a 	and	r2,r9,r6
    a214:	208cb03a 	or	r6,r4,r2
    a218:	28ceb03a 	or	r7,r5,r3
    a21c:	42000044 	addi	r8,r8,1
    a220:	a027883a 	mov	r19,r20
    a224:	a1c00415 	stw	r7,16(r20)
    a228:	a2000215 	stw	r8,8(r20)
    a22c:	a1800315 	stw	r6,12(r20)
    a230:	003fce06 	br	a16c <_fpadd_parts+0x1c8>
    a234:	8bc5c83a 	sub	r2,r17,r15
    a238:	8889803a 	cmpltu	r4,r17,r2
    a23c:	9407c83a 	sub	r3,r18,r16
    a240:	1909c83a 	sub	r4,r3,r4
    a244:	100d883a 	mov	r6,r2
    a248:	200f883a 	mov	r7,r4
    a24c:	003f9906 	br	a0b4 <_fpadd_parts+0x110>
    a250:	7c45883a 	add	r2,r15,r17
    a254:	13c9803a 	cmpltu	r4,r2,r15
    a258:	8487883a 	add	r3,r16,r18
    a25c:	20c9883a 	add	r4,r4,r3
    a260:	a1400115 	stw	r5,4(r20)
    a264:	a5c00215 	stw	r23,8(r20)
    a268:	a0800315 	stw	r2,12(r20)
    a26c:	a1000415 	stw	r4,16(r20)
    a270:	003fb606 	br	a14c <_fpadd_parts+0x1a8>
    a274:	001f883a 	mov	r15,zero
    a278:	0021883a 	mov	r16,zero
    a27c:	003f8306 	br	a08c <_fpadd_parts+0xe8>
    a280:	018dc83a 	sub	r6,zero,r6
    a284:	003f6706 	br	a024 <_fpadd_parts+0x80>
    a288:	00bfff84 	movi	r2,-2
    a28c:	117faf36 	bltu	r2,r5,a14c <_fpadd_parts+0x1a8>
    a290:	003f9806 	br	a0f4 <_fpadd_parts+0x150>
    a294:	0005883a 	mov	r2,zero
    a298:	1189c83a 	sub	r4,r2,r6
    a29c:	1105803a 	cmpltu	r2,r2,r4
    a2a0:	01cbc83a 	sub	r5,zero,r7
    a2a4:	2885c83a 	sub	r2,r5,r2
    a2a8:	01800044 	movi	r6,1
    a2ac:	a1800115 	stw	r6,4(r20)
    a2b0:	a5c00215 	stw	r23,8(r20)
    a2b4:	a1000315 	stw	r4,12(r20)
    a2b8:	a0800415 	stw	r2,16(r20)
    a2bc:	003f8206 	br	a0c8 <_fpadd_parts+0x124>
    a2c0:	203f7226 	beq	r4,zero,a08c <_fpadd_parts+0xe8>
    a2c4:	35bff804 	addi	r22,r6,-32
    a2c8:	b9af883a 	add	r23,r23,r6
    a2cc:	b0003116 	blt	r22,zero,a394 <_fpadd_parts+0x3f0>
    a2d0:	959ad83a 	srl	r13,r18,r22
    a2d4:	001d883a 	mov	r14,zero
    a2d8:	000f883a 	mov	r7,zero
    a2dc:	01000044 	movi	r4,1
    a2e0:	0011883a 	mov	r8,zero
    a2e4:	b0002516 	blt	r22,zero,a37c <_fpadd_parts+0x3d8>
    a2e8:	2594983a 	sll	r10,r4,r22
    a2ec:	0013883a 	mov	r9,zero
    a2f0:	00bfffc4 	movi	r2,-1
    a2f4:	4889883a 	add	r4,r9,r2
    a2f8:	508b883a 	add	r5,r10,r2
    a2fc:	224d803a 	cmpltu	r6,r4,r9
    a300:	314b883a 	add	r5,r6,r5
    a304:	8904703a 	and	r2,r17,r4
    a308:	9146703a 	and	r3,r18,r5
    a30c:	10c4b03a 	or	r2,r2,r3
    a310:	10000226 	beq	r2,zero,a31c <_fpadd_parts+0x378>
    a314:	01c00044 	movi	r7,1
    a318:	0011883a 	mov	r8,zero
    a31c:	69e2b03a 	or	r17,r13,r7
    a320:	7224b03a 	or	r18,r14,r8
    a324:	003f5906 	br	a08c <_fpadd_parts+0xe8>
    a328:	8407883a 	add	r3,r16,r16
    a32c:	008007c4 	movi	r2,31
    a330:	1185c83a 	sub	r2,r2,r6
    a334:	1886983a 	sll	r3,r3,r2
    a338:	7996d83a 	srl	r11,r15,r6
    a33c:	8198d83a 	srl	r12,r16,r6
    a340:	1ad6b03a 	or	r11,r3,r11
    a344:	003f3e06 	br	a040 <_fpadd_parts+0x9c>
    a348:	2006d07a 	srli	r3,r4,1
    a34c:	008007c4 	movi	r2,31
    a350:	1185c83a 	sub	r2,r2,r6
    a354:	1890d83a 	srl	r8,r3,r2
    a358:	218e983a 	sll	r7,r4,r6
    a35c:	003f3e06 	br	a058 <_fpadd_parts+0xb4>
    a360:	113f821e 	bne	r2,r4,a16c <_fpadd_parts+0x1c8>
    a364:	28c00117 	ldw	r3,4(r5)
    a368:	98800117 	ldw	r2,4(r19)
    a36c:	10ff7f26 	beq	r2,r3,a16c <_fpadd_parts+0x1c8>
    a370:	04c00074 	movhi	r19,1
    a374:	9cfb1404 	addi	r19,r19,-5040
    a378:	003f7c06 	br	a16c <_fpadd_parts+0x1c8>
    a37c:	2006d07a 	srli	r3,r4,1
    a380:	008007c4 	movi	r2,31
    a384:	1185c83a 	sub	r2,r2,r6
    a388:	1894d83a 	srl	r10,r3,r2
    a38c:	2192983a 	sll	r9,r4,r6
    a390:	003fd706 	br	a2f0 <_fpadd_parts+0x34c>
    a394:	9487883a 	add	r3,r18,r18
    a398:	008007c4 	movi	r2,31
    a39c:	1185c83a 	sub	r2,r2,r6
    a3a0:	1886983a 	sll	r3,r3,r2
    a3a4:	899ad83a 	srl	r13,r17,r6
    a3a8:	919cd83a 	srl	r14,r18,r6
    a3ac:	1b5ab03a 	or	r13,r3,r13
    a3b0:	003fc906 	br	a2d8 <_fpadd_parts+0x334>

0000a3b4 <__subdf3>:
    a3b4:	deffea04 	addi	sp,sp,-88
    a3b8:	dcc01415 	stw	r19,80(sp)
    a3bc:	dcc00404 	addi	r19,sp,16
    a3c0:	2011883a 	mov	r8,r4
    a3c4:	2813883a 	mov	r9,r5
    a3c8:	dc401315 	stw	r17,76(sp)
    a3cc:	d809883a 	mov	r4,sp
    a3d0:	980b883a 	mov	r5,r19
    a3d4:	dc400904 	addi	r17,sp,36
    a3d8:	dfc01515 	stw	ra,84(sp)
    a3dc:	da400115 	stw	r9,4(sp)
    a3e0:	d9c00315 	stw	r7,12(sp)
    a3e4:	da000015 	stw	r8,0(sp)
    a3e8:	d9800215 	stw	r6,8(sp)
    a3ec:	000b4640 	call	b464 <__unpack_d>
    a3f0:	d9000204 	addi	r4,sp,8
    a3f4:	880b883a 	mov	r5,r17
    a3f8:	000b4640 	call	b464 <__unpack_d>
    a3fc:	d8800a17 	ldw	r2,40(sp)
    a400:	880b883a 	mov	r5,r17
    a404:	9809883a 	mov	r4,r19
    a408:	d9800e04 	addi	r6,sp,56
    a40c:	1080005c 	xori	r2,r2,1
    a410:	d8800a15 	stw	r2,40(sp)
    a414:	0009fa40 	call	9fa4 <_fpadd_parts>
    a418:	1009883a 	mov	r4,r2
    a41c:	000b1500 	call	b150 <__pack_d>
    a420:	dfc01517 	ldw	ra,84(sp)
    a424:	dcc01417 	ldw	r19,80(sp)
    a428:	dc401317 	ldw	r17,76(sp)
    a42c:	dec01604 	addi	sp,sp,88
    a430:	f800283a 	ret

0000a434 <__adddf3>:
    a434:	deffea04 	addi	sp,sp,-88
    a438:	dcc01415 	stw	r19,80(sp)
    a43c:	dcc00404 	addi	r19,sp,16
    a440:	2011883a 	mov	r8,r4
    a444:	2813883a 	mov	r9,r5
    a448:	dc401315 	stw	r17,76(sp)
    a44c:	d809883a 	mov	r4,sp
    a450:	980b883a 	mov	r5,r19
    a454:	dc400904 	addi	r17,sp,36
    a458:	dfc01515 	stw	ra,84(sp)
    a45c:	da400115 	stw	r9,4(sp)
    a460:	d9c00315 	stw	r7,12(sp)
    a464:	da000015 	stw	r8,0(sp)
    a468:	d9800215 	stw	r6,8(sp)
    a46c:	000b4640 	call	b464 <__unpack_d>
    a470:	d9000204 	addi	r4,sp,8
    a474:	880b883a 	mov	r5,r17
    a478:	000b4640 	call	b464 <__unpack_d>
    a47c:	d9800e04 	addi	r6,sp,56
    a480:	9809883a 	mov	r4,r19
    a484:	880b883a 	mov	r5,r17
    a488:	0009fa40 	call	9fa4 <_fpadd_parts>
    a48c:	1009883a 	mov	r4,r2
    a490:	000b1500 	call	b150 <__pack_d>
    a494:	dfc01517 	ldw	ra,84(sp)
    a498:	dcc01417 	ldw	r19,80(sp)
    a49c:	dc401317 	ldw	r17,76(sp)
    a4a0:	dec01604 	addi	sp,sp,88
    a4a4:	f800283a 	ret

0000a4a8 <__muldf3>:
    a4a8:	deffe004 	addi	sp,sp,-128
    a4ac:	dc401815 	stw	r17,96(sp)
    a4b0:	dc400404 	addi	r17,sp,16
    a4b4:	2011883a 	mov	r8,r4
    a4b8:	2813883a 	mov	r9,r5
    a4bc:	dc001715 	stw	r16,92(sp)
    a4c0:	d809883a 	mov	r4,sp
    a4c4:	880b883a 	mov	r5,r17
    a4c8:	dc000904 	addi	r16,sp,36
    a4cc:	dfc01f15 	stw	ra,124(sp)
    a4d0:	da400115 	stw	r9,4(sp)
    a4d4:	d9c00315 	stw	r7,12(sp)
    a4d8:	da000015 	stw	r8,0(sp)
    a4dc:	d9800215 	stw	r6,8(sp)
    a4e0:	ddc01e15 	stw	r23,120(sp)
    a4e4:	dd801d15 	stw	r22,116(sp)
    a4e8:	dd401c15 	stw	r21,112(sp)
    a4ec:	dd001b15 	stw	r20,108(sp)
    a4f0:	dcc01a15 	stw	r19,104(sp)
    a4f4:	dc801915 	stw	r18,100(sp)
    a4f8:	000b4640 	call	b464 <__unpack_d>
    a4fc:	d9000204 	addi	r4,sp,8
    a500:	800b883a 	mov	r5,r16
    a504:	000b4640 	call	b464 <__unpack_d>
    a508:	d9000417 	ldw	r4,16(sp)
    a50c:	00800044 	movi	r2,1
    a510:	1100102e 	bgeu	r2,r4,a554 <__muldf3+0xac>
    a514:	d8c00917 	ldw	r3,36(sp)
    a518:	10c0062e 	bgeu	r2,r3,a534 <__muldf3+0x8c>
    a51c:	00800104 	movi	r2,4
    a520:	20800a26 	beq	r4,r2,a54c <__muldf3+0xa4>
    a524:	1880cc26 	beq	r3,r2,a858 <__muldf3+0x3b0>
    a528:	00800084 	movi	r2,2
    a52c:	20800926 	beq	r4,r2,a554 <__muldf3+0xac>
    a530:	1880191e 	bne	r3,r2,a598 <__muldf3+0xf0>
    a534:	d8c00a17 	ldw	r3,40(sp)
    a538:	d8800517 	ldw	r2,20(sp)
    a53c:	8009883a 	mov	r4,r16
    a540:	10c4c03a 	cmpne	r2,r2,r3
    a544:	d8800a15 	stw	r2,40(sp)
    a548:	00000706 	br	a568 <__muldf3+0xc0>
    a54c:	00800084 	movi	r2,2
    a550:	1880c326 	beq	r3,r2,a860 <__muldf3+0x3b8>
    a554:	d8800517 	ldw	r2,20(sp)
    a558:	d8c00a17 	ldw	r3,40(sp)
    a55c:	8809883a 	mov	r4,r17
    a560:	10c4c03a 	cmpne	r2,r2,r3
    a564:	d8800515 	stw	r2,20(sp)
    a568:	000b1500 	call	b150 <__pack_d>
    a56c:	dfc01f17 	ldw	ra,124(sp)
    a570:	ddc01e17 	ldw	r23,120(sp)
    a574:	dd801d17 	ldw	r22,116(sp)
    a578:	dd401c17 	ldw	r21,112(sp)
    a57c:	dd001b17 	ldw	r20,108(sp)
    a580:	dcc01a17 	ldw	r19,104(sp)
    a584:	dc801917 	ldw	r18,100(sp)
    a588:	dc401817 	ldw	r17,96(sp)
    a58c:	dc001717 	ldw	r16,92(sp)
    a590:	dec02004 	addi	sp,sp,128
    a594:	f800283a 	ret
    a598:	dd800717 	ldw	r22,28(sp)
    a59c:	dc800c17 	ldw	r18,48(sp)
    a5a0:	002b883a 	mov	r21,zero
    a5a4:	0023883a 	mov	r17,zero
    a5a8:	a80b883a 	mov	r5,r21
    a5ac:	b00d883a 	mov	r6,r22
    a5b0:	880f883a 	mov	r7,r17
    a5b4:	ddc00817 	ldw	r23,32(sp)
    a5b8:	dcc00d17 	ldw	r19,52(sp)
    a5bc:	9009883a 	mov	r4,r18
    a5c0:	00010ec0 	call	10ec <__muldi3>
    a5c4:	001b883a 	mov	r13,zero
    a5c8:	680f883a 	mov	r7,r13
    a5cc:	b009883a 	mov	r4,r22
    a5d0:	000b883a 	mov	r5,zero
    a5d4:	980d883a 	mov	r6,r19
    a5d8:	b82d883a 	mov	r22,r23
    a5dc:	002f883a 	mov	r23,zero
    a5e0:	db401615 	stw	r13,88(sp)
    a5e4:	d8801315 	stw	r2,76(sp)
    a5e8:	d8c01415 	stw	r3,80(sp)
    a5ec:	dcc01515 	stw	r19,84(sp)
    a5f0:	00010ec0 	call	10ec <__muldi3>
    a5f4:	b00d883a 	mov	r6,r22
    a5f8:	000b883a 	mov	r5,zero
    a5fc:	9009883a 	mov	r4,r18
    a600:	b80f883a 	mov	r7,r23
    a604:	1021883a 	mov	r16,r2
    a608:	1823883a 	mov	r17,r3
    a60c:	00010ec0 	call	10ec <__muldi3>
    a610:	8085883a 	add	r2,r16,r2
    a614:	140d803a 	cmpltu	r6,r2,r16
    a618:	88c7883a 	add	r3,r17,r3
    a61c:	30cd883a 	add	r6,r6,r3
    a620:	1029883a 	mov	r20,r2
    a624:	302b883a 	mov	r21,r6
    a628:	da801317 	ldw	r10,76(sp)
    a62c:	dac01417 	ldw	r11,80(sp)
    a630:	db001517 	ldw	r12,84(sp)
    a634:	db401617 	ldw	r13,88(sp)
    a638:	3440612e 	bgeu	r6,r17,a7c0 <__muldf3+0x318>
    a63c:	0009883a 	mov	r4,zero
    a640:	5105883a 	add	r2,r10,r4
    a644:	128d803a 	cmpltu	r6,r2,r10
    a648:	5d07883a 	add	r3,r11,r20
    a64c:	30cd883a 	add	r6,r6,r3
    a650:	0021883a 	mov	r16,zero
    a654:	04400044 	movi	r17,1
    a658:	1025883a 	mov	r18,r2
    a65c:	3027883a 	mov	r19,r6
    a660:	32c06236 	bltu	r6,r11,a7ec <__muldf3+0x344>
    a664:	59807a26 	beq	r11,r6,a850 <__muldf3+0x3a8>
    a668:	680b883a 	mov	r5,r13
    a66c:	b80f883a 	mov	r7,r23
    a670:	6009883a 	mov	r4,r12
    a674:	b00d883a 	mov	r6,r22
    a678:	00010ec0 	call	10ec <__muldi3>
    a67c:	1009883a 	mov	r4,r2
    a680:	000f883a 	mov	r7,zero
    a684:	1545883a 	add	r2,r2,r21
    a688:	1111803a 	cmpltu	r8,r2,r4
    a68c:	19c7883a 	add	r3,r3,r7
    a690:	40c7883a 	add	r3,r8,r3
    a694:	88cb883a 	add	r5,r17,r3
    a698:	d8c00617 	ldw	r3,24(sp)
    a69c:	8089883a 	add	r4,r16,r2
    a6a0:	d8800b17 	ldw	r2,44(sp)
    a6a4:	18c00104 	addi	r3,r3,4
    a6a8:	240d803a 	cmpltu	r6,r4,r16
    a6ac:	10c7883a 	add	r3,r2,r3
    a6b0:	2013883a 	mov	r9,r4
    a6b4:	d8800a17 	ldw	r2,40(sp)
    a6b8:	d9000517 	ldw	r4,20(sp)
    a6bc:	314d883a 	add	r6,r6,r5
    a6c0:	3015883a 	mov	r10,r6
    a6c4:	2088c03a 	cmpne	r4,r4,r2
    a6c8:	00880034 	movhi	r2,8192
    a6cc:	10bfffc4 	addi	r2,r2,-1
    a6d0:	d9000f15 	stw	r4,60(sp)
    a6d4:	d8c01015 	stw	r3,64(sp)
    a6d8:	1180162e 	bgeu	r2,r6,a734 <__muldf3+0x28c>
    a6dc:	1811883a 	mov	r8,r3
    a6e0:	101f883a 	mov	r15,r2
    a6e4:	980497fa 	slli	r2,r19,31
    a6e8:	9016d07a 	srli	r11,r18,1
    a6ec:	500697fa 	slli	r3,r10,31
    a6f0:	480cd07a 	srli	r6,r9,1
    a6f4:	500ed07a 	srli	r7,r10,1
    a6f8:	12d6b03a 	or	r11,r2,r11
    a6fc:	00800044 	movi	r2,1
    a700:	198cb03a 	or	r6,r3,r6
    a704:	4888703a 	and	r4,r9,r2
    a708:	9818d07a 	srli	r12,r19,1
    a70c:	001b883a 	mov	r13,zero
    a710:	03a00034 	movhi	r14,32768
    a714:	3013883a 	mov	r9,r6
    a718:	3815883a 	mov	r10,r7
    a71c:	4091883a 	add	r8,r8,r2
    a720:	20000226 	beq	r4,zero,a72c <__muldf3+0x284>
    a724:	5b64b03a 	or	r18,r11,r13
    a728:	63a6b03a 	or	r19,r12,r14
    a72c:	7abfed36 	bltu	r15,r10,a6e4 <__muldf3+0x23c>
    a730:	da001015 	stw	r8,64(sp)
    a734:	00840034 	movhi	r2,4096
    a738:	10bfffc4 	addi	r2,r2,-1
    a73c:	12801436 	bltu	r2,r10,a790 <__muldf3+0x2e8>
    a740:	da001017 	ldw	r8,64(sp)
    a744:	101f883a 	mov	r15,r2
    a748:	4a45883a 	add	r2,r9,r9
    a74c:	124d803a 	cmpltu	r6,r2,r9
    a750:	5287883a 	add	r3,r10,r10
    a754:	9497883a 	add	r11,r18,r18
    a758:	5c8f803a 	cmpltu	r7,r11,r18
    a75c:	9cd9883a 	add	r12,r19,r19
    a760:	01000044 	movi	r4,1
    a764:	30cd883a 	add	r6,r6,r3
    a768:	3b0f883a 	add	r7,r7,r12
    a76c:	423fffc4 	addi	r8,r8,-1
    a770:	1013883a 	mov	r9,r2
    a774:	3015883a 	mov	r10,r6
    a778:	111ab03a 	or	r13,r2,r4
    a77c:	98003016 	blt	r19,zero,a840 <__muldf3+0x398>
    a780:	5825883a 	mov	r18,r11
    a784:	3827883a 	mov	r19,r7
    a788:	7abfef2e 	bgeu	r15,r10,a748 <__muldf3+0x2a0>
    a78c:	da001015 	stw	r8,64(sp)
    a790:	00803fc4 	movi	r2,255
    a794:	488e703a 	and	r7,r9,r2
    a798:	00802004 	movi	r2,128
    a79c:	0007883a 	mov	r3,zero
    a7a0:	0011883a 	mov	r8,zero
    a7a4:	38801826 	beq	r7,r2,a808 <__muldf3+0x360>
    a7a8:	008000c4 	movi	r2,3
    a7ac:	d9000e04 	addi	r4,sp,56
    a7b0:	da801215 	stw	r10,72(sp)
    a7b4:	d8800e15 	stw	r2,56(sp)
    a7b8:	da401115 	stw	r9,68(sp)
    a7bc:	003f6a06 	br	a568 <__muldf3+0xc0>
    a7c0:	89802126 	beq	r17,r6,a848 <__muldf3+0x3a0>
    a7c4:	0009883a 	mov	r4,zero
    a7c8:	5105883a 	add	r2,r10,r4
    a7cc:	128d803a 	cmpltu	r6,r2,r10
    a7d0:	5d07883a 	add	r3,r11,r20
    a7d4:	30cd883a 	add	r6,r6,r3
    a7d8:	0021883a 	mov	r16,zero
    a7dc:	0023883a 	mov	r17,zero
    a7e0:	1025883a 	mov	r18,r2
    a7e4:	3027883a 	mov	r19,r6
    a7e8:	32ff9e2e 	bgeu	r6,r11,a664 <__muldf3+0x1bc>
    a7ec:	00800044 	movi	r2,1
    a7f0:	8089883a 	add	r4,r16,r2
    a7f4:	240d803a 	cmpltu	r6,r4,r16
    a7f8:	344d883a 	add	r6,r6,r17
    a7fc:	2021883a 	mov	r16,r4
    a800:	3023883a 	mov	r17,r6
    a804:	003f9806 	br	a668 <__muldf3+0x1c0>
    a808:	403fe71e 	bne	r8,zero,a7a8 <__muldf3+0x300>
    a80c:	01004004 	movi	r4,256
    a810:	4904703a 	and	r2,r9,r4
    a814:	10c4b03a 	or	r2,r2,r3
    a818:	103fe31e 	bne	r2,zero,a7a8 <__muldf3+0x300>
    a81c:	94c4b03a 	or	r2,r18,r19
    a820:	103fe126 	beq	r2,zero,a7a8 <__muldf3+0x300>
    a824:	49c5883a 	add	r2,r9,r7
    a828:	1251803a 	cmpltu	r8,r2,r9
    a82c:	4291883a 	add	r8,r8,r10
    a830:	013fc004 	movi	r4,-256
    a834:	1112703a 	and	r9,r2,r4
    a838:	4015883a 	mov	r10,r8
    a83c:	003fda06 	br	a7a8 <__muldf3+0x300>
    a840:	6813883a 	mov	r9,r13
    a844:	003fce06 	br	a780 <__muldf3+0x2d8>
    a848:	143f7c36 	bltu	r2,r16,a63c <__muldf3+0x194>
    a84c:	003fdd06 	br	a7c4 <__muldf3+0x31c>
    a850:	12bf852e 	bgeu	r2,r10,a668 <__muldf3+0x1c0>
    a854:	003fe506 	br	a7ec <__muldf3+0x344>
    a858:	00800084 	movi	r2,2
    a85c:	20bf351e 	bne	r4,r2,a534 <__muldf3+0x8c>
    a860:	01000074 	movhi	r4,1
    a864:	213b1404 	addi	r4,r4,-5040
    a868:	003f3f06 	br	a568 <__muldf3+0xc0>

0000a86c <__divdf3>:
    a86c:	deffed04 	addi	sp,sp,-76
    a870:	dcc01115 	stw	r19,68(sp)
    a874:	dcc00404 	addi	r19,sp,16
    a878:	2011883a 	mov	r8,r4
    a87c:	2813883a 	mov	r9,r5
    a880:	dc000e15 	stw	r16,56(sp)
    a884:	d809883a 	mov	r4,sp
    a888:	980b883a 	mov	r5,r19
    a88c:	dc000904 	addi	r16,sp,36
    a890:	dfc01215 	stw	ra,72(sp)
    a894:	da400115 	stw	r9,4(sp)
    a898:	d9c00315 	stw	r7,12(sp)
    a89c:	da000015 	stw	r8,0(sp)
    a8a0:	d9800215 	stw	r6,8(sp)
    a8a4:	dc801015 	stw	r18,64(sp)
    a8a8:	dc400f15 	stw	r17,60(sp)
    a8ac:	000b4640 	call	b464 <__unpack_d>
    a8b0:	d9000204 	addi	r4,sp,8
    a8b4:	800b883a 	mov	r5,r16
    a8b8:	000b4640 	call	b464 <__unpack_d>
    a8bc:	d9000417 	ldw	r4,16(sp)
    a8c0:	00800044 	movi	r2,1
    a8c4:	11000b2e 	bgeu	r2,r4,a8f4 <__divdf3+0x88>
    a8c8:	d9400917 	ldw	r5,36(sp)
    a8cc:	1140762e 	bgeu	r2,r5,aaa8 <__divdf3+0x23c>
    a8d0:	d8800517 	ldw	r2,20(sp)
    a8d4:	d8c00a17 	ldw	r3,40(sp)
    a8d8:	01800104 	movi	r6,4
    a8dc:	10c4f03a 	xor	r2,r2,r3
    a8e0:	d8800515 	stw	r2,20(sp)
    a8e4:	21800226 	beq	r4,r6,a8f0 <__divdf3+0x84>
    a8e8:	00800084 	movi	r2,2
    a8ec:	2080141e 	bne	r4,r2,a940 <__divdf3+0xd4>
    a8f0:	29000926 	beq	r5,r4,a918 <__divdf3+0xac>
    a8f4:	9809883a 	mov	r4,r19
    a8f8:	000b1500 	call	b150 <__pack_d>
    a8fc:	dfc01217 	ldw	ra,72(sp)
    a900:	dcc01117 	ldw	r19,68(sp)
    a904:	dc801017 	ldw	r18,64(sp)
    a908:	dc400f17 	ldw	r17,60(sp)
    a90c:	dc000e17 	ldw	r16,56(sp)
    a910:	dec01304 	addi	sp,sp,76
    a914:	f800283a 	ret
    a918:	01000074 	movhi	r4,1
    a91c:	213b1404 	addi	r4,r4,-5040
    a920:	000b1500 	call	b150 <__pack_d>
    a924:	dfc01217 	ldw	ra,72(sp)
    a928:	dcc01117 	ldw	r19,68(sp)
    a92c:	dc801017 	ldw	r18,64(sp)
    a930:	dc400f17 	ldw	r17,60(sp)
    a934:	dc000e17 	ldw	r16,56(sp)
    a938:	dec01304 	addi	sp,sp,76
    a93c:	f800283a 	ret
    a940:	29805b26 	beq	r5,r6,aab0 <__divdf3+0x244>
    a944:	28802d26 	beq	r5,r2,a9fc <__divdf3+0x190>
    a948:	d8c00617 	ldw	r3,24(sp)
    a94c:	d8800b17 	ldw	r2,44(sp)
    a950:	d9c00817 	ldw	r7,32(sp)
    a954:	dc400d17 	ldw	r17,52(sp)
    a958:	188bc83a 	sub	r5,r3,r2
    a95c:	d9800717 	ldw	r6,28(sp)
    a960:	dc000c17 	ldw	r16,48(sp)
    a964:	d9400615 	stw	r5,24(sp)
    a968:	3c403836 	bltu	r7,r17,aa4c <__divdf3+0x1e0>
    a96c:	89c03626 	beq	r17,r7,aa48 <__divdf3+0x1dc>
    a970:	0015883a 	mov	r10,zero
    a974:	001d883a 	mov	r14,zero
    a978:	02c40034 	movhi	r11,4096
    a97c:	001f883a 	mov	r15,zero
    a980:	003f883a 	mov	ra,zero
    a984:	04800f44 	movi	r18,61
    a988:	00000f06 	br	a9c8 <__divdf3+0x15c>
    a98c:	601d883a 	mov	r14,r12
    a990:	681f883a 	mov	r15,r13
    a994:	400d883a 	mov	r6,r8
    a998:	100f883a 	mov	r7,r2
    a99c:	3191883a 	add	r8,r6,r6
    a9a0:	5808d07a 	srli	r4,r11,1
    a9a4:	4185803a 	cmpltu	r2,r8,r6
    a9a8:	39d3883a 	add	r9,r7,r7
    a9ac:	28c6b03a 	or	r3,r5,r3
    a9b0:	1245883a 	add	r2,r2,r9
    a9b4:	1815883a 	mov	r10,r3
    a9b8:	2017883a 	mov	r11,r4
    a9bc:	400d883a 	mov	r6,r8
    a9c0:	100f883a 	mov	r7,r2
    a9c4:	fc801726 	beq	ra,r18,aa24 <__divdf3+0x1b8>
    a9c8:	580a97fa 	slli	r5,r11,31
    a9cc:	5006d07a 	srli	r3,r10,1
    a9d0:	ffc00044 	addi	ra,ra,1
    a9d4:	3c7ff136 	bltu	r7,r17,a99c <__divdf3+0x130>
    a9d8:	3411c83a 	sub	r8,r6,r16
    a9dc:	3205803a 	cmpltu	r2,r6,r8
    a9e0:	3c53c83a 	sub	r9,r7,r17
    a9e4:	7298b03a 	or	r12,r14,r10
    a9e8:	7adab03a 	or	r13,r15,r11
    a9ec:	4885c83a 	sub	r2,r9,r2
    a9f0:	89ffe61e 	bne	r17,r7,a98c <__divdf3+0x120>
    a9f4:	343fe936 	bltu	r6,r16,a99c <__divdf3+0x130>
    a9f8:	003fe406 	br	a98c <__divdf3+0x120>
    a9fc:	9809883a 	mov	r4,r19
    aa00:	d9800415 	stw	r6,16(sp)
    aa04:	000b1500 	call	b150 <__pack_d>
    aa08:	dfc01217 	ldw	ra,72(sp)
    aa0c:	dcc01117 	ldw	r19,68(sp)
    aa10:	dc801017 	ldw	r18,64(sp)
    aa14:	dc400f17 	ldw	r17,60(sp)
    aa18:	dc000e17 	ldw	r16,56(sp)
    aa1c:	dec01304 	addi	sp,sp,76
    aa20:	f800283a 	ret
    aa24:	00803fc4 	movi	r2,255
    aa28:	7090703a 	and	r8,r14,r2
    aa2c:	00802004 	movi	r2,128
    aa30:	0007883a 	mov	r3,zero
    aa34:	0013883a 	mov	r9,zero
    aa38:	40800d26 	beq	r8,r2,aa70 <__divdf3+0x204>
    aa3c:	dbc00815 	stw	r15,32(sp)
    aa40:	db800715 	stw	r14,28(sp)
    aa44:	003fab06 	br	a8f4 <__divdf3+0x88>
    aa48:	343fc92e 	bgeu	r6,r16,a970 <__divdf3+0x104>
    aa4c:	3185883a 	add	r2,r6,r6
    aa50:	1189803a 	cmpltu	r4,r2,r6
    aa54:	39c7883a 	add	r3,r7,r7
    aa58:	20c9883a 	add	r4,r4,r3
    aa5c:	297fffc4 	addi	r5,r5,-1
    aa60:	100d883a 	mov	r6,r2
    aa64:	200f883a 	mov	r7,r4
    aa68:	d9400615 	stw	r5,24(sp)
    aa6c:	003fc006 	br	a970 <__divdf3+0x104>
    aa70:	483ff21e 	bne	r9,zero,aa3c <__divdf3+0x1d0>
    aa74:	01004004 	movi	r4,256
    aa78:	7104703a 	and	r2,r14,r4
    aa7c:	10c4b03a 	or	r2,r2,r3
    aa80:	103fee1e 	bne	r2,zero,aa3c <__divdf3+0x1d0>
    aa84:	31c4b03a 	or	r2,r6,r7
    aa88:	103fec26 	beq	r2,zero,aa3c <__divdf3+0x1d0>
    aa8c:	7205883a 	add	r2,r14,r8
    aa90:	1391803a 	cmpltu	r8,r2,r14
    aa94:	43d1883a 	add	r8,r8,r15
    aa98:	013fc004 	movi	r4,-256
    aa9c:	111c703a 	and	r14,r2,r4
    aaa0:	401f883a 	mov	r15,r8
    aaa4:	003fe506 	br	aa3c <__divdf3+0x1d0>
    aaa8:	8009883a 	mov	r4,r16
    aaac:	003f9206 	br	a8f8 <__divdf3+0x8c>
    aab0:	9809883a 	mov	r4,r19
    aab4:	d8000715 	stw	zero,28(sp)
    aab8:	d8000815 	stw	zero,32(sp)
    aabc:	d8000615 	stw	zero,24(sp)
    aac0:	003f8d06 	br	a8f8 <__divdf3+0x8c>

0000aac4 <__eqdf2>:
    aac4:	deffef04 	addi	sp,sp,-68
    aac8:	dc400f15 	stw	r17,60(sp)
    aacc:	dc400404 	addi	r17,sp,16
    aad0:	2005883a 	mov	r2,r4
    aad4:	2807883a 	mov	r3,r5
    aad8:	dc000e15 	stw	r16,56(sp)
    aadc:	d809883a 	mov	r4,sp
    aae0:	880b883a 	mov	r5,r17
    aae4:	dc000904 	addi	r16,sp,36
    aae8:	d8c00115 	stw	r3,4(sp)
    aaec:	d8800015 	stw	r2,0(sp)
    aaf0:	d9800215 	stw	r6,8(sp)
    aaf4:	dfc01015 	stw	ra,64(sp)
    aaf8:	d9c00315 	stw	r7,12(sp)
    aafc:	000b4640 	call	b464 <__unpack_d>
    ab00:	d9000204 	addi	r4,sp,8
    ab04:	800b883a 	mov	r5,r16
    ab08:	000b4640 	call	b464 <__unpack_d>
    ab0c:	d8800417 	ldw	r2,16(sp)
    ab10:	00c00044 	movi	r3,1
    ab14:	180d883a 	mov	r6,r3
    ab18:	1880062e 	bgeu	r3,r2,ab34 <__eqdf2+0x70>
    ab1c:	d8800917 	ldw	r2,36(sp)
    ab20:	8809883a 	mov	r4,r17
    ab24:	800b883a 	mov	r5,r16
    ab28:	1880022e 	bgeu	r3,r2,ab34 <__eqdf2+0x70>
    ab2c:	000b59c0 	call	b59c <__fpcmp_parts_d>
    ab30:	100d883a 	mov	r6,r2
    ab34:	3005883a 	mov	r2,r6
    ab38:	dfc01017 	ldw	ra,64(sp)
    ab3c:	dc400f17 	ldw	r17,60(sp)
    ab40:	dc000e17 	ldw	r16,56(sp)
    ab44:	dec01104 	addi	sp,sp,68
    ab48:	f800283a 	ret

0000ab4c <__nedf2>:
    ab4c:	deffef04 	addi	sp,sp,-68
    ab50:	dc400f15 	stw	r17,60(sp)
    ab54:	dc400404 	addi	r17,sp,16
    ab58:	2005883a 	mov	r2,r4
    ab5c:	2807883a 	mov	r3,r5
    ab60:	dc000e15 	stw	r16,56(sp)
    ab64:	d809883a 	mov	r4,sp
    ab68:	880b883a 	mov	r5,r17
    ab6c:	dc000904 	addi	r16,sp,36
    ab70:	d8c00115 	stw	r3,4(sp)
    ab74:	d8800015 	stw	r2,0(sp)
    ab78:	d9800215 	stw	r6,8(sp)
    ab7c:	dfc01015 	stw	ra,64(sp)
    ab80:	d9c00315 	stw	r7,12(sp)
    ab84:	000b4640 	call	b464 <__unpack_d>
    ab88:	d9000204 	addi	r4,sp,8
    ab8c:	800b883a 	mov	r5,r16
    ab90:	000b4640 	call	b464 <__unpack_d>
    ab94:	d8800417 	ldw	r2,16(sp)
    ab98:	00c00044 	movi	r3,1
    ab9c:	180d883a 	mov	r6,r3
    aba0:	1880062e 	bgeu	r3,r2,abbc <__nedf2+0x70>
    aba4:	d8800917 	ldw	r2,36(sp)
    aba8:	8809883a 	mov	r4,r17
    abac:	800b883a 	mov	r5,r16
    abb0:	1880022e 	bgeu	r3,r2,abbc <__nedf2+0x70>
    abb4:	000b59c0 	call	b59c <__fpcmp_parts_d>
    abb8:	100d883a 	mov	r6,r2
    abbc:	3005883a 	mov	r2,r6
    abc0:	dfc01017 	ldw	ra,64(sp)
    abc4:	dc400f17 	ldw	r17,60(sp)
    abc8:	dc000e17 	ldw	r16,56(sp)
    abcc:	dec01104 	addi	sp,sp,68
    abd0:	f800283a 	ret

0000abd4 <__gtdf2>:
    abd4:	deffef04 	addi	sp,sp,-68
    abd8:	dc400f15 	stw	r17,60(sp)
    abdc:	dc400404 	addi	r17,sp,16
    abe0:	2005883a 	mov	r2,r4
    abe4:	2807883a 	mov	r3,r5
    abe8:	dc000e15 	stw	r16,56(sp)
    abec:	d809883a 	mov	r4,sp
    abf0:	880b883a 	mov	r5,r17
    abf4:	dc000904 	addi	r16,sp,36
    abf8:	d8c00115 	stw	r3,4(sp)
    abfc:	d8800015 	stw	r2,0(sp)
    ac00:	d9800215 	stw	r6,8(sp)
    ac04:	dfc01015 	stw	ra,64(sp)
    ac08:	d9c00315 	stw	r7,12(sp)
    ac0c:	000b4640 	call	b464 <__unpack_d>
    ac10:	d9000204 	addi	r4,sp,8
    ac14:	800b883a 	mov	r5,r16
    ac18:	000b4640 	call	b464 <__unpack_d>
    ac1c:	d8800417 	ldw	r2,16(sp)
    ac20:	00c00044 	movi	r3,1
    ac24:	01bfffc4 	movi	r6,-1
    ac28:	1880062e 	bgeu	r3,r2,ac44 <__gtdf2+0x70>
    ac2c:	d8800917 	ldw	r2,36(sp)
    ac30:	8809883a 	mov	r4,r17
    ac34:	800b883a 	mov	r5,r16
    ac38:	1880022e 	bgeu	r3,r2,ac44 <__gtdf2+0x70>
    ac3c:	000b59c0 	call	b59c <__fpcmp_parts_d>
    ac40:	100d883a 	mov	r6,r2
    ac44:	3005883a 	mov	r2,r6
    ac48:	dfc01017 	ldw	ra,64(sp)
    ac4c:	dc400f17 	ldw	r17,60(sp)
    ac50:	dc000e17 	ldw	r16,56(sp)
    ac54:	dec01104 	addi	sp,sp,68
    ac58:	f800283a 	ret

0000ac5c <__gedf2>:
    ac5c:	deffef04 	addi	sp,sp,-68
    ac60:	dc400f15 	stw	r17,60(sp)
    ac64:	dc400404 	addi	r17,sp,16
    ac68:	2005883a 	mov	r2,r4
    ac6c:	2807883a 	mov	r3,r5
    ac70:	dc000e15 	stw	r16,56(sp)
    ac74:	d809883a 	mov	r4,sp
    ac78:	880b883a 	mov	r5,r17
    ac7c:	dc000904 	addi	r16,sp,36
    ac80:	d8c00115 	stw	r3,4(sp)
    ac84:	d8800015 	stw	r2,0(sp)
    ac88:	d9800215 	stw	r6,8(sp)
    ac8c:	dfc01015 	stw	ra,64(sp)
    ac90:	d9c00315 	stw	r7,12(sp)
    ac94:	000b4640 	call	b464 <__unpack_d>
    ac98:	d9000204 	addi	r4,sp,8
    ac9c:	800b883a 	mov	r5,r16
    aca0:	000b4640 	call	b464 <__unpack_d>
    aca4:	d8800417 	ldw	r2,16(sp)
    aca8:	00c00044 	movi	r3,1
    acac:	01bfffc4 	movi	r6,-1
    acb0:	1880062e 	bgeu	r3,r2,accc <__gedf2+0x70>
    acb4:	d8800917 	ldw	r2,36(sp)
    acb8:	8809883a 	mov	r4,r17
    acbc:	800b883a 	mov	r5,r16
    acc0:	1880022e 	bgeu	r3,r2,accc <__gedf2+0x70>
    acc4:	000b59c0 	call	b59c <__fpcmp_parts_d>
    acc8:	100d883a 	mov	r6,r2
    accc:	3005883a 	mov	r2,r6
    acd0:	dfc01017 	ldw	ra,64(sp)
    acd4:	dc400f17 	ldw	r17,60(sp)
    acd8:	dc000e17 	ldw	r16,56(sp)
    acdc:	dec01104 	addi	sp,sp,68
    ace0:	f800283a 	ret

0000ace4 <__ltdf2>:
    ace4:	deffef04 	addi	sp,sp,-68
    ace8:	dc400f15 	stw	r17,60(sp)
    acec:	dc400404 	addi	r17,sp,16
    acf0:	2005883a 	mov	r2,r4
    acf4:	2807883a 	mov	r3,r5
    acf8:	dc000e15 	stw	r16,56(sp)
    acfc:	d809883a 	mov	r4,sp
    ad00:	880b883a 	mov	r5,r17
    ad04:	dc000904 	addi	r16,sp,36
    ad08:	d8c00115 	stw	r3,4(sp)
    ad0c:	d8800015 	stw	r2,0(sp)
    ad10:	d9800215 	stw	r6,8(sp)
    ad14:	dfc01015 	stw	ra,64(sp)
    ad18:	d9c00315 	stw	r7,12(sp)
    ad1c:	000b4640 	call	b464 <__unpack_d>
    ad20:	d9000204 	addi	r4,sp,8
    ad24:	800b883a 	mov	r5,r16
    ad28:	000b4640 	call	b464 <__unpack_d>
    ad2c:	d8800417 	ldw	r2,16(sp)
    ad30:	00c00044 	movi	r3,1
    ad34:	180d883a 	mov	r6,r3
    ad38:	1880062e 	bgeu	r3,r2,ad54 <__ltdf2+0x70>
    ad3c:	d8800917 	ldw	r2,36(sp)
    ad40:	8809883a 	mov	r4,r17
    ad44:	800b883a 	mov	r5,r16
    ad48:	1880022e 	bgeu	r3,r2,ad54 <__ltdf2+0x70>
    ad4c:	000b59c0 	call	b59c <__fpcmp_parts_d>
    ad50:	100d883a 	mov	r6,r2
    ad54:	3005883a 	mov	r2,r6
    ad58:	dfc01017 	ldw	ra,64(sp)
    ad5c:	dc400f17 	ldw	r17,60(sp)
    ad60:	dc000e17 	ldw	r16,56(sp)
    ad64:	dec01104 	addi	sp,sp,68
    ad68:	f800283a 	ret

0000ad6c <__floatsidf>:
    ad6c:	2006d7fa 	srli	r3,r4,31
    ad70:	defff604 	addi	sp,sp,-40
    ad74:	008000c4 	movi	r2,3
    ad78:	dfc00915 	stw	ra,36(sp)
    ad7c:	dcc00815 	stw	r19,32(sp)
    ad80:	dc800715 	stw	r18,28(sp)
    ad84:	dc400615 	stw	r17,24(sp)
    ad88:	dc000515 	stw	r16,20(sp)
    ad8c:	d8800015 	stw	r2,0(sp)
    ad90:	d8c00115 	stw	r3,4(sp)
    ad94:	20000f1e 	bne	r4,zero,add4 <__floatsidf+0x68>
    ad98:	00800084 	movi	r2,2
    ad9c:	d8800015 	stw	r2,0(sp)
    ada0:	d809883a 	mov	r4,sp
    ada4:	000b1500 	call	b150 <__pack_d>
    ada8:	1009883a 	mov	r4,r2
    adac:	180b883a 	mov	r5,r3
    adb0:	2005883a 	mov	r2,r4
    adb4:	2807883a 	mov	r3,r5
    adb8:	dfc00917 	ldw	ra,36(sp)
    adbc:	dcc00817 	ldw	r19,32(sp)
    adc0:	dc800717 	ldw	r18,28(sp)
    adc4:	dc400617 	ldw	r17,24(sp)
    adc8:	dc000517 	ldw	r16,20(sp)
    adcc:	dec00a04 	addi	sp,sp,40
    add0:	f800283a 	ret
    add4:	00800f04 	movi	r2,60
    add8:	1807003a 	cmpeq	r3,r3,zero
    addc:	d8800215 	stw	r2,8(sp)
    ade0:	18001126 	beq	r3,zero,ae28 <__floatsidf+0xbc>
    ade4:	0027883a 	mov	r19,zero
    ade8:	2025883a 	mov	r18,r4
    adec:	d9000315 	stw	r4,12(sp)
    adf0:	dcc00415 	stw	r19,16(sp)
    adf4:	000b0d00 	call	b0d0 <__clzsi2>
    adf8:	11000744 	addi	r4,r2,29
    adfc:	013fe80e 	bge	zero,r4,ada0 <__floatsidf+0x34>
    ae00:	10bfff44 	addi	r2,r2,-3
    ae04:	10000c16 	blt	r2,zero,ae38 <__floatsidf+0xcc>
    ae08:	90a2983a 	sll	r17,r18,r2
    ae0c:	0021883a 	mov	r16,zero
    ae10:	d8800217 	ldw	r2,8(sp)
    ae14:	dc400415 	stw	r17,16(sp)
    ae18:	dc000315 	stw	r16,12(sp)
    ae1c:	1105c83a 	sub	r2,r2,r4
    ae20:	d8800215 	stw	r2,8(sp)
    ae24:	003fde06 	br	ada0 <__floatsidf+0x34>
    ae28:	00a00034 	movhi	r2,32768
    ae2c:	20800a26 	beq	r4,r2,ae58 <__floatsidf+0xec>
    ae30:	0109c83a 	sub	r4,zero,r4
    ae34:	003feb06 	br	ade4 <__floatsidf+0x78>
    ae38:	9006d07a 	srli	r3,r18,1
    ae3c:	008007c4 	movi	r2,31
    ae40:	1105c83a 	sub	r2,r2,r4
    ae44:	1886d83a 	srl	r3,r3,r2
    ae48:	9922983a 	sll	r17,r19,r4
    ae4c:	9120983a 	sll	r16,r18,r4
    ae50:	1c62b03a 	or	r17,r3,r17
    ae54:	003fee06 	br	ae10 <__floatsidf+0xa4>
    ae58:	0009883a 	mov	r4,zero
    ae5c:	01707834 	movhi	r5,49632
    ae60:	003fd306 	br	adb0 <__floatsidf+0x44>

0000ae64 <__fixdfsi>:
    ae64:	defff804 	addi	sp,sp,-32
    ae68:	2005883a 	mov	r2,r4
    ae6c:	2807883a 	mov	r3,r5
    ae70:	d809883a 	mov	r4,sp
    ae74:	d9400204 	addi	r5,sp,8
    ae78:	d8c00115 	stw	r3,4(sp)
    ae7c:	d8800015 	stw	r2,0(sp)
    ae80:	dfc00715 	stw	ra,28(sp)
    ae84:	000b4640 	call	b464 <__unpack_d>
    ae88:	d8c00217 	ldw	r3,8(sp)
    ae8c:	00800084 	movi	r2,2
    ae90:	1880051e 	bne	r3,r2,aea8 <__fixdfsi+0x44>
    ae94:	0007883a 	mov	r3,zero
    ae98:	1805883a 	mov	r2,r3
    ae9c:	dfc00717 	ldw	ra,28(sp)
    aea0:	dec00804 	addi	sp,sp,32
    aea4:	f800283a 	ret
    aea8:	00800044 	movi	r2,1
    aeac:	10fff92e 	bgeu	r2,r3,ae94 <__fixdfsi+0x30>
    aeb0:	00800104 	movi	r2,4
    aeb4:	18800426 	beq	r3,r2,aec8 <__fixdfsi+0x64>
    aeb8:	d8c00417 	ldw	r3,16(sp)
    aebc:	183ff516 	blt	r3,zero,ae94 <__fixdfsi+0x30>
    aec0:	00800784 	movi	r2,30
    aec4:	10c0080e 	bge	r2,r3,aee8 <__fixdfsi+0x84>
    aec8:	d8800317 	ldw	r2,12(sp)
    aecc:	1000121e 	bne	r2,zero,af18 <__fixdfsi+0xb4>
    aed0:	00e00034 	movhi	r3,32768
    aed4:	18ffffc4 	addi	r3,r3,-1
    aed8:	1805883a 	mov	r2,r3
    aedc:	dfc00717 	ldw	ra,28(sp)
    aee0:	dec00804 	addi	sp,sp,32
    aee4:	f800283a 	ret
    aee8:	00800f04 	movi	r2,60
    aeec:	10d1c83a 	sub	r8,r2,r3
    aef0:	40bff804 	addi	r2,r8,-32
    aef4:	d9800517 	ldw	r6,20(sp)
    aef8:	d9c00617 	ldw	r7,24(sp)
    aefc:	10000816 	blt	r2,zero,af20 <__fixdfsi+0xbc>
    af00:	3888d83a 	srl	r4,r7,r2
    af04:	d8800317 	ldw	r2,12(sp)
    af08:	2007883a 	mov	r3,r4
    af0c:	103fe226 	beq	r2,zero,ae98 <__fixdfsi+0x34>
    af10:	0107c83a 	sub	r3,zero,r4
    af14:	003fe006 	br	ae98 <__fixdfsi+0x34>
    af18:	00e00034 	movhi	r3,32768
    af1c:	003fde06 	br	ae98 <__fixdfsi+0x34>
    af20:	39c7883a 	add	r3,r7,r7
    af24:	008007c4 	movi	r2,31
    af28:	1205c83a 	sub	r2,r2,r8
    af2c:	1886983a 	sll	r3,r3,r2
    af30:	3208d83a 	srl	r4,r6,r8
    af34:	1908b03a 	or	r4,r3,r4
    af38:	003ff206 	br	af04 <__fixdfsi+0xa0>

0000af3c <__floatunsidf>:
    af3c:	defff204 	addi	sp,sp,-56
    af40:	dfc00d15 	stw	ra,52(sp)
    af44:	ddc00c15 	stw	r23,48(sp)
    af48:	dd800b15 	stw	r22,44(sp)
    af4c:	dd400a15 	stw	r21,40(sp)
    af50:	dd000915 	stw	r20,36(sp)
    af54:	dcc00815 	stw	r19,32(sp)
    af58:	dc800715 	stw	r18,28(sp)
    af5c:	dc400615 	stw	r17,24(sp)
    af60:	dc000515 	stw	r16,20(sp)
    af64:	d8000115 	stw	zero,4(sp)
    af68:	20000f1e 	bne	r4,zero,afa8 <__floatunsidf+0x6c>
    af6c:	00800084 	movi	r2,2
    af70:	d8800015 	stw	r2,0(sp)
    af74:	d809883a 	mov	r4,sp
    af78:	000b1500 	call	b150 <__pack_d>
    af7c:	dfc00d17 	ldw	ra,52(sp)
    af80:	ddc00c17 	ldw	r23,48(sp)
    af84:	dd800b17 	ldw	r22,44(sp)
    af88:	dd400a17 	ldw	r21,40(sp)
    af8c:	dd000917 	ldw	r20,36(sp)
    af90:	dcc00817 	ldw	r19,32(sp)
    af94:	dc800717 	ldw	r18,28(sp)
    af98:	dc400617 	ldw	r17,24(sp)
    af9c:	dc000517 	ldw	r16,20(sp)
    afa0:	dec00e04 	addi	sp,sp,56
    afa4:	f800283a 	ret
    afa8:	008000c4 	movi	r2,3
    afac:	00c00f04 	movi	r3,60
    afb0:	002f883a 	mov	r23,zero
    afb4:	202d883a 	mov	r22,r4
    afb8:	d8800015 	stw	r2,0(sp)
    afbc:	d8c00215 	stw	r3,8(sp)
    afc0:	d9000315 	stw	r4,12(sp)
    afc4:	ddc00415 	stw	r23,16(sp)
    afc8:	000b0d00 	call	b0d0 <__clzsi2>
    afcc:	12400744 	addi	r9,r2,29
    afd0:	48000b16 	blt	r9,zero,b000 <__floatunsidf+0xc4>
    afd4:	483fe726 	beq	r9,zero,af74 <__floatunsidf+0x38>
    afd8:	10bfff44 	addi	r2,r2,-3
    afdc:	10002e16 	blt	r2,zero,b098 <__floatunsidf+0x15c>
    afe0:	b0a2983a 	sll	r17,r22,r2
    afe4:	0021883a 	mov	r16,zero
    afe8:	d8800217 	ldw	r2,8(sp)
    afec:	dc400415 	stw	r17,16(sp)
    aff0:	dc000315 	stw	r16,12(sp)
    aff4:	1245c83a 	sub	r2,r2,r9
    aff8:	d8800215 	stw	r2,8(sp)
    affc:	003fdd06 	br	af74 <__floatunsidf+0x38>
    b000:	0255c83a 	sub	r10,zero,r9
    b004:	51bff804 	addi	r6,r10,-32
    b008:	30001b16 	blt	r6,zero,b078 <__floatunsidf+0x13c>
    b00c:	b9a8d83a 	srl	r20,r23,r6
    b010:	002b883a 	mov	r21,zero
    b014:	000f883a 	mov	r7,zero
    b018:	01000044 	movi	r4,1
    b01c:	0011883a 	mov	r8,zero
    b020:	30002516 	blt	r6,zero,b0b8 <__floatunsidf+0x17c>
    b024:	21a6983a 	sll	r19,r4,r6
    b028:	0025883a 	mov	r18,zero
    b02c:	00bfffc4 	movi	r2,-1
    b030:	9089883a 	add	r4,r18,r2
    b034:	988b883a 	add	r5,r19,r2
    b038:	248d803a 	cmpltu	r6,r4,r18
    b03c:	314b883a 	add	r5,r6,r5
    b040:	b104703a 	and	r2,r22,r4
    b044:	b946703a 	and	r3,r23,r5
    b048:	10c4b03a 	or	r2,r2,r3
    b04c:	10000226 	beq	r2,zero,b058 <__floatunsidf+0x11c>
    b050:	01c00044 	movi	r7,1
    b054:	0011883a 	mov	r8,zero
    b058:	d9000217 	ldw	r4,8(sp)
    b05c:	a1c4b03a 	or	r2,r20,r7
    b060:	aa06b03a 	or	r3,r21,r8
    b064:	2249c83a 	sub	r4,r4,r9
    b068:	d8c00415 	stw	r3,16(sp)
    b06c:	d9000215 	stw	r4,8(sp)
    b070:	d8800315 	stw	r2,12(sp)
    b074:	003fbf06 	br	af74 <__floatunsidf+0x38>
    b078:	bdc7883a 	add	r3,r23,r23
    b07c:	008007c4 	movi	r2,31
    b080:	1285c83a 	sub	r2,r2,r10
    b084:	1886983a 	sll	r3,r3,r2
    b088:	b2a8d83a 	srl	r20,r22,r10
    b08c:	baaad83a 	srl	r21,r23,r10
    b090:	1d28b03a 	or	r20,r3,r20
    b094:	003fdf06 	br	b014 <__floatunsidf+0xd8>
    b098:	b006d07a 	srli	r3,r22,1
    b09c:	008007c4 	movi	r2,31
    b0a0:	1245c83a 	sub	r2,r2,r9
    b0a4:	1886d83a 	srl	r3,r3,r2
    b0a8:	ba62983a 	sll	r17,r23,r9
    b0ac:	b260983a 	sll	r16,r22,r9
    b0b0:	1c62b03a 	or	r17,r3,r17
    b0b4:	003fcc06 	br	afe8 <__floatunsidf+0xac>
    b0b8:	2006d07a 	srli	r3,r4,1
    b0bc:	008007c4 	movi	r2,31
    b0c0:	1285c83a 	sub	r2,r2,r10
    b0c4:	18a6d83a 	srl	r19,r3,r2
    b0c8:	22a4983a 	sll	r18,r4,r10
    b0cc:	003fd706 	br	b02c <__floatunsidf+0xf0>

0000b0d0 <__clzsi2>:
    b0d0:	00bfffd4 	movui	r2,65535
    b0d4:	11000e36 	bltu	r2,r4,b110 <__clzsi2+0x40>
    b0d8:	00803fc4 	movi	r2,255
    b0dc:	01400204 	movi	r5,8
    b0e0:	0007883a 	mov	r3,zero
    b0e4:	11001036 	bltu	r2,r4,b128 <__clzsi2+0x58>
    b0e8:	000b883a 	mov	r5,zero
    b0ec:	20c6d83a 	srl	r3,r4,r3
    b0f0:	00800074 	movhi	r2,1
    b0f4:	10ba5604 	addi	r2,r2,-5800
    b0f8:	1887883a 	add	r3,r3,r2
    b0fc:	18800003 	ldbu	r2,0(r3)
    b100:	00c00804 	movi	r3,32
    b104:	2885883a 	add	r2,r5,r2
    b108:	1885c83a 	sub	r2,r3,r2
    b10c:	f800283a 	ret
    b110:	01400404 	movi	r5,16
    b114:	00804034 	movhi	r2,256
    b118:	10bfffc4 	addi	r2,r2,-1
    b11c:	2807883a 	mov	r3,r5
    b120:	113ff22e 	bgeu	r2,r4,b0ec <__clzsi2+0x1c>
    b124:	01400604 	movi	r5,24
    b128:	2807883a 	mov	r3,r5
    b12c:	20c6d83a 	srl	r3,r4,r3
    b130:	00800074 	movhi	r2,1
    b134:	10ba5604 	addi	r2,r2,-5800
    b138:	1887883a 	add	r3,r3,r2
    b13c:	18800003 	ldbu	r2,0(r3)
    b140:	00c00804 	movi	r3,32
    b144:	2885883a 	add	r2,r5,r2
    b148:	1885c83a 	sub	r2,r3,r2
    b14c:	f800283a 	ret

0000b150 <__pack_d>:
    b150:	20c00017 	ldw	r3,0(r4)
    b154:	defffd04 	addi	sp,sp,-12
    b158:	dc000015 	stw	r16,0(sp)
    b15c:	dc800215 	stw	r18,8(sp)
    b160:	dc400115 	stw	r17,4(sp)
    b164:	00800044 	movi	r2,1
    b168:	22000317 	ldw	r8,12(r4)
    b16c:	001f883a 	mov	r15,zero
    b170:	22400417 	ldw	r9,16(r4)
    b174:	24000117 	ldw	r16,4(r4)
    b178:	10c0552e 	bgeu	r2,r3,b2d0 <__pack_d+0x180>
    b17c:	00800104 	movi	r2,4
    b180:	18804f26 	beq	r3,r2,b2c0 <__pack_d+0x170>
    b184:	00800084 	movi	r2,2
    b188:	18800226 	beq	r3,r2,b194 <__pack_d+0x44>
    b18c:	4244b03a 	or	r2,r8,r9
    b190:	10001a1e 	bne	r2,zero,b1fc <__pack_d+0xac>
    b194:	000d883a 	mov	r6,zero
    b198:	000f883a 	mov	r7,zero
    b19c:	0011883a 	mov	r8,zero
    b1a0:	00800434 	movhi	r2,16
    b1a4:	10bfffc4 	addi	r2,r2,-1
    b1a8:	301d883a 	mov	r14,r6
    b1ac:	3884703a 	and	r2,r7,r2
    b1b0:	400a953a 	slli	r5,r8,20
    b1b4:	79bffc2c 	andhi	r6,r15,65520
    b1b8:	308cb03a 	or	r6,r6,r2
    b1bc:	00e00434 	movhi	r3,32784
    b1c0:	18ffffc4 	addi	r3,r3,-1
    b1c4:	800497fa 	slli	r2,r16,31
    b1c8:	30c6703a 	and	r3,r6,r3
    b1cc:	1946b03a 	or	r3,r3,r5
    b1d0:	01600034 	movhi	r5,32768
    b1d4:	297fffc4 	addi	r5,r5,-1
    b1d8:	194a703a 	and	r5,r3,r5
    b1dc:	288ab03a 	or	r5,r5,r2
    b1e0:	2807883a 	mov	r3,r5
    b1e4:	7005883a 	mov	r2,r14
    b1e8:	dc800217 	ldw	r18,8(sp)
    b1ec:	dc400117 	ldw	r17,4(sp)
    b1f0:	dc000017 	ldw	r16,0(sp)
    b1f4:	dec00304 	addi	sp,sp,12
    b1f8:	f800283a 	ret
    b1fc:	21000217 	ldw	r4,8(r4)
    b200:	00bf0084 	movi	r2,-1022
    b204:	20803f16 	blt	r4,r2,b304 <__pack_d+0x1b4>
    b208:	0080ffc4 	movi	r2,1023
    b20c:	11002c16 	blt	r2,r4,b2c0 <__pack_d+0x170>
    b210:	00803fc4 	movi	r2,255
    b214:	408c703a 	and	r6,r8,r2
    b218:	00802004 	movi	r2,128
    b21c:	0007883a 	mov	r3,zero
    b220:	000f883a 	mov	r7,zero
    b224:	2280ffc4 	addi	r10,r4,1023
    b228:	30801e26 	beq	r6,r2,b2a4 <__pack_d+0x154>
    b22c:	00801fc4 	movi	r2,127
    b230:	4089883a 	add	r4,r8,r2
    b234:	220d803a 	cmpltu	r6,r4,r8
    b238:	324d883a 	add	r6,r6,r9
    b23c:	2011883a 	mov	r8,r4
    b240:	3013883a 	mov	r9,r6
    b244:	00880034 	movhi	r2,8192
    b248:	10bfffc4 	addi	r2,r2,-1
    b24c:	12400d36 	bltu	r2,r9,b284 <__pack_d+0x134>
    b250:	4804963a 	slli	r2,r9,24
    b254:	400cd23a 	srli	r6,r8,8
    b258:	480ed23a 	srli	r7,r9,8
    b25c:	013fffc4 	movi	r4,-1
    b260:	118cb03a 	or	r6,r2,r6
    b264:	01400434 	movhi	r5,16
    b268:	297fffc4 	addi	r5,r5,-1
    b26c:	3104703a 	and	r2,r6,r4
    b270:	3946703a 	and	r3,r7,r5
    b274:	5201ffcc 	andi	r8,r10,2047
    b278:	100d883a 	mov	r6,r2
    b27c:	180f883a 	mov	r7,r3
    b280:	003fc706 	br	b1a0 <__pack_d+0x50>
    b284:	480897fa 	slli	r4,r9,31
    b288:	4004d07a 	srli	r2,r8,1
    b28c:	4806d07a 	srli	r3,r9,1
    b290:	52800044 	addi	r10,r10,1
    b294:	2084b03a 	or	r2,r4,r2
    b298:	1011883a 	mov	r8,r2
    b29c:	1813883a 	mov	r9,r3
    b2a0:	003feb06 	br	b250 <__pack_d+0x100>
    b2a4:	383fe11e 	bne	r7,zero,b22c <__pack_d+0xdc>
    b2a8:	01004004 	movi	r4,256
    b2ac:	4104703a 	and	r2,r8,r4
    b2b0:	10c4b03a 	or	r2,r2,r3
    b2b4:	103fe326 	beq	r2,zero,b244 <__pack_d+0xf4>
    b2b8:	3005883a 	mov	r2,r6
    b2bc:	003fdc06 	br	b230 <__pack_d+0xe0>
    b2c0:	000d883a 	mov	r6,zero
    b2c4:	000f883a 	mov	r7,zero
    b2c8:	0201ffc4 	movi	r8,2047
    b2cc:	003fb406 	br	b1a0 <__pack_d+0x50>
    b2d0:	0005883a 	mov	r2,zero
    b2d4:	00c00234 	movhi	r3,8
    b2d8:	408cb03a 	or	r6,r8,r2
    b2dc:	48ceb03a 	or	r7,r9,r3
    b2e0:	013fffc4 	movi	r4,-1
    b2e4:	01400434 	movhi	r5,16
    b2e8:	297fffc4 	addi	r5,r5,-1
    b2ec:	3104703a 	and	r2,r6,r4
    b2f0:	3946703a 	and	r3,r7,r5
    b2f4:	100d883a 	mov	r6,r2
    b2f8:	180f883a 	mov	r7,r3
    b2fc:	0201ffc4 	movi	r8,2047
    b300:	003fa706 	br	b1a0 <__pack_d+0x50>
    b304:	1109c83a 	sub	r4,r2,r4
    b308:	00800e04 	movi	r2,56
    b30c:	11004316 	blt	r2,r4,b41c <__pack_d+0x2cc>
    b310:	21fff804 	addi	r7,r4,-32
    b314:	38004516 	blt	r7,zero,b42c <__pack_d+0x2dc>
    b318:	49d8d83a 	srl	r12,r9,r7
    b31c:	001b883a 	mov	r13,zero
    b320:	0023883a 	mov	r17,zero
    b324:	01400044 	movi	r5,1
    b328:	0025883a 	mov	r18,zero
    b32c:	38004716 	blt	r7,zero,b44c <__pack_d+0x2fc>
    b330:	29d6983a 	sll	r11,r5,r7
    b334:	0015883a 	mov	r10,zero
    b338:	00bfffc4 	movi	r2,-1
    b33c:	5089883a 	add	r4,r10,r2
    b340:	588b883a 	add	r5,r11,r2
    b344:	228d803a 	cmpltu	r6,r4,r10
    b348:	314b883a 	add	r5,r6,r5
    b34c:	4104703a 	and	r2,r8,r4
    b350:	4946703a 	and	r3,r9,r5
    b354:	10c4b03a 	or	r2,r2,r3
    b358:	10000226 	beq	r2,zero,b364 <__pack_d+0x214>
    b35c:	04400044 	movi	r17,1
    b360:	0025883a 	mov	r18,zero
    b364:	00803fc4 	movi	r2,255
    b368:	644eb03a 	or	r7,r12,r17
    b36c:	3892703a 	and	r9,r7,r2
    b370:	00802004 	movi	r2,128
    b374:	6c90b03a 	or	r8,r13,r18
    b378:	0015883a 	mov	r10,zero
    b37c:	48801626 	beq	r9,r2,b3d8 <__pack_d+0x288>
    b380:	01001fc4 	movi	r4,127
    b384:	3905883a 	add	r2,r7,r4
    b388:	11cd803a 	cmpltu	r6,r2,r7
    b38c:	320d883a 	add	r6,r6,r8
    b390:	100f883a 	mov	r7,r2
    b394:	00840034 	movhi	r2,4096
    b398:	10bfffc4 	addi	r2,r2,-1
    b39c:	3011883a 	mov	r8,r6
    b3a0:	0007883a 	mov	r3,zero
    b3a4:	11801b36 	bltu	r2,r6,b414 <__pack_d+0x2c4>
    b3a8:	4004963a 	slli	r2,r8,24
    b3ac:	3808d23a 	srli	r4,r7,8
    b3b0:	400ad23a 	srli	r5,r8,8
    b3b4:	1813883a 	mov	r9,r3
    b3b8:	1108b03a 	or	r4,r2,r4
    b3bc:	00bfffc4 	movi	r2,-1
    b3c0:	00c00434 	movhi	r3,16
    b3c4:	18ffffc4 	addi	r3,r3,-1
    b3c8:	208c703a 	and	r6,r4,r2
    b3cc:	28ce703a 	and	r7,r5,r3
    b3d0:	4a01ffcc 	andi	r8,r9,2047
    b3d4:	003f7206 	br	b1a0 <__pack_d+0x50>
    b3d8:	503fe91e 	bne	r10,zero,b380 <__pack_d+0x230>
    b3dc:	01004004 	movi	r4,256
    b3e0:	3904703a 	and	r2,r7,r4
    b3e4:	0007883a 	mov	r3,zero
    b3e8:	10c4b03a 	or	r2,r2,r3
    b3ec:	10000626 	beq	r2,zero,b408 <__pack_d+0x2b8>
    b3f0:	3a45883a 	add	r2,r7,r9
    b3f4:	11cd803a 	cmpltu	r6,r2,r7
    b3f8:	320d883a 	add	r6,r6,r8
    b3fc:	100f883a 	mov	r7,r2
    b400:	3011883a 	mov	r8,r6
    b404:	0007883a 	mov	r3,zero
    b408:	00840034 	movhi	r2,4096
    b40c:	10bfffc4 	addi	r2,r2,-1
    b410:	123fe52e 	bgeu	r2,r8,b3a8 <__pack_d+0x258>
    b414:	00c00044 	movi	r3,1
    b418:	003fe306 	br	b3a8 <__pack_d+0x258>
    b41c:	0009883a 	mov	r4,zero
    b420:	0013883a 	mov	r9,zero
    b424:	000b883a 	mov	r5,zero
    b428:	003fe406 	br	b3bc <__pack_d+0x26c>
    b42c:	4a47883a 	add	r3,r9,r9
    b430:	008007c4 	movi	r2,31
    b434:	1105c83a 	sub	r2,r2,r4
    b438:	1886983a 	sll	r3,r3,r2
    b43c:	4118d83a 	srl	r12,r8,r4
    b440:	491ad83a 	srl	r13,r9,r4
    b444:	1b18b03a 	or	r12,r3,r12
    b448:	003fb506 	br	b320 <__pack_d+0x1d0>
    b44c:	2806d07a 	srli	r3,r5,1
    b450:	008007c4 	movi	r2,31
    b454:	1105c83a 	sub	r2,r2,r4
    b458:	1896d83a 	srl	r11,r3,r2
    b45c:	2914983a 	sll	r10,r5,r4
    b460:	003fb506 	br	b338 <__pack_d+0x1e8>

0000b464 <__unpack_d>:
    b464:	20c00117 	ldw	r3,4(r4)
    b468:	22400017 	ldw	r9,0(r4)
    b46c:	00800434 	movhi	r2,16
    b470:	10bfffc4 	addi	r2,r2,-1
    b474:	1808d53a 	srli	r4,r3,20
    b478:	180cd7fa 	srli	r6,r3,31
    b47c:	1894703a 	and	r10,r3,r2
    b480:	2201ffcc 	andi	r8,r4,2047
    b484:	281b883a 	mov	r13,r5
    b488:	4817883a 	mov	r11,r9
    b48c:	29800115 	stw	r6,4(r5)
    b490:	5019883a 	mov	r12,r10
    b494:	40001e1e 	bne	r8,zero,b510 <__unpack_d+0xac>
    b498:	4a84b03a 	or	r2,r9,r10
    b49c:	10001926 	beq	r2,zero,b504 <__unpack_d+0xa0>
    b4a0:	4804d63a 	srli	r2,r9,24
    b4a4:	500c923a 	slli	r6,r10,8
    b4a8:	013f0084 	movi	r4,-1022
    b4ac:	00c40034 	movhi	r3,4096
    b4b0:	18ffffc4 	addi	r3,r3,-1
    b4b4:	118cb03a 	or	r6,r2,r6
    b4b8:	008000c4 	movi	r2,3
    b4bc:	480a923a 	slli	r5,r9,8
    b4c0:	68800015 	stw	r2,0(r13)
    b4c4:	69000215 	stw	r4,8(r13)
    b4c8:	19800b36 	bltu	r3,r6,b4f8 <__unpack_d+0x94>
    b4cc:	200f883a 	mov	r7,r4
    b4d0:	1811883a 	mov	r8,r3
    b4d4:	2945883a 	add	r2,r5,r5
    b4d8:	1149803a 	cmpltu	r4,r2,r5
    b4dc:	3187883a 	add	r3,r6,r6
    b4e0:	20c9883a 	add	r4,r4,r3
    b4e4:	100b883a 	mov	r5,r2
    b4e8:	200d883a 	mov	r6,r4
    b4ec:	39ffffc4 	addi	r7,r7,-1
    b4f0:	413ff82e 	bgeu	r8,r4,b4d4 <__unpack_d+0x70>
    b4f4:	69c00215 	stw	r7,8(r13)
    b4f8:	69800415 	stw	r6,16(r13)
    b4fc:	69400315 	stw	r5,12(r13)
    b500:	f800283a 	ret
    b504:	00800084 	movi	r2,2
    b508:	28800015 	stw	r2,0(r5)
    b50c:	f800283a 	ret
    b510:	0081ffc4 	movi	r2,2047
    b514:	40800f26 	beq	r8,r2,b554 <__unpack_d+0xf0>
    b518:	480cd63a 	srli	r6,r9,24
    b51c:	5006923a 	slli	r3,r10,8
    b520:	4804923a 	slli	r2,r9,8
    b524:	0009883a 	mov	r4,zero
    b528:	30c6b03a 	or	r3,r6,r3
    b52c:	01440034 	movhi	r5,4096
    b530:	110cb03a 	or	r6,r2,r4
    b534:	423f0044 	addi	r8,r8,-1023
    b538:	194eb03a 	or	r7,r3,r5
    b53c:	008000c4 	movi	r2,3
    b540:	69c00415 	stw	r7,16(r13)
    b544:	6a000215 	stw	r8,8(r13)
    b548:	68800015 	stw	r2,0(r13)
    b54c:	69800315 	stw	r6,12(r13)
    b550:	f800283a 	ret
    b554:	4a84b03a 	or	r2,r9,r10
    b558:	1000031e 	bne	r2,zero,b568 <__unpack_d+0x104>
    b55c:	00800104 	movi	r2,4
    b560:	28800015 	stw	r2,0(r5)
    b564:	f800283a 	ret
    b568:	0009883a 	mov	r4,zero
    b56c:	01400234 	movhi	r5,8
    b570:	4904703a 	and	r2,r9,r4
    b574:	5146703a 	and	r3,r10,r5
    b578:	10c4b03a 	or	r2,r2,r3
    b57c:	10000526 	beq	r2,zero,b594 <__unpack_d+0x130>
    b580:	00800044 	movi	r2,1
    b584:	68800015 	stw	r2,0(r13)
    b588:	6b000415 	stw	r12,16(r13)
    b58c:	6ac00315 	stw	r11,12(r13)
    b590:	f800283a 	ret
    b594:	68000015 	stw	zero,0(r13)
    b598:	003ffb06 	br	b588 <__unpack_d+0x124>

0000b59c <__fpcmp_parts_d>:
    b59c:	21800017 	ldw	r6,0(r4)
    b5a0:	00c00044 	movi	r3,1
    b5a4:	19800a2e 	bgeu	r3,r6,b5d0 <__fpcmp_parts_d+0x34>
    b5a8:	28800017 	ldw	r2,0(r5)
    b5ac:	1880082e 	bgeu	r3,r2,b5d0 <__fpcmp_parts_d+0x34>
    b5b0:	00c00104 	movi	r3,4
    b5b4:	30c02626 	beq	r6,r3,b650 <__fpcmp_parts_d+0xb4>
    b5b8:	10c02226 	beq	r2,r3,b644 <__fpcmp_parts_d+0xa8>
    b5bc:	00c00084 	movi	r3,2
    b5c0:	30c00526 	beq	r6,r3,b5d8 <__fpcmp_parts_d+0x3c>
    b5c4:	10c0071e 	bne	r2,r3,b5e4 <__fpcmp_parts_d+0x48>
    b5c8:	20800117 	ldw	r2,4(r4)
    b5cc:	1000091e 	bne	r2,zero,b5f4 <__fpcmp_parts_d+0x58>
    b5d0:	00800044 	movi	r2,1
    b5d4:	f800283a 	ret
    b5d8:	10c01a1e 	bne	r2,r3,b644 <__fpcmp_parts_d+0xa8>
    b5dc:	0005883a 	mov	r2,zero
    b5e0:	f800283a 	ret
    b5e4:	22000117 	ldw	r8,4(r4)
    b5e8:	28800117 	ldw	r2,4(r5)
    b5ec:	40800326 	beq	r8,r2,b5fc <__fpcmp_parts_d+0x60>
    b5f0:	403ff726 	beq	r8,zero,b5d0 <__fpcmp_parts_d+0x34>
    b5f4:	00bfffc4 	movi	r2,-1
    b5f8:	f800283a 	ret
    b5fc:	20c00217 	ldw	r3,8(r4)
    b600:	28800217 	ldw	r2,8(r5)
    b604:	10fffa16 	blt	r2,r3,b5f0 <__fpcmp_parts_d+0x54>
    b608:	18800916 	blt	r3,r2,b630 <__fpcmp_parts_d+0x94>
    b60c:	21c00417 	ldw	r7,16(r4)
    b610:	28c00417 	ldw	r3,16(r5)
    b614:	21800317 	ldw	r6,12(r4)
    b618:	28800317 	ldw	r2,12(r5)
    b61c:	19fff436 	bltu	r3,r7,b5f0 <__fpcmp_parts_d+0x54>
    b620:	38c00526 	beq	r7,r3,b638 <__fpcmp_parts_d+0x9c>
    b624:	38c00236 	bltu	r7,r3,b630 <__fpcmp_parts_d+0x94>
    b628:	19ffec1e 	bne	r3,r7,b5dc <__fpcmp_parts_d+0x40>
    b62c:	30bfeb2e 	bgeu	r6,r2,b5dc <__fpcmp_parts_d+0x40>
    b630:	403fe71e 	bne	r8,zero,b5d0 <__fpcmp_parts_d+0x34>
    b634:	003fef06 	br	b5f4 <__fpcmp_parts_d+0x58>
    b638:	11bffa2e 	bgeu	r2,r6,b624 <__fpcmp_parts_d+0x88>
    b63c:	403fe426 	beq	r8,zero,b5d0 <__fpcmp_parts_d+0x34>
    b640:	003fec06 	br	b5f4 <__fpcmp_parts_d+0x58>
    b644:	28800117 	ldw	r2,4(r5)
    b648:	103fe11e 	bne	r2,zero,b5d0 <__fpcmp_parts_d+0x34>
    b64c:	003fe906 	br	b5f4 <__fpcmp_parts_d+0x58>
    b650:	11bfdd1e 	bne	r2,r6,b5c8 <__fpcmp_parts_d+0x2c>
    b654:	28c00117 	ldw	r3,4(r5)
    b658:	20800117 	ldw	r2,4(r4)
    b65c:	1885c83a 	sub	r2,r3,r2
    b660:	f800283a 	ret

0000b664 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b664:	defffd04 	addi	sp,sp,-12
    b668:	dfc00215 	stw	ra,8(sp)
    b66c:	dc400115 	stw	r17,4(sp)
    b670:	dc000015 	stw	r16,0(sp)
    b674:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b678:	20001c16 	blt	r4,zero,b6ec <close+0x88>
    b67c:	20c00324 	muli	r3,r4,12
    b680:	00800074 	movhi	r2,1
    b684:	10bd5f04 	addi	r2,r2,-2692
    b688:	1889883a 	add	r4,r3,r2

  if (fd)
    b68c:	20001726 	beq	r4,zero,b6ec <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b690:	20800017 	ldw	r2,0(r4)
    b694:	10800417 	ldw	r2,16(r2)
    b698:	10002126 	beq	r2,zero,b720 <close+0xbc>
    b69c:	103ee83a 	callr	r2
    b6a0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b6a4:	8009883a 	mov	r4,r16
    b6a8:	000bcfc0 	call	bcfc <alt_release_fd>
    if (rval < 0)
    b6ac:	88000216 	blt	r17,zero,b6b8 <close+0x54>
    b6b0:	0005883a 	mov	r2,zero
    b6b4:	00001d06 	br	b72c <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    b6b8:	00800074 	movhi	r2,1
    b6bc:	10828704 	addi	r2,r2,2588
    b6c0:	10800017 	ldw	r2,0(r2)
    b6c4:	1000031e 	bne	r2,zero,b6d4 <close+0x70>
    b6c8:	00c00074 	movhi	r3,1
    b6cc:	18c9ce04 	addi	r3,r3,10040
    b6d0:	00000206 	br	b6dc <close+0x78>
    b6d4:	103ee83a 	callr	r2
    b6d8:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    b6dc:	0445c83a 	sub	r2,zero,r17
    b6e0:	18800015 	stw	r2,0(r3)
    b6e4:	00bfffc4 	movi	r2,-1
    b6e8:	00001006 	br	b72c <close+0xc8>
    b6ec:	00800074 	movhi	r2,1
    b6f0:	10828704 	addi	r2,r2,2588
    b6f4:	10800017 	ldw	r2,0(r2)
    b6f8:	1000031e 	bne	r2,zero,b708 <close+0xa4>
    b6fc:	00c00074 	movhi	r3,1
    b700:	18c9ce04 	addi	r3,r3,10040
    b704:	00000206 	br	b710 <close+0xac>
    b708:	103ee83a 	callr	r2
    b70c:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b710:	00801444 	movi	r2,81
    b714:	18800015 	stw	r2,0(r3)
    b718:	00bfffc4 	movi	r2,-1
    b71c:	00000306 	br	b72c <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b720:	8009883a 	mov	r4,r16
    b724:	000bcfc0 	call	bcfc <alt_release_fd>
    b728:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    b72c:	dfc00217 	ldw	ra,8(sp)
    b730:	dc400117 	ldw	r17,4(sp)
    b734:	dc000017 	ldw	r16,0(sp)
    b738:	dec00304 	addi	sp,sp,12
    b73c:	f800283a 	ret

0000b740 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    b740:	3005883a 	mov	r2,r6
    b744:	f800283a 	ret

0000b748 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b748:	deffff04 	addi	sp,sp,-4
    b74c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b750:	20000e16 	blt	r4,zero,b78c <fstat+0x44>
    b754:	20c00324 	muli	r3,r4,12
    b758:	00800074 	movhi	r2,1
    b75c:	10bd5f04 	addi	r2,r2,-2692
    b760:	1889883a 	add	r4,r3,r2
  
  if (fd)
    b764:	20000926 	beq	r4,zero,b78c <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b768:	20800017 	ldw	r2,0(r4)
    b76c:	10800817 	ldw	r2,32(r2)
    b770:	10000226 	beq	r2,zero,b77c <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    b774:	103ee83a 	callr	r2
    b778:	00001006 	br	b7bc <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b77c:	00880004 	movi	r2,8192
    b780:	28800115 	stw	r2,4(r5)
    b784:	0005883a 	mov	r2,zero
    b788:	00000c06 	br	b7bc <fstat+0x74>
    b78c:	00800074 	movhi	r2,1
    b790:	10828704 	addi	r2,r2,2588
    b794:	10800017 	ldw	r2,0(r2)
    b798:	1000031e 	bne	r2,zero,b7a8 <fstat+0x60>
    b79c:	00c00074 	movhi	r3,1
    b7a0:	18c9ce04 	addi	r3,r3,10040
    b7a4:	00000206 	br	b7b0 <fstat+0x68>
    b7a8:	103ee83a 	callr	r2
    b7ac:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b7b0:	00801444 	movi	r2,81
    b7b4:	18800015 	stw	r2,0(r3)
    b7b8:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    b7bc:	dfc00017 	ldw	ra,0(sp)
    b7c0:	dec00104 	addi	sp,sp,4
    b7c4:	f800283a 	ret

0000b7c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b7c8:	defff004 	addi	sp,sp,-64
    b7cc:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7d0:	20000f16 	blt	r4,zero,b810 <isatty+0x48>
    b7d4:	20c00324 	muli	r3,r4,12
    b7d8:	00800074 	movhi	r2,1
    b7dc:	10bd5f04 	addi	r2,r2,-2692
    b7e0:	1885883a 	add	r2,r3,r2
  
  if (fd)
    b7e4:	10000a26 	beq	r2,zero,b810 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b7e8:	10800017 	ldw	r2,0(r2)
    b7ec:	10800817 	ldw	r2,32(r2)
    b7f0:	1000021e 	bne	r2,zero,b7fc <isatty+0x34>
    b7f4:	00800044 	movi	r2,1
    b7f8:	00001106 	br	b840 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b7fc:	d80b883a 	mov	r5,sp
    b800:	000b7480 	call	b748 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b804:	d8800117 	ldw	r2,4(sp)
    b808:	10880020 	cmpeqi	r2,r2,8192
    b80c:	00000c06 	br	b840 <isatty+0x78>
    b810:	00800074 	movhi	r2,1
    b814:	10828704 	addi	r2,r2,2588
    b818:	10800017 	ldw	r2,0(r2)
    b81c:	1000031e 	bne	r2,zero,b82c <isatty+0x64>
    b820:	00c00074 	movhi	r3,1
    b824:	18c9ce04 	addi	r3,r3,10040
    b828:	00000206 	br	b834 <isatty+0x6c>
    b82c:	103ee83a 	callr	r2
    b830:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b834:	00801444 	movi	r2,81
    b838:	18800015 	stw	r2,0(r3)
    b83c:	0005883a 	mov	r2,zero
    return 0;
  }
}
    b840:	dfc00f17 	ldw	ra,60(sp)
    b844:	dec01004 	addi	sp,sp,64
    b848:	f800283a 	ret

0000b84c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b84c:	deffff04 	addi	sp,sp,-4
    b850:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b854:	01000074 	movhi	r4,1
    b858:	21028c04 	addi	r4,r4,2608
    b85c:	00c00074 	movhi	r3,1
    b860:	18fb5004 	addi	r3,r3,-4800

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b864:	20c00926 	beq	r4,r3,b88c <alt_load+0x40>
    b868:	01800074 	movhi	r6,1
    b86c:	31828c04 	addi	r6,r6,2608
  {
    while( to != end )
    b870:	19800626 	beq	r3,r6,b88c <alt_load+0x40>
    b874:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    b878:	20800017 	ldw	r2,0(r4)
    b87c:	18800015 	stw	r2,0(r3)
    b880:	1947883a 	add	r3,r3,r5
    b884:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b888:	30fffb1e 	bne	r6,r3,b878 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b88c:	01000034 	movhi	r4,0
    b890:	21000804 	addi	r4,r4,32
    b894:	00c00034 	movhi	r3,0
    b898:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b89c:	20c00926 	beq	r4,r3,b8c4 <alt_load+0x78>
    b8a0:	01800034 	movhi	r6,0
    b8a4:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    b8a8:	19800626 	beq	r3,r6,b8c4 <alt_load+0x78>
    b8ac:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    b8b0:	20800017 	ldw	r2,0(r4)
    b8b4:	18800015 	stw	r2,0(r3)
    b8b8:	1947883a 	add	r3,r3,r5
    b8bc:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b8c0:	30fffb1e 	bne	r6,r3,b8b0 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b8c4:	01000074 	movhi	r4,1
    b8c8:	21399f04 	addi	r4,r4,-6532
    b8cc:	00c00074 	movhi	r3,1
    b8d0:	18f99f04 	addi	r3,r3,-6532

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b8d4:	20c00926 	beq	r4,r3,b8fc <alt_load+0xb0>
    b8d8:	01800074 	movhi	r6,1
    b8dc:	31bb5004 	addi	r6,r6,-4800
  {
    while( to != end )
    b8e0:	19800626 	beq	r3,r6,b8fc <alt_load+0xb0>
    b8e4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    b8e8:	20800017 	ldw	r2,0(r4)
    b8ec:	18800015 	stw	r2,0(r3)
    b8f0:	1947883a 	add	r3,r3,r5
    b8f4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b8f8:	30fffb1e 	bne	r6,r3,b8e8 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b8fc:	000d9840 	call	d984 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b900:	000da680 	call	da68 <alt_icache_flush_all>
}
    b904:	dfc00017 	ldw	ra,0(sp)
    b908:	dec00104 	addi	sp,sp,4
    b90c:	f800283a 	ret

0000b910 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b910:	defffe04 	addi	sp,sp,-8
    b914:	dfc00115 	stw	ra,4(sp)
    b918:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b91c:	2000020e 	bge	r4,zero,b928 <lseek+0x18>
    b920:	043febc4 	movi	r16,-81
    b924:	00000d06 	br	b95c <lseek+0x4c>
    b928:	20c00324 	muli	r3,r4,12
    b92c:	00800074 	movhi	r2,1
    b930:	10bd5f04 	addi	r2,r2,-2692
    b934:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    b938:	20001526 	beq	r4,zero,b990 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b93c:	20800017 	ldw	r2,0(r4)
    b940:	10800717 	ldw	r2,28(r2)
    b944:	1000021e 	bne	r2,zero,b950 <lseek+0x40>
    b948:	043fde84 	movi	r16,-134
    b94c:	00000306 	br	b95c <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b950:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    b954:	1000100e 	bge	r2,zero,b998 <lseek+0x88>
    b958:	1021883a 	mov	r16,r2
    b95c:	00800074 	movhi	r2,1
    b960:	10828704 	addi	r2,r2,2588
    b964:	10800017 	ldw	r2,0(r2)
    b968:	1000031e 	bne	r2,zero,b978 <lseek+0x68>
    b96c:	00c00074 	movhi	r3,1
    b970:	18c9ce04 	addi	r3,r3,10040
    b974:	00000206 	br	b980 <lseek+0x70>
    b978:	103ee83a 	callr	r2
    b97c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    b980:	0405c83a 	sub	r2,zero,r16
    b984:	18800015 	stw	r2,0(r3)
    b988:	00bfffc4 	movi	r2,-1
    b98c:	00000206 	br	b998 <lseek+0x88>
    b990:	043febc4 	movi	r16,-81
    b994:	003ff106 	br	b95c <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    b998:	dfc00117 	ldw	ra,4(sp)
    b99c:	dc000017 	ldw	r16,0(sp)
    b9a0:	dec00204 	addi	sp,sp,8
    b9a4:	f800283a 	ret

0000b9a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b9a8:	defffe04 	addi	sp,sp,-8
    b9ac:	dfc00115 	stw	ra,4(sp)
    b9b0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b9b4:	0009883a 	mov	r4,zero
    b9b8:	000be640 	call	be64 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b9bc:	000be840 	call	be84 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b9c0:	01800074 	movhi	r6,1
    b9c4:	31bb1c04 	addi	r6,r6,-5008
    b9c8:	3009883a 	mov	r4,r6
    b9cc:	300b883a 	mov	r5,r6
    b9d0:	000daec0 	call	daec <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b9d4:	d1275317 	ldw	r4,-25268(gp)
    b9d8:	d1675417 	ldw	r5,-25264(gp)
    b9dc:	d1a75517 	ldw	r6,-25260(gp)
    b9e0:	00002b00 	call	2b0 <main>
    b9e4:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    b9e8:	01000044 	movi	r4,1
    b9ec:	000b6640 	call	b664 <close>
  exit (result);
    b9f0:	8009883a 	mov	r4,r16
    b9f4:	000e0080 	call	e008 <exit>

0000b9f8 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    b9f8:	f800283a 	ret

0000b9fc <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    b9fc:	f800283a 	ret

0000ba00 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    ba00:	defff804 	addi	sp,sp,-32
    ba04:	dfc00415 	stw	ra,16(sp)
    ba08:	dc800315 	stw	r18,12(sp)
    ba0c:	dc400215 	stw	r17,8(sp)
    ba10:	dc000115 	stw	r16,4(sp)
    ba14:	d9400515 	stw	r5,20(sp)
    ba18:	d9800615 	stw	r6,24(sp)
    ba1c:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    ba20:	d8800504 	addi	r2,sp,20
    ba24:	d8800015 	stw	r2,0(sp)
    ba28:	2023883a 	mov	r17,r4
    ba2c:	00005d06 	br	bba4 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    ba30:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    ba34:	21003fcc 	andi	r4,r4,255
    ba38:	2100201c 	xori	r4,r4,128
    ba3c:	213fe004 	addi	r4,r4,-128
    ba40:	00800944 	movi	r2,37
    ba44:	20800226 	beq	r4,r2,ba50 <alt_printf+0x50>
        {
            alt_putchar(c);
    ba48:	000bbdc0 	call	bbdc <alt_putchar>
    ba4c:	00005506 	br	bba4 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    ba50:	89400003 	ldbu	r5,0(r17)
    ba54:	8c400044 	addi	r17,r17,1
    ba58:	29003fcc 	andi	r4,r5,255
    ba5c:	2100201c 	xori	r4,r4,128
    ba60:	213fe004 	addi	r4,r4,-128
    ba64:	20005726 	beq	r4,zero,bbc4 <alt_printf+0x1c4>
            {
                if (c == '%')
    ba68:	00800944 	movi	r2,37
    ba6c:	2080021e 	bne	r4,r2,ba78 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    ba70:	000bbdc0 	call	bbdc <alt_putchar>
    ba74:	00004b06 	br	bba4 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    ba78:	28c03fcc 	andi	r3,r5,255
    ba7c:	18c0201c 	xori	r3,r3,128
    ba80:	18ffe004 	addi	r3,r3,-128
    ba84:	008018c4 	movi	r2,99
    ba88:	1880061e 	bne	r3,r2,baa4 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    ba8c:	d8c00017 	ldw	r3,0(sp)
    ba90:	18800104 	addi	r2,r3,4
    ba94:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    ba98:	19000017 	ldw	r4,0(r3)
    ba9c:	000bbdc0 	call	bbdc <alt_putchar>
    baa0:	00004006 	br	bba4 <alt_printf+0x1a4>
                }
                else if (c == 'x')
    baa4:	28c03fcc 	andi	r3,r5,255
    baa8:	18c0201c 	xori	r3,r3,128
    baac:	18ffe004 	addi	r3,r3,-128
    bab0:	00801e04 	movi	r2,120
    bab4:	1880231e 	bne	r3,r2,bb44 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    bab8:	d8c00017 	ldw	r3,0(sp)
    babc:	18800104 	addi	r2,r3,4
    bac0:	d8800015 	stw	r2,0(sp)
    bac4:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    bac8:	90000326 	beq	r18,zero,bad8 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    bacc:	90bc002c 	andhi	r2,r18,61440
    bad0:	10000426 	beq	r2,zero,bae4 <alt_printf+0xe4>
    bad4:	00003906 	br	bbbc <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    bad8:	01000c04 	movi	r4,48
    badc:	000bbdc0 	call	bbdc <alt_putchar>
    bae0:	00003006 	br	bba4 <alt_printf+0x1a4>
                        continue;
    bae4:	04000704 	movi	r16,28
    bae8:	013fff04 	movi	r4,-4
    baec:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    baf0:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    baf4:	1c04983a 	sll	r2,r3,r16
    baf8:	9084703a 	and	r2,r18,r2
    bafc:	103ffc26 	beq	r2,zero,baf0 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bb00:	80002816 	blt	r16,zero,bba4 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    bb04:	008003c4 	movi	r2,15
    bb08:	1404983a 	sll	r2,r2,r16
    bb0c:	9084703a 	and	r2,r18,r2
    bb10:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    bb14:	00800244 	movi	r2,9
    bb18:	10c00236 	bltu	r2,r3,bb24 <alt_printf+0x124>
                            c = '0' + digit;
    bb1c:	19000c04 	addi	r4,r3,48
    bb20:	00000106 	br	bb28 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    bb24:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    bb28:	21003fcc 	andi	r4,r4,255
    bb2c:	2100201c 	xori	r4,r4,128
    bb30:	213fe004 	addi	r4,r4,-128
    bb34:	000bbdc0 	call	bbdc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bb38:	843fff04 	addi	r16,r16,-4
    bb3c:	80001916 	blt	r16,zero,bba4 <alt_printf+0x1a4>
    bb40:	003ff006 	br	bb04 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    bb44:	28c03fcc 	andi	r3,r5,255
    bb48:	18c0201c 	xori	r3,r3,128
    bb4c:	18ffe004 	addi	r3,r3,-128
    bb50:	00801cc4 	movi	r2,115
    bb54:	1880131e 	bne	r3,r2,bba4 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    bb58:	d8800017 	ldw	r2,0(sp)
    bb5c:	10c00104 	addi	r3,r2,4
    bb60:	d8c00015 	stw	r3,0(sp)
    bb64:	14000017 	ldw	r16,0(r2)

                    while(*s)
    bb68:	81000003 	ldbu	r4,0(r16)
    bb6c:	20803fcc 	andi	r2,r4,255
    bb70:	1080201c 	xori	r2,r2,128
    bb74:	10bfe004 	addi	r2,r2,-128
    bb78:	10000a26 	beq	r2,zero,bba4 <alt_printf+0x1a4>
                      alt_putchar(*s++);
    bb7c:	84000044 	addi	r16,r16,1
    bb80:	21003fcc 	andi	r4,r4,255
    bb84:	2100201c 	xori	r4,r4,128
    bb88:	213fe004 	addi	r4,r4,-128
    bb8c:	000bbdc0 	call	bbdc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    bb90:	81000003 	ldbu	r4,0(r16)
    bb94:	20803fcc 	andi	r2,r4,255
    bb98:	1080201c 	xori	r2,r2,128
    bb9c:	10bfe004 	addi	r2,r2,-128
    bba0:	103ff61e 	bne	r2,zero,bb7c <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    bba4:	89000003 	ldbu	r4,0(r17)
    bba8:	20803fcc 	andi	r2,r4,255
    bbac:	1080201c 	xori	r2,r2,128
    bbb0:	10bfe004 	addi	r2,r2,-128
    bbb4:	103f9e1e 	bne	r2,zero,ba30 <alt_printf+0x30>
    bbb8:	00000206 	br	bbc4 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    bbbc:	04000704 	movi	r16,28
    bbc0:	003fd006 	br	bb04 <alt_printf+0x104>
    bbc4:	dfc00417 	ldw	ra,16(sp)
    bbc8:	dc800317 	ldw	r18,12(sp)
    bbcc:	dc400217 	ldw	r17,8(sp)
    bbd0:	dc000117 	ldw	r16,4(sp)
    bbd4:	dec00804 	addi	sp,sp,32
    bbd8:	f800283a 	ret

0000bbdc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    bbdc:	deffff04 	addi	sp,sp,-4
    bbe0:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    bbe4:	00800074 	movhi	r2,1
    bbe8:	10827c04 	addi	r2,r2,2544
    bbec:	10800017 	ldw	r2,0(r2)
    bbf0:	11400217 	ldw	r5,8(r2)
    bbf4:	000e0b40 	call	e0b4 <putc>
#endif
}
    bbf8:	dfc00017 	ldw	ra,0(sp)
    bbfc:	dec00104 	addi	sp,sp,4
    bc00:	f800283a 	ret

0000bc04 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    bc04:	defffe04 	addi	sp,sp,-8
    bc08:	dfc00115 	stw	ra,4(sp)
    bc0c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bc10:	20002916 	blt	r4,zero,bcb8 <read+0xb4>
    bc14:	20c00324 	muli	r3,r4,12
    bc18:	00800074 	movhi	r2,1
    bc1c:	10bd5f04 	addi	r2,r2,-2692
    bc20:	1889883a 	add	r4,r3,r2
  
  if (fd)
    bc24:	20002426 	beq	r4,zero,bcb8 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    bc28:	20800217 	ldw	r2,8(r4)
    bc2c:	108000cc 	andi	r2,r2,3
    bc30:	00c00044 	movi	r3,1
    bc34:	10c01326 	beq	r2,r3,bc84 <read+0x80>
    bc38:	20800017 	ldw	r2,0(r4)
    bc3c:	10800517 	ldw	r2,20(r2)
    bc40:	10001026 	beq	r2,zero,bc84 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    bc44:	103ee83a 	callr	r2
    bc48:	1021883a 	mov	r16,r2
    bc4c:	1000260e 	bge	r2,zero,bce8 <read+0xe4>
    bc50:	00800074 	movhi	r2,1
    bc54:	10828704 	addi	r2,r2,2588
    bc58:	10800017 	ldw	r2,0(r2)
    bc5c:	1000031e 	bne	r2,zero,bc6c <read+0x68>
    bc60:	00c00074 	movhi	r3,1
    bc64:	18c9ce04 	addi	r3,r3,10040
    bc68:	00000206 	br	bc74 <read+0x70>
    bc6c:	103ee83a 	callr	r2
    bc70:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    bc74:	0405c83a 	sub	r2,zero,r16
    bc78:	18800015 	stw	r2,0(r3)
    bc7c:	043fffc4 	movi	r16,-1
    bc80:	00001906 	br	bce8 <read+0xe4>
    bc84:	00800074 	movhi	r2,1
    bc88:	10828704 	addi	r2,r2,2588
    bc8c:	10800017 	ldw	r2,0(r2)
    bc90:	1000031e 	bne	r2,zero,bca0 <read+0x9c>
    bc94:	00c00074 	movhi	r3,1
    bc98:	18c9ce04 	addi	r3,r3,10040
    bc9c:	00000206 	br	bca8 <read+0xa4>
    bca0:	103ee83a 	callr	r2
    bca4:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    bca8:	00800344 	movi	r2,13
    bcac:	18800015 	stw	r2,0(r3)
    bcb0:	043fffc4 	movi	r16,-1
    bcb4:	00000c06 	br	bce8 <read+0xe4>
    bcb8:	00800074 	movhi	r2,1
    bcbc:	10828704 	addi	r2,r2,2588
    bcc0:	10800017 	ldw	r2,0(r2)
    bcc4:	1000031e 	bne	r2,zero,bcd4 <read+0xd0>
    bcc8:	00c00074 	movhi	r3,1
    bccc:	18c9ce04 	addi	r3,r3,10040
    bcd0:	00000206 	br	bcdc <read+0xd8>
    bcd4:	103ee83a 	callr	r2
    bcd8:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    bcdc:	00801444 	movi	r2,81
    bce0:	18800015 	stw	r2,0(r3)
    bce4:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    bce8:	8005883a 	mov	r2,r16
    bcec:	dfc00117 	ldw	ra,4(sp)
    bcf0:	dc000017 	ldw	r16,0(sp)
    bcf4:	dec00204 	addi	sp,sp,8
    bcf8:	f800283a 	ret

0000bcfc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    bcfc:	00800084 	movi	r2,2
    bd00:	1100060e 	bge	r2,r4,bd1c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    bd04:	20800324 	muli	r2,r4,12
    bd08:	00c00074 	movhi	r3,1
    bd0c:	18fd5f04 	addi	r3,r3,-2692
    bd10:	10c5883a 	add	r2,r2,r3
    bd14:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    bd18:	10000015 	stw	zero,0(r2)
    bd1c:	f800283a 	ret

0000bd20 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd20:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd24:	00bfff84 	movi	r2,-2
    bd28:	2884703a 	and	r2,r5,r2
    bd2c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    bd30:	d0a00c17 	ldw	r2,-32720(gp)
    bd34:	108000c4 	addi	r2,r2,3
    bd38:	00ffff04 	movi	r3,-4
    bd3c:	10c6703a 	and	r3,r2,r3
    bd40:	d0e00c15 	stw	r3,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    bd44:	1909883a 	add	r4,r3,r4
    bd48:	00802034 	movhi	r2,128
    bd4c:	10800004 	addi	r2,r2,0
    bd50:	1100032e 	bgeu	r2,r4,bd60 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd54:	2801703a 	wrctl	status,r5
    bd58:	00ffffc4 	movi	r3,-1
    bd5c:	00000206 	br	bd68 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    bd60:	d1200c15 	stw	r4,-32720(gp)
    bd64:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    bd68:	1805883a 	mov	r2,r3
    bd6c:	f800283a 	ret

0000bd70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bd70:	defffe04 	addi	sp,sp,-8
    bd74:	dfc00115 	stw	ra,4(sp)
    bd78:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bd7c:	20002816 	blt	r4,zero,be20 <write+0xb0>
    bd80:	20c00324 	muli	r3,r4,12
    bd84:	00800074 	movhi	r2,1
    bd88:	10bd5f04 	addi	r2,r2,-2692
    bd8c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    bd90:	20002326 	beq	r4,zero,be20 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bd94:	20800217 	ldw	r2,8(r4)
    bd98:	108000cc 	andi	r2,r2,3
    bd9c:	10001326 	beq	r2,zero,bdec <write+0x7c>
    bda0:	20800017 	ldw	r2,0(r4)
    bda4:	10800617 	ldw	r2,24(r2)
    bda8:	10001026 	beq	r2,zero,bdec <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bdac:	103ee83a 	callr	r2
    bdb0:	1021883a 	mov	r16,r2
    bdb4:	1000260e 	bge	r2,zero,be50 <write+0xe0>
    bdb8:	00800074 	movhi	r2,1
    bdbc:	10828704 	addi	r2,r2,2588
    bdc0:	10800017 	ldw	r2,0(r2)
    bdc4:	1000031e 	bne	r2,zero,bdd4 <write+0x64>
    bdc8:	00c00074 	movhi	r3,1
    bdcc:	18c9ce04 	addi	r3,r3,10040
    bdd0:	00000206 	br	bddc <write+0x6c>
    bdd4:	103ee83a 	callr	r2
    bdd8:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    bddc:	0405c83a 	sub	r2,zero,r16
    bde0:	18800015 	stw	r2,0(r3)
    bde4:	043fffc4 	movi	r16,-1
    bde8:	00001906 	br	be50 <write+0xe0>
    bdec:	00800074 	movhi	r2,1
    bdf0:	10828704 	addi	r2,r2,2588
    bdf4:	10800017 	ldw	r2,0(r2)
    bdf8:	1000031e 	bne	r2,zero,be08 <write+0x98>
    bdfc:	00c00074 	movhi	r3,1
    be00:	18c9ce04 	addi	r3,r3,10040
    be04:	00000206 	br	be10 <write+0xa0>
    be08:	103ee83a 	callr	r2
    be0c:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    be10:	00800344 	movi	r2,13
    be14:	18800015 	stw	r2,0(r3)
    be18:	043fffc4 	movi	r16,-1
    be1c:	00000c06 	br	be50 <write+0xe0>
    be20:	00800074 	movhi	r2,1
    be24:	10828704 	addi	r2,r2,2588
    be28:	10800017 	ldw	r2,0(r2)
    be2c:	1000031e 	bne	r2,zero,be3c <write+0xcc>
    be30:	00c00074 	movhi	r3,1
    be34:	18c9ce04 	addi	r3,r3,10040
    be38:	00000206 	br	be44 <write+0xd4>
    be3c:	103ee83a 	callr	r2
    be40:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    be44:	00801444 	movi	r2,81
    be48:	18800015 	stw	r2,0(r3)
    be4c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    be50:	8005883a 	mov	r2,r16
    be54:	dfc00117 	ldw	ra,4(sp)
    be58:	dc000017 	ldw	r16,0(sp)
    be5c:	dec00204 	addi	sp,sp,8
    be60:	f800283a 	ret

0000be64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    be64:	deffff04 	addi	sp,sp,-4
    be68:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    be6c:	000de9c0 	call	de9c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    be70:	00800044 	movi	r2,1
    be74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    be78:	dfc00017 	ldw	ra,0(sp)
    be7c:	dec00104 	addi	sp,sp,4
    be80:	f800283a 	ret

0000be84 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    be84:	defffd04 	addi	sp,sp,-12
    be88:	dfc00215 	stw	ra,8(sp)
    be8c:	dc400115 	stw	r17,4(sp)
    be90:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    be94:	04000204 	movi	r16,8
    be98:	01040034 	movhi	r4,4096
    be9c:	21080004 	addi	r4,r4,8192
    bea0:	000b883a 	mov	r5,zero
    bea4:	000d883a 	mov	r6,zero
    bea8:	800f883a 	mov	r7,r16
    beac:	000c72c0 	call	c72c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    beb0:	04400074 	movhi	r17,1
    beb4:	8c7dc904 	addi	r17,r17,-2268
    beb8:	8809883a 	mov	r4,r17
    bebc:	000b883a 	mov	r5,zero
    bec0:	800d883a 	mov	r6,r16
    bec4:	000c2280 	call	c228 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bec8:	04000074 	movhi	r16,1
    becc:	84028404 	addi	r16,r16,2576
    bed0:	893ff604 	addi	r4,r17,-40
    bed4:	800b883a 	mov	r5,r16
    bed8:	000d9880 	call	d988 <alt_dev_llist_insert>
    bedc:	01000074 	movhi	r4,1
    bee0:	2101d704 	addi	r4,r4,1884
    bee4:	800b883a 	mov	r5,r16
    bee8:	000d9880 	call	d988 <alt_dev_llist_insert>
    beec:	01000074 	movhi	r4,1
    bef0:	2101e304 	addi	r4,r4,1932
    bef4:	800b883a 	mov	r5,r16
    bef8:	000d9880 	call	d988 <alt_dev_llist_insert>
    befc:	01000074 	movhi	r4,1
    bf00:	2101ef04 	addi	r4,r4,1980
    bf04:	800b883a 	mov	r5,r16
    bf08:	000d9880 	call	d988 <alt_dev_llist_insert>
    bf0c:	01000074 	movhi	r4,1
    bf10:	2101fa04 	addi	r4,r4,2024
    bf14:	800b883a 	mov	r5,r16
    bf18:	000d9880 	call	d988 <alt_dev_llist_insert>
    bf1c:	01000074 	movhi	r4,1
    bf20:	21020504 	addi	r4,r4,2068
    bf24:	800b883a 	mov	r5,r16
    bf28:	000d9880 	call	d988 <alt_dev_llist_insert>
    bf2c:	01000074 	movhi	r4,1
    bf30:	21021004 	addi	r4,r4,2112
    bf34:	800b883a 	mov	r5,r16
    bf38:	000d9880 	call	d988 <alt_dev_llist_insert>
    bf3c:	01000074 	movhi	r4,1
    bf40:	21021b04 	addi	r4,r4,2156
    bf44:	800b883a 	mov	r5,r16
    bf48:	000d9880 	call	d988 <alt_dev_llist_insert>
    bf4c:	01000074 	movhi	r4,1
    bf50:	21022604 	addi	r4,r4,2200
    bf54:	800b883a 	mov	r5,r16
    bf58:	000d9880 	call	d988 <alt_dev_llist_insert>
    bf5c:	01000074 	movhi	r4,1
    bf60:	21023104 	addi	r4,r4,2244
    bf64:	800b883a 	mov	r5,r16
    bf68:	000d9880 	call	d988 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    bf6c:	04400074 	movhi	r17,1
    bf70:	8c423c04 	addi	r17,r17,2288
    bf74:	8809883a 	mov	r4,r17
    bf78:	000ca980 	call	ca98 <alt_up_ps2_init>
    bf7c:	8809883a 	mov	r4,r17
    bf80:	800b883a 	mov	r5,r16
    bf84:	000d9880 	call	d988 <alt_dev_llist_insert>
    bf88:	01000074 	movhi	r4,1
    bf8c:	21024a04 	addi	r4,r4,2344
    bf90:	800b883a 	mov	r5,r16
    bf94:	000d9880 	call	d988 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    bf98:	01000074 	movhi	r4,1
    bf9c:	21025504 	addi	r4,r4,2388
    bfa0:	20800a17 	ldw	r2,40(r4)
    bfa4:	10800104 	addi	r2,r2,4
    bfa8:	10c0000b 	ldhu	r3,0(r2)
    bfac:	20c00c15 	stw	r3,48(r4)
    bfb0:	10800017 	ldw	r2,0(r2)
    bfb4:	100ad43a 	srli	r5,r2,16
    bfb8:	21400d15 	stw	r5,52(r4)
    bfbc:	00801004 	movi	r2,64
    bfc0:	10c00436 	bltu	r2,r3,bfd4 <alt_sys_init+0x150>
    bfc4:	00800fc4 	movi	r2,63
    bfc8:	20800f15 	stw	r2,60(r4)
    bfcc:	00800184 	movi	r2,6
    bfd0:	20801015 	stw	r2,64(r4)
    bfd4:	00800804 	movi	r2,32
    bfd8:	11400436 	bltu	r2,r5,bfec <alt_sys_init+0x168>
    bfdc:	00c007c4 	movi	r3,31
    bfe0:	00800074 	movhi	r2,1
    bfe4:	10825504 	addi	r2,r2,2388
    bfe8:	10c01115 	stw	r3,68(r2)
    bfec:	04000074 	movhi	r16,1
    bff0:	84025504 	addi	r16,r16,2388
    bff4:	8009883a 	mov	r4,r16
    bff8:	000ce500 	call	ce50 <alt_up_char_buffer_init>
    bffc:	8009883a 	mov	r4,r16
    c000:	01400074 	movhi	r5,1
    c004:	29428404 	addi	r5,r5,2576
    c008:	000d9880 	call	d988 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    c00c:	01800074 	movhi	r6,1
    c010:	31826704 	addi	r6,r6,2460
    c014:	30c00a17 	ldw	r3,40(r6)
    c018:	18800017 	ldw	r2,0(r3)
    c01c:	30800b15 	stw	r2,44(r6)
    c020:	18800117 	ldw	r2,4(r3)
    c024:	30800c15 	stw	r2,48(r6)
    c028:	19000204 	addi	r4,r3,8
    c02c:	2080000b 	ldhu	r2,0(r4)
    c030:	30800f15 	stw	r2,60(r6)
    c034:	20800017 	ldw	r2,0(r4)
    c038:	1004d43a 	srli	r2,r2,16
    c03c:	30801015 	stw	r2,64(r6)
    c040:	18c00304 	addi	r3,r3,12
    c044:	18800017 	ldw	r2,0(r3)
    c048:	1005d07a 	srai	r2,r2,1
    c04c:	01000044 	movi	r4,1
    c050:	1104703a 	and	r2,r2,r4
    c054:	30800d15 	stw	r2,52(r6)
    c058:	18800017 	ldw	r2,0(r3)
    c05c:	1005d13a 	srai	r2,r2,4
    c060:	114003cc 	andi	r5,r2,15
    c064:	31400e15 	stw	r5,56(r6)
    c068:	1a000017 	ldw	r8,0(r3)
    c06c:	400ed43a 	srli	r7,r8,16
    c070:	2900021e 	bne	r5,r4,c07c <alt_sys_init+0x1f8>
    c074:	30001115 	stw	zero,68(r6)
    c078:	00000b06 	br	c0a8 <alt_sys_init+0x224>
    c07c:	00800084 	movi	r2,2
    c080:	2880051e 	bne	r5,r2,c098 <alt_sys_init+0x214>
    c084:	00c00044 	movi	r3,1
    c088:	00800074 	movhi	r2,1
    c08c:	10826704 	addi	r2,r2,2460
    c090:	10c01115 	stw	r3,68(r2)
    c094:	00000406 	br	c0a8 <alt_sys_init+0x224>
    c098:	00c00084 	movi	r3,2
    c09c:	00800074 	movhi	r2,1
    c0a0:	10826704 	addi	r2,r2,2460
    c0a4:	10c01115 	stw	r3,68(r2)
    c0a8:	01000074 	movhi	r4,1
    c0ac:	21026704 	addi	r4,r4,2460
    c0b0:	38c03fcc 	andi	r3,r7,255
    c0b4:	01800804 	movi	r6,32
    c0b8:	30c5c83a 	sub	r2,r6,r3
    c0bc:	017fffc4 	movi	r5,-1
    c0c0:	2884d83a 	srl	r2,r5,r2
    c0c4:	20801215 	stw	r2,72(r4)
    c0c8:	20801117 	ldw	r2,68(r4)
    c0cc:	1887883a 	add	r3,r3,r2
    c0d0:	20c01315 	stw	r3,76(r4)
    c0d4:	4004d63a 	srli	r2,r8,24
    c0d8:	308dc83a 	sub	r6,r6,r2
    c0dc:	298ad83a 	srl	r5,r5,r6
    c0e0:	21401415 	stw	r5,80(r4)
    c0e4:	01400074 	movhi	r5,1
    c0e8:	29428404 	addi	r5,r5,2576
    c0ec:	000d9880 	call	d988 <alt_dev_llist_insert>
}
    c0f0:	dfc00217 	ldw	ra,8(sp)
    c0f4:	dc400117 	ldw	r17,4(sp)
    c0f8:	dc000017 	ldw	r16,0(sp)
    c0fc:	dec00304 	addi	sp,sp,12
    c100:	f800283a 	ret

0000c104 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c104:	deffff04 	addi	sp,sp,-4
    c108:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c10c:	21000017 	ldw	r4,0(r4)
    c110:	21000a04 	addi	r4,r4,40
    c114:	000c3d40 	call	c3d4 <altera_avalon_jtag_uart_ioctl>
}
    c118:	dfc00017 	ldw	ra,0(sp)
    c11c:	dec00104 	addi	sp,sp,4
    c120:	f800283a 	ret

0000c124 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c124:	deffff04 	addi	sp,sp,-4
    c128:	dfc00015 	stw	ra,0(sp)
    c12c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c130:	21000017 	ldw	r4,0(r4)
    c134:	21000a04 	addi	r4,r4,40
    c138:	11400217 	ldw	r5,8(r2)
    c13c:	000c19c0 	call	c19c <altera_avalon_jtag_uart_close>
}
    c140:	dfc00017 	ldw	ra,0(sp)
    c144:	dec00104 	addi	sp,sp,4
    c148:	f800283a 	ret

0000c14c <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c14c:	deffff04 	addi	sp,sp,-4
    c150:	dfc00015 	stw	ra,0(sp)
    c154:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c158:	21000017 	ldw	r4,0(r4)
    c15c:	21000a04 	addi	r4,r4,40
    c160:	11c00217 	ldw	r7,8(r2)
    c164:	000c5b00 	call	c5b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c168:	dfc00017 	ldw	ra,0(sp)
    c16c:	dec00104 	addi	sp,sp,4
    c170:	f800283a 	ret

0000c174 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c174:	deffff04 	addi	sp,sp,-4
    c178:	dfc00015 	stw	ra,0(sp)
    c17c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c180:	21000017 	ldw	r4,0(r4)
    c184:	21000a04 	addi	r4,r4,40
    c188:	11c00217 	ldw	r7,8(r2)
    c18c:	000c4480 	call	c448 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c190:	dfc00017 	ldw	ra,0(sp)
    c194:	dec00104 	addi	sp,sp,4
    c198:	f800283a 	ret

0000c19c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c19c:	21800c17 	ldw	r6,48(r4)
    c1a0:	2950000c 	andi	r5,r5,16384
    c1a4:	280b003a 	cmpeq	r5,r5,zero
    c1a8:	00000306 	br	c1b8 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    c1ac:	2800021e 	bne	r5,zero,c1b8 <altera_avalon_jtag_uart_close+0x1c>
    c1b0:	00bffd44 	movi	r2,-11
    c1b4:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c1b8:	20800d17 	ldw	r2,52(r4)
    c1bc:	11800326 	beq	r2,r6,c1cc <altera_avalon_jtag_uart_close+0x30>
    c1c0:	20c00917 	ldw	r3,36(r4)
    c1c4:	20800117 	ldw	r2,4(r4)
    c1c8:	18bff836 	bltu	r3,r2,c1ac <altera_avalon_jtag_uart_close+0x10>
    c1cc:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    c1d0:	f800283a 	ret

0000c1d4 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c1d4:	20800017 	ldw	r2,0(r4)
    c1d8:	10c00104 	addi	r3,r2,4
    c1dc:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c1e0:	01410004 	movi	r5,1024
    c1e4:	1144703a 	and	r2,r2,r5
    c1e8:	10000526 	beq	r2,zero,c200 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c1ec:	20800817 	ldw	r2,32(r4)
    c1f0:	1144b03a 	or	r2,r2,r5
    c1f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    c1f8:	20000915 	stw	zero,36(r4)
    c1fc:	00000606 	br	c218 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c200:	20c00917 	ldw	r3,36(r4)
    c204:	00a00034 	movhi	r2,32768
    c208:	10bfff04 	addi	r2,r2,-4
    c20c:	10c00236 	bltu	r2,r3,c218 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    c210:	18800044 	addi	r2,r3,1
    c214:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c218:	00800074 	movhi	r2,1
    c21c:	1089d304 	addi	r2,r2,10060
    c220:	10800017 	ldw	r2,0(r2)
    c224:	f800283a 	ret

0000c228 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c228:	defffe04 	addi	sp,sp,-8
    c22c:	dfc00115 	stw	ra,4(sp)
    c230:	dc000015 	stw	r16,0(sp)
    c234:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c238:	00c00044 	movi	r3,1
    c23c:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c240:	20800017 	ldw	r2,0(r4)
    c244:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    c248:	3009883a 	mov	r4,r6
    c24c:	800b883a 	mov	r5,r16
    c250:	01800074 	movhi	r6,1
    c254:	31b0a804 	addi	r6,r6,-15712
    c258:	000db840 	call	db84 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c25c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c260:	81000204 	addi	r4,r16,8
    c264:	00800074 	movhi	r2,1
    c268:	1089d304 	addi	r2,r2,10060
    c26c:	11400017 	ldw	r5,0(r2)
    c270:	01800074 	movhi	r6,1
    c274:	31b07504 	addi	r6,r6,-15916
    c278:	800f883a 	mov	r7,r16
    c27c:	000d8f00 	call	d8f0 <alt_alarm_start>
    c280:	1000030e 	bge	r2,zero,c290 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c284:	00a00034 	movhi	r2,32768
    c288:	10bfffc4 	addi	r2,r2,-1
    c28c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c290:	dfc00117 	ldw	ra,4(sp)
    c294:	dc000017 	ldw	r16,0(sp)
    c298:	dec00204 	addi	sp,sp,8
    c29c:	f800283a 	ret

0000c2a0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    c2a0:	22000017 	ldw	r8,0(r4)
    c2a4:	03800104 	movi	r14,4
    c2a8:	4399883a 	add	r12,r8,r14
    c2ac:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c2b0:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c2b4:	5880c00c 	andi	r2,r11,768
    c2b8:	10004526 	beq	r2,zero,c3d0 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c2bc:	5880400c 	andi	r2,r11,256
    c2c0:	10002126 	beq	r2,zero,c348 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c2c4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    c2c8:	10800044 	addi	r2,r2,1
    c2cc:	1081ffcc 	andi	r2,r2,2047
    c2d0:	20c00b17 	ldw	r3,44(r4)
    c2d4:	10c01626 	beq	r2,r3,c330 <altera_avalon_jtag_uart_irq+0x90>
    c2d8:	02a00014 	movui	r10,32768
    c2dc:	02400e04 	movi	r9,56
    c2e0:	01c00044 	movi	r7,1
    c2e4:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c2e8:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c2ec:	2a84703a 	and	r2,r5,r10
    c2f0:	10000d26 	beq	r2,zero,c328 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c2f4:	20800a17 	ldw	r2,40(r4)
    c2f8:	1105883a 	add	r2,r2,r4
    c2fc:	1245883a 	add	r2,r2,r9
    c300:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c304:	20800a17 	ldw	r2,40(r4)
    c308:	11c5883a 	add	r2,r2,r7
    c30c:	1184703a 	and	r2,r2,r6
    c310:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c314:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    c318:	11c5883a 	add	r2,r2,r7
    c31c:	1184703a 	and	r2,r2,r6
    c320:	20c00b17 	ldw	r3,44(r4)
    c324:	10fff01e 	bne	r2,r3,c2e8 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c328:	2b44703a 	and	r2,r5,r13
    c32c:	10000626 	beq	r2,zero,c348 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c330:	20800817 	ldw	r2,32(r4)
    c334:	00ffff84 	movi	r3,-2
    c338:	10c4703a 	and	r2,r2,r3
    c33c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c340:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c344:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c348:	5880800c 	andi	r2,r11,512
    c34c:	103fd826 	beq	r2,zero,c2b0 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c350:	5b44703a 	and	r2,r11,r13
    c354:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    c358:	283fd526 	beq	r5,zero,c2b0 <altera_avalon_jtag_uart_irq+0x10>
    c35c:	20c00d17 	ldw	r3,52(r4)
    c360:	20800c17 	ldw	r2,48(r4)
    c364:	18801126 	beq	r3,r2,c3ac <altera_avalon_jtag_uart_irq+0x10c>
    c368:	02420e04 	movi	r9,2104
    c36c:	01800044 	movi	r6,1
    c370:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c374:	20800d17 	ldw	r2,52(r4)
    c378:	1105883a 	add	r2,r2,r4
    c37c:	1245883a 	add	r2,r2,r9
    c380:	10800007 	ldb	r2,0(r2)
    c384:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c388:	20800d17 	ldw	r2,52(r4)
    c38c:	1185883a 	add	r2,r2,r6
    c390:	11c4703a 	and	r2,r2,r7
    c394:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c398:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c39c:	283fc426 	beq	r5,zero,c2b0 <altera_avalon_jtag_uart_irq+0x10>
    c3a0:	20c00d17 	ldw	r3,52(r4)
    c3a4:	20800c17 	ldw	r2,48(r4)
    c3a8:	18bff21e 	bne	r3,r2,c374 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c3ac:	20c00817 	ldw	r3,32(r4)
    c3b0:	00bfff44 	movi	r2,-3
    c3b4:	1886703a 	and	r3,r3,r2
    c3b8:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c3bc:	20800017 	ldw	r2,0(r4)
    c3c0:	1385883a 	add	r2,r2,r14
    c3c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c3c8:	60800037 	ldwio	r2,0(r12)
    c3cc:	003fb806 	br	c2b0 <altera_avalon_jtag_uart_irq+0x10>
    c3d0:	f800283a 	ret

0000c3d4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    c3d4:	009a8044 	movi	r2,27137
    c3d8:	28800326 	beq	r5,r2,c3e8 <altera_avalon_jtag_uart_ioctl+0x14>
    c3dc:	009a8084 	movi	r2,27138
    c3e0:	2880171e 	bne	r5,r2,c440 <altera_avalon_jtag_uart_ioctl+0x6c>
    c3e4:	00000d06 	br	c41c <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c3e8:	20c00117 	ldw	r3,4(r4)
    c3ec:	00a00034 	movhi	r2,32768
    c3f0:	10bfffc4 	addi	r2,r2,-1
    c3f4:	18801226 	beq	r3,r2,c440 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c3f8:	31800017 	ldw	r6,0(r6)
    c3fc:	30ffff84 	addi	r3,r6,-2
    c400:	10bfff44 	addi	r2,r2,-3
    c404:	10c0022e 	bgeu	r2,r3,c410 <altera_avalon_jtag_uart_ioctl+0x3c>
    c408:	01a00034 	movhi	r6,32768
    c40c:	31bfff84 	addi	r6,r6,-2
    c410:	21800115 	stw	r6,4(r4)
    c414:	0005883a 	mov	r2,zero
    c418:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c41c:	20c00117 	ldw	r3,4(r4)
    c420:	00a00034 	movhi	r2,32768
    c424:	10bfffc4 	addi	r2,r2,-1
    c428:	18800526 	beq	r3,r2,c440 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c42c:	20800917 	ldw	r2,36(r4)
    c430:	10c5803a 	cmpltu	r2,r2,r3
    c434:	30800015 	stw	r2,0(r6)
    c438:	0005883a 	mov	r2,zero
    c43c:	f800283a 	ret
    c440:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    c444:	f800283a 	ret

0000c448 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c448:	defff604 	addi	sp,sp,-40
    c44c:	dfc00915 	stw	ra,36(sp)
    c450:	df000815 	stw	fp,32(sp)
    c454:	ddc00715 	stw	r23,28(sp)
    c458:	dd800615 	stw	r22,24(sp)
    c45c:	dd400515 	stw	r21,20(sp)
    c460:	dd000415 	stw	r20,16(sp)
    c464:	dcc00315 	stw	r19,12(sp)
    c468:	dc800215 	stw	r18,8(sp)
    c46c:	dc400115 	stw	r17,4(sp)
    c470:	dc000015 	stw	r16,0(sp)
    c474:	2025883a 	mov	r18,r4
    c478:	282f883a 	mov	r23,r5
    c47c:	3027883a 	mov	r19,r6
    c480:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c484:	0180220e 	bge	zero,r6,c510 <altera_avalon_jtag_uart_read+0xc8>
    c488:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c48c:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    c490:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    c494:	b4400236 	bltu	r22,r17,c4a0 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    c498:	b461c83a 	sub	r16,r22,r17
    c49c:	00000206 	br	c4a8 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c4a0:	00820004 	movi	r2,2048
    c4a4:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    c4a8:	80000d26 	beq	r16,zero,c4e0 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    c4ac:	9829883a 	mov	r20,r19
    c4b0:	9c001d36 	bltu	r19,r16,c528 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    c4b4:	91400e04 	addi	r5,r18,56
    c4b8:	a809883a 	mov	r4,r21
    c4bc:	2c4b883a 	add	r5,r5,r17
    c4c0:	800d883a 	mov	r6,r16
    c4c4:	0001fa40 	call	1fa4 <memcpy>
      ptr   += n;
    c4c8:	ac2b883a 	add	r21,r21,r16
      space -= n;
    c4cc:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c4d0:	8445883a 	add	r2,r16,r17
    c4d4:	1081ffcc 	andi	r2,r2,2047
    c4d8:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    c4dc:	04ffeb16 	blt	zero,r19,c48c <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    c4e0:	adc01c1e 	bne	r21,r23,c554 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c4e4:	e090000c 	andi	r2,fp,16384
    c4e8:	10000d1e 	bne	r2,zero,c520 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c4ec:	90800a17 	ldw	r2,40(r18)
    c4f0:	b080031e 	bne	r22,r2,c500 <altera_avalon_jtag_uart_read+0xb8>
    c4f4:	90c00917 	ldw	r3,36(r18)
    c4f8:	90800117 	ldw	r2,4(r18)
    c4fc:	18bffb36 	bltu	r3,r2,c4ec <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c500:	90800a17 	ldw	r2,40(r18)
    c504:	b0800426 	beq	r22,r2,c518 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c508:	04c0030e 	bge	zero,r19,c518 <altera_avalon_jtag_uart_read+0xd0>
    c50c:	003fde06 	br	c488 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    c510:	3890000c 	andi	r2,r7,16384
    c514:	1000021e 	bne	r2,zero,c520 <altera_avalon_jtag_uart_read+0xd8>
    c518:	00bffec4 	movi	r2,-5
    c51c:	00001806 	br	c580 <altera_avalon_jtag_uart_read+0x138>
    c520:	00bffd44 	movi	r2,-11
    c524:	00001606 	br	c580 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    c528:	91400e04 	addi	r5,r18,56
    c52c:	a809883a 	mov	r4,r21
    c530:	894b883a 	add	r5,r17,r5
    c534:	980d883a 	mov	r6,r19
    c538:	0001fa40 	call	1fa4 <memcpy>
      ptr   += n;
    c53c:	aceb883a 	add	r21,r21,r19
      space -= n;
    c540:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c544:	a445883a 	add	r2,r20,r17
    c548:	1081ffcc 	andi	r2,r2,2047
    c54c:	90800b15 	stw	r2,44(r18)
    c550:	003fe306 	br	c4e0 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c554:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c558:	00bfff84 	movi	r2,-2
    c55c:	2084703a 	and	r2,r4,r2
    c560:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c564:	90800817 	ldw	r2,32(r18)
    c568:	10800054 	ori	r2,r2,1
    c56c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c570:	90c00017 	ldw	r3,0(r18)
    c574:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c578:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    c57c:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    c580:	dfc00917 	ldw	ra,36(sp)
    c584:	df000817 	ldw	fp,32(sp)
    c588:	ddc00717 	ldw	r23,28(sp)
    c58c:	dd800617 	ldw	r22,24(sp)
    c590:	dd400517 	ldw	r21,20(sp)
    c594:	dd000417 	ldw	r20,16(sp)
    c598:	dcc00317 	ldw	r19,12(sp)
    c59c:	dc800217 	ldw	r18,8(sp)
    c5a0:	dc400117 	ldw	r17,4(sp)
    c5a4:	dc000017 	ldw	r16,0(sp)
    c5a8:	dec00a04 	addi	sp,sp,40
    c5ac:	f800283a 	ret

0000c5b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c5b0:	defff804 	addi	sp,sp,-32
    c5b4:	dfc00715 	stw	ra,28(sp)
    c5b8:	dd800615 	stw	r22,24(sp)
    c5bc:	dd400515 	stw	r21,20(sp)
    c5c0:	dd000415 	stw	r20,16(sp)
    c5c4:	dcc00315 	stw	r19,12(sp)
    c5c8:	dc800215 	stw	r18,8(sp)
    c5cc:	dc400115 	stw	r17,4(sp)
    c5d0:	dc000015 	stw	r16,0(sp)
    c5d4:	2021883a 	mov	r16,r4
    c5d8:	282d883a 	mov	r22,r5
    c5dc:	3011883a 	mov	r8,r6
    c5e0:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c5e4:	01800616 	blt	zero,r6,c600 <altera_avalon_jtag_uart_write+0x50>
    c5e8:	2829883a 	mov	r20,r5
    c5ec:	00002106 	br	c674 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    c5f0:	a585c83a 	sub	r2,r20,r22
    c5f4:	00004306 	br	c704 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    c5f8:	00bffd44 	movi	r2,-11
    c5fc:	00004106 	br	c704 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c600:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c604:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    c608:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    c60c:	9140032e 	bgeu	r18,r5,c61c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c610:	2c85c83a 	sub	r2,r5,r18
    c614:	11bfffc4 	addi	r6,r2,-1
    c618:	00000606 	br	c634 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    c61c:	28000326 	beq	r5,zero,c62c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c620:	00820004 	movi	r2,2048
    c624:	148dc83a 	sub	r6,r2,r18
    c628:	00000206 	br	c634 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c62c:	0081ffc4 	movi	r2,2047
    c630:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    c634:	30002626 	beq	r6,zero,c6d0 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    c638:	4027883a 	mov	r19,r8
    c63c:	3023883a 	mov	r17,r6
    c640:	4180012e 	bgeu	r8,r6,c648 <altera_avalon_jtag_uart_write+0x98>
    c644:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    c648:	81020e04 	addi	r4,r16,2104
    c64c:	2489883a 	add	r4,r4,r18
    c650:	a00b883a 	mov	r5,r20
    c654:	880d883a 	mov	r6,r17
    c658:	0001fa40 	call	1fa4 <memcpy>
      ptr   += n;
    c65c:	a469883a 	add	r20,r20,r17
      count -= n;
    c660:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c664:	9445883a 	add	r2,r18,r17
    c668:	1081ffcc 	andi	r2,r2,2047
    c66c:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c670:	023fe416 	blt	zero,r8,c604 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c674:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c678:	00bfff84 	movi	r2,-2
    c67c:	2084703a 	and	r2,r4,r2
    c680:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c684:	80800817 	ldw	r2,32(r16)
    c688:	10800094 	ori	r2,r2,2
    c68c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c690:	80c00017 	ldw	r3,0(r16)
    c694:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c698:	2001703a 	wrctl	status,r4
    c69c:	00000706 	br	c6bc <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c6a0:	80800d17 	ldw	r2,52(r16)
    c6a4:	1140031e 	bne	r2,r5,c6b4 <altera_avalon_jtag_uart_write+0x104>
    c6a8:	80c00917 	ldw	r3,36(r16)
    c6ac:	80800117 	ldw	r2,4(r16)
    c6b0:	18bffb36 	bltu	r3,r2,c6a0 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c6b4:	80800d17 	ldw	r2,52(r16)
    c6b8:	117fed1e 	bne	r2,r5,c670 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c6bc:	b53fcc1e 	bne	r22,r20,c5f0 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    c6c0:	a890000c 	andi	r2,r21,16384
    c6c4:	103fcc1e 	bne	r2,zero,c5f8 <altera_avalon_jtag_uart_write+0x48>
    c6c8:	00bffec4 	movi	r2,-5
    c6cc:	00000d06 	br	c704 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c6d0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c6d4:	00bfff84 	movi	r2,-2
    c6d8:	2084703a 	and	r2,r4,r2
    c6dc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c6e0:	80800817 	ldw	r2,32(r16)
    c6e4:	10800094 	ori	r2,r2,2
    c6e8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c6ec:	80c00017 	ldw	r3,0(r16)
    c6f0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6f4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    c6f8:	a890000c 	andi	r2,r21,16384
    c6fc:	103fe826 	beq	r2,zero,c6a0 <altera_avalon_jtag_uart_write+0xf0>
    c700:	003fee06 	br	c6bc <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    c704:	dfc00717 	ldw	ra,28(sp)
    c708:	dd800617 	ldw	r22,24(sp)
    c70c:	dd400517 	ldw	r21,20(sp)
    c710:	dd000417 	ldw	r20,16(sp)
    c714:	dcc00317 	ldw	r19,12(sp)
    c718:	dc800217 	ldw	r18,8(sp)
    c71c:	dc400117 	ldw	r17,4(sp)
    c720:	dc000017 	ldw	r16,0(sp)
    c724:	dec00804 	addi	sp,sp,32
    c728:	f800283a 	ret

0000c72c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c72c:	deffff04 	addi	sp,sp,-4
    c730:	dfc00015 	stw	ra,0(sp)
    c734:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c738:	00c00074 	movhi	r3,1
    c73c:	18c9d304 	addi	r3,r3,10060
    c740:	18800017 	ldw	r2,0(r3)
    c744:	1000011e 	bne	r2,zero,c74c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    c748:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c74c:	008001c4 	movi	r2,7
    c750:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    c754:	3009883a 	mov	r4,r6
    c758:	01800074 	movhi	r6,1
    c75c:	31b1dc04 	addi	r6,r6,-14480
    c760:	000db840 	call	db84 <alt_irq_register>
#endif  
}
    c764:	dfc00017 	ldw	ra,0(sp)
    c768:	dec00104 	addi	sp,sp,4
    c76c:	f800283a 	ret

0000c770 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c770:	defffe04 	addi	sp,sp,-8
    c774:	dfc00115 	stw	ra,4(sp)
    c778:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c77c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c780:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c784:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c788:	00bfff84 	movi	r2,-2
    c78c:	8084703a 	and	r2,r16,r2
    c790:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    c794:	000ddf00 	call	ddf0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c798:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    c79c:	dfc00117 	ldw	ra,4(sp)
    c7a0:	dc000017 	ldw	r16,0(sp)
    c7a4:	dec00204 	addi	sp,sp,8
    c7a8:	f800283a 	ret

0000c7ac <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    c7ac:	deffff04 	addi	sp,sp,-4
    c7b0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    c7b4:	01400074 	movhi	r5,1
    c7b8:	29428404 	addi	r5,r5,2576
    c7bc:	000d9f80 	call	d9f8 <alt_find_dev>

  return dev;
}
    c7c0:	dfc00017 	ldw	ra,0(sp)
    c7c4:	dec00104 	addi	sp,sp,4
    c7c8:	f800283a 	ret

0000c7cc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    c7cc:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    c7d0:	1004c03a 	cmpne	r2,r2,zero
    c7d4:	f800283a 	ret

0000c7d8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    c7d8:	2080004c 	andi	r2,r4,1
    c7dc:	f800283a 	ret

0000c7e0 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    c7e0:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    c7e4:	1004c03a 	cmpne	r2,r2,zero
    c7e8:	f800283a 	ret

0000c7ec <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    c7ec:	2004d43a 	srli	r2,r4,16
    c7f0:	f800283a 	ret

0000c7f4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    c7f4:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    c7f8:	1004c03a 	cmpne	r2,r2,zero
    c7fc:	f800283a 	ret

0000c800 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    c800:	20803fcc 	andi	r2,r4,255
    c804:	f800283a 	ret

0000c808 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    c808:	deffff04 	addi	sp,sp,-4
    c80c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    c810:	01400074 	movhi	r5,1
    c814:	29428404 	addi	r5,r5,2576
    c818:	000d9f80 	call	d9f8 <alt_find_dev>

  return dev;
}
    c81c:	dfc00017 	ldw	ra,0(sp)
    c820:	dec00104 	addi	sp,sp,4
    c824:	f800283a 	ret

0000c828 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    c828:	defffe04 	addi	sp,sp,-8
    c82c:	dfc00115 	stw	ra,4(sp)
    c830:	dc000015 	stw	r16,0(sp)
    c834:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    c838:	81000037 	ldwio	r4,0(r16)
    c83c:	000c7ec0 	call	c7ec <read_num_bytes_available>
    c840:	10bfffcc 	andi	r2,r2,65535
    c844:	103ffc1e 	bne	r2,zero,c838 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    c848:	dfc00117 	ldw	ra,4(sp)
    c84c:	dc000017 	ldw	r16,0(sp)
    c850:	dec00204 	addi	sp,sp,8
    c854:	f800283a 	ret

0000c858 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    c858:	defffd04 	addi	sp,sp,-12
    c85c:	dfc00215 	stw	ra,8(sp)
    c860:	dc400115 	stw	r17,4(sp)
    c864:	dc000015 	stw	r16,0(sp)
    c868:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    c86c:	20800a17 	ldw	r2,40(r4)
    c870:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    c874:	8009883a 	mov	r4,r16
    c878:	000c7f40 	call	c7f4 <read_data_valid>
    c87c:	10803fcc 	andi	r2,r2,255
    c880:	1000021e 	bne	r2,zero,c88c <alt_up_ps2_read_data_byte+0x34>
    c884:	00bfffc4 	movi	r2,-1
    c888:	00000406 	br	c89c <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    c88c:	8009883a 	mov	r4,r16
    c890:	000c8000 	call	c800 <read_data_byte>
    c894:	88800005 	stb	r2,0(r17)
    c898:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    c89c:	dfc00217 	ldw	ra,8(sp)
    c8a0:	dc400117 	ldw	r17,4(sp)
    c8a4:	dc000017 	ldw	r16,0(sp)
    c8a8:	dec00304 	addi	sp,sp,12
    c8ac:	f800283a 	ret

0000c8b0 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    c8b0:	defffb04 	addi	sp,sp,-20
    c8b4:	dfc00415 	stw	ra,16(sp)
    c8b8:	dcc00315 	stw	r19,12(sp)
    c8bc:	dc800215 	stw	r18,8(sp)
    c8c0:	dc400115 	stw	r17,4(sp)
    c8c4:	dc000015 	stw	r16,0(sp)
    c8c8:	2025883a 	mov	r18,r4
    c8cc:	2827883a 	mov	r19,r5
    c8d0:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    c8d4:	90800a17 	ldw	r2,40(r18)
    c8d8:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    c8dc:	8009883a 	mov	r4,r16
    c8e0:	000c7f40 	call	c7f4 <read_data_valid>
    c8e4:	10803fcc 	andi	r2,r2,255
    c8e8:	10000526 	beq	r2,zero,c900 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    c8ec:	8009883a 	mov	r4,r16
    c8f0:	000c8000 	call	c800 <read_data_byte>
    c8f4:	98800005 	stb	r2,0(r19)
    c8f8:	0005883a 	mov	r2,zero
    c8fc:	00000506 	br	c914 <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    c900:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    c904:	90800c17 	ldw	r2,48(r18)
    c908:	103ff226 	beq	r2,zero,c8d4 <alt_up_ps2_read_data_byte_timeout+0x24>
    c90c:	147ff12e 	bgeu	r2,r17,c8d4 <alt_up_ps2_read_data_byte_timeout+0x24>
    c910:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    c914:	dfc00417 	ldw	ra,16(sp)
    c918:	dcc00317 	ldw	r19,12(sp)
    c91c:	dc800217 	ldw	r18,8(sp)
    c920:	dc400117 	ldw	r17,4(sp)
    c924:	dc000017 	ldw	r16,0(sp)
    c928:	dec00504 	addi	sp,sp,20
    c92c:	f800283a 	ret

0000c930 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    c930:	deffff04 	addi	sp,sp,-4
    c934:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    c938:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    c93c:	0180010e 	bge	zero,r6,c944 <alt_up_ps2_read_fd+0x14>
    c940:	003fff06 	br	c940 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    c944:	000c8b00 	call	c8b0 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    c948:	1005003a 	cmpeq	r2,r2,zero
    c94c:	dfc00017 	ldw	ra,0(sp)
    c950:	dec00104 	addi	sp,sp,4
    c954:	f800283a 	ret

0000c958 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    c958:	defffc04 	addi	sp,sp,-16
    c95c:	dfc00315 	stw	ra,12(sp)
    c960:	dc400215 	stw	r17,8(sp)
    c964:	dc000115 	stw	r16,4(sp)
    c968:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    c96c:	d8000005 	stb	zero,0(sp)
    c970:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    c974:	8009883a 	mov	r4,r16
    c978:	d80b883a 	mov	r5,sp
    c97c:	000c8b00 	call	c8b0 <alt_up_ps2_read_data_byte_timeout>
    c980:	1007883a 	mov	r3,r2
		if ( status == 0)
    c984:	10803fcc 	andi	r2,r2,255
    c988:	1000041e 	bne	r2,zero,c99c <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    c98c:	d8800003 	ldbu	r2,0(sp)
    c990:	147ff81e 	bne	r2,r17,c974 <alt_up_ps2_wait_for_ack+0x1c>
    c994:	0005883a 	mov	r2,zero
    c998:	00000106 	br	c9a0 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    c99c:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    c9a0:	dfc00317 	ldw	ra,12(sp)
    c9a4:	dc400217 	ldw	r17,8(sp)
    c9a8:	dc000117 	ldw	r16,4(sp)
    c9ac:	dec00404 	addi	sp,sp,16
    c9b0:	f800283a 	ret

0000c9b4 <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    c9b4:	deffff04 	addi	sp,sp,-4
    c9b8:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    c9bc:	20800a17 	ldw	r2,40(r4)
    c9c0:	29403fcc 	andi	r5,r5,255
    c9c4:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    c9c8:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    c9cc:	11000137 	ldwio	r4,4(r2)
    c9d0:	000c7e00 	call	c7e0 <read_CE_bit>
    c9d4:	10803fcc 	andi	r2,r2,255
    c9d8:	10000226 	beq	r2,zero,c9e4 <alt_up_ps2_write_data_byte+0x30>
    c9dc:	00bffec4 	movi	r2,-5
    c9e0:	00000106 	br	c9e8 <alt_up_ps2_write_data_byte+0x34>
    c9e4:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    c9e8:	dfc00017 	ldw	ra,0(sp)
    c9ec:	dec00104 	addi	sp,sp,4
    c9f0:	f800283a 	ret

0000c9f4 <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    c9f4:	defffb04 	addi	sp,sp,-20
    c9f8:	dfc00415 	stw	ra,16(sp)
    c9fc:	dcc00315 	stw	r19,12(sp)
    ca00:	dc800215 	stw	r18,8(sp)
    ca04:	dc400115 	stw	r17,4(sp)
    ca08:	dc000015 	stw	r16,0(sp)
    ca0c:	2827883a 	mov	r19,r5
    ca10:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    ca14:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    ca18:	01800216 	blt	zero,r6,ca24 <alt_up_ps2_write_fd+0x30>
    ca1c:	0021883a 	mov	r16,zero
    ca20:	00000806 	br	ca44 <alt_up_ps2_write_fd+0x50>
    ca24:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    ca28:	9c05883a 	add	r2,r19,r16
    ca2c:	8809883a 	mov	r4,r17
    ca30:	11400003 	ldbu	r5,0(r2)
    ca34:	000c9b40 	call	c9b4 <alt_up_ps2_write_data_byte>
		if (status!=0)
    ca38:	1000021e 	bne	r2,zero,ca44 <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    ca3c:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    ca40:	943ff91e 	bne	r18,r16,ca28 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    ca44:	8005883a 	mov	r2,r16
    ca48:	dfc00417 	ldw	ra,16(sp)
    ca4c:	dcc00317 	ldw	r19,12(sp)
    ca50:	dc800217 	ldw	r18,8(sp)
    ca54:	dc400117 	ldw	r17,4(sp)
    ca58:	dc000017 	ldw	r16,0(sp)
    ca5c:	dec00504 	addi	sp,sp,20
    ca60:	f800283a 	ret

0000ca64 <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    ca64:	defffe04 	addi	sp,sp,-8
    ca68:	dfc00115 	stw	ra,4(sp)
    ca6c:	dc000015 	stw	r16,0(sp)
    ca70:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    ca74:	29403fcc 	andi	r5,r5,255
    ca78:	000c9b40 	call	c9b4 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    ca7c:	1000021e 	bne	r2,zero,ca88 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    ca80:	8009883a 	mov	r4,r16
    ca84:	000c9580 	call	c958 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    ca88:	dfc00117 	ldw	ra,4(sp)
    ca8c:	dc000017 	ldw	r16,0(sp)
    ca90:	dec00204 	addi	sp,sp,8
    ca94:	f800283a 	ret

0000ca98 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    ca98:	defffd04 	addi	sp,sp,-12
    ca9c:	dfc00215 	stw	ra,8(sp)
    caa0:	dc000115 	stw	r16,4(sp)
    caa4:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    caa8:	01403fc4 	movi	r5,255
    caac:	000ca640 	call	ca64 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    cab0:	1000171e 	bne	r2,zero,cb10 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    cab4:	8009883a 	mov	r4,r16
    cab8:	d80b883a 	mov	r5,sp
    cabc:	000c8b00 	call	c8b0 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    cac0:	1000131e 	bne	r2,zero,cb10 <alt_up_ps2_init+0x78>
    cac4:	d8c00003 	ldbu	r3,0(sp)
    cac8:	00802a84 	movi	r2,170
    cacc:	1880101e 	bne	r3,r2,cb10 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    cad0:	8009883a 	mov	r4,r16
    cad4:	d80b883a 	mov	r5,sp
    cad8:	000c8b00 	call	c8b0 <alt_up_ps2_read_data_byte_timeout>
    cadc:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    cae0:	00bfe304 	movi	r2,-116
    cae4:	1880031e 	bne	r3,r2,caf4 <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    cae8:	00800044 	movi	r2,1
    caec:	80800d15 	stw	r2,52(r16)
    caf0:	00000706 	br	cb10 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    caf4:	1800061e 	bne	r3,zero,cb10 <alt_up_ps2_init+0x78>
    caf8:	d8800003 	ldbu	r2,0(sp)
    cafc:	1000041e 	bne	r2,zero,cb10 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    cb00:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    cb04:	8009883a 	mov	r4,r16
    cb08:	01403d04 	movi	r5,244
    cb0c:	000c9b40 	call	c9b4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    cb10:	dfc00217 	ldw	ra,8(sp)
    cb14:	dc000117 	ldw	r16,4(sp)
    cb18:	dec00304 	addi	sp,sp,12
    cb1c:	f800283a 	ret

0000cb20 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    cb20:	20800a17 	ldw	r2,40(r4)
    cb24:	10800104 	addi	r2,r2,4
    cb28:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    cb2c:	013fff84 	movi	r4,-2
    cb30:	1906703a 	and	r3,r3,r4
    cb34:	10c00035 	stwio	r3,0(r2)
}
    cb38:	f800283a 	ret

0000cb3c <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    cb3c:	20c00a17 	ldw	r3,40(r4)
    cb40:	18c00104 	addi	r3,r3,4
    cb44:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    cb48:	10800054 	ori	r2,r2,1
    cb4c:	18800035 	stwio	r2,0(r3)
}
    cb50:	f800283a 	ret

0000cb54 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    cb54:	200495ba 	slli	r2,r4,22
}
    cb58:	1005d7fa 	srai	r2,r2,31
    cb5c:	f800283a 	ret

0000cb60 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    cb60:	deffff04 	addi	sp,sp,-4
    cb64:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    cb68:	01400074 	movhi	r5,1
    cb6c:	29428404 	addi	r5,r5,2576
    cb70:	000d9f80 	call	d9f8 <alt_find_dev>

  return dev;
}
    cb74:	dfc00017 	ldw	ra,0(sp)
    cb78:	dec00104 	addi	sp,sp,4
    cb7c:	f800283a 	ret

0000cb80 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    cb80:	defffd04 	addi	sp,sp,-12
    cb84:	dfc00215 	stw	ra,8(sp)
    cb88:	dc400115 	stw	r17,4(sp)
    cb8c:	dc000015 	stw	r16,0(sp)
    cb90:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    cb94:	20800a17 	ldw	r2,40(r4)
    cb98:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    cb9c:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    cba0:	8009883a 	mov	r4,r16
    cba4:	000cb540 	call	cb54 <alt_up_rs232_check_parity>
    cba8:	88800005 	stb	r2,0(r17)
    cbac:	8420000c 	andi	r16,r16,32768
    cbb0:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    cbb4:	80bfffc4 	addi	r2,r16,-1
    cbb8:	dfc00217 	ldw	ra,8(sp)
    cbbc:	dc400117 	ldw	r17,4(sp)
    cbc0:	dc000017 	ldw	r16,0(sp)
    cbc4:	dec00304 	addi	sp,sp,12
    cbc8:	f800283a 	ret

0000cbcc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    cbcc:	defff904 	addi	sp,sp,-28
    cbd0:	dfc00615 	stw	ra,24(sp)
    cbd4:	dd000515 	stw	r20,20(sp)
    cbd8:	dcc00415 	stw	r19,16(sp)
    cbdc:	dc800315 	stw	r18,12(sp)
    cbe0:	dc400215 	stw	r17,8(sp)
    cbe4:	dc000115 	stw	r16,4(sp)
    cbe8:	2821883a 	mov	r16,r5
    cbec:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    cbf0:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    cbf4:	3000021e 	bne	r6,zero,cc00 <alt_up_rs232_read_fd+0x34>
    cbf8:	0025883a 	mov	r18,zero
    cbfc:	00000a06 	br	cc28 <alt_up_rs232_read_fd+0x5c>
    cc00:	0025883a 	mov	r18,zero
    cc04:	04400044 	movi	r17,1
    cc08:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    cc0c:	8461883a 	add	r16,r16,r17
    cc10:	9809883a 	mov	r4,r19
    cc14:	d80d883a 	mov	r6,sp
    cc18:	000cb800 	call	cb80 <alt_up_rs232_read_data>
    cc1c:	1000021e 	bne	r2,zero,cc28 <alt_up_rs232_read_fd+0x5c>
			count++;
    cc20:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    cc24:	a4bff81e 	bne	r20,r18,cc08 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    cc28:	9005883a 	mov	r2,r18
    cc2c:	dfc00617 	ldw	ra,24(sp)
    cc30:	dd000517 	ldw	r20,20(sp)
    cc34:	dcc00417 	ldw	r19,16(sp)
    cc38:	dc800317 	ldw	r18,12(sp)
    cc3c:	dc400217 	ldw	r17,8(sp)
    cc40:	dc000117 	ldw	r16,4(sp)
    cc44:	dec00704 	addi	sp,sp,28
    cc48:	f800283a 	ret

0000cc4c <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    cc4c:	20800a17 	ldw	r2,40(r4)
    cc50:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    cc54:	1004d43a 	srli	r2,r2,16
    cc58:	f800283a 	ret

0000cc5c <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    cc5c:	20800a17 	ldw	r2,40(r4)
    cc60:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    cc64:	29403fcc 	andi	r5,r5,255
    cc68:	11400035 	stwio	r5,0(r2)
	return 0;
}
    cc6c:	0005883a 	mov	r2,zero
    cc70:	f800283a 	ret

0000cc74 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    cc74:	defffb04 	addi	sp,sp,-20
    cc78:	dfc00415 	stw	ra,16(sp)
    cc7c:	dcc00315 	stw	r19,12(sp)
    cc80:	dc800215 	stw	r18,8(sp)
    cc84:	dc400115 	stw	r17,4(sp)
    cc88:	dc000015 	stw	r16,0(sp)
    cc8c:	2827883a 	mov	r19,r5
    cc90:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    cc94:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    cc98:	3000021e 	bne	r6,zero,cca4 <alt_up_rs232_write_fd+0x30>
    cc9c:	0021883a 	mov	r16,zero
    cca0:	00000806 	br	ccc4 <alt_up_rs232_write_fd+0x50>
    cca4:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    cca8:	84c5883a 	add	r2,r16,r19
    ccac:	8809883a 	mov	r4,r17
    ccb0:	11400003 	ldbu	r5,0(r2)
    ccb4:	000cc5c0 	call	cc5c <alt_up_rs232_write_data>
    ccb8:	1000021e 	bne	r2,zero,ccc4 <alt_up_rs232_write_fd+0x50>
		{
			count++;
    ccbc:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    ccc0:	943ff91e 	bne	r18,r16,cca8 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    ccc4:	8005883a 	mov	r2,r16
    ccc8:	dfc00417 	ldw	ra,16(sp)
    cccc:	dcc00317 	ldw	r19,12(sp)
    ccd0:	dc800217 	ldw	r18,8(sp)
    ccd4:	dc400117 	ldw	r17,4(sp)
    ccd8:	dc000017 	ldw	r16,0(sp)
    ccdc:	dec00504 	addi	sp,sp,20
    cce0:	f800283a 	ret

0000cce4 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    cce4:	20800a17 	ldw	r2,40(r4)
    cce8:	10800104 	addi	r2,r2,4
    ccec:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ccf0:	013fff84 	movi	r4,-2
    ccf4:	1906703a 	and	r3,r3,r4
    ccf8:	10c00035 	stwio	r3,0(r2)
}
    ccfc:	f800283a 	ret

0000cd00 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    cd00:	20c00a17 	ldw	r3,40(r4)
    cd04:	18c00104 	addi	r3,r3,4
    cd08:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    cd0c:	10800054 	ori	r2,r2,1
    cd10:	18800035 	stwio	r2,0(r3)
}
    cd14:	f800283a 	ret

0000cd18 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    cd18:	20800a17 	ldw	r2,40(r4)
    cd1c:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    cd20:	10bfffcc 	andi	r2,r2,65535
    cd24:	f800283a 	ret

0000cd28 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    cd28:	20800c17 	ldw	r2,48(r4)
    cd2c:	30801c2e 	bgeu	r6,r2,cda0 <alt_up_char_buffer_string+0x78>
    cd30:	20800d17 	ldw	r2,52(r4)
    cd34:	38801a2e 	bgeu	r7,r2,cda0 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    cd38:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    cd3c:	28c00003 	ldbu	r3,0(r5)
    cd40:	18803fcc 	andi	r2,r3,255
    cd44:	1080201c 	xori	r2,r2,128
    cd48:	10bfe004 	addi	r2,r2,-128
    cd4c:	10001626 	beq	r2,zero,cda8 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    cd50:	3a04983a 	sll	r2,r7,r8
    cd54:	308f883a 	add	r7,r6,r2
    cd58:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    cd5c:	20800b17 	ldw	r2,44(r4)
    cd60:	3885883a 	add	r2,r7,r2
    cd64:	18c03fcc 	andi	r3,r3,255
    cd68:	18c0201c 	xori	r3,r3,128
    cd6c:	18ffe004 	addi	r3,r3,-128
    cd70:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    cd74:	320d883a 	add	r6,r6,r8
    cd78:	20800c17 	ldw	r2,48(r4)
    cd7c:	3080082e 	bgeu	r6,r2,cda0 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    cd80:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    cd84:	28c00003 	ldbu	r3,0(r5)
    cd88:	18803fcc 	andi	r2,r3,255
    cd8c:	1080201c 	xori	r2,r2,128
    cd90:	10bfe004 	addi	r2,r2,-128
    cd94:	10000426 	beq	r2,zero,cda8 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    cd98:	3a0f883a 	add	r7,r7,r8
    cd9c:	003fef06 	br	cd5c <alt_up_char_buffer_string+0x34>
    cda0:	00bfffc4 	movi	r2,-1
    cda4:	f800283a 	ret
    cda8:	0005883a 	mov	r2,zero
	}
	return 0;
}
    cdac:	f800283a 	ret

0000cdb0 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    cdb0:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    cdb4:	20800c17 	ldw	r2,48(r4)
    cdb8:	3080112e 	bgeu	r6,r2,ce00 <alt_up_char_buffer_draw+0x50>
    cdbc:	20800d17 	ldw	r2,52(r4)
    cdc0:	38800f2e 	bgeu	r7,r2,ce00 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    cdc4:	20c00f17 	ldw	r3,60(r4)
    cdc8:	30c6703a 	and	r3,r6,r3
    cdcc:	20800e17 	ldw	r2,56(r4)
    cdd0:	1886983a 	sll	r3,r3,r2
    cdd4:	20801117 	ldw	r2,68(r4)
    cdd8:	3884703a 	and	r2,r7,r2
    cddc:	21001017 	ldw	r4,64(r4)
    cde0:	1104983a 	sll	r2,r2,r4
    cde4:	1886b03a 	or	r3,r3,r2
    cde8:	40800b17 	ldw	r2,44(r8)
    cdec:	1887883a 	add	r3,r3,r2
    cdf0:	28803fcc 	andi	r2,r5,255
    cdf4:	18800025 	stbio	r2,0(r3)
    cdf8:	0005883a 	mov	r2,zero
    cdfc:	f800283a 	ret

	return 0;
    ce00:	00bfffc4 	movi	r2,-1
}
    ce04:	f800283a 	ret

0000ce08 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    ce08:	20c00a17 	ldw	r3,40(r4)
    ce0c:	00800044 	movi	r2,1
    ce10:	188000a5 	stbio	r2,2(r3)
    ce14:	20800a17 	ldw	r2,40(r4)
    ce18:	10c00084 	addi	r3,r2,2
    ce1c:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    ce20:	18800023 	ldbuio	r2,0(r3)
    ce24:	1104703a 	and	r2,r2,r4
    ce28:	103ffd1e 	bne	r2,zero,ce20 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    ce2c:	f800283a 	ret

0000ce30 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    ce30:	deffff04 	addi	sp,sp,-4
    ce34:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    ce38:	01400074 	movhi	r5,1
    ce3c:	29428404 	addi	r5,r5,2576
    ce40:	000d9f80 	call	d9f8 <alt_find_dev>

  return dev;
}
    ce44:	dfc00017 	ldw	ra,0(sp)
    ce48:	dec00104 	addi	sp,sp,4
    ce4c:	f800283a 	ret

0000ce50 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    ce50:	defffe04 	addi	sp,sp,-8
    ce54:	dfc00115 	stw	ra,4(sp)
    ce58:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    ce5c:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    ce60:	80800007 	ldb	r2,0(r16)
    ce64:	10000a26 	beq	r2,zero,ce90 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    ce68:	8009883a 	mov	r4,r16
    ce6c:	01400074 	movhi	r5,1
    ce70:	297b4904 	addi	r5,r5,-4828
    ce74:	0008ec80 	call	8ec8 <strcmp>
    ce78:	1000021e 	bne	r2,zero,ce84 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    ce7c:	80000005 	stb	zero,0(r16)
    ce80:	00000306 	br	ce90 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    ce84:	84000044 	addi	r16,r16,1
    ce88:	80800007 	ldb	r2,0(r16)
    ce8c:	103ff61e 	bne	r2,zero,ce68 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    ce90:	dfc00117 	ldw	ra,4(sp)
    ce94:	dc000017 	ldw	r16,0(sp)
    ce98:	dec00204 	addi	sp,sp,8
    ce9c:	f800283a 	ret

0000cea0 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    cea0:	da000017 	ldw	r8,0(sp)
    cea4:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    cea8:	1800051e 	bne	r3,zero,cec0 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    ceac:	29c5383a 	mul	r2,r5,r7
    ceb0:	3085883a 	add	r2,r6,r2
    ceb4:	1105883a 	add	r2,r2,r4
    ceb8:	12000025 	stbio	r8,0(r2)
    cebc:	f800283a 	ret
	else if (mode == 1)
    cec0:	00800044 	movi	r2,1
    cec4:	1880061e 	bne	r3,r2,cee0 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    cec8:	29c5383a 	mul	r2,r5,r7
    cecc:	3085883a 	add	r2,r6,r2
    ced0:	1085883a 	add	r2,r2,r2
    ced4:	1105883a 	add	r2,r2,r4
    ced8:	1200002d 	sthio	r8,0(r2)
    cedc:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    cee0:	29c5383a 	mul	r2,r5,r7
    cee4:	1185883a 	add	r2,r2,r6
    cee8:	1085883a 	add	r2,r2,r2
    ceec:	1085883a 	add	r2,r2,r2
    cef0:	1105883a 	add	r2,r2,r4
    cef4:	12000035 	stwio	r8,0(r2)
    cef8:	f800283a 	ret

0000cefc <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    cefc:	defff304 	addi	sp,sp,-52
    cf00:	dfc00c15 	stw	ra,48(sp)
    cf04:	df000b15 	stw	fp,44(sp)
    cf08:	ddc00a15 	stw	r23,40(sp)
    cf0c:	dd800915 	stw	r22,36(sp)
    cf10:	dd400815 	stw	r21,32(sp)
    cf14:	dd000715 	stw	r20,28(sp)
    cf18:	dcc00615 	stw	r19,24(sp)
    cf1c:	dc800515 	stw	r18,20(sp)
    cf20:	dc400415 	stw	r17,16(sp)
    cf24:	dc000315 	stw	r16,12(sp)
    cf28:	3011883a 	mov	r8,r6
    cf2c:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    cf30:	4987c83a 	sub	r3,r9,r6
    cf34:	1800010e 	bge	r3,zero,cf3c <alt_up_pixel_buffer_dma_draw_line+0x40>
    cf38:	00c7c83a 	sub	r3,zero,r3
    cf3c:	3945c83a 	sub	r2,r7,r5
    cf40:	1000010e 	bge	r2,zero,cf48 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    cf44:	0085c83a 	sub	r2,zero,r2
    cf48:	10c4803a 	cmplt	r2,r2,r3
    cf4c:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    cf50:	20c00e17 	ldw	r3,56(r4)
    cf54:	00800044 	movi	r2,1
    cf58:	1880021e 	bne	r3,r2,cf64 <alt_up_pixel_buffer_dma_draw_line+0x68>
    cf5c:	d8000215 	stw	zero,8(sp)
    cf60:	00000306 	br	cf70 <alt_up_pixel_buffer_dma_draw_line+0x74>
    cf64:	18c00098 	cmpnei	r3,r3,2
    cf68:	18c00044 	addi	r3,r3,1
    cf6c:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    cf70:	20800d17 	ldw	r2,52(r4)
    cf74:	1000061e 	bne	r2,zero,cf90 <alt_up_pixel_buffer_dma_draw_line+0x94>
    cf78:	20801317 	ldw	r2,76(r4)
    cf7c:	d8c00217 	ldw	r3,8(sp)
    cf80:	10c5c83a 	sub	r2,r2,r3
    cf84:	00c00044 	movi	r3,1
    cf88:	18ae983a 	sll	r23,r3,r2
    cf8c:	00000106 	br	cf94 <alt_up_pixel_buffer_dma_draw_line+0x98>
    cf90:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    cf94:	d8c00f17 	ldw	r3,60(sp)
    cf98:	00800044 	movi	r2,1
    cf9c:	1880021e 	bne	r3,r2,cfa8 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    cfa0:	25800c17 	ldw	r22,48(r4)
    cfa4:	00000106 	br	cfac <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    cfa8:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    cfac:	50000326 	beq	r10,zero,cfbc <alt_up_pixel_buffer_dma_draw_line+0xc0>
    cfb0:	400d883a 	mov	r6,r8
    cfb4:	4827883a 	mov	r19,r9
    cfb8:	00000406 	br	cfcc <alt_up_pixel_buffer_dma_draw_line+0xd0>
    cfbc:	280d883a 	mov	r6,r5
    cfc0:	400b883a 	mov	r5,r8
    cfc4:	3827883a 	mov	r19,r7
    cfc8:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    cfcc:	9980060e 	bge	r19,r6,cfe8 <alt_up_pixel_buffer_dma_draw_line+0xec>
    cfd0:	9805883a 	mov	r2,r19
    cfd4:	3027883a 	mov	r19,r6
    cfd8:	100d883a 	mov	r6,r2
    cfdc:	3805883a 	mov	r2,r7
    cfe0:	280f883a 	mov	r7,r5
    cfe4:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    cfe8:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    cfec:	3969c83a 	sub	r20,r7,r5
    cff0:	a000010e 	bge	r20,zero,cff8 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    cff4:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    cff8:	a804d7fa 	srli	r2,r21,31
    cffc:	1545883a 	add	r2,r2,r21
    d000:	1005d07a 	srai	r2,r2,1
    d004:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    d008:	29c0020e 	bge	r5,r7,d014 <alt_up_pixel_buffer_dma_draw_line+0x118>
    d00c:	07000044 	movi	fp,1
    d010:	00000106 	br	d018 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    d014:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    d018:	50000226 	beq	r10,zero,d024 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    d01c:	9980030e 	bge	r19,r6,d02c <alt_up_pixel_buffer_dma_draw_line+0x130>
    d020:	00002506 	br	d0b8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    d024:	9980130e 	bge	r19,r6,d074 <alt_up_pixel_buffer_dma_draw_line+0x178>
    d028:	00002306 	br	d0b8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    d02c:	3021883a 	mov	r16,r6
    d030:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    d034:	d8800e17 	ldw	r2,56(sp)
    d038:	d8800015 	stw	r2,0(sp)
    d03c:	d8c00217 	ldw	r3,8(sp)
    d040:	d8c00115 	stw	r3,4(sp)
    d044:	b009883a 	mov	r4,r22
    d048:	b80b883a 	mov	r5,r23
    d04c:	900d883a 	mov	r6,r18
    d050:	800f883a 	mov	r7,r16
    d054:	000cea00 	call	cea0 <helper_plot_pixel>
			error = error + deltay;
    d058:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    d05c:	0440020e 	bge	zero,r17,d068 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    d060:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    d064:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    d068:	84000044 	addi	r16,r16,1
    d06c:	9c001216 	blt	r19,r16,d0b8 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    d070:	003ff006 	br	d034 <alt_up_pixel_buffer_dma_draw_line+0x138>
    d074:	3021883a 	mov	r16,r6
    d078:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    d07c:	d8800e17 	ldw	r2,56(sp)
    d080:	d8800015 	stw	r2,0(sp)
    d084:	d8c00217 	ldw	r3,8(sp)
    d088:	d8c00115 	stw	r3,4(sp)
    d08c:	b009883a 	mov	r4,r22
    d090:	b80b883a 	mov	r5,r23
    d094:	800d883a 	mov	r6,r16
    d098:	900f883a 	mov	r7,r18
    d09c:	000cea00 	call	cea0 <helper_plot_pixel>
			error = error + deltay;
    d0a0:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    d0a4:	0440020e 	bge	zero,r17,d0b0 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    d0a8:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    d0ac:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    d0b0:	84000044 	addi	r16,r16,1
    d0b4:	9c3ff10e 	bge	r19,r16,d07c <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    d0b8:	dfc00c17 	ldw	ra,48(sp)
    d0bc:	df000b17 	ldw	fp,44(sp)
    d0c0:	ddc00a17 	ldw	r23,40(sp)
    d0c4:	dd800917 	ldw	r22,36(sp)
    d0c8:	dd400817 	ldw	r21,32(sp)
    d0cc:	dd000717 	ldw	r20,28(sp)
    d0d0:	dcc00617 	ldw	r19,24(sp)
    d0d4:	dc800517 	ldw	r18,20(sp)
    d0d8:	dc400417 	ldw	r17,16(sp)
    d0dc:	dc000317 	ldw	r16,12(sp)
    d0e0:	dec00d04 	addi	sp,sp,52
    d0e4:	f800283a 	ret

0000d0e8 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    d0e8:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    d0ec:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    d0f0:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    d0f4:	3980022e 	bgeu	r7,r6,d100 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    d0f8:	3011883a 	mov	r8,r6
    d0fc:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    d100:	2a405d2e 	bgeu	r5,r9,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d104:	30805c2e 	bgeu	r6,r2,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    d108:	40800136 	bltu	r8,r2,d110 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    d10c:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    d110:	d8c00117 	ldw	r3,4(sp)
    d114:	00800044 	movi	r2,1
    d118:	1880021e 	bne	r3,r2,d124 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    d11c:	20c00c17 	ldw	r3,48(r4)
    d120:	00000106 	br	d128 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    d124:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    d128:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    d12c:	20800d17 	ldw	r2,52(r4)
    d130:	1000281e 	bne	r2,zero,d1d4 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    d134:	22801317 	ldw	r10,76(r4)
    d138:	3284983a 	sll	r2,r6,r10
    d13c:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    d140:	21000e17 	ldw	r4,56(r4)
    d144:	00800044 	movi	r2,1
    d148:	2080091e 	bne	r4,r2,d170 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    d14c:	41804a36 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d150:	1013883a 	mov	r9,r2
    d154:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    d158:	1945883a 	add	r2,r3,r5
    d15c:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    d160:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    d164:	324d883a 	add	r6,r6,r9
    d168:	41804336 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d16c:	003ffa06 	br	d158 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d170:	00800084 	movi	r2,2
    d174:	2080021e 	bne	r4,r2,d180 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    d178:	4180032e 	bgeu	r8,r6,d188 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    d17c:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    d180:	41800a2e 	bgeu	r8,r6,d1ac <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    d184:	f800283a 	ret
    d188:	294b883a 	add	r5,r5,r5
    d18c:	02400044 	movi	r9,1
    d190:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    d194:	28c5883a 	add	r2,r5,r3
    d198:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    d19c:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    d1a0:	324d883a 	add	r6,r6,r9
    d1a4:	41803436 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d1a8:	003ffa06 	br	d194 <alt_up_pixel_buffer_dma_draw_vline+0xac>
    d1ac:	2945883a 	add	r2,r5,r5
    d1b0:	108b883a 	add	r5,r2,r2
    d1b4:	02400044 	movi	r9,1
    d1b8:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    d1bc:	28c5883a 	add	r2,r5,r3
    d1c0:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    d1c4:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    d1c8:	324d883a 	add	r6,r6,r9
    d1cc:	41802a36 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d1d0:	003ffa06 	br	d1bc <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    d1d4:	21000e17 	ldw	r4,56(r4)
    d1d8:	00800044 	movi	r2,1
    d1dc:	20800b1e 	bne	r4,r2,d20c <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d1e0:	41802536 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d1e4:	4809883a 	mov	r4,r9
    d1e8:	3245383a 	mul	r2,r6,r9
    d1ec:	1885883a 	add	r2,r3,r2
    d1f0:	1145883a 	add	r2,r2,r5
    d1f4:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    d1f8:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d1fc:	30cd883a 	add	r6,r6,r3
    d200:	1105883a 	add	r2,r2,r4
    d204:	41801c36 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d208:	003ffb06 	br	d1f8 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d20c:	00800084 	movi	r2,2
    d210:	20800c1e 	bne	r4,r2,d244 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d214:	41801836 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    d218:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    d21c:	3105383a 	mul	r2,r6,r4
    d220:	1887883a 	add	r3,r3,r2
    d224:	294b883a 	add	r5,r5,r5
    d228:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    d22c:	28c5883a 	add	r2,r5,r3
    d230:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    d234:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d238:	324d883a 	add	r6,r6,r9
    d23c:	41800e36 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    d240:	003ffa06 	br	d22c <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d244:	41800c36 	bltu	r8,r6,d278 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    d248:	4a45883a 	add	r2,r9,r9
    d24c:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    d250:	3105383a 	mul	r2,r6,r4
    d254:	1887883a 	add	r3,r3,r2
    d258:	2945883a 	add	r2,r5,r5
    d25c:	108b883a 	add	r5,r2,r2
    d260:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    d264:	28c5883a 	add	r2,r5,r3
    d268:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    d26c:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d270:	324d883a 	add	r6,r6,r9
    d274:	41bffb2e 	bgeu	r8,r6,d264 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    d278:	f800283a 	ret

0000d27c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    d27c:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    d280:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    d284:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    d288:	3140022e 	bgeu	r6,r5,d294 <alt_up_pixel_buffer_dma_draw_hline+0x18>
    d28c:	2813883a 	mov	r9,r5
    d290:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    d294:	2a00552e 	bgeu	r5,r8,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d298:	3880542e 	bgeu	r7,r2,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    d29c:	4a000136 	bltu	r9,r8,d2a4 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    d2a0:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    d2a4:	d8c00117 	ldw	r3,4(sp)
    d2a8:	00800044 	movi	r2,1
    d2ac:	1880021e 	bne	r3,r2,d2b8 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    d2b0:	21800c17 	ldw	r6,48(r4)
    d2b4:	00000106 	br	d2bc <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    d2b8:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    d2bc:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    d2c0:	20800d17 	ldw	r2,52(r4)
    d2c4:	1000231e 	bne	r2,zero,d354 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    d2c8:	20801317 	ldw	r2,76(r4)
    d2cc:	3884983a 	sll	r2,r7,r2
    d2d0:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    d2d4:	21000e17 	ldw	r4,56(r4)
    d2d8:	00800044 	movi	r2,1
    d2dc:	2080081e 	bne	r4,r2,d300 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    d2e0:	49404236 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d2e4:	3945883a 	add	r2,r7,r5
    d2e8:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    d2ec:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    d2f0:	290b883a 	add	r5,r5,r4
    d2f4:	1105883a 	add	r2,r2,r4
    d2f8:	49403c36 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d2fc:	003ffb06 	br	d2ec <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d300:	00800084 	movi	r2,2
    d304:	2080021e 	bne	r4,r2,d310 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    d308:	4940032e 	bgeu	r9,r5,d318 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    d30c:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    d310:	4940082e 	bgeu	r9,r5,d334 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    d314:	f800283a 	ret
    d318:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    d31c:	2945883a 	add	r2,r5,r5
    d320:	11c5883a 	add	r2,r2,r7
    d324:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    d328:	290b883a 	add	r5,r5,r4
    d32c:	49402f36 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d330:	003ffa06 	br	d31c <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    d334:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    d338:	2945883a 	add	r2,r5,r5
    d33c:	1085883a 	add	r2,r2,r2
    d340:	11c5883a 	add	r2,r2,r7
    d344:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    d348:	290b883a 	add	r5,r5,r4
    d34c:	49402736 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d350:	003ff906 	br	d338 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    d354:	21000e17 	ldw	r4,56(r4)
    d358:	00800044 	movi	r2,1
    d35c:	20800a1e 	bne	r4,r2,d388 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    d360:	41c5383a 	mul	r2,r8,r7
    d364:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    d368:	49402036 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d36c:	1145883a 	add	r2,r2,r5
    d370:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    d374:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    d378:	290b883a 	add	r5,r5,r4
    d37c:	1105883a 	add	r2,r2,r4
    d380:	49401a36 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d384:	003ffb06 	br	d374 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d388:	00800084 	movi	r2,2
    d38c:	20800b1e 	bne	r4,r2,d3bc <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    d390:	4205883a 	add	r2,r8,r8
    d394:	3885383a 	mul	r2,r7,r2
    d398:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    d39c:	49401336 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d3a0:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    d3a4:	2945883a 	add	r2,r5,r5
    d3a8:	11c5883a 	add	r2,r2,r7
    d3ac:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    d3b0:	290b883a 	add	r5,r5,r4
    d3b4:	49400d36 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d3b8:	003ffa06 	br	d3a4 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    d3bc:	4205883a 	add	r2,r8,r8
    d3c0:	1085883a 	add	r2,r2,r2
    d3c4:	3885383a 	mul	r2,r7,r2
    d3c8:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    d3cc:	49400736 	bltu	r9,r5,d3ec <alt_up_pixel_buffer_dma_draw_hline+0x170>
    d3d0:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    d3d4:	2945883a 	add	r2,r5,r5
    d3d8:	1085883a 	add	r2,r2,r2
    d3dc:	11c5883a 	add	r2,r2,r7
    d3e0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    d3e4:	290b883a 	add	r5,r5,r4
    d3e8:	497ffa2e 	bgeu	r9,r5,d3d4 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    d3ec:	f800283a 	ret

0000d3f0 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    d3f0:	defff604 	addi	sp,sp,-40
    d3f4:	dfc00915 	stw	ra,36(sp)
    d3f8:	dd800815 	stw	r22,32(sp)
    d3fc:	dd400715 	stw	r21,28(sp)
    d400:	dd000615 	stw	r20,24(sp)
    d404:	dcc00515 	stw	r19,20(sp)
    d408:	dc800415 	stw	r18,16(sp)
    d40c:	dc400315 	stw	r17,12(sp)
    d410:	dc000215 	stw	r16,8(sp)
    d414:	2029883a 	mov	r20,r4
    d418:	282d883a 	mov	r22,r5
    d41c:	302b883a 	mov	r21,r6
    d420:	3825883a 	mov	r18,r7
    d424:	dcc00a17 	ldw	r19,40(sp)
    d428:	dc000b17 	ldw	r16,44(sp)
    d42c:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    d430:	dc000015 	stw	r16,0(sp)
    d434:	dc400115 	stw	r17,4(sp)
    d438:	380d883a 	mov	r6,r7
    d43c:	a80f883a 	mov	r7,r21
    d440:	000d27c0 	call	d27c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    d444:	dc000015 	stw	r16,0(sp)
    d448:	dc400115 	stw	r17,4(sp)
    d44c:	a009883a 	mov	r4,r20
    d450:	b00b883a 	mov	r5,r22
    d454:	900d883a 	mov	r6,r18
    d458:	980f883a 	mov	r7,r19
    d45c:	000d27c0 	call	d27c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    d460:	dc000015 	stw	r16,0(sp)
    d464:	dc400115 	stw	r17,4(sp)
    d468:	a009883a 	mov	r4,r20
    d46c:	b00b883a 	mov	r5,r22
    d470:	a80d883a 	mov	r6,r21
    d474:	980f883a 	mov	r7,r19
    d478:	000d0e80 	call	d0e8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    d47c:	dc000015 	stw	r16,0(sp)
    d480:	dc400115 	stw	r17,4(sp)
    d484:	a009883a 	mov	r4,r20
    d488:	900b883a 	mov	r5,r18
    d48c:	a80d883a 	mov	r6,r21
    d490:	980f883a 	mov	r7,r19
    d494:	000d0e80 	call	d0e8 <alt_up_pixel_buffer_dma_draw_vline>
}
    d498:	dfc00917 	ldw	ra,36(sp)
    d49c:	dd800817 	ldw	r22,32(sp)
    d4a0:	dd400717 	ldw	r21,28(sp)
    d4a4:	dd000617 	ldw	r20,24(sp)
    d4a8:	dcc00517 	ldw	r19,20(sp)
    d4ac:	dc800417 	ldw	r18,16(sp)
    d4b0:	dc400317 	ldw	r17,12(sp)
    d4b4:	dc000217 	ldw	r16,8(sp)
    d4b8:	dec00a04 	addi	sp,sp,40
    d4bc:	f800283a 	ret

0000d4c0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    d4c0:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    d4c4:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    d4c8:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    d4cc:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    d4d0:	3940022e 	bgeu	r7,r5,d4dc <alt_up_pixel_buffer_dma_draw_box+0x1c>
    d4d4:	2811883a 	mov	r8,r5
    d4d8:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    d4dc:	5980032e 	bgeu	r11,r6,d4ec <alt_up_pixel_buffer_dma_draw_box+0x2c>
    d4e0:	5805883a 	mov	r2,r11
    d4e4:	3017883a 	mov	r11,r6
    d4e8:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    d4ec:	2a80842e 	bgeu	r5,r10,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
    d4f0:	30c0832e 	bgeu	r6,r3,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    d4f4:	42800136 	bltu	r8,r10,d4fc <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    d4f8:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    d4fc:	58c00136 	bltu	r11,r3,d504 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    d500:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    d504:	d8c00217 	ldw	r3,8(sp)
    d508:	00800044 	movi	r2,1
    d50c:	1880021e 	bne	r3,r2,d518 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    d510:	20c00c17 	ldw	r3,48(r4)
    d514:	00000106 	br	d51c <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    d518:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    d51c:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    d520:	20800d17 	ldw	r2,52(r4)
    d524:	1000391e 	bne	r2,zero,d60c <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    d528:	22801317 	ldw	r10,76(r4)
    d52c:	3284983a 	sll	r2,r6,r10
    d530:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    d534:	21000e17 	ldw	r4,56(r4)
    d538:	00800044 	movi	r2,1
    d53c:	2080101e 	bne	r4,r2,d580 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    d540:	59806f36 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
    d544:	00000a06 	br	d570 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    d548:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d54c:	00800044 	movi	r2,1
    d550:	1887883a 	add	r3,r3,r2
    d554:	2089883a 	add	r4,r4,r2
    d558:	40fffb2e 	bgeu	r8,r3,d548 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    d55c:	00800044 	movi	r2,1
    d560:	308d883a 	add	r6,r6,r2
    d564:	59806636 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    d568:	1284983a 	sll	r2,r2,r10
    d56c:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d570:	417ffa36 	bltu	r8,r5,d55c <alt_up_pixel_buffer_dma_draw_box+0x9c>
    d574:	29c9883a 	add	r4,r5,r7
    d578:	2807883a 	mov	r3,r5
    d57c:	003ff206 	br	d548 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d580:	00800084 	movi	r2,2
    d584:	2080021e 	bne	r4,r2,d590 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    d588:	59805d36 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
    d58c:	00000e06 	br	d5c8 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    d590:	59805b36 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
    d594:	00001b06 	br	d604 <alt_up_pixel_buffer_dma_draw_box+0x144>
    d598:	2807883a 	mov	r3,r5
    d59c:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    d5a0:	18c5883a 	add	r2,r3,r3
    d5a4:	11c5883a 	add	r2,r2,r7
    d5a8:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d5ac:	1907883a 	add	r3,r3,r4
    d5b0:	40fffb2e 	bgeu	r8,r3,d5a0 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    d5b4:	00800044 	movi	r2,1
    d5b8:	308d883a 	add	r6,r6,r2
    d5bc:	59805036 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    d5c0:	1284983a 	sll	r2,r2,r10
    d5c4:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d5c8:	417ff32e 	bgeu	r8,r5,d598 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    d5cc:	003ff906 	br	d5b4 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    d5d0:	2807883a 	mov	r3,r5
    d5d4:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    d5d8:	18c5883a 	add	r2,r3,r3
    d5dc:	1085883a 	add	r2,r2,r2
    d5e0:	11c5883a 	add	r2,r2,r7
    d5e4:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d5e8:	1907883a 	add	r3,r3,r4
    d5ec:	40fffa2e 	bgeu	r8,r3,d5d8 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    d5f0:	00800044 	movi	r2,1
    d5f4:	308d883a 	add	r6,r6,r2
    d5f8:	59804136 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    d5fc:	1284983a 	sll	r2,r2,r10
    d600:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d604:	417ff22e 	bgeu	r8,r5,d5d0 <alt_up_pixel_buffer_dma_draw_box+0x110>
    d608:	003ff906 	br	d5f0 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    d60c:	21000e17 	ldw	r4,56(r4)
    d610:	00800044 	movi	r2,1
    d614:	2080121e 	bne	r4,r2,d660 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d618:	59803936 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
    d61c:	5019883a 	mov	r12,r10
    d620:	3285383a 	mul	r2,r6,r10
    d624:	1885883a 	add	r2,r3,r2
    d628:	114f883a 	add	r7,r2,r5
    d62c:	00000806 	br	d650 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    d630:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d634:	00800044 	movi	r2,1
    d638:	1887883a 	add	r3,r3,r2
    d63c:	2089883a 	add	r4,r4,r2
    d640:	40fffb2e 	bgeu	r8,r3,d630 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d644:	31800044 	addi	r6,r6,1
    d648:	3b0f883a 	add	r7,r7,r12
    d64c:	59802c36 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    d650:	417ffc36 	bltu	r8,r5,d644 <alt_up_pixel_buffer_dma_draw_box+0x184>
    d654:	3809883a 	mov	r4,r7
    d658:	2807883a 	mov	r3,r5
    d65c:	003ff406 	br	d630 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d660:	00800084 	movi	r2,2
    d664:	2080121e 	bne	r4,r2,d6b0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d668:	59802536 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    d66c:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    d670:	3285383a 	mul	r2,r6,r10
    d674:	1889883a 	add	r4,r3,r2
    d678:	03000044 	movi	r12,1
    d67c:	00000a06 	br	d6a8 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    d680:	2807883a 	mov	r3,r5
    d684:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    d688:	18c5883a 	add	r2,r3,r3
    d68c:	1105883a 	add	r2,r2,r4
    d690:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d694:	19c7883a 	add	r3,r3,r7
    d698:	40fffb2e 	bgeu	r8,r3,d688 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d69c:	330d883a 	add	r6,r6,r12
    d6a0:	59801736 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    d6a4:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d6a8:	417ff52e 	bgeu	r8,r5,d680 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    d6ac:	003ffb06 	br	d69c <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d6b0:	59801336 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    d6b4:	5285883a 	add	r2,r10,r10
    d6b8:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    d6bc:	3285383a 	mul	r2,r6,r10
    d6c0:	1889883a 	add	r4,r3,r2
    d6c4:	03000044 	movi	r12,1
    d6c8:	00000b06 	br	d6f8 <alt_up_pixel_buffer_dma_draw_box+0x238>
    d6cc:	2807883a 	mov	r3,r5
    d6d0:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    d6d4:	18c5883a 	add	r2,r3,r3
    d6d8:	1085883a 	add	r2,r2,r2
    d6dc:	1105883a 	add	r2,r2,r4
    d6e0:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d6e4:	19c7883a 	add	r3,r3,r7
    d6e8:	40fffa2e 	bgeu	r8,r3,d6d4 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    d6ec:	330d883a 	add	r6,r6,r12
    d6f0:	59800336 	bltu	r11,r6,d700 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    d6f4:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    d6f8:	417ff42e 	bgeu	r8,r5,d6cc <alt_up_pixel_buffer_dma_draw_box+0x20c>
    d6fc:	003ffb06 	br	d6ec <alt_up_pixel_buffer_dma_draw_box+0x22c>
    d700:	f800283a 	ret

0000d704 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    d704:	00800044 	movi	r2,1
    d708:	2880021e 	bne	r5,r2,d714 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    d70c:	21c00c17 	ldw	r7,48(r4)
    d710:	00000106 	br	d718 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    d714:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    d718:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d71c:	20c00e17 	ldw	r3,56(r4)
    d720:	00800084 	movi	r2,2
    d724:	1880021e 	bne	r3,r2,d730 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    d728:	294d883a 	add	r6,r5,r5
    d72c:	00000206 	br	d738 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    d730:	2945883a 	add	r2,r5,r5
    d734:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    d738:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    d73c:	20800d17 	ldw	r2,52(r4)
    d740:	1000121e 	bne	r2,zero,d78c <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    d744:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    d748:	48001a26 	beq	r9,zero,d7b4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    d74c:	0011883a 	mov	r8,zero
    d750:	3014c03a 	cmpne	r10,r6,zero
    d754:	00000b06 	br	d784 <alt_up_pixel_buffer_dma_clear_screen+0x80>
    d758:	0007883a 	mov	r3,zero
    d75c:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    d760:	19c5883a 	add	r2,r3,r7
    d764:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    d768:	1947883a 	add	r3,r3,r5
    d76c:	19bffc36 	bltu	r3,r6,d760 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    d770:	00800044 	movi	r2,1
    d774:	4091883a 	add	r8,r8,r2
    d778:	4a000e26 	beq	r9,r8,d7b4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    d77c:	1104983a 	sll	r2,r2,r4
    d780:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    d784:	503ff41e 	bne	r10,zero,d758 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    d788:	003ff906 	br	d770 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    d78c:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    d790:	20000826 	beq	r4,zero,d7b4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    d794:	0007883a 	mov	r3,zero
    d798:	0005883a 	mov	r2,zero
    d79c:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    d7a0:	3885883a 	add	r2,r7,r2
    d7a4:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    d7a8:	1945883a 	add	r2,r3,r5
    d7ac:	1007883a 	mov	r3,r2
    d7b0:	113ffb36 	bltu	r2,r4,d7a0 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    d7b4:	f800283a 	ret

0000d7b8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    d7b8:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    d7bc:	20c00a17 	ldw	r3,40(r4)
    d7c0:	00800044 	movi	r2,1
    d7c4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    d7c8:	20800b17 	ldw	r2,44(r4)
    d7cc:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    d7d0:	21400b15 	stw	r5,44(r4)
	return 0;
}
    d7d4:	0005883a 	mov	r2,zero
    d7d8:	f800283a 	ret

0000d7dc <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    d7dc:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    d7e0:	22400f17 	ldw	r9,60(r4)
    d7e4:	32402a2e 	bgeu	r6,r9,d890 <alt_up_pixel_buffer_dma_draw+0xb4>
    d7e8:	20801017 	ldw	r2,64(r4)
    d7ec:	3880282e 	bgeu	r7,r2,d890 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    d7f0:	20800d17 	ldw	r2,52(r4)
    d7f4:	10000a1e 	bne	r2,zero,d820 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    d7f8:	21001217 	ldw	r4,72(r4)
    d7fc:	3108703a 	and	r4,r6,r4
    d800:	40801117 	ldw	r2,68(r8)
    d804:	2088983a 	sll	r4,r4,r2
    d808:	40801417 	ldw	r2,80(r8)
    d80c:	3884703a 	and	r2,r7,r2
    d810:	40c01317 	ldw	r3,76(r8)
    d814:	10c4983a 	sll	r2,r2,r3
    d818:	2086b03a 	or	r3,r4,r2
    d81c:	00000806 	br	d840 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    d820:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    d824:	40c01217 	ldw	r3,72(r8)
    d828:	30c6703a 	and	r3,r6,r3
    d82c:	40801417 	ldw	r2,80(r8)
    d830:	3884703a 	and	r2,r7,r2
    d834:	4885383a 	mul	r2,r9,r2
    d838:	10c5883a 	add	r2,r2,r3
    d83c:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    d840:	42400e17 	ldw	r9,56(r8)
    d844:	00800044 	movi	r2,1
    d848:	4880051e 	bne	r9,r2,d860 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    d84c:	40800c17 	ldw	r2,48(r8)
    d850:	1885883a 	add	r2,r3,r2
    d854:	11400025 	stbio	r5,0(r2)
    d858:	0005883a 	mov	r2,zero
    d85c:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    d860:	00800084 	movi	r2,2
    d864:	4880051e 	bne	r9,r2,d87c <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    d868:	40800c17 	ldw	r2,48(r8)
    d86c:	1885883a 	add	r2,r3,r2
    d870:	1140002d 	sthio	r5,0(r2)
    d874:	0005883a 	mov	r2,zero
    d878:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    d87c:	40800c17 	ldw	r2,48(r8)
    d880:	1885883a 	add	r2,r3,r2
    d884:	11400035 	stwio	r5,0(r2)
    d888:	0005883a 	mov	r2,zero
    d88c:	f800283a 	ret
    d890:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    d894:	f800283a 	ret

0000d898 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    d898:	20800a17 	ldw	r2,40(r4)
    d89c:	10800337 	ldwio	r2,12(r2)
}
    d8a0:	1080004c 	andi	r2,r2,1
    d8a4:	f800283a 	ret

0000d8a8 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    d8a8:	00c00104 	movi	r3,4
    d8ac:	20800a17 	ldw	r2,40(r4)
    d8b0:	10c5883a 	add	r2,r2,r3
    d8b4:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    d8b8:	20800a17 	ldw	r2,40(r4)
    d8bc:	10c5883a 	add	r2,r2,r3
    d8c0:	10800037 	ldwio	r2,0(r2)
    d8c4:	20800c15 	stw	r2,48(r4)
	return 0;
}
    d8c8:	0005883a 	mov	r2,zero
    d8cc:	f800283a 	ret

0000d8d0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    d8d0:	deffff04 	addi	sp,sp,-4
    d8d4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    d8d8:	01400074 	movhi	r5,1
    d8dc:	29428404 	addi	r5,r5,2576
    d8e0:	000d9f80 	call	d9f8 <alt_find_dev>

  return dev;
}
    d8e4:	dfc00017 	ldw	ra,0(sp)
    d8e8:	dec00104 	addi	sp,sp,4
    d8ec:	f800283a 	ret

0000d8f0 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    d8f0:	00800074 	movhi	r2,1
    d8f4:	1089d304 	addi	r2,r2,10060
    d8f8:	10800017 	ldw	r2,0(r2)
    d8fc:	1000021e 	bne	r2,zero,d908 <alt_alarm_start+0x18>
    d900:	00bfde84 	movi	r2,-134
    d904:	f800283a 	ret
  {
    if (alarm)
    d908:	2000021e 	bne	r4,zero,d914 <alt_alarm_start+0x24>
    d90c:	00bffa84 	movi	r2,-22
    d910:	f800283a 	ret
    {
      alarm->callback = callback;
    d914:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    d918:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d91c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d920:	00bfff84 	movi	r2,-2
    d924:	3884703a 	and	r2,r7,r2
    d928:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d92c:	00800074 	movhi	r2,1
    d930:	1089d404 	addi	r2,r2,10064
    d934:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    d938:	01800044 	movi	r6,1
    d93c:	1985883a 	add	r2,r3,r6
    d940:	2885883a 	add	r2,r5,r2
    d944:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d948:	10c0022e 	bgeu	r2,r3,d954 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    d94c:	21800405 	stb	r6,16(r4)
    d950:	00000106 	br	d958 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    d954:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d958:	00800074 	movhi	r2,1
    d95c:	10828a04 	addi	r2,r2,2600
    d960:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    d964:	10c00017 	ldw	r3,0(r2)
    d968:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    d96c:	10c00017 	ldw	r3,0(r2)
    d970:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    d974:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d978:	3801703a 	wrctl	status,r7
    d97c:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    d980:	f800283a 	ret

0000d984 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d984:	f800283a 	ret

0000d988 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d988:	deffff04 	addi	sp,sp,-4
    d98c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d990:	20000226 	beq	r4,zero,d99c <alt_dev_llist_insert+0x14>
    d994:	20800217 	ldw	r2,8(r4)
    d998:	10000d1e 	bne	r2,zero,d9d0 <alt_dev_llist_insert+0x48>
    d99c:	00800074 	movhi	r2,1
    d9a0:	10828704 	addi	r2,r2,2588
    d9a4:	10800017 	ldw	r2,0(r2)
    d9a8:	1000031e 	bne	r2,zero,d9b8 <alt_dev_llist_insert+0x30>
    d9ac:	00c00074 	movhi	r3,1
    d9b0:	18c9ce04 	addi	r3,r3,10040
    d9b4:	00000206 	br	d9c0 <alt_dev_llist_insert+0x38>
    d9b8:	103ee83a 	callr	r2
    d9bc:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    d9c0:	00800584 	movi	r2,22
    d9c4:	18800015 	stw	r2,0(r3)
    d9c8:	00bffa84 	movi	r2,-22
    d9cc:	00000706 	br	d9ec <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d9d0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    d9d4:	28800017 	ldw	r2,0(r5)
    d9d8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    d9dc:	28800017 	ldw	r2,0(r5)
    d9e0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    d9e4:	29000015 	stw	r4,0(r5)
    d9e8:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    d9ec:	dfc00017 	ldw	ra,0(sp)
    d9f0:	dec00104 	addi	sp,sp,4
    d9f4:	f800283a 	ret

0000d9f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d9f8:	defffb04 	addi	sp,sp,-20
    d9fc:	dfc00415 	stw	ra,16(sp)
    da00:	dcc00315 	stw	r19,12(sp)
    da04:	dc800215 	stw	r18,8(sp)
    da08:	dc400115 	stw	r17,4(sp)
    da0c:	dc000015 	stw	r16,0(sp)
    da10:	2027883a 	mov	r19,r4
    da14:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    da18:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    da1c:	00023680 	call	2368 <strlen>
    da20:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    da24:	8c000726 	beq	r17,r16,da44 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    da28:	89000217 	ldw	r4,8(r17)
    da2c:	980b883a 	mov	r5,r19
    da30:	900d883a 	mov	r6,r18
    da34:	000e0400 	call	e040 <memcmp>
    da38:	10000326 	beq	r2,zero,da48 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    da3c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    da40:	847ff91e 	bne	r16,r17,da28 <alt_find_dev+0x30>
    da44:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    da48:	8805883a 	mov	r2,r17
    da4c:	dfc00417 	ldw	ra,16(sp)
    da50:	dcc00317 	ldw	r19,12(sp)
    da54:	dc800217 	ldw	r18,8(sp)
    da58:	dc400117 	ldw	r17,4(sp)
    da5c:	dc000017 	ldw	r16,0(sp)
    da60:	dec00504 	addi	sp,sp,20
    da64:	f800283a 	ret

0000da68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    da68:	deffff04 	addi	sp,sp,-4
    da6c:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    da70:	0009883a 	mov	r4,zero
    da74:	01408004 	movi	r5,512
    da78:	000dfcc0 	call	dfcc <alt_icache_flush>
#endif
}
    da7c:	dfc00017 	ldw	ra,0(sp)
    da80:	dec00104 	addi	sp,sp,4
    da84:	f800283a 	ret

0000da88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    da88:	defffe04 	addi	sp,sp,-8
    da8c:	dfc00115 	stw	ra,4(sp)
    da90:	dc000015 	stw	r16,0(sp)
    da94:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    da98:	2809883a 	mov	r4,r5
    da9c:	300b883a 	mov	r5,r6
    daa0:	380d883a 	mov	r6,r7
    daa4:	000dc400 	call	dc40 <open>
    daa8:	1009883a 	mov	r4,r2

  if (old >= 0)
    daac:	10000b16 	blt	r2,zero,dadc <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    dab0:	10c00324 	muli	r3,r2,12
    dab4:	00800074 	movhi	r2,1
    dab8:	10bd5f04 	addi	r2,r2,-2692
    dabc:	1887883a 	add	r3,r3,r2
    dac0:	18800017 	ldw	r2,0(r3)
    dac4:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    dac8:	18800117 	ldw	r2,4(r3)
    dacc:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    dad0:	18800217 	ldw	r2,8(r3)
    dad4:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    dad8:	000bcfc0 	call	bcfc <alt_release_fd>
  }
} 
    dadc:	dfc00117 	ldw	ra,4(sp)
    dae0:	dc000017 	ldw	r16,0(sp)
    dae4:	dec00204 	addi	sp,sp,8
    dae8:	f800283a 	ret

0000daec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    daec:	defffa04 	addi	sp,sp,-24
    daf0:	dfc00515 	stw	ra,20(sp)
    daf4:	dd000415 	stw	r20,16(sp)
    daf8:	dcc00315 	stw	r19,12(sp)
    dafc:	dc800215 	stw	r18,8(sp)
    db00:	dc400115 	stw	r17,4(sp)
    db04:	dc000015 	stw	r16,0(sp)
    db08:	2005883a 	mov	r2,r4
    db0c:	2827883a 	mov	r19,r5
    db10:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    db14:	04000074 	movhi	r16,1
    db18:	843d6204 	addi	r16,r16,-2680
    db1c:	04800044 	movi	r18,1
    db20:	04407fc4 	movi	r17,511
    db24:	8009883a 	mov	r4,r16
    db28:	100b883a 	mov	r5,r2
    db2c:	900d883a 	mov	r6,r18
    db30:	880f883a 	mov	r7,r17
    db34:	000da880 	call	da88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    db38:	843ffd04 	addi	r16,r16,-12
    db3c:	8009883a 	mov	r4,r16
    db40:	980b883a 	mov	r5,r19
    db44:	000d883a 	mov	r6,zero
    db48:	880f883a 	mov	r7,r17
    db4c:	000da880 	call	da88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    db50:	81000604 	addi	r4,r16,24
    db54:	a00b883a 	mov	r5,r20
    db58:	900d883a 	mov	r6,r18
    db5c:	880f883a 	mov	r7,r17
    db60:	000da880 	call	da88 <alt_open_fd>
}  
    db64:	dfc00517 	ldw	ra,20(sp)
    db68:	dd000417 	ldw	r20,16(sp)
    db6c:	dcc00317 	ldw	r19,12(sp)
    db70:	dc800217 	ldw	r18,8(sp)
    db74:	dc400117 	ldw	r17,4(sp)
    db78:	dc000017 	ldw	r16,0(sp)
    db7c:	dec00604 	addi	sp,sp,24
    db80:	f800283a 	ret

0000db84 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    db84:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    db88:	008007c4 	movi	r2,31
    db8c:	1100022e 	bgeu	r2,r4,db98 <alt_irq_register+0x14>
    db90:	00bffa84 	movi	r2,-22
    db94:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db98:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db9c:	013fff84 	movi	r4,-2
    dba0:	4104703a 	and	r2,r8,r4
    dba4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    dba8:	380490fa 	slli	r2,r7,3
    dbac:	00c00074 	movhi	r3,1
    dbb0:	18c9df04 	addi	r3,r3,10108
    dbb4:	10c5883a 	add	r2,r2,r3
    dbb8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    dbbc:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    dbc0:	30000e26 	beq	r6,zero,dbfc <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbc4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbc8:	2904703a 	and	r2,r5,r4
    dbcc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    dbd0:	00c00074 	movhi	r3,1
    dbd4:	18c9d204 	addi	r3,r3,10056
    dbd8:	19000017 	ldw	r4,0(r3)
    dbdc:	00800044 	movi	r2,1
    dbe0:	11c4983a 	sll	r2,r2,r7
    dbe4:	1104b03a 	or	r2,r2,r4
    dbe8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dbec:	18800017 	ldw	r2,0(r3)
    dbf0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbf4:	2801703a 	wrctl	status,r5
    dbf8:	00000e06 	br	dc34 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbfc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc00:	00bfff84 	movi	r2,-2
    dc04:	2884703a 	and	r2,r5,r2
    dc08:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    dc0c:	00c00074 	movhi	r3,1
    dc10:	18c9d204 	addi	r3,r3,10056
    dc14:	19000017 	ldw	r4,0(r3)
    dc18:	00bfff84 	movi	r2,-2
    dc1c:	11c4183a 	rol	r2,r2,r7
    dc20:	1104703a 	and	r2,r2,r4
    dc24:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dc28:	18800017 	ldw	r2,0(r3)
    dc2c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc30:	2801703a 	wrctl	status,r5
    dc34:	4001703a 	wrctl	status,r8
    dc38:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    dc3c:	f800283a 	ret

0000dc40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    dc40:	defff904 	addi	sp,sp,-28
    dc44:	dfc00615 	stw	ra,24(sp)
    dc48:	dd400515 	stw	r21,20(sp)
    dc4c:	dd000415 	stw	r20,16(sp)
    dc50:	dcc00315 	stw	r19,12(sp)
    dc54:	dc800215 	stw	r18,8(sp)
    dc58:	dc400115 	stw	r17,4(sp)
    dc5c:	dc000015 	stw	r16,0(sp)
    dc60:	2029883a 	mov	r20,r4
    dc64:	2827883a 	mov	r19,r5
    dc68:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    dc6c:	01400074 	movhi	r5,1
    dc70:	29428404 	addi	r5,r5,2576
    dc74:	000d9f80 	call	d9f8 <alt_find_dev>
    dc78:	1021883a 	mov	r16,r2
    dc7c:	10000226 	beq	r2,zero,dc88 <open+0x48>
    dc80:	0025883a 	mov	r18,zero
    dc84:	00000a06 	br	dcb0 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    dc88:	a009883a 	mov	r4,r20
    dc8c:	000dea40 	call	dea4 <alt_find_file>
    dc90:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    dc94:	1000051e 	bne	r2,zero,dcac <open+0x6c>
    dc98:	047fffc4 	movi	r17,-1
    dc9c:	043ffb44 	movi	r16,-19
    dca0:	00002b06 	br	dd50 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    dca4:	043ffcc4 	movi	r16,-13
    dca8:	00002906 	br	dd50 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    dcac:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    dcb0:	8009883a 	mov	r4,r16
    dcb4:	000df600 	call	df60 <alt_get_fd>
    dcb8:	1023883a 	mov	r17,r2
    dcbc:	10003316 	blt	r2,zero,dd8c <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    dcc0:	10800324 	muli	r2,r2,12
    dcc4:	02000074 	movhi	r8,1
    dcc8:	423d5f04 	addi	r8,r8,-2692
    dccc:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    dcd0:	00900034 	movhi	r2,16384
    dcd4:	10bfffc4 	addi	r2,r2,-1
    dcd8:	9886703a 	and	r3,r19,r2
    dcdc:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    dce0:	9004c03a 	cmpne	r2,r18,zero
    dce4:	1000121e 	bne	r2,zero,dd30 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    dce8:	18900034 	orhi	r2,r3,16384
    dcec:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    dcf0:	00800074 	movhi	r2,1
    dcf4:	10828604 	addi	r2,r2,2584
    dcf8:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    dcfc:	21800017 	ldw	r6,0(r4)
    dd00:	000b883a 	mov	r5,zero
    dd04:	4007883a 	mov	r3,r8
    dd08:	02400044 	movi	r9,1
    dd0c:	02000304 	movi	r8,12
    dd10:	18800017 	ldw	r2,0(r3)
    dd14:	1180031e 	bne	r2,r6,dd24 <open+0xe4>
    dd18:	18800217 	ldw	r2,8(r3)
    dd1c:	1000010e 	bge	r2,zero,dd24 <open+0xe4>
    dd20:	193fe01e 	bne	r3,r4,dca4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    dd24:	2a4b883a 	add	r5,r5,r9
    dd28:	1a07883a 	add	r3,r3,r8
    dd2c:	397ff82e 	bgeu	r7,r5,dd10 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    dd30:	80800317 	ldw	r2,12(r16)
    dd34:	10001726 	beq	r2,zero,dd94 <open+0x154>
    dd38:	a00b883a 	mov	r5,r20
    dd3c:	980d883a 	mov	r6,r19
    dd40:	a80f883a 	mov	r7,r21
    dd44:	103ee83a 	callr	r2
    dd48:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    dd4c:	1000110e 	bge	r2,zero,dd94 <open+0x154>
  {
    alt_release_fd (index);  
    dd50:	8809883a 	mov	r4,r17
    dd54:	000bcfc0 	call	bcfc <alt_release_fd>
    dd58:	00800074 	movhi	r2,1
    dd5c:	10828704 	addi	r2,r2,2588
    dd60:	10800017 	ldw	r2,0(r2)
    dd64:	1000031e 	bne	r2,zero,dd74 <open+0x134>
    dd68:	00c00074 	movhi	r3,1
    dd6c:	18c9ce04 	addi	r3,r3,10040
    dd70:	00000206 	br	dd7c <open+0x13c>
    dd74:	103ee83a 	callr	r2
    dd78:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    dd7c:	0405c83a 	sub	r2,zero,r16
    dd80:	18800015 	stw	r2,0(r3)
    dd84:	047fffc4 	movi	r17,-1
    dd88:	00000206 	br	dd94 <open+0x154>
    dd8c:	1021883a 	mov	r16,r2
    dd90:	003fef06 	br	dd50 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    dd94:	8805883a 	mov	r2,r17
    dd98:	dfc00617 	ldw	ra,24(sp)
    dd9c:	dd400517 	ldw	r21,20(sp)
    dda0:	dd000417 	ldw	r20,16(sp)
    dda4:	dcc00317 	ldw	r19,12(sp)
    dda8:	dc800217 	ldw	r18,8(sp)
    ddac:	dc400117 	ldw	r17,4(sp)
    ddb0:	dc000017 	ldw	r16,0(sp)
    ddb4:	dec00704 	addi	sp,sp,28
    ddb8:	f800283a 	ret

0000ddbc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ddbc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ddc0:	00bfff84 	movi	r2,-2
    ddc4:	2884703a 	and	r2,r5,r2
    ddc8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ddcc:	20c00017 	ldw	r3,0(r4)
    ddd0:	20800117 	ldw	r2,4(r4)
    ddd4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    ddd8:	20800117 	ldw	r2,4(r4)
    dddc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    dde0:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    dde4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dde8:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    ddec:	f800283a 	ret

0000ddf0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ddf0:	defffd04 	addi	sp,sp,-12
    ddf4:	dfc00215 	stw	ra,8(sp)
    ddf8:	dc400115 	stw	r17,4(sp)
    ddfc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    de00:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    de04:	d0a75817 	ldw	r2,-25248(gp)
    de08:	10800044 	addi	r2,r2,1
    de0c:	d0a75815 	stw	r2,-25248(gp)
    de10:	00001b06 	br	de80 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    de14:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    de18:	80800403 	ldbu	r2,16(r16)
    de1c:	10000326 	beq	r2,zero,de2c <alt_tick+0x3c>
    de20:	d0a75817 	ldw	r2,-25248(gp)
    de24:	1000011e 	bne	r2,zero,de2c <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    de28:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    de2c:	d0e75817 	ldw	r3,-25248(gp)
    de30:	80800217 	ldw	r2,8(r16)
    de34:	18801136 	bltu	r3,r2,de7c <alt_tick+0x8c>
    de38:	80800403 	ldbu	r2,16(r16)
    de3c:	10000f1e 	bne	r2,zero,de7c <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    de40:	80800317 	ldw	r2,12(r16)
    de44:	81000517 	ldw	r4,20(r16)
    de48:	103ee83a 	callr	r2
    de4c:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    de50:	1000031e 	bne	r2,zero,de60 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    de54:	8009883a 	mov	r4,r16
    de58:	000ddbc0 	call	ddbc <alt_alarm_stop>
    de5c:	00000706 	br	de7c <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    de60:	80800217 	ldw	r2,8(r16)
    de64:	1885883a 	add	r2,r3,r2
    de68:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    de6c:	d0e75817 	ldw	r3,-25248(gp)
    de70:	10c0022e 	bgeu	r2,r3,de7c <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    de74:	00800044 	movi	r2,1
    de78:	80800405 	stb	r2,16(r16)
    de7c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    de80:	d0a00e04 	addi	r2,gp,-32712
    de84:	80bfe31e 	bne	r16,r2,de14 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    de88:	dfc00217 	ldw	ra,8(sp)
    de8c:	dc400117 	ldw	r17,4(sp)
    de90:	dc000017 	ldw	r16,0(sp)
    de94:	dec00304 	addi	sp,sp,12
    de98:	f800283a 	ret

0000de9c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    de9c:	000170fa 	wrctl	ienable,zero
}
    dea0:	f800283a 	ret

0000dea4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    dea4:	defff904 	addi	sp,sp,-28
    dea8:	dfc00615 	stw	ra,24(sp)
    deac:	dd400515 	stw	r21,20(sp)
    deb0:	dd000415 	stw	r20,16(sp)
    deb4:	dcc00315 	stw	r19,12(sp)
    deb8:	dc800215 	stw	r18,8(sp)
    debc:	dc400115 	stw	r17,4(sp)
    dec0:	dc000015 	stw	r16,0(sp)
    dec4:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    dec8:	00800074 	movhi	r2,1
    decc:	10828204 	addi	r2,r2,2568
    ded0:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ded4:	102b883a 	mov	r21,r2
    ded8:	88801626 	beq	r17,r2,df34 <alt_find_file+0x90>
    dedc:	053fffc4 	movi	r20,-1
    dee0:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    dee4:	8c000217 	ldw	r16,8(r17)
    dee8:	8009883a 	mov	r4,r16
    deec:	00023680 	call	2368 <strlen>
    def0:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    def4:	8085883a 	add	r2,r16,r2
    def8:	1505883a 	add	r2,r2,r20
    defc:	10800007 	ldb	r2,0(r2)
    df00:	14c0011e 	bne	r2,r19,df08 <alt_find_file+0x64>
    {
      len -= 1;
    df04:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    df08:	1c85883a 	add	r2,r3,r18
    df0c:	10800007 	ldb	r2,0(r2)
    df10:	14c00126 	beq	r2,r19,df18 <alt_find_file+0x74>
    df14:	1000051e 	bne	r2,zero,df2c <alt_find_file+0x88>
    df18:	8009883a 	mov	r4,r16
    df1c:	900b883a 	mov	r5,r18
    df20:	180d883a 	mov	r6,r3
    df24:	000e0400 	call	e040 <memcmp>
    df28:	10000326 	beq	r2,zero,df38 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    df2c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    df30:	8d7fec1e 	bne	r17,r21,dee4 <alt_find_file+0x40>
    df34:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    df38:	8805883a 	mov	r2,r17
    df3c:	dfc00617 	ldw	ra,24(sp)
    df40:	dd400517 	ldw	r21,20(sp)
    df44:	dd000417 	ldw	r20,16(sp)
    df48:	dcc00317 	ldw	r19,12(sp)
    df4c:	dc800217 	ldw	r18,8(sp)
    df50:	dc400117 	ldw	r17,4(sp)
    df54:	dc000017 	ldw	r16,0(sp)
    df58:	dec00704 	addi	sp,sp,28
    df5c:	f800283a 	ret

0000df60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    df60:	000b883a 	mov	r5,zero
    df64:	00c00074 	movhi	r3,1
    df68:	18fd5f04 	addi	r3,r3,-2692
    df6c:	02000304 	movi	r8,12
    df70:	02400074 	movhi	r9,1
    df74:	4a428604 	addi	r9,r9,2584
    df78:	01c00044 	movi	r7,1
    df7c:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    df80:	18800017 	ldw	r2,0(r3)
    df84:	10000c1e 	bne	r2,zero,dfb8 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    df88:	2a05383a 	mul	r2,r5,r8
    df8c:	00c00074 	movhi	r3,1
    df90:	18fd5f04 	addi	r3,r3,-2692
    df94:	10c5883a 	add	r2,r2,r3
    df98:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    df9c:	48800017 	ldw	r2,0(r9)
    dfa0:	11400216 	blt	r2,r5,dfac <alt_get_fd+0x4c>
    dfa4:	2805883a 	mov	r2,r5
    dfa8:	f800283a 	ret
      {
        alt_max_fd = i;
    dfac:	49400015 	stw	r5,0(r9)
    dfb0:	2805883a 	mov	r2,r5
    dfb4:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dfb8:	29cb883a 	add	r5,r5,r7
    dfbc:	1a07883a 	add	r3,r3,r8
    dfc0:	29bfef1e 	bne	r5,r6,df80 <alt_get_fd+0x20>
    dfc4:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    dfc8:	f800283a 	ret

0000dfcc <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    dfcc:	2007883a 	mov	r3,r4
    dfd0:	00808004 	movi	r2,512
    dfd4:	1140012e 	bgeu	r2,r5,dfdc <alt_icache_flush+0x10>
    dfd8:	100b883a 	mov	r5,r2
    dfdc:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dfe0:	1940042e 	bgeu	r3,r5,dff4 <alt_icache_flush+0x28>
    dfe4:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    dfe8:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dfec:	1887883a 	add	r3,r3,r2
    dff0:	197ffd36 	bltu	r3,r5,dfe8 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    dff4:	208007cc 	andi	r2,r4,31
    dff8:	10000126 	beq	r2,zero,e000 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    dffc:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e000:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e004:	f800283a 	ret

0000e008 <exit>:
    e008:	defffe04 	addi	sp,sp,-8
    e00c:	000b883a 	mov	r5,zero
    e010:	dc000015 	stw	r16,0(sp)
    e014:	dfc00115 	stw	ra,4(sp)
    e018:	2021883a 	mov	r16,r4
    e01c:	000e3f00 	call	e3f0 <__call_exitprocs>
    e020:	00800074 	movhi	r2,1
    e024:	10827d04 	addi	r2,r2,2548
    e028:	11000017 	ldw	r4,0(r2)
    e02c:	20800f17 	ldw	r2,60(r4)
    e030:	10000126 	beq	r2,zero,e038 <exit+0x30>
    e034:	103ee83a 	callr	r2
    e038:	8009883a 	mov	r4,r16
    e03c:	000e5a00 	call	e5a0 <_exit>

0000e040 <memcmp>:
    e040:	00c000c4 	movi	r3,3
    e044:	1980032e 	bgeu	r3,r6,e054 <memcmp+0x14>
    e048:	2144b03a 	or	r2,r4,r5
    e04c:	10c4703a 	and	r2,r2,r3
    e050:	10000f26 	beq	r2,zero,e090 <memcmp+0x50>
    e054:	31ffffc4 	addi	r7,r6,-1
    e058:	3000061e 	bne	r6,zero,e074 <memcmp+0x34>
    e05c:	00000a06 	br	e088 <memcmp+0x48>
    e060:	39ffffc4 	addi	r7,r7,-1
    e064:	00bfffc4 	movi	r2,-1
    e068:	21000044 	addi	r4,r4,1
    e06c:	29400044 	addi	r5,r5,1
    e070:	38800526 	beq	r7,r2,e088 <memcmp+0x48>
    e074:	20c00003 	ldbu	r3,0(r4)
    e078:	28800003 	ldbu	r2,0(r5)
    e07c:	18bff826 	beq	r3,r2,e060 <memcmp+0x20>
    e080:	1885c83a 	sub	r2,r3,r2
    e084:	f800283a 	ret
    e088:	0005883a 	mov	r2,zero
    e08c:	f800283a 	ret
    e090:	180f883a 	mov	r7,r3
    e094:	20c00017 	ldw	r3,0(r4)
    e098:	28800017 	ldw	r2,0(r5)
    e09c:	18bfed1e 	bne	r3,r2,e054 <memcmp+0x14>
    e0a0:	31bfff04 	addi	r6,r6,-4
    e0a4:	21000104 	addi	r4,r4,4
    e0a8:	29400104 	addi	r5,r5,4
    e0ac:	39bff936 	bltu	r7,r6,e094 <memcmp+0x54>
    e0b0:	003fe806 	br	e054 <memcmp+0x14>

0000e0b4 <putc>:
    e0b4:	defffc04 	addi	sp,sp,-16
    e0b8:	dc800215 	stw	r18,8(sp)
    e0bc:	04800074 	movhi	r18,1
    e0c0:	94827c04 	addi	r18,r18,2544
    e0c4:	90c00017 	ldw	r3,0(r18)
    e0c8:	dc400115 	stw	r17,4(sp)
    e0cc:	dc000015 	stw	r16,0(sp)
    e0d0:	dfc00315 	stw	ra,12(sp)
    e0d4:	2023883a 	mov	r17,r4
    e0d8:	2821883a 	mov	r16,r5
    e0dc:	18000226 	beq	r3,zero,e0e8 <putc+0x34>
    e0e0:	18800e17 	ldw	r2,56(r3)
    e0e4:	10001126 	beq	r2,zero,e12c <putc+0x78>
    e0e8:	80800217 	ldw	r2,8(r16)
    e0ec:	10ffffc4 	addi	r3,r2,-1
    e0f0:	80c00215 	stw	r3,8(r16)
    e0f4:	18001316 	blt	r3,zero,e144 <putc+0x90>
    e0f8:	80800017 	ldw	r2,0(r16)
    e0fc:	14400005 	stb	r17,0(r2)
    e100:	80c00017 	ldw	r3,0(r16)
    e104:	18800044 	addi	r2,r3,1
    e108:	18c00003 	ldbu	r3,0(r3)
    e10c:	80800015 	stw	r2,0(r16)
    e110:	1805883a 	mov	r2,r3
    e114:	dfc00317 	ldw	ra,12(sp)
    e118:	dc800217 	ldw	r18,8(sp)
    e11c:	dc400117 	ldw	r17,4(sp)
    e120:	dc000017 	ldw	r16,0(sp)
    e124:	dec00404 	addi	sp,sp,16
    e128:	f800283a 	ret
    e12c:	1809883a 	mov	r4,r3
    e130:	0005ea40 	call	5ea4 <__sinit>
    e134:	80800217 	ldw	r2,8(r16)
    e138:	10ffffc4 	addi	r3,r2,-1
    e13c:	80c00215 	stw	r3,8(r16)
    e140:	183fed0e 	bge	r3,zero,e0f8 <putc+0x44>
    e144:	80800617 	ldw	r2,24(r16)
    e148:	18800f16 	blt	r3,r2,e188 <putc+0xd4>
    e14c:	80800017 	ldw	r2,0(r16)
    e150:	14400005 	stb	r17,0(r2)
    e154:	81000017 	ldw	r4,0(r16)
    e158:	00800284 	movi	r2,10
    e15c:	20c00003 	ldbu	r3,0(r4)
    e160:	18801226 	beq	r3,r2,e1ac <putc+0xf8>
    e164:	20800044 	addi	r2,r4,1
    e168:	80800015 	stw	r2,0(r16)
    e16c:	1805883a 	mov	r2,r3
    e170:	dfc00317 	ldw	ra,12(sp)
    e174:	dc800217 	ldw	r18,8(sp)
    e178:	dc400117 	ldw	r17,4(sp)
    e17c:	dc000017 	ldw	r16,0(sp)
    e180:	dec00404 	addi	sp,sp,16
    e184:	f800283a 	ret
    e188:	91000017 	ldw	r4,0(r18)
    e18c:	880b883a 	mov	r5,r17
    e190:	800d883a 	mov	r6,r16
    e194:	dfc00317 	ldw	ra,12(sp)
    e198:	dc800217 	ldw	r18,8(sp)
    e19c:	dc400117 	ldw	r17,4(sp)
    e1a0:	dc000017 	ldw	r16,0(sp)
    e1a4:	dec00404 	addi	sp,sp,16
    e1a8:	000e2a01 	jmpi	e2a0 <__swbuf_r>
    e1ac:	91000017 	ldw	r4,0(r18)
    e1b0:	180b883a 	mov	r5,r3
    e1b4:	003ff606 	br	e190 <putc+0xdc>

0000e1b8 <_putc_r>:
    e1b8:	defffc04 	addi	sp,sp,-16
    e1bc:	dc400215 	stw	r17,8(sp)
    e1c0:	dc000115 	stw	r16,4(sp)
    e1c4:	dfc00315 	stw	ra,12(sp)
    e1c8:	2021883a 	mov	r16,r4
    e1cc:	2823883a 	mov	r17,r5
    e1d0:	20000226 	beq	r4,zero,e1dc <_putc_r+0x24>
    e1d4:	20800e17 	ldw	r2,56(r4)
    e1d8:	10001026 	beq	r2,zero,e21c <_putc_r+0x64>
    e1dc:	30800217 	ldw	r2,8(r6)
    e1e0:	10ffffc4 	addi	r3,r2,-1
    e1e4:	30c00215 	stw	r3,8(r6)
    e1e8:	18001316 	blt	r3,zero,e238 <_putc_r+0x80>
    e1ec:	30800017 	ldw	r2,0(r6)
    e1f0:	14400005 	stb	r17,0(r2)
    e1f4:	30c00017 	ldw	r3,0(r6)
    e1f8:	18800044 	addi	r2,r3,1
    e1fc:	18c00003 	ldbu	r3,0(r3)
    e200:	30800015 	stw	r2,0(r6)
    e204:	1805883a 	mov	r2,r3
    e208:	dfc00317 	ldw	ra,12(sp)
    e20c:	dc400217 	ldw	r17,8(sp)
    e210:	dc000117 	ldw	r16,4(sp)
    e214:	dec00404 	addi	sp,sp,16
    e218:	f800283a 	ret
    e21c:	d9800015 	stw	r6,0(sp)
    e220:	0005ea40 	call	5ea4 <__sinit>
    e224:	d9800017 	ldw	r6,0(sp)
    e228:	30800217 	ldw	r2,8(r6)
    e22c:	10ffffc4 	addi	r3,r2,-1
    e230:	30c00215 	stw	r3,8(r6)
    e234:	183fed0e 	bge	r3,zero,e1ec <_putc_r+0x34>
    e238:	30800617 	ldw	r2,24(r6)
    e23c:	18800e16 	blt	r3,r2,e278 <_putc_r+0xc0>
    e240:	30800017 	ldw	r2,0(r6)
    e244:	14400005 	stb	r17,0(r2)
    e248:	31000017 	ldw	r4,0(r6)
    e24c:	00800284 	movi	r2,10
    e250:	20c00003 	ldbu	r3,0(r4)
    e254:	18800f26 	beq	r3,r2,e294 <_putc_r+0xdc>
    e258:	20800044 	addi	r2,r4,1
    e25c:	30800015 	stw	r2,0(r6)
    e260:	1805883a 	mov	r2,r3
    e264:	dfc00317 	ldw	ra,12(sp)
    e268:	dc400217 	ldw	r17,8(sp)
    e26c:	dc000117 	ldw	r16,4(sp)
    e270:	dec00404 	addi	sp,sp,16
    e274:	f800283a 	ret
    e278:	8009883a 	mov	r4,r16
    e27c:	880b883a 	mov	r5,r17
    e280:	dfc00317 	ldw	ra,12(sp)
    e284:	dc400217 	ldw	r17,8(sp)
    e288:	dc000117 	ldw	r16,4(sp)
    e28c:	dec00404 	addi	sp,sp,16
    e290:	000e2a01 	jmpi	e2a0 <__swbuf_r>
    e294:	8009883a 	mov	r4,r16
    e298:	180b883a 	mov	r5,r3
    e29c:	003ff806 	br	e280 <_putc_r+0xc8>

0000e2a0 <__swbuf_r>:
    e2a0:	defffc04 	addi	sp,sp,-16
    e2a4:	dc400215 	stw	r17,8(sp)
    e2a8:	dc000115 	stw	r16,4(sp)
    e2ac:	dfc00315 	stw	ra,12(sp)
    e2b0:	2023883a 	mov	r17,r4
    e2b4:	2821883a 	mov	r16,r5
    e2b8:	20000226 	beq	r4,zero,e2c4 <__swbuf_r+0x24>
    e2bc:	20800e17 	ldw	r2,56(r4)
    e2c0:	10002f26 	beq	r2,zero,e380 <__swbuf_r+0xe0>
    e2c4:	3080030b 	ldhu	r2,12(r6)
    e2c8:	30c00617 	ldw	r3,24(r6)
    e2cc:	1080020c 	andi	r2,r2,8
    e2d0:	30c00215 	stw	r3,8(r6)
    e2d4:	10002226 	beq	r2,zero,e360 <__swbuf_r+0xc0>
    e2d8:	30c00417 	ldw	r3,16(r6)
    e2dc:	18002026 	beq	r3,zero,e360 <__swbuf_r+0xc0>
    e2e0:	31000017 	ldw	r4,0(r6)
    e2e4:	30800517 	ldw	r2,20(r6)
    e2e8:	20c7c83a 	sub	r3,r4,r3
    e2ec:	18802f0e 	bge	r3,r2,e3ac <__swbuf_r+0x10c>
    e2f0:	19400044 	addi	r5,r3,1
    e2f4:	30800217 	ldw	r2,8(r6)
    e2f8:	84003fcc 	andi	r16,r16,255
    e2fc:	20c00044 	addi	r3,r4,1
    e300:	10bfffc4 	addi	r2,r2,-1
    e304:	30800215 	stw	r2,8(r6)
    e308:	24000005 	stb	r16,0(r4)
    e30c:	30800517 	ldw	r2,20(r6)
    e310:	30c00015 	stw	r3,0(r6)
    e314:	11400c26 	beq	r2,r5,e348 <__swbuf_r+0xa8>
    e318:	3080030b 	ldhu	r2,12(r6)
    e31c:	1080004c 	andi	r2,r2,1
    e320:	1005003a 	cmpeq	r2,r2,zero
    e324:	10000626 	beq	r2,zero,e340 <__swbuf_r+0xa0>
    e328:	8005883a 	mov	r2,r16
    e32c:	dfc00317 	ldw	ra,12(sp)
    e330:	dc400217 	ldw	r17,8(sp)
    e334:	dc000117 	ldw	r16,4(sp)
    e338:	dec00404 	addi	sp,sp,16
    e33c:	f800283a 	ret
    e340:	00800284 	movi	r2,10
    e344:	80bff81e 	bne	r16,r2,e328 <__swbuf_r+0x88>
    e348:	8809883a 	mov	r4,r17
    e34c:	300b883a 	mov	r5,r6
    e350:	0005c0c0 	call	5c0c <_fflush_r>
    e354:	103ff426 	beq	r2,zero,e328 <__swbuf_r+0x88>
    e358:	043fffc4 	movi	r16,-1
    e35c:	003ff206 	br	e328 <__swbuf_r+0x88>
    e360:	300b883a 	mov	r5,r6
    e364:	8809883a 	mov	r4,r17
    e368:	d9800015 	stw	r6,0(sp)
    e36c:	00043040 	call	4304 <__swsetup_r>
    e370:	d9800017 	ldw	r6,0(sp)
    e374:	1000061e 	bne	r2,zero,e390 <__swbuf_r+0xf0>
    e378:	30c00417 	ldw	r3,16(r6)
    e37c:	003fd806 	br	e2e0 <__swbuf_r+0x40>
    e380:	d9800015 	stw	r6,0(sp)
    e384:	0005ea40 	call	5ea4 <__sinit>
    e388:	d9800017 	ldw	r6,0(sp)
    e38c:	003fcd06 	br	e2c4 <__swbuf_r+0x24>
    e390:	3080030b 	ldhu	r2,12(r6)
    e394:	00c00244 	movi	r3,9
    e398:	043fffc4 	movi	r16,-1
    e39c:	10801014 	ori	r2,r2,64
    e3a0:	3080030d 	sth	r2,12(r6)
    e3a4:	88c00015 	stw	r3,0(r17)
    e3a8:	003fdf06 	br	e328 <__swbuf_r+0x88>
    e3ac:	300b883a 	mov	r5,r6
    e3b0:	8809883a 	mov	r4,r17
    e3b4:	d9800015 	stw	r6,0(sp)
    e3b8:	0005c0c0 	call	5c0c <_fflush_r>
    e3bc:	d9800017 	ldw	r6,0(sp)
    e3c0:	103fe51e 	bne	r2,zero,e358 <__swbuf_r+0xb8>
    e3c4:	31000017 	ldw	r4,0(r6)
    e3c8:	01400044 	movi	r5,1
    e3cc:	003fc906 	br	e2f4 <__swbuf_r+0x54>

0000e3d0 <__swbuf>:
    e3d0:	01800074 	movhi	r6,1
    e3d4:	31827c04 	addi	r6,r6,2544
    e3d8:	2007883a 	mov	r3,r4
    e3dc:	31000017 	ldw	r4,0(r6)
    e3e0:	280d883a 	mov	r6,r5
    e3e4:	180b883a 	mov	r5,r3
    e3e8:	000e2a01 	jmpi	e2a0 <__swbuf_r>

0000e3ec <register_fini>:
    e3ec:	f800283a 	ret

0000e3f0 <__call_exitprocs>:
    e3f0:	00800074 	movhi	r2,1
    e3f4:	10827d04 	addi	r2,r2,2548
    e3f8:	10800017 	ldw	r2,0(r2)
    e3fc:	defff304 	addi	sp,sp,-52
    e400:	df000b15 	stw	fp,44(sp)
    e404:	d8800115 	stw	r2,4(sp)
    e408:	00800034 	movhi	r2,0
    e40c:	10800004 	addi	r2,r2,0
    e410:	1005003a 	cmpeq	r2,r2,zero
    e414:	d8800215 	stw	r2,8(sp)
    e418:	d8800117 	ldw	r2,4(sp)
    e41c:	dd400815 	stw	r21,32(sp)
    e420:	dd000715 	stw	r20,28(sp)
    e424:	10805204 	addi	r2,r2,328
    e428:	dfc00c15 	stw	ra,48(sp)
    e42c:	ddc00a15 	stw	r23,40(sp)
    e430:	dd800915 	stw	r22,36(sp)
    e434:	dcc00615 	stw	r19,24(sp)
    e438:	dc800515 	stw	r18,20(sp)
    e43c:	dc400415 	stw	r17,16(sp)
    e440:	dc000315 	stw	r16,12(sp)
    e444:	282b883a 	mov	r21,r5
    e448:	2039883a 	mov	fp,r4
    e44c:	d8800015 	stw	r2,0(sp)
    e450:	2829003a 	cmpeq	r20,r5,zero
    e454:	d8800117 	ldw	r2,4(sp)
    e458:	14405217 	ldw	r17,328(r2)
    e45c:	88001026 	beq	r17,zero,e4a0 <__call_exitprocs+0xb0>
    e460:	ddc00017 	ldw	r23,0(sp)
    e464:	88800117 	ldw	r2,4(r17)
    e468:	8c802204 	addi	r18,r17,136
    e46c:	143fffc4 	addi	r16,r2,-1
    e470:	80000916 	blt	r16,zero,e498 <__call_exitprocs+0xa8>
    e474:	05bfffc4 	movi	r22,-1
    e478:	a000151e 	bne	r20,zero,e4d0 <__call_exitprocs+0xe0>
    e47c:	8409883a 	add	r4,r16,r16
    e480:	2105883a 	add	r2,r4,r4
    e484:	1485883a 	add	r2,r2,r18
    e488:	10c02017 	ldw	r3,128(r2)
    e48c:	a8c01126 	beq	r21,r3,e4d4 <__call_exitprocs+0xe4>
    e490:	843fffc4 	addi	r16,r16,-1
    e494:	85bff81e 	bne	r16,r22,e478 <__call_exitprocs+0x88>
    e498:	d8800217 	ldw	r2,8(sp)
    e49c:	10003126 	beq	r2,zero,e564 <__call_exitprocs+0x174>
    e4a0:	dfc00c17 	ldw	ra,48(sp)
    e4a4:	df000b17 	ldw	fp,44(sp)
    e4a8:	ddc00a17 	ldw	r23,40(sp)
    e4ac:	dd800917 	ldw	r22,36(sp)
    e4b0:	dd400817 	ldw	r21,32(sp)
    e4b4:	dd000717 	ldw	r20,28(sp)
    e4b8:	dcc00617 	ldw	r19,24(sp)
    e4bc:	dc800517 	ldw	r18,20(sp)
    e4c0:	dc400417 	ldw	r17,16(sp)
    e4c4:	dc000317 	ldw	r16,12(sp)
    e4c8:	dec00d04 	addi	sp,sp,52
    e4cc:	f800283a 	ret
    e4d0:	8409883a 	add	r4,r16,r16
    e4d4:	88c00117 	ldw	r3,4(r17)
    e4d8:	2105883a 	add	r2,r4,r4
    e4dc:	1445883a 	add	r2,r2,r17
    e4e0:	18ffffc4 	addi	r3,r3,-1
    e4e4:	11800217 	ldw	r6,8(r2)
    e4e8:	1c001526 	beq	r3,r16,e540 <__call_exitprocs+0x150>
    e4ec:	10000215 	stw	zero,8(r2)
    e4f0:	303fe726 	beq	r6,zero,e490 <__call_exitprocs+0xa0>
    e4f4:	00c00044 	movi	r3,1
    e4f8:	1c06983a 	sll	r3,r3,r16
    e4fc:	90804017 	ldw	r2,256(r18)
    e500:	8cc00117 	ldw	r19,4(r17)
    e504:	1884703a 	and	r2,r3,r2
    e508:	10001426 	beq	r2,zero,e55c <__call_exitprocs+0x16c>
    e50c:	90804117 	ldw	r2,260(r18)
    e510:	1884703a 	and	r2,r3,r2
    e514:	10000c1e 	bne	r2,zero,e548 <__call_exitprocs+0x158>
    e518:	2105883a 	add	r2,r4,r4
    e51c:	1485883a 	add	r2,r2,r18
    e520:	11400017 	ldw	r5,0(r2)
    e524:	e009883a 	mov	r4,fp
    e528:	303ee83a 	callr	r6
    e52c:	88800117 	ldw	r2,4(r17)
    e530:	98bfc81e 	bne	r19,r2,e454 <__call_exitprocs+0x64>
    e534:	b8800017 	ldw	r2,0(r23)
    e538:	147fd526 	beq	r2,r17,e490 <__call_exitprocs+0xa0>
    e53c:	003fc506 	br	e454 <__call_exitprocs+0x64>
    e540:	8c000115 	stw	r16,4(r17)
    e544:	003fea06 	br	e4f0 <__call_exitprocs+0x100>
    e548:	2105883a 	add	r2,r4,r4
    e54c:	1485883a 	add	r2,r2,r18
    e550:	11000017 	ldw	r4,0(r2)
    e554:	303ee83a 	callr	r6
    e558:	003ff406 	br	e52c <__call_exitprocs+0x13c>
    e55c:	303ee83a 	callr	r6
    e560:	003ff206 	br	e52c <__call_exitprocs+0x13c>
    e564:	88800117 	ldw	r2,4(r17)
    e568:	1000081e 	bne	r2,zero,e58c <__call_exitprocs+0x19c>
    e56c:	89000017 	ldw	r4,0(r17)
    e570:	20000726 	beq	r4,zero,e590 <__call_exitprocs+0x1a0>
    e574:	b9000015 	stw	r4,0(r23)
    e578:	8809883a 	mov	r4,r17
    e57c:	00000000 	call	0 <__alt_mem_SDRAM>
    e580:	bc400017 	ldw	r17,0(r23)
    e584:	883fb71e 	bne	r17,zero,e464 <__call_exitprocs+0x74>
    e588:	003fc506 	br	e4a0 <__call_exitprocs+0xb0>
    e58c:	89000017 	ldw	r4,0(r17)
    e590:	882f883a 	mov	r23,r17
    e594:	2023883a 	mov	r17,r4
    e598:	883fb21e 	bne	r17,zero,e464 <__call_exitprocs+0x74>
    e59c:	003fc006 	br	e4a0 <__call_exitprocs+0xb0>

0000e5a0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e5a0:	20000226 	beq	r4,zero,e5ac <_exit+0xc>
    ALT_SIM_FAIL();
    e5a4:	002af070 	cmpltui	zero,zero,43969
    e5a8:	00000106 	br	e5b0 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    e5ac:	002af0b0 	cmpltui	zero,zero,43970
    e5b0:	003fff06 	br	e5b0 <_exit+0x10>
    e5b4:	00000010 	cmplti	zero,zero,0
    e5b8:	00000000 	call	0 <__alt_mem_SDRAM>
    e5bc:	00527a01 	jmpi	527a0 <_gp+0x39db0>
    e5c0:	011f7c01 	jmpi	11f7c0 <_gp+0x106dd0>
    e5c4:	001b0c0b 	ldhu	zero,27696(zero)
    e5c8:	00000028 	cmpgeui	zero,zero,0
    e5cc:	00000018 	cmpnei	zero,zero,0
    e5d0:	00001184 	movi	zero,70
    e5d4:	00000680 	call	68 <__flash_exceptions_start+0x48>
    e5d8:	440e4400 	call	440e440 <__alt_data_end+0x3c0e440>
    e5dc:	910a9070 	cmpltui	r4,r18,10817
    e5e0:	93089209 	0x93089209
    e5e4:	95069407 	ldb	r20,6736(r18)
    e5e8:	97049605 	stb	fp,4696(r18)
    e5ec:	9f029c03 	ldbu	fp,2672(r19)
    e5f0:	00000001 	jmpi	0 <__alt_mem_SDRAM>
    e5f4:	00000028 	cmpgeui	zero,zero,0
    e5f8:	00000044 	movi	zero,1
    e5fc:	00001804 	movi	zero,96
    e600:	00000654 	movui	zero,25
    e604:	480e4400 	call	480e440 <__alt_data_end+0x400e440>
    e608:	910a9070 	cmpltui	r4,r18,10817
    e60c:	93089209 	0x93089209
    e610:	95069407 	ldb	r20,6736(r18)
    e614:	97049605 	stb	fp,4696(r18)
    e618:	9f029c03 	ldbu	fp,2672(r19)
    e61c:	00000001 	jmpi	0 <__alt_mem_SDRAM>
    e620:	00000028 	cmpgeui	zero,zero,0
    e624:	00000070 	cmpltui	zero,zero,1
    e628:	00009418 	cmpnei	zero,zero,592
    e62c:	000005dc 	xori	zero,zero,23
    e630:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
    e634:	92099170 	cmpltui	r8,r18,9797
    e638:	95079308 	cmpgei	r20,r18,7756
    e63c:	97049605 	stb	fp,4696(r18)
    e640:	90019f03 	ldbu	zero,1660(r18)
    e644:	9c06940a 	0x9c06940a
    e648:	00000002 	0x2
    e64c:	00000028 	cmpgeui	zero,zero,0
    e650:	0000009c 	xori	zero,zero,2
    e654:	000099f4 	movhi	zero,615
    e658:	000005b0 	cmpltui	zero,zero,22
    e65c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
    e660:	92099168 	cmpgeui	r8,r18,9797
    e664:	95079308 	cmpgei	r20,r18,7756
    e668:	9c039705 	stb	r16,3676(r19)
    e66c:	90019f02 	0x90019f02
    e670:	9606940a 	0x9606940a
    e674:	00000004 	movi	zero,0
    e678:	0000e3ec 	andhi	zero,zero,911
