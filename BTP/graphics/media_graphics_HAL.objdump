
C:/Users/Jashwanth/Desktop/academics/BTP/graphics/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/Users/Jashwanth/Desktop/academics/BTP/graphics/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000549c memsz 0x0000549c flags r-x
    LOAD off    0x000064bc vaddr 0x000054bc paddr 0x00007198 align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x00008e74 vaddr 0x00008e74 paddr 0x00008e74 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005164  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001f0  000052cc  000052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  000054bc  00007198  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00008e74  00008e74  00008e74  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008198  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  000081c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000124d  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017cb1  00000000  00000000  00009ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000055a2  00000000  00000000  00021996  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cdad  00000000  00000000  00026f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000010dc  00000000  00000000  00033ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027aa  00000000  00000000  00034dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000522d  00000000  00000000  0003756e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003c79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0003c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003f5d7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003f5da  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003f5dd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003f5de  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003f5df  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003f5e3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003f5e7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003f5eb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003f5f4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003f5fd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0003f606  2**0
                  CONTENTS, READONLY
 28 .jdi          00004d54  00000000  00000000  0003f611  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000abe93  00000000  00000000  00044365  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
000052cc l    d  .rodata	00000000 .rodata
000054bc l    d  .rwdata	00000000 .rwdata
00008e74 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000054bc l     O .rwdata	00001060 JTAG_UART
0000651c l     O .rwdata	00000030 AV_Config
0000654c l     O .rwdata	00000030 Audio
0000657c l     O .rwdata	0000002c Expansion_JP1
000065a8 l     O .rwdata	0000002c Expansion_JP2
000065d4 l     O .rwdata	0000002c Green_LEDs
00006600 l     O .rwdata	0000002c HEX3_HEX0
0000662c l     O .rwdata	0000002c Pushbuttons
00006658 l     O .rwdata	0000002c Red_LEDs
00006684 l     O .rwdata	0000002c Slider_Switches
000066b0 l     O .rwdata	00000038 PS2_Port
000066e8 l     O .rwdata	0000002c Serial_Port
00006714 l     O .rwdata	00000048 VGA_Char_Buffer
0000675c l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000d5c l     F .text	00000054 altera_avalon_jtag_uart_timeout
00000e28 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000012f8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000025cc l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000026d4 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00006958 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003368 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000374c l     F .text	00000058 std
00003858 l     F .text	00000008 __fp_lock
00003860 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007194 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004d74 g     F .text	00000070 _isatty_r
00000798 g     F .text	00000050 alt_main
00001c50 g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
00008ec4 g     O .bss	00000100 alt_irq
00001688 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
00004de4 g     F .text	00000078 _lseek_r
00007198 g       *ABS*	00000000 __flash_rwdata_start
00008fc4 g       *ABS*	00000000 __alt_heap_start
000049b0 g     F .text	00000068 __sseek
000037b4 g     F .text	000000a4 __sinit
000030e0 g     F .text	00000130 __swbuf_r
00001890 g     F .text	00000088 alt_up_char_buffer_string
00001348 g     F .text	0000000c read_CE_bit
000038b4 g     F .text	00000068 __sfmoreglue
00005088 g     F .text	00000004 __malloc_unlock
00001418 g     F .text	00000080 alt_up_ps2_read_data_byte_timeout
00001734 g     F .text	00000080 alt_up_rs232_read_fd
00001918 g     F .text	00000058 alt_up_char_buffer_draw
000038a4 g     F .text	00000010 _cleanup
00002344 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
00002438 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004d00 g     F .text	00000074 _fstat_r
00008e8c g     O .bss	00000004 errno
00008e78 g     O .bss	00000004 alt_argv
0000f160 g       *ABS*	00000000 _gp
00002410 g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
000067d8 g     O .rwdata	00000180 alt_fd_list
00002644 g     F .text	00000070 alt_find_dev
00002d24 g     F .text	000000a0 memcpy
00001970 g     F .text	00000028 alt_up_char_buffer_clear
00003898 g     F .text	0000000c _cleanup_r
00002738 g     F .text	00000098 alt_io_redirect
000016e8 g     F .text	0000004c alt_up_rs232_read_data
00002400 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
00000fd0 g     F .text	00000168 altera_avalon_jtag_uart_read
00004f68 g     F .text	00000084 isatty
00001de4 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00002c3c g     F .text	0000003c alt_icache_flush
00008e90 g     O .bss	00000004 __malloc_top_pad
00004938 g     F .text	00000070 _sbrk_r
00001a08 g     F .text	0000005c helper_plot_pixel
00004e5c g     F .text	00000078 _read_r
00007170 g     O .rwdata	00000004 alt_max_fd
000016bc g     F .text	0000000c alt_up_rs232_check_parity
00004bdc g     F .text	00000110 _fclose_r
00001354 g     F .text	00000008 read_num_bytes_available
00003718 g     F .text	00000034 fflush
00008e94 g     O .bss	00000004 __malloc_max_sbrked_mem
000027d0 g     F .text	000000bc alt_irq_register
00001334 g     F .text	0000000c read_RI_bit
0000226c g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
00004fec g     F .text	00000098 lseek
00007188 g     O .rwdata	00000004 _global_impure_ptr
00008fc4 g       *ABS*	00000000 __bss_end
00002028 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00002a60 g     F .text	000000ac alt_tick
00001368 g     F .text	00000008 read_data_byte
00003880 g     F .text	00000018 __fp_lock_all
00002a2c g     F .text	00000034 alt_alarm_stop
00001340 g     F .text	00000008 read_RE_bit
00008e80 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
000067b0 g     O .rwdata	00000028 alt_dev_null
0000151c g     F .text	00000040 alt_up_ps2_write_data_byte
000025c8 g     F .text	00000004 alt_dcache_flush_all
00001f58 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
00007198 g       *ABS*	00000000 __ram_rwdata_end
00007168 g     O .rwdata	00000008 alt_dev_list
000051d4 g     F .text	000000f4 write
00002ec8 g     F .text	000000e8 _putc_r
00001a64 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
000054bc g       *ABS*	00000000 __ram_rodata_end
00004ee8 g     F .text	00000080 fstat
000017dc g     F .text	00000070 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00008fc4 g       *ABS*	00000000 end
0000155c g     F .text	00000070 alt_up_ps2_write_fd
000019b8 g     F .text	00000050 alt_up_char_buffer_init
00000db0 g     F .text	00000078 altera_avalon_jtag_uart_init
00800000 g       *ABS*	00000000 __alt_stack_pointer
000012b4 g     F .text	00000044 alt_avalon_timer_sc_init
00001138 g     F .text	0000017c altera_avalon_jtag_uart_write
000037a4 g     F .text	00000004 __sfp_lock_acquire
00003b38 g     F .text	00000314 _free_r
000007e8 g     F .text	000001dc alt_printf
0000336c g     F .text	000001b0 __call_exitprocs
00007190 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
00008e84 g     O .bss	00000004 _alt_tick_rate
00008e88 g     O .bss	00000004 _alt_nticks
0000508c g     F .text	000000f8 read
00000a0c g     F .text	00000280 alt_sys_init
000001a4 g     F .text	000001f4 draw_big_A
00001390 g     F .text	00000030 alt_up_ps2_clear_fifo
000017b4 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00000d24 g     F .text	00000038 altera_avalon_jtag_uart_close
000054bc g       *ABS*	00000000 __ram_rwdata_start
000052cc g       *ABS*	00000000 __ram_rodata_start
00008e9c g     O .bss	00000028 __malloc_current_mallinfo
00000cfc g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00002bd0 g     F .text	0000006c alt_get_fd
00004b6c g     F .text	00000070 _close_r
00002cb0 g     F .text	00000074 memcmp
00000cac g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00008fc4 g       *ABS*	00000000 __alt_stack_base
00000c8c g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
0000322c g     F .text	0000013c __swsetup_r
0000391c g     F .text	000000f0 __sfp
00006d58 g     O .rwdata	00000408 __malloc_av_
000037b0 g     F .text	00000004 __sinit_lock_release
00004a94 g     F .text	00000060 __sread
0000184c g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00002b14 g     F .text	000000bc alt_find_file
000025d4 g     F .text	00000070 alt_dev_llist_insert
00005084 g     F .text	00000004 __malloc_lock
00005184 g     F .text	00000050 sbrk
0000351c g     F .text	000001fc _fflush_r
00008e74 g       *ABS*	00000000 __bss_start
000048a0 g     F .text	00000098 memset
00000398 g     F .text	0000033c main
00008e7c g     O .bss	00000004 alt_envp
00008e98 g     O .bss	00000004 __malloc_max_total_mem
00002320 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001998 g     F .text	00000020 alt_up_char_buffer_open_dev
00000cd4 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00003210 g     F .text	0000001c __swbuf
000049a8 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00004cec g     F .text	00000014 fclose
000013c0 g     F .text	00000058 alt_up_ps2_read_data_byte
00004160 g     F .text	00000740 _malloc_r
00007174 g     O .rwdata	00000004 alt_errno
00003f14 g     F .text	000000b8 _fwalk
00001370 g     F .text	00000020 alt_up_ps2_open_dev
00002dc4 g     F .text	00000104 putc
00003a0c g     F .text	0000012c _malloc_trim_r
000016a4 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00002fb0 g     F .text	000000bc strcmp
000052cc g       *ABS*	00000000 __flash_rodata_start
000016c8 g     F .text	00000020 alt_up_rs232_open_dev
000009ec g     F .text	00000020 alt_irq_init
00002a08 g     F .text	00000024 alt_release_fd
0000135c g     F .text	0000000c read_data_valid
000015cc g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00004af4 g     F .text	00000078 _write_r
00007184 g     O .rwdata	00000004 _impure_ptr
00008e74 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00003868 g     F .text	00000018 __fp_unlock_all
00007160 g     O .rwdata	00000008 alt_fs_list
00001868 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
000017c4 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007198 g       *ABS*	00000000 _edata
00008fc4 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000f5c g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00004a18 g     F .text	0000007c __swrite
0000718c g     O .rwdata	00000004 __malloc_trim_threshold
00002b0c g     F .text	00000008 altera_nios2_qsys_irq_init
00002c78 g     F .text	00000038 exit
00003e4c g     F .text	000000c8 _fwalk_reent
00001600 g     F .text	00000088 alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000037a8 g     F .text	00000004 __sfp_lock_release
00004ed4 g     F .text	00000014 _exit
00002458 g     F .text	00000094 alt_alarm_start
00003fcc g     F .text	00000194 __smakebuf_r
000014c0 g     F .text	0000005c alt_up_ps2_wait_for_ack
0000306c g     F .text	00000074 strlen
0000288c g     F .text	0000017c open
000009c4 g     F .text	00000028 alt_putchar
000026b4 g     F .text	00000020 alt_icache_flush_all
00007178 g     O .rwdata	00000004 alt_priority_mask
00001498 g     F .text	00000028 alt_up_ps2_read_fd
0000717c g     O .rwdata	00000008 alt_alarm_list
00001880 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
000024ec g     F .text	000000dc close
000006d4 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free
000037ac g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00808014 	movui	r2,512
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	8423b104 	addi	r16,r16,-28988
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6bc5814 	ori	gp,gp,61792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10a39d14 	ori	r2,r2,36468

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18e3f114 	ori	r3,r3,36804

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00006d40 	call	6d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00007980 	call	798 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <draw_big_A>:
	}
}

/* draws a big letter A on the screen */
void draw_big_A(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev )
{
     1a4:	defff404 	addi	sp,sp,-48
     1a8:	dfc00b15 	stw	ra,44(sp)
     1ac:	ddc00a15 	stw	r23,40(sp)
     1b0:	dd800915 	stw	r22,36(sp)
     1b4:	dd400815 	stw	r21,32(sp)
     1b8:	dd000715 	stw	r20,28(sp)
     1bc:	dcc00615 	stw	r19,24(sp)
     1c0:	dc800515 	stw	r18,20(sp)
     1c4:	dc400415 	stw	r17,16(sp)
     1c8:	dc000315 	stw	r16,12(sp)
     1cc:	2027883a 	mov	r19,r4
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 10, 88, 44, 10, 0xffff, 0);
     1d0:	05c00284 	movi	r23,10
     1d4:	04801604 	movi	r18,88
     1d8:	04000b04 	movi	r16,44
     1dc:	ddc00015 	stw	r23,0(sp)
     1e0:	047fffd4 	movui	r17,65535
     1e4:	dc400115 	stw	r17,4(sp)
     1e8:	d8000215 	stw	zero,8(sp)
     1ec:	b80b883a 	mov	r5,r23
     1f0:	900d883a 	mov	r6,r18
     1f4:	800f883a 	mov	r7,r16
     1f8:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 44, 10, 72, 10, 0xffff, 0);
     1fc:	05001204 	movi	r20,72
     200:	ddc00015 	stw	r23,0(sp)
     204:	dc400115 	stw	r17,4(sp)
     208:	d8000215 	stw	zero,8(sp)
     20c:	9809883a 	mov	r4,r19
     210:	800b883a 	mov	r5,r16
     214:	b80d883a 	mov	r6,r23
     218:	a00f883a 	mov	r7,r20
     21c:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 72, 10, 106, 88, 0xffff, 0);
     220:	04001a84 	movi	r16,106
     224:	dc800015 	stw	r18,0(sp)
     228:	dc400115 	stw	r17,4(sp)
     22c:	d8000215 	stw	zero,8(sp)
     230:	9809883a 	mov	r4,r19
     234:	a00b883a 	mov	r5,r20
     238:	b80d883a 	mov	r6,r23
     23c:	800f883a 	mov	r7,r16
     240:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 106, 88, 81, 88, 0xffff, 0);
     244:	05001444 	movi	r20,81
     248:	dc800015 	stw	r18,0(sp)
     24c:	dc400115 	stw	r17,4(sp)
     250:	d8000215 	stw	zero,8(sp)
     254:	9809883a 	mov	r4,r19
     258:	800b883a 	mov	r5,r16
     25c:	900d883a 	mov	r6,r18
     260:	a00f883a 	mov	r7,r20
     264:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 81, 88, 75, 77, 0xffff, 0);
     268:	058012c4 	movi	r22,75
     26c:	04001344 	movi	r16,77
     270:	dc000015 	stw	r16,0(sp)
     274:	dc400115 	stw	r17,4(sp)
     278:	d8000215 	stw	zero,8(sp)
     27c:	9809883a 	mov	r4,r19
     280:	a00b883a 	mov	r5,r20
     284:	900d883a 	mov	r6,r18
     288:	b00f883a 	mov	r7,r22
     28c:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 75, 77, 41, 77, 0xffff, 0);
     290:	05400a44 	movi	r21,41
     294:	dc000015 	stw	r16,0(sp)
     298:	dc400115 	stw	r17,4(sp)
     29c:	d8000215 	stw	zero,8(sp)
     2a0:	9809883a 	mov	r4,r19
     2a4:	b00b883a 	mov	r5,r22
     2a8:	800d883a 	mov	r6,r16
     2ac:	a80f883a 	mov	r7,r21
     2b0:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 41, 77, 35, 88, 0xffff, 0);
     2b4:	050008c4 	movi	r20,35
     2b8:	dc800015 	stw	r18,0(sp)
     2bc:	dc400115 	stw	r17,4(sp)
     2c0:	d8000215 	stw	zero,8(sp)
     2c4:	9809883a 	mov	r4,r19
     2c8:	a80b883a 	mov	r5,r21
     2cc:	800d883a 	mov	r6,r16
     2d0:	a00f883a 	mov	r7,r20
     2d4:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 35, 88, 10, 88, 0xffff, 0);
     2d8:	dc800015 	stw	r18,0(sp)
     2dc:	dc400115 	stw	r17,4(sp)
     2e0:	d8000215 	stw	zero,8(sp)
     2e4:	9809883a 	mov	r4,r19
     2e8:	a00b883a 	mov	r5,r20
     2ec:	900d883a 	mov	r6,r18
     2f0:	b80f883a 	mov	r7,r23
     2f4:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 47, 60, 58, 32, 0xffff, 0);
     2f8:	05800bc4 	movi	r22,47
     2fc:	04000f04 	movi	r16,60
     300:	05000e84 	movi	r20,58
     304:	05400804 	movi	r21,32
     308:	dd400015 	stw	r21,0(sp)
     30c:	dc400115 	stw	r17,4(sp)
     310:	d8000215 	stw	zero,8(sp)
     314:	9809883a 	mov	r4,r19
     318:	b00b883a 	mov	r5,r22
     31c:	800d883a 	mov	r6,r16
     320:	a00f883a 	mov	r7,r20
     324:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 58, 32, 69, 60, 0xffff, 0);
     328:	04801144 	movi	r18,69
     32c:	dc000015 	stw	r16,0(sp)
     330:	dc400115 	stw	r17,4(sp)
     334:	d8000215 	stw	zero,8(sp)
     338:	9809883a 	mov	r4,r19
     33c:	a00b883a 	mov	r5,r20
     340:	a80d883a 	mov	r6,r21
     344:	900f883a 	mov	r7,r18
     348:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 69, 60, 47, 60, 0xffff, 0);
     34c:	dc000015 	stw	r16,0(sp)
     350:	dc400115 	stw	r17,4(sp)
     354:	d8000215 	stw	zero,8(sp)
     358:	9809883a 	mov	r4,r19
     35c:	900b883a 	mov	r5,r18
     360:	800d883a 	mov	r6,r16
     364:	b00f883a 	mov	r7,r22
     368:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
}
     36c:	dfc00b17 	ldw	ra,44(sp)
     370:	ddc00a17 	ldw	r23,40(sp)
     374:	dd800917 	ldw	r22,36(sp)
     378:	dd400817 	ldw	r21,32(sp)
     37c:	dd000717 	ldw	r20,28(sp)
     380:	dcc00617 	ldw	r19,24(sp)
     384:	dc800517 	ldw	r18,20(sp)
     388:	dc400417 	ldw	r17,16(sp)
     38c:	dc000317 	ldw	r16,12(sp)
     390:	dec00c04 	addi	sp,sp,48
     394:	f800283a 	ret

00000398 <main>:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void)
{
     398:	defff104 	addi	sp,sp,-60
     39c:	dfc00e15 	stw	ra,56(sp)
     3a0:	df000d15 	stw	fp,52(sp)
     3a4:	ddc00c15 	stw	r23,48(sp)
     3a8:	dd800b15 	stw	r22,44(sp)
     3ac:	dd400a15 	stw	r21,40(sp)
     3b0:	dd000915 	stw	r20,36(sp)
     3b4:	dcc00815 	stw	r19,32(sp)
     3b8:	dc800715 	stw	r18,28(sp)
     3bc:	dc400615 	stw	r17,24(sp)
     3c0:	dc000515 	stw	r16,20(sp)
	/* create a message to be displayed on the VGA display */
//	char text_top_row[40] = "Altera DE1\0";
//	char text_bottom_row[40] = "Media Computer\0";

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     3c4:	01000034 	movhi	r4,0
     3c8:	2114b304 	addi	r4,r4,21196
     3cc:	00024380 	call	2438 <alt_up_pixel_buffer_dma_open_dev>
     3d0:	1027883a 	mov	r19,r2
	if ( pixel_buffer_dev == NULL)
     3d4:	1000041e 	bne	r2,zero,3e8 <main+0x50>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     3d8:	01000034 	movhi	r4,0
     3dc:	2114b904 	addi	r4,r4,21220
     3e0:	00007e80 	call	7e8 <alt_printf>
     3e4:	00000306 	br	3f4 <main+0x5c>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     3e8:	01000034 	movhi	r4,0
     3ec:	2114c504 	addi	r4,r4,21268
     3f0:	00007e80 	call	7e8 <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     3f4:	9809883a 	mov	r4,r19
     3f8:	000b883a 	mov	r5,zero
     3fc:	000226c0 	call	226c <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     400:	01000034 	movhi	r4,0
     404:	2114d004 	addi	r4,r4,21312
     408:	00019980 	call	1998 <alt_up_char_buffer_open_dev>
	if (char_buffer_dev == NULL)
     40c:	1000a126 	beq	r2,zero,694 <main+0x2fc>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     410:	01000034 	movhi	r4,0
     414:	2114e204 	addi	r4,r4,21384
     418:	00007e80 	call	7e8 <alt_printf>
//	draw_big_A (pixel_buffer_dev);

	/* now draw a red rectangle with diagonal green lines */
	x1 = 20; y1 = 20;
	x2 = 50; y2 = 50;
	alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     41c:	04000504 	movi	r16,20
     420:	04400c84 	movi	r17,50
     424:	dc400015 	stw	r17,0(sp)
     428:	00be0014 	movui	r2,63488
     42c:	d8800115 	stw	r2,4(sp)
     430:	d8000215 	stw	zero,8(sp)
     434:	9809883a 	mov	r4,r19
     438:	800b883a 	mov	r5,r16
     43c:	800d883a 	mov	r6,r16
     440:	880f883a 	mov	r7,r17
     444:	0001f580 	call	1f58 <alt_up_pixel_buffer_dma_draw_rectangle>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     448:	dc400015 	stw	r17,0(sp)
     44c:	0481f804 	movi	r18,2016
     450:	dc800115 	stw	r18,4(sp)
     454:	d8000215 	stw	zero,8(sp)
     458:	9809883a 	mov	r4,r19
     45c:	800b883a 	mov	r5,r16
     460:	800d883a 	mov	r6,r16
     464:	880f883a 	mov	r7,r17
     468:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     46c:	dc000015 	stw	r16,0(sp)
     470:	dc800115 	stw	r18,4(sp)
     474:	d8000215 	stw	zero,8(sp)
     478:	9809883a 	mov	r4,r19
     47c:	800b883a 	mov	r5,r16
     480:	880d883a 	mov	r6,r17
     484:	880f883a 	mov	r7,r17
     488:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     48c:	9809883a 	mov	r4,r19
     490:	00023200 	call	2320 <alt_up_pixel_buffer_dma_swap_buffers>
     494:	002d883a 	mov	r22,zero
     498:	8029883a 	mov	r20,r16
     49c:	8825883a 	mov	r18,r17
     4a0:	00800044 	movi	r2,1
     4a4:	d8800315 	stw	r2,12(sp)
     4a8:	d8800415 	stw	r2,16(sp)
     4ac:	1039883a 	mov	fp,r2
     4b0:	102f883a 	mov	r23,r2
	/* set the direction in which the box will move */
	deltax_1 = deltax_2 = deltay_1 = deltay_2 = 1;

	while(1)
	{
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     4b4:	9809883a 	mov	r4,r19
     4b8:	00024000 	call	2400 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     4bc:	103ffd1e 	bne	r2,zero,4b4 <main+0x11c>
		{
			/* If the screen has been drawn completely then we can draw a new image. This 
			 * section of the code will only be entered once every 60th of a second, because 
			 * this is how long it take the VGA controller to copy the image from memory to 
			 * the screen. */
			delay = 1 - delay;
     4c0:	05400044 	movi	r21,1
     4c4:	adadc83a 	sub	r22,r21,r22

			if (delay == 0)
     4c8:	b0006f1e 	bne	r22,zero,688 <main+0x2f0>
			{
				/* The delay is inserted to slow down the animation from 60 frames per second 
				 * to 30. Every other refresh cycle the code below will execute. We first erase 
				 * the box with Erase Rectangle */
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     4cc:	dc800015 	stw	r18,0(sp)
     4d0:	d8000115 	stw	zero,4(sp)
     4d4:	d8000215 	stw	zero,8(sp)
     4d8:	9809883a 	mov	r4,r19
     4dc:	a00b883a 	mov	r5,r20
     4e0:	800d883a 	mov	r6,r16
     4e4:	880f883a 	mov	r7,r17
     4e8:	0001f580 	call	1f58 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     4ec:	dc800015 	stw	r18,0(sp)
     4f0:	d8000115 	stw	zero,4(sp)
     4f4:	d8000215 	stw	zero,8(sp)
     4f8:	9809883a 	mov	r4,r19
     4fc:	a00b883a 	mov	r5,r20
     500:	800d883a 	mov	r6,r16
     504:	880f883a 	mov	r7,r17
     508:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0, 0);
     50c:	dc000015 	stw	r16,0(sp)
     510:	d8000115 	stw	zero,4(sp)
     514:	d8000215 	stw	zero,8(sp)
     518:	9809883a 	mov	r4,r19
     51c:	a00b883a 	mov	r5,r20
     520:	900d883a 	mov	r6,r18
     524:	880f883a 	mov	r7,r17
     528:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>

				// move the rectangle
				x1 = x1 + deltax_1;
     52c:	d8800417 	ldw	r2,16(sp)
     530:	a0a9883a 	add	r20,r20,r2
				x2 = x2 + deltax_2;
     534:	d8800317 	ldw	r2,12(sp)
     538:	88a3883a 	add	r17,r17,r2
				y1 = y1 + deltay_1;
     53c:	85e1883a 	add	r16,r16,r23
				y2 = y2 + deltay_2;
     540:	9725883a 	add	r18,r18,fp
				if ((deltax_1 > 0) && (x1 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     544:	d8800417 	ldw	r2,16(sp)
     548:	0080080e 	bge	zero,r2,56c <main+0x1d4>
     54c:	98800f17 	ldw	r2,60(r19)
     550:	1545c83a 	sub	r2,r2,r21
     554:	a0800b36 	bltu	r20,r2,584 <main+0x1ec>
				{
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     558:	1029883a 	mov	r20,r2
					deltax_1 = -deltax_1;
     55c:	d8800417 	ldw	r2,16(sp)
     560:	0085c83a 	sub	r2,zero,r2
     564:	d8800415 	stw	r2,16(sp)
     568:	00000606 	br	584 <main+0x1ec>
				}
				else if ((deltax_1 < 0) && (x1 <= 0))
     56c:	d8800417 	ldw	r2,16(sp)
     570:	1000040e 	bge	r2,zero,584 <main+0x1ec>
     574:	05000316 	blt	zero,r20,584 <main+0x1ec>
				{
					x1 = 0;
					deltax_1 = -deltax_1;
     578:	0085c83a 	sub	r2,zero,r2
     57c:	d8800415 	stw	r2,16(sp)
     580:	0029883a 	mov	r20,zero
				}
				if ((deltax_2 > 0) && (x2 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     584:	d8800317 	ldw	r2,12(sp)
     588:	0080080e 	bge	zero,r2,5ac <main+0x214>
     58c:	98800f17 	ldw	r2,60(r19)
     590:	10bfffc4 	addi	r2,r2,-1
     594:	88800b36 	bltu	r17,r2,5c4 <main+0x22c>
				{
					x2 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     598:	1023883a 	mov	r17,r2
					deltax_2 = -deltax_2;
     59c:	d8800317 	ldw	r2,12(sp)
     5a0:	0085c83a 	sub	r2,zero,r2
     5a4:	d8800315 	stw	r2,12(sp)
     5a8:	00000606 	br	5c4 <main+0x22c>
				}
				else if ((deltax_2 < 0) && (x2 <= 0))
     5ac:	d8800317 	ldw	r2,12(sp)
     5b0:	1000040e 	bge	r2,zero,5c4 <main+0x22c>
     5b4:	04400316 	blt	zero,r17,5c4 <main+0x22c>
				{
					x2 = 0;
					deltax_2 = -deltax_2;
     5b8:	0085c83a 	sub	r2,zero,r2
     5bc:	d8800315 	stw	r2,12(sp)
     5c0:	0023883a 	mov	r17,zero
				}
				if ((deltay_1 > 0) && (y1 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     5c4:	05c0060e 	bge	zero,r23,5e0 <main+0x248>
     5c8:	98801017 	ldw	r2,64(r19)
     5cc:	10bfffc4 	addi	r2,r2,-1
     5d0:	80800736 	bltu	r16,r2,5f0 <main+0x258>
				{
					y1 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     5d4:	1021883a 	mov	r16,r2
					deltay_1 = -deltay_1;
     5d8:	05efc83a 	sub	r23,zero,r23
     5dc:	00000406 	br	5f0 <main+0x258>
				}
				else if ((deltay_1 < 0) && (y1 <= 0))
     5e0:	b800030e 	bge	r23,zero,5f0 <main+0x258>
     5e4:	04000216 	blt	zero,r16,5f0 <main+0x258>
				{
					y1 = 0;
					deltay_1 = -deltay_1;
     5e8:	05efc83a 	sub	r23,zero,r23
     5ec:	0021883a 	mov	r16,zero
				}
				if ((deltay_2 > 0) && (y2 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     5f0:	0700060e 	bge	zero,fp,60c <main+0x274>
     5f4:	98801017 	ldw	r2,64(r19)
     5f8:	10bfffc4 	addi	r2,r2,-1
     5fc:	90800736 	bltu	r18,r2,61c <main+0x284>
				{
					y2 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     600:	1025883a 	mov	r18,r2
					deltay_2 = -deltay_2;
     604:	0739c83a 	sub	fp,zero,fp
     608:	00000406 	br	61c <main+0x284>
				}
				else if ((deltay_2 < 0) && (y2 <= 0))
     60c:	e000030e 	bge	fp,zero,61c <main+0x284>
     610:	04800216 	blt	zero,r18,61c <main+0x284>
				{
					y2 = 0;
					deltay_2 = -deltay_2;
     614:	0739c83a 	sub	fp,zero,fp
     618:	0025883a 	mov	r18,zero
				}

				// redraw Rectangle with diagonal lines
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     61c:	dc800015 	stw	r18,0(sp)
     620:	00be0014 	movui	r2,63488
     624:	d8800115 	stw	r2,4(sp)
     628:	d8000215 	stw	zero,8(sp)
     62c:	9809883a 	mov	r4,r19
     630:	a00b883a 	mov	r5,r20
     634:	800d883a 	mov	r6,r16
     638:	880f883a 	mov	r7,r17
     63c:	0001f580 	call	1f58 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     640:	dc800015 	stw	r18,0(sp)
     644:	0081f804 	movi	r2,2016
     648:	d8800115 	stw	r2,4(sp)
     64c:	d8000215 	stw	zero,8(sp)
     650:	9809883a 	mov	r4,r19
     654:	a00b883a 	mov	r5,r20
     658:	800d883a 	mov	r6,r16
     65c:	880f883a 	mov	r7,r17
     660:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     664:	dc000015 	stw	r16,0(sp)
     668:	0081f804 	movi	r2,2016
     66c:	d8800115 	stw	r2,4(sp)
     670:	d8000215 	stw	zero,8(sp)
     674:	9809883a 	mov	r4,r19
     678:	a00b883a 	mov	r5,r20
     67c:	900d883a 	mov	r6,r18
     680:	880f883a 	mov	r7,r17
     684:	0001a640 	call	1a64 <alt_up_pixel_buffer_dma_draw_line>
			//	draw_big_A (pixel_buffer_dev);
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     688:	9809883a 	mov	r4,r19
     68c:	00023200 	call	2320 <alt_up_pixel_buffer_dma_swap_buffers>
     690:	003f8806 	br	4b4 <main+0x11c>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     694:	01000034 	movhi	r4,0
     698:	2114d604 	addi	r4,r4,21336
     69c:	00007e80 	call	7e8 <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     6a0:	00bfffc4 	movi	r2,-1
     6a4:	dfc00e17 	ldw	ra,56(sp)
     6a8:	df000d17 	ldw	fp,52(sp)
     6ac:	ddc00c17 	ldw	r23,48(sp)
     6b0:	dd800b17 	ldw	r22,44(sp)
     6b4:	dd400a17 	ldw	r21,40(sp)
     6b8:	dd000917 	ldw	r20,36(sp)
     6bc:	dcc00817 	ldw	r19,32(sp)
     6c0:	dc800717 	ldw	r18,28(sp)
     6c4:	dc400617 	ldw	r17,24(sp)
     6c8:	dc000517 	ldw	r16,20(sp)
     6cc:	dec00f04 	addi	sp,sp,60
     6d0:	f800283a 	ret

000006d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     6d4:	deffff04 	addi	sp,sp,-4
     6d8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     6dc:	01000034 	movhi	r4,0
     6e0:	211c6604 	addi	r4,r4,29080
     6e4:	00c00034 	movhi	r3,0
     6e8:	18d52f04 	addi	r3,r3,21692

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     6ec:	20c00926 	beq	r4,r3,714 <alt_load+0x40>
     6f0:	01800034 	movhi	r6,0
     6f4:	319c6604 	addi	r6,r6,29080
  {
    while( to != end )
     6f8:	19800626 	beq	r3,r6,714 <alt_load+0x40>
     6fc:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     700:	20800017 	ldw	r2,0(r4)
     704:	18800015 	stw	r2,0(r3)
     708:	1947883a 	add	r3,r3,r5
     70c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     710:	30fffb1e 	bne	r6,r3,700 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     714:	01000034 	movhi	r4,0
     718:	21000804 	addi	r4,r4,32
     71c:	00c00034 	movhi	r3,0
     720:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     724:	20c00926 	beq	r4,r3,74c <alt_load+0x78>
     728:	01800034 	movhi	r6,0
     72c:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     730:	19800626 	beq	r3,r6,74c <alt_load+0x78>
     734:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     738:	20800017 	ldw	r2,0(r4)
     73c:	18800015 	stw	r2,0(r3)
     740:	1947883a 	add	r3,r3,r5
     744:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     748:	30fffb1e 	bne	r6,r3,738 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     74c:	01000034 	movhi	r4,0
     750:	2114b304 	addi	r4,r4,21196
     754:	00c00034 	movhi	r3,0
     758:	18d4b304 	addi	r3,r3,21196

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     75c:	20c00926 	beq	r4,r3,784 <alt_load+0xb0>
     760:	01800034 	movhi	r6,0
     764:	31952f04 	addi	r6,r6,21692
  {
    while( to != end )
     768:	19800626 	beq	r3,r6,784 <alt_load+0xb0>
     76c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     770:	20800017 	ldw	r2,0(r4)
     774:	18800015 	stw	r2,0(r3)
     778:	1947883a 	add	r3,r3,r5
     77c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     780:	30fffb1e 	bne	r6,r3,770 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     784:	00025c80 	call	25c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     788:	00026b40 	call	26b4 <alt_icache_flush_all>
}
     78c:	dfc00017 	ldw	ra,0(sp)
     790:	dec00104 	addi	sp,sp,4
     794:	f800283a 	ret

00000798 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     798:	defffe04 	addi	sp,sp,-8
     79c:	dfc00115 	stw	ra,4(sp)
     7a0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     7a4:	0009883a 	mov	r4,zero
     7a8:	00009ec0 	call	9ec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     7ac:	0000a0c0 	call	a0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     7b0:	01800034 	movhi	r6,0
     7b4:	3194ea04 	addi	r6,r6,21416
     7b8:	3009883a 	mov	r4,r6
     7bc:	300b883a 	mov	r5,r6
     7c0:	00027380 	call	2738 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     7c4:	d1274517 	ldw	r4,-25324(gp)
     7c8:	d1674617 	ldw	r5,-25320(gp)
     7cc:	d1a74717 	ldw	r6,-25316(gp)
     7d0:	00003980 	call	398 <main>
     7d4:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     7d8:	01000044 	movi	r4,1
     7dc:	00024ec0 	call	24ec <close>
  exit (result);
     7e0:	8009883a 	mov	r4,r16
     7e4:	0002c780 	call	2c78 <exit>

000007e8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     7e8:	defff804 	addi	sp,sp,-32
     7ec:	dfc00415 	stw	ra,16(sp)
     7f0:	dc800315 	stw	r18,12(sp)
     7f4:	dc400215 	stw	r17,8(sp)
     7f8:	dc000115 	stw	r16,4(sp)
     7fc:	d9400515 	stw	r5,20(sp)
     800:	d9800615 	stw	r6,24(sp)
     804:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     808:	d8800504 	addi	r2,sp,20
     80c:	d8800015 	stw	r2,0(sp)
     810:	2023883a 	mov	r17,r4
     814:	00005d06 	br	98c <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     818:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     81c:	21003fcc 	andi	r4,r4,255
     820:	2100201c 	xori	r4,r4,128
     824:	213fe004 	addi	r4,r4,-128
     828:	00800944 	movi	r2,37
     82c:	20800226 	beq	r4,r2,838 <alt_printf+0x50>
        {
            alt_putchar(c);
     830:	00009c40 	call	9c4 <alt_putchar>
     834:	00005506 	br	98c <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     838:	89400003 	ldbu	r5,0(r17)
     83c:	8c400044 	addi	r17,r17,1
     840:	29003fcc 	andi	r4,r5,255
     844:	2100201c 	xori	r4,r4,128
     848:	213fe004 	addi	r4,r4,-128
     84c:	20005726 	beq	r4,zero,9ac <alt_printf+0x1c4>
            {
                if (c == '%')
     850:	00800944 	movi	r2,37
     854:	2080021e 	bne	r4,r2,860 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     858:	00009c40 	call	9c4 <alt_putchar>
     85c:	00004b06 	br	98c <alt_printf+0x1a4>
                } 
                else if (c == 'c')
     860:	28c03fcc 	andi	r3,r5,255
     864:	18c0201c 	xori	r3,r3,128
     868:	18ffe004 	addi	r3,r3,-128
     86c:	008018c4 	movi	r2,99
     870:	1880061e 	bne	r3,r2,88c <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
     874:	d8c00017 	ldw	r3,0(sp)
     878:	18800104 	addi	r2,r3,4
     87c:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     880:	19000017 	ldw	r4,0(r3)
     884:	00009c40 	call	9c4 <alt_putchar>
     888:	00004006 	br	98c <alt_printf+0x1a4>
                }
                else if (c == 'x')
     88c:	28c03fcc 	andi	r3,r5,255
     890:	18c0201c 	xori	r3,r3,128
     894:	18ffe004 	addi	r3,r3,-128
     898:	00801e04 	movi	r2,120
     89c:	1880231e 	bne	r3,r2,92c <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     8a0:	d8c00017 	ldw	r3,0(sp)
     8a4:	18800104 	addi	r2,r3,4
     8a8:	d8800015 	stw	r2,0(sp)
     8ac:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     8b0:	90000326 	beq	r18,zero,8c0 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     8b4:	90bc002c 	andhi	r2,r18,61440
     8b8:	10000426 	beq	r2,zero,8cc <alt_printf+0xe4>
     8bc:	00003906 	br	9a4 <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     8c0:	01000c04 	movi	r4,48
     8c4:	00009c40 	call	9c4 <alt_putchar>
     8c8:	00003006 	br	98c <alt_printf+0x1a4>
                        continue;
     8cc:	04000704 	movi	r16,28
     8d0:	013fff04 	movi	r4,-4
     8d4:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     8d8:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     8dc:	1c04983a 	sll	r2,r3,r16
     8e0:	9084703a 	and	r2,r18,r2
     8e4:	103ffc26 	beq	r2,zero,8d8 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     8e8:	80002816 	blt	r16,zero,98c <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     8ec:	008003c4 	movi	r2,15
     8f0:	1404983a 	sll	r2,r2,r16
     8f4:	9084703a 	and	r2,r18,r2
     8f8:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     8fc:	00800244 	movi	r2,9
     900:	10c00236 	bltu	r2,r3,90c <alt_printf+0x124>
                            c = '0' + digit;
     904:	19000c04 	addi	r4,r3,48
     908:	00000106 	br	910 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
     90c:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     910:	21003fcc 	andi	r4,r4,255
     914:	2100201c 	xori	r4,r4,128
     918:	213fe004 	addi	r4,r4,-128
     91c:	00009c40 	call	9c4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     920:	843fff04 	addi	r16,r16,-4
     924:	80001916 	blt	r16,zero,98c <alt_printf+0x1a4>
     928:	003ff006 	br	8ec <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     92c:	28c03fcc 	andi	r3,r5,255
     930:	18c0201c 	xori	r3,r3,128
     934:	18ffe004 	addi	r3,r3,-128
     938:	00801cc4 	movi	r2,115
     93c:	1880131e 	bne	r3,r2,98c <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     940:	d8800017 	ldw	r2,0(sp)
     944:	10c00104 	addi	r3,r2,4
     948:	d8c00015 	stw	r3,0(sp)
     94c:	14000017 	ldw	r16,0(r2)

                    while(*s)
     950:	81000003 	ldbu	r4,0(r16)
     954:	20803fcc 	andi	r2,r4,255
     958:	1080201c 	xori	r2,r2,128
     95c:	10bfe004 	addi	r2,r2,-128
     960:	10000a26 	beq	r2,zero,98c <alt_printf+0x1a4>
                      alt_putchar(*s++);
     964:	84000044 	addi	r16,r16,1
     968:	21003fcc 	andi	r4,r4,255
     96c:	2100201c 	xori	r4,r4,128
     970:	213fe004 	addi	r4,r4,-128
     974:	00009c40 	call	9c4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     978:	81000003 	ldbu	r4,0(r16)
     97c:	20803fcc 	andi	r2,r4,255
     980:	1080201c 	xori	r2,r2,128
     984:	10bfe004 	addi	r2,r2,-128
     988:	103ff61e 	bne	r2,zero,964 <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     98c:	89000003 	ldbu	r4,0(r17)
     990:	20803fcc 	andi	r2,r4,255
     994:	1080201c 	xori	r2,r2,128
     998:	10bfe004 	addi	r2,r2,-128
     99c:	103f9e1e 	bne	r2,zero,818 <alt_printf+0x30>
     9a0:	00000206 	br	9ac <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
     9a4:	04000704 	movi	r16,28
     9a8:	003fd006 	br	8ec <alt_printf+0x104>
     9ac:	dfc00417 	ldw	ra,16(sp)
     9b0:	dc800317 	ldw	r18,12(sp)
     9b4:	dc400217 	ldw	r17,8(sp)
     9b8:	dc000117 	ldw	r16,4(sp)
     9bc:	dec00804 	addi	sp,sp,32
     9c0:	f800283a 	ret

000009c4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     9c4:	deffff04 	addi	sp,sp,-4
     9c8:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     9cc:	00800034 	movhi	r2,0
     9d0:	109c6104 	addi	r2,r2,29060
     9d4:	10800017 	ldw	r2,0(r2)
     9d8:	11400217 	ldw	r5,8(r2)
     9dc:	0002dc40 	call	2dc4 <putc>
#endif
}
     9e0:	dfc00017 	ldw	ra,0(sp)
     9e4:	dec00104 	addi	sp,sp,4
     9e8:	f800283a 	ret

000009ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     9ec:	deffff04 	addi	sp,sp,-4
     9f0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     9f4:	0002b0c0 	call	2b0c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     9f8:	00800044 	movi	r2,1
     9fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     a00:	dfc00017 	ldw	ra,0(sp)
     a04:	dec00104 	addi	sp,sp,4
     a08:	f800283a 	ret

00000a0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     a0c:	defffd04 	addi	sp,sp,-12
     a10:	dfc00215 	stw	ra,8(sp)
     a14:	dc400115 	stw	r17,4(sp)
     a18:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     a1c:	04000204 	movi	r16,8
     a20:	01040034 	movhi	r4,4096
     a24:	21080004 	addi	r4,r4,8192
     a28:	000b883a 	mov	r5,zero
     a2c:	000d883a 	mov	r6,zero
     a30:	800f883a 	mov	r7,r16
     a34:	00012b40 	call	12b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     a38:	04400034 	movhi	r17,0
     a3c:	8c553904 	addi	r17,r17,21732
     a40:	8809883a 	mov	r4,r17
     a44:	000b883a 	mov	r5,zero
     a48:	800d883a 	mov	r6,r16
     a4c:	0000db00 	call	db0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     a50:	04000034 	movhi	r16,0
     a54:	841c5a04 	addi	r16,r16,29032
     a58:	893ff604 	addi	r4,r17,-40
     a5c:	800b883a 	mov	r5,r16
     a60:	00025d40 	call	25d4 <alt_dev_llist_insert>
     a64:	01000034 	movhi	r4,0
     a68:	21194704 	addi	r4,r4,25884
     a6c:	800b883a 	mov	r5,r16
     a70:	00025d40 	call	25d4 <alt_dev_llist_insert>
     a74:	01000034 	movhi	r4,0
     a78:	21195304 	addi	r4,r4,25932
     a7c:	800b883a 	mov	r5,r16
     a80:	00025d40 	call	25d4 <alt_dev_llist_insert>
     a84:	01000034 	movhi	r4,0
     a88:	21195f04 	addi	r4,r4,25980
     a8c:	800b883a 	mov	r5,r16
     a90:	00025d40 	call	25d4 <alt_dev_llist_insert>
     a94:	01000034 	movhi	r4,0
     a98:	21196a04 	addi	r4,r4,26024
     a9c:	800b883a 	mov	r5,r16
     aa0:	00025d40 	call	25d4 <alt_dev_llist_insert>
     aa4:	01000034 	movhi	r4,0
     aa8:	21197504 	addi	r4,r4,26068
     aac:	800b883a 	mov	r5,r16
     ab0:	00025d40 	call	25d4 <alt_dev_llist_insert>
     ab4:	01000034 	movhi	r4,0
     ab8:	21198004 	addi	r4,r4,26112
     abc:	800b883a 	mov	r5,r16
     ac0:	00025d40 	call	25d4 <alt_dev_llist_insert>
     ac4:	01000034 	movhi	r4,0
     ac8:	21198b04 	addi	r4,r4,26156
     acc:	800b883a 	mov	r5,r16
     ad0:	00025d40 	call	25d4 <alt_dev_llist_insert>
     ad4:	01000034 	movhi	r4,0
     ad8:	21199604 	addi	r4,r4,26200
     adc:	800b883a 	mov	r5,r16
     ae0:	00025d40 	call	25d4 <alt_dev_llist_insert>
     ae4:	01000034 	movhi	r4,0
     ae8:	2119a104 	addi	r4,r4,26244
     aec:	800b883a 	mov	r5,r16
     af0:	00025d40 	call	25d4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     af4:	04400034 	movhi	r17,0
     af8:	8c59ac04 	addi	r17,r17,26288
     afc:	8809883a 	mov	r4,r17
     b00:	00016000 	call	1600 <alt_up_ps2_init>
     b04:	8809883a 	mov	r4,r17
     b08:	800b883a 	mov	r5,r16
     b0c:	00025d40 	call	25d4 <alt_dev_llist_insert>
     b10:	01000034 	movhi	r4,0
     b14:	2119ba04 	addi	r4,r4,26344
     b18:	800b883a 	mov	r5,r16
     b1c:	00025d40 	call	25d4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     b20:	01000034 	movhi	r4,0
     b24:	2119c504 	addi	r4,r4,26388
     b28:	20800a17 	ldw	r2,40(r4)
     b2c:	10800104 	addi	r2,r2,4
     b30:	10c0000b 	ldhu	r3,0(r2)
     b34:	20c00c15 	stw	r3,48(r4)
     b38:	10800017 	ldw	r2,0(r2)
     b3c:	100ad43a 	srli	r5,r2,16
     b40:	21400d15 	stw	r5,52(r4)
     b44:	00801004 	movi	r2,64
     b48:	10c00436 	bltu	r2,r3,b5c <alt_sys_init+0x150>
     b4c:	00800fc4 	movi	r2,63
     b50:	20800f15 	stw	r2,60(r4)
     b54:	00800184 	movi	r2,6
     b58:	20801015 	stw	r2,64(r4)
     b5c:	00800804 	movi	r2,32
     b60:	11400436 	bltu	r2,r5,b74 <alt_sys_init+0x168>
     b64:	00c007c4 	movi	r3,31
     b68:	00800034 	movhi	r2,0
     b6c:	1099c504 	addi	r2,r2,26388
     b70:	10c01115 	stw	r3,68(r2)
     b74:	04000034 	movhi	r16,0
     b78:	8419c504 	addi	r16,r16,26388
     b7c:	8009883a 	mov	r4,r16
     b80:	00019b80 	call	19b8 <alt_up_char_buffer_init>
     b84:	8009883a 	mov	r4,r16
     b88:	01400034 	movhi	r5,0
     b8c:	295c5a04 	addi	r5,r5,29032
     b90:	00025d40 	call	25d4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     b94:	01800034 	movhi	r6,0
     b98:	3199d704 	addi	r6,r6,26460
     b9c:	30c00a17 	ldw	r3,40(r6)
     ba0:	18800017 	ldw	r2,0(r3)
     ba4:	30800b15 	stw	r2,44(r6)
     ba8:	18800117 	ldw	r2,4(r3)
     bac:	30800c15 	stw	r2,48(r6)
     bb0:	19000204 	addi	r4,r3,8
     bb4:	2080000b 	ldhu	r2,0(r4)
     bb8:	30800f15 	stw	r2,60(r6)
     bbc:	20800017 	ldw	r2,0(r4)
     bc0:	1004d43a 	srli	r2,r2,16
     bc4:	30801015 	stw	r2,64(r6)
     bc8:	18c00304 	addi	r3,r3,12
     bcc:	18800017 	ldw	r2,0(r3)
     bd0:	1005d07a 	srai	r2,r2,1
     bd4:	01000044 	movi	r4,1
     bd8:	1104703a 	and	r2,r2,r4
     bdc:	30800d15 	stw	r2,52(r6)
     be0:	18800017 	ldw	r2,0(r3)
     be4:	1005d13a 	srai	r2,r2,4
     be8:	114003cc 	andi	r5,r2,15
     bec:	31400e15 	stw	r5,56(r6)
     bf0:	1a000017 	ldw	r8,0(r3)
     bf4:	400ed43a 	srli	r7,r8,16
     bf8:	2900021e 	bne	r5,r4,c04 <alt_sys_init+0x1f8>
     bfc:	30001115 	stw	zero,68(r6)
     c00:	00000b06 	br	c30 <alt_sys_init+0x224>
     c04:	00800084 	movi	r2,2
     c08:	2880051e 	bne	r5,r2,c20 <alt_sys_init+0x214>
     c0c:	00c00044 	movi	r3,1
     c10:	00800034 	movhi	r2,0
     c14:	1099d704 	addi	r2,r2,26460
     c18:	10c01115 	stw	r3,68(r2)
     c1c:	00000406 	br	c30 <alt_sys_init+0x224>
     c20:	00c00084 	movi	r3,2
     c24:	00800034 	movhi	r2,0
     c28:	1099d704 	addi	r2,r2,26460
     c2c:	10c01115 	stw	r3,68(r2)
     c30:	01000034 	movhi	r4,0
     c34:	2119d704 	addi	r4,r4,26460
     c38:	38c03fcc 	andi	r3,r7,255
     c3c:	01800804 	movi	r6,32
     c40:	30c5c83a 	sub	r2,r6,r3
     c44:	017fffc4 	movi	r5,-1
     c48:	2884d83a 	srl	r2,r5,r2
     c4c:	20801215 	stw	r2,72(r4)
     c50:	20801117 	ldw	r2,68(r4)
     c54:	1887883a 	add	r3,r3,r2
     c58:	20c01315 	stw	r3,76(r4)
     c5c:	4004d63a 	srli	r2,r8,24
     c60:	308dc83a 	sub	r6,r6,r2
     c64:	298ad83a 	srl	r5,r5,r6
     c68:	21401415 	stw	r5,80(r4)
     c6c:	01400034 	movhi	r5,0
     c70:	295c5a04 	addi	r5,r5,29032
     c74:	00025d40 	call	25d4 <alt_dev_llist_insert>
}
     c78:	dfc00217 	ldw	ra,8(sp)
     c7c:	dc400117 	ldw	r17,4(sp)
     c80:	dc000017 	ldw	r16,0(sp)
     c84:	dec00304 	addi	sp,sp,12
     c88:	f800283a 	ret

00000c8c <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     c8c:	deffff04 	addi	sp,sp,-4
     c90:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     c94:	21000017 	ldw	r4,0(r4)
     c98:	21000a04 	addi	r4,r4,40
     c9c:	0000f5c0 	call	f5c <altera_avalon_jtag_uart_ioctl>
}
     ca0:	dfc00017 	ldw	ra,0(sp)
     ca4:	dec00104 	addi	sp,sp,4
     ca8:	f800283a 	ret

00000cac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     cac:	deffff04 	addi	sp,sp,-4
     cb0:	dfc00015 	stw	ra,0(sp)
     cb4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     cb8:	21000017 	ldw	r4,0(r4)
     cbc:	21000a04 	addi	r4,r4,40
     cc0:	11400217 	ldw	r5,8(r2)
     cc4:	0000d240 	call	d24 <altera_avalon_jtag_uart_close>
}
     cc8:	dfc00017 	ldw	ra,0(sp)
     ccc:	dec00104 	addi	sp,sp,4
     cd0:	f800283a 	ret

00000cd4 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     cd4:	deffff04 	addi	sp,sp,-4
     cd8:	dfc00015 	stw	ra,0(sp)
     cdc:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     ce0:	21000017 	ldw	r4,0(r4)
     ce4:	21000a04 	addi	r4,r4,40
     ce8:	11c00217 	ldw	r7,8(r2)
     cec:	00011380 	call	1138 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     cf0:	dfc00017 	ldw	ra,0(sp)
     cf4:	dec00104 	addi	sp,sp,4
     cf8:	f800283a 	ret

00000cfc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     cfc:	deffff04 	addi	sp,sp,-4
     d00:	dfc00015 	stw	ra,0(sp)
     d04:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     d08:	21000017 	ldw	r4,0(r4)
     d0c:	21000a04 	addi	r4,r4,40
     d10:	11c00217 	ldw	r7,8(r2)
     d14:	0000fd00 	call	fd0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     d18:	dfc00017 	ldw	ra,0(sp)
     d1c:	dec00104 	addi	sp,sp,4
     d20:	f800283a 	ret

00000d24 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     d24:	21800c17 	ldw	r6,48(r4)
     d28:	2950000c 	andi	r5,r5,16384
     d2c:	280b003a 	cmpeq	r5,r5,zero
     d30:	00000306 	br	d40 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
     d34:	2800021e 	bne	r5,zero,d40 <altera_avalon_jtag_uart_close+0x1c>
     d38:	00bffd44 	movi	r2,-11
     d3c:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     d40:	20800d17 	ldw	r2,52(r4)
     d44:	11800326 	beq	r2,r6,d54 <altera_avalon_jtag_uart_close+0x30>
     d48:	20c00917 	ldw	r3,36(r4)
     d4c:	20800117 	ldw	r2,4(r4)
     d50:	18bff836 	bltu	r3,r2,d34 <altera_avalon_jtag_uart_close+0x10>
     d54:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
     d58:	f800283a 	ret

00000d5c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     d5c:	20800017 	ldw	r2,0(r4)
     d60:	10c00104 	addi	r3,r2,4
     d64:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     d68:	01410004 	movi	r5,1024
     d6c:	1144703a 	and	r2,r2,r5
     d70:	10000526 	beq	r2,zero,d88 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     d74:	20800817 	ldw	r2,32(r4)
     d78:	1144b03a 	or	r2,r2,r5
     d7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     d80:	20000915 	stw	zero,36(r4)
     d84:	00000606 	br	da0 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     d88:	20c00917 	ldw	r3,36(r4)
     d8c:	00a00034 	movhi	r2,32768
     d90:	10bfff04 	addi	r2,r2,-4
     d94:	10c00236 	bltu	r2,r3,da0 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
     d98:	18800044 	addi	r2,r3,1
     d9c:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     da0:	00800074 	movhi	r2,1
     da4:	10a3a104 	addi	r2,r2,-29052
     da8:	10800017 	ldw	r2,0(r2)
     dac:	f800283a 	ret

00000db0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     db0:	defffe04 	addi	sp,sp,-8
     db4:	dfc00115 	stw	ra,4(sp)
     db8:	dc000015 	stw	r16,0(sp)
     dbc:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     dc0:	00c00044 	movi	r3,1
     dc4:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     dc8:	20800017 	ldw	r2,0(r4)
     dcc:	10c00135 	stwio	r3,4(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     dd0:	3009883a 	mov	r4,r6
     dd4:	800b883a 	mov	r5,r16
     dd8:	01800034 	movhi	r6,0
     ddc:	31838a04 	addi	r6,r6,3624
     de0:	00027d00 	call	27d0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     de4:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     de8:	81000204 	addi	r4,r16,8
     dec:	00800074 	movhi	r2,1
     df0:	10a3a104 	addi	r2,r2,-29052
     df4:	11400017 	ldw	r5,0(r2)
     df8:	01800034 	movhi	r6,0
     dfc:	31835704 	addi	r6,r6,3420
     e00:	800f883a 	mov	r7,r16
     e04:	00024580 	call	2458 <alt_alarm_start>
     e08:	1000030e 	bge	r2,zero,e18 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     e0c:	00a00034 	movhi	r2,32768
     e10:	10bfffc4 	addi	r2,r2,-1
     e14:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     e18:	dfc00117 	ldw	ra,4(sp)
     e1c:	dc000017 	ldw	r16,0(sp)
     e20:	dec00204 	addi	sp,sp,8
     e24:	f800283a 	ret

00000e28 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     e28:	22000017 	ldw	r8,0(r4)
     e2c:	03800104 	movi	r14,4
     e30:	4399883a 	add	r12,r8,r14
     e34:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     e38:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     e3c:	5880c00c 	andi	r2,r11,768
     e40:	10004526 	beq	r2,zero,f58 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     e44:	5880400c 	andi	r2,r11,256
     e48:	10002126 	beq	r2,zero,ed0 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e4c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     e50:	10800044 	addi	r2,r2,1
     e54:	1081ffcc 	andi	r2,r2,2047
     e58:	20c00b17 	ldw	r3,44(r4)
     e5c:	10c01626 	beq	r2,r3,eb8 <altera_avalon_jtag_uart_irq+0x90>
     e60:	02a00014 	movui	r10,32768
     e64:	02400e04 	movi	r9,56
     e68:	01c00044 	movi	r7,1
     e6c:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     e70:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     e74:	2a84703a 	and	r2,r5,r10
     e78:	10000d26 	beq	r2,zero,eb0 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     e7c:	20800a17 	ldw	r2,40(r4)
     e80:	1105883a 	add	r2,r2,r4
     e84:	1245883a 	add	r2,r2,r9
     e88:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e8c:	20800a17 	ldw	r2,40(r4)
     e90:	11c5883a 	add	r2,r2,r7
     e94:	1184703a 	and	r2,r2,r6
     e98:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e9c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
     ea0:	11c5883a 	add	r2,r2,r7
     ea4:	1184703a 	and	r2,r2,r6
     ea8:	20c00b17 	ldw	r3,44(r4)
     eac:	10fff01e 	bne	r2,r3,e70 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     eb0:	2b44703a 	and	r2,r5,r13
     eb4:	10000626 	beq	r2,zero,ed0 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     eb8:	20800817 	ldw	r2,32(r4)
     ebc:	00ffff84 	movi	r3,-2
     ec0:	10c4703a 	and	r2,r2,r3
     ec4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     ec8:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ecc:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     ed0:	5880800c 	andi	r2,r11,512
     ed4:	103fd826 	beq	r2,zero,e38 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     ed8:	5b44703a 	and	r2,r11,r13
     edc:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
     ee0:	283fd526 	beq	r5,zero,e38 <altera_avalon_jtag_uart_irq+0x10>
     ee4:	20c00d17 	ldw	r3,52(r4)
     ee8:	20800c17 	ldw	r2,48(r4)
     eec:	18801126 	beq	r3,r2,f34 <altera_avalon_jtag_uart_irq+0x10c>
     ef0:	02420e04 	movi	r9,2104
     ef4:	01800044 	movi	r6,1
     ef8:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     efc:	20800d17 	ldw	r2,52(r4)
     f00:	1105883a 	add	r2,r2,r4
     f04:	1245883a 	add	r2,r2,r9
     f08:	10800007 	ldb	r2,0(r2)
     f0c:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f10:	20800d17 	ldw	r2,52(r4)
     f14:	1185883a 	add	r2,r2,r6
     f18:	11c4703a 	and	r2,r2,r7
     f1c:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     f20:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     f24:	283fc426 	beq	r5,zero,e38 <altera_avalon_jtag_uart_irq+0x10>
     f28:	20c00d17 	ldw	r3,52(r4)
     f2c:	20800c17 	ldw	r2,48(r4)
     f30:	18bff21e 	bne	r3,r2,efc <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     f34:	20c00817 	ldw	r3,32(r4)
     f38:	00bfff44 	movi	r2,-3
     f3c:	1886703a 	and	r3,r3,r2
     f40:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     f44:	20800017 	ldw	r2,0(r4)
     f48:	1385883a 	add	r2,r2,r14
     f4c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     f50:	60800037 	ldwio	r2,0(r12)
     f54:	003fb806 	br	e38 <altera_avalon_jtag_uart_irq+0x10>
     f58:	f800283a 	ret

00000f5c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     f5c:	009a8044 	movi	r2,27137
     f60:	28800326 	beq	r5,r2,f70 <altera_avalon_jtag_uart_ioctl+0x14>
     f64:	009a8084 	movi	r2,27138
     f68:	2880171e 	bne	r5,r2,fc8 <altera_avalon_jtag_uart_ioctl+0x6c>
     f6c:	00000d06 	br	fa4 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     f70:	20c00117 	ldw	r3,4(r4)
     f74:	00a00034 	movhi	r2,32768
     f78:	10bfffc4 	addi	r2,r2,-1
     f7c:	18801226 	beq	r3,r2,fc8 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     f80:	31800017 	ldw	r6,0(r6)
     f84:	30ffff84 	addi	r3,r6,-2
     f88:	10bfff44 	addi	r2,r2,-3
     f8c:	10c0022e 	bgeu	r2,r3,f98 <altera_avalon_jtag_uart_ioctl+0x3c>
     f90:	01a00034 	movhi	r6,32768
     f94:	31bfff84 	addi	r6,r6,-2
     f98:	21800115 	stw	r6,4(r4)
     f9c:	0005883a 	mov	r2,zero
     fa0:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     fa4:	20c00117 	ldw	r3,4(r4)
     fa8:	00a00034 	movhi	r2,32768
     fac:	10bfffc4 	addi	r2,r2,-1
     fb0:	18800526 	beq	r3,r2,fc8 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     fb4:	20800917 	ldw	r2,36(r4)
     fb8:	10c5803a 	cmpltu	r2,r2,r3
     fbc:	30800015 	stw	r2,0(r6)
     fc0:	0005883a 	mov	r2,zero
     fc4:	f800283a 	ret
     fc8:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     fcc:	f800283a 	ret

00000fd0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     fd0:	defff604 	addi	sp,sp,-40
     fd4:	dfc00915 	stw	ra,36(sp)
     fd8:	df000815 	stw	fp,32(sp)
     fdc:	ddc00715 	stw	r23,28(sp)
     fe0:	dd800615 	stw	r22,24(sp)
     fe4:	dd400515 	stw	r21,20(sp)
     fe8:	dd000415 	stw	r20,16(sp)
     fec:	dcc00315 	stw	r19,12(sp)
     ff0:	dc800215 	stw	r18,8(sp)
     ff4:	dc400115 	stw	r17,4(sp)
     ff8:	dc000015 	stw	r16,0(sp)
     ffc:	2025883a 	mov	r18,r4
    1000:	282f883a 	mov	r23,r5
    1004:	3027883a 	mov	r19,r6
    1008:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    100c:	0180220e 	bge	zero,r6,1098 <altera_avalon_jtag_uart_read+0xc8>
    1010:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1014:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    1018:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    101c:	b4400236 	bltu	r22,r17,1028 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    1020:	b461c83a 	sub	r16,r22,r17
    1024:	00000206 	br	1030 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1028:	00820004 	movi	r2,2048
    102c:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    1030:	80000d26 	beq	r16,zero,1068 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    1034:	9829883a 	mov	r20,r19
    1038:	9c001d36 	bltu	r19,r16,10b0 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    103c:	91400e04 	addi	r5,r18,56
    1040:	a809883a 	mov	r4,r21
    1044:	2c4b883a 	add	r5,r5,r17
    1048:	800d883a 	mov	r6,r16
    104c:	0002d240 	call	2d24 <memcpy>
      ptr   += n;
    1050:	ac2b883a 	add	r21,r21,r16
      space -= n;
    1054:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1058:	8445883a 	add	r2,r16,r17
    105c:	1081ffcc 	andi	r2,r2,2047
    1060:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    1064:	04ffeb16 	blt	zero,r19,1014 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    1068:	adc01c1e 	bne	r21,r23,10dc <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    106c:	e090000c 	andi	r2,fp,16384
    1070:	10000d1e 	bne	r2,zero,10a8 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1074:	90800a17 	ldw	r2,40(r18)
    1078:	b080031e 	bne	r22,r2,1088 <altera_avalon_jtag_uart_read+0xb8>
    107c:	90c00917 	ldw	r3,36(r18)
    1080:	90800117 	ldw	r2,4(r18)
    1084:	18bffb36 	bltu	r3,r2,1074 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1088:	90800a17 	ldw	r2,40(r18)
    108c:	b0800426 	beq	r22,r2,10a0 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1090:	04c0030e 	bge	zero,r19,10a0 <altera_avalon_jtag_uart_read+0xd0>
    1094:	003fde06 	br	1010 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    1098:	3890000c 	andi	r2,r7,16384
    109c:	1000021e 	bne	r2,zero,10a8 <altera_avalon_jtag_uart_read+0xd8>
    10a0:	00bffec4 	movi	r2,-5
    10a4:	00001806 	br	1108 <altera_avalon_jtag_uart_read+0x138>
    10a8:	00bffd44 	movi	r2,-11
    10ac:	00001606 	br	1108 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    10b0:	91400e04 	addi	r5,r18,56
    10b4:	a809883a 	mov	r4,r21
    10b8:	894b883a 	add	r5,r17,r5
    10bc:	980d883a 	mov	r6,r19
    10c0:	0002d240 	call	2d24 <memcpy>
      ptr   += n;
    10c4:	aceb883a 	add	r21,r21,r19
      space -= n;
    10c8:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10cc:	a445883a 	add	r2,r20,r17
    10d0:	1081ffcc 	andi	r2,r2,2047
    10d4:	90800b15 	stw	r2,44(r18)
    10d8:	003fe306 	br	1068 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    10dc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    10e0:	00bfff84 	movi	r2,-2
    10e4:	2084703a 	and	r2,r4,r2
    10e8:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    10ec:	90800817 	ldw	r2,32(r18)
    10f0:	10800054 	ori	r2,r2,1
    10f4:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10f8:	90c00017 	ldw	r3,0(r18)
    10fc:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1100:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    1104:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    1108:	dfc00917 	ldw	ra,36(sp)
    110c:	df000817 	ldw	fp,32(sp)
    1110:	ddc00717 	ldw	r23,28(sp)
    1114:	dd800617 	ldw	r22,24(sp)
    1118:	dd400517 	ldw	r21,20(sp)
    111c:	dd000417 	ldw	r20,16(sp)
    1120:	dcc00317 	ldw	r19,12(sp)
    1124:	dc800217 	ldw	r18,8(sp)
    1128:	dc400117 	ldw	r17,4(sp)
    112c:	dc000017 	ldw	r16,0(sp)
    1130:	dec00a04 	addi	sp,sp,40
    1134:	f800283a 	ret

00001138 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1138:	defff804 	addi	sp,sp,-32
    113c:	dfc00715 	stw	ra,28(sp)
    1140:	dd800615 	stw	r22,24(sp)
    1144:	dd400515 	stw	r21,20(sp)
    1148:	dd000415 	stw	r20,16(sp)
    114c:	dcc00315 	stw	r19,12(sp)
    1150:	dc800215 	stw	r18,8(sp)
    1154:	dc400115 	stw	r17,4(sp)
    1158:	dc000015 	stw	r16,0(sp)
    115c:	2021883a 	mov	r16,r4
    1160:	282d883a 	mov	r22,r5
    1164:	3011883a 	mov	r8,r6
    1168:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    116c:	01800616 	blt	zero,r6,1188 <altera_avalon_jtag_uart_write+0x50>
    1170:	2829883a 	mov	r20,r5
    1174:	00002106 	br	11fc <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    1178:	a585c83a 	sub	r2,r20,r22
    117c:	00004306 	br	128c <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    1180:	00bffd44 	movi	r2,-11
    1184:	00004106 	br	128c <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1188:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    118c:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    1190:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    1194:	9140032e 	bgeu	r18,r5,11a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1198:	2c85c83a 	sub	r2,r5,r18
    119c:	11bfffc4 	addi	r6,r2,-1
    11a0:	00000606 	br	11bc <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    11a4:	28000326 	beq	r5,zero,11b4 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    11a8:	00820004 	movi	r2,2048
    11ac:	148dc83a 	sub	r6,r2,r18
    11b0:	00000206 	br	11bc <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    11b4:	0081ffc4 	movi	r2,2047
    11b8:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    11bc:	30002626 	beq	r6,zero,1258 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    11c0:	4027883a 	mov	r19,r8
    11c4:	3023883a 	mov	r17,r6
    11c8:	4180012e 	bgeu	r8,r6,11d0 <altera_avalon_jtag_uart_write+0x98>
    11cc:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    11d0:	81020e04 	addi	r4,r16,2104
    11d4:	2489883a 	add	r4,r4,r18
    11d8:	a00b883a 	mov	r5,r20
    11dc:	880d883a 	mov	r6,r17
    11e0:	0002d240 	call	2d24 <memcpy>
      ptr   += n;
    11e4:	a469883a 	add	r20,r20,r17
      count -= n;
    11e8:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11ec:	9445883a 	add	r2,r18,r17
    11f0:	1081ffcc 	andi	r2,r2,2047
    11f4:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    11f8:	023fe416 	blt	zero,r8,118c <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    11fc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1200:	00bfff84 	movi	r2,-2
    1204:	2084703a 	and	r2,r4,r2
    1208:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    120c:	80800817 	ldw	r2,32(r16)
    1210:	10800094 	ori	r2,r2,2
    1214:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1218:	80c00017 	ldw	r3,0(r16)
    121c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1220:	2001703a 	wrctl	status,r4
    1224:	00000706 	br	1244 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1228:	80800d17 	ldw	r2,52(r16)
    122c:	1140031e 	bne	r2,r5,123c <altera_avalon_jtag_uart_write+0x104>
    1230:	80c00917 	ldw	r3,36(r16)
    1234:	80800117 	ldw	r2,4(r16)
    1238:	18bffb36 	bltu	r3,r2,1228 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    123c:	80800d17 	ldw	r2,52(r16)
    1240:	117fed1e 	bne	r2,r5,11f8 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1244:	b53fcc1e 	bne	r22,r20,1178 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    1248:	a890000c 	andi	r2,r21,16384
    124c:	103fcc1e 	bne	r2,zero,1180 <altera_avalon_jtag_uart_write+0x48>
    1250:	00bffec4 	movi	r2,-5
    1254:	00000d06 	br	128c <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1258:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    125c:	00bfff84 	movi	r2,-2
    1260:	2084703a 	and	r2,r4,r2
    1264:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1268:	80800817 	ldw	r2,32(r16)
    126c:	10800094 	ori	r2,r2,2
    1270:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1274:	80c00017 	ldw	r3,0(r16)
    1278:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    127c:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    1280:	a890000c 	andi	r2,r21,16384
    1284:	103fe826 	beq	r2,zero,1228 <altera_avalon_jtag_uart_write+0xf0>
    1288:	003fee06 	br	1244 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
    128c:	dfc00717 	ldw	ra,28(sp)
    1290:	dd800617 	ldw	r22,24(sp)
    1294:	dd400517 	ldw	r21,20(sp)
    1298:	dd000417 	ldw	r20,16(sp)
    129c:	dcc00317 	ldw	r19,12(sp)
    12a0:	dc800217 	ldw	r18,8(sp)
    12a4:	dc400117 	ldw	r17,4(sp)
    12a8:	dc000017 	ldw	r16,0(sp)
    12ac:	dec00804 	addi	sp,sp,32
    12b0:	f800283a 	ret

000012b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    12b4:	deffff04 	addi	sp,sp,-4
    12b8:	dfc00015 	stw	ra,0(sp)
    12bc:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    12c0:	00c00074 	movhi	r3,1
    12c4:	18e3a104 	addi	r3,r3,-29052
    12c8:	18800017 	ldw	r2,0(r3)
    12cc:	1000011e 	bne	r2,zero,12d4 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    12d0:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    12d4:	008001c4 	movi	r2,7
    12d8:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    12dc:	3009883a 	mov	r4,r6
    12e0:	01800034 	movhi	r6,0
    12e4:	3184be04 	addi	r6,r6,4856
    12e8:	00027d00 	call	27d0 <alt_irq_register>
#endif  
}
    12ec:	dfc00017 	ldw	ra,0(sp)
    12f0:	dec00104 	addi	sp,sp,4
    12f4:	f800283a 	ret

000012f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    12f8:	defffe04 	addi	sp,sp,-8
    12fc:	dfc00115 	stw	ra,4(sp)
    1300:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1304:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1308:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    130c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1310:	00bfff84 	movi	r2,-2
    1314:	8084703a 	and	r2,r16,r2
    1318:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    131c:	0002a600 	call	2a60 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1320:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    1324:	dfc00117 	ldw	ra,4(sp)
    1328:	dc000017 	ldw	r16,0(sp)
    132c:	dec00204 	addi	sp,sp,8
    1330:	f800283a 	ret

00001334 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    1334:	2080400c 	andi	r2,r4,256
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
	return ri;
}
    1338:	1004c03a 	cmpne	r2,r2,zero
    133c:	f800283a 	ret

00001340 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    1340:	2080004c 	andi	r2,r4,1
    1344:	f800283a 	ret

00001348 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1348:	2081000c 	andi	r2,r4,1024
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
	return re;
}
    134c:	1004c03a 	cmpne	r2,r2,zero
    1350:	f800283a 	ret

00001354 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    1354:	2004d43a 	srli	r2,r4,16
    1358:	f800283a 	ret

0000135c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    135c:	20a0000c 	andi	r2,r4,32768
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
	return rvalid;
}
    1360:	1004c03a 	cmpne	r2,r2,zero
    1364:	f800283a 	ret

00001368 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    1368:	20803fcc 	andi	r2,r4,255
    136c:	f800283a 	ret

00001370 <alt_up_ps2_open_dev>:
	}
	return count;
}

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1370:	deffff04 	addi	sp,sp,-4
    1374:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1378:	01400034 	movhi	r5,0
    137c:	295c5a04 	addi	r5,r5,29032
    1380:	00026440 	call	2644 <alt_find_dev>

  return dev;
}
    1384:	dfc00017 	ldw	ra,0(sp)
    1388:	dec00104 	addi	sp,sp,4
    138c:	f800283a 	ret

00001390 <alt_up_ps2_clear_fifo>:
	}
	return -1;
}

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1390:	defffe04 	addi	sp,sp,-8
    1394:	dfc00115 	stw	ra,4(sp)
    1398:	dc000015 	stw	r16,0(sp)
    139c:	24000a17 	ldw	r16,40(r4)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    13a0:	81000037 	ldwio	r4,0(r16)
    13a4:	00013540 	call	1354 <read_num_bytes_available>
    13a8:	10bfffcc 	andi	r2,r2,65535
    13ac:	103ffc1e 	bne	r2,zero,13a0 <alt_up_ps2_clear_fifo+0x10>
	} while (num > 0);
}
    13b0:	dfc00117 	ldw	ra,4(sp)
    13b4:	dc000017 	ldw	r16,0(sp)
    13b8:	dec00204 	addi	sp,sp,8
    13bc:	f800283a 	ret

000013c0 <alt_up_ps2_read_data_byte>:
		}
	} while (1);
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    13c0:	defffd04 	addi	sp,sp,-12
    13c4:	dfc00215 	stw	ra,8(sp)
    13c8:	dc400115 	stw	r17,4(sp)
    13cc:	dc000015 	stw	r16,0(sp)
    13d0:	2823883a 	mov	r17,r5
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    13d4:	20800a17 	ldw	r2,40(r4)
    13d8:	14000037 	ldwio	r16,0(r2)
	if (read_data_valid(data_reg))
    13dc:	8009883a 	mov	r4,r16
    13e0:	000135c0 	call	135c <read_data_valid>
    13e4:	10803fcc 	andi	r2,r2,255
    13e8:	1000021e 	bne	r2,zero,13f4 <alt_up_ps2_read_data_byte+0x34>
    13ec:	00bfffc4 	movi	r2,-1
    13f0:	00000406 	br	1404 <alt_up_ps2_read_data_byte+0x44>
	{
		*byte = read_data_byte(data_reg);
    13f4:	8009883a 	mov	r4,r16
    13f8:	00013680 	call	1368 <read_data_byte>
    13fc:	88800005 	stb	r2,0(r17)
    1400:	0005883a 	mov	r2,zero
		return 0;
	}
	return -1;
}
    1404:	dfc00217 	ldw	ra,8(sp)
    1408:	dc400117 	ldw	r17,4(sp)
    140c:	dc000017 	ldw	r16,0(sp)
    1410:	dec00304 	addi	sp,sp,12
    1414:	f800283a 	ret

00001418 <alt_up_ps2_read_data_byte_timeout>:
	int ack_status = alt_up_ps2_wait_for_ack(ps2);
	return ack_status;
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1418:	defffb04 	addi	sp,sp,-20
    141c:	dfc00415 	stw	ra,16(sp)
    1420:	dcc00315 	stw	r19,12(sp)
    1424:	dc800215 	stw	r18,8(sp)
    1428:	dc400115 	stw	r17,4(sp)
    142c:	dc000015 	stw	r16,0(sp)
    1430:	2025883a 	mov	r18,r4
    1434:	2827883a 	mov	r19,r5
    1438:	0023883a 	mov	r17,zero
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    143c:	90800a17 	ldw	r2,40(r18)
    1440:	14000037 	ldwio	r16,0(r2)
		if (read_data_valid(data_reg))
    1444:	8009883a 	mov	r4,r16
    1448:	000135c0 	call	135c <read_data_valid>
    144c:	10803fcc 	andi	r2,r2,255
    1450:	10000526 	beq	r2,zero,1468 <alt_up_ps2_read_data_byte_timeout+0x50>
		{
			*byte = read_data_byte(data_reg);
    1454:	8009883a 	mov	r4,r16
    1458:	00013680 	call	1368 <read_data_byte>
    145c:	98800005 	stb	r2,0(r19)
    1460:	0005883a 	mov	r2,zero
    1464:	00000506 	br	147c <alt_up_ps2_read_data_byte_timeout+0x64>
int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
    1468:	8c400044 	addi	r17,r17,1
		{
			*byte = read_data_byte(data_reg);
			return 0;
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    146c:	90800c17 	ldw	r2,48(r18)
    1470:	103ff226 	beq	r2,zero,143c <alt_up_ps2_read_data_byte_timeout+0x24>
    1474:	147ff12e 	bgeu	r2,r17,143c <alt_up_ps2_read_data_byte_timeout+0x24>
    1478:	00bfe304 	movi	r2,-116
		{
			return -ETIMEDOUT;
		}
	} while (1);
}
    147c:	dfc00417 	ldw	ra,16(sp)
    1480:	dcc00317 	ldw	r19,12(sp)
    1484:	dc800217 	ldw	r18,8(sp)
    1488:	dc400117 	ldw	r17,4(sp)
    148c:	dc000017 	ldw	r16,0(sp)
    1490:	dec00504 	addi	sp,sp,20
    1494:	f800283a 	ret

00001498 <alt_up_ps2_read_fd>:
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1498:	deffff04 	addi	sp,sp,-4
    149c:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    14a0:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    14a4:	0180010e 	bge	zero,r6,14ac <alt_up_ps2_read_fd+0x14>
    14a8:	003fff06 	br	14a8 <alt_up_ps2_read_fd+0x10>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    14ac:	00014180 	call	1418 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    14b0:	1005003a 	cmpeq	r2,r2,zero
    14b4:	dfc00017 	ldw	ra,0(sp)
    14b8:	dec00104 	addi	sp,sp,4
    14bc:	f800283a 	ret

000014c0 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    14c0:	defffc04 	addi	sp,sp,-16
    14c4:	dfc00315 	stw	ra,12(sp)
    14c8:	dc400215 	stw	r17,8(sp)
    14cc:	dc000115 	stw	r16,4(sp)
    14d0:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    14d4:	d8000005 	stb	zero,0(sp)
    14d8:	04403e84 	movi	r17,250
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    14dc:	8009883a 	mov	r4,r16
    14e0:	d80b883a 	mov	r5,sp
    14e4:	00014180 	call	1418 <alt_up_ps2_read_data_byte_timeout>
    14e8:	1007883a 	mov	r3,r2
		if ( status == 0)
    14ec:	10803fcc 	andi	r2,r2,255
    14f0:	1000041e 	bne	r2,zero,1504 <alt_up_ps2_wait_for_ack+0x44>
		{
			if (data == PS2_ACK)
    14f4:	d8800003 	ldbu	r2,0(sp)
    14f8:	147ff81e 	bne	r2,r17,14dc <alt_up_ps2_wait_for_ack+0x1c>
    14fc:	0005883a 	mov	r2,zero
    1500:	00000106 	br	1508 <alt_up_ps2_wait_for_ack+0x48>
				return 0;
		}
		else 
		{
			return status;
    1504:	18803fcc 	andi	r2,r3,255
		}
	} while(1);
	return -ETIMEDOUT;
}
    1508:	dfc00317 	ldw	ra,12(sp)
    150c:	dc400217 	ldw	r17,8(sp)
    1510:	dc000117 	ldw	r16,4(sp)
    1514:	dec00404 	addi	sp,sp,16
    1518:	f800283a 	ret

0000151c <alt_up_ps2_write_data_byte>:
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
}

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    151c:	deffff04 	addi	sp,sp,-4
    1520:	dfc00015 	stw	ra,0(sp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1524:	20800a17 	ldw	r2,40(r4)
    1528:	29403fcc 	andi	r5,r5,255
    152c:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1530:	20800a17 	ldw	r2,40(r4)
	if (read_CE_bit(ctrl_reg))
    1534:	11000137 	ldwio	r4,4(r2)
    1538:	00013480 	call	1348 <read_CE_bit>
    153c:	10803fcc 	andi	r2,r2,255
    1540:	10000226 	beq	r2,zero,154c <alt_up_ps2_write_data_byte+0x30>
    1544:	00bffec4 	movi	r2,-5
    1548:	00000106 	br	1550 <alt_up_ps2_write_data_byte+0x34>
    154c:	0005883a 	mov	r2,zero
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
	}
	return 0;
}
    1550:	dfc00017 	ldw	ra,0(sp)
    1554:	dec00104 	addi	sp,sp,4
    1558:	f800283a 	ret

0000155c <alt_up_ps2_write_fd>:
	} 
	return count;
}

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    155c:	defffb04 	addi	sp,sp,-20
    1560:	dfc00415 	stw	ra,16(sp)
    1564:	dcc00315 	stw	r19,12(sp)
    1568:	dc800215 	stw	r18,8(sp)
    156c:	dc400115 	stw	r17,4(sp)
    1570:	dc000015 	stw	r16,0(sp)
    1574:	2827883a 	mov	r19,r5
    1578:	3025883a 	mov	r18,r6
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    157c:	24400017 	ldw	r17,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1580:	01800216 	blt	zero,r6,158c <alt_up_ps2_write_fd+0x30>
    1584:	0021883a 	mov	r16,zero
    1588:	00000806 	br	15ac <alt_up_ps2_write_fd+0x50>
    158c:	0021883a 	mov	r16,zero
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1590:	9c05883a 	add	r2,r19,r16
    1594:	8809883a 	mov	r4,r17
    1598:	11400003 	ldbu	r5,0(r2)
    159c:	000151c0 	call	151c <alt_up_ps2_write_data_byte>
		if (status!=0)
    15a0:	1000021e 	bne	r2,zero,15ac <alt_up_ps2_write_fd+0x50>
			return count;
		count++;
    15a4:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    15a8:	943ff91e 	bne	r18,r16,1590 <alt_up_ps2_write_fd+0x34>
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    15ac:	8005883a 	mov	r2,r16
    15b0:	dfc00417 	ldw	ra,16(sp)
    15b4:	dcc00317 	ldw	r19,12(sp)
    15b8:	dc800217 	ldw	r18,8(sp)
    15bc:	dc400117 	ldw	r17,4(sp)
    15c0:	dc000017 	ldw	r16,0(sp)
    15c4:	dec00504 	addi	sp,sp,20
    15c8:	f800283a 	ret

000015cc <alt_up_ps2_write_data_byte_with_ack>:
	} while(1);
	return -ETIMEDOUT;
}

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    15cc:	defffe04 	addi	sp,sp,-8
    15d0:	dfc00115 	stw	ra,4(sp)
    15d4:	dc000015 	stw	r16,0(sp)
    15d8:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    15dc:	29403fcc 	andi	r5,r5,255
    15e0:	000151c0 	call	151c <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    15e4:	1000021e 	bne	r2,zero,15f0 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    15e8:	8009883a 	mov	r4,r16
    15ec:	00014c00 	call	14c0 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    15f0:	dfc00117 	ldw	ra,4(sp)
    15f4:	dc000017 	ldw	r16,0(sp)
    15f8:	dec00204 	addi	sp,sp,8
    15fc:	f800283a 	ret

00001600 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1600:	defffd04 	addi	sp,sp,-12
    1604:	dfc00215 	stw	ra,8(sp)
    1608:	dc000115 	stw	r16,4(sp)
    160c:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    1610:	01403fc4 	movi	r5,255
    1614:	00015cc0 	call	15cc <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    1618:	1000171e 	bne	r2,zero,1678 <alt_up_ps2_init+0x78>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    161c:	8009883a 	mov	r4,r16
    1620:	d80b883a 	mov	r5,sp
    1624:	00014180 	call	1418 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1628:	1000131e 	bne	r2,zero,1678 <alt_up_ps2_init+0x78>
    162c:	d8c00003 	ldbu	r3,0(sp)
    1630:	00802a84 	movi	r2,170
    1634:	1880101e 	bne	r3,r2,1678 <alt_up_ps2_init+0x78>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1638:	8009883a 	mov	r4,r16
    163c:	d80b883a 	mov	r5,sp
    1640:	00014180 	call	1418 <alt_up_ps2_read_data_byte_timeout>
    1644:	1007883a 	mov	r3,r2
			if (status == -ETIMEDOUT)
    1648:	00bfe304 	movi	r2,-116
    164c:	1880031e 	bne	r3,r2,165c <alt_up_ps2_init+0x5c>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1650:	00800044 	movi	r2,1
    1654:	80800d15 	stw	r2,52(r16)
    1658:	00000706 	br	1678 <alt_up_ps2_init+0x78>
			}
			else if (status == 0 && byte == 0x00)
    165c:	1800061e 	bne	r3,zero,1678 <alt_up_ps2_init+0x78>
    1660:	d8800003 	ldbu	r2,0(sp)
    1664:	1000041e 	bne	r2,zero,1678 <alt_up_ps2_init+0x78>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1668:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    166c:	8009883a 	mov	r4,r16
    1670:	01403d04 	movi	r5,244
    1674:	000151c0 	call	151c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1678:	dfc00217 	ldw	ra,8(sp)
    167c:	dc000117 	ldw	r16,4(sp)
    1680:	dec00304 	addi	sp,sp,12
    1684:	f800283a 	ret

00001688 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1688:	20800a17 	ldw	r2,40(r4)
    168c:	10800104 	addi	r2,r2,4
    1690:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1694:	013fff84 	movi	r4,-2
    1698:	1906703a 	and	r3,r3,r4
    169c:	10c00035 	stwio	r3,0(r2)
}
    16a0:	f800283a 	ret

000016a4 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    16a4:	20c00a17 	ldw	r3,40(r4)
    16a8:	18c00104 	addi	r3,r3,4
    16ac:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    16b0:	10800054 	ori	r2,r2,1
    16b4:	18800035 	stwio	r2,0(r3)
}
    16b8:	f800283a 	ret

000016bc <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    16bc:	200495ba 	slli	r2,r4,22
}
    16c0:	1005d7fa 	srai	r2,r2,31
    16c4:	f800283a 	ret

000016c8 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    16c8:	deffff04 	addi	sp,sp,-4
    16cc:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    16d0:	01400034 	movhi	r5,0
    16d4:	295c5a04 	addi	r5,r5,29032
    16d8:	00026440 	call	2644 <alt_find_dev>

  return dev;
}
    16dc:	dfc00017 	ldw	ra,0(sp)
    16e0:	dec00104 	addi	sp,sp,4
    16e4:	f800283a 	ret

000016e8 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    16e8:	defffd04 	addi	sp,sp,-12
    16ec:	dfc00215 	stw	ra,8(sp)
    16f0:	dc400115 	stw	r17,4(sp)
    16f4:	dc000015 	stw	r16,0(sp)
    16f8:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    16fc:	20800a17 	ldw	r2,40(r4)
    1700:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1704:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1708:	8009883a 	mov	r4,r16
    170c:	00016bc0 	call	16bc <alt_up_rs232_check_parity>
    1710:	88800005 	stb	r2,0(r17)
    1714:	8420000c 	andi	r16,r16,32768
    1718:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
    171c:	80bfffc4 	addi	r2,r16,-1
    1720:	dfc00217 	ldw	ra,8(sp)
    1724:	dc400117 	ldw	r17,4(sp)
    1728:	dc000017 	ldw	r16,0(sp)
    172c:	dec00304 	addi	sp,sp,12
    1730:	f800283a 	ret

00001734 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1734:	defff904 	addi	sp,sp,-28
    1738:	dfc00615 	stw	ra,24(sp)
    173c:	dd000515 	stw	r20,20(sp)
    1740:	dcc00415 	stw	r19,16(sp)
    1744:	dc800315 	stw	r18,12(sp)
    1748:	dc400215 	stw	r17,8(sp)
    174c:	dc000115 	stw	r16,4(sp)
    1750:	2821883a 	mov	r16,r5
    1754:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1758:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    175c:	3000021e 	bne	r6,zero,1768 <alt_up_rs232_read_fd+0x34>
    1760:	0025883a 	mov	r18,zero
    1764:	00000a06 	br	1790 <alt_up_rs232_read_fd+0x5c>
    1768:	0025883a 	mov	r18,zero
    176c:	04400044 	movi	r17,1
    1770:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1774:	8461883a 	add	r16,r16,r17
    1778:	9809883a 	mov	r4,r19
    177c:	d80d883a 	mov	r6,sp
    1780:	00016e80 	call	16e8 <alt_up_rs232_read_data>
    1784:	1000021e 	bne	r2,zero,1790 <alt_up_rs232_read_fd+0x5c>
			count++;
    1788:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    178c:	a4bff81e 	bne	r20,r18,1770 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
    1790:	9005883a 	mov	r2,r18
    1794:	dfc00617 	ldw	ra,24(sp)
    1798:	dd000517 	ldw	r20,20(sp)
    179c:	dcc00417 	ldw	r19,16(sp)
    17a0:	dc800317 	ldw	r18,12(sp)
    17a4:	dc400217 	ldw	r17,8(sp)
    17a8:	dc000117 	ldw	r16,4(sp)
    17ac:	dec00704 	addi	sp,sp,28
    17b0:	f800283a 	ret

000017b4 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    17b4:	20800a17 	ldw	r2,40(r4)
    17b8:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    17bc:	1004d43a 	srli	r2,r2,16
    17c0:	f800283a 	ret

000017c4 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    17c4:	20800a17 	ldw	r2,40(r4)
    17c8:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    17cc:	29403fcc 	andi	r5,r5,255
    17d0:	11400035 	stwio	r5,0(r2)
	return 0;
}
    17d4:	0005883a 	mov	r2,zero
    17d8:	f800283a 	ret

000017dc <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    17dc:	defffb04 	addi	sp,sp,-20
    17e0:	dfc00415 	stw	ra,16(sp)
    17e4:	dcc00315 	stw	r19,12(sp)
    17e8:	dc800215 	stw	r18,8(sp)
    17ec:	dc400115 	stw	r17,4(sp)
    17f0:	dc000015 	stw	r16,0(sp)
    17f4:	2827883a 	mov	r19,r5
    17f8:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    17fc:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
    1800:	3000021e 	bne	r6,zero,180c <alt_up_rs232_write_fd+0x30>
    1804:	0021883a 	mov	r16,zero
    1808:	00000806 	br	182c <alt_up_rs232_write_fd+0x50>
    180c:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    1810:	84c5883a 	add	r2,r16,r19
    1814:	8809883a 	mov	r4,r17
    1818:	11400003 	ldbu	r5,0(r2)
    181c:	00017c40 	call	17c4 <alt_up_rs232_write_data>
    1820:	1000021e 	bne	r2,zero,182c <alt_up_rs232_write_fd+0x50>
		{
			count++;
    1824:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1828:	943ff91e 	bne	r18,r16,1810 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
    182c:	8005883a 	mov	r2,r16
    1830:	dfc00417 	ldw	ra,16(sp)
    1834:	dcc00317 	ldw	r19,12(sp)
    1838:	dc800217 	ldw	r18,8(sp)
    183c:	dc400117 	ldw	r17,4(sp)
    1840:	dc000017 	ldw	r16,0(sp)
    1844:	dec00504 	addi	sp,sp,20
    1848:	f800283a 	ret

0000184c <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    184c:	20800a17 	ldw	r2,40(r4)
    1850:	10800104 	addi	r2,r2,4
    1854:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1858:	013fff84 	movi	r4,-2
    185c:	1906703a 	and	r3,r3,r4
    1860:	10c00035 	stwio	r3,0(r2)
}
    1864:	f800283a 	ret

00001868 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1868:	20c00a17 	ldw	r3,40(r4)
    186c:	18c00104 	addi	r3,r3,4
    1870:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1874:	10800054 	ori	r2,r2,1
    1878:	18800035 	stwio	r2,0(r3)
}
    187c:	f800283a 	ret

00001880 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1880:	20800a17 	ldw	r2,40(r4)
    1884:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1888:	10bfffcc 	andi	r2,r2,65535
    188c:	f800283a 	ret

00001890 <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1890:	20800c17 	ldw	r2,48(r4)
    1894:	30801c2e 	bgeu	r6,r2,1908 <alt_up_char_buffer_string+0x78>
    1898:	20800d17 	ldw	r2,52(r4)
    189c:	38801a2e 	bgeu	r7,r2,1908 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    18a0:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    18a4:	28c00003 	ldbu	r3,0(r5)
    18a8:	18803fcc 	andi	r2,r3,255
    18ac:	1080201c 	xori	r2,r2,128
    18b0:	10bfe004 	addi	r2,r2,-128
    18b4:	10001626 	beq	r2,zero,1910 <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    18b8:	3a04983a 	sll	r2,r7,r8
    18bc:	308f883a 	add	r7,r6,r2
    18c0:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    18c4:	20800b17 	ldw	r2,44(r4)
    18c8:	3885883a 	add	r2,r7,r2
    18cc:	18c03fcc 	andi	r3,r3,255
    18d0:	18c0201c 	xori	r3,r3,128
    18d4:	18ffe004 	addi	r3,r3,-128
    18d8:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    18dc:	320d883a 	add	r6,r6,r8
    18e0:	20800c17 	ldw	r2,48(r4)
    18e4:	3080082e 	bgeu	r6,r2,1908 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    18e8:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    18ec:	28c00003 	ldbu	r3,0(r5)
    18f0:	18803fcc 	andi	r2,r3,255
    18f4:	1080201c 	xori	r2,r2,128
    18f8:	10bfe004 	addi	r2,r2,-128
    18fc:	10000426 	beq	r2,zero,1910 <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    1900:	3a0f883a 	add	r7,r7,r8
    1904:	003fef06 	br	18c4 <alt_up_char_buffer_string+0x34>
    1908:	00bfffc4 	movi	r2,-1
    190c:	f800283a 	ret
    1910:	0005883a 	mov	r2,zero
	}
	return 0;
}
    1914:	f800283a 	ret

00001918 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1918:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    191c:	20800c17 	ldw	r2,48(r4)
    1920:	3080112e 	bgeu	r6,r2,1968 <alt_up_char_buffer_draw+0x50>
    1924:	20800d17 	ldw	r2,52(r4)
    1928:	38800f2e 	bgeu	r7,r2,1968 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    192c:	20c00f17 	ldw	r3,60(r4)
    1930:	30c6703a 	and	r3,r6,r3
    1934:	20800e17 	ldw	r2,56(r4)
    1938:	1886983a 	sll	r3,r3,r2
    193c:	20801117 	ldw	r2,68(r4)
    1940:	3884703a 	and	r2,r7,r2
    1944:	21001017 	ldw	r4,64(r4)
    1948:	1104983a 	sll	r2,r2,r4
    194c:	1886b03a 	or	r3,r3,r2
    1950:	40800b17 	ldw	r2,44(r8)
    1954:	1887883a 	add	r3,r3,r2
    1958:	28803fcc 	andi	r2,r5,255
    195c:	18800025 	stbio	r2,0(r3)
    1960:	0005883a 	mov	r2,zero
    1964:	f800283a 	ret

	return 0;
    1968:	00bfffc4 	movi	r2,-1
}
    196c:	f800283a 	ret

00001970 <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1970:	20c00a17 	ldw	r3,40(r4)
    1974:	00800044 	movi	r2,1
    1978:	188000a5 	stbio	r2,2(r3)
    197c:	20800a17 	ldw	r2,40(r4)
    1980:	10c00084 	addi	r3,r2,2
    1984:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1988:	18800023 	ldbuio	r2,0(r3)
    198c:	1104703a 	and	r2,r2,r4
    1990:	103ffd1e 	bne	r2,zero,1988 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    1994:	f800283a 	ret

00001998 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1998:	deffff04 	addi	sp,sp,-4
    199c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    19a0:	01400034 	movhi	r5,0
    19a4:	295c5a04 	addi	r5,r5,29032
    19a8:	00026440 	call	2644 <alt_find_dev>

  return dev;
}
    19ac:	dfc00017 	ldw	ra,0(sp)
    19b0:	dec00104 	addi	sp,sp,4
    19b4:	f800283a 	ret

000019b8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    19b8:	defffe04 	addi	sp,sp,-8
    19bc:	dfc00115 	stw	ra,4(sp)
    19c0:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    19c4:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    19c8:	80800007 	ldb	r2,0(r16)
    19cc:	10000a26 	beq	r2,zero,19f8 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    19d0:	8009883a 	mov	r4,r16
    19d4:	01400034 	movhi	r5,0
    19d8:	29552404 	addi	r5,r5,21648
    19dc:	0002fb00 	call	2fb0 <strcmp>
    19e0:	1000021e 	bne	r2,zero,19ec <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
    19e4:	80000005 	stb	zero,0(r16)
    19e8:	00000306 	br	19f8 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    19ec:	84000044 	addi	r16,r16,1
    19f0:	80800007 	ldb	r2,0(r16)
    19f4:	103ff61e 	bne	r2,zero,19d0 <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
    19f8:	dfc00117 	ldw	ra,4(sp)
    19fc:	dc000017 	ldw	r16,0(sp)
    1a00:	dec00204 	addi	sp,sp,8
    1a04:	f800283a 	ret

00001a08 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    1a08:	da000017 	ldw	r8,0(sp)
    1a0c:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
    1a10:	1800051e 	bne	r3,zero,1a28 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    1a14:	29c5383a 	mul	r2,r5,r7
    1a18:	3085883a 	add	r2,r6,r2
    1a1c:	1105883a 	add	r2,r2,r4
    1a20:	12000025 	stbio	r8,0(r2)
    1a24:	f800283a 	ret
	else if (mode == 1)
    1a28:	00800044 	movi	r2,1
    1a2c:	1880061e 	bne	r3,r2,1a48 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    1a30:	29c5383a 	mul	r2,r5,r7
    1a34:	3085883a 	add	r2,r6,r2
    1a38:	1085883a 	add	r2,r2,r2
    1a3c:	1105883a 	add	r2,r2,r4
    1a40:	1200002d 	sthio	r8,0(r2)
    1a44:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    1a48:	29c5383a 	mul	r2,r5,r7
    1a4c:	1185883a 	add	r2,r2,r6
    1a50:	1085883a 	add	r2,r2,r2
    1a54:	1085883a 	add	r2,r2,r2
    1a58:	1105883a 	add	r2,r2,r4
    1a5c:	12000035 	stwio	r8,0(r2)
    1a60:	f800283a 	ret

00001a64 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    1a64:	defff304 	addi	sp,sp,-52
    1a68:	dfc00c15 	stw	ra,48(sp)
    1a6c:	df000b15 	stw	fp,44(sp)
    1a70:	ddc00a15 	stw	r23,40(sp)
    1a74:	dd800915 	stw	r22,36(sp)
    1a78:	dd400815 	stw	r21,32(sp)
    1a7c:	dd000715 	stw	r20,28(sp)
    1a80:	dcc00615 	stw	r19,24(sp)
    1a84:	dc800515 	stw	r18,20(sp)
    1a88:	dc400415 	stw	r17,16(sp)
    1a8c:	dc000315 	stw	r16,12(sp)
    1a90:	3011883a 	mov	r8,r6
    1a94:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    1a98:	4987c83a 	sub	r3,r9,r6
    1a9c:	1800010e 	bge	r3,zero,1aa4 <alt_up_pixel_buffer_dma_draw_line+0x40>
    1aa0:	00c7c83a 	sub	r3,zero,r3
    1aa4:	3945c83a 	sub	r2,r7,r5
    1aa8:	1000010e 	bge	r2,zero,1ab0 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    1aac:	0085c83a 	sub	r2,zero,r2
    1ab0:	10c4803a 	cmplt	r2,r2,r3
    1ab4:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    1ab8:	20c00e17 	ldw	r3,56(r4)
    1abc:	00800044 	movi	r2,1
    1ac0:	1880021e 	bne	r3,r2,1acc <alt_up_pixel_buffer_dma_draw_line+0x68>
    1ac4:	d8000215 	stw	zero,8(sp)
    1ac8:	00000306 	br	1ad8 <alt_up_pixel_buffer_dma_draw_line+0x74>
    1acc:	18c00098 	cmpnei	r3,r3,2
    1ad0:	18c00044 	addi	r3,r3,1
    1ad4:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    1ad8:	20800d17 	ldw	r2,52(r4)
    1adc:	1000061e 	bne	r2,zero,1af8 <alt_up_pixel_buffer_dma_draw_line+0x94>
    1ae0:	20801317 	ldw	r2,76(r4)
    1ae4:	d8c00217 	ldw	r3,8(sp)
    1ae8:	10c5c83a 	sub	r2,r2,r3
    1aec:	00c00044 	movi	r3,1
    1af0:	18ae983a 	sll	r23,r3,r2
    1af4:	00000106 	br	1afc <alt_up_pixel_buffer_dma_draw_line+0x98>
    1af8:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
    1afc:	d8c00f17 	ldw	r3,60(sp)
    1b00:	00800044 	movi	r2,1
    1b04:	1880021e 	bne	r3,r2,1b10 <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
    1b08:	25800c17 	ldw	r22,48(r4)
    1b0c:	00000106 	br	1b14 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    1b10:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
    1b14:	50000326 	beq	r10,zero,1b24 <alt_up_pixel_buffer_dma_draw_line+0xc0>
    1b18:	400d883a 	mov	r6,r8
    1b1c:	4827883a 	mov	r19,r9
    1b20:	00000406 	br	1b34 <alt_up_pixel_buffer_dma_draw_line+0xd0>
    1b24:	280d883a 	mov	r6,r5
    1b28:	400b883a 	mov	r5,r8
    1b2c:	3827883a 	mov	r19,r7
    1b30:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    1b34:	9980060e 	bge	r19,r6,1b50 <alt_up_pixel_buffer_dma_draw_line+0xec>
    1b38:	9805883a 	mov	r2,r19
    1b3c:	3027883a 	mov	r19,r6
    1b40:	100d883a 	mov	r6,r2
    1b44:	3805883a 	mov	r2,r7
    1b48:	280f883a 	mov	r7,r5
    1b4c:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    1b50:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
    1b54:	3969c83a 	sub	r20,r7,r5
    1b58:	a000010e 	bge	r20,zero,1b60 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    1b5c:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
    1b60:	a804d7fa 	srli	r2,r21,31
    1b64:	1545883a 	add	r2,r2,r21
    1b68:	1005d07a 	srai	r2,r2,1
    1b6c:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
    1b70:	29c0020e 	bge	r5,r7,1b7c <alt_up_pixel_buffer_dma_draw_line+0x118>
    1b74:	07000044 	movi	fp,1
    1b78:	00000106 	br	1b80 <alt_up_pixel_buffer_dma_draw_line+0x11c>
    1b7c:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    1b80:	50000226 	beq	r10,zero,1b8c <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
    1b84:	9980030e 	bge	r19,r6,1b94 <alt_up_pixel_buffer_dma_draw_line+0x130>
    1b88:	00002506 	br	1c20 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1b8c:	9980130e 	bge	r19,r6,1bdc <alt_up_pixel_buffer_dma_draw_line+0x178>
    1b90:	00002306 	br	1c20 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1b94:	3021883a 	mov	r16,r6
    1b98:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    1b9c:	d8800e17 	ldw	r2,56(sp)
    1ba0:	d8800015 	stw	r2,0(sp)
    1ba4:	d8c00217 	ldw	r3,8(sp)
    1ba8:	d8c00115 	stw	r3,4(sp)
    1bac:	b009883a 	mov	r4,r22
    1bb0:	b80b883a 	mov	r5,r23
    1bb4:	900d883a 	mov	r6,r18
    1bb8:	800f883a 	mov	r7,r16
    1bbc:	0001a080 	call	1a08 <helper_plot_pixel>
			error = error + deltay;
    1bc0:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1bc4:	0440020e 	bge	zero,r17,1bd0 <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
    1bc8:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1bcc:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    1bd0:	84000044 	addi	r16,r16,1
    1bd4:	9c001216 	blt	r19,r16,1c20 <alt_up_pixel_buffer_dma_draw_line+0x1bc>
    1bd8:	003ff006 	br	1b9c <alt_up_pixel_buffer_dma_draw_line+0x138>
    1bdc:	3021883a 	mov	r16,r6
    1be0:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    1be4:	d8800e17 	ldw	r2,56(sp)
    1be8:	d8800015 	stw	r2,0(sp)
    1bec:	d8c00217 	ldw	r3,8(sp)
    1bf0:	d8c00115 	stw	r3,4(sp)
    1bf4:	b009883a 	mov	r4,r22
    1bf8:	b80b883a 	mov	r5,r23
    1bfc:	800d883a 	mov	r6,r16
    1c00:	900f883a 	mov	r7,r18
    1c04:	0001a080 	call	1a08 <helper_plot_pixel>
			error = error + deltay;
    1c08:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
    1c0c:	0440020e 	bge	zero,r17,1c18 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
    1c10:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    1c14:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    1c18:	84000044 	addi	r16,r16,1
    1c1c:	9c3ff10e 	bge	r19,r16,1be4 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    1c20:	dfc00c17 	ldw	ra,48(sp)
    1c24:	df000b17 	ldw	fp,44(sp)
    1c28:	ddc00a17 	ldw	r23,40(sp)
    1c2c:	dd800917 	ldw	r22,36(sp)
    1c30:	dd400817 	ldw	r21,32(sp)
    1c34:	dd000717 	ldw	r20,28(sp)
    1c38:	dcc00617 	ldw	r19,24(sp)
    1c3c:	dc800517 	ldw	r18,20(sp)
    1c40:	dc400417 	ldw	r17,16(sp)
    1c44:	dc000317 	ldw	r16,12(sp)
    1c48:	dec00d04 	addi	sp,sp,52
    1c4c:	f800283a 	ret

00001c50 <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1c50:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1c54:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    1c58:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    1c5c:	3980022e 	bgeu	r7,r6,1c68 <alt_up_pixel_buffer_dma_draw_vline+0x18>
    1c60:	3011883a 	mov	r8,r6
    1c64:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    1c68:	2a405d2e 	bgeu	r5,r9,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1c6c:	30805c2e 	bgeu	r6,r2,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    1c70:	40800136 	bltu	r8,r2,1c78 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
    1c74:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1c78:	d8c00117 	ldw	r3,4(sp)
    1c7c:	00800044 	movi	r2,1
    1c80:	1880021e 	bne	r3,r2,1c8c <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1c84:	20c00c17 	ldw	r3,48(r4)
    1c88:	00000106 	br	1c90 <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1c8c:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    1c90:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1c94:	20800d17 	ldw	r2,52(r4)
    1c98:	1000281e 	bne	r2,zero,1d3c <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    1c9c:	22801317 	ldw	r10,76(r4)
    1ca0:	3284983a 	sll	r2,r6,r10
    1ca4:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1ca8:	21000e17 	ldw	r4,56(r4)
    1cac:	00800044 	movi	r2,1
    1cb0:	2080091e 	bne	r4,r2,1cd8 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
    1cb4:	41804a36 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1cb8:	1013883a 	mov	r9,r2
    1cbc:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1cc0:	1945883a 	add	r2,r3,r5
    1cc4:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1cc8:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1ccc:	324d883a 	add	r6,r6,r9
    1cd0:	41804336 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1cd4:	003ffa06 	br	1cc0 <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1cd8:	00800084 	movi	r2,2
    1cdc:	2080021e 	bne	r4,r2,1ce8 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
    1ce0:	4180032e 	bgeu	r8,r6,1cf0 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
    1ce4:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1ce8:	41800a2e 	bgeu	r8,r6,1d14 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    1cec:	f800283a 	ret
    1cf0:	294b883a 	add	r5,r5,r5
    1cf4:	02400044 	movi	r9,1
    1cf8:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1cfc:	28c5883a 	add	r2,r5,r3
    1d00:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1d04:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    1d08:	324d883a 	add	r6,r6,r9
    1d0c:	41803436 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1d10:	003ffa06 	br	1cfc <alt_up_pixel_buffer_dma_draw_vline+0xac>
    1d14:	2945883a 	add	r2,r5,r5
    1d18:	108b883a 	add	r5,r2,r2
    1d1c:	02400044 	movi	r9,1
    1d20:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1d24:	28c5883a 	add	r2,r5,r3
    1d28:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
    1d2c:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    1d30:	324d883a 	add	r6,r6,r9
    1d34:	41802a36 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1d38:	003ffa06 	br	1d24 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1d3c:	21000e17 	ldw	r4,56(r4)
    1d40:	00800044 	movi	r2,1
    1d44:	20800b1e 	bne	r4,r2,1d74 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1d48:	41802536 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1d4c:	4809883a 	mov	r4,r9
    1d50:	3245383a 	mul	r2,r6,r9
    1d54:	1885883a 	add	r2,r3,r2
    1d58:	1145883a 	add	r2,r2,r5
    1d5c:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    1d60:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1d64:	30cd883a 	add	r6,r6,r3
    1d68:	1105883a 	add	r2,r2,r4
    1d6c:	41801c36 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1d70:	003ffb06 	br	1d60 <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1d74:	00800084 	movi	r2,2
    1d78:	20800c1e 	bne	r4,r2,1dac <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1d7c:	41801836 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    1d80:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
    1d84:	3105383a 	mul	r2,r6,r4
    1d88:	1887883a 	add	r3,r3,r2
    1d8c:	294b883a 	add	r5,r5,r5
    1d90:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    1d94:	28c5883a 	add	r2,r5,r3
    1d98:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
    1d9c:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1da0:	324d883a 	add	r6,r6,r9
    1da4:	41800e36 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
    1da8:	003ffa06 	br	1d94 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1dac:	41800c36 	bltu	r8,r6,1de0 <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    1db0:	4a45883a 	add	r2,r9,r9
    1db4:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
    1db8:	3105383a 	mul	r2,r6,r4
    1dbc:	1887883a 	add	r3,r3,r2
    1dc0:	2945883a 	add	r2,r5,r5
    1dc4:	108b883a 	add	r5,r2,r2
    1dc8:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    1dcc:	28c5883a 	add	r2,r5,r3
    1dd0:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
    1dd4:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    1dd8:	324d883a 	add	r6,r6,r9
    1ddc:	41bffb2e 	bgeu	r8,r6,1dcc <alt_up_pixel_buffer_dma_draw_vline+0x17c>
    1de0:	f800283a 	ret

00001de4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    1de4:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    1de8:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    1dec:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    1df0:	3140022e 	bgeu	r6,r5,1dfc <alt_up_pixel_buffer_dma_draw_hline+0x18>
    1df4:	2813883a 	mov	r9,r5
    1df8:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    1dfc:	2a00552e 	bgeu	r5,r8,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1e00:	3880542e 	bgeu	r7,r2,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    1e04:	4a000136 	bltu	r9,r8,1e0c <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
    1e08:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    1e0c:	d8c00117 	ldw	r3,4(sp)
    1e10:	00800044 	movi	r2,1
    1e14:	1880021e 	bne	r3,r2,1e20 <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
    1e18:	21800c17 	ldw	r6,48(r4)
    1e1c:	00000106 	br	1e24 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
    1e20:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
    1e24:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1e28:	20800d17 	ldw	r2,52(r4)
    1e2c:	1000231e 	bne	r2,zero,1ebc <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    1e30:	20801317 	ldw	r2,76(r4)
    1e34:	3884983a 	sll	r2,r7,r2
    1e38:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1e3c:	21000e17 	ldw	r4,56(r4)
    1e40:	00800044 	movi	r2,1
    1e44:	2080081e 	bne	r4,r2,1e68 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
    1e48:	49404236 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1e4c:	3945883a 	add	r2,r7,r5
    1e50:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    1e54:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    1e58:	290b883a 	add	r5,r5,r4
    1e5c:	1105883a 	add	r2,r2,r4
    1e60:	49403c36 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1e64:	003ffb06 	br	1e54 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1e68:	00800084 	movi	r2,2
    1e6c:	2080021e 	bne	r4,r2,1e78 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
    1e70:	4940032e 	bgeu	r9,r5,1e80 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
    1e74:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    1e78:	4940082e 	bgeu	r9,r5,1e9c <alt_up_pixel_buffer_dma_draw_hline+0xb8>
    1e7c:	f800283a 	ret
    1e80:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    1e84:	2945883a 	add	r2,r5,r5
    1e88:	11c5883a 	add	r2,r2,r7
    1e8c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    1e90:	290b883a 	add	r5,r5,r4
    1e94:	49402f36 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1e98:	003ffa06 	br	1e84 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
    1e9c:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    1ea0:	2945883a 	add	r2,r5,r5
    1ea4:	1085883a 	add	r2,r2,r2
    1ea8:	11c5883a 	add	r2,r2,r7
    1eac:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    1eb0:	290b883a 	add	r5,r5,r4
    1eb4:	49402736 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1eb8:	003ff906 	br	1ea0 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1ebc:	21000e17 	ldw	r4,56(r4)
    1ec0:	00800044 	movi	r2,1
    1ec4:	20800a1e 	bne	r4,r2,1ef0 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
    1ec8:	41c5383a 	mul	r2,r8,r7
    1ecc:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
    1ed0:	49402036 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1ed4:	1145883a 	add	r2,r2,r5
    1ed8:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
    1edc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1ee0:	290b883a 	add	r5,r5,r4
    1ee4:	1105883a 	add	r2,r2,r4
    1ee8:	49401a36 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1eec:	003ffb06 	br	1edc <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1ef0:	00800084 	movi	r2,2
    1ef4:	20800b1e 	bne	r4,r2,1f24 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
    1ef8:	4205883a 	add	r2,r8,r8
    1efc:	3885383a 	mul	r2,r7,r2
    1f00:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    1f04:	49401336 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1f08:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    1f0c:	2945883a 	add	r2,r5,r5
    1f10:	11c5883a 	add	r2,r2,r7
    1f14:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1f18:	290b883a 	add	r5,r5,r4
    1f1c:	49400d36 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1f20:	003ffa06 	br	1f0c <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
    1f24:	4205883a 	add	r2,r8,r8
    1f28:	1085883a 	add	r2,r2,r2
    1f2c:	3885383a 	mul	r2,r7,r2
    1f30:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
    1f34:	49400736 	bltu	r9,r5,1f54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
    1f38:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    1f3c:	2945883a 	add	r2,r5,r5
    1f40:	1085883a 	add	r2,r2,r2
    1f44:	11c5883a 	add	r2,r2,r7
    1f48:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    1f4c:	290b883a 	add	r5,r5,r4
    1f50:	497ffa2e 	bgeu	r9,r5,1f3c <alt_up_pixel_buffer_dma_draw_hline+0x158>
    1f54:	f800283a 	ret

00001f58 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    1f58:	defff604 	addi	sp,sp,-40
    1f5c:	dfc00915 	stw	ra,36(sp)
    1f60:	dd800815 	stw	r22,32(sp)
    1f64:	dd400715 	stw	r21,28(sp)
    1f68:	dd000615 	stw	r20,24(sp)
    1f6c:	dcc00515 	stw	r19,20(sp)
    1f70:	dc800415 	stw	r18,16(sp)
    1f74:	dc400315 	stw	r17,12(sp)
    1f78:	dc000215 	stw	r16,8(sp)
    1f7c:	2029883a 	mov	r20,r4
    1f80:	282d883a 	mov	r22,r5
    1f84:	302b883a 	mov	r21,r6
    1f88:	3825883a 	mov	r18,r7
    1f8c:	dcc00a17 	ldw	r19,40(sp)
    1f90:	dc000b17 	ldw	r16,44(sp)
    1f94:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    1f98:	dc000015 	stw	r16,0(sp)
    1f9c:	dc400115 	stw	r17,4(sp)
    1fa0:	380d883a 	mov	r6,r7
    1fa4:	a80f883a 	mov	r7,r21
    1fa8:	0001de40 	call	1de4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    1fac:	dc000015 	stw	r16,0(sp)
    1fb0:	dc400115 	stw	r17,4(sp)
    1fb4:	a009883a 	mov	r4,r20
    1fb8:	b00b883a 	mov	r5,r22
    1fbc:	900d883a 	mov	r6,r18
    1fc0:	980f883a 	mov	r7,r19
    1fc4:	0001de40 	call	1de4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    1fc8:	dc000015 	stw	r16,0(sp)
    1fcc:	dc400115 	stw	r17,4(sp)
    1fd0:	a009883a 	mov	r4,r20
    1fd4:	b00b883a 	mov	r5,r22
    1fd8:	a80d883a 	mov	r6,r21
    1fdc:	980f883a 	mov	r7,r19
    1fe0:	0001c500 	call	1c50 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    1fe4:	dc000015 	stw	r16,0(sp)
    1fe8:	dc400115 	stw	r17,4(sp)
    1fec:	a009883a 	mov	r4,r20
    1ff0:	900b883a 	mov	r5,r18
    1ff4:	a80d883a 	mov	r6,r21
    1ff8:	980f883a 	mov	r7,r19
    1ffc:	0001c500 	call	1c50 <alt_up_pixel_buffer_dma_draw_vline>
}
    2000:	dfc00917 	ldw	ra,36(sp)
    2004:	dd800817 	ldw	r22,32(sp)
    2008:	dd400717 	ldw	r21,28(sp)
    200c:	dd000617 	ldw	r20,24(sp)
    2010:	dcc00517 	ldw	r19,20(sp)
    2014:	dc800417 	ldw	r18,16(sp)
    2018:	dc400317 	ldw	r17,12(sp)
    201c:	dc000217 	ldw	r16,8(sp)
    2020:	dec00a04 	addi	sp,sp,40
    2024:	f800283a 	ret

00002028 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    2028:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    202c:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
    2030:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
    2034:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    2038:	3940022e 	bgeu	r7,r5,2044 <alt_up_pixel_buffer_dma_draw_box+0x1c>
    203c:	2811883a 	mov	r8,r5
    2040:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
    2044:	5980032e 	bgeu	r11,r6,2054 <alt_up_pixel_buffer_dma_draw_box+0x2c>
    2048:	5805883a 	mov	r2,r11
    204c:	3017883a 	mov	r11,r6
    2050:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    2054:	2a80842e 	bgeu	r5,r10,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2058:	30c0832e 	bgeu	r6,r3,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    205c:	42800136 	bltu	r8,r10,2064 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
    2060:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2064:	58c00136 	bltu	r11,r3,206c <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
    2068:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    206c:	d8c00217 	ldw	r3,8(sp)
    2070:	00800044 	movi	r2,1
    2074:	1880021e 	bne	r3,r2,2080 <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
    2078:	20c00c17 	ldw	r3,48(r4)
    207c:	00000106 	br	2084 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
    2080:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
    2084:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2088:	20800d17 	ldw	r2,52(r4)
    208c:	1000391e 	bne	r2,zero,2174 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2090:	22801317 	ldw	r10,76(r4)
    2094:	3284983a 	sll	r2,r6,r10
    2098:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    209c:	21000e17 	ldw	r4,56(r4)
    20a0:	00800044 	movi	r2,1
    20a4:	2080101e 	bne	r4,r2,20e8 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
    20a8:	59806f36 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
    20ac:	00000a06 	br	20d8 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    20b0:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    20b4:	00800044 	movi	r2,1
    20b8:	1887883a 	add	r3,r3,r2
    20bc:	2089883a 	add	r4,r4,r2
    20c0:	40fffb2e 	bgeu	r8,r3,20b0 <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    20c4:	00800044 	movi	r2,1
    20c8:	308d883a 	add	r6,r6,r2
    20cc:	59806636 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    20d0:	1284983a 	sll	r2,r2,r10
    20d4:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    20d8:	417ffa36 	bltu	r8,r5,20c4 <alt_up_pixel_buffer_dma_draw_box+0x9c>
    20dc:	29c9883a 	add	r4,r5,r7
    20e0:	2807883a 	mov	r3,r5
    20e4:	003ff206 	br	20b0 <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    20e8:	00800084 	movi	r2,2
    20ec:	2080021e 	bne	r4,r2,20f8 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
    20f0:	59805d36 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
    20f4:	00000e06 	br	2130 <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    20f8:	59805b36 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
    20fc:	00001b06 	br	216c <alt_up_pixel_buffer_dma_draw_box+0x144>
    2100:	2807883a 	mov	r3,r5
    2104:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    2108:	18c5883a 	add	r2,r3,r3
    210c:	11c5883a 	add	r2,r2,r7
    2110:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2114:	1907883a 	add	r3,r3,r4
    2118:	40fffb2e 	bgeu	r8,r3,2108 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    211c:	00800044 	movi	r2,1
    2120:	308d883a 	add	r6,r6,r2
    2124:	59805036 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    2128:	1284983a 	sll	r2,r2,r10
    212c:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2130:	417ff32e 	bgeu	r8,r5,2100 <alt_up_pixel_buffer_dma_draw_box+0xd8>
    2134:	003ff906 	br	211c <alt_up_pixel_buffer_dma_draw_box+0xf4>
    2138:	2807883a 	mov	r3,r5
    213c:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    2140:	18c5883a 	add	r2,r3,r3
    2144:	1085883a 	add	r2,r2,r2
    2148:	11c5883a 	add	r2,r2,r7
    214c:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2150:	1907883a 	add	r3,r3,r4
    2154:	40fffa2e 	bgeu	r8,r3,2140 <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2158:	00800044 	movi	r2,1
    215c:	308d883a 	add	r6,r6,r2
    2160:	59804136 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    2164:	1284983a 	sll	r2,r2,r10
    2168:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    216c:	417ff22e 	bgeu	r8,r5,2138 <alt_up_pixel_buffer_dma_draw_box+0x110>
    2170:	003ff906 	br	2158 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2174:	21000e17 	ldw	r4,56(r4)
    2178:	00800044 	movi	r2,1
    217c:	2080121e 	bne	r4,r2,21c8 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2180:	59803936 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
    2184:	5019883a 	mov	r12,r10
    2188:	3285383a 	mul	r2,r6,r10
    218c:	1885883a 	add	r2,r3,r2
    2190:	114f883a 	add	r7,r2,r5
    2194:	00000806 	br	21b8 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2198:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    219c:	00800044 	movi	r2,1
    21a0:	1887883a 	add	r3,r3,r2
    21a4:	2089883a 	add	r4,r4,r2
    21a8:	40fffb2e 	bgeu	r8,r3,2198 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    21ac:	31800044 	addi	r6,r6,1
    21b0:	3b0f883a 	add	r7,r7,r12
    21b4:	59802c36 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
    21b8:	417ffc36 	bltu	r8,r5,21ac <alt_up_pixel_buffer_dma_draw_box+0x184>
    21bc:	3809883a 	mov	r4,r7
    21c0:	2807883a 	mov	r3,r5
    21c4:	003ff406 	br	2198 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    21c8:	00800084 	movi	r2,2
    21cc:	2080121e 	bne	r4,r2,2218 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    21d0:	59802536 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
    21d4:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
    21d8:	3285383a 	mul	r2,r6,r10
    21dc:	1889883a 	add	r4,r3,r2
    21e0:	03000044 	movi	r12,1
    21e4:	00000a06 	br	2210 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    21e8:	2807883a 	mov	r3,r5
    21ec:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    21f0:	18c5883a 	add	r2,r3,r3
    21f4:	1105883a 	add	r2,r2,r4
    21f8:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    21fc:	19c7883a 	add	r3,r3,r7
    2200:	40fffb2e 	bgeu	r8,r3,21f0 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2204:	330d883a 	add	r6,r6,r12
    2208:	59801736 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    220c:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2210:	417ff52e 	bgeu	r8,r5,21e8 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
    2214:	003ffb06 	br	2204 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2218:	59801336 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    221c:	5285883a 	add	r2,r10,r10
    2220:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
    2224:	3285383a 	mul	r2,r6,r10
    2228:	1889883a 	add	r4,r3,r2
    222c:	03000044 	movi	r12,1
    2230:	00000b06 	br	2260 <alt_up_pixel_buffer_dma_draw_box+0x238>
    2234:	2807883a 	mov	r3,r5
    2238:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    223c:	18c5883a 	add	r2,r3,r3
    2240:	1085883a 	add	r2,r2,r2
    2244:	1105883a 	add	r2,r2,r4
    2248:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    224c:	19c7883a 	add	r3,r3,r7
    2250:	40fffa2e 	bgeu	r8,r3,223c <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2254:	330d883a 	add	r6,r6,r12
    2258:	59800336 	bltu	r11,r6,2268 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    225c:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2260:	417ff42e 	bgeu	r8,r5,2234 <alt_up_pixel_buffer_dma_draw_box+0x20c>
    2264:	003ffb06 	br	2254 <alt_up_pixel_buffer_dma_draw_box+0x22c>
    2268:	f800283a 	ret

0000226c <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    226c:	00800044 	movi	r2,1
    2270:	2880021e 	bne	r5,r2,227c <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    2274:	21c00c17 	ldw	r7,48(r4)
    2278:	00000106 	br	2280 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    227c:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
    2280:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2284:	20c00e17 	ldw	r3,56(r4)
    2288:	00800084 	movi	r2,2
    228c:	1880021e 	bne	r3,r2,2298 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2290:	294d883a 	add	r6,r5,r5
    2294:	00000206 	br	22a0 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    2298:	2945883a 	add	r2,r5,r5
    229c:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    22a0:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    22a4:	20800d17 	ldw	r2,52(r4)
    22a8:	1000121e 	bne	r2,zero,22f4 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    22ac:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
    22b0:	48001a26 	beq	r9,zero,231c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    22b4:	0011883a 	mov	r8,zero
    22b8:	3014c03a 	cmpne	r10,r6,zero
    22bc:	00000b06 	br	22ec <alt_up_pixel_buffer_dma_clear_screen+0x80>
    22c0:	0007883a 	mov	r3,zero
    22c4:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
    22c8:	19c5883a 	add	r2,r3,r7
    22cc:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    22d0:	1947883a 	add	r3,r3,r5
    22d4:	19bffc36 	bltu	r3,r6,22c8 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    22d8:	00800044 	movi	r2,1
    22dc:	4091883a 	add	r8,r8,r2
    22e0:	4a000e26 	beq	r9,r8,231c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    22e4:	1104983a 	sll	r2,r2,r4
    22e8:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    22ec:	503ff41e 	bne	r10,zero,22c0 <alt_up_pixel_buffer_dma_clear_screen+0x54>
    22f0:	003ff906 	br	22d8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    22f4:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
    22f8:	20000826 	beq	r4,zero,231c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    22fc:	0007883a 	mov	r3,zero
    2300:	0005883a 	mov	r2,zero
    2304:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
    2308:	3885883a 	add	r2,r7,r2
    230c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    2310:	1945883a 	add	r2,r3,r5
    2314:	1007883a 	mov	r3,r2
    2318:	113ffb36 	bltu	r2,r4,2308 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
    231c:	f800283a 	ret

00002320 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    2320:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    2324:	20c00a17 	ldw	r3,40(r4)
    2328:	00800044 	movi	r2,1
    232c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    2330:	20800b17 	ldw	r2,44(r4)
    2334:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
    2338:	21400b15 	stw	r5,44(r4)
	return 0;
}
    233c:	0005883a 	mov	r2,zero
    2340:	f800283a 	ret

00002344 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    2344:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    2348:	22400f17 	ldw	r9,60(r4)
    234c:	32402a2e 	bgeu	r6,r9,23f8 <alt_up_pixel_buffer_dma_draw+0xb4>
    2350:	20801017 	ldw	r2,64(r4)
    2354:	3880282e 	bgeu	r7,r2,23f8 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2358:	20800d17 	ldw	r2,52(r4)
    235c:	10000a1e 	bne	r2,zero,2388 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    2360:	21001217 	ldw	r4,72(r4)
    2364:	3108703a 	and	r4,r6,r4
    2368:	40801117 	ldw	r2,68(r8)
    236c:	2088983a 	sll	r4,r4,r2
    2370:	40801417 	ldw	r2,80(r8)
    2374:	3884703a 	and	r2,r7,r2
    2378:	40c01317 	ldw	r3,76(r8)
    237c:	10c4983a 	sll	r2,r2,r3
    2380:	2086b03a 	or	r3,r4,r2
    2384:	00000806 	br	23a8 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    2388:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    238c:	40c01217 	ldw	r3,72(r8)
    2390:	30c6703a 	and	r3,r6,r3
    2394:	40801417 	ldw	r2,80(r8)
    2398:	3884703a 	and	r2,r7,r2
    239c:	4885383a 	mul	r2,r9,r2
    23a0:	10c5883a 	add	r2,r2,r3
    23a4:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    23a8:	42400e17 	ldw	r9,56(r8)
    23ac:	00800044 	movi	r2,1
    23b0:	4880051e 	bne	r9,r2,23c8 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    23b4:	40800c17 	ldw	r2,48(r8)
    23b8:	1885883a 	add	r2,r3,r2
    23bc:	11400025 	stbio	r5,0(r2)
    23c0:	0005883a 	mov	r2,zero
    23c4:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    23c8:	00800084 	movi	r2,2
    23cc:	4880051e 	bne	r9,r2,23e4 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    23d0:	40800c17 	ldw	r2,48(r8)
    23d4:	1885883a 	add	r2,r3,r2
    23d8:	1140002d 	sthio	r5,0(r2)
    23dc:	0005883a 	mov	r2,zero
    23e0:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    23e4:	40800c17 	ldw	r2,48(r8)
    23e8:	1885883a 	add	r2,r3,r2
    23ec:	11400035 	stwio	r5,0(r2)
    23f0:	0005883a 	mov	r2,zero
    23f4:	f800283a 	ret
    23f8:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
    23fc:	f800283a 	ret

00002400 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    2400:	20800a17 	ldw	r2,40(r4)
    2404:	10800337 	ldwio	r2,12(r2)
}
    2408:	1080004c 	andi	r2,r2,1
    240c:	f800283a 	ret

00002410 <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    2410:	00c00104 	movi	r3,4
    2414:	20800a17 	ldw	r2,40(r4)
    2418:	10c5883a 	add	r2,r2,r3
    241c:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    2420:	20800a17 	ldw	r2,40(r4)
    2424:	10c5883a 	add	r2,r2,r3
    2428:	10800037 	ldwio	r2,0(r2)
    242c:	20800c15 	stw	r2,48(r4)
	return 0;
}
    2430:	0005883a 	mov	r2,zero
    2434:	f800283a 	ret

00002438 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    2438:	deffff04 	addi	sp,sp,-4
    243c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    2440:	01400034 	movhi	r5,0
    2444:	295c5a04 	addi	r5,r5,29032
    2448:	00026440 	call	2644 <alt_find_dev>

  return dev;
}
    244c:	dfc00017 	ldw	ra,0(sp)
    2450:	dec00104 	addi	sp,sp,4
    2454:	f800283a 	ret

00002458 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2458:	00800074 	movhi	r2,1
    245c:	10a3a104 	addi	r2,r2,-29052
    2460:	10800017 	ldw	r2,0(r2)
    2464:	1000021e 	bne	r2,zero,2470 <alt_alarm_start+0x18>
    2468:	00bfde84 	movi	r2,-134
    246c:	f800283a 	ret
  {
    if (alarm)
    2470:	2000021e 	bne	r4,zero,247c <alt_alarm_start+0x24>
    2474:	00bffa84 	movi	r2,-22
    2478:	f800283a 	ret
    {
      alarm->callback = callback;
    247c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    2480:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2484:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2488:	00bfff84 	movi	r2,-2
    248c:	3884703a 	and	r2,r7,r2
    2490:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2494:	00800074 	movhi	r2,1
    2498:	10a3a204 	addi	r2,r2,-29048
    249c:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    24a0:	01800044 	movi	r6,1
    24a4:	1985883a 	add	r2,r3,r6
    24a8:	2885883a 	add	r2,r5,r2
    24ac:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    24b0:	10c0022e 	bgeu	r2,r3,24bc <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    24b4:	21800405 	stb	r6,16(r4)
    24b8:	00000106 	br	24c0 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    24bc:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    24c0:	00800034 	movhi	r2,0
    24c4:	109c5f04 	addi	r2,r2,29052
    24c8:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    24cc:	10c00017 	ldw	r3,0(r2)
    24d0:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    24d4:	10c00017 	ldw	r3,0(r2)
    24d8:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    24dc:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    24e0:	3801703a 	wrctl	status,r7
    24e4:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    24e8:	f800283a 	ret

000024ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    24ec:	defffd04 	addi	sp,sp,-12
    24f0:	dfc00215 	stw	ra,8(sp)
    24f4:	dc400115 	stw	r17,4(sp)
    24f8:	dc000015 	stw	r16,0(sp)
    24fc:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2500:	20001c16 	blt	r4,zero,2574 <close+0x88>
    2504:	20c00324 	muli	r3,r4,12
    2508:	00800034 	movhi	r2,0
    250c:	1099f604 	addi	r2,r2,26584
    2510:	1889883a 	add	r4,r3,r2

  if (fd)
    2514:	20001726 	beq	r4,zero,2574 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2518:	20800017 	ldw	r2,0(r4)
    251c:	10800417 	ldw	r2,16(r2)
    2520:	10002126 	beq	r2,zero,25a8 <close+0xbc>
    2524:	103ee83a 	callr	r2
    2528:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    252c:	8009883a 	mov	r4,r16
    2530:	0002a080 	call	2a08 <alt_release_fd>
    if (rval < 0)
    2534:	88000216 	blt	r17,zero,2540 <close+0x54>
    2538:	0005883a 	mov	r2,zero
    253c:	00001d06 	br	25b4 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2540:	00800034 	movhi	r2,0
    2544:	109c5d04 	addi	r2,r2,29044
    2548:	10800017 	ldw	r2,0(r2)
    254c:	1000031e 	bne	r2,zero,255c <close+0x70>
    2550:	00c00074 	movhi	r3,1
    2554:	18e3a304 	addi	r3,r3,-29044
    2558:	00000206 	br	2564 <close+0x78>
    255c:	103ee83a 	callr	r2
    2560:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    2564:	0445c83a 	sub	r2,zero,r17
    2568:	18800015 	stw	r2,0(r3)
    256c:	00bfffc4 	movi	r2,-1
    2570:	00001006 	br	25b4 <close+0xc8>
    2574:	00800034 	movhi	r2,0
    2578:	109c5d04 	addi	r2,r2,29044
    257c:	10800017 	ldw	r2,0(r2)
    2580:	1000031e 	bne	r2,zero,2590 <close+0xa4>
    2584:	00c00074 	movhi	r3,1
    2588:	18e3a304 	addi	r3,r3,-29044
    258c:	00000206 	br	2598 <close+0xac>
    2590:	103ee83a 	callr	r2
    2594:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2598:	00801444 	movi	r2,81
    259c:	18800015 	stw	r2,0(r3)
    25a0:	00bfffc4 	movi	r2,-1
    25a4:	00000306 	br	25b4 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    25a8:	8009883a 	mov	r4,r16
    25ac:	0002a080 	call	2a08 <alt_release_fd>
    25b0:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    25b4:	dfc00217 	ldw	ra,8(sp)
    25b8:	dc400117 	ldw	r17,4(sp)
    25bc:	dc000017 	ldw	r16,0(sp)
    25c0:	dec00304 	addi	sp,sp,12
    25c4:	f800283a 	ret

000025c8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    25c8:	f800283a 	ret

000025cc <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    25cc:	3005883a 	mov	r2,r6
    25d0:	f800283a 	ret

000025d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    25d4:	deffff04 	addi	sp,sp,-4
    25d8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    25dc:	20000226 	beq	r4,zero,25e8 <alt_dev_llist_insert+0x14>
    25e0:	20800217 	ldw	r2,8(r4)
    25e4:	10000d1e 	bne	r2,zero,261c <alt_dev_llist_insert+0x48>
    25e8:	00800034 	movhi	r2,0
    25ec:	109c5d04 	addi	r2,r2,29044
    25f0:	10800017 	ldw	r2,0(r2)
    25f4:	1000031e 	bne	r2,zero,2604 <alt_dev_llist_insert+0x30>
    25f8:	00c00074 	movhi	r3,1
    25fc:	18e3a304 	addi	r3,r3,-29044
    2600:	00000206 	br	260c <alt_dev_llist_insert+0x38>
    2604:	103ee83a 	callr	r2
    2608:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    260c:	00800584 	movi	r2,22
    2610:	18800015 	stw	r2,0(r3)
    2614:	00bffa84 	movi	r2,-22
    2618:	00000706 	br	2638 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    261c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2620:	28800017 	ldw	r2,0(r5)
    2624:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2628:	28800017 	ldw	r2,0(r5)
    262c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2630:	29000015 	stw	r4,0(r5)
    2634:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2638:	dfc00017 	ldw	ra,0(sp)
    263c:	dec00104 	addi	sp,sp,4
    2640:	f800283a 	ret

00002644 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2644:	defffb04 	addi	sp,sp,-20
    2648:	dfc00415 	stw	ra,16(sp)
    264c:	dcc00315 	stw	r19,12(sp)
    2650:	dc800215 	stw	r18,8(sp)
    2654:	dc400115 	stw	r17,4(sp)
    2658:	dc000015 	stw	r16,0(sp)
    265c:	2027883a 	mov	r19,r4
    2660:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    2664:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2668:	000306c0 	call	306c <strlen>
    266c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2670:	8c000726 	beq	r17,r16,2690 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2674:	89000217 	ldw	r4,8(r17)
    2678:	980b883a 	mov	r5,r19
    267c:	900d883a 	mov	r6,r18
    2680:	0002cb00 	call	2cb0 <memcmp>
    2684:	10000326 	beq	r2,zero,2694 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2688:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    268c:	847ff91e 	bne	r16,r17,2674 <alt_find_dev+0x30>
    2690:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    2694:	8805883a 	mov	r2,r17
    2698:	dfc00417 	ldw	ra,16(sp)
    269c:	dcc00317 	ldw	r19,12(sp)
    26a0:	dc800217 	ldw	r18,8(sp)
    26a4:	dc400117 	ldw	r17,4(sp)
    26a8:	dc000017 	ldw	r16,0(sp)
    26ac:	dec00504 	addi	sp,sp,20
    26b0:	f800283a 	ret

000026b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    26b4:	deffff04 	addi	sp,sp,-4
    26b8:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    26bc:	0009883a 	mov	r4,zero
    26c0:	01408004 	movi	r5,512
    26c4:	0002c3c0 	call	2c3c <alt_icache_flush>
#endif
}
    26c8:	dfc00017 	ldw	ra,0(sp)
    26cc:	dec00104 	addi	sp,sp,4
    26d0:	f800283a 	ret

000026d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    26d4:	defffe04 	addi	sp,sp,-8
    26d8:	dfc00115 	stw	ra,4(sp)
    26dc:	dc000015 	stw	r16,0(sp)
    26e0:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    26e4:	2809883a 	mov	r4,r5
    26e8:	300b883a 	mov	r5,r6
    26ec:	380d883a 	mov	r6,r7
    26f0:	000288c0 	call	288c <open>
    26f4:	1009883a 	mov	r4,r2

  if (old >= 0)
    26f8:	10000b16 	blt	r2,zero,2728 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    26fc:	10c00324 	muli	r3,r2,12
    2700:	00800034 	movhi	r2,0
    2704:	1099f604 	addi	r2,r2,26584
    2708:	1887883a 	add	r3,r3,r2
    270c:	18800017 	ldw	r2,0(r3)
    2710:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    2714:	18800117 	ldw	r2,4(r3)
    2718:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    271c:	18800217 	ldw	r2,8(r3)
    2720:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
    2724:	0002a080 	call	2a08 <alt_release_fd>
  }
} 
    2728:	dfc00117 	ldw	ra,4(sp)
    272c:	dc000017 	ldw	r16,0(sp)
    2730:	dec00204 	addi	sp,sp,8
    2734:	f800283a 	ret

00002738 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2738:	defffa04 	addi	sp,sp,-24
    273c:	dfc00515 	stw	ra,20(sp)
    2740:	dd000415 	stw	r20,16(sp)
    2744:	dcc00315 	stw	r19,12(sp)
    2748:	dc800215 	stw	r18,8(sp)
    274c:	dc400115 	stw	r17,4(sp)
    2750:	dc000015 	stw	r16,0(sp)
    2754:	2005883a 	mov	r2,r4
    2758:	2827883a 	mov	r19,r5
    275c:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2760:	04000034 	movhi	r16,0
    2764:	8419f904 	addi	r16,r16,26596
    2768:	04800044 	movi	r18,1
    276c:	04407fc4 	movi	r17,511
    2770:	8009883a 	mov	r4,r16
    2774:	100b883a 	mov	r5,r2
    2778:	900d883a 	mov	r6,r18
    277c:	880f883a 	mov	r7,r17
    2780:	00026d40 	call	26d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2784:	843ffd04 	addi	r16,r16,-12
    2788:	8009883a 	mov	r4,r16
    278c:	980b883a 	mov	r5,r19
    2790:	000d883a 	mov	r6,zero
    2794:	880f883a 	mov	r7,r17
    2798:	00026d40 	call	26d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    279c:	81000604 	addi	r4,r16,24
    27a0:	a00b883a 	mov	r5,r20
    27a4:	900d883a 	mov	r6,r18
    27a8:	880f883a 	mov	r7,r17
    27ac:	00026d40 	call	26d4 <alt_open_fd>
}  
    27b0:	dfc00517 	ldw	ra,20(sp)
    27b4:	dd000417 	ldw	r20,16(sp)
    27b8:	dcc00317 	ldw	r19,12(sp)
    27bc:	dc800217 	ldw	r18,8(sp)
    27c0:	dc400117 	ldw	r17,4(sp)
    27c4:	dc000017 	ldw	r16,0(sp)
    27c8:	dec00604 	addi	sp,sp,24
    27cc:	f800283a 	ret

000027d0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    27d0:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    27d4:	008007c4 	movi	r2,31
    27d8:	1100022e 	bgeu	r2,r4,27e4 <alt_irq_register+0x14>
    27dc:	00bffa84 	movi	r2,-22
    27e0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    27e4:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    27e8:	013fff84 	movi	r4,-2
    27ec:	4104703a 	and	r2,r8,r4
    27f0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    27f4:	380490fa 	slli	r2,r7,3
    27f8:	00c00074 	movhi	r3,1
    27fc:	18e3b104 	addi	r3,r3,-28988
    2800:	10c5883a 	add	r2,r2,r3
    2804:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2808:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    280c:	30000e26 	beq	r6,zero,2848 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2810:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2814:	2904703a 	and	r2,r5,r4
    2818:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    281c:	00c00074 	movhi	r3,1
    2820:	18e3a004 	addi	r3,r3,-29056
    2824:	19000017 	ldw	r4,0(r3)
    2828:	00800044 	movi	r2,1
    282c:	11c4983a 	sll	r2,r2,r7
    2830:	1104b03a 	or	r2,r2,r4
    2834:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2838:	18800017 	ldw	r2,0(r3)
    283c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2840:	2801703a 	wrctl	status,r5
    2844:	00000e06 	br	2880 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2848:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    284c:	00bfff84 	movi	r2,-2
    2850:	2884703a 	and	r2,r5,r2
    2854:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2858:	00c00074 	movhi	r3,1
    285c:	18e3a004 	addi	r3,r3,-29056
    2860:	19000017 	ldw	r4,0(r3)
    2864:	00bfff84 	movi	r2,-2
    2868:	11c4183a 	rol	r2,r2,r7
    286c:	1104703a 	and	r2,r2,r4
    2870:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2874:	18800017 	ldw	r2,0(r3)
    2878:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    287c:	2801703a 	wrctl	status,r5
    2880:	4001703a 	wrctl	status,r8
    2884:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2888:	f800283a 	ret

0000288c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    288c:	defff904 	addi	sp,sp,-28
    2890:	dfc00615 	stw	ra,24(sp)
    2894:	dd400515 	stw	r21,20(sp)
    2898:	dd000415 	stw	r20,16(sp)
    289c:	dcc00315 	stw	r19,12(sp)
    28a0:	dc800215 	stw	r18,8(sp)
    28a4:	dc400115 	stw	r17,4(sp)
    28a8:	dc000015 	stw	r16,0(sp)
    28ac:	2029883a 	mov	r20,r4
    28b0:	2827883a 	mov	r19,r5
    28b4:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    28b8:	01400034 	movhi	r5,0
    28bc:	295c5a04 	addi	r5,r5,29032
    28c0:	00026440 	call	2644 <alt_find_dev>
    28c4:	1021883a 	mov	r16,r2
    28c8:	10000226 	beq	r2,zero,28d4 <open+0x48>
    28cc:	0025883a 	mov	r18,zero
    28d0:	00000a06 	br	28fc <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    28d4:	a009883a 	mov	r4,r20
    28d8:	0002b140 	call	2b14 <alt_find_file>
    28dc:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    28e0:	1000051e 	bne	r2,zero,28f8 <open+0x6c>
    28e4:	047fffc4 	movi	r17,-1
    28e8:	043ffb44 	movi	r16,-19
    28ec:	00002b06 	br	299c <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    28f0:	043ffcc4 	movi	r16,-13
    28f4:	00002906 	br	299c <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    28f8:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    28fc:	8009883a 	mov	r4,r16
    2900:	0002bd00 	call	2bd0 <alt_get_fd>
    2904:	1023883a 	mov	r17,r2
    2908:	10003316 	blt	r2,zero,29d8 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    290c:	10800324 	muli	r2,r2,12
    2910:	02000034 	movhi	r8,0
    2914:	4219f604 	addi	r8,r8,26584
    2918:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    291c:	00900034 	movhi	r2,16384
    2920:	10bfffc4 	addi	r2,r2,-1
    2924:	9886703a 	and	r3,r19,r2
    2928:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    292c:	9004c03a 	cmpne	r2,r18,zero
    2930:	1000121e 	bne	r2,zero,297c <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2934:	18900034 	orhi	r2,r3,16384
    2938:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    293c:	00800034 	movhi	r2,0
    2940:	109c5c04 	addi	r2,r2,29040
    2944:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2948:	21800017 	ldw	r6,0(r4)
    294c:	000b883a 	mov	r5,zero
    2950:	4007883a 	mov	r3,r8
    2954:	02400044 	movi	r9,1
    2958:	02000304 	movi	r8,12
    295c:	18800017 	ldw	r2,0(r3)
    2960:	1180031e 	bne	r2,r6,2970 <open+0xe4>
    2964:	18800217 	ldw	r2,8(r3)
    2968:	1000010e 	bge	r2,zero,2970 <open+0xe4>
    296c:	193fe01e 	bne	r3,r4,28f0 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2970:	2a4b883a 	add	r5,r5,r9
    2974:	1a07883a 	add	r3,r3,r8
    2978:	397ff82e 	bgeu	r7,r5,295c <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    297c:	80800317 	ldw	r2,12(r16)
    2980:	10001726 	beq	r2,zero,29e0 <open+0x154>
    2984:	a00b883a 	mov	r5,r20
    2988:	980d883a 	mov	r6,r19
    298c:	a80f883a 	mov	r7,r21
    2990:	103ee83a 	callr	r2
    2994:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2998:	1000110e 	bge	r2,zero,29e0 <open+0x154>
  {
    alt_release_fd (index);  
    299c:	8809883a 	mov	r4,r17
    29a0:	0002a080 	call	2a08 <alt_release_fd>
    29a4:	00800034 	movhi	r2,0
    29a8:	109c5d04 	addi	r2,r2,29044
    29ac:	10800017 	ldw	r2,0(r2)
    29b0:	1000031e 	bne	r2,zero,29c0 <open+0x134>
    29b4:	00c00074 	movhi	r3,1
    29b8:	18e3a304 	addi	r3,r3,-29044
    29bc:	00000206 	br	29c8 <open+0x13c>
    29c0:	103ee83a 	callr	r2
    29c4:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    29c8:	0405c83a 	sub	r2,zero,r16
    29cc:	18800015 	stw	r2,0(r3)
    29d0:	047fffc4 	movi	r17,-1
    29d4:	00000206 	br	29e0 <open+0x154>
    29d8:	1021883a 	mov	r16,r2
    29dc:	003fef06 	br	299c <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    29e0:	8805883a 	mov	r2,r17
    29e4:	dfc00617 	ldw	ra,24(sp)
    29e8:	dd400517 	ldw	r21,20(sp)
    29ec:	dd000417 	ldw	r20,16(sp)
    29f0:	dcc00317 	ldw	r19,12(sp)
    29f4:	dc800217 	ldw	r18,8(sp)
    29f8:	dc400117 	ldw	r17,4(sp)
    29fc:	dc000017 	ldw	r16,0(sp)
    2a00:	dec00704 	addi	sp,sp,28
    2a04:	f800283a 	ret

00002a08 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    2a08:	00800084 	movi	r2,2
    2a0c:	1100060e 	bge	r2,r4,2a28 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    2a10:	20800324 	muli	r2,r4,12
    2a14:	00c00034 	movhi	r3,0
    2a18:	18d9f604 	addi	r3,r3,26584
    2a1c:	10c5883a 	add	r2,r2,r3
    2a20:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    2a24:	10000015 	stw	zero,0(r2)
    2a28:	f800283a 	ret

00002a2c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a2c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a30:	00bfff84 	movi	r2,-2
    2a34:	2884703a 	and	r2,r5,r2
    2a38:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2a3c:	20c00017 	ldw	r3,0(r4)
    2a40:	20800117 	ldw	r2,4(r4)
    2a44:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2a48:	20800117 	ldw	r2,4(r4)
    2a4c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2a50:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    2a54:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2a58:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    2a5c:	f800283a 	ret

00002a60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2a60:	defffd04 	addi	sp,sp,-12
    2a64:	dfc00215 	stw	ra,8(sp)
    2a68:	dc400115 	stw	r17,4(sp)
    2a6c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2a70:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2a74:	d0a74a17 	ldw	r2,-25304(gp)
    2a78:	10800044 	addi	r2,r2,1
    2a7c:	d0a74a15 	stw	r2,-25304(gp)
    2a80:	00001b06 	br	2af0 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    2a84:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2a88:	80800403 	ldbu	r2,16(r16)
    2a8c:	10000326 	beq	r2,zero,2a9c <alt_tick+0x3c>
    2a90:	d0a74a17 	ldw	r2,-25304(gp)
    2a94:	1000011e 	bne	r2,zero,2a9c <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    2a98:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2a9c:	d0e74a17 	ldw	r3,-25304(gp)
    2aa0:	80800217 	ldw	r2,8(r16)
    2aa4:	18801136 	bltu	r3,r2,2aec <alt_tick+0x8c>
    2aa8:	80800403 	ldbu	r2,16(r16)
    2aac:	10000f1e 	bne	r2,zero,2aec <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    2ab0:	80800317 	ldw	r2,12(r16)
    2ab4:	81000517 	ldw	r4,20(r16)
    2ab8:	103ee83a 	callr	r2
    2abc:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2ac0:	1000031e 	bne	r2,zero,2ad0 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    2ac4:	8009883a 	mov	r4,r16
    2ac8:	0002a2c0 	call	2a2c <alt_alarm_stop>
    2acc:	00000706 	br	2aec <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    2ad0:	80800217 	ldw	r2,8(r16)
    2ad4:	1885883a 	add	r2,r3,r2
    2ad8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2adc:	d0e74a17 	ldw	r3,-25304(gp)
    2ae0:	10c0022e 	bgeu	r2,r3,2aec <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    2ae4:	00800044 	movi	r2,1
    2ae8:	80800405 	stb	r2,16(r16)
    2aec:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2af0:	d0a00704 	addi	r2,gp,-32740
    2af4:	80bfe31e 	bne	r16,r2,2a84 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2af8:	dfc00217 	ldw	ra,8(sp)
    2afc:	dc400117 	ldw	r17,4(sp)
    2b00:	dc000017 	ldw	r16,0(sp)
    2b04:	dec00304 	addi	sp,sp,12
    2b08:	f800283a 	ret

00002b0c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2b0c:	000170fa 	wrctl	ienable,zero
}
    2b10:	f800283a 	ret

00002b14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2b14:	defff904 	addi	sp,sp,-28
    2b18:	dfc00615 	stw	ra,24(sp)
    2b1c:	dd400515 	stw	r21,20(sp)
    2b20:	dd000415 	stw	r20,16(sp)
    2b24:	dcc00315 	stw	r19,12(sp)
    2b28:	dc800215 	stw	r18,8(sp)
    2b2c:	dc400115 	stw	r17,4(sp)
    2b30:	dc000015 	stw	r16,0(sp)
    2b34:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2b38:	00800034 	movhi	r2,0
    2b3c:	109c5804 	addi	r2,r2,29024
    2b40:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2b44:	102b883a 	mov	r21,r2
    2b48:	88801626 	beq	r17,r2,2ba4 <alt_find_file+0x90>
    2b4c:	053fffc4 	movi	r20,-1
    2b50:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    2b54:	8c000217 	ldw	r16,8(r17)
    2b58:	8009883a 	mov	r4,r16
    2b5c:	000306c0 	call	306c <strlen>
    2b60:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    2b64:	8085883a 	add	r2,r16,r2
    2b68:	1505883a 	add	r2,r2,r20
    2b6c:	10800007 	ldb	r2,0(r2)
    2b70:	14c0011e 	bne	r2,r19,2b78 <alt_find_file+0x64>
    {
      len -= 1;
    2b74:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2b78:	1c85883a 	add	r2,r3,r18
    2b7c:	10800007 	ldb	r2,0(r2)
    2b80:	14c00126 	beq	r2,r19,2b88 <alt_find_file+0x74>
    2b84:	1000051e 	bne	r2,zero,2b9c <alt_find_file+0x88>
    2b88:	8009883a 	mov	r4,r16
    2b8c:	900b883a 	mov	r5,r18
    2b90:	180d883a 	mov	r6,r3
    2b94:	0002cb00 	call	2cb0 <memcmp>
    2b98:	10000326 	beq	r2,zero,2ba8 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2b9c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2ba0:	8d7fec1e 	bne	r17,r21,2b54 <alt_find_file+0x40>
    2ba4:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    2ba8:	8805883a 	mov	r2,r17
    2bac:	dfc00617 	ldw	ra,24(sp)
    2bb0:	dd400517 	ldw	r21,20(sp)
    2bb4:	dd000417 	ldw	r20,16(sp)
    2bb8:	dcc00317 	ldw	r19,12(sp)
    2bbc:	dc800217 	ldw	r18,8(sp)
    2bc0:	dc400117 	ldw	r17,4(sp)
    2bc4:	dc000017 	ldw	r16,0(sp)
    2bc8:	dec00704 	addi	sp,sp,28
    2bcc:	f800283a 	ret

00002bd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2bd0:	000b883a 	mov	r5,zero
    2bd4:	00c00034 	movhi	r3,0
    2bd8:	18d9f604 	addi	r3,r3,26584
    2bdc:	02000304 	movi	r8,12
    2be0:	02400034 	movhi	r9,0
    2be4:	4a5c5c04 	addi	r9,r9,29040
    2be8:	01c00044 	movi	r7,1
    2bec:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    2bf0:	18800017 	ldw	r2,0(r3)
    2bf4:	10000c1e 	bne	r2,zero,2c28 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    2bf8:	2a05383a 	mul	r2,r5,r8
    2bfc:	00c00034 	movhi	r3,0
    2c00:	18d9f604 	addi	r3,r3,26584
    2c04:	10c5883a 	add	r2,r2,r3
    2c08:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
    2c0c:	48800017 	ldw	r2,0(r9)
    2c10:	11400216 	blt	r2,r5,2c1c <alt_get_fd+0x4c>
    2c14:	2805883a 	mov	r2,r5
    2c18:	f800283a 	ret
      {
        alt_max_fd = i;
    2c1c:	49400015 	stw	r5,0(r9)
    2c20:	2805883a 	mov	r2,r5
    2c24:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2c28:	29cb883a 	add	r5,r5,r7
    2c2c:	1a07883a 	add	r3,r3,r8
    2c30:	29bfef1e 	bne	r5,r6,2bf0 <alt_get_fd+0x20>
    2c34:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    2c38:	f800283a 	ret

00002c3c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    2c3c:	2007883a 	mov	r3,r4
    2c40:	00808004 	movi	r2,512
    2c44:	1140012e 	bgeu	r2,r5,2c4c <alt_icache_flush+0x10>
    2c48:	100b883a 	mov	r5,r2
    2c4c:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2c50:	1940042e 	bgeu	r3,r5,2c64 <alt_icache_flush+0x28>
    2c54:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2c58:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2c5c:	1887883a 	add	r3,r3,r2
    2c60:	197ffd36 	bltu	r3,r5,2c58 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2c64:	208007cc 	andi	r2,r4,31
    2c68:	10000126 	beq	r2,zero,2c70 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2c6c:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2c70:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2c74:	f800283a 	ret

00002c78 <exit>:
    2c78:	defffe04 	addi	sp,sp,-8
    2c7c:	000b883a 	mov	r5,zero
    2c80:	dc000015 	stw	r16,0(sp)
    2c84:	dfc00115 	stw	ra,4(sp)
    2c88:	2021883a 	mov	r16,r4
    2c8c:	000336c0 	call	336c <__call_exitprocs>
    2c90:	00800034 	movhi	r2,0
    2c94:	109c6204 	addi	r2,r2,29064
    2c98:	11000017 	ldw	r4,0(r2)
    2c9c:	20800f17 	ldw	r2,60(r4)
    2ca0:	10000126 	beq	r2,zero,2ca8 <exit+0x30>
    2ca4:	103ee83a 	callr	r2
    2ca8:	8009883a 	mov	r4,r16
    2cac:	0004ed40 	call	4ed4 <_exit>

00002cb0 <memcmp>:
    2cb0:	00c000c4 	movi	r3,3
    2cb4:	1980032e 	bgeu	r3,r6,2cc4 <memcmp+0x14>
    2cb8:	2144b03a 	or	r2,r4,r5
    2cbc:	10c4703a 	and	r2,r2,r3
    2cc0:	10000f26 	beq	r2,zero,2d00 <memcmp+0x50>
    2cc4:	31ffffc4 	addi	r7,r6,-1
    2cc8:	3000061e 	bne	r6,zero,2ce4 <memcmp+0x34>
    2ccc:	00000a06 	br	2cf8 <memcmp+0x48>
    2cd0:	39ffffc4 	addi	r7,r7,-1
    2cd4:	00bfffc4 	movi	r2,-1
    2cd8:	21000044 	addi	r4,r4,1
    2cdc:	29400044 	addi	r5,r5,1
    2ce0:	38800526 	beq	r7,r2,2cf8 <memcmp+0x48>
    2ce4:	20c00003 	ldbu	r3,0(r4)
    2ce8:	28800003 	ldbu	r2,0(r5)
    2cec:	18bff826 	beq	r3,r2,2cd0 <memcmp+0x20>
    2cf0:	1885c83a 	sub	r2,r3,r2
    2cf4:	f800283a 	ret
    2cf8:	0005883a 	mov	r2,zero
    2cfc:	f800283a 	ret
    2d00:	180f883a 	mov	r7,r3
    2d04:	20c00017 	ldw	r3,0(r4)
    2d08:	28800017 	ldw	r2,0(r5)
    2d0c:	18bfed1e 	bne	r3,r2,2cc4 <memcmp+0x14>
    2d10:	31bfff04 	addi	r6,r6,-4
    2d14:	21000104 	addi	r4,r4,4
    2d18:	29400104 	addi	r5,r5,4
    2d1c:	39bff936 	bltu	r7,r6,2d04 <memcmp+0x54>
    2d20:	003fe806 	br	2cc4 <memcmp+0x14>

00002d24 <memcpy>:
    2d24:	01c003c4 	movi	r7,15
    2d28:	2007883a 	mov	r3,r4
    2d2c:	3980032e 	bgeu	r7,r6,2d3c <memcpy+0x18>
    2d30:	2904b03a 	or	r2,r5,r4
    2d34:	108000cc 	andi	r2,r2,3
    2d38:	10000926 	beq	r2,zero,2d60 <memcpy+0x3c>
    2d3c:	30000626 	beq	r6,zero,2d58 <memcpy+0x34>
    2d40:	30cd883a 	add	r6,r6,r3
    2d44:	28800003 	ldbu	r2,0(r5)
    2d48:	29400044 	addi	r5,r5,1
    2d4c:	18800005 	stb	r2,0(r3)
    2d50:	18c00044 	addi	r3,r3,1
    2d54:	30fffb1e 	bne	r6,r3,2d44 <memcpy+0x20>
    2d58:	2005883a 	mov	r2,r4
    2d5c:	f800283a 	ret
    2d60:	3811883a 	mov	r8,r7
    2d64:	200f883a 	mov	r7,r4
    2d68:	28c00017 	ldw	r3,0(r5)
    2d6c:	31bffc04 	addi	r6,r6,-16
    2d70:	38c00015 	stw	r3,0(r7)
    2d74:	28800117 	ldw	r2,4(r5)
    2d78:	38800115 	stw	r2,4(r7)
    2d7c:	28c00217 	ldw	r3,8(r5)
    2d80:	38c00215 	stw	r3,8(r7)
    2d84:	28800317 	ldw	r2,12(r5)
    2d88:	29400404 	addi	r5,r5,16
    2d8c:	38800315 	stw	r2,12(r7)
    2d90:	39c00404 	addi	r7,r7,16
    2d94:	41bff436 	bltu	r8,r6,2d68 <memcpy+0x44>
    2d98:	008000c4 	movi	r2,3
    2d9c:	1180072e 	bgeu	r2,r6,2dbc <memcpy+0x98>
    2da0:	1007883a 	mov	r3,r2
    2da4:	28800017 	ldw	r2,0(r5)
    2da8:	31bfff04 	addi	r6,r6,-4
    2dac:	29400104 	addi	r5,r5,4
    2db0:	38800015 	stw	r2,0(r7)
    2db4:	39c00104 	addi	r7,r7,4
    2db8:	19bffa36 	bltu	r3,r6,2da4 <memcpy+0x80>
    2dbc:	3807883a 	mov	r3,r7
    2dc0:	003fde06 	br	2d3c <memcpy+0x18>

00002dc4 <putc>:
    2dc4:	defffc04 	addi	sp,sp,-16
    2dc8:	dc800215 	stw	r18,8(sp)
    2dcc:	04800034 	movhi	r18,0
    2dd0:	949c6104 	addi	r18,r18,29060
    2dd4:	90c00017 	ldw	r3,0(r18)
    2dd8:	dc400115 	stw	r17,4(sp)
    2ddc:	dc000015 	stw	r16,0(sp)
    2de0:	dfc00315 	stw	ra,12(sp)
    2de4:	2023883a 	mov	r17,r4
    2de8:	2821883a 	mov	r16,r5
    2dec:	18000226 	beq	r3,zero,2df8 <putc+0x34>
    2df0:	18800e17 	ldw	r2,56(r3)
    2df4:	10001126 	beq	r2,zero,2e3c <putc+0x78>
    2df8:	80800217 	ldw	r2,8(r16)
    2dfc:	10ffffc4 	addi	r3,r2,-1
    2e00:	80c00215 	stw	r3,8(r16)
    2e04:	18001316 	blt	r3,zero,2e54 <putc+0x90>
    2e08:	80800017 	ldw	r2,0(r16)
    2e0c:	14400005 	stb	r17,0(r2)
    2e10:	80c00017 	ldw	r3,0(r16)
    2e14:	18800044 	addi	r2,r3,1
    2e18:	18c00003 	ldbu	r3,0(r3)
    2e1c:	80800015 	stw	r2,0(r16)
    2e20:	1805883a 	mov	r2,r3
    2e24:	dfc00317 	ldw	ra,12(sp)
    2e28:	dc800217 	ldw	r18,8(sp)
    2e2c:	dc400117 	ldw	r17,4(sp)
    2e30:	dc000017 	ldw	r16,0(sp)
    2e34:	dec00404 	addi	sp,sp,16
    2e38:	f800283a 	ret
    2e3c:	1809883a 	mov	r4,r3
    2e40:	00037b40 	call	37b4 <__sinit>
    2e44:	80800217 	ldw	r2,8(r16)
    2e48:	10ffffc4 	addi	r3,r2,-1
    2e4c:	80c00215 	stw	r3,8(r16)
    2e50:	183fed0e 	bge	r3,zero,2e08 <putc+0x44>
    2e54:	80800617 	ldw	r2,24(r16)
    2e58:	18800f16 	blt	r3,r2,2e98 <putc+0xd4>
    2e5c:	80800017 	ldw	r2,0(r16)
    2e60:	14400005 	stb	r17,0(r2)
    2e64:	81000017 	ldw	r4,0(r16)
    2e68:	00800284 	movi	r2,10
    2e6c:	20c00003 	ldbu	r3,0(r4)
    2e70:	18801226 	beq	r3,r2,2ebc <putc+0xf8>
    2e74:	20800044 	addi	r2,r4,1
    2e78:	80800015 	stw	r2,0(r16)
    2e7c:	1805883a 	mov	r2,r3
    2e80:	dfc00317 	ldw	ra,12(sp)
    2e84:	dc800217 	ldw	r18,8(sp)
    2e88:	dc400117 	ldw	r17,4(sp)
    2e8c:	dc000017 	ldw	r16,0(sp)
    2e90:	dec00404 	addi	sp,sp,16
    2e94:	f800283a 	ret
    2e98:	91000017 	ldw	r4,0(r18)
    2e9c:	880b883a 	mov	r5,r17
    2ea0:	800d883a 	mov	r6,r16
    2ea4:	dfc00317 	ldw	ra,12(sp)
    2ea8:	dc800217 	ldw	r18,8(sp)
    2eac:	dc400117 	ldw	r17,4(sp)
    2eb0:	dc000017 	ldw	r16,0(sp)
    2eb4:	dec00404 	addi	sp,sp,16
    2eb8:	00030e01 	jmpi	30e0 <__swbuf_r>
    2ebc:	91000017 	ldw	r4,0(r18)
    2ec0:	180b883a 	mov	r5,r3
    2ec4:	003ff606 	br	2ea0 <putc+0xdc>

00002ec8 <_putc_r>:
    2ec8:	defffc04 	addi	sp,sp,-16
    2ecc:	dc400215 	stw	r17,8(sp)
    2ed0:	dc000115 	stw	r16,4(sp)
    2ed4:	dfc00315 	stw	ra,12(sp)
    2ed8:	2021883a 	mov	r16,r4
    2edc:	2823883a 	mov	r17,r5
    2ee0:	20000226 	beq	r4,zero,2eec <_putc_r+0x24>
    2ee4:	20800e17 	ldw	r2,56(r4)
    2ee8:	10001026 	beq	r2,zero,2f2c <_putc_r+0x64>
    2eec:	30800217 	ldw	r2,8(r6)
    2ef0:	10ffffc4 	addi	r3,r2,-1
    2ef4:	30c00215 	stw	r3,8(r6)
    2ef8:	18001316 	blt	r3,zero,2f48 <_putc_r+0x80>
    2efc:	30800017 	ldw	r2,0(r6)
    2f00:	14400005 	stb	r17,0(r2)
    2f04:	30c00017 	ldw	r3,0(r6)
    2f08:	18800044 	addi	r2,r3,1
    2f0c:	18c00003 	ldbu	r3,0(r3)
    2f10:	30800015 	stw	r2,0(r6)
    2f14:	1805883a 	mov	r2,r3
    2f18:	dfc00317 	ldw	ra,12(sp)
    2f1c:	dc400217 	ldw	r17,8(sp)
    2f20:	dc000117 	ldw	r16,4(sp)
    2f24:	dec00404 	addi	sp,sp,16
    2f28:	f800283a 	ret
    2f2c:	d9800015 	stw	r6,0(sp)
    2f30:	00037b40 	call	37b4 <__sinit>
    2f34:	d9800017 	ldw	r6,0(sp)
    2f38:	30800217 	ldw	r2,8(r6)
    2f3c:	10ffffc4 	addi	r3,r2,-1
    2f40:	30c00215 	stw	r3,8(r6)
    2f44:	183fed0e 	bge	r3,zero,2efc <_putc_r+0x34>
    2f48:	30800617 	ldw	r2,24(r6)
    2f4c:	18800e16 	blt	r3,r2,2f88 <_putc_r+0xc0>
    2f50:	30800017 	ldw	r2,0(r6)
    2f54:	14400005 	stb	r17,0(r2)
    2f58:	31000017 	ldw	r4,0(r6)
    2f5c:	00800284 	movi	r2,10
    2f60:	20c00003 	ldbu	r3,0(r4)
    2f64:	18800f26 	beq	r3,r2,2fa4 <_putc_r+0xdc>
    2f68:	20800044 	addi	r2,r4,1
    2f6c:	30800015 	stw	r2,0(r6)
    2f70:	1805883a 	mov	r2,r3
    2f74:	dfc00317 	ldw	ra,12(sp)
    2f78:	dc400217 	ldw	r17,8(sp)
    2f7c:	dc000117 	ldw	r16,4(sp)
    2f80:	dec00404 	addi	sp,sp,16
    2f84:	f800283a 	ret
    2f88:	8009883a 	mov	r4,r16
    2f8c:	880b883a 	mov	r5,r17
    2f90:	dfc00317 	ldw	ra,12(sp)
    2f94:	dc400217 	ldw	r17,8(sp)
    2f98:	dc000117 	ldw	r16,4(sp)
    2f9c:	dec00404 	addi	sp,sp,16
    2fa0:	00030e01 	jmpi	30e0 <__swbuf_r>
    2fa4:	8009883a 	mov	r4,r16
    2fa8:	180b883a 	mov	r5,r3
    2fac:	003ff806 	br	2f90 <_putc_r+0xc8>

00002fb0 <strcmp>:
    2fb0:	2144b03a 	or	r2,r4,r5
    2fb4:	108000cc 	andi	r2,r2,3
    2fb8:	10001d1e 	bne	r2,zero,3030 <strcmp+0x80>
    2fbc:	200f883a 	mov	r7,r4
    2fc0:	28800017 	ldw	r2,0(r5)
    2fc4:	21000017 	ldw	r4,0(r4)
    2fc8:	280d883a 	mov	r6,r5
    2fcc:	2080161e 	bne	r4,r2,3028 <strcmp+0x78>
    2fd0:	023fbff4 	movhi	r8,65279
    2fd4:	423fbfc4 	addi	r8,r8,-257
    2fd8:	2207883a 	add	r3,r4,r8
    2fdc:	01602074 	movhi	r5,32897
    2fe0:	29602004 	addi	r5,r5,-32640
    2fe4:	1946703a 	and	r3,r3,r5
    2fe8:	0104303a 	nor	r2,zero,r4
    2fec:	10c4703a 	and	r2,r2,r3
    2ff0:	10001c1e 	bne	r2,zero,3064 <strcmp+0xb4>
    2ff4:	4013883a 	mov	r9,r8
    2ff8:	2811883a 	mov	r8,r5
    2ffc:	00000106 	br	3004 <strcmp+0x54>
    3000:	1800181e 	bne	r3,zero,3064 <strcmp+0xb4>
    3004:	39c00104 	addi	r7,r7,4
    3008:	39000017 	ldw	r4,0(r7)
    300c:	31800104 	addi	r6,r6,4
    3010:	31400017 	ldw	r5,0(r6)
    3014:	2245883a 	add	r2,r4,r9
    3018:	1204703a 	and	r2,r2,r8
    301c:	0106303a 	nor	r3,zero,r4
    3020:	1886703a 	and	r3,r3,r2
    3024:	217ff626 	beq	r4,r5,3000 <strcmp+0x50>
    3028:	3809883a 	mov	r4,r7
    302c:	300b883a 	mov	r5,r6
    3030:	20c00007 	ldb	r3,0(r4)
    3034:	1800051e 	bne	r3,zero,304c <strcmp+0x9c>
    3038:	00000606 	br	3054 <strcmp+0xa4>
    303c:	21000044 	addi	r4,r4,1
    3040:	20c00007 	ldb	r3,0(r4)
    3044:	29400044 	addi	r5,r5,1
    3048:	18000226 	beq	r3,zero,3054 <strcmp+0xa4>
    304c:	28800007 	ldb	r2,0(r5)
    3050:	18bffa26 	beq	r3,r2,303c <strcmp+0x8c>
    3054:	20c00003 	ldbu	r3,0(r4)
    3058:	28800003 	ldbu	r2,0(r5)
    305c:	1885c83a 	sub	r2,r3,r2
    3060:	f800283a 	ret
    3064:	0005883a 	mov	r2,zero
    3068:	f800283a 	ret

0000306c <strlen>:
    306c:	208000cc 	andi	r2,r4,3
    3070:	2011883a 	mov	r8,r4
    3074:	1000161e 	bne	r2,zero,30d0 <strlen+0x64>
    3078:	20c00017 	ldw	r3,0(r4)
    307c:	017fbff4 	movhi	r5,65279
    3080:	297fbfc4 	addi	r5,r5,-257
    3084:	01e02074 	movhi	r7,32897
    3088:	39e02004 	addi	r7,r7,-32640
    308c:	1945883a 	add	r2,r3,r5
    3090:	11c4703a 	and	r2,r2,r7
    3094:	00c6303a 	nor	r3,zero,r3
    3098:	1886703a 	and	r3,r3,r2
    309c:	18000c1e 	bne	r3,zero,30d0 <strlen+0x64>
    30a0:	280d883a 	mov	r6,r5
    30a4:	380b883a 	mov	r5,r7
    30a8:	21000104 	addi	r4,r4,4
    30ac:	20800017 	ldw	r2,0(r4)
    30b0:	1187883a 	add	r3,r2,r6
    30b4:	1946703a 	and	r3,r3,r5
    30b8:	0084303a 	nor	r2,zero,r2
    30bc:	10c4703a 	and	r2,r2,r3
    30c0:	103ff926 	beq	r2,zero,30a8 <strlen+0x3c>
    30c4:	20800007 	ldb	r2,0(r4)
    30c8:	10000326 	beq	r2,zero,30d8 <strlen+0x6c>
    30cc:	21000044 	addi	r4,r4,1
    30d0:	20800007 	ldb	r2,0(r4)
    30d4:	103ffd1e 	bne	r2,zero,30cc <strlen+0x60>
    30d8:	2205c83a 	sub	r2,r4,r8
    30dc:	f800283a 	ret

000030e0 <__swbuf_r>:
    30e0:	defffc04 	addi	sp,sp,-16
    30e4:	dc400215 	stw	r17,8(sp)
    30e8:	dc000115 	stw	r16,4(sp)
    30ec:	dfc00315 	stw	ra,12(sp)
    30f0:	2023883a 	mov	r17,r4
    30f4:	2821883a 	mov	r16,r5
    30f8:	20000226 	beq	r4,zero,3104 <__swbuf_r+0x24>
    30fc:	20800e17 	ldw	r2,56(r4)
    3100:	10002f26 	beq	r2,zero,31c0 <__swbuf_r+0xe0>
    3104:	3080030b 	ldhu	r2,12(r6)
    3108:	30c00617 	ldw	r3,24(r6)
    310c:	1080020c 	andi	r2,r2,8
    3110:	30c00215 	stw	r3,8(r6)
    3114:	10002226 	beq	r2,zero,31a0 <__swbuf_r+0xc0>
    3118:	30c00417 	ldw	r3,16(r6)
    311c:	18002026 	beq	r3,zero,31a0 <__swbuf_r+0xc0>
    3120:	31000017 	ldw	r4,0(r6)
    3124:	30800517 	ldw	r2,20(r6)
    3128:	20c7c83a 	sub	r3,r4,r3
    312c:	18802f0e 	bge	r3,r2,31ec <__swbuf_r+0x10c>
    3130:	19400044 	addi	r5,r3,1
    3134:	30800217 	ldw	r2,8(r6)
    3138:	84003fcc 	andi	r16,r16,255
    313c:	20c00044 	addi	r3,r4,1
    3140:	10bfffc4 	addi	r2,r2,-1
    3144:	30800215 	stw	r2,8(r6)
    3148:	24000005 	stb	r16,0(r4)
    314c:	30800517 	ldw	r2,20(r6)
    3150:	30c00015 	stw	r3,0(r6)
    3154:	11400c26 	beq	r2,r5,3188 <__swbuf_r+0xa8>
    3158:	3080030b 	ldhu	r2,12(r6)
    315c:	1080004c 	andi	r2,r2,1
    3160:	1005003a 	cmpeq	r2,r2,zero
    3164:	10000626 	beq	r2,zero,3180 <__swbuf_r+0xa0>
    3168:	8005883a 	mov	r2,r16
    316c:	dfc00317 	ldw	ra,12(sp)
    3170:	dc400217 	ldw	r17,8(sp)
    3174:	dc000117 	ldw	r16,4(sp)
    3178:	dec00404 	addi	sp,sp,16
    317c:	f800283a 	ret
    3180:	00800284 	movi	r2,10
    3184:	80bff81e 	bne	r16,r2,3168 <__swbuf_r+0x88>
    3188:	8809883a 	mov	r4,r17
    318c:	300b883a 	mov	r5,r6
    3190:	000351c0 	call	351c <_fflush_r>
    3194:	103ff426 	beq	r2,zero,3168 <__swbuf_r+0x88>
    3198:	043fffc4 	movi	r16,-1
    319c:	003ff206 	br	3168 <__swbuf_r+0x88>
    31a0:	300b883a 	mov	r5,r6
    31a4:	8809883a 	mov	r4,r17
    31a8:	d9800015 	stw	r6,0(sp)
    31ac:	000322c0 	call	322c <__swsetup_r>
    31b0:	d9800017 	ldw	r6,0(sp)
    31b4:	1000061e 	bne	r2,zero,31d0 <__swbuf_r+0xf0>
    31b8:	30c00417 	ldw	r3,16(r6)
    31bc:	003fd806 	br	3120 <__swbuf_r+0x40>
    31c0:	d9800015 	stw	r6,0(sp)
    31c4:	00037b40 	call	37b4 <__sinit>
    31c8:	d9800017 	ldw	r6,0(sp)
    31cc:	003fcd06 	br	3104 <__swbuf_r+0x24>
    31d0:	3080030b 	ldhu	r2,12(r6)
    31d4:	00c00244 	movi	r3,9
    31d8:	043fffc4 	movi	r16,-1
    31dc:	10801014 	ori	r2,r2,64
    31e0:	3080030d 	sth	r2,12(r6)
    31e4:	88c00015 	stw	r3,0(r17)
    31e8:	003fdf06 	br	3168 <__swbuf_r+0x88>
    31ec:	300b883a 	mov	r5,r6
    31f0:	8809883a 	mov	r4,r17
    31f4:	d9800015 	stw	r6,0(sp)
    31f8:	000351c0 	call	351c <_fflush_r>
    31fc:	d9800017 	ldw	r6,0(sp)
    3200:	103fe51e 	bne	r2,zero,3198 <__swbuf_r+0xb8>
    3204:	31000017 	ldw	r4,0(r6)
    3208:	01400044 	movi	r5,1
    320c:	003fc906 	br	3134 <__swbuf_r+0x54>

00003210 <__swbuf>:
    3210:	01800034 	movhi	r6,0
    3214:	319c6104 	addi	r6,r6,29060
    3218:	2007883a 	mov	r3,r4
    321c:	31000017 	ldw	r4,0(r6)
    3220:	280d883a 	mov	r6,r5
    3224:	180b883a 	mov	r5,r3
    3228:	00030e01 	jmpi	30e0 <__swbuf_r>

0000322c <__swsetup_r>:
    322c:	00800034 	movhi	r2,0
    3230:	109c6104 	addi	r2,r2,29060
    3234:	10c00017 	ldw	r3,0(r2)
    3238:	defffd04 	addi	sp,sp,-12
    323c:	dc400115 	stw	r17,4(sp)
    3240:	dc000015 	stw	r16,0(sp)
    3244:	dfc00215 	stw	ra,8(sp)
    3248:	2023883a 	mov	r17,r4
    324c:	2821883a 	mov	r16,r5
    3250:	18000226 	beq	r3,zero,325c <__swsetup_r+0x30>
    3254:	18800e17 	ldw	r2,56(r3)
    3258:	10001f26 	beq	r2,zero,32d8 <__swsetup_r+0xac>
    325c:	8100030b 	ldhu	r4,12(r16)
    3260:	2080020c 	andi	r2,r4,8
    3264:	10002826 	beq	r2,zero,3308 <__swsetup_r+0xdc>
    3268:	81400417 	ldw	r5,16(r16)
    326c:	28001d26 	beq	r5,zero,32e4 <__swsetup_r+0xb8>
    3270:	2080004c 	andi	r2,r4,1
    3274:	1005003a 	cmpeq	r2,r2,zero
    3278:	10000b26 	beq	r2,zero,32a8 <__swsetup_r+0x7c>
    327c:	2080008c 	andi	r2,r4,2
    3280:	10001226 	beq	r2,zero,32cc <__swsetup_r+0xa0>
    3284:	0005883a 	mov	r2,zero
    3288:	80800215 	stw	r2,8(r16)
    328c:	28000b26 	beq	r5,zero,32bc <__swsetup_r+0x90>
    3290:	0005883a 	mov	r2,zero
    3294:	dfc00217 	ldw	ra,8(sp)
    3298:	dc400117 	ldw	r17,4(sp)
    329c:	dc000017 	ldw	r16,0(sp)
    32a0:	dec00304 	addi	sp,sp,12
    32a4:	f800283a 	ret
    32a8:	80800517 	ldw	r2,20(r16)
    32ac:	80000215 	stw	zero,8(r16)
    32b0:	0085c83a 	sub	r2,zero,r2
    32b4:	80800615 	stw	r2,24(r16)
    32b8:	283ff51e 	bne	r5,zero,3290 <__swsetup_r+0x64>
    32bc:	2080200c 	andi	r2,r4,128
    32c0:	103ff326 	beq	r2,zero,3290 <__swsetup_r+0x64>
    32c4:	00bfffc4 	movi	r2,-1
    32c8:	003ff206 	br	3294 <__swsetup_r+0x68>
    32cc:	80800517 	ldw	r2,20(r16)
    32d0:	80800215 	stw	r2,8(r16)
    32d4:	003fed06 	br	328c <__swsetup_r+0x60>
    32d8:	1809883a 	mov	r4,r3
    32dc:	00037b40 	call	37b4 <__sinit>
    32e0:	003fde06 	br	325c <__swsetup_r+0x30>
    32e4:	20c0a00c 	andi	r3,r4,640
    32e8:	00808004 	movi	r2,512
    32ec:	18bfe026 	beq	r3,r2,3270 <__swsetup_r+0x44>
    32f0:	8809883a 	mov	r4,r17
    32f4:	800b883a 	mov	r5,r16
    32f8:	0003fcc0 	call	3fcc <__smakebuf_r>
    32fc:	8100030b 	ldhu	r4,12(r16)
    3300:	81400417 	ldw	r5,16(r16)
    3304:	003fda06 	br	3270 <__swsetup_r+0x44>
    3308:	2080040c 	andi	r2,r4,16
    330c:	103fed26 	beq	r2,zero,32c4 <__swsetup_r+0x98>
    3310:	2080010c 	andi	r2,r4,4
    3314:	10001226 	beq	r2,zero,3360 <__swsetup_r+0x134>
    3318:	81400c17 	ldw	r5,48(r16)
    331c:	28000526 	beq	r5,zero,3334 <__swsetup_r+0x108>
    3320:	80801004 	addi	r2,r16,64
    3324:	28800226 	beq	r5,r2,3330 <__swsetup_r+0x104>
    3328:	8809883a 	mov	r4,r17
    332c:	0003b380 	call	3b38 <_free_r>
    3330:	80000c15 	stw	zero,48(r16)
    3334:	8080030b 	ldhu	r2,12(r16)
    3338:	81400417 	ldw	r5,16(r16)
    333c:	80000115 	stw	zero,4(r16)
    3340:	10bff6cc 	andi	r2,r2,65499
    3344:	8080030d 	sth	r2,12(r16)
    3348:	81400015 	stw	r5,0(r16)
    334c:	8080030b 	ldhu	r2,12(r16)
    3350:	10800214 	ori	r2,r2,8
    3354:	113fffcc 	andi	r4,r2,65535
    3358:	8080030d 	sth	r2,12(r16)
    335c:	003fc306 	br	326c <__swsetup_r+0x40>
    3360:	81400417 	ldw	r5,16(r16)
    3364:	003ff906 	br	334c <__swsetup_r+0x120>

00003368 <register_fini>:
    3368:	f800283a 	ret

0000336c <__call_exitprocs>:
    336c:	00800034 	movhi	r2,0
    3370:	109c6204 	addi	r2,r2,29064
    3374:	10800017 	ldw	r2,0(r2)
    3378:	defff304 	addi	sp,sp,-52
    337c:	df000b15 	stw	fp,44(sp)
    3380:	d8800115 	stw	r2,4(sp)
    3384:	00800034 	movhi	r2,0
    3388:	10800004 	addi	r2,r2,0
    338c:	1005003a 	cmpeq	r2,r2,zero
    3390:	d8800215 	stw	r2,8(sp)
    3394:	d8800117 	ldw	r2,4(sp)
    3398:	dd400815 	stw	r21,32(sp)
    339c:	dd000715 	stw	r20,28(sp)
    33a0:	10805204 	addi	r2,r2,328
    33a4:	dfc00c15 	stw	ra,48(sp)
    33a8:	ddc00a15 	stw	r23,40(sp)
    33ac:	dd800915 	stw	r22,36(sp)
    33b0:	dcc00615 	stw	r19,24(sp)
    33b4:	dc800515 	stw	r18,20(sp)
    33b8:	dc400415 	stw	r17,16(sp)
    33bc:	dc000315 	stw	r16,12(sp)
    33c0:	282b883a 	mov	r21,r5
    33c4:	2039883a 	mov	fp,r4
    33c8:	d8800015 	stw	r2,0(sp)
    33cc:	2829003a 	cmpeq	r20,r5,zero
    33d0:	d8800117 	ldw	r2,4(sp)
    33d4:	14405217 	ldw	r17,328(r2)
    33d8:	88001026 	beq	r17,zero,341c <__call_exitprocs+0xb0>
    33dc:	ddc00017 	ldw	r23,0(sp)
    33e0:	88800117 	ldw	r2,4(r17)
    33e4:	8c802204 	addi	r18,r17,136
    33e8:	143fffc4 	addi	r16,r2,-1
    33ec:	80000916 	blt	r16,zero,3414 <__call_exitprocs+0xa8>
    33f0:	05bfffc4 	movi	r22,-1
    33f4:	a000151e 	bne	r20,zero,344c <__call_exitprocs+0xe0>
    33f8:	8409883a 	add	r4,r16,r16
    33fc:	2105883a 	add	r2,r4,r4
    3400:	1485883a 	add	r2,r2,r18
    3404:	10c02017 	ldw	r3,128(r2)
    3408:	a8c01126 	beq	r21,r3,3450 <__call_exitprocs+0xe4>
    340c:	843fffc4 	addi	r16,r16,-1
    3410:	85bff81e 	bne	r16,r22,33f4 <__call_exitprocs+0x88>
    3414:	d8800217 	ldw	r2,8(sp)
    3418:	10003126 	beq	r2,zero,34e0 <__call_exitprocs+0x174>
    341c:	dfc00c17 	ldw	ra,48(sp)
    3420:	df000b17 	ldw	fp,44(sp)
    3424:	ddc00a17 	ldw	r23,40(sp)
    3428:	dd800917 	ldw	r22,36(sp)
    342c:	dd400817 	ldw	r21,32(sp)
    3430:	dd000717 	ldw	r20,28(sp)
    3434:	dcc00617 	ldw	r19,24(sp)
    3438:	dc800517 	ldw	r18,20(sp)
    343c:	dc400417 	ldw	r17,16(sp)
    3440:	dc000317 	ldw	r16,12(sp)
    3444:	dec00d04 	addi	sp,sp,52
    3448:	f800283a 	ret
    344c:	8409883a 	add	r4,r16,r16
    3450:	88c00117 	ldw	r3,4(r17)
    3454:	2105883a 	add	r2,r4,r4
    3458:	1445883a 	add	r2,r2,r17
    345c:	18ffffc4 	addi	r3,r3,-1
    3460:	11800217 	ldw	r6,8(r2)
    3464:	1c001526 	beq	r3,r16,34bc <__call_exitprocs+0x150>
    3468:	10000215 	stw	zero,8(r2)
    346c:	303fe726 	beq	r6,zero,340c <__call_exitprocs+0xa0>
    3470:	00c00044 	movi	r3,1
    3474:	1c06983a 	sll	r3,r3,r16
    3478:	90804017 	ldw	r2,256(r18)
    347c:	8cc00117 	ldw	r19,4(r17)
    3480:	1884703a 	and	r2,r3,r2
    3484:	10001426 	beq	r2,zero,34d8 <__call_exitprocs+0x16c>
    3488:	90804117 	ldw	r2,260(r18)
    348c:	1884703a 	and	r2,r3,r2
    3490:	10000c1e 	bne	r2,zero,34c4 <__call_exitprocs+0x158>
    3494:	2105883a 	add	r2,r4,r4
    3498:	1485883a 	add	r2,r2,r18
    349c:	11400017 	ldw	r5,0(r2)
    34a0:	e009883a 	mov	r4,fp
    34a4:	303ee83a 	callr	r6
    34a8:	88800117 	ldw	r2,4(r17)
    34ac:	98bfc81e 	bne	r19,r2,33d0 <__call_exitprocs+0x64>
    34b0:	b8800017 	ldw	r2,0(r23)
    34b4:	147fd526 	beq	r2,r17,340c <__call_exitprocs+0xa0>
    34b8:	003fc506 	br	33d0 <__call_exitprocs+0x64>
    34bc:	8c000115 	stw	r16,4(r17)
    34c0:	003fea06 	br	346c <__call_exitprocs+0x100>
    34c4:	2105883a 	add	r2,r4,r4
    34c8:	1485883a 	add	r2,r2,r18
    34cc:	11000017 	ldw	r4,0(r2)
    34d0:	303ee83a 	callr	r6
    34d4:	003ff406 	br	34a8 <__call_exitprocs+0x13c>
    34d8:	303ee83a 	callr	r6
    34dc:	003ff206 	br	34a8 <__call_exitprocs+0x13c>
    34e0:	88800117 	ldw	r2,4(r17)
    34e4:	1000081e 	bne	r2,zero,3508 <__call_exitprocs+0x19c>
    34e8:	89000017 	ldw	r4,0(r17)
    34ec:	20000726 	beq	r4,zero,350c <__call_exitprocs+0x1a0>
    34f0:	b9000015 	stw	r4,0(r23)
    34f4:	8809883a 	mov	r4,r17
    34f8:	00000000 	call	0 <__reset>
    34fc:	bc400017 	ldw	r17,0(r23)
    3500:	883fb71e 	bne	r17,zero,33e0 <__call_exitprocs+0x74>
    3504:	003fc506 	br	341c <__call_exitprocs+0xb0>
    3508:	89000017 	ldw	r4,0(r17)
    350c:	882f883a 	mov	r23,r17
    3510:	2023883a 	mov	r17,r4
    3514:	883fb21e 	bne	r17,zero,33e0 <__call_exitprocs+0x74>
    3518:	003fc006 	br	341c <__call_exitprocs+0xb0>

0000351c <_fflush_r>:
    351c:	defffb04 	addi	sp,sp,-20
    3520:	dcc00315 	stw	r19,12(sp)
    3524:	dc800215 	stw	r18,8(sp)
    3528:	dfc00415 	stw	ra,16(sp)
    352c:	dc400115 	stw	r17,4(sp)
    3530:	dc000015 	stw	r16,0(sp)
    3534:	2027883a 	mov	r19,r4
    3538:	2825883a 	mov	r18,r5
    353c:	20000226 	beq	r4,zero,3548 <_fflush_r+0x2c>
    3540:	20800e17 	ldw	r2,56(r4)
    3544:	10005626 	beq	r2,zero,36a0 <_fflush_r+0x184>
    3548:	9100030b 	ldhu	r4,12(r18)
    354c:	20ffffcc 	andi	r3,r4,65535
    3550:	18e0001c 	xori	r3,r3,32768
    3554:	18e00004 	addi	r3,r3,-32768
    3558:	1880020c 	andi	r2,r3,8
    355c:	1000261e 	bne	r2,zero,35f8 <_fflush_r+0xdc>
    3560:	90c00117 	ldw	r3,4(r18)
    3564:	20820014 	ori	r2,r4,2048
    3568:	9080030d 	sth	r2,12(r18)
    356c:	1009883a 	mov	r4,r2
    3570:	00c0400e 	bge	zero,r3,3674 <_fflush_r+0x158>
    3574:	92000a17 	ldw	r8,40(r18)
    3578:	40004026 	beq	r8,zero,367c <_fflush_r+0x160>
    357c:	2084000c 	andi	r2,r4,4096
    3580:	10005326 	beq	r2,zero,36d0 <_fflush_r+0x1b4>
    3584:	94001417 	ldw	r16,80(r18)
    3588:	9080030b 	ldhu	r2,12(r18)
    358c:	1080010c 	andi	r2,r2,4
    3590:	1000481e 	bne	r2,zero,36b4 <_fflush_r+0x198>
    3594:	91400717 	ldw	r5,28(r18)
    3598:	9809883a 	mov	r4,r19
    359c:	800d883a 	mov	r6,r16
    35a0:	000f883a 	mov	r7,zero
    35a4:	403ee83a 	callr	r8
    35a8:	8080261e 	bne	r16,r2,3644 <_fflush_r+0x128>
    35ac:	9080030b 	ldhu	r2,12(r18)
    35b0:	91000417 	ldw	r4,16(r18)
    35b4:	90000115 	stw	zero,4(r18)
    35b8:	10bdffcc 	andi	r2,r2,63487
    35bc:	10ffffcc 	andi	r3,r2,65535
    35c0:	18c4000c 	andi	r3,r3,4096
    35c4:	9080030d 	sth	r2,12(r18)
    35c8:	91000015 	stw	r4,0(r18)
    35cc:	18002b26 	beq	r3,zero,367c <_fflush_r+0x160>
    35d0:	0007883a 	mov	r3,zero
    35d4:	1805883a 	mov	r2,r3
    35d8:	94001415 	stw	r16,80(r18)
    35dc:	dfc00417 	ldw	ra,16(sp)
    35e0:	dcc00317 	ldw	r19,12(sp)
    35e4:	dc800217 	ldw	r18,8(sp)
    35e8:	dc400117 	ldw	r17,4(sp)
    35ec:	dc000017 	ldw	r16,0(sp)
    35f0:	dec00504 	addi	sp,sp,20
    35f4:	f800283a 	ret
    35f8:	94400417 	ldw	r17,16(r18)
    35fc:	88001f26 	beq	r17,zero,367c <_fflush_r+0x160>
    3600:	90800017 	ldw	r2,0(r18)
    3604:	18c000cc 	andi	r3,r3,3
    3608:	94400015 	stw	r17,0(r18)
    360c:	1461c83a 	sub	r16,r2,r17
    3610:	18002526 	beq	r3,zero,36a8 <_fflush_r+0x18c>
    3614:	0005883a 	mov	r2,zero
    3618:	90800215 	stw	r2,8(r18)
    361c:	0400170e 	bge	zero,r16,367c <_fflush_r+0x160>
    3620:	90c00917 	ldw	r3,36(r18)
    3624:	91400717 	ldw	r5,28(r18)
    3628:	880d883a 	mov	r6,r17
    362c:	800f883a 	mov	r7,r16
    3630:	9809883a 	mov	r4,r19
    3634:	183ee83a 	callr	r3
    3638:	88a3883a 	add	r17,r17,r2
    363c:	80a1c83a 	sub	r16,r16,r2
    3640:	00bff616 	blt	zero,r2,361c <_fflush_r+0x100>
    3644:	9080030b 	ldhu	r2,12(r18)
    3648:	00ffffc4 	movi	r3,-1
    364c:	10801014 	ori	r2,r2,64
    3650:	9080030d 	sth	r2,12(r18)
    3654:	1805883a 	mov	r2,r3
    3658:	dfc00417 	ldw	ra,16(sp)
    365c:	dcc00317 	ldw	r19,12(sp)
    3660:	dc800217 	ldw	r18,8(sp)
    3664:	dc400117 	ldw	r17,4(sp)
    3668:	dc000017 	ldw	r16,0(sp)
    366c:	dec00504 	addi	sp,sp,20
    3670:	f800283a 	ret
    3674:	90800f17 	ldw	r2,60(r18)
    3678:	00bfbe16 	blt	zero,r2,3574 <_fflush_r+0x58>
    367c:	0007883a 	mov	r3,zero
    3680:	1805883a 	mov	r2,r3
    3684:	dfc00417 	ldw	ra,16(sp)
    3688:	dcc00317 	ldw	r19,12(sp)
    368c:	dc800217 	ldw	r18,8(sp)
    3690:	dc400117 	ldw	r17,4(sp)
    3694:	dc000017 	ldw	r16,0(sp)
    3698:	dec00504 	addi	sp,sp,20
    369c:	f800283a 	ret
    36a0:	00037b40 	call	37b4 <__sinit>
    36a4:	003fa806 	br	3548 <_fflush_r+0x2c>
    36a8:	90800517 	ldw	r2,20(r18)
    36ac:	90800215 	stw	r2,8(r18)
    36b0:	003fda06 	br	361c <_fflush_r+0x100>
    36b4:	90800117 	ldw	r2,4(r18)
    36b8:	90c00c17 	ldw	r3,48(r18)
    36bc:	80a1c83a 	sub	r16,r16,r2
    36c0:	183fb426 	beq	r3,zero,3594 <_fflush_r+0x78>
    36c4:	90800f17 	ldw	r2,60(r18)
    36c8:	80a1c83a 	sub	r16,r16,r2
    36cc:	003fb106 	br	3594 <_fflush_r+0x78>
    36d0:	91400717 	ldw	r5,28(r18)
    36d4:	9809883a 	mov	r4,r19
    36d8:	000d883a 	mov	r6,zero
    36dc:	01c00044 	movi	r7,1
    36e0:	403ee83a 	callr	r8
    36e4:	1021883a 	mov	r16,r2
    36e8:	00bfffc4 	movi	r2,-1
    36ec:	80800226 	beq	r16,r2,36f8 <_fflush_r+0x1dc>
    36f0:	92000a17 	ldw	r8,40(r18)
    36f4:	003fa406 	br	3588 <_fflush_r+0x6c>
    36f8:	98c00017 	ldw	r3,0(r19)
    36fc:	00800744 	movi	r2,29
    3700:	18bfde26 	beq	r3,r2,367c <_fflush_r+0x160>
    3704:	9080030b 	ldhu	r2,12(r18)
    3708:	8007883a 	mov	r3,r16
    370c:	10801014 	ori	r2,r2,64
    3710:	9080030d 	sth	r2,12(r18)
    3714:	003fcf06 	br	3654 <_fflush_r+0x138>

00003718 <fflush>:
    3718:	01400034 	movhi	r5,0
    371c:	294d4704 	addi	r5,r5,13596
    3720:	2007883a 	mov	r3,r4
    3724:	20000526 	beq	r4,zero,373c <fflush+0x24>
    3728:	00800034 	movhi	r2,0
    372c:	109c6104 	addi	r2,r2,29060
    3730:	11000017 	ldw	r4,0(r2)
    3734:	180b883a 	mov	r5,r3
    3738:	000351c1 	jmpi	351c <_fflush_r>
    373c:	00800034 	movhi	r2,0
    3740:	109c6204 	addi	r2,r2,29064
    3744:	11000017 	ldw	r4,0(r2)
    3748:	0003e4c1 	jmpi	3e4c <_fwalk_reent>

0000374c <std>:
    374c:	00800034 	movhi	r2,0
    3750:	10926a04 	addi	r2,r2,18856
    3754:	20800b15 	stw	r2,44(r4)
    3758:	00800034 	movhi	r2,0
    375c:	1092a504 	addi	r2,r2,19092
    3760:	20800815 	stw	r2,32(r4)
    3764:	00c00034 	movhi	r3,0
    3768:	18d28604 	addi	r3,r3,18968
    376c:	00800034 	movhi	r2,0
    3770:	10926c04 	addi	r2,r2,18864
    3774:	2140030d 	sth	r5,12(r4)
    3778:	2180038d 	sth	r6,14(r4)
    377c:	20c00915 	stw	r3,36(r4)
    3780:	20800a15 	stw	r2,40(r4)
    3784:	20000015 	stw	zero,0(r4)
    3788:	20000115 	stw	zero,4(r4)
    378c:	20000215 	stw	zero,8(r4)
    3790:	20000415 	stw	zero,16(r4)
    3794:	20000515 	stw	zero,20(r4)
    3798:	20000615 	stw	zero,24(r4)
    379c:	21000715 	stw	r4,28(r4)
    37a0:	f800283a 	ret

000037a4 <__sfp_lock_acquire>:
    37a4:	f800283a 	ret

000037a8 <__sfp_lock_release>:
    37a8:	f800283a 	ret

000037ac <__sinit_lock_acquire>:
    37ac:	f800283a 	ret

000037b0 <__sinit_lock_release>:
    37b0:	f800283a 	ret

000037b4 <__sinit>:
    37b4:	20800e17 	ldw	r2,56(r4)
    37b8:	defffd04 	addi	sp,sp,-12
    37bc:	dc400115 	stw	r17,4(sp)
    37c0:	dc000015 	stw	r16,0(sp)
    37c4:	dfc00215 	stw	ra,8(sp)
    37c8:	04400044 	movi	r17,1
    37cc:	01400104 	movi	r5,4
    37d0:	000d883a 	mov	r6,zero
    37d4:	2021883a 	mov	r16,r4
    37d8:	2200bb04 	addi	r8,r4,748
    37dc:	200f883a 	mov	r7,r4
    37e0:	10000526 	beq	r2,zero,37f8 <__sinit+0x44>
    37e4:	dfc00217 	ldw	ra,8(sp)
    37e8:	dc400117 	ldw	r17,4(sp)
    37ec:	dc000017 	ldw	r16,0(sp)
    37f0:	dec00304 	addi	sp,sp,12
    37f4:	f800283a 	ret
    37f8:	21000117 	ldw	r4,4(r4)
    37fc:	00800034 	movhi	r2,0
    3800:	108e2604 	addi	r2,r2,14488
    3804:	00c000c4 	movi	r3,3
    3808:	80800f15 	stw	r2,60(r16)
    380c:	80c0b915 	stw	r3,740(r16)
    3810:	8200ba15 	stw	r8,744(r16)
    3814:	84400e15 	stw	r17,56(r16)
    3818:	8000b815 	stw	zero,736(r16)
    381c:	000374c0 	call	374c <std>
    3820:	81000217 	ldw	r4,8(r16)
    3824:	880d883a 	mov	r6,r17
    3828:	800f883a 	mov	r7,r16
    382c:	01400284 	movi	r5,10
    3830:	000374c0 	call	374c <std>
    3834:	81000317 	ldw	r4,12(r16)
    3838:	800f883a 	mov	r7,r16
    383c:	01400484 	movi	r5,18
    3840:	01800084 	movi	r6,2
    3844:	dfc00217 	ldw	ra,8(sp)
    3848:	dc400117 	ldw	r17,4(sp)
    384c:	dc000017 	ldw	r16,0(sp)
    3850:	dec00304 	addi	sp,sp,12
    3854:	000374c1 	jmpi	374c <std>

00003858 <__fp_lock>:
    3858:	0005883a 	mov	r2,zero
    385c:	f800283a 	ret

00003860 <__fp_unlock>:
    3860:	0005883a 	mov	r2,zero
    3864:	f800283a 	ret

00003868 <__fp_unlock_all>:
    3868:	00800034 	movhi	r2,0
    386c:	109c6104 	addi	r2,r2,29060
    3870:	11000017 	ldw	r4,0(r2)
    3874:	01400034 	movhi	r5,0
    3878:	294e1804 	addi	r5,r5,14432
    387c:	0003f141 	jmpi	3f14 <_fwalk>

00003880 <__fp_lock_all>:
    3880:	00800034 	movhi	r2,0
    3884:	109c6104 	addi	r2,r2,29060
    3888:	11000017 	ldw	r4,0(r2)
    388c:	01400034 	movhi	r5,0
    3890:	294e1604 	addi	r5,r5,14424
    3894:	0003f141 	jmpi	3f14 <_fwalk>

00003898 <_cleanup_r>:
    3898:	01400034 	movhi	r5,0
    389c:	29533b04 	addi	r5,r5,19692
    38a0:	0003f141 	jmpi	3f14 <_fwalk>

000038a4 <_cleanup>:
    38a4:	00800034 	movhi	r2,0
    38a8:	109c6204 	addi	r2,r2,29064
    38ac:	11000017 	ldw	r4,0(r2)
    38b0:	00038981 	jmpi	3898 <_cleanup_r>

000038b4 <__sfmoreglue>:
    38b4:	defffc04 	addi	sp,sp,-16
    38b8:	dc400115 	stw	r17,4(sp)
    38bc:	2c401724 	muli	r17,r5,92
    38c0:	dc800215 	stw	r18,8(sp)
    38c4:	2825883a 	mov	r18,r5
    38c8:	89400304 	addi	r5,r17,12
    38cc:	dc000015 	stw	r16,0(sp)
    38d0:	dfc00315 	stw	ra,12(sp)
    38d4:	00041600 	call	4160 <_malloc_r>
    38d8:	0021883a 	mov	r16,zero
    38dc:	880d883a 	mov	r6,r17
    38e0:	000b883a 	mov	r5,zero
    38e4:	10000626 	beq	r2,zero,3900 <__sfmoreglue+0x4c>
    38e8:	11000304 	addi	r4,r2,12
    38ec:	14800115 	stw	r18,4(r2)
    38f0:	10000015 	stw	zero,0(r2)
    38f4:	11000215 	stw	r4,8(r2)
    38f8:	1021883a 	mov	r16,r2
    38fc:	00048a00 	call	48a0 <memset>
    3900:	8005883a 	mov	r2,r16
    3904:	dfc00317 	ldw	ra,12(sp)
    3908:	dc800217 	ldw	r18,8(sp)
    390c:	dc400117 	ldw	r17,4(sp)
    3910:	dc000017 	ldw	r16,0(sp)
    3914:	dec00404 	addi	sp,sp,16
    3918:	f800283a 	ret

0000391c <__sfp>:
    391c:	defffd04 	addi	sp,sp,-12
    3920:	00800034 	movhi	r2,0
    3924:	109c6204 	addi	r2,r2,29064
    3928:	dc000015 	stw	r16,0(sp)
    392c:	14000017 	ldw	r16,0(r2)
    3930:	dc400115 	stw	r17,4(sp)
    3934:	dfc00215 	stw	ra,8(sp)
    3938:	80800e17 	ldw	r2,56(r16)
    393c:	2023883a 	mov	r17,r4
    3940:	10002626 	beq	r2,zero,39dc <__sfp+0xc0>
    3944:	8400b804 	addi	r16,r16,736
    3948:	80800117 	ldw	r2,4(r16)
    394c:	81000217 	ldw	r4,8(r16)
    3950:	10ffffc4 	addi	r3,r2,-1
    3954:	18000916 	blt	r3,zero,397c <__sfp+0x60>
    3958:	2080030f 	ldh	r2,12(r4)
    395c:	10000b26 	beq	r2,zero,398c <__sfp+0x70>
    3960:	017fffc4 	movi	r5,-1
    3964:	00000206 	br	3970 <__sfp+0x54>
    3968:	2080030f 	ldh	r2,12(r4)
    396c:	10000726 	beq	r2,zero,398c <__sfp+0x70>
    3970:	18ffffc4 	addi	r3,r3,-1
    3974:	21001704 	addi	r4,r4,92
    3978:	197ffb1e 	bne	r3,r5,3968 <__sfp+0x4c>
    397c:	80800017 	ldw	r2,0(r16)
    3980:	10001926 	beq	r2,zero,39e8 <__sfp+0xcc>
    3984:	1021883a 	mov	r16,r2
    3988:	003fef06 	br	3948 <__sfp+0x2c>
    398c:	00bfffc4 	movi	r2,-1
    3990:	00c00044 	movi	r3,1
    3994:	2080038d 	sth	r2,14(r4)
    3998:	20c0030d 	sth	r3,12(r4)
    399c:	20000015 	stw	zero,0(r4)
    39a0:	20000215 	stw	zero,8(r4)
    39a4:	20000115 	stw	zero,4(r4)
    39a8:	20000415 	stw	zero,16(r4)
    39ac:	20000515 	stw	zero,20(r4)
    39b0:	20000615 	stw	zero,24(r4)
    39b4:	20000c15 	stw	zero,48(r4)
    39b8:	20000d15 	stw	zero,52(r4)
    39bc:	20001115 	stw	zero,68(r4)
    39c0:	20001215 	stw	zero,72(r4)
    39c4:	2005883a 	mov	r2,r4
    39c8:	dfc00217 	ldw	ra,8(sp)
    39cc:	dc400117 	ldw	r17,4(sp)
    39d0:	dc000017 	ldw	r16,0(sp)
    39d4:	dec00304 	addi	sp,sp,12
    39d8:	f800283a 	ret
    39dc:	8009883a 	mov	r4,r16
    39e0:	00037b40 	call	37b4 <__sinit>
    39e4:	003fd706 	br	3944 <__sfp+0x28>
    39e8:	8809883a 	mov	r4,r17
    39ec:	01400104 	movi	r5,4
    39f0:	00038b40 	call	38b4 <__sfmoreglue>
    39f4:	80800015 	stw	r2,0(r16)
    39f8:	103fe21e 	bne	r2,zero,3984 <__sfp+0x68>
    39fc:	00800304 	movi	r2,12
    3a00:	0009883a 	mov	r4,zero
    3a04:	88800015 	stw	r2,0(r17)
    3a08:	003fee06 	br	39c4 <__sfp+0xa8>

00003a0c <_malloc_trim_r>:
    3a0c:	defffb04 	addi	sp,sp,-20
    3a10:	dcc00315 	stw	r19,12(sp)
    3a14:	04c00034 	movhi	r19,0
    3a18:	9cdb5604 	addi	r19,r19,27992
    3a1c:	dc800215 	stw	r18,8(sp)
    3a20:	dc400115 	stw	r17,4(sp)
    3a24:	dc000015 	stw	r16,0(sp)
    3a28:	2823883a 	mov	r17,r5
    3a2c:	2025883a 	mov	r18,r4
    3a30:	dfc00415 	stw	ra,16(sp)
    3a34:	00050840 	call	5084 <__malloc_lock>
    3a38:	98800217 	ldw	r2,8(r19)
    3a3c:	9009883a 	mov	r4,r18
    3a40:	000b883a 	mov	r5,zero
    3a44:	10c00117 	ldw	r3,4(r2)
    3a48:	00bfff04 	movi	r2,-4
    3a4c:	18a0703a 	and	r16,r3,r2
    3a50:	8463c83a 	sub	r17,r16,r17
    3a54:	8c43fbc4 	addi	r17,r17,4079
    3a58:	8822d33a 	srli	r17,r17,12
    3a5c:	0083ffc4 	movi	r2,4095
    3a60:	8c7fffc4 	addi	r17,r17,-1
    3a64:	8822933a 	slli	r17,r17,12
    3a68:	1440060e 	bge	r2,r17,3a84 <_malloc_trim_r+0x78>
    3a6c:	00049380 	call	4938 <_sbrk_r>
    3a70:	98c00217 	ldw	r3,8(r19)
    3a74:	9009883a 	mov	r4,r18
    3a78:	044bc83a 	sub	r5,zero,r17
    3a7c:	80c7883a 	add	r3,r16,r3
    3a80:	10c00926 	beq	r2,r3,3aa8 <_malloc_trim_r+0x9c>
    3a84:	00050880 	call	5088 <__malloc_unlock>
    3a88:	0005883a 	mov	r2,zero
    3a8c:	dfc00417 	ldw	ra,16(sp)
    3a90:	dcc00317 	ldw	r19,12(sp)
    3a94:	dc800217 	ldw	r18,8(sp)
    3a98:	dc400117 	ldw	r17,4(sp)
    3a9c:	dc000017 	ldw	r16,0(sp)
    3aa0:	dec00504 	addi	sp,sp,20
    3aa4:	f800283a 	ret
    3aa8:	9009883a 	mov	r4,r18
    3aac:	00049380 	call	4938 <_sbrk_r>
    3ab0:	844dc83a 	sub	r6,r16,r17
    3ab4:	00ffffc4 	movi	r3,-1
    3ab8:	9009883a 	mov	r4,r18
    3abc:	000b883a 	mov	r5,zero
    3ac0:	01c00074 	movhi	r7,1
    3ac4:	39e3a704 	addi	r7,r7,-29028
    3ac8:	31800054 	ori	r6,r6,1
    3acc:	10c00926 	beq	r2,r3,3af4 <_malloc_trim_r+0xe8>
    3ad0:	38800017 	ldw	r2,0(r7)
    3ad4:	98c00217 	ldw	r3,8(r19)
    3ad8:	9009883a 	mov	r4,r18
    3adc:	1445c83a 	sub	r2,r2,r17
    3ae0:	38800015 	stw	r2,0(r7)
    3ae4:	19800115 	stw	r6,4(r3)
    3ae8:	00050880 	call	5088 <__malloc_unlock>
    3aec:	00800044 	movi	r2,1
    3af0:	003fe606 	br	3a8c <_malloc_trim_r+0x80>
    3af4:	00049380 	call	4938 <_sbrk_r>
    3af8:	99800217 	ldw	r6,8(r19)
    3afc:	100f883a 	mov	r7,r2
    3b00:	9009883a 	mov	r4,r18
    3b04:	1187c83a 	sub	r3,r2,r6
    3b08:	008003c4 	movi	r2,15
    3b0c:	19400054 	ori	r5,r3,1
    3b10:	10ffdc0e 	bge	r2,r3,3a84 <_malloc_trim_r+0x78>
    3b14:	00800034 	movhi	r2,0
    3b18:	109c6404 	addi	r2,r2,29072
    3b1c:	10c00017 	ldw	r3,0(r2)
    3b20:	00800074 	movhi	r2,1
    3b24:	10a3a704 	addi	r2,r2,-29028
    3b28:	31400115 	stw	r5,4(r6)
    3b2c:	38c7c83a 	sub	r3,r7,r3
    3b30:	10c00015 	stw	r3,0(r2)
    3b34:	003fd306 	br	3a84 <_malloc_trim_r+0x78>

00003b38 <_free_r>:
    3b38:	defffd04 	addi	sp,sp,-12
    3b3c:	dc400115 	stw	r17,4(sp)
    3b40:	dc000015 	stw	r16,0(sp)
    3b44:	dfc00215 	stw	ra,8(sp)
    3b48:	2821883a 	mov	r16,r5
    3b4c:	2023883a 	mov	r17,r4
    3b50:	28005a26 	beq	r5,zero,3cbc <_free_r+0x184>
    3b54:	00050840 	call	5084 <__malloc_lock>
    3b58:	823ffe04 	addi	r8,r16,-8
    3b5c:	41400117 	ldw	r5,4(r8)
    3b60:	00bfff84 	movi	r2,-2
    3b64:	02800034 	movhi	r10,0
    3b68:	529b5604 	addi	r10,r10,27992
    3b6c:	288e703a 	and	r7,r5,r2
    3b70:	41cd883a 	add	r6,r8,r7
    3b74:	30c00117 	ldw	r3,4(r6)
    3b78:	51000217 	ldw	r4,8(r10)
    3b7c:	00bfff04 	movi	r2,-4
    3b80:	1892703a 	and	r9,r3,r2
    3b84:	5017883a 	mov	r11,r10
    3b88:	31006726 	beq	r6,r4,3d28 <_free_r+0x1f0>
    3b8c:	2880004c 	andi	r2,r5,1
    3b90:	1005003a 	cmpeq	r2,r2,zero
    3b94:	32400115 	stw	r9,4(r6)
    3b98:	10001a1e 	bne	r2,zero,3c04 <_free_r+0xcc>
    3b9c:	000b883a 	mov	r5,zero
    3ba0:	3247883a 	add	r3,r6,r9
    3ba4:	18800117 	ldw	r2,4(r3)
    3ba8:	1080004c 	andi	r2,r2,1
    3bac:	1000231e 	bne	r2,zero,3c3c <_free_r+0x104>
    3bb0:	280ac03a 	cmpne	r5,r5,zero
    3bb4:	3a4f883a 	add	r7,r7,r9
    3bb8:	2800451e 	bne	r5,zero,3cd0 <_free_r+0x198>
    3bbc:	31000217 	ldw	r4,8(r6)
    3bc0:	00800034 	movhi	r2,0
    3bc4:	109b5804 	addi	r2,r2,28000
    3bc8:	20807b26 	beq	r4,r2,3db8 <_free_r+0x280>
    3bcc:	30800317 	ldw	r2,12(r6)
    3bd0:	3a07883a 	add	r3,r7,r8
    3bd4:	19c00015 	stw	r7,0(r3)
    3bd8:	11000215 	stw	r4,8(r2)
    3bdc:	20800315 	stw	r2,12(r4)
    3be0:	38800054 	ori	r2,r7,1
    3be4:	40800115 	stw	r2,4(r8)
    3be8:	28001a26 	beq	r5,zero,3c54 <_free_r+0x11c>
    3bec:	8809883a 	mov	r4,r17
    3bf0:	dfc00217 	ldw	ra,8(sp)
    3bf4:	dc400117 	ldw	r17,4(sp)
    3bf8:	dc000017 	ldw	r16,0(sp)
    3bfc:	dec00304 	addi	sp,sp,12
    3c00:	00050881 	jmpi	5088 <__malloc_unlock>
    3c04:	80bffe17 	ldw	r2,-8(r16)
    3c08:	50c00204 	addi	r3,r10,8
    3c0c:	4091c83a 	sub	r8,r8,r2
    3c10:	41000217 	ldw	r4,8(r8)
    3c14:	388f883a 	add	r7,r7,r2
    3c18:	20c06126 	beq	r4,r3,3da0 <_free_r+0x268>
    3c1c:	40800317 	ldw	r2,12(r8)
    3c20:	3247883a 	add	r3,r6,r9
    3c24:	000b883a 	mov	r5,zero
    3c28:	11000215 	stw	r4,8(r2)
    3c2c:	20800315 	stw	r2,12(r4)
    3c30:	18800117 	ldw	r2,4(r3)
    3c34:	1080004c 	andi	r2,r2,1
    3c38:	103fdd26 	beq	r2,zero,3bb0 <_free_r+0x78>
    3c3c:	38800054 	ori	r2,r7,1
    3c40:	3a07883a 	add	r3,r7,r8
    3c44:	280ac03a 	cmpne	r5,r5,zero
    3c48:	40800115 	stw	r2,4(r8)
    3c4c:	19c00015 	stw	r7,0(r3)
    3c50:	283fe61e 	bne	r5,zero,3bec <_free_r+0xb4>
    3c54:	00807fc4 	movi	r2,511
    3c58:	11c01f2e 	bgeu	r2,r7,3cd8 <_free_r+0x1a0>
    3c5c:	3806d27a 	srli	r3,r7,9
    3c60:	1800481e 	bne	r3,zero,3d84 <_free_r+0x24c>
    3c64:	3804d0fa 	srli	r2,r7,3
    3c68:	100690fa 	slli	r3,r2,3
    3c6c:	1acd883a 	add	r6,r3,r11
    3c70:	31400217 	ldw	r5,8(r6)
    3c74:	31405926 	beq	r6,r5,3ddc <_free_r+0x2a4>
    3c78:	28800117 	ldw	r2,4(r5)
    3c7c:	00ffff04 	movi	r3,-4
    3c80:	10c4703a 	and	r2,r2,r3
    3c84:	3880022e 	bgeu	r7,r2,3c90 <_free_r+0x158>
    3c88:	29400217 	ldw	r5,8(r5)
    3c8c:	317ffa1e 	bne	r6,r5,3c78 <_free_r+0x140>
    3c90:	29800317 	ldw	r6,12(r5)
    3c94:	41800315 	stw	r6,12(r8)
    3c98:	41400215 	stw	r5,8(r8)
    3c9c:	8809883a 	mov	r4,r17
    3ca0:	2a000315 	stw	r8,12(r5)
    3ca4:	32000215 	stw	r8,8(r6)
    3ca8:	dfc00217 	ldw	ra,8(sp)
    3cac:	dc400117 	ldw	r17,4(sp)
    3cb0:	dc000017 	ldw	r16,0(sp)
    3cb4:	dec00304 	addi	sp,sp,12
    3cb8:	00050881 	jmpi	5088 <__malloc_unlock>
    3cbc:	dfc00217 	ldw	ra,8(sp)
    3cc0:	dc400117 	ldw	r17,4(sp)
    3cc4:	dc000017 	ldw	r16,0(sp)
    3cc8:	dec00304 	addi	sp,sp,12
    3ccc:	f800283a 	ret
    3cd0:	31000217 	ldw	r4,8(r6)
    3cd4:	003fbd06 	br	3bcc <_free_r+0x94>
    3cd8:	3806d0fa 	srli	r3,r7,3
    3cdc:	00800044 	movi	r2,1
    3ce0:	51400117 	ldw	r5,4(r10)
    3ce4:	180890fa 	slli	r4,r3,3
    3ce8:	1807d0ba 	srai	r3,r3,2
    3cec:	22c9883a 	add	r4,r4,r11
    3cf0:	21800217 	ldw	r6,8(r4)
    3cf4:	10c4983a 	sll	r2,r2,r3
    3cf8:	41000315 	stw	r4,12(r8)
    3cfc:	41800215 	stw	r6,8(r8)
    3d00:	288ab03a 	or	r5,r5,r2
    3d04:	22000215 	stw	r8,8(r4)
    3d08:	8809883a 	mov	r4,r17
    3d0c:	51400115 	stw	r5,4(r10)
    3d10:	32000315 	stw	r8,12(r6)
    3d14:	dfc00217 	ldw	ra,8(sp)
    3d18:	dc400117 	ldw	r17,4(sp)
    3d1c:	dc000017 	ldw	r16,0(sp)
    3d20:	dec00304 	addi	sp,sp,12
    3d24:	00050881 	jmpi	5088 <__malloc_unlock>
    3d28:	2880004c 	andi	r2,r5,1
    3d2c:	3a4d883a 	add	r6,r7,r9
    3d30:	1000071e 	bne	r2,zero,3d50 <_free_r+0x218>
    3d34:	80bffe17 	ldw	r2,-8(r16)
    3d38:	4091c83a 	sub	r8,r8,r2
    3d3c:	41000317 	ldw	r4,12(r8)
    3d40:	40c00217 	ldw	r3,8(r8)
    3d44:	308d883a 	add	r6,r6,r2
    3d48:	20c00215 	stw	r3,8(r4)
    3d4c:	19000315 	stw	r4,12(r3)
    3d50:	00800034 	movhi	r2,0
    3d54:	109c6304 	addi	r2,r2,29068
    3d58:	11000017 	ldw	r4,0(r2)
    3d5c:	30c00054 	ori	r3,r6,1
    3d60:	52000215 	stw	r8,8(r10)
    3d64:	40c00115 	stw	r3,4(r8)
    3d68:	313fa036 	bltu	r6,r4,3bec <_free_r+0xb4>
    3d6c:	00800074 	movhi	r2,1
    3d70:	10a3a404 	addi	r2,r2,-29040
    3d74:	11400017 	ldw	r5,0(r2)
    3d78:	8809883a 	mov	r4,r17
    3d7c:	0003a0c0 	call	3a0c <_malloc_trim_r>
    3d80:	003f9a06 	br	3bec <_free_r+0xb4>
    3d84:	00800104 	movi	r2,4
    3d88:	10c0072e 	bgeu	r2,r3,3da8 <_free_r+0x270>
    3d8c:	00800504 	movi	r2,20
    3d90:	10c01936 	bltu	r2,r3,3df8 <_free_r+0x2c0>
    3d94:	188016c4 	addi	r2,r3,91
    3d98:	100690fa 	slli	r3,r2,3
    3d9c:	003fb306 	br	3c6c <_free_r+0x134>
    3da0:	01400044 	movi	r5,1
    3da4:	003f7e06 	br	3ba0 <_free_r+0x68>
    3da8:	3804d1ba 	srli	r2,r7,6
    3dac:	10800e04 	addi	r2,r2,56
    3db0:	100690fa 	slli	r3,r2,3
    3db4:	003fad06 	br	3c6c <_free_r+0x134>
    3db8:	22000315 	stw	r8,12(r4)
    3dbc:	22000215 	stw	r8,8(r4)
    3dc0:	3a05883a 	add	r2,r7,r8
    3dc4:	38c00054 	ori	r3,r7,1
    3dc8:	11c00015 	stw	r7,0(r2)
    3dcc:	41000215 	stw	r4,8(r8)
    3dd0:	40c00115 	stw	r3,4(r8)
    3dd4:	41000315 	stw	r4,12(r8)
    3dd8:	003f8406 	br	3bec <_free_r+0xb4>
    3ddc:	1005d0ba 	srai	r2,r2,2
    3de0:	00c00044 	movi	r3,1
    3de4:	51000117 	ldw	r4,4(r10)
    3de8:	1886983a 	sll	r3,r3,r2
    3dec:	20c8b03a 	or	r4,r4,r3
    3df0:	51000115 	stw	r4,4(r10)
    3df4:	003fa706 	br	3c94 <_free_r+0x15c>
    3df8:	00801504 	movi	r2,84
    3dfc:	10c00436 	bltu	r2,r3,3e10 <_free_r+0x2d8>
    3e00:	3804d33a 	srli	r2,r7,12
    3e04:	10801b84 	addi	r2,r2,110
    3e08:	100690fa 	slli	r3,r2,3
    3e0c:	003f9706 	br	3c6c <_free_r+0x134>
    3e10:	00805504 	movi	r2,340
    3e14:	10c00436 	bltu	r2,r3,3e28 <_free_r+0x2f0>
    3e18:	3804d3fa 	srli	r2,r7,15
    3e1c:	10801dc4 	addi	r2,r2,119
    3e20:	100690fa 	slli	r3,r2,3
    3e24:	003f9106 	br	3c6c <_free_r+0x134>
    3e28:	00815504 	movi	r2,1364
    3e2c:	10c0032e 	bgeu	r2,r3,3e3c <_free_r+0x304>
    3e30:	00801f84 	movi	r2,126
    3e34:	00c0fc04 	movi	r3,1008
    3e38:	003f8c06 	br	3c6c <_free_r+0x134>
    3e3c:	3804d4ba 	srli	r2,r7,18
    3e40:	10801f04 	addi	r2,r2,124
    3e44:	100690fa 	slli	r3,r2,3
    3e48:	003f8806 	br	3c6c <_free_r+0x134>

00003e4c <_fwalk_reent>:
    3e4c:	defff704 	addi	sp,sp,-36
    3e50:	dcc00315 	stw	r19,12(sp)
    3e54:	24c0b804 	addi	r19,r4,736
    3e58:	dd800615 	stw	r22,24(sp)
    3e5c:	dd400515 	stw	r21,20(sp)
    3e60:	dfc00815 	stw	ra,32(sp)
    3e64:	ddc00715 	stw	r23,28(sp)
    3e68:	dd000415 	stw	r20,16(sp)
    3e6c:	dc800215 	stw	r18,8(sp)
    3e70:	dc400115 	stw	r17,4(sp)
    3e74:	dc000015 	stw	r16,0(sp)
    3e78:	202b883a 	mov	r21,r4
    3e7c:	282d883a 	mov	r22,r5
    3e80:	00037a40 	call	37a4 <__sfp_lock_acquire>
    3e84:	98002126 	beq	r19,zero,3f0c <_fwalk_reent+0xc0>
    3e88:	002f883a 	mov	r23,zero
    3e8c:	9c800117 	ldw	r18,4(r19)
    3e90:	9c000217 	ldw	r16,8(r19)
    3e94:	90bfffc4 	addi	r2,r18,-1
    3e98:	10000d16 	blt	r2,zero,3ed0 <_fwalk_reent+0x84>
    3e9c:	0023883a 	mov	r17,zero
    3ea0:	053fffc4 	movi	r20,-1
    3ea4:	8080030f 	ldh	r2,12(r16)
    3ea8:	8c400044 	addi	r17,r17,1
    3eac:	10000626 	beq	r2,zero,3ec8 <_fwalk_reent+0x7c>
    3eb0:	8080038f 	ldh	r2,14(r16)
    3eb4:	800b883a 	mov	r5,r16
    3eb8:	a809883a 	mov	r4,r21
    3ebc:	15000226 	beq	r2,r20,3ec8 <_fwalk_reent+0x7c>
    3ec0:	b03ee83a 	callr	r22
    3ec4:	b8aeb03a 	or	r23,r23,r2
    3ec8:	84001704 	addi	r16,r16,92
    3ecc:	947ff51e 	bne	r18,r17,3ea4 <_fwalk_reent+0x58>
    3ed0:	9cc00017 	ldw	r19,0(r19)
    3ed4:	983fed1e 	bne	r19,zero,3e8c <_fwalk_reent+0x40>
    3ed8:	00037a80 	call	37a8 <__sfp_lock_release>
    3edc:	b805883a 	mov	r2,r23
    3ee0:	dfc00817 	ldw	ra,32(sp)
    3ee4:	ddc00717 	ldw	r23,28(sp)
    3ee8:	dd800617 	ldw	r22,24(sp)
    3eec:	dd400517 	ldw	r21,20(sp)
    3ef0:	dd000417 	ldw	r20,16(sp)
    3ef4:	dcc00317 	ldw	r19,12(sp)
    3ef8:	dc800217 	ldw	r18,8(sp)
    3efc:	dc400117 	ldw	r17,4(sp)
    3f00:	dc000017 	ldw	r16,0(sp)
    3f04:	dec00904 	addi	sp,sp,36
    3f08:	f800283a 	ret
    3f0c:	002f883a 	mov	r23,zero
    3f10:	003ff106 	br	3ed8 <_fwalk_reent+0x8c>

00003f14 <_fwalk>:
    3f14:	defff804 	addi	sp,sp,-32
    3f18:	dcc00315 	stw	r19,12(sp)
    3f1c:	24c0b804 	addi	r19,r4,736
    3f20:	dd400515 	stw	r21,20(sp)
    3f24:	dfc00715 	stw	ra,28(sp)
    3f28:	dd800615 	stw	r22,24(sp)
    3f2c:	dd000415 	stw	r20,16(sp)
    3f30:	dc800215 	stw	r18,8(sp)
    3f34:	dc400115 	stw	r17,4(sp)
    3f38:	dc000015 	stw	r16,0(sp)
    3f3c:	282b883a 	mov	r21,r5
    3f40:	00037a40 	call	37a4 <__sfp_lock_acquire>
    3f44:	98001f26 	beq	r19,zero,3fc4 <_fwalk+0xb0>
    3f48:	002d883a 	mov	r22,zero
    3f4c:	9c800117 	ldw	r18,4(r19)
    3f50:	9c000217 	ldw	r16,8(r19)
    3f54:	90bfffc4 	addi	r2,r18,-1
    3f58:	10000c16 	blt	r2,zero,3f8c <_fwalk+0x78>
    3f5c:	0023883a 	mov	r17,zero
    3f60:	053fffc4 	movi	r20,-1
    3f64:	8080030f 	ldh	r2,12(r16)
    3f68:	8c400044 	addi	r17,r17,1
    3f6c:	10000526 	beq	r2,zero,3f84 <_fwalk+0x70>
    3f70:	8080038f 	ldh	r2,14(r16)
    3f74:	8009883a 	mov	r4,r16
    3f78:	15000226 	beq	r2,r20,3f84 <_fwalk+0x70>
    3f7c:	a83ee83a 	callr	r21
    3f80:	b0acb03a 	or	r22,r22,r2
    3f84:	84001704 	addi	r16,r16,92
    3f88:	947ff61e 	bne	r18,r17,3f64 <_fwalk+0x50>
    3f8c:	9cc00017 	ldw	r19,0(r19)
    3f90:	983fee1e 	bne	r19,zero,3f4c <_fwalk+0x38>
    3f94:	00037a80 	call	37a8 <__sfp_lock_release>
    3f98:	b005883a 	mov	r2,r22
    3f9c:	dfc00717 	ldw	ra,28(sp)
    3fa0:	dd800617 	ldw	r22,24(sp)
    3fa4:	dd400517 	ldw	r21,20(sp)
    3fa8:	dd000417 	ldw	r20,16(sp)
    3fac:	dcc00317 	ldw	r19,12(sp)
    3fb0:	dc800217 	ldw	r18,8(sp)
    3fb4:	dc400117 	ldw	r17,4(sp)
    3fb8:	dc000017 	ldw	r16,0(sp)
    3fbc:	dec00804 	addi	sp,sp,32
    3fc0:	f800283a 	ret
    3fc4:	002d883a 	mov	r22,zero
    3fc8:	003ff206 	br	3f94 <_fwalk+0x80>

00003fcc <__smakebuf_r>:
    3fcc:	2880030b 	ldhu	r2,12(r5)
    3fd0:	deffed04 	addi	sp,sp,-76
    3fd4:	dc401015 	stw	r17,64(sp)
    3fd8:	1080008c 	andi	r2,r2,2
    3fdc:	dc000f15 	stw	r16,60(sp)
    3fe0:	dfc01215 	stw	ra,72(sp)
    3fe4:	dc801115 	stw	r18,68(sp)
    3fe8:	2821883a 	mov	r16,r5
    3fec:	2023883a 	mov	r17,r4
    3ff0:	10000b26 	beq	r2,zero,4020 <__smakebuf_r+0x54>
    3ff4:	28c010c4 	addi	r3,r5,67
    3ff8:	00800044 	movi	r2,1
    3ffc:	28800515 	stw	r2,20(r5)
    4000:	28c00415 	stw	r3,16(r5)
    4004:	28c00015 	stw	r3,0(r5)
    4008:	dfc01217 	ldw	ra,72(sp)
    400c:	dc801117 	ldw	r18,68(sp)
    4010:	dc401017 	ldw	r17,64(sp)
    4014:	dc000f17 	ldw	r16,60(sp)
    4018:	dec01304 	addi	sp,sp,76
    401c:	f800283a 	ret
    4020:	2940038f 	ldh	r5,14(r5)
    4024:	28002116 	blt	r5,zero,40ac <__smakebuf_r+0xe0>
    4028:	d80d883a 	mov	r6,sp
    402c:	0004d000 	call	4d00 <_fstat_r>
    4030:	10001e16 	blt	r2,zero,40ac <__smakebuf_r+0xe0>
    4034:	d8800117 	ldw	r2,4(sp)
    4038:	00e00014 	movui	r3,32768
    403c:	113c000c 	andi	r4,r2,61440
    4040:	20c03126 	beq	r4,r3,4108 <__smakebuf_r+0x13c>
    4044:	8080030b 	ldhu	r2,12(r16)
    4048:	00c80004 	movi	r3,8192
    404c:	10820014 	ori	r2,r2,2048
    4050:	8080030d 	sth	r2,12(r16)
    4054:	20c01e26 	beq	r4,r3,40d0 <__smakebuf_r+0x104>
    4058:	04810004 	movi	r18,1024
    405c:	8809883a 	mov	r4,r17
    4060:	900b883a 	mov	r5,r18
    4064:	00041600 	call	4160 <_malloc_r>
    4068:	1009883a 	mov	r4,r2
    406c:	10003126 	beq	r2,zero,4134 <__smakebuf_r+0x168>
    4070:	80c0030b 	ldhu	r3,12(r16)
    4074:	00800034 	movhi	r2,0
    4078:	108e2604 	addi	r2,r2,14488
    407c:	88800f15 	stw	r2,60(r17)
    4080:	18c02014 	ori	r3,r3,128
    4084:	84800515 	stw	r18,20(r16)
    4088:	80c0030d 	sth	r3,12(r16)
    408c:	81000415 	stw	r4,16(r16)
    4090:	81000015 	stw	r4,0(r16)
    4094:	dfc01217 	ldw	ra,72(sp)
    4098:	dc801117 	ldw	r18,68(sp)
    409c:	dc401017 	ldw	r17,64(sp)
    40a0:	dc000f17 	ldw	r16,60(sp)
    40a4:	dec01304 	addi	sp,sp,76
    40a8:	f800283a 	ret
    40ac:	80c0030b 	ldhu	r3,12(r16)
    40b0:	1880200c 	andi	r2,r3,128
    40b4:	10000426 	beq	r2,zero,40c8 <__smakebuf_r+0xfc>
    40b8:	04801004 	movi	r18,64
    40bc:	18820014 	ori	r2,r3,2048
    40c0:	8080030d 	sth	r2,12(r16)
    40c4:	003fe506 	br	405c <__smakebuf_r+0x90>
    40c8:	04810004 	movi	r18,1024
    40cc:	003ffb06 	br	40bc <__smakebuf_r+0xf0>
    40d0:	8140038f 	ldh	r5,14(r16)
    40d4:	8809883a 	mov	r4,r17
    40d8:	0004d740 	call	4d74 <_isatty_r>
    40dc:	103fde26 	beq	r2,zero,4058 <__smakebuf_r+0x8c>
    40e0:	8080030b 	ldhu	r2,12(r16)
    40e4:	80c010c4 	addi	r3,r16,67
    40e8:	04810004 	movi	r18,1024
    40ec:	10800054 	ori	r2,r2,1
    40f0:	8080030d 	sth	r2,12(r16)
    40f4:	00800044 	movi	r2,1
    40f8:	80c00415 	stw	r3,16(r16)
    40fc:	80800515 	stw	r2,20(r16)
    4100:	80c00015 	stw	r3,0(r16)
    4104:	003fd506 	br	405c <__smakebuf_r+0x90>
    4108:	80c00a17 	ldw	r3,40(r16)
    410c:	00800034 	movhi	r2,0
    4110:	10926c04 	addi	r2,r2,18864
    4114:	18bfcb1e 	bne	r3,r2,4044 <__smakebuf_r+0x78>
    4118:	8080030b 	ldhu	r2,12(r16)
    411c:	00c10004 	movi	r3,1024
    4120:	1825883a 	mov	r18,r3
    4124:	10c4b03a 	or	r2,r2,r3
    4128:	8080030d 	sth	r2,12(r16)
    412c:	80c01315 	stw	r3,76(r16)
    4130:	003fca06 	br	405c <__smakebuf_r+0x90>
    4134:	8100030b 	ldhu	r4,12(r16)
    4138:	2080800c 	andi	r2,r4,512
    413c:	103fb21e 	bne	r2,zero,4008 <__smakebuf_r+0x3c>
    4140:	80c010c4 	addi	r3,r16,67
    4144:	21000094 	ori	r4,r4,2
    4148:	00800044 	movi	r2,1
    414c:	80800515 	stw	r2,20(r16)
    4150:	8100030d 	sth	r4,12(r16)
    4154:	80c00415 	stw	r3,16(r16)
    4158:	80c00015 	stw	r3,0(r16)
    415c:	003faa06 	br	4008 <__smakebuf_r+0x3c>

00004160 <_malloc_r>:
    4160:	defff604 	addi	sp,sp,-40
    4164:	28c002c4 	addi	r3,r5,11
    4168:	00800584 	movi	r2,22
    416c:	dc800215 	stw	r18,8(sp)
    4170:	dfc00915 	stw	ra,36(sp)
    4174:	df000815 	stw	fp,32(sp)
    4178:	ddc00715 	stw	r23,28(sp)
    417c:	dd800615 	stw	r22,24(sp)
    4180:	dd400515 	stw	r21,20(sp)
    4184:	dd000415 	stw	r20,16(sp)
    4188:	dcc00315 	stw	r19,12(sp)
    418c:	dc400115 	stw	r17,4(sp)
    4190:	dc000015 	stw	r16,0(sp)
    4194:	2025883a 	mov	r18,r4
    4198:	10c01236 	bltu	r2,r3,41e4 <_malloc_r+0x84>
    419c:	04400404 	movi	r17,16
    41a0:	8940142e 	bgeu	r17,r5,41f4 <_malloc_r+0x94>
    41a4:	00800304 	movi	r2,12
    41a8:	0007883a 	mov	r3,zero
    41ac:	90800015 	stw	r2,0(r18)
    41b0:	1805883a 	mov	r2,r3
    41b4:	dfc00917 	ldw	ra,36(sp)
    41b8:	df000817 	ldw	fp,32(sp)
    41bc:	ddc00717 	ldw	r23,28(sp)
    41c0:	dd800617 	ldw	r22,24(sp)
    41c4:	dd400517 	ldw	r21,20(sp)
    41c8:	dd000417 	ldw	r20,16(sp)
    41cc:	dcc00317 	ldw	r19,12(sp)
    41d0:	dc800217 	ldw	r18,8(sp)
    41d4:	dc400117 	ldw	r17,4(sp)
    41d8:	dc000017 	ldw	r16,0(sp)
    41dc:	dec00a04 	addi	sp,sp,40
    41e0:	f800283a 	ret
    41e4:	00bffe04 	movi	r2,-8
    41e8:	18a2703a 	and	r17,r3,r2
    41ec:	883fed16 	blt	r17,zero,41a4 <_malloc_r+0x44>
    41f0:	897fec36 	bltu	r17,r5,41a4 <_malloc_r+0x44>
    41f4:	9009883a 	mov	r4,r18
    41f8:	00050840 	call	5084 <__malloc_lock>
    41fc:	00807dc4 	movi	r2,503
    4200:	14402b2e 	bgeu	r2,r17,42b0 <_malloc_r+0x150>
    4204:	8806d27a 	srli	r3,r17,9
    4208:	18003f1e 	bne	r3,zero,4308 <_malloc_r+0x1a8>
    420c:	880cd0fa 	srli	r6,r17,3
    4210:	300490fa 	slli	r2,r6,3
    4214:	02c00034 	movhi	r11,0
    4218:	5adb5604 	addi	r11,r11,27992
    421c:	12cb883a 	add	r5,r2,r11
    4220:	2c000317 	ldw	r16,12(r5)
    4224:	580f883a 	mov	r7,r11
    4228:	2c00041e 	bne	r5,r16,423c <_malloc_r+0xdc>
    422c:	00000a06 	br	4258 <_malloc_r+0xf8>
    4230:	1800860e 	bge	r3,zero,444c <_malloc_r+0x2ec>
    4234:	84000317 	ldw	r16,12(r16)
    4238:	2c000726 	beq	r5,r16,4258 <_malloc_r+0xf8>
    423c:	80800117 	ldw	r2,4(r16)
    4240:	00ffff04 	movi	r3,-4
    4244:	10c8703a 	and	r4,r2,r3
    4248:	2447c83a 	sub	r3,r4,r17
    424c:	008003c4 	movi	r2,15
    4250:	10fff70e 	bge	r2,r3,4230 <_malloc_r+0xd0>
    4254:	31bfffc4 	addi	r6,r6,-1
    4258:	32400044 	addi	r9,r6,1
    425c:	02800034 	movhi	r10,0
    4260:	529b5804 	addi	r10,r10,28000
    4264:	54000217 	ldw	r16,8(r10)
    4268:	8280a026 	beq	r16,r10,44ec <_malloc_r+0x38c>
    426c:	80800117 	ldw	r2,4(r16)
    4270:	00ffff04 	movi	r3,-4
    4274:	10ca703a 	and	r5,r2,r3
    4278:	2c4dc83a 	sub	r6,r5,r17
    427c:	008003c4 	movi	r2,15
    4280:	11808316 	blt	r2,r6,4490 <_malloc_r+0x330>
    4284:	52800315 	stw	r10,12(r10)
    4288:	52800215 	stw	r10,8(r10)
    428c:	30002916 	blt	r6,zero,4334 <_malloc_r+0x1d4>
    4290:	8147883a 	add	r3,r16,r5
    4294:	18800117 	ldw	r2,4(r3)
    4298:	9009883a 	mov	r4,r18
    429c:	10800054 	ori	r2,r2,1
    42a0:	18800115 	stw	r2,4(r3)
    42a4:	00050880 	call	5088 <__malloc_unlock>
    42a8:	80c00204 	addi	r3,r16,8
    42ac:	003fc006 	br	41b0 <_malloc_r+0x50>
    42b0:	02c00034 	movhi	r11,0
    42b4:	5adb5604 	addi	r11,r11,27992
    42b8:	8ac5883a 	add	r2,r17,r11
    42bc:	14000317 	ldw	r16,12(r2)
    42c0:	580f883a 	mov	r7,r11
    42c4:	8806d0fa 	srli	r3,r17,3
    42c8:	14006c26 	beq	r2,r16,447c <_malloc_r+0x31c>
    42cc:	80c00117 	ldw	r3,4(r16)
    42d0:	00bfff04 	movi	r2,-4
    42d4:	81800317 	ldw	r6,12(r16)
    42d8:	1886703a 	and	r3,r3,r2
    42dc:	80c7883a 	add	r3,r16,r3
    42e0:	18800117 	ldw	r2,4(r3)
    42e4:	81400217 	ldw	r5,8(r16)
    42e8:	9009883a 	mov	r4,r18
    42ec:	10800054 	ori	r2,r2,1
    42f0:	18800115 	stw	r2,4(r3)
    42f4:	31400215 	stw	r5,8(r6)
    42f8:	29800315 	stw	r6,12(r5)
    42fc:	00050880 	call	5088 <__malloc_unlock>
    4300:	80c00204 	addi	r3,r16,8
    4304:	003faa06 	br	41b0 <_malloc_r+0x50>
    4308:	00800104 	movi	r2,4
    430c:	10c0052e 	bgeu	r2,r3,4324 <_malloc_r+0x1c4>
    4310:	00800504 	movi	r2,20
    4314:	10c07836 	bltu	r2,r3,44f8 <_malloc_r+0x398>
    4318:	198016c4 	addi	r6,r3,91
    431c:	300490fa 	slli	r2,r6,3
    4320:	003fbc06 	br	4214 <_malloc_r+0xb4>
    4324:	8804d1ba 	srli	r2,r17,6
    4328:	11800e04 	addi	r6,r2,56
    432c:	300490fa 	slli	r2,r6,3
    4330:	003fb806 	br	4214 <_malloc_r+0xb4>
    4334:	00807fc4 	movi	r2,511
    4338:	1140bb36 	bltu	r2,r5,4628 <_malloc_r+0x4c8>
    433c:	2806d0fa 	srli	r3,r5,3
    4340:	573ffe04 	addi	fp,r10,-8
    4344:	00800044 	movi	r2,1
    4348:	180890fa 	slli	r4,r3,3
    434c:	1807d0ba 	srai	r3,r3,2
    4350:	e1c00117 	ldw	r7,4(fp)
    4354:	5909883a 	add	r4,r11,r4
    4358:	21400217 	ldw	r5,8(r4)
    435c:	10c4983a 	sll	r2,r2,r3
    4360:	81000315 	stw	r4,12(r16)
    4364:	81400215 	stw	r5,8(r16)
    4368:	388eb03a 	or	r7,r7,r2
    436c:	2c000315 	stw	r16,12(r5)
    4370:	24000215 	stw	r16,8(r4)
    4374:	e1c00115 	stw	r7,4(fp)
    4378:	4807883a 	mov	r3,r9
    437c:	4800cd16 	blt	r9,zero,46b4 <_malloc_r+0x554>
    4380:	1807d0ba 	srai	r3,r3,2
    4384:	00800044 	movi	r2,1
    4388:	10c8983a 	sll	r4,r2,r3
    438c:	39004436 	bltu	r7,r4,44a0 <_malloc_r+0x340>
    4390:	21c4703a 	and	r2,r4,r7
    4394:	10000a1e 	bne	r2,zero,43c0 <_malloc_r+0x260>
    4398:	2109883a 	add	r4,r4,r4
    439c:	00bfff04 	movi	r2,-4
    43a0:	4884703a 	and	r2,r9,r2
    43a4:	3906703a 	and	r3,r7,r4
    43a8:	12400104 	addi	r9,r2,4
    43ac:	1800041e 	bne	r3,zero,43c0 <_malloc_r+0x260>
    43b0:	2109883a 	add	r4,r4,r4
    43b4:	3904703a 	and	r2,r7,r4
    43b8:	4a400104 	addi	r9,r9,4
    43bc:	103ffc26 	beq	r2,zero,43b0 <_malloc_r+0x250>
    43c0:	480490fa 	slli	r2,r9,3
    43c4:	4819883a 	mov	r12,r9
    43c8:	023fff04 	movi	r8,-4
    43cc:	589b883a 	add	r13,r11,r2
    43d0:	6807883a 	mov	r3,r13
    43d4:	014003c4 	movi	r5,15
    43d8:	1c000317 	ldw	r16,12(r3)
    43dc:	1c00041e 	bne	r3,r16,43f0 <_malloc_r+0x290>
    43e0:	0000a706 	br	4680 <_malloc_r+0x520>
    43e4:	3000ab0e 	bge	r6,zero,4694 <_malloc_r+0x534>
    43e8:	84000317 	ldw	r16,12(r16)
    43ec:	1c00a426 	beq	r3,r16,4680 <_malloc_r+0x520>
    43f0:	80800117 	ldw	r2,4(r16)
    43f4:	1204703a 	and	r2,r2,r8
    43f8:	144dc83a 	sub	r6,r2,r17
    43fc:	29bff90e 	bge	r5,r6,43e4 <_malloc_r+0x284>
    4400:	81000317 	ldw	r4,12(r16)
    4404:	80c00217 	ldw	r3,8(r16)
    4408:	89400054 	ori	r5,r17,1
    440c:	8445883a 	add	r2,r16,r17
    4410:	20c00215 	stw	r3,8(r4)
    4414:	19000315 	stw	r4,12(r3)
    4418:	81400115 	stw	r5,4(r16)
    441c:	1187883a 	add	r3,r2,r6
    4420:	31000054 	ori	r4,r6,1
    4424:	50800315 	stw	r2,12(r10)
    4428:	50800215 	stw	r2,8(r10)
    442c:	19800015 	stw	r6,0(r3)
    4430:	11000115 	stw	r4,4(r2)
    4434:	12800215 	stw	r10,8(r2)
    4438:	12800315 	stw	r10,12(r2)
    443c:	9009883a 	mov	r4,r18
    4440:	00050880 	call	5088 <__malloc_unlock>
    4444:	80c00204 	addi	r3,r16,8
    4448:	003f5906 	br	41b0 <_malloc_r+0x50>
    444c:	8109883a 	add	r4,r16,r4
    4450:	20800117 	ldw	r2,4(r4)
    4454:	80c00217 	ldw	r3,8(r16)
    4458:	81400317 	ldw	r5,12(r16)
    445c:	10800054 	ori	r2,r2,1
    4460:	20800115 	stw	r2,4(r4)
    4464:	28c00215 	stw	r3,8(r5)
    4468:	19400315 	stw	r5,12(r3)
    446c:	9009883a 	mov	r4,r18
    4470:	00050880 	call	5088 <__malloc_unlock>
    4474:	80c00204 	addi	r3,r16,8
    4478:	003f4d06 	br	41b0 <_malloc_r+0x50>
    447c:	80800204 	addi	r2,r16,8
    4480:	14000317 	ldw	r16,12(r2)
    4484:	143f911e 	bne	r2,r16,42cc <_malloc_r+0x16c>
    4488:	1a400084 	addi	r9,r3,2
    448c:	003f7306 	br	425c <_malloc_r+0xfc>
    4490:	88c00054 	ori	r3,r17,1
    4494:	8445883a 	add	r2,r16,r17
    4498:	80c00115 	stw	r3,4(r16)
    449c:	003fdf06 	br	441c <_malloc_r+0x2bc>
    44a0:	e4000217 	ldw	r16,8(fp)
    44a4:	00bfff04 	movi	r2,-4
    44a8:	80c00117 	ldw	r3,4(r16)
    44ac:	802d883a 	mov	r22,r16
    44b0:	18aa703a 	and	r21,r3,r2
    44b4:	ac401636 	bltu	r21,r17,4510 <_malloc_r+0x3b0>
    44b8:	ac49c83a 	sub	r4,r21,r17
    44bc:	008003c4 	movi	r2,15
    44c0:	1100130e 	bge	r2,r4,4510 <_malloc_r+0x3b0>
    44c4:	88800054 	ori	r2,r17,1
    44c8:	8447883a 	add	r3,r16,r17
    44cc:	80800115 	stw	r2,4(r16)
    44d0:	20800054 	ori	r2,r4,1
    44d4:	18800115 	stw	r2,4(r3)
    44d8:	e0c00215 	stw	r3,8(fp)
    44dc:	9009883a 	mov	r4,r18
    44e0:	00050880 	call	5088 <__malloc_unlock>
    44e4:	80c00204 	addi	r3,r16,8
    44e8:	003f3106 	br	41b0 <_malloc_r+0x50>
    44ec:	39c00117 	ldw	r7,4(r7)
    44f0:	573ffe04 	addi	fp,r10,-8
    44f4:	003fa006 	br	4378 <_malloc_r+0x218>
    44f8:	00801504 	movi	r2,84
    44fc:	10c06736 	bltu	r2,r3,469c <_malloc_r+0x53c>
    4500:	8804d33a 	srli	r2,r17,12
    4504:	11801b84 	addi	r6,r2,110
    4508:	300490fa 	slli	r2,r6,3
    450c:	003f4106 	br	4214 <_malloc_r+0xb4>
    4510:	d0a74c17 	ldw	r2,-25296(gp)
    4514:	d0e00c17 	ldw	r3,-32720(gp)
    4518:	053fffc4 	movi	r20,-1
    451c:	10800404 	addi	r2,r2,16
    4520:	88a7883a 	add	r19,r17,r2
    4524:	1d000326 	beq	r3,r20,4534 <_malloc_r+0x3d4>
    4528:	98c3ffc4 	addi	r3,r19,4095
    452c:	00bc0004 	movi	r2,-4096
    4530:	18a6703a 	and	r19,r3,r2
    4534:	9009883a 	mov	r4,r18
    4538:	980b883a 	mov	r5,r19
    453c:	00049380 	call	4938 <_sbrk_r>
    4540:	1009883a 	mov	r4,r2
    4544:	15000426 	beq	r2,r20,4558 <_malloc_r+0x3f8>
    4548:	854b883a 	add	r5,r16,r21
    454c:	1029883a 	mov	r20,r2
    4550:	11405a2e 	bgeu	r2,r5,46bc <_malloc_r+0x55c>
    4554:	87000c26 	beq	r16,fp,4588 <_malloc_r+0x428>
    4558:	e4000217 	ldw	r16,8(fp)
    455c:	80c00117 	ldw	r3,4(r16)
    4560:	00bfff04 	movi	r2,-4
    4564:	1884703a 	and	r2,r3,r2
    4568:	14400336 	bltu	r2,r17,4578 <_malloc_r+0x418>
    456c:	1449c83a 	sub	r4,r2,r17
    4570:	008003c4 	movi	r2,15
    4574:	113fd316 	blt	r2,r4,44c4 <_malloc_r+0x364>
    4578:	9009883a 	mov	r4,r18
    457c:	00050880 	call	5088 <__malloc_unlock>
    4580:	0007883a 	mov	r3,zero
    4584:	003f0a06 	br	41b0 <_malloc_r+0x50>
    4588:	05c00074 	movhi	r23,1
    458c:	bde3a704 	addi	r23,r23,-29028
    4590:	b8800017 	ldw	r2,0(r23)
    4594:	988d883a 	add	r6,r19,r2
    4598:	b9800015 	stw	r6,0(r23)
    459c:	d0e00c17 	ldw	r3,-32720(gp)
    45a0:	00bfffc4 	movi	r2,-1
    45a4:	18808e26 	beq	r3,r2,47e0 <_malloc_r+0x680>
    45a8:	2145c83a 	sub	r2,r4,r5
    45ac:	3085883a 	add	r2,r6,r2
    45b0:	b8800015 	stw	r2,0(r23)
    45b4:	20c001cc 	andi	r3,r4,7
    45b8:	18005f1e 	bne	r3,zero,4738 <_malloc_r+0x5d8>
    45bc:	000b883a 	mov	r5,zero
    45c0:	a4c5883a 	add	r2,r20,r19
    45c4:	1083ffcc 	andi	r2,r2,4095
    45c8:	00c40004 	movi	r3,4096
    45cc:	1887c83a 	sub	r3,r3,r2
    45d0:	28e7883a 	add	r19,r5,r3
    45d4:	9009883a 	mov	r4,r18
    45d8:	980b883a 	mov	r5,r19
    45dc:	00049380 	call	4938 <_sbrk_r>
    45e0:	1007883a 	mov	r3,r2
    45e4:	00bfffc4 	movi	r2,-1
    45e8:	18807a26 	beq	r3,r2,47d4 <_malloc_r+0x674>
    45ec:	1d05c83a 	sub	r2,r3,r20
    45f0:	9885883a 	add	r2,r19,r2
    45f4:	10c00054 	ori	r3,r2,1
    45f8:	b8800017 	ldw	r2,0(r23)
    45fc:	a021883a 	mov	r16,r20
    4600:	a0c00115 	stw	r3,4(r20)
    4604:	9885883a 	add	r2,r19,r2
    4608:	b8800015 	stw	r2,0(r23)
    460c:	e5000215 	stw	r20,8(fp)
    4610:	b7003626 	beq	r22,fp,46ec <_malloc_r+0x58c>
    4614:	018003c4 	movi	r6,15
    4618:	35404b36 	bltu	r6,r21,4748 <_malloc_r+0x5e8>
    461c:	00800044 	movi	r2,1
    4620:	a0800115 	stw	r2,4(r20)
    4624:	003fcd06 	br	455c <_malloc_r+0x3fc>
    4628:	2808d27a 	srli	r4,r5,9
    462c:	2000371e 	bne	r4,zero,470c <_malloc_r+0x5ac>
    4630:	2808d0fa 	srli	r4,r5,3
    4634:	200690fa 	slli	r3,r4,3
    4638:	1ad1883a 	add	r8,r3,r11
    463c:	41800217 	ldw	r6,8(r8)
    4640:	41805b26 	beq	r8,r6,47b0 <_malloc_r+0x650>
    4644:	30800117 	ldw	r2,4(r6)
    4648:	00ffff04 	movi	r3,-4
    464c:	10c4703a 	and	r2,r2,r3
    4650:	2880022e 	bgeu	r5,r2,465c <_malloc_r+0x4fc>
    4654:	31800217 	ldw	r6,8(r6)
    4658:	41bffa1e 	bne	r8,r6,4644 <_malloc_r+0x4e4>
    465c:	32000317 	ldw	r8,12(r6)
    4660:	39c00117 	ldw	r7,4(r7)
    4664:	82000315 	stw	r8,12(r16)
    4668:	81800215 	stw	r6,8(r16)
    466c:	07000034 	movhi	fp,0
    4670:	e71b5604 	addi	fp,fp,27992
    4674:	34000315 	stw	r16,12(r6)
    4678:	44000215 	stw	r16,8(r8)
    467c:	003f3e06 	br	4378 <_malloc_r+0x218>
    4680:	63000044 	addi	r12,r12,1
    4684:	608000cc 	andi	r2,r12,3
    4688:	10005d26 	beq	r2,zero,4800 <_malloc_r+0x6a0>
    468c:	18c00204 	addi	r3,r3,8
    4690:	003f5106 	br	43d8 <_malloc_r+0x278>
    4694:	8089883a 	add	r4,r16,r2
    4698:	003f6d06 	br	4450 <_malloc_r+0x2f0>
    469c:	00805504 	movi	r2,340
    46a0:	10c02036 	bltu	r2,r3,4724 <_malloc_r+0x5c4>
    46a4:	8804d3fa 	srli	r2,r17,15
    46a8:	11801dc4 	addi	r6,r2,119
    46ac:	300490fa 	slli	r2,r6,3
    46b0:	003ed806 	br	4214 <_malloc_r+0xb4>
    46b4:	48c000c4 	addi	r3,r9,3
    46b8:	003f3106 	br	4380 <_malloc_r+0x220>
    46bc:	05c00074 	movhi	r23,1
    46c0:	bde3a704 	addi	r23,r23,-29028
    46c4:	b8800017 	ldw	r2,0(r23)
    46c8:	988d883a 	add	r6,r19,r2
    46cc:	b9800015 	stw	r6,0(r23)
    46d0:	293fb21e 	bne	r5,r4,459c <_malloc_r+0x43c>
    46d4:	2083ffcc 	andi	r2,r4,4095
    46d8:	103fb01e 	bne	r2,zero,459c <_malloc_r+0x43c>
    46dc:	e4000217 	ldw	r16,8(fp)
    46e0:	9d45883a 	add	r2,r19,r21
    46e4:	10800054 	ori	r2,r2,1
    46e8:	80800115 	stw	r2,4(r16)
    46ec:	b8c00017 	ldw	r3,0(r23)
    46f0:	d0a74d17 	ldw	r2,-25292(gp)
    46f4:	10c0012e 	bgeu	r2,r3,46fc <_malloc_r+0x59c>
    46f8:	d0e74d15 	stw	r3,-25292(gp)
    46fc:	d0a74e17 	ldw	r2,-25288(gp)
    4700:	10ff962e 	bgeu	r2,r3,455c <_malloc_r+0x3fc>
    4704:	d0e74e15 	stw	r3,-25288(gp)
    4708:	003f9406 	br	455c <_malloc_r+0x3fc>
    470c:	00800104 	movi	r2,4
    4710:	11001e36 	bltu	r2,r4,478c <_malloc_r+0x62c>
    4714:	2804d1ba 	srli	r2,r5,6
    4718:	11000e04 	addi	r4,r2,56
    471c:	200690fa 	slli	r3,r4,3
    4720:	003fc506 	br	4638 <_malloc_r+0x4d8>
    4724:	00815504 	movi	r2,1364
    4728:	10c01d2e 	bgeu	r2,r3,47a0 <_malloc_r+0x640>
    472c:	01801f84 	movi	r6,126
    4730:	0080fc04 	movi	r2,1008
    4734:	003eb706 	br	4214 <_malloc_r+0xb4>
    4738:	00800204 	movi	r2,8
    473c:	10cbc83a 	sub	r5,r2,r3
    4740:	2169883a 	add	r20,r4,r5
    4744:	003f9e06 	br	45c0 <_malloc_r+0x460>
    4748:	00bffe04 	movi	r2,-8
    474c:	a93ffd04 	addi	r4,r21,-12
    4750:	2088703a 	and	r4,r4,r2
    4754:	b10b883a 	add	r5,r22,r4
    4758:	00c00144 	movi	r3,5
    475c:	28c00215 	stw	r3,8(r5)
    4760:	28c00115 	stw	r3,4(r5)
    4764:	b0800117 	ldw	r2,4(r22)
    4768:	1080004c 	andi	r2,r2,1
    476c:	2084b03a 	or	r2,r4,r2
    4770:	b0800115 	stw	r2,4(r22)
    4774:	313fdd2e 	bgeu	r6,r4,46ec <_malloc_r+0x58c>
    4778:	b1400204 	addi	r5,r22,8
    477c:	9009883a 	mov	r4,r18
    4780:	0003b380 	call	3b38 <_free_r>
    4784:	e4000217 	ldw	r16,8(fp)
    4788:	003fd806 	br	46ec <_malloc_r+0x58c>
    478c:	00800504 	movi	r2,20
    4790:	11001536 	bltu	r2,r4,47e8 <_malloc_r+0x688>
    4794:	210016c4 	addi	r4,r4,91
    4798:	200690fa 	slli	r3,r4,3
    479c:	003fa606 	br	4638 <_malloc_r+0x4d8>
    47a0:	8804d4ba 	srli	r2,r17,18
    47a4:	11801f04 	addi	r6,r2,124
    47a8:	300490fa 	slli	r2,r6,3
    47ac:	003e9906 	br	4214 <_malloc_r+0xb4>
    47b0:	2009d0ba 	srai	r4,r4,2
    47b4:	01400034 	movhi	r5,0
    47b8:	295b5604 	addi	r5,r5,27992
    47bc:	00c00044 	movi	r3,1
    47c0:	28800117 	ldw	r2,4(r5)
    47c4:	1906983a 	sll	r3,r3,r4
    47c8:	10c4b03a 	or	r2,r2,r3
    47cc:	28800115 	stw	r2,4(r5)
    47d0:	003fa306 	br	4660 <_malloc_r+0x500>
    47d4:	0027883a 	mov	r19,zero
    47d8:	00c00044 	movi	r3,1
    47dc:	003f8606 	br	45f8 <_malloc_r+0x498>
    47e0:	d1200c15 	stw	r4,-32720(gp)
    47e4:	003f7306 	br	45b4 <_malloc_r+0x454>
    47e8:	00801504 	movi	r2,84
    47ec:	11001936 	bltu	r2,r4,4854 <_malloc_r+0x6f4>
    47f0:	2804d33a 	srli	r2,r5,12
    47f4:	11001b84 	addi	r4,r2,110
    47f8:	200690fa 	slli	r3,r4,3
    47fc:	003f8e06 	br	4638 <_malloc_r+0x4d8>
    4800:	480b883a 	mov	r5,r9
    4804:	6807883a 	mov	r3,r13
    4808:	288000cc 	andi	r2,r5,3
    480c:	18fffe04 	addi	r3,r3,-8
    4810:	297fffc4 	addi	r5,r5,-1
    4814:	10001526 	beq	r2,zero,486c <_malloc_r+0x70c>
    4818:	18800217 	ldw	r2,8(r3)
    481c:	10fffa26 	beq	r2,r3,4808 <_malloc_r+0x6a8>
    4820:	2109883a 	add	r4,r4,r4
    4824:	393f1e36 	bltu	r7,r4,44a0 <_malloc_r+0x340>
    4828:	203f1d26 	beq	r4,zero,44a0 <_malloc_r+0x340>
    482c:	21c4703a 	and	r2,r4,r7
    4830:	10000226 	beq	r2,zero,483c <_malloc_r+0x6dc>
    4834:	6013883a 	mov	r9,r12
    4838:	003ee106 	br	43c0 <_malloc_r+0x260>
    483c:	2109883a 	add	r4,r4,r4
    4840:	3904703a 	and	r2,r7,r4
    4844:	63000104 	addi	r12,r12,4
    4848:	103ffc26 	beq	r2,zero,483c <_malloc_r+0x6dc>
    484c:	6013883a 	mov	r9,r12
    4850:	003edb06 	br	43c0 <_malloc_r+0x260>
    4854:	00805504 	movi	r2,340
    4858:	11000836 	bltu	r2,r4,487c <_malloc_r+0x71c>
    485c:	2804d3fa 	srli	r2,r5,15
    4860:	11001dc4 	addi	r4,r2,119
    4864:	200690fa 	slli	r3,r4,3
    4868:	003f7306 	br	4638 <_malloc_r+0x4d8>
    486c:	0104303a 	nor	r2,zero,r4
    4870:	388e703a 	and	r7,r7,r2
    4874:	e1c00115 	stw	r7,4(fp)
    4878:	003fe906 	br	4820 <_malloc_r+0x6c0>
    487c:	00815504 	movi	r2,1364
    4880:	1100032e 	bgeu	r2,r4,4890 <_malloc_r+0x730>
    4884:	01001f84 	movi	r4,126
    4888:	00c0fc04 	movi	r3,1008
    488c:	003f6a06 	br	4638 <_malloc_r+0x4d8>
    4890:	2804d4ba 	srli	r2,r5,18
    4894:	11001f04 	addi	r4,r2,124
    4898:	200690fa 	slli	r3,r4,3
    489c:	003f6606 	br	4638 <_malloc_r+0x4d8>

000048a0 <memset>:
    48a0:	008000c4 	movi	r2,3
    48a4:	29403fcc 	andi	r5,r5,255
    48a8:	2007883a 	mov	r3,r4
    48ac:	1180022e 	bgeu	r2,r6,48b8 <memset+0x18>
    48b0:	2084703a 	and	r2,r4,r2
    48b4:	10000826 	beq	r2,zero,48d8 <memset+0x38>
    48b8:	30000526 	beq	r6,zero,48d0 <memset+0x30>
    48bc:	2805883a 	mov	r2,r5
    48c0:	30cd883a 	add	r6,r6,r3
    48c4:	18800005 	stb	r2,0(r3)
    48c8:	18c00044 	addi	r3,r3,1
    48cc:	19bffd1e 	bne	r3,r6,48c4 <memset+0x24>
    48d0:	2005883a 	mov	r2,r4
    48d4:	f800283a 	ret
    48d8:	2804923a 	slli	r2,r5,8
    48dc:	020003c4 	movi	r8,15
    48e0:	200f883a 	mov	r7,r4
    48e4:	2884b03a 	or	r2,r5,r2
    48e8:	1006943a 	slli	r3,r2,16
    48ec:	10c6b03a 	or	r3,r2,r3
    48f0:	41800a2e 	bgeu	r8,r6,491c <memset+0x7c>
    48f4:	4005883a 	mov	r2,r8
    48f8:	31bffc04 	addi	r6,r6,-16
    48fc:	38c00015 	stw	r3,0(r7)
    4900:	38c00115 	stw	r3,4(r7)
    4904:	38c00215 	stw	r3,8(r7)
    4908:	38c00315 	stw	r3,12(r7)
    490c:	39c00404 	addi	r7,r7,16
    4910:	11bff936 	bltu	r2,r6,48f8 <memset+0x58>
    4914:	008000c4 	movi	r2,3
    4918:	1180052e 	bgeu	r2,r6,4930 <memset+0x90>
    491c:	31bfff04 	addi	r6,r6,-4
    4920:	008000c4 	movi	r2,3
    4924:	38c00015 	stw	r3,0(r7)
    4928:	39c00104 	addi	r7,r7,4
    492c:	11bffb36 	bltu	r2,r6,491c <memset+0x7c>
    4930:	3807883a 	mov	r3,r7
    4934:	003fe006 	br	48b8 <memset+0x18>

00004938 <_sbrk_r>:
    4938:	defffd04 	addi	sp,sp,-12
    493c:	dc000015 	stw	r16,0(sp)
    4940:	04000074 	movhi	r16,1
    4944:	8423a304 	addi	r16,r16,-29044
    4948:	dc400115 	stw	r17,4(sp)
    494c:	80000015 	stw	zero,0(r16)
    4950:	2023883a 	mov	r17,r4
    4954:	2809883a 	mov	r4,r5
    4958:	dfc00215 	stw	ra,8(sp)
    495c:	00051840 	call	5184 <sbrk>
    4960:	1007883a 	mov	r3,r2
    4964:	00bfffc4 	movi	r2,-1
    4968:	18800626 	beq	r3,r2,4984 <_sbrk_r+0x4c>
    496c:	1805883a 	mov	r2,r3
    4970:	dfc00217 	ldw	ra,8(sp)
    4974:	dc400117 	ldw	r17,4(sp)
    4978:	dc000017 	ldw	r16,0(sp)
    497c:	dec00304 	addi	sp,sp,12
    4980:	f800283a 	ret
    4984:	80800017 	ldw	r2,0(r16)
    4988:	103ff826 	beq	r2,zero,496c <_sbrk_r+0x34>
    498c:	88800015 	stw	r2,0(r17)
    4990:	1805883a 	mov	r2,r3
    4994:	dfc00217 	ldw	ra,8(sp)
    4998:	dc400117 	ldw	r17,4(sp)
    499c:	dc000017 	ldw	r16,0(sp)
    49a0:	dec00304 	addi	sp,sp,12
    49a4:	f800283a 	ret

000049a8 <__sclose>:
    49a8:	2940038f 	ldh	r5,14(r5)
    49ac:	0004b6c1 	jmpi	4b6c <_close_r>

000049b0 <__sseek>:
    49b0:	defffe04 	addi	sp,sp,-8
    49b4:	dc000015 	stw	r16,0(sp)
    49b8:	2821883a 	mov	r16,r5
    49bc:	2940038f 	ldh	r5,14(r5)
    49c0:	dfc00115 	stw	ra,4(sp)
    49c4:	0004de40 	call	4de4 <_lseek_r>
    49c8:	1007883a 	mov	r3,r2
    49cc:	00bfffc4 	movi	r2,-1
    49d0:	18800926 	beq	r3,r2,49f8 <__sseek+0x48>
    49d4:	8080030b 	ldhu	r2,12(r16)
    49d8:	80c01415 	stw	r3,80(r16)
    49dc:	10840014 	ori	r2,r2,4096
    49e0:	8080030d 	sth	r2,12(r16)
    49e4:	1805883a 	mov	r2,r3
    49e8:	dfc00117 	ldw	ra,4(sp)
    49ec:	dc000017 	ldw	r16,0(sp)
    49f0:	dec00204 	addi	sp,sp,8
    49f4:	f800283a 	ret
    49f8:	8080030b 	ldhu	r2,12(r16)
    49fc:	10bbffcc 	andi	r2,r2,61439
    4a00:	8080030d 	sth	r2,12(r16)
    4a04:	1805883a 	mov	r2,r3
    4a08:	dfc00117 	ldw	ra,4(sp)
    4a0c:	dc000017 	ldw	r16,0(sp)
    4a10:	dec00204 	addi	sp,sp,8
    4a14:	f800283a 	ret

00004a18 <__swrite>:
    4a18:	2880030b 	ldhu	r2,12(r5)
    4a1c:	defffb04 	addi	sp,sp,-20
    4a20:	dcc00315 	stw	r19,12(sp)
    4a24:	1080400c 	andi	r2,r2,256
    4a28:	dc800215 	stw	r18,8(sp)
    4a2c:	dc400115 	stw	r17,4(sp)
    4a30:	dc000015 	stw	r16,0(sp)
    4a34:	3027883a 	mov	r19,r6
    4a38:	3825883a 	mov	r18,r7
    4a3c:	dfc00415 	stw	ra,16(sp)
    4a40:	2821883a 	mov	r16,r5
    4a44:	000d883a 	mov	r6,zero
    4a48:	01c00084 	movi	r7,2
    4a4c:	2023883a 	mov	r17,r4
    4a50:	10000226 	beq	r2,zero,4a5c <__swrite+0x44>
    4a54:	2940038f 	ldh	r5,14(r5)
    4a58:	0004de40 	call	4de4 <_lseek_r>
    4a5c:	8080030b 	ldhu	r2,12(r16)
    4a60:	8140038f 	ldh	r5,14(r16)
    4a64:	8809883a 	mov	r4,r17
    4a68:	10bbffcc 	andi	r2,r2,61439
    4a6c:	980d883a 	mov	r6,r19
    4a70:	900f883a 	mov	r7,r18
    4a74:	8080030d 	sth	r2,12(r16)
    4a78:	dfc00417 	ldw	ra,16(sp)
    4a7c:	dcc00317 	ldw	r19,12(sp)
    4a80:	dc800217 	ldw	r18,8(sp)
    4a84:	dc400117 	ldw	r17,4(sp)
    4a88:	dc000017 	ldw	r16,0(sp)
    4a8c:	dec00504 	addi	sp,sp,20
    4a90:	0004af41 	jmpi	4af4 <_write_r>

00004a94 <__sread>:
    4a94:	defffe04 	addi	sp,sp,-8
    4a98:	dc000015 	stw	r16,0(sp)
    4a9c:	2821883a 	mov	r16,r5
    4aa0:	2940038f 	ldh	r5,14(r5)
    4aa4:	dfc00115 	stw	ra,4(sp)
    4aa8:	0004e5c0 	call	4e5c <_read_r>
    4aac:	1007883a 	mov	r3,r2
    4ab0:	10000816 	blt	r2,zero,4ad4 <__sread+0x40>
    4ab4:	80801417 	ldw	r2,80(r16)
    4ab8:	10c5883a 	add	r2,r2,r3
    4abc:	80801415 	stw	r2,80(r16)
    4ac0:	1805883a 	mov	r2,r3
    4ac4:	dfc00117 	ldw	ra,4(sp)
    4ac8:	dc000017 	ldw	r16,0(sp)
    4acc:	dec00204 	addi	sp,sp,8
    4ad0:	f800283a 	ret
    4ad4:	8080030b 	ldhu	r2,12(r16)
    4ad8:	10bbffcc 	andi	r2,r2,61439
    4adc:	8080030d 	sth	r2,12(r16)
    4ae0:	1805883a 	mov	r2,r3
    4ae4:	dfc00117 	ldw	ra,4(sp)
    4ae8:	dc000017 	ldw	r16,0(sp)
    4aec:	dec00204 	addi	sp,sp,8
    4af0:	f800283a 	ret

00004af4 <_write_r>:
    4af4:	defffd04 	addi	sp,sp,-12
    4af8:	dc000015 	stw	r16,0(sp)
    4afc:	04000074 	movhi	r16,1
    4b00:	8423a304 	addi	r16,r16,-29044
    4b04:	dc400115 	stw	r17,4(sp)
    4b08:	80000015 	stw	zero,0(r16)
    4b0c:	2023883a 	mov	r17,r4
    4b10:	2809883a 	mov	r4,r5
    4b14:	300b883a 	mov	r5,r6
    4b18:	380d883a 	mov	r6,r7
    4b1c:	dfc00215 	stw	ra,8(sp)
    4b20:	00051d40 	call	51d4 <write>
    4b24:	1007883a 	mov	r3,r2
    4b28:	00bfffc4 	movi	r2,-1
    4b2c:	18800626 	beq	r3,r2,4b48 <_write_r+0x54>
    4b30:	1805883a 	mov	r2,r3
    4b34:	dfc00217 	ldw	ra,8(sp)
    4b38:	dc400117 	ldw	r17,4(sp)
    4b3c:	dc000017 	ldw	r16,0(sp)
    4b40:	dec00304 	addi	sp,sp,12
    4b44:	f800283a 	ret
    4b48:	80800017 	ldw	r2,0(r16)
    4b4c:	103ff826 	beq	r2,zero,4b30 <_write_r+0x3c>
    4b50:	88800015 	stw	r2,0(r17)
    4b54:	1805883a 	mov	r2,r3
    4b58:	dfc00217 	ldw	ra,8(sp)
    4b5c:	dc400117 	ldw	r17,4(sp)
    4b60:	dc000017 	ldw	r16,0(sp)
    4b64:	dec00304 	addi	sp,sp,12
    4b68:	f800283a 	ret

00004b6c <_close_r>:
    4b6c:	defffd04 	addi	sp,sp,-12
    4b70:	dc000015 	stw	r16,0(sp)
    4b74:	04000074 	movhi	r16,1
    4b78:	8423a304 	addi	r16,r16,-29044
    4b7c:	dc400115 	stw	r17,4(sp)
    4b80:	80000015 	stw	zero,0(r16)
    4b84:	2023883a 	mov	r17,r4
    4b88:	2809883a 	mov	r4,r5
    4b8c:	dfc00215 	stw	ra,8(sp)
    4b90:	00024ec0 	call	24ec <close>
    4b94:	1007883a 	mov	r3,r2
    4b98:	00bfffc4 	movi	r2,-1
    4b9c:	18800626 	beq	r3,r2,4bb8 <_close_r+0x4c>
    4ba0:	1805883a 	mov	r2,r3
    4ba4:	dfc00217 	ldw	ra,8(sp)
    4ba8:	dc400117 	ldw	r17,4(sp)
    4bac:	dc000017 	ldw	r16,0(sp)
    4bb0:	dec00304 	addi	sp,sp,12
    4bb4:	f800283a 	ret
    4bb8:	80800017 	ldw	r2,0(r16)
    4bbc:	103ff826 	beq	r2,zero,4ba0 <_close_r+0x34>
    4bc0:	88800015 	stw	r2,0(r17)
    4bc4:	1805883a 	mov	r2,r3
    4bc8:	dfc00217 	ldw	ra,8(sp)
    4bcc:	dc400117 	ldw	r17,4(sp)
    4bd0:	dc000017 	ldw	r16,0(sp)
    4bd4:	dec00304 	addi	sp,sp,12
    4bd8:	f800283a 	ret

00004bdc <_fclose_r>:
    4bdc:	defffc04 	addi	sp,sp,-16
    4be0:	dc400115 	stw	r17,4(sp)
    4be4:	dc000015 	stw	r16,0(sp)
    4be8:	dfc00315 	stw	ra,12(sp)
    4bec:	dc800215 	stw	r18,8(sp)
    4bf0:	2821883a 	mov	r16,r5
    4bf4:	2023883a 	mov	r17,r4
    4bf8:	28002926 	beq	r5,zero,4ca0 <_fclose_r+0xc4>
    4bfc:	00037a40 	call	37a4 <__sfp_lock_acquire>
    4c00:	88000226 	beq	r17,zero,4c0c <_fclose_r+0x30>
    4c04:	88800e17 	ldw	r2,56(r17)
    4c08:	10002d26 	beq	r2,zero,4cc0 <_fclose_r+0xe4>
    4c0c:	8080030f 	ldh	r2,12(r16)
    4c10:	10002226 	beq	r2,zero,4c9c <_fclose_r+0xc0>
    4c14:	8809883a 	mov	r4,r17
    4c18:	800b883a 	mov	r5,r16
    4c1c:	000351c0 	call	351c <_fflush_r>
    4c20:	1025883a 	mov	r18,r2
    4c24:	80800b17 	ldw	r2,44(r16)
    4c28:	10000426 	beq	r2,zero,4c3c <_fclose_r+0x60>
    4c2c:	81400717 	ldw	r5,28(r16)
    4c30:	8809883a 	mov	r4,r17
    4c34:	103ee83a 	callr	r2
    4c38:	10002a16 	blt	r2,zero,4ce4 <_fclose_r+0x108>
    4c3c:	8080030b 	ldhu	r2,12(r16)
    4c40:	1080200c 	andi	r2,r2,128
    4c44:	1000231e 	bne	r2,zero,4cd4 <_fclose_r+0xf8>
    4c48:	81400c17 	ldw	r5,48(r16)
    4c4c:	28000526 	beq	r5,zero,4c64 <_fclose_r+0x88>
    4c50:	80801004 	addi	r2,r16,64
    4c54:	28800226 	beq	r5,r2,4c60 <_fclose_r+0x84>
    4c58:	8809883a 	mov	r4,r17
    4c5c:	0003b380 	call	3b38 <_free_r>
    4c60:	80000c15 	stw	zero,48(r16)
    4c64:	81401117 	ldw	r5,68(r16)
    4c68:	28000326 	beq	r5,zero,4c78 <_fclose_r+0x9c>
    4c6c:	8809883a 	mov	r4,r17
    4c70:	0003b380 	call	3b38 <_free_r>
    4c74:	80001115 	stw	zero,68(r16)
    4c78:	8000030d 	sth	zero,12(r16)
    4c7c:	00037a80 	call	37a8 <__sfp_lock_release>
    4c80:	9005883a 	mov	r2,r18
    4c84:	dfc00317 	ldw	ra,12(sp)
    4c88:	dc800217 	ldw	r18,8(sp)
    4c8c:	dc400117 	ldw	r17,4(sp)
    4c90:	dc000017 	ldw	r16,0(sp)
    4c94:	dec00404 	addi	sp,sp,16
    4c98:	f800283a 	ret
    4c9c:	00037a80 	call	37a8 <__sfp_lock_release>
    4ca0:	0025883a 	mov	r18,zero
    4ca4:	9005883a 	mov	r2,r18
    4ca8:	dfc00317 	ldw	ra,12(sp)
    4cac:	dc800217 	ldw	r18,8(sp)
    4cb0:	dc400117 	ldw	r17,4(sp)
    4cb4:	dc000017 	ldw	r16,0(sp)
    4cb8:	dec00404 	addi	sp,sp,16
    4cbc:	f800283a 	ret
    4cc0:	8809883a 	mov	r4,r17
    4cc4:	00037b40 	call	37b4 <__sinit>
    4cc8:	8080030f 	ldh	r2,12(r16)
    4ccc:	103fd11e 	bne	r2,zero,4c14 <_fclose_r+0x38>
    4cd0:	003ff206 	br	4c9c <_fclose_r+0xc0>
    4cd4:	81400417 	ldw	r5,16(r16)
    4cd8:	8809883a 	mov	r4,r17
    4cdc:	0003b380 	call	3b38 <_free_r>
    4ce0:	003fd906 	br	4c48 <_fclose_r+0x6c>
    4ce4:	04bfffc4 	movi	r18,-1
    4ce8:	003fd406 	br	4c3c <_fclose_r+0x60>

00004cec <fclose>:
    4cec:	00800034 	movhi	r2,0
    4cf0:	109c6104 	addi	r2,r2,29060
    4cf4:	200b883a 	mov	r5,r4
    4cf8:	11000017 	ldw	r4,0(r2)
    4cfc:	0004bdc1 	jmpi	4bdc <_fclose_r>

00004d00 <_fstat_r>:
    4d00:	defffd04 	addi	sp,sp,-12
    4d04:	dc000015 	stw	r16,0(sp)
    4d08:	04000074 	movhi	r16,1
    4d0c:	8423a304 	addi	r16,r16,-29044
    4d10:	dc400115 	stw	r17,4(sp)
    4d14:	80000015 	stw	zero,0(r16)
    4d18:	2023883a 	mov	r17,r4
    4d1c:	2809883a 	mov	r4,r5
    4d20:	300b883a 	mov	r5,r6
    4d24:	dfc00215 	stw	ra,8(sp)
    4d28:	0004ee80 	call	4ee8 <fstat>
    4d2c:	1007883a 	mov	r3,r2
    4d30:	00bfffc4 	movi	r2,-1
    4d34:	18800626 	beq	r3,r2,4d50 <_fstat_r+0x50>
    4d38:	1805883a 	mov	r2,r3
    4d3c:	dfc00217 	ldw	ra,8(sp)
    4d40:	dc400117 	ldw	r17,4(sp)
    4d44:	dc000017 	ldw	r16,0(sp)
    4d48:	dec00304 	addi	sp,sp,12
    4d4c:	f800283a 	ret
    4d50:	80800017 	ldw	r2,0(r16)
    4d54:	103ff826 	beq	r2,zero,4d38 <_fstat_r+0x38>
    4d58:	88800015 	stw	r2,0(r17)
    4d5c:	1805883a 	mov	r2,r3
    4d60:	dfc00217 	ldw	ra,8(sp)
    4d64:	dc400117 	ldw	r17,4(sp)
    4d68:	dc000017 	ldw	r16,0(sp)
    4d6c:	dec00304 	addi	sp,sp,12
    4d70:	f800283a 	ret

00004d74 <_isatty_r>:
    4d74:	defffd04 	addi	sp,sp,-12
    4d78:	dc000015 	stw	r16,0(sp)
    4d7c:	04000074 	movhi	r16,1
    4d80:	8423a304 	addi	r16,r16,-29044
    4d84:	dc400115 	stw	r17,4(sp)
    4d88:	80000015 	stw	zero,0(r16)
    4d8c:	2023883a 	mov	r17,r4
    4d90:	2809883a 	mov	r4,r5
    4d94:	dfc00215 	stw	ra,8(sp)
    4d98:	0004f680 	call	4f68 <isatty>
    4d9c:	1007883a 	mov	r3,r2
    4da0:	00bfffc4 	movi	r2,-1
    4da4:	18800626 	beq	r3,r2,4dc0 <_isatty_r+0x4c>
    4da8:	1805883a 	mov	r2,r3
    4dac:	dfc00217 	ldw	ra,8(sp)
    4db0:	dc400117 	ldw	r17,4(sp)
    4db4:	dc000017 	ldw	r16,0(sp)
    4db8:	dec00304 	addi	sp,sp,12
    4dbc:	f800283a 	ret
    4dc0:	80800017 	ldw	r2,0(r16)
    4dc4:	103ff826 	beq	r2,zero,4da8 <_isatty_r+0x34>
    4dc8:	88800015 	stw	r2,0(r17)
    4dcc:	1805883a 	mov	r2,r3
    4dd0:	dfc00217 	ldw	ra,8(sp)
    4dd4:	dc400117 	ldw	r17,4(sp)
    4dd8:	dc000017 	ldw	r16,0(sp)
    4ddc:	dec00304 	addi	sp,sp,12
    4de0:	f800283a 	ret

00004de4 <_lseek_r>:
    4de4:	defffd04 	addi	sp,sp,-12
    4de8:	dc000015 	stw	r16,0(sp)
    4dec:	04000074 	movhi	r16,1
    4df0:	8423a304 	addi	r16,r16,-29044
    4df4:	dc400115 	stw	r17,4(sp)
    4df8:	80000015 	stw	zero,0(r16)
    4dfc:	2023883a 	mov	r17,r4
    4e00:	2809883a 	mov	r4,r5
    4e04:	300b883a 	mov	r5,r6
    4e08:	380d883a 	mov	r6,r7
    4e0c:	dfc00215 	stw	ra,8(sp)
    4e10:	0004fec0 	call	4fec <lseek>
    4e14:	1007883a 	mov	r3,r2
    4e18:	00bfffc4 	movi	r2,-1
    4e1c:	18800626 	beq	r3,r2,4e38 <_lseek_r+0x54>
    4e20:	1805883a 	mov	r2,r3
    4e24:	dfc00217 	ldw	ra,8(sp)
    4e28:	dc400117 	ldw	r17,4(sp)
    4e2c:	dc000017 	ldw	r16,0(sp)
    4e30:	dec00304 	addi	sp,sp,12
    4e34:	f800283a 	ret
    4e38:	80800017 	ldw	r2,0(r16)
    4e3c:	103ff826 	beq	r2,zero,4e20 <_lseek_r+0x3c>
    4e40:	88800015 	stw	r2,0(r17)
    4e44:	1805883a 	mov	r2,r3
    4e48:	dfc00217 	ldw	ra,8(sp)
    4e4c:	dc400117 	ldw	r17,4(sp)
    4e50:	dc000017 	ldw	r16,0(sp)
    4e54:	dec00304 	addi	sp,sp,12
    4e58:	f800283a 	ret

00004e5c <_read_r>:
    4e5c:	defffd04 	addi	sp,sp,-12
    4e60:	dc000015 	stw	r16,0(sp)
    4e64:	04000074 	movhi	r16,1
    4e68:	8423a304 	addi	r16,r16,-29044
    4e6c:	dc400115 	stw	r17,4(sp)
    4e70:	80000015 	stw	zero,0(r16)
    4e74:	2023883a 	mov	r17,r4
    4e78:	2809883a 	mov	r4,r5
    4e7c:	300b883a 	mov	r5,r6
    4e80:	380d883a 	mov	r6,r7
    4e84:	dfc00215 	stw	ra,8(sp)
    4e88:	000508c0 	call	508c <read>
    4e8c:	1007883a 	mov	r3,r2
    4e90:	00bfffc4 	movi	r2,-1
    4e94:	18800626 	beq	r3,r2,4eb0 <_read_r+0x54>
    4e98:	1805883a 	mov	r2,r3
    4e9c:	dfc00217 	ldw	ra,8(sp)
    4ea0:	dc400117 	ldw	r17,4(sp)
    4ea4:	dc000017 	ldw	r16,0(sp)
    4ea8:	dec00304 	addi	sp,sp,12
    4eac:	f800283a 	ret
    4eb0:	80800017 	ldw	r2,0(r16)
    4eb4:	103ff826 	beq	r2,zero,4e98 <_read_r+0x3c>
    4eb8:	88800015 	stw	r2,0(r17)
    4ebc:	1805883a 	mov	r2,r3
    4ec0:	dfc00217 	ldw	ra,8(sp)
    4ec4:	dc400117 	ldw	r17,4(sp)
    4ec8:	dc000017 	ldw	r16,0(sp)
    4ecc:	dec00304 	addi	sp,sp,12
    4ed0:	f800283a 	ret

00004ed4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4ed4:	20000226 	beq	r4,zero,4ee0 <_exit+0xc>
    ALT_SIM_FAIL();
    4ed8:	002af070 	cmpltui	zero,zero,43969
    4edc:	00000106 	br	4ee4 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    4ee0:	002af0b0 	cmpltui	zero,zero,43970
    4ee4:	003fff06 	br	4ee4 <_exit+0x10>

00004ee8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4ee8:	deffff04 	addi	sp,sp,-4
    4eec:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4ef0:	20000e16 	blt	r4,zero,4f2c <fstat+0x44>
    4ef4:	20c00324 	muli	r3,r4,12
    4ef8:	00800034 	movhi	r2,0
    4efc:	1099f604 	addi	r2,r2,26584
    4f00:	1889883a 	add	r4,r3,r2
  
  if (fd)
    4f04:	20000926 	beq	r4,zero,4f2c <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4f08:	20800017 	ldw	r2,0(r4)
    4f0c:	10800817 	ldw	r2,32(r2)
    4f10:	10000226 	beq	r2,zero,4f1c <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    4f14:	103ee83a 	callr	r2
    4f18:	00001006 	br	4f5c <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4f1c:	00880004 	movi	r2,8192
    4f20:	28800115 	stw	r2,4(r5)
    4f24:	0005883a 	mov	r2,zero
    4f28:	00000c06 	br	4f5c <fstat+0x74>
    4f2c:	00800034 	movhi	r2,0
    4f30:	109c5d04 	addi	r2,r2,29044
    4f34:	10800017 	ldw	r2,0(r2)
    4f38:	1000031e 	bne	r2,zero,4f48 <fstat+0x60>
    4f3c:	00c00074 	movhi	r3,1
    4f40:	18e3a304 	addi	r3,r3,-29044
    4f44:	00000206 	br	4f50 <fstat+0x68>
    4f48:	103ee83a 	callr	r2
    4f4c:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4f50:	00801444 	movi	r2,81
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    4f5c:	dfc00017 	ldw	ra,0(sp)
    4f60:	dec00104 	addi	sp,sp,4
    4f64:	f800283a 	ret

00004f68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4f68:	defff004 	addi	sp,sp,-64
    4f6c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4f70:	20000f16 	blt	r4,zero,4fb0 <isatty+0x48>
    4f74:	20c00324 	muli	r3,r4,12
    4f78:	00800034 	movhi	r2,0
    4f7c:	1099f604 	addi	r2,r2,26584
    4f80:	1885883a 	add	r2,r3,r2
  
  if (fd)
    4f84:	10000a26 	beq	r2,zero,4fb0 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4f88:	10800017 	ldw	r2,0(r2)
    4f8c:	10800817 	ldw	r2,32(r2)
    4f90:	1000021e 	bne	r2,zero,4f9c <isatty+0x34>
    4f94:	00800044 	movi	r2,1
    4f98:	00001106 	br	4fe0 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4f9c:	d80b883a 	mov	r5,sp
    4fa0:	0004ee80 	call	4ee8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4fa4:	d8800117 	ldw	r2,4(sp)
    4fa8:	10880020 	cmpeqi	r2,r2,8192
    4fac:	00000c06 	br	4fe0 <isatty+0x78>
    4fb0:	00800034 	movhi	r2,0
    4fb4:	109c5d04 	addi	r2,r2,29044
    4fb8:	10800017 	ldw	r2,0(r2)
    4fbc:	1000031e 	bne	r2,zero,4fcc <isatty+0x64>
    4fc0:	00c00074 	movhi	r3,1
    4fc4:	18e3a304 	addi	r3,r3,-29044
    4fc8:	00000206 	br	4fd4 <isatty+0x6c>
    4fcc:	103ee83a 	callr	r2
    4fd0:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4fd4:	00801444 	movi	r2,81
    4fd8:	18800015 	stw	r2,0(r3)
    4fdc:	0005883a 	mov	r2,zero
    return 0;
  }
}
    4fe0:	dfc00f17 	ldw	ra,60(sp)
    4fe4:	dec01004 	addi	sp,sp,64
    4fe8:	f800283a 	ret

00004fec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4fec:	defffe04 	addi	sp,sp,-8
    4ff0:	dfc00115 	stw	ra,4(sp)
    4ff4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4ff8:	2000020e 	bge	r4,zero,5004 <lseek+0x18>
    4ffc:	043febc4 	movi	r16,-81
    5000:	00000d06 	br	5038 <lseek+0x4c>
    5004:	20c00324 	muli	r3,r4,12
    5008:	00800034 	movhi	r2,0
    500c:	1099f604 	addi	r2,r2,26584
    5010:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    5014:	20001526 	beq	r4,zero,506c <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5018:	20800017 	ldw	r2,0(r4)
    501c:	10800717 	ldw	r2,28(r2)
    5020:	1000021e 	bne	r2,zero,502c <lseek+0x40>
    5024:	043fde84 	movi	r16,-134
    5028:	00000306 	br	5038 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    502c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    5030:	1000100e 	bge	r2,zero,5074 <lseek+0x88>
    5034:	1021883a 	mov	r16,r2
    5038:	00800034 	movhi	r2,0
    503c:	109c5d04 	addi	r2,r2,29044
    5040:	10800017 	ldw	r2,0(r2)
    5044:	1000031e 	bne	r2,zero,5054 <lseek+0x68>
    5048:	00c00074 	movhi	r3,1
    504c:	18e3a304 	addi	r3,r3,-29044
    5050:	00000206 	br	505c <lseek+0x70>
    5054:	103ee83a 	callr	r2
    5058:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    505c:	0405c83a 	sub	r2,zero,r16
    5060:	18800015 	stw	r2,0(r3)
    5064:	00bfffc4 	movi	r2,-1
    5068:	00000206 	br	5074 <lseek+0x88>
    506c:	043febc4 	movi	r16,-81
    5070:	003ff106 	br	5038 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    5074:	dfc00117 	ldw	ra,4(sp)
    5078:	dc000017 	ldw	r16,0(sp)
    507c:	dec00204 	addi	sp,sp,8
    5080:	f800283a 	ret

00005084 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    5084:	f800283a 	ret

00005088 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    5088:	f800283a 	ret

0000508c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    508c:	defffe04 	addi	sp,sp,-8
    5090:	dfc00115 	stw	ra,4(sp)
    5094:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5098:	20002916 	blt	r4,zero,5140 <read+0xb4>
    509c:	20c00324 	muli	r3,r4,12
    50a0:	00800034 	movhi	r2,0
    50a4:	1099f604 	addi	r2,r2,26584
    50a8:	1889883a 	add	r4,r3,r2
  
  if (fd)
    50ac:	20002426 	beq	r4,zero,5140 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    50b0:	20800217 	ldw	r2,8(r4)
    50b4:	108000cc 	andi	r2,r2,3
    50b8:	00c00044 	movi	r3,1
    50bc:	10c01326 	beq	r2,r3,510c <read+0x80>
    50c0:	20800017 	ldw	r2,0(r4)
    50c4:	10800517 	ldw	r2,20(r2)
    50c8:	10001026 	beq	r2,zero,510c <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    50cc:	103ee83a 	callr	r2
    50d0:	1021883a 	mov	r16,r2
    50d4:	1000260e 	bge	r2,zero,5170 <read+0xe4>
    50d8:	00800034 	movhi	r2,0
    50dc:	109c5d04 	addi	r2,r2,29044
    50e0:	10800017 	ldw	r2,0(r2)
    50e4:	1000031e 	bne	r2,zero,50f4 <read+0x68>
    50e8:	00c00074 	movhi	r3,1
    50ec:	18e3a304 	addi	r3,r3,-29044
    50f0:	00000206 	br	50fc <read+0x70>
    50f4:	103ee83a 	callr	r2
    50f8:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    50fc:	0405c83a 	sub	r2,zero,r16
    5100:	18800015 	stw	r2,0(r3)
    5104:	043fffc4 	movi	r16,-1
    5108:	00001906 	br	5170 <read+0xe4>
    510c:	00800034 	movhi	r2,0
    5110:	109c5d04 	addi	r2,r2,29044
    5114:	10800017 	ldw	r2,0(r2)
    5118:	1000031e 	bne	r2,zero,5128 <read+0x9c>
    511c:	00c00074 	movhi	r3,1
    5120:	18e3a304 	addi	r3,r3,-29044
    5124:	00000206 	br	5130 <read+0xa4>
    5128:	103ee83a 	callr	r2
    512c:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    5130:	00800344 	movi	r2,13
    5134:	18800015 	stw	r2,0(r3)
    5138:	043fffc4 	movi	r16,-1
    513c:	00000c06 	br	5170 <read+0xe4>
    5140:	00800034 	movhi	r2,0
    5144:	109c5d04 	addi	r2,r2,29044
    5148:	10800017 	ldw	r2,0(r2)
    514c:	1000031e 	bne	r2,zero,515c <read+0xd0>
    5150:	00c00074 	movhi	r3,1
    5154:	18e3a304 	addi	r3,r3,-29044
    5158:	00000206 	br	5164 <read+0xd8>
    515c:	103ee83a 	callr	r2
    5160:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5164:	00801444 	movi	r2,81
    5168:	18800015 	stw	r2,0(r3)
    516c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    5170:	8005883a 	mov	r2,r16
    5174:	dfc00117 	ldw	ra,4(sp)
    5178:	dc000017 	ldw	r16,0(sp)
    517c:	dec00204 	addi	sp,sp,8
    5180:	f800283a 	ret

00005184 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5184:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5188:	00bfff84 	movi	r2,-2
    518c:	2884703a 	and	r2,r5,r2
    5190:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5194:	d0a00d17 	ldw	r2,-32716(gp)
    5198:	108000c4 	addi	r2,r2,3
    519c:	00ffff04 	movi	r3,-4
    51a0:	10c6703a 	and	r3,r2,r3
    51a4:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    51a8:	1909883a 	add	r4,r3,r4
    51ac:	00802034 	movhi	r2,128
    51b0:	10800004 	addi	r2,r2,0
    51b4:	1100032e 	bgeu	r2,r4,51c4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    51b8:	2801703a 	wrctl	status,r5
    51bc:	00ffffc4 	movi	r3,-1
    51c0:	00000206 	br	51cc <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    51c4:	d1200d15 	stw	r4,-32716(gp)
    51c8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    51cc:	1805883a 	mov	r2,r3
    51d0:	f800283a 	ret

000051d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    51d4:	defffe04 	addi	sp,sp,-8
    51d8:	dfc00115 	stw	ra,4(sp)
    51dc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    51e0:	20002816 	blt	r4,zero,5284 <write+0xb0>
    51e4:	20c00324 	muli	r3,r4,12
    51e8:	00800034 	movhi	r2,0
    51ec:	1099f604 	addi	r2,r2,26584
    51f0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    51f4:	20002326 	beq	r4,zero,5284 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    51f8:	20800217 	ldw	r2,8(r4)
    51fc:	108000cc 	andi	r2,r2,3
    5200:	10001326 	beq	r2,zero,5250 <write+0x7c>
    5204:	20800017 	ldw	r2,0(r4)
    5208:	10800617 	ldw	r2,24(r2)
    520c:	10001026 	beq	r2,zero,5250 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5210:	103ee83a 	callr	r2
    5214:	1021883a 	mov	r16,r2
    5218:	1000260e 	bge	r2,zero,52b4 <write+0xe0>
    521c:	00800034 	movhi	r2,0
    5220:	109c5d04 	addi	r2,r2,29044
    5224:	10800017 	ldw	r2,0(r2)
    5228:	1000031e 	bne	r2,zero,5238 <write+0x64>
    522c:	00c00074 	movhi	r3,1
    5230:	18e3a304 	addi	r3,r3,-29044
    5234:	00000206 	br	5240 <write+0x6c>
    5238:	103ee83a 	callr	r2
    523c:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    5240:	0405c83a 	sub	r2,zero,r16
    5244:	18800015 	stw	r2,0(r3)
    5248:	043fffc4 	movi	r16,-1
    524c:	00001906 	br	52b4 <write+0xe0>
    5250:	00800034 	movhi	r2,0
    5254:	109c5d04 	addi	r2,r2,29044
    5258:	10800017 	ldw	r2,0(r2)
    525c:	1000031e 	bne	r2,zero,526c <write+0x98>
    5260:	00c00074 	movhi	r3,1
    5264:	18e3a304 	addi	r3,r3,-29044
    5268:	00000206 	br	5274 <write+0xa0>
    526c:	103ee83a 	callr	r2
    5270:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5274:	00800344 	movi	r2,13
    5278:	18800015 	stw	r2,0(r3)
    527c:	043fffc4 	movi	r16,-1
    5280:	00000c06 	br	52b4 <write+0xe0>
    5284:	00800034 	movhi	r2,0
    5288:	109c5d04 	addi	r2,r2,29044
    528c:	10800017 	ldw	r2,0(r2)
    5290:	1000031e 	bne	r2,zero,52a0 <write+0xcc>
    5294:	00c00074 	movhi	r3,1
    5298:	18e3a304 	addi	r3,r3,-29044
    529c:	00000206 	br	52a8 <write+0xd4>
    52a0:	103ee83a 	callr	r2
    52a4:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    52a8:	00801444 	movi	r2,81
    52ac:	18800015 	stw	r2,0(r3)
    52b0:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    52b4:	8005883a 	mov	r2,r16
    52b8:	dfc00117 	ldw	ra,4(sp)
    52bc:	dc000017 	ldw	r16,0(sp)
    52c0:	dec00204 	addi	sp,sp,8
    52c4:	f800283a 	ret
    52c8:	00003368 	cmpgeui	zero,zero,205
