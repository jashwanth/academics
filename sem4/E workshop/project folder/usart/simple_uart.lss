
simple_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004e  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012d  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010a  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000011b  00000000  00000000  0000041f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ae  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  7a:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart0_init>:
void uart0_init(void)
{
 	 /*all these declaration just check on datasheet :) */	 
	 //set frame format : 8 data, 1 stop bit, none parity, asynchronous
 //	 UCSRC = BIT(URSEL) | 0x06;
     UCSRC = (1<<URSEL) | (3<<UCSZ0);
  82:	86 e8       	ldi	r24, 0x86	; 134
  84:	80 bd       	out	0x20, r24	; 32
 	 UBRRL = 0x2F; //set baud rate lo
  86:	8f e2       	ldi	r24, 0x2F	; 47
  88:	89 b9       	out	0x09, r24	; 9
 	 UBRRH = 0x00; //set baud rate hi
  8a:	10 bc       	out	0x20, r1	; 32
 	 UCSRB = 0x18; //enable receiver and transmitter
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
}
  90:	08 95       	ret

00000092 <uart_transmit>:

//Uart transmit
void uart_transmit(unsigned char data)
{
 	 //wait for empty transmit buffer
	 while(!(UCSRA & (1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <uart_transmit>
	 
	 //put data into buffer, send the data
	 UDR = data;
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <show_terminal>:

//there is function to show teks 'abcde' on terminal 
void show_terminal(void)
{
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	00 d0       	rcall	.+0      	; 0xa0 <show_terminal+0x6>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <show_terminal+0x8>
  a2:	0f 92       	push	r0
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
 	 unsigned int i;
	 unsigned char arr[] = {'a','b','c','d','e'};
  a8:	de 01       	movw	r26, r28
  aa:	11 96       	adiw	r26, 0x01	; 1
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	81 50       	subi	r24, 0x01	; 1
  b8:	e1 f7       	brne	.-8      	; 0xb2 <show_terminal+0x18>
void uart0_init(void)
{
 	 /*all these declaration just check on datasheet :) */	 
	 //set frame format : 8 data, 1 stop bit, none parity, asynchronous
 //	 UCSRC = BIT(URSEL) | 0x06;
     UCSRC = (1<<URSEL) | (3<<UCSZ0);
  ba:	86 e8       	ldi	r24, 0x86	; 134
  bc:	80 bd       	out	0x20, r24	; 32
 	 UBRRL = 0x2F; //set baud rate lo
  be:	8f e2       	ldi	r24, 0x2F	; 47
  c0:	89 b9       	out	0x09, r24	; 9
 	 UBRRH = 0x00; //set baud rate hi
  c2:	10 bc       	out	0x20, r1	; 32
 	 UCSRB = 0x18; //enable receiver and transmitter
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	fe 01       	movw	r30, r28
  ca:	31 96       	adiw	r30, 0x01	; 1
 	 unsigned int i;
	 unsigned char arr[] = {'a','b','c','d','e'};
	 
	 uart0_init();
	 
	 for(i=0; i<6; i++)
  cc:	9e 01       	movw	r18, r28
  ce:	29 5f       	subi	r18, 0xF9	; 249
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
	 {
	  	  uart_transmit(arr[i]);
  d2:	80 81       	ld	r24, Z

//Uart transmit
void uart_transmit(unsigned char data)
{
 	 //wait for empty transmit buffer
	 while(!(UCSRA & (1<<UDRE)));
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <show_terminal+0x3a>
	 
	 //put data into buffer, send the data
	 UDR = data;
  d8:	8c b9       	out	0x0c, r24	; 12
  da:	31 96       	adiw	r30, 0x01	; 1
 	 unsigned int i;
	 unsigned char arr[] = {'a','b','c','d','e'};
	 
	 uart0_init();
	 
	 for(i=0; i<6; i++)
  dc:	e2 17       	cp	r30, r18
  de:	f3 07       	cpc	r31, r19
  e0:	c1 f7       	brne	.-16     	; 0xd2 <show_terminal+0x38>
	 {
	  	  uart_transmit(arr[i]);
	 }
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{
 	  show_terminal();
  f2:	0e 94 4d 00 	call	0x9a	; 0x9a <show_terminal>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
