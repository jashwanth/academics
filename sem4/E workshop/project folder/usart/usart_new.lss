
usart_new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000338  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000c2  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000056d  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d4  00000000  00000000  000009db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000045c  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000e0  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016d  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000224  00000000  00000000  00001259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  64:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  6c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	80 e3       	ldi	r24, 0x30	; 48
  70:	95 e7       	ldi	r25, 0x75	; 117
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  76:	ad 98       	cbi	0x15, 5	; 21
}
  78:	08 95       	ret

0000007a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  7a:	af 9a       	sbi	0x15, 7	; 21
}
  7c:	08 95       	ret

0000007e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  7e:	af 98       	cbi	0x15, 7	; 21
}
  80:	08 95       	ret

00000082 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  82:	ae 98       	cbi	0x15, 6	; 21
}
  84:	08 95       	ret

00000086 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  86:	ae 9a       	sbi	0x15, 6	; 21
}
  88:	08 95       	ret

0000008a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  8a:	98 2f       	mov	r25, r24
  8c:	92 95       	swap	r25
  8e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  90:	48 2f       	mov	r20, r24
  92:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  94:	61 15       	cp	r22, r1
  96:	71 05       	cpc	r23, r1
  98:	c9 f4       	brne	.+50     	; 0xcc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	98 2b       	or	r25, r24
  a0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  a2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  a4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  a6:	ad 9a       	sbi	0x15, 5	; 21
  a8:	20 e3       	ldi	r18, 0x30	; 48
  aa:	35 e7       	ldi	r19, 0x75	; 117
  ac:	c9 01       	movw	r24, r18
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  b2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	48 2b       	or	r20, r24
  ba:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  bc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  be:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  c0:	ad 9a       	sbi	0x15, 5	; 21
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  c8:	ad 98       	cbi	0x15, 5	; 21
  ca:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	71 05       	cpc	r23, r1
  d0:	c1 f4       	brne	.+48     	; 0x102 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	98 2b       	or	r25, r24
  d8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  da:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  dc:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  de:	ad 9a       	sbi	0x15, 5	; 21
  e0:	20 e3       	ldi	r18, 0x30	; 48
  e2:	35 e7       	ldi	r19, 0x75	; 117
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  ea:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	48 2b       	or	r20, r24
  f2:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  f4:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  f6:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  f8:	ad 9a       	sbi	0x15, 5	; 21
  fa:	c9 01       	movw	r24, r18
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 100:	ad 98       	cbi	0x15, 5	; 21
 102:	08 95       	ret

00000104 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 108:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 10a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x0F,0);
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
	LCD_Send(0x28,0);
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
}
 12a:	08 95       	ret

0000012c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	71 05       	cpc	r23, r1
 130:	31 f4       	brne	.+12     	; 0x13e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 132:	81 58       	subi	r24, 0x81	; 129
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 13c:	08 95       	ret
	}
	else if(y==2)
 13e:	62 30       	cpi	r22, 0x02	; 2
 140:	71 05       	cpc	r23, r1
 142:	29 f4       	brne	.+10     	; 0x14e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 144:	81 54       	subi	r24, 0x41	; 65
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>
 14e:	08 95       	ret

00000150 <usart_init>:
  }
}

void usart_init(unsigned int ubrr){
 /*asynchronous mode five bits of data send*/
 UBRRH= (unsigned char)(ubrr >> 8);
 150:	90 bd       	out	0x20, r25	; 32
 UBRRL = (unsigned char)(ubrr);//12--set baud rate(12000000/16x57600 - 1)
 152:	89 b9       	out	0x09, r24	; 9
 UCSRB |= (1 << RXEN) | (1 << TXEN );
 154:	8a b1       	in	r24, 0x0a	; 10
 156:	88 61       	ori	r24, 0x18	; 24
 158:	8a b9       	out	0x0a, r24	; 10
 UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 15a:	8e e8       	ldi	r24, 0x8E	; 142
 15c:	80 bd       	out	0x20, r24	; 32
}
 15e:	08 95       	ret

00000160 <transmit_byte>:

void transmit_byte(int adc){
 160:	9c 01       	movw	r18, r24
  char lower = (char) adc & 0x001f;//select lower five bits
  char upper = (char) ((adc & 0x03e0) >> 5);//select upper five bits
  upper |= 0x80;//add 100 to the start of the bits
  while(!(UCSRA & (1 << UDRE)));
 162:	5d 9b       	sbis	0x0b, 5	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <transmit_byte+0x2>
 UCSRB |= (1 << RXEN) | (1 << TXEN );
 UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
}

void transmit_byte(int adc){
  char lower = (char) adc & 0x001f;//select lower five bits
 166:	82 2f       	mov	r24, r18
 168:	8f 71       	andi	r24, 0x1F	; 31
  char upper = (char) ((adc & 0x03e0) >> 5);//select upper five bits
  upper |= 0x80;//add 100 to the start of the bits
  while(!(UCSRA & (1 << UDRE)));
  UDR = lower;//guess this will transmit
 16a:	8c b9       	out	0x0c, r24	; 12
  while((UCSRA & (1<<UDRE)) == 0);
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <transmit_byte+0xc>
 UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
}

void transmit_byte(int adc){
  char lower = (char) adc & 0x001f;//select lower five bits
  char upper = (char) ((adc & 0x03e0) >> 5);//select upper five bits
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	36 95       	lsr	r19
 174:	27 95       	ror	r18
 176:	8a 95       	dec	r24
 178:	e1 f7       	brne	.-8      	; 0x172 <transmit_byte+0x12>
 17a:	82 2f       	mov	r24, r18
 17c:	8f 71       	andi	r24, 0x1F	; 31
  upper |= 0x80;//add 100 to the start of the bits
 17e:	80 68       	ori	r24, 0x80	; 128
  while(!(UCSRA & (1 << UDRE)));
  UDR = lower;//guess this will transmit
  while((UCSRA & (1<<UDRE)) == 0);
  UDR = upper;
 180:	8c b9       	out	0x0c, r24	; 12
	
 182:	08 95       	ret

00000184 <main>:
#include"lcd.h"

void usart_init(unsigned int);
void transmit_byte(int);

int main(){
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
  DDRD = 0x02;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	81 bb       	out	0x11, r24	; 17
  DDRA = 0x00;
 18c:	1a ba       	out	0x1a, r1	; 26
  DDRB = 0xff;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	87 bb       	out	0x17, r24	; 23
  PORTB = 0xff;
 192:	88 bb       	out	0x18, r24	; 24
  ADMUX = 0xc0;
 194:	80 ec       	ldi	r24, 0xC0	; 192
 196:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1<<ADEN);//enable adc
 198:	37 9a       	sbi	0x06, 7	; 6
  }
}

void usart_init(unsigned int ubrr){
 /*asynchronous mode five bits of data send*/
 UBRRH= (unsigned char)(ubrr >> 8);
 19a:	10 bc       	out	0x20, r1	; 32
 UBRRL = (unsigned char)(ubrr);//12--set baud rate(12000000/16x57600 - 1)
 19c:	8d e4       	ldi	r24, 0x4D	; 77
 19e:	89 b9       	out	0x09, r24	; 9
 UCSRB |= (1 << RXEN) | (1 << TXEN );
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	8a b9       	out	0x0a, r24	; 10
 UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 1a6:	8e e8       	ldi	r24, 0x8E	; 142
 1a8:	80 bd       	out	0x20, r24	; 32
    ADCSRA |=  (1<<ADSC);//start conversion
	while((ADCSRA & (1<< ADIF)) == 0);//wait till conversion completes
	int adc_value = ADC;
	int distance = (1023-adc_value)/60;

	transmit_byte(distance);
 1aa:	cf ef       	ldi	r28, 0xFF	; 255
 1ac:	d3 e0       	ldi	r29, 0x03	; 3
  ADMUX = 0xc0;
  ADCSRA |= (1<<ADEN);//enable adc
   usart_init(myubrr);
  while(1){
   
    ADCSRA |=  (1<<ADSC);//start conversion
 1ae:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<< ADIF)) == 0);//wait till conversion completes
 1b0:	34 9b       	sbis	0x06, 4	; 6
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <main+0x2c>
	int adc_value = ADC;
 1b4:	84 b1       	in	r24, 0x04	; 4
 1b6:	95 b1       	in	r25, 0x05	; 5
	int distance = (1023-adc_value)/60;

	transmit_byte(distance);
 1b8:	9e 01       	movw	r18, r28
 1ba:	28 1b       	sub	r18, r24
 1bc:	39 0b       	sbc	r19, r25
 1be:	c9 01       	movw	r24, r18
 1c0:	6c e3       	ldi	r22, 0x3C	; 60
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 42 01 	call	0x284	; 0x284 <__divmodhi4>
 1c8:	cb 01       	movw	r24, r22
 1ca:	0e 94 b0 00 	call	0x160	; 0x160 <transmit_byte>
 1ce:	ef cf       	rjmp	.-34     	; 0x1ae <main+0x2a>

000001d0 <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1de:	dc 01       	movw	r26, r24
 1e0:	0d 90       	ld	r0, X+
 1e2:	00 20       	and	r0, r0
 1e4:	e9 f7       	brne	.-6      	; 0x1e0 <LCD_Send_String+0x10>
 1e6:	8d 01       	movw	r16, r26
 1e8:	01 50       	subi	r16, 0x01	; 1
 1ea:	10 40       	sbci	r17, 0x00	; 0
 1ec:	08 1b       	sub	r16, r24
 1ee:	19 0b       	sbc	r17, r25
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1f6:	f7 01       	movw	r30, r14
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	80 81       	ld	r24, Z
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 206:	21 96       	adiw	r28, 0x01	; 1
 208:	c0 17       	cp	r28, r16
 20a:	d1 07       	cpc	r29, r17
 20c:	a4 f3       	brlt	.-24     	; 0x1f6 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	08 95       	ret

0000021c <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	df 93       	push	r29
 222:	cf 93       	push	r28
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	c6 56       	subi	r28, 0x66	; 102
 22a:	d0 40       	sbci	r29, 0x00	; 0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	8c 01       	movw	r16, r24
 238:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 23a:	ba 01       	movw	r22, r20
 23c:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_GotoXY>
	char t[100];
	if(data<0){
 240:	17 ff       	sbrs	r17, 7
 242:	0a c0       	rjmp	.+20     	; 0x258 <LCD_Print+0x3c>
		char neg[2]={'-',0};
 244:	8d e2       	ldi	r24, 0x2D	; 45
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	1a 82       	std	Y+2, r1	; 0x02
		LCD_Send_String(neg);
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Send_String>
		data*=-1;
 252:	10 95       	com	r17
 254:	01 95       	neg	r16
 256:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	LCD_Send_String(itoa(data,t,10));
 258:	c8 01       	movw	r24, r16
 25a:	be 01       	movw	r22, r28
 25c:	6d 5f       	subi	r22, 0xFD	; 253
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	0e 94 69 01 	call	0x2d2	; 0x2d2 <itoa>
 268:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Send_String>
}	
 26c:	ca 59       	subi	r28, 0x9A	; 154
 26e:	df 4f       	sbci	r29, 0xFF	; 255
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <__divmodhi4>:
 284:	97 fb       	bst	r25, 7
 286:	09 2e       	mov	r0, r25
 288:	07 26       	eor	r0, r23
 28a:	0a d0       	rcall	.+20     	; 0x2a0 <__divmodhi4_neg1>
 28c:	77 fd       	sbrc	r23, 7
 28e:	04 d0       	rcall	.+8      	; 0x298 <__divmodhi4_neg2>
 290:	0c d0       	rcall	.+24     	; 0x2aa <__udivmodhi4>
 292:	06 d0       	rcall	.+12     	; 0x2a0 <__divmodhi4_neg1>
 294:	00 20       	and	r0, r0
 296:	1a f4       	brpl	.+6      	; 0x29e <__divmodhi4_exit>

00000298 <__divmodhi4_neg2>:
 298:	70 95       	com	r23
 29a:	61 95       	neg	r22
 29c:	7f 4f       	sbci	r23, 0xFF	; 255

0000029e <__divmodhi4_exit>:
 29e:	08 95       	ret

000002a0 <__divmodhi4_neg1>:
 2a0:	f6 f7       	brtc	.-4      	; 0x29e <__divmodhi4_exit>
 2a2:	90 95       	com	r25
 2a4:	81 95       	neg	r24
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	08 95       	ret

000002aa <__udivmodhi4>:
 2aa:	aa 1b       	sub	r26, r26
 2ac:	bb 1b       	sub	r27, r27
 2ae:	51 e1       	ldi	r21, 0x11	; 17
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <__udivmodhi4_ep>

000002b2 <__udivmodhi4_loop>:
 2b2:	aa 1f       	adc	r26, r26
 2b4:	bb 1f       	adc	r27, r27
 2b6:	a6 17       	cp	r26, r22
 2b8:	b7 07       	cpc	r27, r23
 2ba:	10 f0       	brcs	.+4      	; 0x2c0 <__udivmodhi4_ep>
 2bc:	a6 1b       	sub	r26, r22
 2be:	b7 0b       	sbc	r27, r23

000002c0 <__udivmodhi4_ep>:
 2c0:	88 1f       	adc	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	5a 95       	dec	r21
 2c6:	a9 f7       	brne	.-22     	; 0x2b2 <__udivmodhi4_loop>
 2c8:	80 95       	com	r24
 2ca:	90 95       	com	r25
 2cc:	bc 01       	movw	r22, r24
 2ce:	cd 01       	movw	r24, r26
 2d0:	08 95       	ret

000002d2 <itoa>:
 2d2:	fb 01       	movw	r30, r22
 2d4:	9f 01       	movw	r18, r30
 2d6:	e8 94       	clt
 2d8:	42 30       	cpi	r20, 0x02	; 2
 2da:	c4 f0       	brlt	.+48     	; 0x30c <itoa+0x3a>
 2dc:	45 32       	cpi	r20, 0x25	; 37
 2de:	b4 f4       	brge	.+44     	; 0x30c <itoa+0x3a>
 2e0:	4a 30       	cpi	r20, 0x0A	; 10
 2e2:	29 f4       	brne	.+10     	; 0x2ee <itoa+0x1c>
 2e4:	97 fb       	bst	r25, 7
 2e6:	1e f4       	brtc	.+6      	; 0x2ee <itoa+0x1c>
 2e8:	90 95       	com	r25
 2ea:	81 95       	neg	r24
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	64 2f       	mov	r22, r20
 2f0:	77 27       	eor	r23, r23
 2f2:	0e 94 55 01 	call	0x2aa	; 0x2aa <__udivmodhi4>
 2f6:	80 5d       	subi	r24, 0xD0	; 208
 2f8:	8a 33       	cpi	r24, 0x3A	; 58
 2fa:	0c f0       	brlt	.+2      	; 0x2fe <itoa+0x2c>
 2fc:	89 5d       	subi	r24, 0xD9	; 217
 2fe:	81 93       	st	Z+, r24
 300:	cb 01       	movw	r24, r22
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	a1 f7       	brne	.-24     	; 0x2ee <itoa+0x1c>
 306:	16 f4       	brtc	.+4      	; 0x30c <itoa+0x3a>
 308:	5d e2       	ldi	r21, 0x2D	; 45
 30a:	51 93       	st	Z+, r21
 30c:	10 82       	st	Z, r1
 30e:	c9 01       	movw	r24, r18
 310:	0c 94 8a 01 	jmp	0x314	; 0x314 <strrev>

00000314 <strrev>:
 314:	dc 01       	movw	r26, r24
 316:	fc 01       	movw	r30, r24
 318:	67 2f       	mov	r22, r23
 31a:	71 91       	ld	r23, Z+
 31c:	77 23       	and	r23, r23
 31e:	e1 f7       	brne	.-8      	; 0x318 <strrev+0x4>
 320:	32 97       	sbiw	r30, 0x02	; 2
 322:	04 c0       	rjmp	.+8      	; 0x32c <strrev+0x18>
 324:	7c 91       	ld	r23, X
 326:	6d 93       	st	X+, r22
 328:	70 83       	st	Z, r23
 32a:	62 91       	ld	r22, -Z
 32c:	ae 17       	cp	r26, r30
 32e:	bf 07       	cpc	r27, r31
 330:	c8 f3       	brcs	.-14     	; 0x324 <strrev+0x10>
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
