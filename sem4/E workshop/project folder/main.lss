
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000022  00800060  00800060  00000436  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000cf  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005ea  00000000  00000000  00000525  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000222  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000478  00000000  00000000  00000d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000137  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000269  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 38       	cpi	r26, 0x82	; 130
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  74:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  7c:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	80 e3       	ldi	r24, 0x30	; 48
  80:	95 e7       	ldi	r25, 0x75	; 117
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  86:	ad 98       	cbi	0x15, 5	; 21
}
  88:	08 95       	ret

0000008a <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  8a:	af 9a       	sbi	0x15, 7	; 21
}
  8c:	08 95       	ret

0000008e <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  8e:	af 98       	cbi	0x15, 7	; 21
}
  90:	08 95       	ret

00000092 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  92:	ae 98       	cbi	0x15, 6	; 21
}
  94:	08 95       	ret

00000096 <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  96:	ae 9a       	sbi	0x15, 6	; 21
}
  98:	08 95       	ret

0000009a <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  9a:	98 2f       	mov	r25, r24
  9c:	92 95       	swap	r25
  9e:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  a0:	48 2f       	mov	r20, r24
  a2:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  a4:	61 15       	cp	r22, r1
  a6:	71 05       	cpc	r23, r1
  a8:	c9 f4       	brne	.+50     	; 0xdc <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	98 2b       	or	r25, r24
  b0:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  b2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  b4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  b6:	ad 9a       	sbi	0x15, 5	; 21
  b8:	20 e3       	ldi	r18, 0x30	; 48
  ba:	35 e7       	ldi	r19, 0x75	; 117
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  c2:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	48 2b       	or	r20, r24
  ca:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  cc:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ce:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  d0:	ad 9a       	sbi	0x15, 5	; 21
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  d8:	ad 98       	cbi	0x15, 5	; 21
  da:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	71 05       	cpc	r23, r1
  e0:	c1 f4       	brne	.+48     	; 0x112 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	98 2b       	or	r25, r24
  e8:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  ea:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ec:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  ee:	ad 9a       	sbi	0x15, 5	; 21
  f0:	20 e3       	ldi	r18, 0x30	; 48
  f2:	35 e7       	ldi	r19, 0x75	; 117
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
  fa:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	48 2b       	or	r20, r24
 102:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 104:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 106:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 108:	ad 9a       	sbi	0x15, 5	; 21
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 110:	ad 98       	cbi	0x15, 5	; 21
 112:	08 95       	ret

00000114 <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 118:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 11a:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x0F,0);
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
	LCD_Send(0x28,0);
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
}
 13a:	08 95       	ret

0000013c <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	71 05       	cpc	r23, r1
 140:	31 f4       	brne	.+12     	; 0x14e <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 142:	81 58       	subi	r24, 0x81	; 129
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 14c:	08 95       	ret
	}
	else if(y==2)
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	71 05       	cpc	r23, r1
 152:	29 f4       	brne	.+10     	; 0x15e <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 154:	81 54       	subi	r24, 0x41	; 65
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>
 15e:	08 95       	ret

00000160 <conv_func>:
#include<stdlib.h>
#include<math.h>
int b[10],i,des_pos;
char str[10];
void conv_func(int x)
{
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	f8 2e       	mov	r15, r24
 170:	49 2f       	mov	r20, r25
 172:	c1 e8       	ldi	r28, 0x81	; 129
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	02 e7       	ldi	r16, 0x72	; 114
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	e9 e0       	ldi	r30, 0x09	; 9
 17c:	f0 e0       	ldi	r31, 0x00	; 0
	{
	  str[i] = '0';
	}
	else if(b[i]==1)
	{
	  str[i] = '1';
 17e:	91 e3       	ldi	r25, 0x31	; 49
 180:	d9 2e       	mov	r13, r25
  for(i=9;i>=0;i--)
  {
    b[i] = x%2;
	if(b[i]==0)
	{
	  str[i] = '0';
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	e8 2e       	mov	r14, r24
 186:	1d c0       	rjmp	.+58     	; 0x1c2 <conv_func+0x62>
char str[10];
void conv_func(int x)
{
  for(i=9;i>=0;i--)
  {
    b[i] = x%2;
 188:	8f 2d       	mov	r24, r15
 18a:	94 2f       	mov	r25, r20
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodhi4>
 194:	d8 01       	movw	r26, r16
 196:	8d 93       	st	X+, r24
 198:	9c 93       	st	X, r25
	if(b[i]==0)
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	11 f4       	brne	.+4      	; 0x1a2 <conv_func+0x42>
	{
	  str[i] = '0';
 19e:	e8 82       	st	Y, r14
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <conv_func+0x4a>
	}
	else if(b[i]==1)
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <conv_func+0x4a>
	{
	  str[i] = '1';
 1a8:	d8 82       	st	Y, r13
	}
	x = x/2;
 1aa:	8f 2d       	mov	r24, r15
 1ac:	94 2f       	mov	r25, r20
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodhi4>
 1b6:	f6 2e       	mov	r15, r22
 1b8:	47 2f       	mov	r20, r23
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	21 97       	sbiw	r28, 0x01	; 1
 1be:	02 50       	subi	r16, 0x02	; 2
 1c0:	10 40       	sbci	r17, 0x00	; 0
#include<math.h>
int b[10],i,des_pos;
char str[10];
void conv_func(int x)
{
  for(i=9;i>=0;i--)
 1c2:	f7 ff       	sbrs	r31, 7
 1c4:	e1 cf       	rjmp	.-62     	; 0x188 <conv_func+0x28>
 1c6:	f0 93 77 00 	sts	0x0077, r31
 1ca:	e0 93 76 00 	sts	0x0076, r30
	{
	  str[i] = '1';
	}
	x = x/2;
  }
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	08 95       	ret

000001de <main>:
//void timer_init(void);
//void adjust_pwm(int );
//unsigned int req_pos=700,cur_pos=0,pre_pos=0;
int main(void)
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
    DDRA=0x0F;
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	8a bb       	out	0x1a, r24	; 26
	ADMUX=0xC0;
 1ee:	80 ec       	ldi	r24, 0xC0	; 192
 1f0:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0x86;
 1f2:	86 e8       	ldi	r24, 0x86	; 134
 1f4:	86 b9       	out	0x06, r24	; 6
	DDRD=0xff;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	81 bb       	out	0x11, r24	; 17
	PORTD =  0x00;
 1fa:	12 ba       	out	0x12, r1	; 18
//	char str[20];
	for(i=0;i<10;i++)
 1fc:	a0 e6       	ldi	r26, 0x60	; 96
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e8 e7       	ldi	r30, 0x78	; 120
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	04 c0       	rjmp	.+8      	; 0x212 <main+0x34>
	{
	  b[i] = 0;
 20a:	1d 92       	st	X+, r1
 20c:	1d 92       	st	X+, r1
	  str[i] = '\0';
 20e:	11 92       	st	Z+, r1
 210:	01 96       	adiw	r24, 0x01	; 1
	ADMUX=0xC0;
	ADCSRA=0x86;
	DDRD=0xff;
	PORTD =  0x00;
//	char str[20];
	for(i=0;i<10;i++)
 212:	8a 30       	cpi	r24, 0x0A	; 10
 214:	91 05       	cpc	r25, r1
 216:	cc f3       	brlt	.-14     	; 0x20a <main+0x2c>
 218:	90 93 77 00 	sts	0x0077, r25
 21c:	80 93 76 00 	sts	0x0076, r24
 220:	28 e9       	ldi	r18, 0x98	; 152
 222:	e2 2e       	mov	r14, r18
 224:	2a e3       	ldi	r18, 0x3A	; 58
 226:	f2 2e       	mov	r15, r18
	  str[i] = '\0';
	}
 // timer_init();
  while(1)
  {
    ADCSRA |= 0x40;
 228:	00 e6       	ldi	r16, 0x60	; 96
 22a:	1a ee       	ldi	r17, 0xEA	; 234
 22c:	cc e2       	ldi	r28, 0x2C	; 44
 22e:	d1 e0       	ldi	r29, 0x01	; 1
 230:	36 9a       	sbi	0x06, 6	; 6
 232:	c7 01       	movw	r24, r14
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x56>
	_delay_ms(5);
//	pre_pos = cur_pos;
//	cur_pos = ADC;
	LCD_init();
 238:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_init>
 23c:	c8 01       	movw	r24, r16
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x60>
	_delay_ms(20);
	int x=ADC;
 242:	84 b1       	in	r24, 0x04	; 4
 244:	95 b1       	in	r25, 0x05	; 5
	conv_func(x);
 246:	0e 94 b0 00 	call	0x160	; 0x160 <conv_func>
 24a:	88 ee       	ldi	r24, 0xE8	; 232
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	fe 01       	movw	r30, r28
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x72>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 256:	d9 f7       	brne	.-10     	; 0x24e <main+0x70>
 258:	eb cf       	rjmp	.-42     	; 0x230 <main+0x52>

0000025a <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 268:	dc 01       	movw	r26, r24
 26a:	0d 90       	ld	r0, X+
 26c:	00 20       	and	r0, r0
 26e:	e9 f7       	brne	.-6      	; 0x26a <LCD_Send_String+0x10>
 270:	8d 01       	movw	r16, r26
 272:	01 50       	subi	r16, 0x01	; 1
 274:	10 40       	sbci	r17, 0x00	; 0
 276:	08 1b       	sub	r16, r24
 278:	19 0b       	sbc	r17, r25
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	09 c0       	rjmp	.+18     	; 0x292 <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 280:	f7 01       	movw	r30, r14
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	80 81       	ld	r24, Z
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 290:	21 96       	adiw	r28, 0x01	; 1
 292:	c0 17       	cp	r28, r16
 294:	d1 07       	cpc	r29, r17
 296:	a4 f3       	brlt	.-24     	; 0x280 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	08 95       	ret

000002a6 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	c6 56       	subi	r28, 0x66	; 102
 2b4:	d0 40       	sbci	r29, 0x00	; 0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	8c 01       	movw	r16, r24
 2c2:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 2c4:	ba 01       	movw	r22, r20
 2c6:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_GotoXY>
	char t[100];
	if(data<0){
 2ca:	17 ff       	sbrs	r17, 7
 2cc:	0a c0       	rjmp	.+20     	; 0x2e2 <LCD_Print+0x3c>
		char neg[2]={'-',0};
 2ce:	8d e2       	ldi	r24, 0x2D	; 45
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	1a 82       	std	Y+2, r1	; 0x02
		LCD_Send_String(neg);
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Send_String>
		data*=-1;
 2dc:	10 95       	com	r17
 2de:	01 95       	neg	r16
 2e0:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	LCD_Send_String(itoa(data,t,10));
 2e2:	c8 01       	movw	r24, r16
 2e4:	be 01       	movw	r22, r28
 2e6:	6d 5f       	subi	r22, 0xFD	; 253
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	4a e0       	ldi	r20, 0x0A	; 10
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	0e 94 ae 01 	call	0x35c	; 0x35c <itoa>
 2f2:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Send_String>
}	
 2f6:	ca 59       	subi	r28, 0x9A	; 154
 2f8:	df 4f       	sbci	r29, 0xFF	; 255
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	cf 91       	pop	r28
 306:	df 91       	pop	r29
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <__divmodhi4>:
 30e:	97 fb       	bst	r25, 7
 310:	09 2e       	mov	r0, r25
 312:	07 26       	eor	r0, r23
 314:	0a d0       	rcall	.+20     	; 0x32a <__divmodhi4_neg1>
 316:	77 fd       	sbrc	r23, 7
 318:	04 d0       	rcall	.+8      	; 0x322 <__divmodhi4_neg2>
 31a:	0c d0       	rcall	.+24     	; 0x334 <__udivmodhi4>
 31c:	06 d0       	rcall	.+12     	; 0x32a <__divmodhi4_neg1>
 31e:	00 20       	and	r0, r0
 320:	1a f4       	brpl	.+6      	; 0x328 <__divmodhi4_exit>

00000322 <__divmodhi4_neg2>:
 322:	70 95       	com	r23
 324:	61 95       	neg	r22
 326:	7f 4f       	sbci	r23, 0xFF	; 255

00000328 <__divmodhi4_exit>:
 328:	08 95       	ret

0000032a <__divmodhi4_neg1>:
 32a:	f6 f7       	brtc	.-4      	; 0x328 <__divmodhi4_exit>
 32c:	90 95       	com	r25
 32e:	81 95       	neg	r24
 330:	9f 4f       	sbci	r25, 0xFF	; 255
 332:	08 95       	ret

00000334 <__udivmodhi4>:
 334:	aa 1b       	sub	r26, r26
 336:	bb 1b       	sub	r27, r27
 338:	51 e1       	ldi	r21, 0x11	; 17
 33a:	07 c0       	rjmp	.+14     	; 0x34a <__udivmodhi4_ep>

0000033c <__udivmodhi4_loop>:
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	a6 17       	cp	r26, r22
 342:	b7 07       	cpc	r27, r23
 344:	10 f0       	brcs	.+4      	; 0x34a <__udivmodhi4_ep>
 346:	a6 1b       	sub	r26, r22
 348:	b7 0b       	sbc	r27, r23

0000034a <__udivmodhi4_ep>:
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	5a 95       	dec	r21
 350:	a9 f7       	brne	.-22     	; 0x33c <__udivmodhi4_loop>
 352:	80 95       	com	r24
 354:	90 95       	com	r25
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	08 95       	ret

0000035c <itoa>:
 35c:	fb 01       	movw	r30, r22
 35e:	9f 01       	movw	r18, r30
 360:	e8 94       	clt
 362:	42 30       	cpi	r20, 0x02	; 2
 364:	c4 f0       	brlt	.+48     	; 0x396 <itoa+0x3a>
 366:	45 32       	cpi	r20, 0x25	; 37
 368:	b4 f4       	brge	.+44     	; 0x396 <itoa+0x3a>
 36a:	4a 30       	cpi	r20, 0x0A	; 10
 36c:	29 f4       	brne	.+10     	; 0x378 <itoa+0x1c>
 36e:	97 fb       	bst	r25, 7
 370:	1e f4       	brtc	.+6      	; 0x378 <itoa+0x1c>
 372:	90 95       	com	r25
 374:	81 95       	neg	r24
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	64 2f       	mov	r22, r20
 37a:	77 27       	eor	r23, r23
 37c:	0e 94 9a 01 	call	0x334	; 0x334 <__udivmodhi4>
 380:	80 5d       	subi	r24, 0xD0	; 208
 382:	8a 33       	cpi	r24, 0x3A	; 58
 384:	0c f0       	brlt	.+2      	; 0x388 <itoa+0x2c>
 386:	89 5d       	subi	r24, 0xD9	; 217
 388:	81 93       	st	Z+, r24
 38a:	cb 01       	movw	r24, r22
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	a1 f7       	brne	.-24     	; 0x378 <itoa+0x1c>
 390:	16 f4       	brtc	.+4      	; 0x396 <itoa+0x3a>
 392:	5d e2       	ldi	r21, 0x2D	; 45
 394:	51 93       	st	Z+, r21
 396:	10 82       	st	Z, r1
 398:	c9 01       	movw	r24, r18
 39a:	0c 94 cf 01 	jmp	0x39e	; 0x39e <strrev>

0000039e <strrev>:
 39e:	dc 01       	movw	r26, r24
 3a0:	fc 01       	movw	r30, r24
 3a2:	67 2f       	mov	r22, r23
 3a4:	71 91       	ld	r23, Z+
 3a6:	77 23       	and	r23, r23
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <strrev+0x4>
 3aa:	32 97       	sbiw	r30, 0x02	; 2
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <strrev+0x18>
 3ae:	7c 91       	ld	r23, X
 3b0:	6d 93       	st	X+, r22
 3b2:	70 83       	st	Z, r23
 3b4:	62 91       	ld	r22, -Z
 3b6:	ae 17       	cp	r26, r30
 3b8:	bf 07       	cpc	r27, r31
 3ba:	c8 f3       	brcs	.-14     	; 0x3ae <strrev+0x10>
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
