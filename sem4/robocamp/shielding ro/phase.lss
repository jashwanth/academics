
phase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a4  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000070  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a9  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007d  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>

int main(void)
{
	DDRD=(1<<PD5); //OC1A pin (PORT Pin 5) is made as output.
  6c:	80 e2       	ldi	r24, 0x20	; 32
  6e:	81 bb       	out	0x11, r24	; 17
	}
}

void PWM_init(void)
{
	TCCR1A=(1<<COM1A1)|(1<<WGM11); //WGM=1110
  70:	82 e8       	ldi	r24, 0x82	; 130
  72:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10); //clock Source (CS)=101
  74:	8d e1       	ldi	r24, 0x1D	; 29
  76:	8e bd       	out	0x2e, r24	; 46
	ICR1=0x2EE0; //12000 in decimal
  78:	80 ee       	ldi	r24, 0xE0	; 224
  7a:	9e e2       	ldi	r25, 0x2E	; 46
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38
	OCR1A=0x1770; //6000 in decimal
  80:	80 e7       	ldi	r24, 0x70	; 112
  82:	97 e1       	ldi	r25, 0x17	; 23
  84:	9b bd       	out	0x2b, r25	; 43
  86:	8a bd       	out	0x2a, r24	; 42
  88:	ff cf       	rjmp	.-2      	; 0x88 <main+0x1c>

0000008a <PWM_init>:
	}
}

void PWM_init(void)
{
	TCCR1A=(1<<COM1A1)|(1<<WGM11); //WGM=1110
  8a:	82 e8       	ldi	r24, 0x82	; 130
  8c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10); //clock Source (CS)=101
  8e:	8d e1       	ldi	r24, 0x1D	; 29
  90:	8e bd       	out	0x2e, r24	; 46
	ICR1=0x2EE0; //12000 in decimal
  92:	80 ee       	ldi	r24, 0xE0	; 224
  94:	9e e2       	ldi	r25, 0x2E	; 46
  96:	97 bd       	out	0x27, r25	; 39
  98:	86 bd       	out	0x26, r24	; 38
	OCR1A=0x1770; //6000 in decimal
  9a:	80 e7       	ldi	r24, 0x70	; 112
  9c:	97 e1       	ldi	r25, 0x17	; 23
  9e:	9b bd       	out	0x2b, r25	; 43
  a0:	8a bd       	out	0x2a, r24	; 42
  a2:	08 95       	ret

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
