
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003c2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bc  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000069e  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000209  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000582  00000000  00000000  00000dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013b  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000301  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  7a:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle>:
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  82:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	80 e3       	ldi	r24, 0x30	; 48
  86:	95 e7       	ldi	r25, 0x75	; 117
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <toggle+0x6>
	_delay_ms(10);
	PORTC&=0xDF;
  8c:	ad 98       	cbi	0x15, 5	; 21
}
  8e:	08 95       	ret

00000090 <set_rs>:

void set_rs(void)
{
	PORTC|=0x80;
  90:	af 9a       	sbi	0x15, 7	; 21
}
  92:	08 95       	ret

00000094 <clear_rs>:

void clear_rs(void)
{
	PORTC&=0x7F;
  94:	af 98       	cbi	0x15, 7	; 21
}
  96:	08 95       	ret

00000098 <clear_rw>:

void clear_rw(void)
{
	PORTC&=0xBF;
  98:	ae 98       	cbi	0x15, 6	; 21
}
  9a:	08 95       	ret

0000009c <set_rw>:

void set_rw(void)
{
	PORTC|=0x40;
  9c:	ae 9a       	sbi	0x15, 6	; 21
}
  9e:	08 95       	ret

000000a0 <LCD_Send>:

void LCD_Send(char c,int DC)
{
	char unib, lnib;
	unib=c&0xF0;
	unib=unib>>4;
  a0:	98 2f       	mov	r25, r24
  a2:	92 95       	swap	r25
  a4:	9f 70       	andi	r25, 0x0F	; 15
	lnib=c&0x0F;
  a6:	48 2f       	mov	r20, r24
  a8:	4f 70       	andi	r20, 0x0F	; 15
	if(DC==0){
  aa:	61 15       	cp	r22, r1
  ac:	71 05       	cpc	r23, r1
  ae:	c9 f4       	brne	.+50     	; 0xe2 <LCD_Send+0x42>
		PORTC=(PORTC & 0xF0)|unib;
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	98 2b       	or	r25, r24
  b6:	95 bb       	out	0x15, r25	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  b8:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  ba:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  bc:	ad 9a       	sbi	0x15, 5	; 21
  be:	20 e3       	ldi	r18, 0x30	; 48
  c0:	35 e7       	ldi	r19, 0x75	; 117
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_Send+0x24>
	_delay_ms(10);
	PORTC&=0xDF;
  c8:	ad 98       	cbi	0x15, 5	; 21
	if(DC==0){
		PORTC=(PORTC & 0xF0)|unib;
		clear_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	48 2b       	or	r20, r24
  d0:	45 bb       	out	0x15, r20	; 21
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
  d2:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
  d4:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  d6:	ad 9a       	sbi	0x15, 5	; 21
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_Send+0x3a>
	_delay_ms(10);
	PORTC&=0xDF;
  de:	ad 98       	cbi	0x15, 5	; 21
  e0:	08 95       	ret
		PORTC=(PORTC & 0xF0)|lnib;
		clear_rs();
		clear_rw();
		toggle();
	}
	else if(DC==1)
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	71 05       	cpc	r23, r1
  e6:	c1 f4       	brne	.+48     	; 0x118 <LCD_Send+0x78>
	{
		PORTC=(PORTC & 0xF0)|unib;
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	98 2b       	or	r25, r24
  ee:	95 bb       	out	0x15, r25	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
  f0:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
  f2:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
  f4:	ad 9a       	sbi	0x15, 5	; 21
  f6:	20 e3       	ldi	r18, 0x30	; 48
  f8:	35 e7       	ldi	r19, 0x75	; 117
  fa:	c9 01       	movw	r24, r18
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Send+0x5c>
	_delay_ms(10);
	PORTC&=0xDF;
 100:	ad 98       	cbi	0x15, 5	; 21
	{
		PORTC=(PORTC & 0xF0)|unib;
		set_rs();
		clear_rw();
		toggle();
		PORTC=(PORTC & 0xF0)|lnib;
 102:	85 b3       	in	r24, 0x15	; 21
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	48 2b       	or	r20, r24
 108:	45 bb       	out	0x15, r20	; 21
	PORTC&=0xDF;
}

void set_rs(void)
{
	PORTC|=0x80;
 10a:	af 9a       	sbi	0x15, 7	; 21
	PORTC&=0x7F;
}

void clear_rw(void)
{
	PORTC&=0xBF;
 10c:	ae 98       	cbi	0x15, 6	; 21
#include<stdlib.h>


void toggle(void)
{
	PORTC|=0x20;
 10e:	ad 9a       	sbi	0x15, 5	; 21
 110:	c9 01       	movw	r24, r18
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Send+0x72>
	_delay_ms(10);
	PORTC&=0xDF;
 116:	ad 98       	cbi	0x15, 5	; 21
 118:	08 95       	ret

0000011a <LCD_init>:
	}
}

void LCD_init(void)
{
	DDRC=0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x80;
}

void clear_rs(void)
{
	PORTC&=0x7F;
 11e:	af 98       	cbi	0x15, 7	; 21
}

void clear_rw(void)
{
	PORTC&=0xBF;
 120:	ae 98       	cbi	0x15, 6	; 21
void LCD_init(void)
{
	DDRC=0xFF;
	clear_rs();
	clear_rw();
	LCD_Send(0x01,0);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_Send>
	LCD_Send(0x0F,0);
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_Send>
	LCD_Send(0x28,0);
 136:	88 e2       	ldi	r24, 0x28	; 40
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_Send>
}
 140:	08 95       	ret

00000142 <LCD_GotoXY>:
	}
}

void LCD_GotoXY(unsigned int x,unsigned int y)
{
	if(y==1)
 142:	61 30       	cpi	r22, 0x01	; 1
 144:	71 05       	cpc	r23, r1
 146:	31 f4       	brne	.+12     	; 0x154 <LCD_GotoXY+0x12>
	{
		LCD_Send(127+x,0);
 148:	81 58       	subi	r24, 0x81	; 129
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_Send>
 152:	08 95       	ret
	}
	else if(y==2)
 154:	62 30       	cpi	r22, 0x02	; 2
 156:	71 05       	cpc	r23, r1
 158:	29 f4       	brne	.+10     	; 0x164 <LCD_GotoXY+0x22>
	{
		LCD_Send(191+x,0);
 15a:	81 54       	subi	r24, 0x41	; 65
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_Send>
 164:	08 95       	ret

00000166 <pwm_init2>:
void pwm_init2(void)
{
  // initial settings 
	
	//WGM1=1110 
	TCCR1A=(1<<COM1A1)|(1<<WGM11)|(1<<COM1B1); 
 166:	82 ea       	ldi	r24, 0xA2	; 162
 168:	8f bd       	out	0x2f, r24	; 47
	// Clock =12M/1024
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);	
 16a:	8b e1       	ldi	r24, 0x1B	; 27
 16c:	8e bd       	out	0x2e, r24	; 46
	
	ICR1=0; //Top.. decides Time Period 
 16e:	17 bc       	out	0x27, r1	; 39
 170:	16 bc       	out	0x26, r1	; 38
	OCR1A=0;
 172:	1b bc       	out	0x2b, r1	; 43
 174:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;//Compare.. decides ON Time.. Cannot be more than ICR1 value..
 176:	19 bc       	out	0x29, r1	; 41
 178:	18 bc       	out	0x28, r1	; 40
}
 17a:	08 95       	ret

0000017c <PWM_init>:
void PWM_init(void)
{
	// initial settings 
	
	//WGM1=1110 
	TCCR1A=(1<<COM1A1)|(1<<WGM11)|(1<<COM1B1); 
 17c:	82 ea       	ldi	r24, 0xA2	; 162
 17e:	8f bd       	out	0x2f, r24	; 47
	// Clock =12M/1024
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);	
 180:	8b e1       	ldi	r24, 0x1B	; 27
 182:	8e bd       	out	0x2e, r24	; 46
	
	ICR1=256; //Top.. decides Time Period 
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	97 bd       	out	0x27, r25	; 39
 18a:	86 bd       	out	0x26, r24	; 38
	OCR1A=128	;
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	9b bd       	out	0x2b, r25	; 43
 192:	8a bd       	out	0x2a, r24	; 42
	OCR1B=128;//Compare.. decides ON Time.. Cannot be more than ICR1 value..
 194:	99 bd       	out	0x29, r25	; 41
 196:	88 bd       	out	0x28, r24	; 40
 198:	08 95       	ret

0000019a <LCD_Send_String>:
	LCD_Send(0x0F,0);
	LCD_Send(0x28,0);
}

void LCD_Send_String(char *s)
{	
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	7c 01       	movw	r14, r24
	int a,i;
	a=strlen(s);
 1a8:	dc 01       	movw	r26, r24
 1aa:	0d 90       	ld	r0, X+
 1ac:	00 20       	and	r0, r0
 1ae:	e9 f7       	brne	.-6      	; 0x1aa <LCD_Send_String+0x10>
 1b0:	8d 01       	movw	r16, r26
 1b2:	01 50       	subi	r16, 0x01	; 1
 1b4:	10 40       	sbci	r17, 0x00	; 0
 1b6:	08 1b       	sub	r16, r24
 1b8:	19 0b       	sbc	r17, r25
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <LCD_Send_String+0x38>
	for(i=0;i<a;i++)
	{
		LCD_Send(s[i],1);
 1c0:	f7 01       	movw	r30, r14
 1c2:	ec 0f       	add	r30, r28
 1c4:	fd 1f       	adc	r31, r29
 1c6:	80 81       	ld	r24, Z
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_Send>

void LCD_Send_String(char *s)
{	
	int a,i;
	a=strlen(s);
	for(i=0;i<a;i++)
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	c0 17       	cp	r28, r16
 1d4:	d1 07       	cpc	r29, r17
 1d6:	a4 f3       	brlt	.-24     	; 0x1c0 <LCD_Send_String+0x26>
	{
		LCD_Send(s[i],1);
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	08 95       	ret

000001e6 <LCD_Print>:
		LCD_Send(191+x,0);
	}
}

void LCD_Print(int data,unsigned int x,unsigned y)
{
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	c6 56       	subi	r28, 0x66	; 102
 1f4:	d0 40       	sbci	r29, 0x00	; 0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	8c 01       	movw	r16, r24
 202:	cb 01       	movw	r24, r22
	LCD_GotoXY(x,y);
 204:	ba 01       	movw	r22, r20
 206:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_GotoXY>
	char t[100];
	if(data<0){
 20a:	17 ff       	sbrs	r17, 7
 20c:	0a c0       	rjmp	.+20     	; 0x222 <LCD_Print+0x3c>
		char neg[2]={'-',0};
 20e:	8d e2       	ldi	r24, 0x2D	; 45
 210:	89 83       	std	Y+1, r24	; 0x01
 212:	1a 82       	std	Y+2, r1	; 0x02
		LCD_Send_String(neg);
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Send_String>
		data*=-1;
 21c:	10 95       	com	r17
 21e:	01 95       	neg	r16
 220:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	LCD_Send_String(itoa(data,t,10));
 222:	c8 01       	movw	r24, r16
 224:	be 01       	movw	r22, r28
 226:	6d 5f       	subi	r22, 0xFD	; 253
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	4a e0       	ldi	r20, 0x0A	; 10
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	0e 94 9a 01 	call	0x334	; 0x334 <itoa>
 232:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Send_String>
}	
 236:	ca 59       	subi	r28, 0x9A	; 154
 238:	df 4f       	sbci	r29, 0xFF	; 255
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	cf 91       	pop	r28
 246:	df 91       	pop	r29
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <main>:
	ICR1=0; //Top.. decides Time Period 
	OCR1A=0;
	OCR1B=0;//Compare.. decides ON Time.. Cannot be more than ICR1 value..
}
int main()
{
 24e:	9f 92       	push	r9
 250:	af 92       	push	r10
 252:	bf 92       	push	r11
 254:	cf 92       	push	r12
 256:	df 92       	push	r13
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
	DDRD =(1<<PD5)|(1<<PD4); // Pin 5 of PORTD / OC1A pin = output
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	81 bb       	out	0x11, r24	; 17
//    DDRD = 0xff;
	DDRA |= 0x00;
 268:	8a b3       	in	r24, 0x1a	; 26
 26a:	8a bb       	out	0x1a, r24	; 26
void PWM_init(void)
{
	// initial settings 
	
	//WGM1=1110 
	TCCR1A=(1<<COM1A1)|(1<<WGM11)|(1<<COM1B1); 
 26c:	42 ea       	ldi	r20, 0xA2	; 162
 26e:	a4 2e       	mov	r10, r20
	// Clock =12M/1024
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);	
 270:	3b e1       	ldi	r19, 0x1B	; 27
 272:	b3 2e       	mov	r11, r19
	
	ICR1=256; //Top.. decides Time Period 
 274:	c1 2c       	mov	r12, r1
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	d2 2e       	mov	r13, r18
	OCR1A=128	;
 27a:	00 e8       	ldi	r16, 0x80	; 128
 27c:	10 e0       	ldi	r17, 0x00	; 0
	PWM_init();
/*	while(1)
	{
	  PWM_init();
	 }*/
	   ADMUX=0x40;
 27e:	90 e4       	ldi	r25, 0x40	; 64
 280:	99 2e       	mov	r9, r25
 282:	8c e2       	ldi	r24, 0x2C	; 44
 284:	e8 2e       	mov	r14, r24
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	f8 2e       	mov	r15, r24
void PWM_init(void)
{
	// initial settings 
	
	//WGM1=1110 
	TCCR1A=(1<<COM1A1)|(1<<WGM11)|(1<<COM1B1); 
 28a:	af bc       	out	0x2f, r10	; 47
	// Clock =12M/1024
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);	
 28c:	be bc       	out	0x2e, r11	; 46
	
	ICR1=256; //Top.. decides Time Period 
 28e:	d7 bc       	out	0x27, r13	; 39
 290:	c6 bc       	out	0x26, r12	; 38
	OCR1A=128	;
 292:	1b bd       	out	0x2b, r17	; 43
 294:	0a bd       	out	0x2a, r16	; 42
	OCR1B=128;//Compare.. decides ON Time.. Cannot be more than ICR1 value..
 296:	19 bd       	out	0x29, r17	; 41
 298:	08 bd       	out	0x28, r16	; 40
	PWM_init();
/*	while(1)
	{
	  PWM_init();
	 }*/
	   ADMUX=0x40;
 29a:	97 b8       	out	0x07, r9	; 7
	   ADCSRA|=0b11000110;
 29c:	86 b1       	in	r24, 0x06	; 6
 29e:	86 6c       	ori	r24, 0xC6	; 198
 2a0:	86 b9       	out	0x06, r24	; 6
	   while(ADCSRA&0b01000000==0b01000000);
 2a2:	30 99       	sbic	0x06, 0	; 6
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <main+0x54>
	//_delay_ms(500);
	   LCD_init();
 2a6:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_init>
	   int x;
	   x=ADC;
 2aa:	c4 b1       	in	r28, 0x04	; 4
 2ac:	d5 b1       	in	r29, 0x05	; 5
	   LCD_Print(x,1,1);
 2ae:	ce 01       	movw	r24, r28
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Print>
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	97 e2       	ldi	r25, 0x27	; 39
 2c0:	f7 01       	movw	r30, r14
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x74>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c8:	d9 f7       	brne	.-10     	; 0x2c0 <main+0x72>
	   _delay_ms(1000);
	   if(x<10)
 2ca:	2a 97       	sbiw	r28, 0x0a	; 10
 2cc:	54 f5       	brge	.+84     	; 0x322 <main+0xd4>
	   {
	      LCD_init();
 2ce:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_init>
	      LCD_Send_String("obstr detected");
 2d2:	80 e6       	ldi	r24, 0x60	; 96
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Send_String>
void pwm_init2(void)
{
  // initial settings 
	
	//WGM1=1110 
	TCCR1A=(1<<COM1A1)|(1<<WGM11)|(1<<COM1B1); 
 2da:	af bc       	out	0x2f, r10	; 47
	// Clock =12M/1024
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);	
 2dc:	be bc       	out	0x2e, r11	; 46
	
	ICR1=0; //Top.. decides Time Period 
 2de:	17 bc       	out	0x27, r1	; 39
 2e0:	16 bc       	out	0x26, r1	; 38
	OCR1A=0;
 2e2:	1b bc       	out	0x2b, r1	; 43
 2e4:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;//Compare.. decides ON Time.. Cannot be more than ICR1 value..
 2e6:	19 bc       	out	0x29, r1	; 41
 2e8:	18 bc       	out	0x28, r1	; 40
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	97 e2       	ldi	r25, 0x27	; 39
 2ee:	f7 01       	movw	r30, r14
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f6:	d9 f7       	brne	.-10     	; 0x2ee <main+0xa0>
 2f8:	80 e1       	ldi	r24, 0x10	; 16
 2fa:	97 e2       	ldi	r25, 0x27	; 39
 2fc:	f7 01       	movw	r30, r14
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 302:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 304:	d9 f7       	brne	.-10     	; 0x2fc <main+0xae>
 306:	80 e1       	ldi	r24, 0x10	; 16
 308:	97 e2       	ldi	r25, 0x27	; 39
 30a:	f7 01       	movw	r30, r14
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 310:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 312:	d9 f7       	brne	.-10     	; 0x30a <main+0xbc>
 314:	80 e1       	ldi	r24, 0x10	; 16
 316:	97 e2       	ldi	r25, 0x27	; 39
 318:	f7 01       	movw	r30, r14
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 320:	d9 f7       	brne	.-10     	; 0x318 <main+0xca>
void PWM_init(void)
{
	// initial settings 
	
	//WGM1=1110 
	TCCR1A=(1<<COM1A1)|(1<<WGM11)|(1<<COM1B1); 
 322:	af bc       	out	0x2f, r10	; 47
	// Clock =12M/1024
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);	
 324:	be bc       	out	0x2e, r11	; 46
	
	ICR1=256; //Top.. decides Time Period 
 326:	d7 bc       	out	0x27, r13	; 39
 328:	c6 bc       	out	0x26, r12	; 38
	OCR1A=128	;
 32a:	1b bd       	out	0x2b, r17	; 43
 32c:	0a bd       	out	0x2a, r16	; 42
	OCR1B=128;//Compare.. decides ON Time.. Cannot be more than ICR1 value..
 32e:	19 bd       	out	0x29, r17	; 41
 330:	08 bd       	out	0x28, r16	; 40
 332:	ab cf       	rjmp	.-170    	; 0x28a <main+0x3c>

00000334 <itoa>:
 334:	fb 01       	movw	r30, r22
 336:	9f 01       	movw	r18, r30
 338:	e8 94       	clt
 33a:	42 30       	cpi	r20, 0x02	; 2
 33c:	c4 f0       	brlt	.+48     	; 0x36e <itoa+0x3a>
 33e:	45 32       	cpi	r20, 0x25	; 37
 340:	b4 f4       	brge	.+44     	; 0x36e <itoa+0x3a>
 342:	4a 30       	cpi	r20, 0x0A	; 10
 344:	29 f4       	brne	.+10     	; 0x350 <itoa+0x1c>
 346:	97 fb       	bst	r25, 7
 348:	1e f4       	brtc	.+6      	; 0x350 <itoa+0x1c>
 34a:	90 95       	com	r25
 34c:	81 95       	neg	r24
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	64 2f       	mov	r22, r20
 352:	77 27       	eor	r23, r23
 354:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 358:	80 5d       	subi	r24, 0xD0	; 208
 35a:	8a 33       	cpi	r24, 0x3A	; 58
 35c:	0c f0       	brlt	.+2      	; 0x360 <itoa+0x2c>
 35e:	89 5d       	subi	r24, 0xD9	; 217
 360:	81 93       	st	Z+, r24
 362:	cb 01       	movw	r24, r22
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	a1 f7       	brne	.-24     	; 0x350 <itoa+0x1c>
 368:	16 f4       	brtc	.+4      	; 0x36e <itoa+0x3a>
 36a:	5d e2       	ldi	r21, 0x2D	; 45
 36c:	51 93       	st	Z+, r21
 36e:	10 82       	st	Z, r1
 370:	c9 01       	movw	r24, r18
 372:	0c 94 bb 01 	jmp	0x376	; 0x376 <strrev>

00000376 <strrev>:
 376:	dc 01       	movw	r26, r24
 378:	fc 01       	movw	r30, r24
 37a:	67 2f       	mov	r22, r23
 37c:	71 91       	ld	r23, Z+
 37e:	77 23       	and	r23, r23
 380:	e1 f7       	brne	.-8      	; 0x37a <strrev+0x4>
 382:	32 97       	sbiw	r30, 0x02	; 2
 384:	04 c0       	rjmp	.+8      	; 0x38e <strrev+0x18>
 386:	7c 91       	ld	r23, X
 388:	6d 93       	st	X+, r22
 38a:	70 83       	st	Z, r23
 38c:	62 91       	ld	r22, -Z
 38e:	ae 17       	cp	r26, r30
 390:	bf 07       	cpc	r27, r31
 392:	c8 f3       	brcs	.-14     	; 0x386 <strrev+0x10>
 394:	08 95       	ret

00000396 <__udivmodhi4>:
 396:	aa 1b       	sub	r26, r26
 398:	bb 1b       	sub	r27, r27
 39a:	51 e1       	ldi	r21, 0x11	; 17
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <__udivmodhi4_ep>

0000039e <__udivmodhi4_loop>:
 39e:	aa 1f       	adc	r26, r26
 3a0:	bb 1f       	adc	r27, r27
 3a2:	a6 17       	cp	r26, r22
 3a4:	b7 07       	cpc	r27, r23
 3a6:	10 f0       	brcs	.+4      	; 0x3ac <__udivmodhi4_ep>
 3a8:	a6 1b       	sub	r26, r22
 3aa:	b7 0b       	sbc	r27, r23

000003ac <__udivmodhi4_ep>:
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	5a 95       	dec	r21
 3b2:	a9 f7       	brne	.-22     	; 0x39e <__udivmodhi4_loop>
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	bc 01       	movw	r22, r24
 3ba:	cd 01       	movw	r24, r26
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
